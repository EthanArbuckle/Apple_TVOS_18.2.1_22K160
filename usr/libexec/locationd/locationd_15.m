void sub_10064D440( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  sub_1008AF1C4(v41);
  v43 = *(void *)(v39 + 56);
  *(void *)(v39 + 56) = 0LL;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
  }
  v44 = *(void *)(v39 + 48);
  *(void *)(v39 + 48) = 0LL;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
  }
  v45 = *(void *)(v39 + 40);
  *(void *)(v39 + 40) = 0LL;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
  }
  v46 = *(void *)(v39 + 32);
  *(void *)(v39 + 32) = 0LL;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
  }
  v47 = *(void *)(v39 + 24);
  *(void *)(v39 + 24) = 0LL;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
  }
  v48 = *(void *)(v39 + 16);
  *(void *)(v39 + 16) = 0LL;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  v49 = *(void *)(v39 + 8);
  *(void *)(v39 + 8) = 0LL;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  _Unwind_Resume(a1);
}

void sub_10064D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onSettingsNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      v12 = "";
      __int16 v13 = 2082;
      v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onSettingsNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_10064D768((_DWORD *)a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064D748( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064D768(_DWORD *a1)
{
  char v2 = sub_1002A832C(v68, (uint64_t)off_101939630, a1 + 220);
  char v3 = v2;
  v4 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((v3 & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }

  if ((v2 & 1) == 0) {
LABEL_6:
  }
    *((void *)a1 + 110) = 0x405F400000000000LL;
LABEL_7:
  sub_1002F0B04(&v68);
  char v7 = sub_1002A832C(v68, (uint64_t)off_101939638, a1 + 222);
  char v8 = v7;
  v9 = v69;
  if (v69)
  {
    int v10 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((v8 & 1) != 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  if ((v7 & 1) == 0) {
LABEL_12:
  }
    *((void *)a1 + 111) = 0x40F86A0000000000LL;
LABEL_13:
  sub_1002F0B04(&v68);
  char v12 = sub_1002A832C(v68, (uint64_t)off_101939640, a1 + 224);
  char v13 = v12;
  v14 = v69;
  if (v69)
  {
    __int16 v15 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v13 & 1) != 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }

  if ((v12 & 1) == 0) {
LABEL_18:
  }
    *((void *)a1 + 112) = 0x404E000000000000LL;
LABEL_19:
  sub_1002F0B04(&v68);
  char v17 = sub_1002A832C(v68, (uint64_t)off_101939648, a1 + 226);
  char v18 = v17;
  v19 = v69;
  if (v69)
  {
    v20 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v18 & 1) != 0) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }

  if ((v17 & 1) == 0) {
LABEL_24:
  }
    *((void *)a1 + 113) = 0x4066800000000000LL;
LABEL_25:
  sub_1002F0B04(&v68);
  char v22 = sub_1002A7D20(v68, (uint64_t)off_101939650, a1 + 228);
  char v23 = v22;
  v24 = v69;
  if (v69)
  {
    v25 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((v23 & 1) != 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }

  if ((v22 & 1) == 0) {
LABEL_30:
  }
    a1[228] = 2;
LABEL_31:
  sub_1002F0B04(&v68);
  char v27 = sub_1002A832C(v68, (uint64_t)off_101939658, a1 + 230);
  char v28 = v27;
  v29 = v69;
  if (v69)
  {
    v30 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if ((v28 & 1) != 0) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
  }

  if ((v27 & 1) == 0) {
LABEL_36:
  }
    *((void *)a1 + 115) = 0x404E000000000000LL;
LABEL_37:
  sub_1002F0B04(&v68);
  char v32 = sub_1002A832C(v68, (uint64_t)off_101939660, a1 + 232);
  char v33 = v32;
  v34 = v69;
  if (v69)
  {
    v35 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if ((v33 & 1) != 0) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }

  if ((v32 & 1) == 0) {
LABEL_42:
  }
    *((void *)a1 + 116) = 0x40AC200000000000LL;
LABEL_43:
  sub_1002F0B04(&v68);
  char v37 = sub_1002A832C(v68, (uint64_t)off_101939668, a1 + 234);
  char v38 = v37;
  v39 = v69;
  if (v69)
  {
    v40 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v38 & 1) != 0) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
  }

  if ((v37 & 1) == 0) {
LABEL_48:
  }
    *((void *)a1 + 117) = 0x4082C00000000000LL;
LABEL_49:
  sub_1002F0B04(&v68);
  char v42 = sub_1002A832C(v68, (uint64_t)off_101939670, a1 + 236);
  char v43 = v42;
  v44 = v69;
  if (v69)
  {
    v45 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if ((v43 & 1) != 0) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }

  if ((v42 & 1) == 0) {
LABEL_54:
  }
    *((void *)a1 + 118) = 0x40AC200000000000LL;
LABEL_55:
  sub_1002F0B04(&v68);
  char v47 = sub_1002A832C(v68, (uint64_t)off_101939678, a1 + 238);
  char v48 = v47;
  v49 = v69;
  if (v69)
  {
    v50 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      if ((v48 & 1) != 0) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }

  if ((v47 & 1) == 0) {
LABEL_60:
  }
    *((void *)a1 + 119) = 0x3FE8000000000000LL;
LABEL_61:
  sub_1002F0B04(&v68);
  char v52 = sub_1002A832C(v68, (uint64_t)off_101939680, a1 + 240);
  char v53 = v52;
  v54 = v69;
  if (v69)
  {
    v55 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if ((v53 & 1) != 0) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
  }

  if ((v52 & 1) == 0) {
LABEL_66:
  }
    *((void *)a1 + 120) = 0x404E000000000000LL;
LABEL_67:
  sub_1002F0B04(&v68);
  char v57 = sub_1002A832C(v68, (uint64_t)off_101939688, a1 + 242);
  char v58 = v57;
  v59 = v69;
  if (v69)
  {
    v60 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      if ((v58 & 1) != 0) {
        goto LABEL_73;
      }
      goto LABEL_72;
    }
  }

  if ((v57 & 1) == 0) {
LABEL_72:
  }
    *((void *)a1 + 121) = 0x4092C00000000000LL;
LABEL_73:
  sub_1002F0B04(&v68);
  v62 = a1 + 244;
  char v63 = sub_1002A832C(v68, (uint64_t)off_101939690, v62);
  char v64 = v63;
  v65 = v69;
  if (!v69) {
    goto LABEL_77;
  }
  v66 = (unint64_t *)&v69->__shared_owners_;
  do
    unint64_t v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if ((v64 & 1) != 0) {
      return;
    }
  }

  else
  {
LABEL_77:
    if ((v63 & 1) != 0) {
      return;
    }
  }

  void *v62 = 0x408C200000000000LL;
}

void sub_10064DD98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10064DDDC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onLocationNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100654E00(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064DF94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064DFB4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onStatusNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_10065478C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064E16C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064E18C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onTelephonyNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    v9 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onTelephonyNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006558B8(v6, v7, a2);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064E338( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064E358(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onManagerNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_100655DE8(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064E508( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064E528(uint64_t a1)
{
}

void sub_10064E530(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    char v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onActiveModeTimer",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onActiveModeTimer, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_10064FCF8(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064E6D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064E6F0(uint64_t a1)
{
}

void sub_10064E6F8(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  char v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Continuous location timer fired", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Continuous location timer fired",  v10,  2);
    int v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::onContinuousLocationTimer()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (*(int *)(a1 + 816) >= 1)
  {
    if (*(double *)(a1 + 484) >= 0.0)
    {
      sub_100650644(a1, a1 + 464, 1);
    }

    else
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      char v3 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Failed to get any fix while in continuous location mode",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        v10[0] = 0;
        LODWORD(v9) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Failed to get any fix while in continuous location mode",  v10,  v9);
        v5 = (uint8_t *)v4;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::onContinuousLocationTimer()", "%s\n", v4);
        if (v5 != buf) {
          free(v5);
        }
      }
    }

    int v6 = *(_DWORD *)(a1 + 816);
    sub_10065244C(a1);
    if (v6 == 2) {
      sub_1006527C0(a1, 1);
    }
  }

id sub_10064E9FC(uint64_t a1)
{
  return sub_10064EA04(*(void *)(a1 + 32));
}

id sub_10064EA04(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  char v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ReachabilityTimer fired", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "ReachabilityTimer fired",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::onReachabilityTimer()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:6];
    [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:6 registrationInfo:0];
  }

  return [*(id *)(a1 + 872) setNextFireDelay:1.79769313e308];
}

void sub_10064EBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    char v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onImmediateCheckNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    __int16 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      unint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onImmediateCheckNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 64) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10065627C;
  v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064EDCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064EDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847A80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    char v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTimeZoneManager::onLocationTimeZoneActiveNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847A80);
    }
    __int16 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      unint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTimeZoneManager::onLocationTimeZoneActiveNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 64) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100656284;
  v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064EFEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10064F00C(uint64_t a1, double *a2)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  v4 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)buf = 134217984;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Setting start timer to fire after %.2fs",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v7 = *(void *)a2;
    int v10 = 134217984;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Setting start timer to fire after %.2fs",  COERCE_DOUBLE(&v10));
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::setStartTimer(const CFTimeInterval &)", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return [*(id *)(a1 + 832) setNextFireDelay:*a2];
}

id sub_10064F1CC(uint64_t a1, double *a2)
{
  if (*a2 == 1.79769313e308) {
    return sub_1006B6294(*(void *)(a1 + 840));
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = *a2;
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  double v7 = Current + v6;
  int v8 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *a2;
    *(_DWORD *)buf = 134218240;
    double v19 = v7;
    __int16 v20 = 2048;
    double v21 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Setting active mode timer to fire at %.2f (%.2fs away)",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    double v10 = *a2;
    int v14 = 134218240;
    double v15 = v7;
    __int16 v16 = 2048;
    double v17 = v10;
    LODWORD(v13) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Setting active mode timer to fire at %.2f (%.2fs away)",  COERCE_DOUBLE(&v14),  v13);
    id v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::setActiveModeTimer(const CFTimeInterval &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return sub_1006B6014(*(void *)(a1 + 840), v7);
}

id sub_10064F408(uint64_t a1, double *a2)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  v4 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)buf = 134217984;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Setting continuous location timer to fire after %.2fs",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v7 = *(void *)a2;
    int v10 = 134217984;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Setting continuous location timer to fire after %.2fs",  COERCE_DOUBLE(&v10));
    double v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::setContinuousLocationTimer(const CFTimeInterval &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return [*(id *)(a1 + 848) setNextFireDelay:*a2];
}

void sub_10064F5C8(uint64_t a1)
{
  *(_BYTE *)(a1 + 824) = 1;
  if (sub_1002958AC() != 1)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v5 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Location services are disabled; stopping automatic time zone",
        buf,
        2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    LOWORD(v23[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Location services are disabled; stopping automatic time zone",
      v23,
      2,
      v23[0]);
    goto LABEL_54;
  }

  if (sub_1008B1A38(a1 + 624) != 3)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v7 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Time Zone system service disabled; stopping automatic time zone",
        buf,
        2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    LOWORD(v23[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Time Zone system service disabled; stopping automatic time zone",
      v23,
      2,
      v23[0]);
LABEL_54:
    __int16 v16 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::checkStatus()", "%s\n", v6);
    if (v16 != buf) {
      free(v16);
    }
LABEL_32:
    uint64_t v8 = sub_1002F8DDC();
    sub_1002A66DC(v8);
    uint64_t v9 = sub_1002F8DDC();
    sub_1002A66DC(v9);
    uint64_t v10 = sub_1002F8DDC();
    sub_1002A66DC(v10);
    uint64_t v11 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v11 + 944LL))(v11);
    *(_DWORD *)(a1 + 820) = 0;
    sub_100652E98(a1);
    id v12 = &off_101939768;
    goto LABEL_46;
  }

  int v2 = *(_DWORD *)(a1 + 856);
  if (v2 == -1)
  {
    int v3 = off_101939770();
    if (v3) {
      int v2 = 2;
    }
    else {
      int v2 = 1;
    }
    if (*(_DWORD *)(a1 + 856) != 2 && v3) {
      *(void *)(a1 + 144) = 0LL;
    }
    *(_DWORD *)(a1 + 856) = v2;
  }

  if (v2 == 2)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v13 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Automatic time zone starting in active mode",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Automatic time zone starting in active mode",  v23,  2);
      __int16 v20 = (uint8_t *)v19;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::checkStatus()", "%s\n", v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    sub_10065321C(a1);
  }

  else if (v2 == 1)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v4 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Automatic time zone starting in passive mode",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Automatic time zone starting in passive mode",  v23,  2);
      __int16 v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::checkStatus()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    sub_10065304C(a1);
  }

  else
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v14 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Automatic time zone disabled", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Automatic time zone disabled",  v23,  2);
      __int16 v22 = (uint8_t *)v21;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::checkStatus()", "%s\n", v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    sub_100652E98(a1);
  }

  id v12 = &off_101939778;
LABEL_46:
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  if (qword_1019979B8)
  {
    uint64_t v15 = off_101939760();
    ((void (*)(uint64_t))*v12)(v15);
  }

void sub_10064FCF8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 816)) {
    sub_10064FD3C(a1, 1, 0);
  }
}

void sub_10064FD3C(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 144) = 0LL;
  int v6 = *(_DWORD *)(a1 + 816);
  if (v6 < 1)
  {
    if (sub_1002958AC())
    {
      if (sub_1008B1A38(a1 + 624) == 3)
      {
        int v8 = *(_DWORD *)(a1 + 856);
        if (v8 == -1)
        {
          int v9 = off_101939770();
          if (v9) {
            int v8 = 2;
          }
          else {
            int v8 = 1;
          }
          if (*(_DWORD *)(a1 + 856) != 2 && v9) {
            *(void *)(a1 + 144) = 0LL;
          }
          *(_DWORD *)(a1 + 856) = v8;
        }

        if (v8 == 2 || (a3 & 1) != 0)
        {
          if (qword_1019349E0 != -1) {
            dispatch_once(&qword_1019349E0, &stru_101847AA0);
          }
          __int16 v16 = (os_log_s *)qword_1019349E8;
          if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Entering continuous location mode",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019349E0 != -1) {
              dispatch_once(&qword_1019349E0, &stru_101847AA0);
            }
            LOWORD(v29[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Entering continuous location mode",  v29,  2);
            v25 = (uint8_t *)v24;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, BOOL)",  "%s\n",  v24);
            if (v25 != buf) {
              free(v25);
            }
          }

          if (off_101939788())
          {
            *(_BYTE *)(a1 + 1024) = 0;
            [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
            double v17 = (_BYTE *)(a1 + 1025);
            uint64_t v18 = 1LL;
          }

          else
          {
            if (qword_1019349E0 != -1) {
              dispatch_once(&qword_1019349E0, &stru_101847AA0);
            }
            double v19 = (os_log_s *)qword_1019349E8;
            if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Timezone is not confirmed.", buf, 2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349E0 != -1) {
                dispatch_once(&qword_1019349E0, &stru_101847AA0);
              }
              LOWORD(v29[0]) = 0;
              LODWORD(v28) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Timezone is not confirmed.",  v29,  v28);
              char v27 = (uint8_t *)v26;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, BOOL)",  "%s\n",  v26);
              if (v27 != buf) {
                free(v27);
              }
            }

            double v17 = (_BYTE *)(a1 + 1024);
            *(_BYTE *)(a1 + 1025) = 0;
            [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1];
            uint64_t v18 = 0LL;
          }

          *double v17 = 1;
          [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:v18 registrationInfo:0];
          [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:19 registrationInfo:0];
          *(_DWORD *)(a1 + 816) = a2;
          goto LABEL_69;
        }

        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v10 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "In bystander-only mode; not starting continuous location",
            buf,
            2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(v29[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "In bystander-only mode; not starting continuous location",
          v29,
          2,
          v29[0]);
      }

      else
      {
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        int v14 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Time Zone system service disabled; not starting continuous location",
            buf,
            2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(v29[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Time Zone system service disabled; not starting continuous location",
          v29,
          2,
          v29[0]);
      }
    }

    else
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v13 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Location services are disabled; not starting continuous location",
          buf,
          2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v29[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Location services are disabled; not starting continuous location",
        v29,
        2,
        v29[0]);
    }

    uint64_t v15 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, BOOL)",  "%s\n",  v11);
    if (v15 != buf) {
      free(v15);
    }
    return;
  }

  if (a2 == 2 && v6 == 1)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v7 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Transition from continuous active to continuous active with retry",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v29[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Transition from continuous active to continuous active with retry",  v29,  2);
      double v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, BOOL)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    *(_DWORD *)(a1 + 816) = 2;
    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  id v12 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Already in continuous location mode; not re-entering",
      buf,
      2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    LOWORD(v29[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Already in continuous location mode; not re-entering",
      v29,
      2);
    uint64_t v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, BOOL)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  if (a3) {
LABEL_69:
  }
    sub_10064F408(a1, (double *)(a1 + 960));
}

void sub_100650644(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v5 = (a3 & 1) != 0
    || *(_DWORD *)(a1 + 816)
    || *(double *)(a1 + 172) <= 0.0
    || vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 228)) >= *(double *)(a1 + 936);
  double v6 = *(double *)(a2 + 20);
  if (v6 < 0.0)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v7 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Received invalid location for time zone",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Received invalid location for time zone",  &__p,  2);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v8);
      goto LABEL_168;
    }

    return;
  }

  if (v6 > *(double *)(a1 + 888))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      double v11 = *(double *)(a2 + 20);
      uint64_t v12 = *(void *)(a1 + 888);
      *(_DWORD *)buf = 134218240;
      double v147 = v11;
      __int16 v148 = 2048;
      uint64_t v149 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning Disregarding location with accuracy: %.1f (> %.1f)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      std::string::size_type v13 = *(void *)(a2 + 20);
      std::string::size_type v14 = *(void *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v13;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v14;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Disregarding location with accuracy: %.1f (> %.1f)",  COERCE_DOUBLE(&__p),  v131);
      int v9 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v15);
      goto LABEL_168;
    }

    return;
  }

  if (!sub_1002954D0(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    __int16 v22 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_FAULT))
    {
      double v23 = *(double *)(a2 + 4);
      uint64_t v24 = *(void *)(a2 + 12);
      *(_DWORD *)buf = 134283777;
      double v147 = v23;
      __int16 v148 = 2049;
      uint64_t v149 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "Received invalid location <%{private}+.8f,%{private}+.8f> for time zone",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      std::string::size_type v94 = *(void *)(a2 + 4);
      std::string::size_type v95 = *(void *)(a2 + 12);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v94;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v95;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  17LL,  "Received invalid location <%{private}+.8f,%{private}+.8f> for time zone",  &__p,  22);
      int v9 = (uint8_t *)v96;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v96);
      goto LABEL_168;
    }

    return;
  }

  if (*(double *)(a2 + 44) > *(double *)(a1 + 880))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    __int16 v16 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = *(double *)(a2 + 44);
      uint64_t v18 = *(void *)(a1 + 888);
      *(_DWORD *)buf = 134218240;
      double v147 = v17;
      __int16 v148 = 2048;
      uint64_t v149 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Disregarding location for timezone with speed: %.1f (> %.1f)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      std::string::size_type v19 = *(void *)(a2 + 44);
      std::string::size_type v20 = *(void *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v19;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v20;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Disregarding location for timezone with speed: %.1f (> %.1f)",  COERCE_DOUBLE(&__p),  v131);
      int v9 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v21);
      goto LABEL_168;
    }

    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  v25 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    double v26 = *(double *)(a2 + 4);
    uint64_t v27 = *(void *)(a2 + 12);
    uint64_t v28 = *(void *)(a2 + 20);
    uint64_t v29 = *(void *)(a2 + 76);
    uint64_t v30 = *(void *)(a2 + 88);
    int v31 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)buf = 134284801;
    double v147 = v26;
    __int16 v148 = 2049;
    uint64_t v149 = v27;
    __int16 v150 = 2048;
    uint64_t v151 = v28;
    __int16 v152 = 2048;
    uint64_t v153 = v29;
    __int16 v154 = 2048;
    uint64_t v155 = v30;
    __int16 v156 = 1024;
    int v157 = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#Notice Handling new location <%{private}+.8lf,%{private}+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d",  buf,  0x3Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    std::string::size_type v97 = *(void *)(a2 + 4);
    std::string::size_type v98 = *(void *)(a2 + 12);
    uint64_t v99 = *(void *)(a2 + 20);
    uint64_t v100 = *(void *)(a2 + 76);
    uint64_t v101 = *(void *)(a2 + 88);
    int v102 = *(_DWORD *)(a2 + 84);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v97;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v98;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v139 = v99;
    __int16 v140 = 2048;
    uint64_t v141 = v100;
    __int16 v142 = 2048;
    uint64_t v143 = v101;
    __int16 v144 = 1024;
    int v145 = v102;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Notice Handling new location <%{private}+.8lf,%{private}+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d",  &__p,  58);
    v104 = (uint8_t *)v103;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v103);
    if (v104 != buf) {
      free(v104);
    }
  }

  double v32 = *(double *)(a1 + 80);
  double v33 = -1.0;
  if (v32 >= 0.0)
  {
    double v33 = sub_100D2EC74(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 156), *(double *)(a1 + 164));
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v34 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v35 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      double v147 = v33;
      __int16 v148 = 2048;
      uint64_t v149 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Distance travelled from last point is %.3lf; previous point's distance from border was %.3lf",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      std::string::size_type v105 = *(void *)(a1 + 80);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v33;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v105;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Distance travelled from last point is %.3lf; previous point's distance from border was %.3lf",
        COERCE_DOUBLE(&__p),
        v131);
      v107 = (uint8_t *)v106;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v106);
      if (v107 != buf) {
        free(v107);
      }
    }

    double v32 = *(double *)(a1 + 80);
  }

  if (v32 > -1.0 && v33 + *(double *)(a2 + 20) > v32 && *(int *)(a2 + 84) <= 66)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    unint64_t v36 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      double v37 = *(double *)(a2 + 4);
      uint64_t v38 = *(void *)(a2 + 12);
      uint64_t v39 = *(void *)(a2 + 20);
      uint64_t v40 = *(void *)(a2 + 76);
      uint64_t v41 = *(void *)(a2 + 88);
      int v42 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)buf = 134284801;
      double v147 = v37;
      __int16 v148 = 2049;
      uint64_t v149 = v38;
      __int16 v150 = 2048;
      uint64_t v151 = v39;
      __int16 v152 = 2048;
      uint64_t v153 = v40;
      __int16 v154 = 2048;
      uint64_t v155 = v41;
      __int16 v156 = 1024;
      int v157 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Ignoring unsure location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d",  buf,  0x3Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      std::string::size_type v43 = *(void *)(a2 + 4);
      std::string::size_type v44 = *(void *)(a2 + 12);
      uint64_t v45 = *(void *)(a2 + 20);
      uint64_t v46 = *(void *)(a2 + 76);
      uint64_t v47 = *(void *)(a2 + 88);
      int v48 = *(_DWORD *)(a2 + 84);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v43;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v44;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
      uint64_t v139 = v45;
      __int16 v140 = 2048;
      uint64_t v141 = v46;
      __int16 v142 = 2048;
      uint64_t v143 = v47;
      __int16 v144 = 1024;
      int v145 = v48;
      LODWORD(v131) = 58;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Ignoring unsure location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d",  &__p,  *(void *)&v131);
      int v9 = (uint8_t *)v49;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v49);
      goto LABEL_168;
    }

    return;
  }

  if (v32 >= 0.0 && v33 <= v32)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v50 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "We're still inside our last fence.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v131) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "We're still inside our last fence.",  &__p,  *(void *)&v131);
      v109 = (uint8_t *)v108;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v108);
      if (v109 != buf) {
        free(v109);
      }
    }

    else {
      uint64_t v51 = *(unsigned __int8 *)(a1 + 143);
    }
    if (!v51)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v74 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_INFO,  "we've previously confirmed our timezone",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "we've previously confirmed our timezone",  &__p,  *(void *)&v131);
        v113 = (uint8_t *)v112;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v112);
        if (v113 != buf) {
          free(v113);
        }
      }

      return;
    }

    if (*(double *)(a1 + 88) <= 0.0)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v75 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_FAULT,  "Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  17LL,  "Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.",  &__p,  *(void *)&v131);
        v115 = (uint8_t *)v114;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v114);
        if (v115 != buf) {
          free(v115);
        }
      }

      if (v5) {
        goto LABEL_125;
      }
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v79 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
      {
        double v80 = *(double *)(a2 + 4);
        uint64_t v81 = *(void *)(a2 + 12);
        uint64_t v82 = *(void *)(a2 + 76);
        *(_DWORD *)buf = 134284033;
        double v147 = v80;
        __int16 v148 = 2049;
        uint64_t v149 = v81;
        __int16 v150 = 2048;
        uint64_t v151 = v82;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 == -1) {
        goto LABEL_164;
      }
    }

    else
    {
      double v67 = sub_100D2EC74(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 312), *(double *)(a1 + 320));
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v68 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        uint64_t v69 = *(void *)(a1 + 88);
        uint64_t v70 = *(void *)(a2 + 20);
        *(_DWORD *)buf = 134218496;
        double v147 = v67;
        __int16 v148 = 2048;
        uint64_t v149 = v69;
        __int16 v150 = 2048;
        uint64_t v151 = v70;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "Distance travelled from last unconfirmed point is %.3lf; previous point's distance from border was %.3lf; acc is %.3lf",
          buf,
          0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        std::string::size_type v116 = *(void *)(a1 + 88);
        uint64_t v117 = *(void *)(a2 + 20);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134218496;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v67;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v116;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v139 = v117;
        LODWORD(v131) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Distance travelled from last unconfirmed point is %.3lf; previous point's distance from border was %.3lf; acc is %.3lf",
          COERCE_DOUBLE(&__p),
          v131,
          v132);
        v119 = (uint8_t *)v118;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v118);
        if (v119 != buf) {
          free(v119);
        }
      }

      double v71 = *(double *)(a1 + 88);
      double v72 = *(double *)(a2 + 20);
      if (v71 - v67 > v72)
      {
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        v73 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "time zone confirmed (horizontalAccuracy has improved faster than we've moved)",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349E0 != -1) {
            dispatch_once(&qword_1019349E0, &stru_101847AA0);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v131) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "time zone confirmed (horizontalAccuracy has improved faster than we've moved)",  &__p,  *(void *)&v131);
          v128 = (uint8_t *)v127;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v127);
          if (v128 != buf) {
            free(v128);
          }
        }

        sub_100653DE8(a1, (const std::string *)(a1 + 120));
        if (*(char *)(a1 + 143) < 0)
        {
          **(_BYTE **)(a1 + 120) = 0;
          *(void *)(a1 + 128) = 0LL;
        }

        else
        {
          *(_BYTE *)(a1 + 120) = 0;
          *(_BYTE *)(a1 + 143) = 0;
        }

        *(void *)(a1 + 88) = 0xBFF0000000000000LL;
        return;
      }

      if (v67 + v71 < v72)
      {
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        v83 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "#Warning we can't possibly confirm our timezone, uncertainty too large",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349E0 != -1) {
            dispatch_once(&qword_1019349E0, &stru_101847AA0);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v131) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning we can't possibly confirm our timezone, uncertainty too large",  &__p,  *(void *)&v131);
          int v9 = (uint8_t *)v84;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v84);
          goto LABEL_168;
        }

        return;
      }

      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v85 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_INFO,  "we can't optimize, find out if this position confirms our location",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "we can't optimize, find out if this position confirms our location",  &__p,  *(void *)&v131);
        v130 = (uint8_t *)v129;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v129);
        if (v130 != buf) {
          free(v130);
        }
      }

      if (v5)
      {
LABEL_125:
        sub_10065403C(a1, (std::string *)(a1 + 120), a2);
        return;
      }

      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v86 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
      {
        double v87 = *(double *)(a2 + 4);
        uint64_t v88 = *(void *)(a2 + 12);
        uint64_t v89 = *(void *)(a2 + 76);
        *(_DWORD *)buf = 134284033;
        double v147 = v87;
        __int16 v148 = 2049;
        uint64_t v149 = v88;
        __int16 v150 = 2048;
        uint64_t v151 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 == -1)
      {
LABEL_164:
        std::string::size_type v90 = *(void *)(a2 + 4);
        std::string::size_type v91 = *(void *)(a2 + 12);
        uint64_t v92 = *(void *)(a2 + 76);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284033;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v90;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v91;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v139 = v92;
        LODWORD(v131) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed",  &__p,  *(void *)&v131);
        int v9 = (uint8_t *)v93;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v93);
LABEL_168:
        if (v9 != buf) {
          free(v9);
        }
        return;
      }
    }

LABEL_216:
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
    goto LABEL_164;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  char v52 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "We've travelled outside our fence.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v131) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "We've travelled outside our fence.",  &__p,  *(void *)&v131);
    v111 = (uint8_t *)v110;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v110);
    if (v111 != buf) {
      free(v111);
    }
  }

  if (v5)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v53 = *(void *)a1;
    if (!*(void *)a1)
    {
      uint64_t v53 = sub_10040BAC0();
      *(void *)a1 = v53;
    }

    if ((sub_10040BF3C(v53, a2, &__p, (double *)&v133) & 1) != 0)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v54 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(double *)&data = COERCE_DOUBLE(&__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          data = (std::string *)__p.__r_.__value_.__l.__data_;
        }
        *(_DWORD *)buf = 136315138;
        double v147 = *(double *)&data;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Time zone from database was %s", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v134 = 136315138;
        v135 = p_p;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Time zone from database was %s",  (const char *)&v134);
        v122 = (uint8_t *)v121;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v121);
        if (v122 != buf) {
          free(v122);
        }
      }

      sub_10065403C(a1, &__p, a2);
      *(void *)(a1 + 80) = v133;
      __int128 v56 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 168) = v56;
      __int128 v57 = *(_OWORD *)(a2 + 64);
      __int128 v58 = *(_OWORD *)(a2 + 80);
      __int128 v59 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 232) = v58;
      *(_OWORD *)(a1 + 216) = v57;
      *(_OWORD *)(a1 + 200) = v59;
      __int128 v61 = *(_OWORD *)(a2 + 112);
      __int128 v60 = *(_OWORD *)(a2 + 128);
      __int128 v62 = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 292) = v62;
      *(_OWORD *)(a1 + 264) = v61;
      *(_OWORD *)(a1 + 280) = v60;
    }

    else
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v76 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
      {
        double v77 = *(double *)(a2 + 4);
        uint64_t v78 = *(void *)(a2 + 12);
        *(_DWORD *)buf = 134283777;
        double v147 = v77;
        __int16 v148 = 2049;
        uint64_t v149 = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "#Warning Couldn't get time zone for location <%{private}+.8lf,%{private}+.8lf>",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        v123 = *(std::string **)(a2 + 4);
        uint64_t v124 = *(void *)(a2 + 12);
        int v134 = 134283777;
        v135 = v123;
        __int16 v136 = 2049;
        uint64_t v137 = v124;
        LODWORD(v131) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Couldn't get time zone for location <%{private}+.8lf,%{private}+.8lf>",  &v134,  *(void *)&v131);
        v126 = (uint8_t *)v125;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)",  "%s\n",  v125);
        if (v126 != buf) {
          free(v126);
        }
      }
    }

    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  char v63 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    double v64 = *(double *)(a2 + 4);
    uint64_t v65 = *(void *)(a2 + 12);
    uint64_t v66 = *(void *)(a2 + 76);
    *(_DWORD *)buf = 134284033;
    double v147 = v64;
    __int16 v148 = 2049;
    uint64_t v149 = v65;
    __int16 v150 = 2048;
    uint64_t v151 = v66;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 == -1) {
      goto LABEL_164;
    }
    goto LABEL_216;
  }

          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          goto LABEL_218;
        }

        std::string::size_type v14 = "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FindMyDevice.framework";
        p_buf = &buf;
        __int16 v16 = 83LL;
LABEL_75:
        if (!memcmp(p_buf, v14, v16)) {
          goto LABEL_110;
        }
        goto LABEL_76;
      }

      p_buf = &buf;
    }

    std::string::size_type v14 = "com.apple.locationd.bundle-/System/Library/LocationBundles/FindMyDevice.framework";
    __int16 v16 = 81LL;
    goto LABEL_75;
  }

  if (!sub_100923574(a2, (uint64_t)v98))
  {
    sub_1009E3714(a1 + 14, a2);
    goto LABEL_38;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  BOOL v5 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    sub_100923668((uint64_t)&v110, (std::stringbuf::string_type *)__dst);
    double v6 = __dst[23] >= 0 ? __dst : *(_BYTE **)__dst;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Fence:Add sending kNotificationFenceSetupCompleted - existed, fence, %{private}s",  (uint8_t *)&buf,  0xCu);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__dst, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    double v80 = qword_101934878;
    sub_100923668((uint64_t)&v110, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v81 = &buf;
    }
    else {
      uint64_t v81 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v140.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v80,  0LL,  "Fence:Add sending kNotificationFenceSetupCompleted - existed, fence, %{private}s",  &v140,  12);
    v83 = v82;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v83);
    if (v83 != __dst) {
      free(v83);
    }
  }

  *(_DWORD *)__dst = 3;
  (*(void (**)(uint64_t *, _BYTE *, std::string *, void, uint64_t, void))(*a1 + 152))( a1,  __dst,  &v110,  0LL,  0xFFFFFFFFLL,  0LL);
  uint64_t v7 = sub_1009C2014((uint64_t)(a1 + 37), (uint64_t)&__str, 1);
  LODWORD(buf.__r_.__value_.__l.__data_) = v7;
  if (v7 < 2)
  {
    *(_DWORD *)__dst = 8;
    sub_10065EAA8((uint64_t)a1, (uint64_t)&__str, (int *)&buf, (int *)__dst, 0xFFFFFFFFLL);
  }

  else
  {
    if (v7 == 2)
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      __int128 v56 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__dst = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "#Warning monitoring for identical pre-existing fence hasn't started yet",  __dst,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_204;
      }
      bzero(__dst, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      LOWORD(v140.__r_.__value_.__l.__data_) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning monitoring for identical pre-existing fence hasn't started yet",  &v140,  v97);
      uint64_t v10 = (char *)v96;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v96);
    }

    else
    {
      if (v7 != 3) {
        goto LABEL_204;
      }
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v8 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__dst = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Fence Status Not Set used for analytics received in FenceManager",  __dst,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_204;
      }
      bzero(__dst, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      LOWORD(v140.__r_.__value_.__l.__data_) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence Status Not Set used for analytics received in FenceManager",  &v140,  v97);
      uint64_t v10 = (char *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v9);
    }

    if (v10 != __dst) {
      free(v10);
    }
  }

  uint64_t v18 = 0LL;
LABEL_217:
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }

  std::string::size_type v116 = v182;
  if (v182)
  {
    uint64_t v117 = (unint64_t *)&v182->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  if (SHIBYTE(v224) < 0) {
    operator delete((void *)v223);
  }
LABEL_226:
  if (*((void *)&v190 + 1))
  {
    *(void *)&v191 = *((void *)&v190 + 1);
    operator delete(*((void **)&v190 + 1));
  }

  *(void *)buf = &v189;
  sub_100D73874((void ***)buf);
  return v18;
}

  v93 = *(_DWORD *)(a2 + 236);
  *v2 |= 0x2000000000000uLL;
  *(_DWORD *)(a1 + 236) = v93;
  if ((*v3 & 0x2000) != 0) {
    goto LABEL_217;
  }
  return result;
}

  PB::TextFormatter::format(this, "triggerClusterDeescalationWindowBoundary", *(_DWORD *)(a1 + 304));
  int v9 = *(void *)(a1 + 364);
  if ((v9 & 8) != 0) {
    goto LABEL_217;
  }
LABEL_211:
  if ((v9 & 0x10) != 0) {
LABEL_212:
  }
    PB::TextFormatter::format(this, "ushaPeakPressureThreshold", *(float *)(a1 + 312));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 236), 0x523u);
  if ((*v4 & 0x2000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 92), 0x524u);
  }
  return result;
}

          *(void *)(a1 + 56) = v31;
          goto LABEL_274;
        case 2u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v170, v25, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v34 >= *v13)
                {
                  uint64_t v35 = (char *)*v12;
                  unint64_t v36 = (v34 - (_BYTE *)*v12) >> 2;
                  double v37 = v36 + 1;
                  uint64_t v38 = *v13 - (void)v35;
                  if (v38 >> 1 > v37) {
                    double v37 = v38 >> 1;
                  }
                  else {
                    uint64_t v39 = v37;
                  }
                  if (v39)
                  {
                    uint64_t v40 = (char *)sub_10000956C((uint64_t)v13, v39);
                    uint64_t v35 = *(char **)(a1 + 32);
                    v34 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    uint64_t v40 = 0LL;
                  }

                  uint64_t v41 = &v40[4 * v36];
                  *(_DWORD *)uint64_t v41 = 0;
                  int v42 = v41 + 4;
                  while (v34 != v35)
                  {
                    std::string::size_type v43 = *((_DWORD *)v34 - 1);
                    v34 -= 4;
                    *((_DWORD *)v41 - 1) = v43;
                    v41 -= 4;
                  }

                  *(void *)(a1 + 32) = v41;
                  *(void *)(a1 + 40) = v42;
                  *(void *)(a1 + 48) = &v40[4 * v39];
                  if (v35) {
                    operator delete(v35);
                  }
                  v34 = v42;
                }

                else
                {
                  *(_DWORD *)v34 = 0;
                  v34 += 4;
                }

                *(void *)(a1 + 40) = v34;
                uint64_t v45 = *((void *)this + 1);
                std::string::size_type v44 = *((void *)this + 2);
                uint64_t v46 = *(void *)this;
                uint64_t v47 = v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v44;
                if (v47)
                {
                  int v48 = 0;
                  v49 = 0;
                  v55 = 0LL;
                  if (v44 <= v45) {
                    v50 = *((void *)this + 1);
                  }
                  else {
                    v50 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v50 == v45) {
                      goto LABEL_190;
                    }
                    uint64_t v51 = v45++;
                    char v52 = *(_BYTE *)(v46 + v51);
                    *((void *)this + 1) = v45;
                    v55 |= (unint64_t)(v52 & 0x7F) << v48;
                    if ((v52 & 0x80) == 0) {
                      break;
                    }
                    v48 += 7;
                    uint64_t v47 = v49++ > 8;
                    if (v47)
                    {
                      LODWORD(v55) = 0;
                      goto LABEL_71;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v55) = 0;
                  }
LABEL_71:
                  __int128 v56 = v51 + 1;
                }

                else
                {
                  uint64_t v53 = 0;
                  v54 = 0;
                  v55 = 0LL;
                  while (1)
                  {
                    __int128 v56 = v45 + 1;
                    *((void *)this + 1) = v45 + 1;
                    __int128 v57 = *(_BYTE *)(v46 + v45);
                    v55 |= (unint64_t)(v57 & 0x7F) << v53;
                    if ((v57 & 0x80) == 0) {
                      break;
                    }
                    v53 += 7;
                    uint64_t v45 = v56;
                    uint64_t v47 = v54++ > 8;
                    if (v47)
                    {
                      LODWORD(v55) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v34 - 1) = v55;
              }

              while (v56 < v44 && !*((_BYTE *)this + 24));
            }

            goto LABEL_191;
          }

          v115 = *(char **)(a1 + 40);
          v114 = *(void *)(a1 + 48);
          if ((unint64_t)v115 >= v114)
          {
            double v131 = (char *)*v12;
            double v132 = (v115 - (_BYTE *)*v12) >> 2;
            uint64_t v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62) {
LABEL_284:
            }
              sub_100007008();
            int v134 = v114 - (void)v131;
            if (v134 >> 1 > v133) {
              uint64_t v133 = v134 >> 1;
            }
            else {
              v135 = v133;
            }
            if (v135)
            {
              __int16 v136 = (char *)sub_10000956C((uint64_t)v13, v135);
              double v131 = *(char **)(a1 + 32);
              v115 = *(char **)(a1 + 40);
            }

            else
            {
              __int16 v136 = 0LL;
            }

            uint64_t v143 = &v136[4 * v132];
            *(_DWORD *)uint64_t v143 = 0;
            std::string::size_type v116 = v143 + 4;
            while (v115 != v131)
            {
              __int16 v144 = *((_DWORD *)v115 - 1);
              v115 -= 4;
              *((_DWORD *)v143 - 1) = v144;
              v143 -= 4;
            }

            *(void *)(a1 + 32) = v143;
            *(void *)(a1 + 40) = v116;
            *(void *)(a1 + 48) = &v136[4 * v135];
            if (v131) {
              operator delete(v131);
            }
          }

          else
          {
            *(_DWORD *)v115 = 0;
            std::string::size_type v116 = v115 + 4;
          }

          *(void *)(a1 + 40) = v116;
          int v145 = *((void *)this + 1);
          v146 = *((void *)this + 2);
          double v147 = *(void *)this;
          __int16 v148 = 0;
          uint64_t v149 = 0;
          if (v145 <= 0xFFFFFFFFFFFFFFF5LL && v145 + 10 <= v146)
          {
            uint64_t v153 = 0LL;
            while (1)
            {
              __int16 v154 = v145 + 1;
              *((void *)this + 1) = v145 + 1;
              uint64_t v155 = *(_BYTE *)(v147 + v145);
              v153 |= (unint64_t)(v155 & 0x7F) << v148;
              if ((v155 & 0x80) == 0) {
                goto LABEL_273;
              }
              v148 += 7;
              int v145 = v154;
              uint64_t v47 = v149++ > 8;
              if (v47) {
                goto LABEL_269;
              }
            }
          }

          uint64_t v153 = 0LL;
          if (v146 <= v145) {
            v146 = *((void *)this + 1);
          }
          while (v146 != v145)
          {
            uint64_t v151 = v145 + 1;
            __int16 v152 = *(_BYTE *)(v147 + v145);
            *((void *)this + 1) = v151;
            v153 |= (unint64_t)(v152 & 0x7F) << v148;
            if ((v152 & 0x80) == 0) {
              goto LABEL_271;
            }
            v148 += 7;
            int v145 = v151;
            uint64_t v47 = v149++ > 8;
            if (v47) {
              goto LABEL_269;
            }
          }

          goto LABEL_270;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          __int128 v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v58);
          goto LABEL_193;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          __int128 v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v59);
          goto LABEL_193;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          __int128 v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_193;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x20u;
          __int128 v61 = *((void *)this + 1);
          __int128 v62 = *((void *)this + 2);
          char v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
          {
            double v64 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = 0LL;
            do
            {
              double v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              uint64_t v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_219;
              }
              v64 += 7;
              __int128 v61 = v67;
              uint64_t v47 = v65++ > 8;
            }

            while (!v47);
LABEL_173:
            LODWORD(v66) = 0;
            goto LABEL_219;
          }

          uint64_t v117 = 0;
          v118 = 0;
          uint64_t v66 = 0LL;
          if (v62 <= v61) {
            __int128 v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v119 = v61 + 1;
              v120 = *(_BYTE *)(v63 + v61);
              *((void *)this + 1) = v119;
              v66 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                __int128 v61 = v119;
                uint64_t v47 = v118++ > 8;
                if (v47) {
                  goto LABEL_173;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }

            break;
          }

          v4 = *((void *)this + 1);
          BOOL v5 = *((void *)this + 2);
          double v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_216;
      }
    }

    __int16 v22 = 0;
    double v23 = 0;
    uint64_t v18 = 0LL;
    if (v4 > v5) {
      BOOL v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((void *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        uint64_t v18 = 0LL;
        goto LABEL_21;
      }
    }

    double v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

void sub_100652420( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065244C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 816))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v2 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Exiting continuous location mode", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Exiting continuous location mode",  v13,  2);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::exitContinuousLocationMode()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    *(_BYTE *)(a1 + 1024) = 0;
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
    *(_BYTE *)(a1 + 1025) = 0;
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1];
    [*(id *)(*(void *)(a1 + 32) + 16) unregister:*(void *)(*(void *)(a1 + 32) + 8) forNotification:19];
    *(_DWORD *)(a1 + 816) = 0;
    *(void *)buf = 0x7FEFFFFFFFFFFFFFLL;
    sub_10064F408(a1, (double *)buf);
    *(_DWORD *)(a1 + 464) = 0xFFFF;
    *(void *)(a1 + 476) = 0LL;
    *(void *)(a1 + 468) = 0LL;
    __asm { FMOV            V1.2D, #-1.0 }

    *(_OWORD *)(a1 + 484) = xmmword_1012E0070;
    *(_OWORD *)(a1 + 500) = _Q1;
    *(_OWORD *)(a1 + 516) = _Q1;
    *(_OWORD *)(a1 + 532) = _Q1;
    *(_DWORD *)(a1 + 548) = 0;
    *(void *)(a1 + 552) = 0xBFF0000000000000LL;
    *(void *)(a1 + 568) = 0LL;
    *(void *)(a1 + 560) = 0LL;
    *(_DWORD *)(a1 + 576) = 0;
    *(void *)(a1 + 580) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 588) = 0x7FFFFFFF;
    *(void *)(a1 + 592) = 0LL;
    *(void *)(a1 + 608) = 0LL;
    *(void *)(a1 + 600) = 0LL;
    *(_BYTE *)(a1 + 616) = 0;
  }

  else
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v8 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Not in continuous location mode; not exiting",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Not in continuous location mode; not exiting",
        v13,
        2);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::exitContinuousLocationMode()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_1006527C0(uint64_t a1, int a2)
{
  if ((a2 & 1) != 0) {
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 1024) || *(_BYTE *)(a1 + 1025))
  {
    if (*(int *)(a1 + 816) >= 1)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v4 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Got location unavailable while in continuous location mode; ignoring location failure",
          buf,
          2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        *(_WORD *)v25 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Got location unavailable while in continuous location mode; ignoring location failure",
          v25,
          2,
          *(void *)v25);
LABEL_43:
        uint64_t v15 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::locationFailed(BOOL)", "%s\n", v5);
        if (v15 != buf) {
          free(v15);
        }
        return;
      }

      return;
    }

id sub_100652E98(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  int v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Notice Stopping automatic time zone", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Notice Stopping automatic time zone",  v6,  2);
    BOOL v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::stop()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_10065244C(a1);
  sub_1006536C0(a1);
  *(void *)buf = 0x7FEFFFFFFFFFFFFFLL;
  return sub_10064F00C(a1, (double *)buf);
}

void sub_10065304C(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  int v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Starting automatic time zone in passive mode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Starting automatic time zone in passive mode",  v5,  2);
    v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::startPassive()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  if (*(_BYTE *)(a1 + 825)) {
    sub_1006536C0(a1);
  }
  if (!*(_DWORD *)(a1 + 816))
  {
    *(_BYTE *)(a1 + 1024) = 0;
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
    *(_BYTE *)(a1 + 1025) = 0;
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1];
  }

void sub_10065321C(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  int v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Starting automatic time zone in active mode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Starting automatic time zone in active mode",  v9,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::startActive()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100653500((_BYTE *)a1);
  if (*(double *)(a1 + 80) < 0.0 || *(_DWORD *)(a1 + 820))
  {
    sub_10064FD3C(a1, 2, 0);
  }

  else
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v3 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Already have previous border distance and timestamp",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Already have previous border distance and timestamp",  v9,  v8);
      BOOL v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::startActive()", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

_BYTE *sub_100653500(_BYTE *result)
{
  if (!result[825])
  {
    uint64_t v1 = (uint64_t)result;
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v2 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Entering active location mode", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Entering active location mode",  v5,  2);
      v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::enterActiveMode()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    sub_10064F1CC(v1, (double *)(v1 + 944));
    *(_BYTE *)(v1 + 825) = 1;
    return [*(id *)(*(void *)(v1 + 24) + 16) register:*(void *)(*(void *)(v1 + 24) + 8) forNotification:4 registrationInfo:0];
  }

  return result;
}

id sub_1006536C0(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  int v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Exiting active location mode", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Exiting active location mode",  v6,  2);
    BOOL v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::exitActiveMode()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(void *)buf = 0x7FEFFFFFFFFFFFFFLL;
  sub_10064F1CC(a1, (double *)buf);
  *(_BYTE *)(a1 + 825) = 0;
  return [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:4];
}

BOOL sub_100653878(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double *a4)
{
  if (*(double *)(a3 + 20) > *(double *)(a1 + 888))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v4 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "We ran point-in-polygon on a location we threw out anyway!",  buf,  2u);
    }

    BOOL v5 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      LOWORD(v36) = 0;
      LODWORD(v35) = 2;
      double v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  17LL,  "We ran point-in-polygon on a location we threw out anyway!",  &v36,  *(void *)&v35);
      int v9 = v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTimeZoneManager::shouldSetSystemTimeZone(const std::string &, const CLDaemonLocation &, double &)",  "%s\n",  v7);
LABEL_10:
      if (v9 != buf) {
        free(v9);
      }
      return 0LL;
    }

    return result;
  }

  uint64_t v13 = (char *)(a1 + 96);
  uint64_t v14 = a2[23];
  size_t v15 = *((void *)a2 + 1);
  if ((v14 & 0x80u) == 0LL) {
    uint64_t v16 = a2[23];
  }
  else {
    uint64_t v16 = *((void *)a2 + 1);
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 119);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0LL) {
    uint64_t v17 = *(void *)(a1 + 104);
  }
  if (v16 == v17)
  {
    if (v18 >= 0) {
      uint64_t v19 = (char *)(a1 + 96);
    }
    else {
      uint64_t v19 = *(char **)v13;
    }
    if ((v14 & 0x80) != 0)
    {
      goto LABEL_33;
    }

    if (!a2[23]) {
      return 1LL;
    }
    while (*a2 == *v19)
    {
      ++a2;
      ++v19;
      if (!--v14) {
        return 1LL;
      }
    }
  }

  if (!v17) {
    return 1LL;
  }
LABEL_33:
  HIBYTE(v35) = 0;
  uint64_t v21 = *(void *)a1;
  if (!*(void *)a1)
  {
    uint64_t v21 = sub_10040BAC0();
    *(void *)a1 = v21;
  }

  if ((sub_100411290(v21, v13, (double *)(a3 + 4), (double *)(a3 + 12), (char *)&v35 + 7, a4) & 1) == 0)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v29 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = v13;
      uint64_t v31 = *(void *)(a3 + 20);
      *(_DWORD *)buf = 136315394;
      double v41 = *(double *)&v30;
      __int16 v42 = 2048;
      uint64_t v43 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Current time zone %s not in database; changing time because of acceptable location accuracy %.3f",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v32 = *(void *)(a3 + 20);
      int v36 = 136315394;
      double v37 = *(double *)&v13;
      __int16 v38 = 2048;
      uint64_t v39 = v32;
      LODWORD(v35) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Current time zone %s not in database; changing time because of acceptable location accuracy %.3f",
        (const char *)&v36,
        v35);
      v34 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::shouldSetSystemTimeZone(const std::string &, const CLDaemonLocation &, double &)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    return 1LL;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  uint64_t v22 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    double v23 = *a4;
    uint64_t v24 = *(void *)(a3 + 20);
    *(_DWORD *)buf = 134218240;
    double v41 = v23;
    __int16 v42 = 2048;
    uint64_t v43 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#Warning Distance from previous time zone's border is %.3f; accuracy of position is %.3f",
      buf,
      0x16u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    double v25 = *a4;
    uint64_t v26 = *(void *)(a3 + 20);
    int v36 = 134218240;
    double v37 = v25;
    __int16 v38 = 2048;
    uint64_t v39 = v26;
    LODWORD(v35) = 22;
    double v27 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Distance from previous time zone's border is %.3f; accuracy of position is %.3f",
            COERCE_DOUBLE(&v36),
            v35);
    int v9 = v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::shouldSetSystemTimeZone(const std::string &, const CLDaemonLocation &, double &)",  "%s\n",  v27);
    goto LABEL_10;
  }

  return result;
}

BOOL sub_100653DE8(uint64_t a1, const std::string *a2)
{
  int v2 = a2;
  if ((a2->__r_.__value_.__s.__size_ & 0x80u) != 0) {
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)a2, 0x8000100u);
  if (v4)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    BOOL v5 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
    {
      if ((v2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v6 = v2;
      }
      else {
        double v6 = (const std::string *)v2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Telling timed the time zone is %s.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      if ((v2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v8 = v2;
      }
      else {
        uint64_t v8 = (const std::string *)v2->__r_.__value_.__r.__words[0];
      }
      int v11 = 136315138;
      uint64_t v12 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Telling timed the time zone is %s.",  (const char *)&v11);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::setSystemTimeZone(const std::string &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    off_101939780((uint64_t)@"Location", (uint64_t)v4);
    std::string::operator=((std::string *)(a1 + 96), v2);
    *(CFAbsoluteTime *)(a1 + 144) = CFAbsoluteTimeGetCurrent();
    if (*(_BYTE *)(a1 + 825)) {
      sub_10064F1CC(a1, (double *)(a1 + 944));
    }
    CFRelease(v4);
  }

  return v4 != 0LL;
}

BOOL sub_10065403C(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 88) = 0xBFF0000000000000LL;
  double v6 = (void *)(a1 + 88);
  BOOL v7 = sub_100653878(a1, (unsigned __int8 *)a2, a3, (double *)(a1 + 88));
  if (!v7)
  {
    std::string::operator=((std::string *)(a1 + 120), a2);
    __int128 v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 308) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 324) = v23;
    __int128 v24 = *(_OWORD *)(a3 + 80);
    __int128 v26 = *(_OWORD *)(a3 + 32);
    __int128 v25 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 372) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 388) = v24;
    *(_OWORD *)(a1 + 340) = v26;
    *(_OWORD *)(a1 + 356) = v25;
    __int128 v28 = *(_OWORD *)(a3 + 112);
    __int128 v27 = *(_OWORD *)(a3 + 128);
    __int128 v29 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a1 + 420) = v28;
    *(_OWORD *)(a1 + 436) = v27;
    *(_OWORD *)(a1 + 404) = v29;
    return v7;
  }

  *(_DWORD *)(a1 + 820) = 0;
  if (!*(_DWORD *)(a1 + 816))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v8 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning bystander location, used to set time zone, billed to 'TimeZone' system service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      *(_WORD *)uint64_t v53 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning bystander location, used to set time zone, billed to 'TimeZone' system service",  v53,  2);
      double v41 = (uint8_t *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::setTimeZoneIfAppropriate(const std::string &, const CLDaemonLocation &)",  "%s\n",  v40);
      if (v41 != buf) {
        free(v41);
      }
    }

    sub_1008B1A40(a1 + 624);
  }

  if (sub_1002920F0())
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    int v9 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = *(void *)(a3 + 4);
      uint64_t v12 = *(void *)(a3 + 12);
      uint64_t v13 = *(void *)(a3 + 20);
      uint64_t v14 = *(void *)(a3 + 76);
      int v15 = *(_DWORD *)(a3 + 84);
      *(_DWORD *)buf = 136316419;
      __int128 v56 = v10;
      __int16 v57 = 2049;
      uint64_t v58 = v11;
      __int16 v59 = 2049;
      uint64_t v60 = v12;
      __int16 v61 = 2048;
      uint64_t v62 = v13;
      __int16 v63 = 2048;
      uint64_t v64 = v14;
      __int16 v65 = 1024;
      int v66 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Notice Potentially setting system time zone to %s based on <%{private}+.8lf,%{private}+.8lf> acc %.2f timestamp %.2f confidence %d",  buf,  0x3Au);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_41;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = *(void *)(a3 + 4);
    uint64_t v18 = *(void *)(a3 + 12);
    uint64_t v19 = *(void *)(a3 + 20);
    uint64_t v20 = *(void *)(a3 + 76);
    int v21 = *(_DWORD *)(a3 + 84);
    *(_DWORD *)uint64_t v53 = 136316419;
    *(void *)&v53[4] = v16;
    *(_WORD *)&v53[12] = 2049;
    *(void *)&v53[14] = v17;
    *(_WORD *)&v53[22] = 2049;
    *(_WORD *)v54 = 2048;
    *(void *)&v54[2] = v19;
    *(_WORD *)&v54[10] = 2048;
    *(void *)&v54[12] = v20;
    *(_WORD *)&v54[20] = 1024;
    *(_DWORD *)&v54[22] = v21;
    LODWORD(v52) = 58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Notice Potentially setting system time zone to %s based on <%{private}+.8lf,%{private}+.8lf> acc %.2f timestamp % .2f confidence %d",  v53,  v52,  *(_OWORD *)v53,  *(void *)&v53[16],  v18,  *(_OWORD *)v54,  *(_OWORD *)&v54[16]);
  }

  else
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v30 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v31 = a2;
      }
      else {
        uint64_t v31 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446210;
      __int128 v56 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#Notice Potentially setting system time zone to %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v42 = a2;
      }
      else {
        __int16 v42 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v53 = 136446210;
      *(void *)&v53[4] = v42;
      LODWORD(v52) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Notice Potentially setting system time zone to %{public}s",  v53,  v52);
      std::string::size_type v44 = (uint8_t *)v43;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::setTimeZoneIfAppropriate(const std::string &, const CLDaemonLocation &)",  "%s\n",  v43);
      if (v44 != buf) {
        free(v44);
      }
    }

    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v32 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v33 = a2;
      }
      else {
        double v33 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      uint64_t v34 = *(void *)(a3 + 4);
      uint64_t v35 = *(void *)(a3 + 12);
      uint64_t v36 = *(void *)(a3 + 20);
      uint64_t v37 = *(void *)(a3 + 76);
      int v38 = *(_DWORD *)(a3 + 84);
      *(_DWORD *)buf = 136316419;
      __int128 v56 = v33;
      __int16 v57 = 2049;
      uint64_t v58 = v34;
      __int16 v59 = 2049;
      uint64_t v60 = v35;
      __int16 v61 = 2048;
      uint64_t v62 = v36;
      __int16 v63 = 2048;
      uint64_t v64 = v37;
      __int16 v65 = 1024;
      int v66 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Potentially setting system time zone to %s based on <%{private}+.8lf,%{private}+.8lf> acc %.2f timestamp %.2f confidence %d",  buf,  0x3Au);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_41;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v45 = a2;
    }
    else {
      uint64_t v45 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v46 = *(void *)(a3 + 4);
    uint64_t v47 = *(void *)(a3 + 12);
    uint64_t v48 = *(void *)(a3 + 20);
    uint64_t v49 = *(void *)(a3 + 76);
    int v50 = *(_DWORD *)(a3 + 84);
    *(_DWORD *)uint64_t v53 = 136316419;
    *(void *)&v53[4] = v45;
    *(_WORD *)&v53[12] = 2049;
    *(void *)&v53[14] = v46;
    *(_WORD *)&v53[22] = 2049;
    *(_WORD *)v54 = 2048;
    *(void *)&v54[2] = v48;
    *(_WORD *)&v54[10] = 2048;
    *(void *)&v54[12] = v49;
    *(_WORD *)&v54[20] = 1024;
    *(_DWORD *)&v54[22] = v50;
    LODWORD(v52) = 58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Potentially setting system time zone to %s based on <%{private}+.8lf,%{private}+.8lf> acc %.2f timestamp %.2f confidence %d",  v53,  v52,  *(void *)v53,  *(_OWORD *)&v53[8],  v47,  *(void *)v54,  *(void *)&v54[8],  *(void *)&v54[16],  *(void *)&v54[24]);
  }

  uint64_t v51 = (uint8_t *)v22;
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeZoneManager::setTimeZoneIfAppropriate(const std::string &, const CLDaemonLocation &)",  "%s\n",  v22);
  if (v51 != buf) {
    free(v51);
  }
LABEL_41:
  sub_100653DE8(a1, a2);
  if (*(char *)(a1 + 143) < 0)
  {
    **(_BYTE **)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 143) = 0;
  }

  void *v6 = 0xBFF0000000000000LL;
  return v7;
}

void sub_10065478C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 8)
  {
    if (*(_BYTE *)a4)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v13 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Got airplane entered notification", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(v30) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got airplane entered notification",  &v30,  2);
        int v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonSta tus_Type::NotificationData &)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }
    }

    else
    {
      int v16 = *(_DWORD *)(a1 + 856);
      if (v16)
      {
        if (v16 == -1)
        {
          int v17 = off_101939770();
          if (v17) {
            int v18 = 2;
          }
          else {
            int v18 = 1;
          }
          if (*(_DWORD *)(a1 + 856) != 2 && v17) {
            *(void *)(a1 + 144) = 0LL;
          }
          *(_DWORD *)(a1 + 856) = v18;
        }

        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v19 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Got airplane mode exited notification; entering continuous location mode",
            buf,
            2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349E0 != -1) {
            dispatch_once(&qword_1019349E0, &stru_101847AA0);
          }
          LOWORD(v30) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got airplane mode exited notification; entering continuous location mode",
            &v30,
            2);
          __int128 v25 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonS tatus_Type::NotificationData &)",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }

        sub_10064F00C(a1, (double *)(a1 + 928));
        sub_10064FD3C(a1, 2, 1);
      }
    }
  }

  else if (*a3 == 6 && *(int *)(a1 + 820) >= 1 && *(_DWORD *)(a4 + 4) != 0)
  {
    int v6 = off_101939770();
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    if (*(_DWORD *)(a1 + 856) != 2 && v6) {
      *(void *)(a1 + 144) = 0LL;
    }
    *(_DWORD *)(a1 + 856) = v7;
    double v8 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 864);
    double v9 = *(double *)(a1 + 976);
    if (v8 >= v9)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v20 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Got data mode change notification; entering continuous location mode",
          buf,
          2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        LOWORD(v30) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got data mode change notification; entering continuous location mode",
          &v30,
          2);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonSta tus_Type::NotificationData &)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      sub_10064F00C(a1, (double *)(a1 + 928));
      sub_10064FD3C(a1, 2, 0);
      *(CFAbsoluteTime *)(a1 + 864) = CFAbsoluteTimeGetCurrent();
    }

    else
    {
      if (qword_1019349E0 != -1)
      {
        double v29 = *(double *)(a1 + 976);
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
        double v9 = v29;
      }

      double v10 = v9 - v8;
      uint64_t v11 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 976);
        *(_DWORD *)buf = 134218240;
        uint64_t v35 = v12;
        __int16 v36 = 2048;
        double v37 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v21 = *(void *)(a1 + 976);
        int v30 = 134218240;
        uint64_t v31 = v21;
        __int16 v32 = 2048;
        double v33 = v10;
        LODWORD(v28) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s",  COERCE_DOUBLE(&v30),  v28);
        __int128 v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonSta tus_Type::NotificationData &)",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }

      [*(id *)(a1 + 872) setNextFireDelay:v10];
    }
  }

void sub_100654E00(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = *a3;
  if ((int)*a3 > 8)
  {
    if (v6 == 9)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      uint64_t v35 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Got kNotificationLocationUnavailable",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        *(_WORD *)uint64_t v62 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got kNotificationLocationUnavailable",  v62,  2);
        __int16 v57 = (uint8_t *)v56;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLoc ationProvider_Type::NotificationData &)",  "%s\n",  v56);
        if (v57 != buf) {
          free(v57);
        }
      }

      sub_1006527C0(a1, 0);
      return;
    }

    if (v6 == 14)
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      __int128 v25 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Got kNotificationServiceAuthorization",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        *(_WORD *)uint64_t v62 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got kNotificationServiceAuthorization",  v62,  2);
        v55 = (uint8_t *)v54;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLoc ationProvider_Type::NotificationData &)",  "%s\n",  v54);
        if (v55 != buf) {
          free(v55);
        }
      }

      sub_10064F5C8(a1);
      return;
    }

    goto LABEL_47;
  }

  if (v6 >= 2 && v6 != 4)
  {
LABEL_47:
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    __int16 v36 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v37 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v65) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Got unknown notification %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Got unknown notification %d",  v62);
LABEL_55:
      int v38 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocat ionProvider_Type::NotificationData &)",  "%s\n",  v24);
      if (v38 != buf) {
        free(v38);
      }
      return;
    }

    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  double v9 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    unsigned int v10 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v65) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Got new time zone location: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    unsigned int v51 = *a3;
    *(_DWORD *)uint64_t v62 = 67109120;
    *(_DWORD *)&v62[4] = v51;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got new time zone location: %d",  v62);
    uint64_t v53 = (uint8_t *)v52;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v52);
    if (v53 != buf) {
      free(v53);
    }
  }

  double v11 = *(double *)(a4 + 88);
  if (v11 < 0.0 || (CFAbsoluteTime v12 = v11 + *(double *)(a4 + 76) + *(double *)(a1 + 904), v12 >= CFAbsoluteTimeGetCurrent()))
  {
    if (*(int *)(a1 + 816) < 1)
    {
      sub_100650644(a1, a4, 0);
      return;
    }

    double v26 = *(double *)(a4 + 20);
    if (v26 >= 400.0)
    {
      if (v26 > *(double *)(a1 + 888))
      {
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        __int128 v27 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a4 + 4);
          uint64_t v29 = *(void *)(a4 + 12);
          uint64_t v30 = *(void *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          uint64_t v65 = v28;
          __int16 v66 = 2049;
          uint64_t v67 = v29;
          __int16 v68 = 2048;
          uint64_t v69 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Ignoring inaccurate location <%{private}+.8f, %{private}.8f>, acc %.2f",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_67;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v31 = *(void *)(a4 + 4);
        uint64_t v32 = *(void *)(a4 + 12);
        uint64_t v33 = *(void *)(a4 + 20);
        *(_DWORD *)uint64_t v62 = 134284033;
        *(void *)&v62[4] = v31;
        *(_WORD *)&v62[12] = 2049;
        *(void *)&v62[14] = v32;
        *(_WORD *)&v62[22] = 2048;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Ignoring inaccurate location <%{private}+.8f, %{private}.8f>, acc %.2f",  v62,  32,  *(void *)v62,  *(_OWORD *)&v62[8],  v33);
LABEL_84:
        __int16 v61 = (uint8_t *)v34;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLoc ationProvider_Type::NotificationData &)",  "%s\n",  v34);
        if (v61 != buf) {
          free(v61);
        }
LABEL_67:
        __int128 v44 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 464) = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 480) = v44;
        __int128 v45 = *(_OWORD *)(a4 + 32);
        __int128 v46 = *(_OWORD *)(a4 + 48);
        __int128 v47 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 528) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 544) = v47;
        *(_OWORD *)(a1 + 496) = v45;
        *(_OWORD *)(a1 + 512) = v46;
        __int128 v48 = *(_OWORD *)(a4 + 96);
        __int128 v49 = *(_OWORD *)(a4 + 112);
        __int128 v50 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 604) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 576) = v49;
        *(_OWORD *)(a1 + 592) = v50;
        *(_OWORD *)(a1 + 560) = v48;
        return;
      }

      sub_100D2DCA4((double *)(a1 + 984), a4, a1 + 152);
      if (vabdd_f64(v39, *(double *)(a1 + 80)) < *(double *)(a4 + 20))
      {
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v40 = (os_log_s *)qword_1019349E8;
        if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = *(void *)(a4 + 4);
          uint64_t v42 = *(void *)(a4 + 12);
          uint64_t v43 = *(void *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          uint64_t v65 = v41;
          __int16 v66 = 2049;
          uint64_t v67 = v42;
          __int16 v68 = 2048;
          uint64_t v69 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "#Warning Ignoring borderline location <%{private}+.8f, %{private}.8f>, acc %.2f",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_67;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        uint64_t v58 = *(void *)(a4 + 4);
        uint64_t v59 = *(void *)(a4 + 12);
        uint64_t v60 = *(void *)(a4 + 20);
        *(_DWORD *)uint64_t v62 = 134284033;
        *(void *)&v62[4] = v58;
        *(_WORD *)&v62[12] = 2049;
        *(void *)&v62[14] = v59;
        *(_WORD *)&v62[22] = 2048;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Ignoring borderline location <%{private}+.8f, %{private}.8f>, acc %.2f",  v62,  32,  *(void *)v62,  *(_OWORD *)&v62[8],  v60);
        goto LABEL_84;
      }
    }

    sub_100650644(a1, a4, 1);
    *(_DWORD *)(a1 + 820) = 0;
    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  uint64_t v13 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a4 + 4);
    uint64_t v15 = *(void *)(a4 + 12);
    uint64_t v16 = *(void *)(a4 + 20);
    uint64_t v17 = *(void *)(a4 + 76);
    uint64_t v18 = *(void *)(a4 + 88);
    *(_DWORD *)buf = 134284545;
    uint64_t v65 = v14;
    __int16 v66 = 2049;
    uint64_t v67 = v15;
    __int16 v68 = 2048;
    uint64_t v69 = v16;
    __int16 v70 = 2048;
    uint64_t v71 = v17;
    __int16 v72 = 2048;
    uint64_t v73 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v19 = *(void *)(a4 + 4);
    uint64_t v20 = *(void *)(a4 + 12);
    uint64_t v21 = *(void *)(a4 + 20);
    uint64_t v22 = *(void *)(a4 + 76);
    uint64_t v23 = *(void *)(a4 + 88);
    *(_DWORD *)uint64_t v62 = 134284545;
    *(void *)&v62[4] = v19;
    *(_WORD *)&v62[12] = 2049;
    *(void *)&v62[14] = v20;
    *(_WORD *)&v62[22] = 2048;
    *(_WORD *)__int16 v63 = 2048;
    *(void *)&v63[2] = v22;
    *(_WORD *)&v63[10] = 2048;
    *(void *)&v63[12] = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f",  v62,  52,  *(_OWORD *)v62,  *(void *)&v62[16],  v21,  *(_OWORD *)v63,  *(void *)&v63[16]);
    goto LABEL_55;
  }

void sub_1006558B8(uint64_t a1, uint64_t a2, int *a3)
{
  CFStringRef v4 = (const void *)sub_100320878(a3);
  if (CFEqual(v4, kCTRegistrationNewServingNetworkNotification))
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    BOOL v5 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Ignoring kCTRegistrationNewServingNetworkNotification until <rdar://problem/10068712> is fixed",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    LOWORD(v15.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Ignoring kCTRegistrationNewServingNetworkNotification until <rdar://problem/10068712> is fixed",  &v15,  2);
    int v7 = (std::string *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTeleph onyService_Type::NotificationData &)",  "%s\n",  v6);
    if (v7 == buf) {
      return;
    }
LABEL_29:
    free(v7);
    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  double v8 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = (const __CFString *)sub_100320878(a3);
    sub_1002A6C50(v9, buf);
    unsigned int v10 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? buf : (std::string *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning received unknown notification %s from telephony service",  (uint8_t *)&v15,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    uint64_t v11 = qword_1019349E8;
    CFAbsoluteTime v12 = (const __CFString *)sub_100320878(a3);
    sub_1002A6C50(v12, &v15);
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v13 = &v15;
    }
    else {
      uint64_t v13 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    int v16 = 136315138;
    uint64_t v17 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  0LL,  "#Warning received unknown notification %s from telephony service",  (const char *)&v16);
    int v7 = v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTeleph onyService_Type::NotificationData &)",  "%s\n",  (const char *)v7);
    if (v7 != buf) {
      goto LABEL_29;
    }
  }

void sub_100655C08(uint64_t a1)
{
  int v2 = off_101939770();
  if (v2) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  if (*(_DWORD *)(a1 + 856) != 2 && v2 != 0) {
    *(void *)(a1 + 144) = 0LL;
  }
  *(_DWORD *)(a1 + 856) = v3;
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  BOOL v5 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Automatic time is now in mode %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v8[0] = 67109120;
    v8[1] = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Automatic time is now in mode %d",  v8);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onLocationTimeZoneActiveNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_10064F5C8(a1);
}

void sub_100655DE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 4)
  {
    sub_10064F5C8(a1);
  }

  else if (!*a3)
  {
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    CFStringRef v4 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning location status reset; removing all clients",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning location status reset; removing all clients",
        v15,
        2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientMan ager_Type::NotificationData &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    *(_DWORD *)(a1 + 152) = 0xFFFF;
    uint64_t v5 = a1 + 152;
    *(void *)(v5 + 12) = 0LL;
    *(void *)(v5 + 4) = 0LL;
    *(_OWORD *)(v5 + 20) = xmmword_1012E0070;
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)(v5 + 36) = _Q0;
    *(_OWORD *)(v5 + 52) = _Q0;
    *(_OWORD *)(v5 + 68) = _Q0;
    *(_DWORD *)(v5 + 84) = 0;
    *(void *)(v5 + 96) = 0LL;
    *(void *)(v5 + 104) = 0LL;
    *(void *)(v5 + 88) = 0xBFF0000000000000LL;
    *(_DWORD *)(v5 + 112) = 0;
    *(void *)(v5 + 116) = 0xBFF0000000000000LL;
    *(_DWORD *)(v5 + 124) = 0x7FFFFFFF;
    *(void *)(v5 + 136) = 0LL;
    *(void *)(v5 + 144) = 0LL;
    *(void *)(v5 + 128) = 0LL;
    *(_BYTE *)(v5 + 152) = 0;
    id v11 = objc_msgSend(objc_msgSend(*(id *)(v5 - 88), "vendor"), "proxyForService:", @"CLClientManager");
    if (byte_10199799F >= 0) {
      CFAbsoluteTime v12 = &qword_101997988;
    }
    else {
      CFAbsoluteTime v12 = (uint64_t *)qword_101997988;
    }
    objc_msgSend( v11,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  }

void sub_10065605C(uint64_t a1)
{
  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  int v2 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Got immediate check notification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Got immediate check notification",  v5,  2);
    CFStringRef v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTimeZoneManager::onImmediateCheckNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_10064FD3C(a1, 2, 1);
}

void sub_1006561FC(id a1)
{
  qword_1019979B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreTime.framework/CoreTime", 2);
}

void sub_100656224(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100656250(id a1)
{
  qword_1019349E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "TZ");
}

void sub_10065627C(uint64_t a1)
{
}

void sub_100656284(uint64_t a1)
{
}

uint64_t sub_10065628C()
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  v0 = (uint64_t *)dlsym((void *)qword_1019979B8, "TMLocationTimeZoneActiveNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1019979C0 = result;
  }

  else
  {
    uint64_t result = qword_1019979C0;
  }

  off_101939758 = sub_100656304;
  return result;
}

uint64_t sub_100656304()
{
  return qword_1019979C0;
}

uint64_t sub_100656310(uint64_t a1)
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  off_101939768 = (uint64_t (*)())dlsym((void *)qword_1019979B8, "TMSetSourceUnavailable");
  return ((uint64_t (*)(uint64_t))off_101939768)(a1);
}

uint64_t sub_100656378()
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  v0 = (uint64_t *)dlsym((void *)qword_1019979B8, "TMSourceLocation");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1019979C8 = result;
  }

  else
  {
    uint64_t result = qword_1019979C8;
  }

  off_101939760 = sub_1006563F0;
  return result;
}

uint64_t sub_1006563F0()
{
  return qword_1019979C8;
}

uint64_t sub_1006563FC()
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  off_101939770 = (uint64_t (*)())dlsym((void *)qword_1019979B8, "TMIsAutomaticTimeZoneEnabled");
  return off_101939770();
}

uint64_t sub_100656450(uint64_t a1)
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  off_101939778 = (uint64_t (*)())dlsym((void *)qword_1019979B8, "TMSetSourceAvailable");
  return ((uint64_t (*)(uint64_t))off_101939778)(a1);
}

uint64_t sub_1006564B8(uint64_t a1, uint64_t a2)
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  off_101939780 = (uint64_t (*)())dlsym((void *)qword_1019979B8, "TMSetSourceTimeZone");
  return ((uint64_t (*)(uint64_t, uint64_t))off_101939780)(a1, a2);
}

uint64_t sub_100656528()
{
  if (qword_1019979B0 != -1) {
    dispatch_once(&qword_1019979B0, &stru_101847A60);
  }
  off_101939788 = (uint64_t (*)())dlsym((void *)qword_1019979B8, "TMIsTimeZoneConfirmed");
  return off_101939788();
}

void sub_10065657C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10130CD98;
      v1[3] = unk_10130CDA8;
      v1[4] = xmmword_10130CDB8;
      v1[0] = xmmword_10130CD78;
      v1[1] = unk_10130CD88;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100656650(_Unwind_Exception *a1)
{
}

uint64_t sub_100656668()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101997988, (void *)&_mh_execute_header);
}

void sub_10065791C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(exception_object);
}

void sub_100657A00(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  sub_100007590(&v33, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  uint64_t v6 = (char *)v34 - (char *)v33;
  if (v34 == v33)
  {
    if (!v34)
    {
      double v9 = *(double **)a1;
      if (*(void *)(a1 + 8) != *(void *)a1) {
        goto LABEL_30;
      }
LABEL_36:
      sub_1010DDBC0(a2, "(--inf,inf)");
      return;
    }

    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = v6 >> 3;
    while (v33[v7] < a3)
    {
      if (v8 == ++v7)
      {
        LODWORD(v7) = v8;
        break;
      }
    }
  }

  uint64_t v34 = v33;
  operator delete(v33);
  double v9 = *(double **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == *(void *)a1) {
    goto LABEL_36;
  }
  if (!(_DWORD)v7)
  {
LABEL_30:
    std::to_string(&v31, *v9);
    __int128 v25 = std::string::insert(&v31, 0LL, "(--inf,");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v13 = std::string::append(&v32, "]");
LABEL_31:
    __int128 v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v27;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if ((char)v31.__r_.__value_.__s.__size_ < 0)
    {
      __int128 v24 = (void *)v31.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }

    return;
  }

  if ((v10 - *(void *)a1) >> 3 == (int)v7)
  {
    std::to_string(&v31, *(double *)(v10 - 8));
    id v11 = std::string::insert(&v31, 0LL, "(");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v13 = std::string::append(&v32, ",inf)");
    goto LABEL_31;
  }

  std::to_string(&v29, v9[(int)v7 - 1]);
  uint64_t v14 = std::string::insert(&v29, 0LL, "(");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  int v16 = std::string::append(&v30, ",");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, *(double *)(*(void *)a1 + 8LL * (int)v7));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v20 = std::string::append(&v31, (const std::string::value_type *)p_p, size);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v22 = std::string::append(&v32, "]");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  a2[2] = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)a2 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if ((char)v29.__r_.__value_.__s.__size_ < 0)
  {
    __int128 v24 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v24);
  }

void sub_100657CD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100657D88(char *a1)
{
  v6[0] = @"altitudeDifferenceWhenThresholdSet";
  uint64_t v2 = a1 + 32;
  if (a1[55] < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v7[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v6[1] = @"maxAltitudeChangeFromThresholdSetToTrigger";
  int v3 = a1 + 56;
  if (a1[79] < 0) {
    int v3 = (void *)*v3;
  }
  v7[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  v6[2] = @"timeFromThresholdSetToTrigger";
  CFStringRef v4 = a1 + 80;
  if (a1[103] < 0) {
    CFStringRef v4 = (void *)*v4;
  }
  v7[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  3LL);
}

_BYTE *sub_100657E6C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }

  if (*(char *)(a2 + 79) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }

  uint64_t result = (_BYTE *)(a1 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)uint64_t result = v7;
  return result;
}

void sub_100657F20(_Unwind_Exception *exception_object)
{
}

void sub_100657F54(uint64_t a1)
{
}

void sub_100658008(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_OWORD *sub_100658034(uint64_t **a1, _OWORD *a2)
{
  __int128 v4 = operator new(0x40uLL);
  __int128 v5 = v4;
  __int128 v6 = a2[1];
  v4[2] = *a2;
  v4[3] = v6;
  __int128 v7 = a1 + 1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        __int128 v7 = (uint64_t **)v8;
        uint64_t v8 = (uint64_t *)*v8;
        double v9 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }

      uint64_t v8 = (uint64_t *)v8[1];
    }

    while (v8);
    double v9 = v7 + 1;
  }

  else
  {
    double v9 = a1 + 1;
  }

uint64_t **sub_1006580C8(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  __int128 v6 = a1 + 1;
  __int128 v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        __int128 v5 = *v8;
        __int128 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      __int128 v5 = v8[1];
      if (!v5)
      {
        __int128 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x50uLL);
    __int128 v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    *((_OWORD *)v10 + 4) = a3[2];
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t sub_100658188(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1006581DC((char *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1006581C4(_Unwind_Exception *a1)
{
}

char *sub_1006581DC(char *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    __int128 v5 = (uint64_t **)result;
    __int128 v6 = (float *)(result + 8);
    do
    {
      uint64_t result = (char *)sub_10065825C(v5, v6, (_OWORD *)v4 + 2);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          __int128 v4 = v8;
        }

        while (!v9);
      }

      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

void *sub_10065825C(uint64_t **a1, float *a2, _OWORD *a3)
{
  __int128 v6 = operator new(0x40uLL);
  __int128 v7 = a3[1];
  *((_OWORD *)v6 + 2) = *a3;
  *((_OWORD *)v6 + 3) = v7;
  uint64_t v8 = sub_1006582E4(a1, a2, &v10, (float *)v6 + 8);
  sub_1000085FC(a1, (uint64_t)v10, (uint64_t **)v8, (uint64_t *)v6);
  return v6;
}

void sub_1006582D0(_Unwind_Exception *a1)
{
}

float *sub_1006582E4(void *a1, float *a2, float **a3, float *a4)
{
  __int128 v4 = (float *)(a1 + 1);
  if (a1 + 1 != (void *)a2 && a2[8] < *a4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)v4;
      a2 = v4;
      if (!*(void *)v4) {
        break;
      }
      while (1)
      {
        __int128 v4 = (float *)v5;
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          goto LABEL_19;
        }
      }
    }

uint64_t sub_1006583CC()
{
  qword_1019979F0 = 0LL;
  qword_1019979F8 = 0LL;
  qword_1019979E8 = 0LL;
  unsigned __int8 v0 = operator new(0x98uLL);
  qword_1019979F8 = (uint64_t)v0 + 152;
  v0[6] = xmmword_10130CE38;
  v0[7] = unk_10130CE48;
  v0[8] = xmmword_10130CE58;
  *((void *)v0 + 18) = 0x40B3880000000000LL;
  v0[2] = xmmword_10130CDF8;
  v0[3] = unk_10130CE08;
  v0[4] = xmmword_10130CE18;
  v0[5] = unk_10130CE28;
  _OWORD *v0 = xmmword_10130CDD8;
  v0[1] = unk_10130CDE8;
  qword_1019979E8 = (uint64_t)v0;
  qword_1019979F0 = (uint64_t)v0 + 152;
  __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_1019979E8, (void *)&_mh_execute_header);
  qword_101997A08 = 0LL;
  unk_101997A10 = 0LL;
  qword_101997A00 = 0LL;
  uint64_t v1 = operator new(0x58uLL);
  qword_101997A08 = (uint64_t)v1 + 88;
  unk_101997A10 = (char *)v1 + 88;
  v1[2] = xmmword_10130CE90;
  v1[3] = unk_10130CEA0;
  v1[4] = xmmword_10130CEB0;
  *((void *)v1 + 10) = 0x4115F90000000000LL;
  *uint64_t v1 = xmmword_10130CE70;
  v1[1] = unk_10130CE80;
  qword_101997A00 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_101997A00, (void *)&_mh_execute_header);
}

void sub_100658590(id a1)
{
  qword_101997A18 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLFenceManagerSilo");
}

uint64_t sub_100658644(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10065B978;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101997A28 != -1) {
    dispatch_once(&qword_101997A28, block);
  }
  return qword_1019A14C8;
}

void sub_100658850(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100658864(uint64_t *a1, uint64_t a2)
{
  std::string::operator=(&v110, &__str);
  std::string::operator=(&v111, &v126);
  std::string::operator=(&v112, &v127);
  __int128 v117 = v132;
  __int128 v118 = v133;
  *(_OWORD *)v119 = *(_OWORD *)v134;
  *(void *)&v119[13] = *(void *)&v134[13];
  __int128 v113 = v128;
  __int128 v114 = v129;
  __int128 v115 = v130;
  __int128 v116 = v131;
  std::string::operator=(&v120, &v135);
  __int128 v4 = v121;
  id v121 = v136;

  sub_10009B244(v122, (char *)__src, (uint64_t)v138, (v138 - (_BYTE *)__src) >> 4);
  memset(v109, 0, sizeof(v109));
  if (v138 != __src && !sub_100840CD8((uint64_t)&__str))
  {
    sub_10065E834((uint64_t)a1, (uint64_t)&v110);
    uint64_t v11 = 0LL;
    goto LABEL_264;
  }

  sub_1002718F0(__dst, (__int128 *)a2);
  sub_10065E968((uint64_t)v123, (__int128 *)__dst);
  if (__p)
  {
    __int16 v150 = __p;
    operator delete(__p);
  }

  if (v147 < 0) {
    operator delete(v146);
  }
  if (v145 < 0) {
    operator delete(v144);
  }
  if (v143 < 0) {
    operator delete(*(void **)&__dst[24]);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t v124 = 0x4079000000000000LL;
  sub_100922994((char *)v98);
  if (!sub_1009E69F8((uint64_t)(a1 + 14), a2 + 24, (char *)a2, a2 + 48, (uint64_t)v98))
  {
LABEL_38:
    memset(&buf, 0, sizeof(buf));
    uint64_t v12 = *(unsigned __int8 *)(a2 + 71);
    if ((v12 & 0x80u) != 0LL) {
      uint64_t v12 = *(void *)(a2 + 56);
    }
    if (v12) {
      uint64_t v13 = (const std::string *)(a2 + 48);
    }
    else {
      uint64_t v13 = (const std::string *)a2;
    }
    std::string::operator=(&buf, v13);
    if ((char)buf.__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ == 19)
      {
        BOOL v18 = *(void *)buf.__r_.__value_.__l.__data_ == 0x6C7070612E6D6F63LL
           && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x646E696D65722E65LL;
        if (v18 && *(void *)(buf.__r_.__value_.__r.__words[0] + 11) == 0x737265646E696D65LL) {
          goto LABEL_110;
        }
      }

      if (buf.__r_.__value_.__l.__size_ == 84)
      {
        if (!memcmp( buf.__r_.__value_.__l.__data_,  "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/BulletinBoard.framework",  0x54uLL)) {
          goto LABEL_110;
        }
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 74)
      {
        if (!memcmp( buf.__r_.__value_.__l.__data_,  "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FMF.framework",  0x4AuLL)) {
          goto LABEL_110;
        }
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 83)
      {
        if (!memcmp( buf.__r_.__value_.__l.__data_,  "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FindMyDevice.framework",  0x53uLL)) {
          goto LABEL_110;
        }
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size != 81) {
        goto LABEL_76;
      }
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }

    else
    {
      if (buf.__r_.__value_.__s.__size_ <= 0x50u)
      {
        if (buf.__r_.__value_.__s.__size_ == 19)
        {
          if (buf.__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63LL
            && buf.__r_.__value_.__l.__size_ == 0x646E696D65722E65LL
            && *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 3) == 0x737265646E696D65LL)
          {
            goto LABEL_110;
          }
        }

        else if (buf.__r_.__value_.__s.__size_ == 74 {
               && !memcmp(&buf, "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FMF.framework", 0x4AuLL))
        }
        {
          goto LABEL_110;
        }

        goto LABEL_76;
      }

      if (buf.__r_.__value_.__s.__size_ != 81)
      {
        if (buf.__r_.__value_.__s.__size_ != 83)
        {
          if (buf.__r_.__value_.__s.__size_ == 84)
          {
            uint64_t v14 = "com.apple.locationd.bundle-/System/Library/PrivateFrameworks/BulletinBoard.framework";
            p_std::stringbuf::string_type buf = &buf;
            size_t v16 = 84LL;
            goto LABEL_75;
          }

void sub_10065A31C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, char a46)
{
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  sub_10026EDA4((uint64_t)&a12);
  a12 = (void **)&a43;
  sub_1006684D8(&a12);
  sub_100668374((uint64_t)&a46);
  sub_10026EDA4((uint64_t)&STACK[0x770]);
  _Unwind_Resume(a1);
}

void sub_10065A4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10065A50C(uint64_t a1, uint64_t a2)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v5 = *(void *)a2;
    }
    else {
      uint64_t v6 = *(void *)(a2 + 24);
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446467;
    uint64_t v18 = v5;
    __int16 v19 = 2081;
    uint64_t v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fence:Remove fence %{public}s/%{private}s",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    else {
      uint64_t v10 = *(void *)(a2 + 24);
    }
    int v13 = 136446467;
    uint64_t v14 = v9;
    __int16 v15 = 2081;
    uint64_t v16 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence:Remove fence %{public}s/%{private}s",  &v13,  22);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::removeFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  sub_100222B94(buf, (uint64_t)"CLFenceManager.removeFence", 0);
  BOOL v7 = sub_1009E3714((uint64_t *)(a1 + 112), a2);
  sub_1001BA1BC((id *)buf);
  return v7;
}

void sub_10065A748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10065A810(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10065A824(uint64_t a1, uint64_t a2)
{
  __int16 v44 = 0;
  sub_1009E7B94(a1 + 112, (uint64_t *)a2, (_BYTE *)&v44 + 1, &v44);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v5 = *(void *)a2;
    }
    else {
      uint64_t v6 = *(void *)(a2 + 24);
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136381443;
    uint64_t v54 = v5;
    __int16 v55 = 2081;
    uint64_t v56 = v6;
    __int16 v57 = 1026;
    int v58 = HIBYTE(v44);
    __int16 v59 = 1026;
    LODWORD(v60) = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d",  buf,  0x22u);
  }

  int v7 = 2;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    else {
      uint64_t v26 = *(void *)a2;
    }
    else {
      uint64_t v27 = *(void *)(a2 + 24);
    }
    int v45 = 136381443;
    uint64_t v46 = v26;
    __int16 v47 = 2081;
    uint64_t v48 = v27;
    __int16 v49 = 1026;
    int v50 = HIBYTE(v44);
    __int16 v51 = 1026;
    LODWORD(v52) = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d",  &v45,  34);
    std::string v29 = (uint8_t *)v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)",  "%s\n",  v28);
    if (v29 != buf) {
      free(v29);
    }
  }

  int v43 = 2;
  int v8 = HIBYTE(v44);
  if ((_BYTE)v44 && HIBYTE(v44))
  {
    int v7 = sub_1009C2014(a1 + 296, a2, 1);
    int v43 = v7;
    int v8 = HIBYTE(v44);
  }

  if (!v8)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    int v13 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      else {
        uint64_t v14 = *(void *)a2;
      }
      else {
        uint64_t v15 = *(void *)(a2 + 24);
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136380931;
      uint64_t v54 = v14;
      __int16 v55 = 2081;
      uint64_t v56 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Fence: requestRegionState, fence, %{private}s/%{private}s, not registered",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      return sub_10065E834(a1, a2);
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    else {
      uint64_t v17 = *(void *)(a2 + 24);
    }
    int v45 = 136380931;
    uint64_t v46 = v16;
    __int16 v47 = 2081;
    uint64_t v48 = v17;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: requestRegionState, fence, %{private}s/%{private}s, not registered",  &v45,  v42);
    goto LABEL_107;
  }

  if ((_BYTE)v44 && v7 != 2)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v9 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      else {
        uint64_t v10 = *(void *)a2;
      }
      else {
        uint64_t v11 = *(void *)(a2 + 24);
      }
      else {
        uint64_t v12 = off_101847F28[v7 + 1];
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136381443;
      uint64_t v54 = v10;
      __int16 v55 = 2081;
      uint64_t v56 = v11;
      __int16 v57 = 1025;
      int v58 = v7;
      __int16 v59 = 2081;
      uint64_t v60 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      else {
        uint64_t v30 = *(void *)a2;
      }
      else {
        uint64_t v31 = *(void *)(a2 + 24);
      }
      else {
        std::string v32 = off_101847F50[v7 + 1];
      }
      int v45 = 136381443;
      uint64_t v46 = v30;
      __int16 v47 = 2081;
      uint64_t v48 = v31;
      __int16 v49 = 1025;
      int v50 = v7;
      __int16 v51 = 2081;
      uint64_t v52 = v32;
      LODWORD(v42) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s",  &v45,  v42);
      size_t v37 = (uint8_t *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }

    *(_DWORD *)std::stringbuf::string_type buf = 6;
    return sub_10065EAA8(a1, a2, &v43, (int *)buf, 0xFFFFFFFFLL);
  }

  if ((_BYTE)v44)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    __int16 v19 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      else {
        uint64_t v20 = *(void *)a2;
      }
      else {
        uint64_t v21 = *(void *)(a2 + 24);
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136380931;
      uint64_t v54 = v20;
      __int16 v55 = 2081;
      uint64_t v56 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Fence: requestRegionState, fence, %{private}s/%{private}s, error.",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      return sub_10065E834(a1, a2);
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    else {
      uint64_t v33 = *(void *)a2;
    }
    else {
      uint64_t v34 = *(void *)(a2 + 24);
    }
    int v45 = 136380931;
    uint64_t v46 = v33;
    __int16 v47 = 2081;
    uint64_t v48 = v34;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: requestRegionState, fence, %{private}s/%{private}s, error.",  &v45,  v42);
LABEL_107:
    uint64_t v35 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)",  "%s\n",  v18);
    if (v35 != buf) {
      free(v35);
    }
    return sub_10065E834(a1, a2);
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v23 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    else {
      uint64_t v24 = *(void *)a2;
    }
    else {
      uint64_t v25 = *(void *)(a2 + 24);
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136380931;
    uint64_t v54 = v24;
    __int16 v55 = 2081;
    uint64_t v56 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    else {
      uint64_t v39 = *(void *)(a2 + 24);
    }
    int v45 = 136380931;
    uint64_t v46 = v38;
    __int16 v47 = 2081;
    uint64_t v48 = v39;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized",  &v45,  v42);
    std::string::size_type v41 = (uint8_t *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  return sub_10065F6AC(a1, a2);
}

void sub_10065B200( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065B28C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065B3C4(_Unwind_Exception *exception_object)
{
}

void sub_10065B3F8(uint64_t a1, char *a2, const void **a3, int a4, _OWORD *a5)
{
  int v50 = a4;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v8 = a1 + 112;
  sub_1009E7854(a1 + 112, a2, &v47);
  sub_100922994((char *)&v34);
  uint64_t v9 = v47;
  uint64_t v10 = v48;
  if (v47 == v48)
  {
LABEL_22:
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_101847D60);
    }
    uint64_t v19 = qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v20 = (std::string *)*a3;
      }
      uint64_t buf = 68289282LL;
      __int16 v52 = 2082;
      uint64_t v53 = "";
      __int16 v54 = 2082;
      __int16 v55 = v20;
      uint64_t v21 = "{msg%{public}.0s:Found the bundleID but it contained no fences with fenceID, fenceID:%{public, l"
            "ocation:escape_only}s}";
      uint64_t v22 = (os_log_s *)v19;
      uint32_t v23 = 28;
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    int v11 = *((char *)a3 + 23);
    if (v11 >= 0) {
      unint64_t v12 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      unint64_t v12 = (unint64_t)a3[1];
    }
    if (v11 >= 0) {
      int v13 = (std::string *)a3;
    }
    else {
      int v13 = (std::string *)*a3;
    }
    while (1)
    {
      int v14 = *(char *)(v9 + 47);
      unint64_t v15 = v14 >= 0 ? *(unsigned __int8 *)(v9 + 47) : *(void *)(v9 + 32);
      uint64_t v16 = v14 >= 0 ? (const void *)(v9 + 24) : *(const void **)(v9 + 24);
      size_t v17 = v15 >= v12 ? v12 : v15;
      if (!memcmp(v13, v16, v17) && v15 == v12) {
        break;
      }
      v9 += 248LL;
      if (v9 == v10) {
        goto LABEL_22;
      }
    }

    std::string::operator=(&v34, (const std::string *)v9);
    std::string::operator=(&v35, (const std::string *)(v9 + 24));
    std::string::operator=(&v36, (const std::string *)(v9 + 48));
    __int128 v24 = *(_OWORD *)(v9 + 72);
    __int128 v25 = *(_OWORD *)(v9 + 88);
    __int128 v26 = *(_OWORD *)(v9 + 120);
    __int128 v39 = *(_OWORD *)(v9 + 104);
    __int128 v40 = v26;
    __int128 v37 = v24;
    __int128 v38 = v25;
    __int128 v27 = *(_OWORD *)(v9 + 136);
    __int128 v28 = *(_OWORD *)(v9 + 152);
    __int128 v29 = *(_OWORD *)(v9 + 168);
    *(void *)&v43[13] = *(void *)(v9 + 181);
    *(_OWORD *)int v43 = v29;
    __int128 v42 = v28;
    __int128 v41 = v27;
    std::string::operator=(&v44, (const std::string *)(v9 + 192));
    id v30 = v45;
    id v45 = *(id *)(v9 + 216);

    if ((std::string *)v9 != &v34) {
      sub_10009B244( (char *)__p,  *(char **)(v9 + 224),  *(void *)(v9 + 232),  (uint64_t)(*(void *)(v9 + 232) - *(void *)(v9 + 224)) >> 4);
    }
    if (sub_1009E30CC(v8, (uint64_t *)&v34))
    {
      sub_10065F03C(a1, (__int128 *)&v34, &v50, a5);
      goto LABEL_43;
    }

    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_101847D60);
    }
    uint64_t v31 = qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      std::string v32 = &v34;
      if ((v34.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v33 = &v35;
      }
      else {
        uint64_t v33 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      uint64_t buf = 68289538LL;
      __int16 v52 = 2082;
      uint64_t v53 = "";
      __int16 v54 = 2082;
      __int16 v55 = v32;
      __int16 v56 = 2082;
      __int16 v57 = v33;
      uint64_t v21 = "{msg%{public}.0s:You're not authorized for fence., bundleID:%{public, location:escape_only}s, "
            "fenceId:%{public, location:escape_only}s}";
      uint64_t v22 = (os_log_s *)v31;
      uint32_t v23 = 38;
      goto LABEL_29;
    }
  }

void sub_10065B7A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 - 176);
  sub_1006684D8(&a10);
  _Unwind_Resume(a1);
}

void sub_10065B880( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065B89C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  int v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_1009E7854(a1 + 112, a2, (uint64_t *)&v6);
  memset(v5, 0, sizeof(v5));
  sub_1006692E8((char *)v5, v6, v7, 0xEF7BDEF7BDEF7BDFLL * (((char *)v7 - (char *)v6) >> 3));
  id v4 = sub_10065F5F0(v5);
  (*(void (**)(uint64_t, id))(a3 + 16))(a3, v4);
  uint64_t v9 = v5;
  sub_1006684D8((void ***)&v9);
  uint64_t v9 = &v6;
  sub_1006684D8((void ***)&v9);
}

void sub_10065B940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 24) = v13;
  sub_1006684D8((void ***)(v14 - 24));
  *(void *)(v14 - 24) = &a13;
  sub_1006684D8((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10065B978(uint64_t a1)
{
  uint64_t v2 = operator new(0xF98uLL);
  uint64_t result = sub_10065BC58((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A14C8 = (uint64_t)v2;
  return result;
}

void sub_10065B9B0(_Unwind_Exception *a1)
{
}

void sub_10065B9C4(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    sub_100FE370C((uint64_t)v9);
    uint64_t v5 = (char *)__p;
  }

  else
  {
    uint64_t v5 = (char *)&v13;
  }

  sub_1002ACD58((uint64_t)a2, "kCLConnectionMessageOnBehalfOfKey", v5);
  int v8 = 1;
  sub_1002AC220((uint64_t)a2, "kCLConnectionMessageRegionTypeKey", &v8);
  sub_1002AC7B8((uint64_t)a2, "kCLConnectionMessageLatitudeKey", (const void *)(a1 + 72));
  sub_1002AC7B8((uint64_t)a2, "kCLConnectionMessageLongitudeKey", (const void *)(a1 + 80));
  sub_1002AC7B8((uint64_t)a2, "kCLConnectionMessageRadiusKey", (const void *)(a1 + 88));
  int v8 = *(_DWORD *)(a1 + 180);
  sub_1002AC220((uint64_t)a2, "kCLConnectionMessageReferenceFrameKey", &v8);
  LOBYTE(v8) = *(_BYTE *)(a1 + 160) & 1;
  sub_1002AB3FC((uint64_t)a2, "kCLConnectionMessageNotifyOnEntryKey", &v8);
  LOBYTE(v8) = (*(_BYTE *)(a1 + 160) & 2) != 0;
  sub_1002AB3FC((uint64_t)a2, "kCLConnectionMessageNotifyOnExitKey", &v8);
  LOBYTE(v8) = (*(_BYTE *)(a1 + 160) & 4) != 0;
  sub_1002AB3FC((uint64_t)a2, "kCLConnectionMessageConservativeEntry", &v8);
  LOBYTE(v8) = (*(_BYTE *)(a1 + 160) & 0x10) != 0;
  sub_1002AB3FC((uint64_t)a2, "kCLConnectionMessageEmergencyKey", &v8);
  uint64_t v6 = *(void **)(a1 + 216);
  if (v6) {
    int v7 = (char *)objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
  }
  else {
    int v7 = "";
  }
  sub_1002ACA84((uint64_t)a2, "kCLConnectionMessageDeviceIDKey", v7);
  sub_1002ACD58((uint64_t)a2, "kCLConnectionMessageHandoffTagKey", (char *)(a1 + 192));
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_10065BC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10065BC58(uint64_t a1, void *a2)
{
  int v3 = (void *)sub_10065BF00(a1, "FenceManager", a2);
  *int v3 = off_101847B40;
  sub_1009E2038(v3 + 14, v3[4]);
  sub_1009C1460(a1 + 296, *(void *)(a1 + 32));
  sub_1009D630C(a1 + 3288, *(void *)(a1 + 32));
  sub_100D2D9A4(a1 + 3744);
  *(_BYTE *)(a1 + 3784) = 0;
  sub_1004F2598();
  *(_BYTE *)(a1 + 3785) = sub_1004FAA50();
  *(_BYTE *)(a1 + 3786) = 0;
  *(void *)(a1 + 3792) = 0LL;
  *(void *)(a1 + 3832) = 0LL;
  *(void *)(a1 + 3824) = 0LL;
  *(void *)(a1 + 3816) = a1 + 3824;
  *(void *)(a1 + 3856) = 0LL;
  *(void *)(a1 + 3848) = 0LL;
  *(void *)(a1 + 3840) = a1 + 3848;
  *(void *)(a1 + 3880) = 0LL;
  *(void *)(a1 + 3872) = 0LL;
  *(void *)(a1 + 3864) = a1 + 3872;
  *(void *)(a1 + 3904) = 0LL;
  *(void *)(a1 + 3896) = 0LL;
  *(void *)(a1 + 3888) = a1 + 3896;
  *(void *)(a1 + 3944) = 0LL;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(void *)(a1 + 3960) = off_10182F180;
  unint64_t v4 = operator new(0x20uLL);
  v4[2] = 0LL;
  void *v4 = off_10182F1B8;
  v4[1] = 0LL;
  *((_DWORD *)v4 + 6) = 31337;
  *(void *)(a1 + 3968) = v4 + 3;
  *(void *)(a1 + 3976) = v4;
  *(void *)(a1 + 3960) = off_10183EE40;
  *(void *)(a1 + 3984) = 0LL;
  sub_10065BF9C(a1);
  return a1;
}

void sub_10065BDBC(_Unwind_Exception *a1)
{
  size_t v17 = v5;
  sub_100527AF4(v6);
  uint64_t v12 = v1[493];
  v1[493] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = v1[492];
  v1[492] = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = v1[491];
  v1[491] = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = v1[490];
  v1[490] = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = *v10;
  *char v10 = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  sub_1000229D4((uint64_t)(v1 + 486), *v9);
  sub_1006686A8((uint64_t)(v1 + 483), *v8);
  sub_1006685DC((uint64_t)(v1 + 480), *v7);
  sub_1006685DC((uint64_t)(v1 + 477), *v17);
  sub_1009D6598(v4);
  sub_1009C176C(v3);
  sub_1009E20DC(v2);
  sub_10065C788((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10065BF00(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101847D90;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10065BF80(_Unwind_Exception *exception_object)
{
}

id sub_10065BF9C(uint64_t a1)
{
  double v43 = 60.0;
  sub_1002F0B04(&buf);
  int v2 = sub_1002A82BC(buf, "FenceStartDelay", &v43);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v6 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134283521;
      *(double *)((char *)&buf + 4) = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Overriding fence start delay to %{private}.2f",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v44 = 134283521;
      double v45 = v43;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Overriding fence start delay to %{private}.2f",  &v44,  12);
      __int128 v41 = (char *)v40;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::init()", "%s\n", v40);
    }
  }

  sub_1002F0B04(&buf);
  sub_1002A6F64(buf, "FenceShowTriggerDialog", (BOOL *)&byte_101997A30);
  int v7 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    int v8 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  char v10 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 67174657;
    DWORD1(buf) = byte_101997A30;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "setting FenceStartShowDialog to %{private}d",  (uint8_t *)&buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    int v44 = 67174657;
    LODWORD(v45) = byte_101997A30;
    LODWORD(v42) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "setting FenceStartShowDialog to %{private}d",  &v44,  v42);
    __int128 v39 = (char *)v38;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::init()", "%s\n", v38);
  }

  uint64_t v11 = sub_1002F8DDC();
  if ((sub_1002A82BC(v11, off_10198EB10, (void *)(a1 + 3808)) & 1) == 0)
  {
    *(CFAbsoluteTime *)(a1 + 3808) = CFAbsoluteTimeGetCurrent();
    uint64_t v12 = sub_1002F8DDC();
    sub_1002AC7B8(v12, off_10198EB10, (const void *)(a1 + 3808));
    uint64_t v13 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v13 + 944LL))(v13);
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v15 = *(void **)(a1 + 32);
  *(CFAbsoluteTime *)(a1 + 3800) = Current;
  id v16 = objc_msgSend(objc_msgSend(v15, "vendor"), "proxyForService:", @"CLClientManager");
  *(void *)(a1 + 3952) = v16;
  objc_msgSend(v16, "registerDelegate:inSilo:", sub_100520500(a1 + 3960), objc_msgSend(*(id *)(a1 + 32), "silo"));
  sub_100583844((uint64_t)sub_10065C910, a1, *(void **)(a1 + 32), &buf);
  uint64_t v17 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v18 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    uint64_t v19 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
  }

  [*(id *)(*(void *)(a1 + 3912) + 16) register:*(void *)(*(void *)(a1 + 3912) + 8) forNotification:4 registrationInfo:0];
  sub_1009BD8B8(a1 + 296, (uint64_t)sub_10065CAE8, a1, *(void **)(a1 + 32), &buf);
  uint64_t v20 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v21 = *(void *)(a1 + 3920);
  *(void *)(a1 + 3920) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    uint64_t v22 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    }
  }

  [*(id *)(*(void *)(a1 + 3920) + 16) register:*(void *)(*(void *)(a1 + 3920) + 8) forNotification:0 registrationInfo:0];
  uint64_t v23 = a1 + 3920;
  [*(id *)(*(void *)(a1 + 3920) + 16) register:*(void *)(*(void *)(a1 + 3920) + 8) forNotification:1 registrationInfo:0];
  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:4 registrationInfo:0];
  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:5 registrationInfo:0];
  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:6 registrationInfo:0];
  __int128 v24 = operator new(0x38uLL);
  sub_1010DDBC0(&buf, "FenceManagerStart");
  uint64_t v25 = *(void *)(a1 + 40);
  CFAbsoluteTime v26 = CFAbsoluteTimeGetCurrent();
  sub_1006B5FBC(v24, &buf, sub_10065CCC0, a1, v25, 1LL, v26 + v43, 1.79769313e308, 0.9);
  *(void *)(a1 + 3792) = v24;
  if (v47 < 0) {
    operator delete((void *)buf);
  }
  sub_1003CC884((uint64_t)sub_10065CE84, a1, *(void **)(a1 + 32), &buf);
  uint64_t v27 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v28 = *(void *)(a1 + 3944);
  *(void *)(a1 + 3944) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    uint64_t v29 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
  }

  [*(id *)(*(void *)(a1 + 3944) + 16) register:*(void *)(*(void *)(a1 + 3944) + 8) forNotification:17 registrationInfo:0];
  sub_1009DAA44(a1 + 3288, (uint64_t)sub_10065D054, a1, *(void **)(a1 + 32), &buf);
  uint64_t v30 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v31 = *(void *)(a1 + 3928);
  *(void *)(a1 + 3928) = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    uint64_t v32 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
    }
  }

  [*(id *)(*(void *)(a1 + 3928) + 16) register:*(void *)(*(void *)(a1 + 3928) + 8) forNotification:0 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 3928) + 16) register:*(void *)(*(void *)(a1 + 3928) + 8) forNotification:1 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 3928) + 16) register:*(void *)(*(void *)(a1 + 3928) + 8) forNotification:2 registrationInfo:0];
  sub_1009E8CE0(a1 + 112, (uint64_t)sub_10065D22C, a1, *(void **)(a1 + 32), &buf);
  uint64_t v33 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v34 = *(void *)(a1 + 3936);
  *(void *)(a1 + 3936) = v33;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    uint64_t v35 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
  }

  [*(id *)(*(void *)(a1 + 3936) + 16) register:*(void *)(*(void *)(a1 + 3936) + 8) forNotification:0 registrationInfo:0];
  uint64_t v36 = a1 + 3936;
  [*(id *)(*(void *)v36 + 16) register:*(void *)(*(void *)v36 + 8) forNotification:1 registrationInfo:0];
  [*(id *)(*(void *)v36 + 16) register:*(void *)(*(void *)v36 + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)v36 + 16) register:*(void *)(*(void *)v36 + 8) forNotification:3 registrationInfo:0];
  return [*(id *)(*(void *)v36 + 16) register:*(void *)(*(void *)v36 + 8) forNotification:4 registrationInfo:0];
}

void sub_10065C740( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_10065C788(uint64_t a1)
{
  *(void *)a1 = off_101847D90;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100589F4C(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_10065C7FC(uint64_t a1)
{
  *(void *)a1 = off_101847B40;
  sub_10065DC44(a1);
  sub_100527AF4(a1 + 3960);
  uint64_t v2 = *(void *)(a1 + 3944);
  *(void *)(a1 + 3944) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 3936);
  *(void *)(a1 + 3936) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 3928);
  *(void *)(a1 + 3928) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 3920);
  *(void *)(a1 + 3920) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_1000229D4(a1 + 3888, *(char **)(a1 + 3896));
  sub_1006686A8(a1 + 3864, *(void **)(a1 + 3872));
  sub_1006685DC(a1 + 3840, *(void **)(a1 + 3848));
  sub_1006685DC(a1 + 3816, *(void **)(a1 + 3824));
  sub_1009D6598(a1 + 3288);
  sub_1009C176C(a1 + 296);
  sub_1009E20DC(a1 + 112);
  return sub_10065C788(a1);
}

void sub_10065C8FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10065C7FC(a1);
  operator delete(v1);
}

void sub_10065C910(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    unint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onClientNotification, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_10066508C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065CAC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065CAE8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    unint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onMonitorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    char v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onMonitorNotification, event:%{public, location:escape_only}s, th is:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1006645EC(a4, v7, a2, a3, v8);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065CCA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065CCC0(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onStartTimer",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    uint64_t v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      char v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onStartTimer, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_10065D404(a2, 0);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065CE64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065CE84(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onDaemonStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    int v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onDaemonStatusNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_10065D6E4(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065D034( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065D054(uint64_t a1, int *a2, std::string::size_type a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onDataDownloadNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    __int16 v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onDataDownloadNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100664AA4((uint64_t *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065D20C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065D22C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFenceManager::onAuthorizationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    __int16 v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFenceManager::onAuthorizationNotification, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006653D8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10065D3E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065D404(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 3784))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v2 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Fence: Already started fence monitoring",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Already started fence monitoring",  v10,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::start(BOOL)", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fence: Starting fence monitoring", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Starting fence monitoring",  v10,  2);
      __int16 v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::start(BOOL)", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    *(_BYTE *)(a1 + 3784) = 1;
    sub_10065D8AC(a1, 0LL, a2, a2 ^ 1);
  }

void sub_10065D6E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_BYTE *)(a1 + 3784)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *a3 == 17;
  }
  if (v3)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v5 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fence: Start after unclean shutdown", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Start after unclean shutdown",  v8,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonSt atus_Type::NotificationData &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    sub_1006B6294(*(void *)(a1 + 3792));
    [*(id *)(*(void *)(a1 + 3944) + 16) unregister:*(void *)(*(void *)(a1 + 3944) + 8) forNotification:17];
    sub_10065D404(a1, 1);
  }

void sub_10065D8AC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v7 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: startMonitoringAllFences_nl", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    LOWORD(v14) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: startMonitoringAllFences_nl",  &v14,  2);
    char v10 = (char *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::startMonitoringAllFences_nl(BOOL, BOOL, BOOL)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  __int16 v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_1009E6D9C(a1 + 112, &v14, a3);
  sub_1009E25E4(a1 + 112);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  int v8 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 134349056;
    *(void *)&uint8_t buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v15 - (uint64_t)v14) >> 3);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Starting to monitor all %{public}ld authorized fences",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    int v17 = 134349056;
    unint64_t v18 = 0xEF7BDEF7BDEF7BDFLL * ((v15 - (uint64_t)v14) >> 3);
    LODWORD(v13) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Starting to monitor all %{public}ld authorized fences",  &v17,  v13);
    int v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::startMonitoringAllFences_nl(BOOL, BOOL, BOOL)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  sub_10065E074(a1, (uint64_t *)&v14);
  if (a4) {
    sub_1009C200C(a1 + 296, (uint64_t *)&v14);
  }
  *(void *)__int128 buf = &v14;
  sub_1006684D8((void ***)buf);
}

void sub_10065DC1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a11;
  sub_1006684D8(&a17);
  _Unwind_Resume(a1);
}

id sub_10065DC44(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 3808) = CFAbsoluteTimeGetCurrent();
  uint64_t v2 = sub_1002F8DDC();
  sub_1002AC7B8(v2, off_10198EB10, (const void *)(a1 + 3808));
  uint64_t v3 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v3 + 944LL))(v3);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: CLFenceManager, shutdown", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: CLFenceManager, shutdown",  v16,  2);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLFenceManager::shutdown()", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v5 = *(void *)(a1 + 3944);
  *(void *)(a1 + 3944) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 3920);
  *(void *)(a1 + 3920) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 3928);
  *(void *)(a1 + 3928) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 3936);
  *(void *)(a1 + 3936) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }

  *(void *)(a1 + 3952) = 0LL;
  sub_1009C6FF8(a1 + 296);
  char v10 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v11 = *(void *)(a1 + 3792);
  if (v11)
  {
    int v12 = (void *)sub_1006B6010(v11);
    operator delete(v12);
    *(void *)(a1 + 3792) = 0LL;
  }

  return -[NSAutoreleasePool drain](v10, "drain");
}

void sub_10065DEC0(uint64_t a1)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fence: resetFenceMonitoring_nl", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: resetFenceMonitoring_nl",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::resetFenceMonitoring_nl()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_1009C1FE8(a1 + 296);
  sub_1009D9268((void *)(a1 + 3288));
  sub_10065D8AC(a1, 0LL, 1, 0);
}

void sub_10065E074(uint64_t a1, uint64_t *a2)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: startMonitoringFences_nl", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: startMonitoringFences_nl",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::startMonitoringFences_nl(const std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_1009C194C(a1 + 296, a2);
  sub_1009D6638((void *)(a1 + 3288), (__int128 **)a2);
}

void sub_10065E220(uint64_t a1, unsigned __int8 **a2, int a3)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: stopMonitoringFences_nl", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: stopMonitoringFences_nl",  v9,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::stopMonitoringFences_nl(const std::vector<CLFenceManager_Type::Fence> &, BOOL)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_1009C1F70(a1 + 296, a2, a3);
  sub_1009D8A04((uint64_t *)(a1 + 3288), (uint64_t *)a2);
}

double sub_10065E3DC(uint64_t a1, char a2)
{
  *(void *)(a1 + 3816) = a1 + 3824;
  *(void *)(a1 + 3832) = 0LL;
  *(void *)(a1 + 3824) = 0LL;
  sub_1006685DC(a1 + 3840, *(void **)(a1 + 3848));
  *(void *)(a1 + 3840) = a1 + 3848;
  *(void *)(a1 + 3856) = 0LL;
  *(void *)(a1 + 3848) = 0LL;
  sub_1006686A8(a1 + 3864, *(void **)(a1 + 3872));
  *(void *)(a1 + 3864) = a1 + 3872;
  *(void *)(a1 + 3880) = 0LL;
  *(void *)(a1 + 3872) = 0LL;
  sub_1009C1944(a1 + 296, a2);
  return sub_1003D33C8(a1 + 3744);
}

void sub_10065E468(uint64_t *a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = a1[486];
  uint64_t v4 = (void *)a1[488];
  uint64_t v5 = (uint64_t)v4;
  if ((uint64_t *)v3 != a1 + 487)
  {
    double v6 = Current;
    uint64_t v19 = a1[488];
    do
    {
      if (sub_10025D1EC(v3 + 56, v6))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        uint64_t v7 = (void *)(v3 + 32);
        uint64_t v8 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = (void *)(v3 + 32);
          *(_DWORD *)__int128 buf = 136380675;
          uint64_t v25 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Fence: erasing dormant bucket %{private}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          int v20 = 136380675;
          uint64_t v21 = v7;
          LODWORD(v18) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: erasing dormant bucket %{private}s",  &v20,  v18);
          __int16 v14 = (uint8_t *)v13;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::maintenanceActiveRateLimiters()", "%s\n", v13);
          if (v14 != buf) {
            free(v14);
          }
        }

        char v10 = sub_1003F9708((uint64_t **)a1 + 486, v3);
      }

      else
      {
        uint64_t v11 = *(uint64_t **)(v3 + 8);
        if (v11)
        {
          do
          {
            char v10 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            char v10 = *(uint64_t **)(v3 + 16);
            BOOL v12 = *v10 == v3;
            uint64_t v3 = (uint64_t)v10;
          }

          while (!v12);
        }
      }

      uint64_t v3 = (uint64_t)v10;
    }

    while (v10 != a1 + 487);
    uint64_t v5 = a1[488];
    uint64_t v4 = (void *)v19;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v15 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134349312;
    uint64_t v25 = v4;
    __int16 v26 = 2050;
    uint64_t v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Fence: Number of buckets,%{public}lu,%{public}lu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    int v20 = 134349312;
    uint64_t v21 = v4;
    __int16 v22 = 2050;
    uint64_t v23 = v5;
    LODWORD(v18) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Number of buckets,%{public}lu,%{public}lu",  &v20,  v18);
    int v17 = (uint8_t *)v16;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceManager::maintenanceActiveRateLimiters()", "%s\n", v16);
    if (v17 != buf) {
      free(v17);
    }
  }

uint64_t sub_10065E834(uint64_t a1, uint64_t a2)
{
  std::string::operator=(&v9, (const std::string *)a2);
  std::string::operator=(&v10, (const std::string *)(a2 + 24));
  std::string::operator=(&v11, (const std::string *)(a2 + 48));
  __int128 v16 = *(_OWORD *)(a2 + 136);
  __int128 v17 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)(a2 + 168);
  *(void *)&v18[13] = *(void *)(a2 + 181);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v12 = *(_OWORD *)(a2 + 72);
  __int128 v13 = v4;
  __int128 v5 = *(_OWORD *)(a2 + 120);
  __int128 v14 = *(_OWORD *)(a2 + 104);
  __int128 v15 = v5;
  std::string::operator=(&v19, (const std::string *)(a2 + 192));
  double v6 = v20;
  id v20 = *(id *)(a2 + 216);

  if (&v9 != (std::string *)a2) {
    sub_10009B244( v21,  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  int v8 = 4;
  (*(void (**)(uint64_t, int *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v8,  &v9,  0LL,  0xFFFFFFFFLL,  0LL);
  return sub_100668374((uint64_t)&v9);
}

void sub_10065E950(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10065E968(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  __int128 v5 = (void **)(a1 + 24);
  __int128 v6 = *(__int128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)__int128 v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  __int128 v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  uint64_t v9 = *(void *)((char *)a2 + 181);
  __int128 v10 = *(__int128 *)((char *)a2 + 168);
  __int128 v11 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(void *)(a1 + 181) = v9;
  __int128 v12 = *(__int128 *)((char *)a2 + 120);
  __int128 v13 = *(__int128 *)((char *)a2 + 104);
  __int128 v14 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 88) = v14;
  *(_OWORD *)(a1 + 104) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  __int128 v15 = (void **)(a1 + 192);
  __int128 v16 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)__int128 v15 = v16;
  *((_BYTE *)a2 + 215) = 0;
  *((_BYTE *)a2 + 192) = 0;
  __int128 v17 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *((void *)a2 + 27) = 0LL;

  sub_100007664(a1 + 224, (__n128 *)a2 + 14);
  return a1;
}

uint64_t sub_10065EAA8(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t a5)
{
  if ((a5 & 0x80000000) != 0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100660BA4(a1, a2, a3, a4, Current);
  }

  sub_1006681DC((uint64_t)&v28);
  std::string::operator=(&v28, (const std::string *)a2);
  std::string::operator=(&v29, (const std::string *)(a2 + 24));
  std::string::operator=(&v30, (const std::string *)(a2 + 48));
  __int128 v35 = *(_OWORD *)(a2 + 136);
  __int128 v36 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)__int128 v37 = *(_OWORD *)(a2 + 168);
  *(void *)&v37[13] = *(void *)(a2 + 181);
  __int128 v11 = *(_OWORD *)(a2 + 88);
  __int128 v31 = *(_OWORD *)(a2 + 72);
  __int128 v32 = v11;
  __int128 v12 = *(_OWORD *)(a2 + 120);
  __int128 v33 = *(_OWORD *)(a2 + 104);
  __int128 v34 = v12;
  std::string::operator=(&v38, (const std::string *)(a2 + 192));
  __int128 v13 = v39;
  id v39 = *(id *)(a2 + 216);

  if (&v28 != (std::string *)a2) {
    sub_10009B244( v40,  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  int v41 = *a3;
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v14 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    BOOL v15 = *a4 == 6;
    if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v16 = &v30;
    }
    else {
      __int128 v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    __int128 v17 = &v28;
    if ((v28.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
    std::string v19 = "";
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v18 = &v29;
    }
    *(_DWORD *)__int128 buf = 67175939;
    BOOL v54 = v15;
    __int16 v55 = 2082;
    __int16 v56 = v16;
    __int16 v57 = 2081;
    int v58 = v17;
    __int16 v59 = 2081;
    uint64_t v60 = v18;
    __int16 v61 = 1026;
    int v62 = a5;
    __int16 v63 = 2081;
    uint64_t v64 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Fence: Sending state notification (requested: %{private}d) for [%{public}s]/%{private}s/%{private}s to client %{pu blic}d%{private}s",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    BOOL v21 = *a4 == 6;
    if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v22 = &v30;
    }
    else {
      __int16 v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    uint64_t v23 = &v28;
    if ((v28.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v24 = &v29;
    }
    else {
      __int128 v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    uint64_t v25 = "";
    v42[0] = 67175939;
    v42[1] = v21;
    __int16 v43 = 2082;
    int v44 = v22;
    __int16 v45 = 2081;
    uint64_t v46 = v23;
    __int16 v47 = 2081;
    uint64_t v48 = v24;
    __int16 v49 = 1026;
    int v50 = a5;
    __int16 v51 = 2081;
    __int16 v52 = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Sending state notification (requested: %{private}d) for [%{public}s]/%{private}s/%{private}s to client %{pu blic}d%{private}s",  v42,  54);
    uint64_t v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::notifyFenceStateForAuthorizedFence(const CLFenceManager_Type::Fence &, const CLFenceManager_T ype::FenceStatus &, const CLFenceManager_Type::Notification &, int)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  (*(void (**)(uint64_t, int *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a4,  &v28,  0LL,  a5,  0LL);
  return sub_100668374((uint64_t)&v28);
}

void sub_10065EE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_10065EEB4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_1001040F8();
    return memcmp(a1, __s, v4) != 0;
  }

  return 1LL;
}

void sub_10065EF44(const void **a1@<X0>, std::string *a2@<X8>)
{
  else {
    size_t v4 = (size_t)a1[1];
  }
  p_p = &__p;
  sub_1000392EC((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    else {
      __int128 v6 = *a1;
    }
    memmove(p_p, v6, v4);
  }

  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 47;
  uint64_t v9 = (const std::string::value_type *)a1[3];
  __int128 v8 = a1 + 3;
  uint64_t v7 = v9;
  int v10 = *((char *)v8 + 23);
  if (v10 >= 0) {
    __int128 v11 = (const std::string::value_type *)v8;
  }
  else {
    __int128 v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v8[1];
  }
  __int128 v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10065F020( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065F03C(uint64_t a1, __int128 *a2, int *a3, _OWORD *a4)
{
  if (*a3 >= 2)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    std::string v19 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      int v20 = *a3;
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#Warning Invalid fence status, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v21 = *a3;
      *(_DWORD *)std::string::size_type v66 = 67109120;
      *(_DWORD *)&v66[4] = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "#Warning Invalid fence status, %d",  v66);
      uint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceManager::notifyAndLaunchClientForAuthorizedFenceOnEntryExit(const CLFenceManager_Type::Fence &, cons t CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  else
  {
    sub_1002718F0((char *)buf, a2);
    int v7 = *a3;
    __int128 v8 = a4[7];
    __int128 v71 = a4[6];
    __int128 v72 = v8;
    v73[0] = a4[8];
    *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)((char *)a4 + 140);
    __int128 v9 = a4[3];
    __int128 v67 = a4[2];
    __int128 v68 = v9;
    __int128 v10 = a4[5];
    __int128 v69 = a4[4];
    __int128 v70 = v10;
    __int128 v11 = a4[1];
    *(_OWORD *)std::string::size_type v66 = *a4;
    *(_OWORD *)&v66[16] = v11;
    v64[6] = v71;
    v64[7] = v72;
    v65[0] = v73[0];
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)((char *)v73 + 12);
    v64[2] = v67;
    v64[3] = v68;
    v64[4] = v69;
    v64[5] = v70;
    v64[0] = *(_OWORD *)v66;
    v64[1] = v11;
    std::string::size_type v12 = -[CLLocation initWithClientLocation:](objc_alloc(&OBJC_CLASS___CLLocation), "initWithClientLocation:", v64);
    __int128 v13 = *(void **)(a1 + 3952);
    if (v75 >= 0) {
      __int128 v14 = buf;
    }
    else {
      __int128 v14 = *(uint8_t **)buf;
    }
    BOOL v15 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3321888768LL;
    _DWORD v42[2] = sub_100663D48;
    v42[3] = &unk_101847C68;
    v42[4] = a1;
    sub_1002718F0((char *)&v43, (__int128 *)buf);
    int v54 = v7;
    __int128 v61 = v71;
    __int128 v62 = v72;
    *(_OWORD *)__int16 v63 = v73[0];
    __int128 v57 = v67;
    __int128 v58 = v68;
    __int128 v59 = v69;
    __int128 v60 = v70;
    __int128 v55 = *(_OWORD *)v66;
    __int128 v56 = *(_OWORD *)&v66[16];
    *(_OWORD *)&v63[12] = *(_OWORD *)((char *)v73 + 12);
    [v13 handleProvisionalIntermediationForService:1 forClientKey:v15 at:v12 withReply:v42];
    if (byte_101997A30)
    {
      __int128 v16 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
      __int128 v17 = -[NSCalendar components:fromDate:]( +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"),  "components:fromDate:",  248LL,  v16);
      double v18 = sub_100841558((uint64_t)v66, (uint64_t)buf, (double *)(a1 + 3744));
      if (sub_100292108())
      {
        __int128 v24 = "EXIT";
        if (!v7) {
          __int128 v24 = "ENTER";
        }
        int v41 = v24;
        if (v77 >= 0) {
          uint64_t v25 = &v76;
        }
        else {
          uint64_t v25 = v76;
        }
        if (v75 >= 0) {
          __int16 v26 = buf;
        }
        else {
          __int16 v26 = *(uint8_t **)buf;
        }
        uint64_t v27 = v80;
        std::string v28 = sub_100832C40(v71);
        uint64_t v29 = *(void *)&v66[4];
        uint64_t v30 = *(void *)&v66[12];
        uint64_t v31 = *(void *)&v66[20];
        id v32 = -[NSDateComponents month](v17, "month");
        id v33 = -[NSDateComponents day](v17, "day");
        id v34 = -[NSDateComponents hour](v17, "hour");
        id v35 = -[NSDateComponents minute](v17, "minute");
        id v36 = -[NSDateComponents second](v17, "second");
        -[NSDate timeIntervalSinceReferenceDate](v16, "timeIntervalSinceReferenceDate");
        uint64_t v38 = v37;
        -[NSDate timeIntervalSinceReferenceDate](v16, "timeIntervalSinceReferenceDate");
        __int128 v40 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"Fence %s detected\n name: %s\n bundle: %s\n rad: %.1lf\n location: %s %+.8lf,%+.8lf\n acc:±%.2lfm dist: %.1lf \n date: %ld/%ld, %ld:%ld:%ld\n time: %.2lf lat: %.1lf",  v41,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  *(void *)&v18,  v32,  v33,  v34,  v35,  v36,  v38,  v39 - v81);
        sub_100A15640(@"Fence Trigger", 0, v40);
        CFRelease(v40);
      }
    }

    if (__p)
    {
      uint64_t v53 = __p;
      operator delete(__p);
    }

    if (v50 < 0) {
      operator delete(v49);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }

    if (v83 < 0) {
      operator delete(v82);
    }
    if (v79 < 0) {
      operator delete(v78);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
    if (v75 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_10065F5A0(_Unwind_Exception *a1)
{
}

id sub_10065F5F0(__int128 **a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  v3[2] = sub_100669260;
  v3[3] = &unk_101847ED0;
  memset(v4, 0, sizeof(v4));
  sub_1006692E8((char *)v4, *a1, a1[1], 0xEF7BDEF7BDEF7BDFLL * (((char *)a1[1] - (char *)*a1) >> 3));
  id v1 = [v3 copy];
  __int128 v5 = (void **)v4;
  sub_1006684D8(&v5);
  return v1;
}

void sub_10065F694(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1006684D8((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10065F6AC(uint64_t a1, uint64_t a2)
{
  std::string::operator=(&v9, (const std::string *)a2);
  std::string::operator=(&v10, (const std::string *)(a2 + 24));
  std::string::operator=(&v11, (const std::string *)(a2 + 48));
  __int128 v16 = *(_OWORD *)(a2 + 136);
  __int128 v17 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)double v18 = *(_OWORD *)(a2 + 168);
  *(void *)&v18[13] = *(void *)(a2 + 181);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v12 = *(_OWORD *)(a2 + 72);
  __int128 v13 = v4;
  __int128 v5 = *(_OWORD *)(a2 + 120);
  __int128 v14 = *(_OWORD *)(a2 + 104);
  __int128 v15 = v5;
  std::string::operator=(&v19, (const std::string *)(a2 + 192));
  __int128 v6 = v20;
  id v20 = *(id *)(a2 + 216);

  if (&v9 != (std::string *)a2) {
    sub_10009B244( v21,  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  int v8 = 7;
  (*(void (**)(uint64_t, int *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v8,  &v9,  0LL,  0xFFFFFFFFLL,  0LL);
  return sub_100668374((uint64_t)&v9);
}

void sub_10065F7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10065F7E0(uint64_t a1, void *a2)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)__int128 buf = 134217984;
    int v21 = (void *)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying failure for %lu fences", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    unint64_t v15 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2[1] - *a2) >> 3);
    int v18 = 134217984;
    std::string v19 = (void *)v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Notifying failure for %lu fences",  &v18);
    __int128 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::notifyClientsOfInvalidFences(const std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  if (a2[1] != *a2)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    do
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v8 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *a2 + v6;
        std::string v10 = (void *)(v9 + 24);
        *(_DWORD *)__int128 buf = 136315138;
        int v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Notifying failure for Fence, %s", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        uint64_t v11 = *a2 + v6;
        __int128 v12 = (void *)(v11 + 24);
        int v18 = 136315138;
        std::string v19 = v12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Notifying failure for Fence, %s",  (const char *)&v18);
        __int128 v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::notifyClientsOfInvalidFences(const std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }

      sub_10065FBAC(a1, (__int128 *)(*a2 + v6));
      ++v7;
      v6 += 248LL;
    }

    while (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2[1] - *a2) >> 3) > v7);
  }

void sub_10065FBAC(uint64_t a1, __int128 *a2)
{
  __int128 v33 = xmmword_101339690;
  __int128 v34 = xmmword_1013396A0;
  memset(v35, 0, 28);
  __int128 v29 = xmmword_101339650;
  __int128 v30 = xmmword_101339660;
  __int128 v31 = xmmword_101339670;
  __int128 v32 = xmmword_101339680;
  __int128 v27 = xmmword_101339630;
  __int128 v28 = xmmword_101339640;
  sub_1002718F0((char *)__dst, a2);
  uint64_t v3 = *(void **)(a1 + 3952);
  if (v37 >= 0) {
    __int128 v4 = __dst;
  }
  else {
    __int128 v4 = (void **)__dst[0];
  }
  unint64_t v5 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768LL;
  v6[2] = sub_100663AA8;
  void v6[3] = &unk_101847C38;
  v6[4] = a1;
  sub_1002718F0((char *)&v7, (__int128 *)__dst);
  *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)v35 + 12);
  __int128 v24 = v33;
  __int128 v25 = v34;
  v26[0] = v35[0];
  __int128 v20 = v29;
  __int128 v21 = v30;
  __int128 v22 = v31;
  __int128 v23 = v32;
  __int128 v18 = v27;
  __int128 v19 = v28;
  [v3 handleProvisionalIntermediationForService:1 forClientKey:v5 at:0 withReply:v6];
  if (__p)
  {
    __int128 v17 = __p;
    operator delete(__p);
  }

  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v45)
  {
    char v46 = v45;
    operator delete(v45);
  }

  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10065FD94(_Unwind_Exception *a1)
{
}

void sub_10065FDB8(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v8 = sub_1002F8DDC();
  uint64_t v9 = off_10198EB10;
  *(void *)__int128 buf = CFAbsoluteTimeGetCurrent();
  sub_1002AC7B8(v8, v9, buf);
  uint64_t v10 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v10 + 944LL))(v10);
  if (sub_1009E30CC(a1 + 112, (uint64_t *)a3))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v12 = *(double *)(a3 + 120);
    int v56 = *a2;
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    double v13 = Current - v12;
    char v14 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      sub_100923668(a3, &__p);
      id v15 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      unsigned int v16 = *a4 + 1;
      __int128 v17 = v16 > 4 ? "---" : off_101847F50[v16];
      uint64_t v27 = *(void *)(a1 + 3808);
      uint64_t v28 = *(void *)(a1 + 3800);
      *(_DWORD *)__int128 buf = 136381955;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v67 = 2081;
      *(void *)__int128 v68 = v17;
      *(_WORD *)&v68[8] = 1026;
      LODWORD(v69) = v56 == 0;
      WORD2(v69) = 2050;
      *(double *)((char *)&v69 + 6) = v13;
      HIWORD(v69) = 2049;
      uint64_t v70 = v27;
      __int16 v71 = 2049;
      uint64_t v72 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Fence:Status fence, %{private}s, status, %{private}s, isIssueNotification, %{public}d, fenceAge, %{public}.1lf, StopTime, %{private}.1lf, StartTime, %{private}.1lf",  buf,  0x3Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      uint64_t v43 = qword_101934878;
      sub_100923668(a3, &v60);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        id v44 = &v60;
      }
      else {
        id v44 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
      }
      unsigned int v45 = *a4 + 1;
      if (v45 > 4) {
        char v46 = "---";
      }
      else {
        char v46 = off_101847F50[v45];
      }
      uint64_t v50 = *(void *)(a1 + 3808);
      uint64_t v51 = *(void *)(a1 + 3800);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381955;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v46;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
      LODWORD(v62) = v56 == 0;
      WORD2(v62) = 2050;
      *(double *)((char *)&v62 + 6) = v13;
      HIWORD(v62) = 2049;
      uint64_t v63 = v50;
      __int16 v64 = 2049;
      uint64_t v65 = v51;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v43,  0LL,  "Fence:Status fence, %{private}s, status, %{private}s, isIssueNotification, %{public}d, fenceAge, %{public}.1lf, StopTime, %{private}.1lf, StartTime, %{private}.1lf",  &__p,  58);
      uint64_t v53 = v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::fenceStatusChanged(const CLFenceMonitor_Type::Notification &, const CLFenceManager_Type::Fe nce &, const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)",  "%s\n",  v53);
      if (v53 != buf) {
        free(v53);
      }
    }

    unint64_t v29 = *(void *)(a3 + 232) - *(void *)(a3 + 224);
    if (v29)
    {
      unint64_t v59 = v29 >> 4;
      if ((int)(v29 >> 4) >= -8)
      {
        int v30 = 0;
        int v31 = ((int)v59 - 1) / 10;
        int v32 = -1;
        unint64_t v33 = v29 >> 4;
        do
        {
          if (v30 >= v31) {
            int v34 = v33;
          }
          else {
            int v34 = 10;
          }
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          ++v30;
          id v35 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
          {
            else {
              uint64_t v36 = *(void *)(a3 + 24);
            }
            sub_100923D38(a3, v32 + 1, v34 + v32, &__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)__int128 buf = 136447235;
            *(void *)&uint8_t buf[4] = v36;
            __int16 v67 = 1026;
            *(_DWORD *)__int128 v68 = v59;
            *(_WORD *)&v68[4] = 1026;
            *(_DWORD *)&v68[6] = v30;
            LOWORD(v69) = 1024;
            *(_DWORD *)((char *)&v69 + 2) = v31 + 1;
            WORD3(v69) = 2081;
            *((void *)&v69 + 1) = p_p;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s",  buf,  0x28u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101847D40);
            }
            uint64_t v38 = qword_101934878;
            else {
              std::string::size_type v39 = *(void *)(a3 + 24);
            }
            sub_100923D38(a3, v32 + 1, v34 + v32, &v60);
            __int128 v40 = &v60;
            if ((v60.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int128 v40 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 136447235;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v39;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v59;
            WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(__p.__r_.__value_.__r.__words[2]) = v30;
            LOWORD(v62) = 1024;
            *(_DWORD *)((char *)&v62 + 2) = v31 + 1;
            WORD3(v62) = 2081;
            *((void *)&v62 + 1) = v40;
            LODWORD(v54) = 40;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  0LL,  "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s",  &__p,  v54);
            uint64_t v42 = v41;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::fenceStatusChanged(const CLFenceMonitor_Type::Notification &, const CLFenceManager_Ty pe::Fence &, const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::FenceStatus &, const CLD aemonLocation &)",  "%s\n",  v42);
            if (v42 != buf) {
              free(v42);
            }
          }

          v32 += 10;
          LODWORD(v33) = v33 - 10;
        }

        while ((v31 & ~(v31 >> 31)) + 1 != v30);
      }
    }

    if (v56)
    {
      *(_DWORD *)__int128 buf = 8;
      sub_10065EAA8(a1, a3, a4, (int *)buf, 0xFFFFFFFFLL);
    }

    else
    {
      sub_10065F03C(a1, (__int128 *)a3, a4, a6);
    }
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    __int128 v18 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      sub_100923668(a3, &__p);
      __int128 v19 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      unsigned int v20 = *a4 + 1;
      __int128 v21 = v20 > 4 ? "---" : off_101847F50[v20];
      uint64_t v22 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
      *(_DWORD *)__int128 buf = 136381187;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v67 = 2081;
      *(void *)__int128 v68 = v21;
      *(_WORD *)&v68[8] = 2081;
      *(void *)&__int128 v69 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification\n",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      uint64_t v23 = qword_101934878;
      sub_100923668(a3, &v60);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v24 = &v60;
      }
      else {
        __int128 v24 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
      }
      unsigned int v25 = *a4 + 1;
      if (v25 > 4) {
        __int16 v26 = "---";
      }
      else {
        __int16 v26 = off_101847F50[v25];
      }
      else {
        uint64_t v47 = *(void *)a3;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2081;
      *(void *)&__int128 v62 = v47;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification\n",  &__p,  32);
      __int16 v49 = v48;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::fenceStatusChanged(const CLFenceMonitor_Type::Notification &, const CLFenceManager_Type::Fe nce &, const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)",  "%s\n",  v49);
      if (v49 != buf) {
        free(v49);
      }
    }
  }

void sub_1006606C4(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4, double a5)
{
  LODWORD(v44.__r_.__value_.__l.__data_) = *a3;
  *(double *)&v44.__r_.__value_.__l.__size_ = a5;
  LODWORD(v44.__r_.__value_.__r.__words[2]) = 8;
  uint64_t v10 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence notification");
  __int128 v11 = a4[6];
  __int128 v12 = a4[8];
  __int128 v53 = a4[7];
  v54[0] = v12;
  *(_OWORD *)((char *)v54 + 12) = *(__int128 *)((char *)a4 + 140);
  __int128 v13 = a4[3];
  __int128 v48 = a4[2];
  __int128 v49 = v13;
  __int128 v14 = a4[5];
  __int128 v50 = a4[4];
  id v45 = v10;
  __int128 v51 = v14;
  __int128 v52 = v11;
  __int128 v15 = a4[1];
  __int128 v46 = *a4;
  __int128 v47 = v15;
  *(void *)std::stringbuf::string_type __p = a2;
  unsigned int v16 = sub_10066952C((uint64_t **)(a1 + 3816), (unsigned __int8 *)a2, (uint64_t)&unk_1012CF090, (__int128 **)__p);
  sub_100660FA8((int *)v16 + 70, (int *)&v44);
  __int128 v17 = *(_OWORD *)(v16 + 53);
  __int128 v60 = *(_OWORD *)(v16 + 51);
  __int128 v61 = v17;
  v62[0] = *(_OWORD *)(v16 + 55);
  *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)v16 + 452);
  __int128 v18 = *(_OWORD *)(v16 + 45);
  __int128 v56 = *(_OWORD *)(v16 + 43);
  __int128 v57 = v18;
  __int128 v19 = *(_OWORD *)(v16 + 49);
  __int128 v58 = *(_OWORD *)(v16 + 47);
  __int128 v59 = v19;
  __int128 v20 = *(_OWORD *)(v16 + 41);
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(v16 + 39);
  *(_OWORD *)&__p[16] = v20;
  __int128 v21 = v53;
  *(_OWORD *)(v16 + 51) = v52;
  *(_OWORD *)(v16 + 53) = v21;
  *(_OWORD *)(v16 + 55) = v54[0];
  *(_OWORD *)((char *)v16 + 452) = *(_OWORD *)((char *)v54 + 12);
  __int128 v22 = v49;
  *(_OWORD *)(v16 + 43) = v48;
  *(_OWORD *)(v16 + 45) = v22;
  __int128 v23 = v51;
  *(_OWORD *)(v16 + 47) = v50;
  *(_OWORD *)(v16 + 49) = v23;
  __int128 v24 = v47;
  *(_OWORD *)(v16 + 39) = v46;
  *(_OWORD *)(v16 + 41) = v24;
  __int128 v52 = v60;
  __int128 v53 = v61;
  v54[0] = v62[0];
  *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)v62 + 12);
  __int128 v48 = v56;
  __int128 v49 = v57;
  __int128 v50 = v58;
  __int128 v51 = v59;
  __int128 v46 = *(_OWORD *)__p;
  __int128 v47 = *(_OWORD *)&__p[16];

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  unsigned int v25 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v26 = *a3 + 1;
    if (v26 > 4) {
      uint64_t v27 = "---";
    }
    else {
      uint64_t v27 = off_101847F50[v26];
    }
    else {
      size_t v28 = *(void *)(a2 + 8);
    }
    unint64_t v29 = &v44;
    sub_1000392EC((uint64_t)&v44, v28 + 1);
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (v28)
    {
      else {
        int v30 = *(const void **)a2;
      }
      memmove(v29, v30, v28);
    }

    *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 47;
    int v31 = *(char *)(a2 + 47);
    if (v31 >= 0) {
      int v32 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      int v32 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v31 >= 0) {
      std::string::size_type v33 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      std::string::size_type v33 = *(void *)(a2 + 32);
    }
    int v34 = std::string::append(&v44, v32, v33);
    __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = v34->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v35;
    v34->__r_.__value_.__l.__size_ = 0LL;
    v34->__r_.__value_.__l.__cap_ = 0LL;
    v34->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v36 = __p;
    if (__p[23] < 0) {
      uint64_t v36 = *(_BYTE **)__p;
    }
    LODWORD(v44.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(v44.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v36;
    HIWORD(v44.__r_.__value_.__r.__words[2]) = 2049;
    id v45 = *(id *)&a5;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "pending, transition, %{private}s, fence, %{private}s, timestamp, %{private}.1lf",  (uint8_t *)&v44,  0x20u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v44, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    unsigned int v37 = *a3 + 1;
    if (v37 > 4) {
      uint64_t v38 = "---";
    }
    else {
      uint64_t v38 = off_101847F50[v37];
    }
    uint64_t v39 = qword_101934878;
    sub_10065EF44((const void **)a2, &v43);
    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v40 = &v43;
    }
    else {
      __int128 v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::stringbuf::string_type __p = 136381187;
    *(void *)&__p[4] = v38;
    *(_WORD *)&__p[12] = 2081;
    *(void *)&__p[14] = v40;
    *(_WORD *)&__p[22] = 2049;
    *(double *)&__p[24] = a5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  v39,  2LL,  "pending, transition, %{private}s, fence, %{private}s, timestamp, %{private}.1lf",  __p,  32);
    uint64_t v42 = v41;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::addPendingFenceEntryExitNotification(CFAbsoluteTime, const CLFenceManager_Type::Fence &, cons t CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)",  "%s\n",  (const char *)v42);
    if (v42 != &v44) {
      free(v42);
    }
  }

void sub_100660B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100660BA4(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, double a5)
{
  int v9 = *a4;
  LODWORD(v32.__r_.__value_.__l.__data_) = *a3;
  *(double *)&v32.__r_.__value_.__l.__size_ = a5;
  LODWORD(v32.__r_.__value_.__r.__words[2]) = v9;
  id v33 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence notification");
  *(void *)std::stringbuf::string_type __p = a2;
  uint64_t v10 = sub_10066982C((uint64_t **)(a1 + 3840), (unsigned __int8 *)a2, (uint64_t)&unk_1012CF090, (__int128 **)__p);
  sub_100660FA8((int *)v10 + 70, (int *)&v32);

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v11 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v12 = *a3 + 1;
    if (v12 > 4) {
      __int128 v13 = "---";
    }
    else {
      __int128 v13 = off_101847F50[v12];
    }
    else {
      size_t v14 = *(void *)(a2 + 8);
    }
    __int128 v15 = &v32;
    sub_1000392EC((uint64_t)&v32, v14 + 1);
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      else {
        unsigned int v16 = *(const void **)a2;
      }
      memmove(v15, v16, v14);
    }

    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 47;
    int v17 = *(char *)(a2 + 47);
    if (v17 >= 0) {
      __int128 v18 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      __int128 v18 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      std::string::size_type v19 = *(void *)(a2 + 32);
    }
    __int128 v20 = std::string::append(&v32, v18, v19);
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = __p;
    if (__p[23] < 0) {
      __int128 v22 = *(_BYTE **)__p;
    }
    LODWORD(v32.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(v32.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
    HIWORD(v32.__r_.__value_.__r.__words[2]) = 2049;
    id v33 = *(id *)&a5;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "pending, state, %{private}s, fence, %{private}s, timestamp, %{private}.1lf",  (uint8_t *)&v32,  0x20u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v32, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    unsigned int v23 = *a3 + 1;
    if (v23 > 4) {
      __int128 v24 = "---";
    }
    else {
      __int128 v24 = off_101847F50[v23];
    }
    uint64_t v25 = qword_101934878;
    sub_10065EF44((const void **)a2, &v29);
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v26 = &v29;
    }
    else {
      unsigned int v26 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::stringbuf::string_type __p = 136381187;
    *(void *)&__p[4] = v24;
    *(_WORD *)&__p[12] = 2081;
    *(void *)&__p[14] = v26;
    *(_WORD *)&__p[22] = 2049;
    double v31 = a5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  v25,  2LL,  "pending, state, %{private}s, fence, %{private}s, timestamp, %{private}.1lf",  __p,  32);
    size_t v28 = v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::addPendingFenceStateNotification(CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CL FenceManager_Type::FenceStatus &, const CLFenceManager_Type::Notification &)",  "%s\n",  (const char *)v28);
    if (v28 != &v32) {
      free(v28);
    }
  }

void sub_100660F5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100660FA8(int *a1, int *a2)
{
  uint64_t v3 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0LL;
  int v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  int v6 = a1[4];
  a1[4] = a2[4];
  a2[4] = v6;
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0LL;
  *((void *)a2 + 3) = v7;

  return a1;
}

void sub_100661014(uint64_t a1, std::string::size_type a2, int *a3, double a4)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v8 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      size_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = &v44;
    sub_1000392EC((uint64_t)&v44, v9 + 1);
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v10 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      else {
        __int128 v11 = *(const void **)a2;
      }
      memmove(v10, v11, v9);
    }

    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
    int v12 = *(char *)(a2 + 47);
    if (v12 >= 0) {
      __int128 v13 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      __int128 v13 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      std::string::size_type v14 = *(void *)(a2 + 32);
    }
    __int128 v15 = std::string::append(&v44, v13, v14);
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v44.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v44.__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "pending, failure, fence, %{private}s, timestamp, %{private}.1lf",  (uint8_t *)&v44,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v44, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v30 = qword_101934878;
    sub_10065EF44((const void **)a2, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v31 = &__p;
    }
    else {
      double v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v40 = 136380931;
    char v41 = v31;
    __int16 v42 = 2049;
    double v43 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  v30,  2LL,  "pending, failure, fence, %{private}s, timestamp, %{private}.1lf",  &v40,  22);
    id v33 = v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::addPendingFenceFailureNotification(CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::Notification &)",  "%s\n",  (const char *)v33);
    if (v33 != &v44) {
      free(v33);
    }
  }

  int v18 = *a3;
  *(double *)&v44.__r_.__value_.__l.__data_ = a4;
  LODWORD(v44.__r_.__value_.__r.__words[1]) = v18;
  v44.__r_.__value_.__l.__cap_ = (std::string::size_type)-[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence failure notification");
  __p.__r_.__value_.__r.__words[0] = a2;
  std::string::size_type v19 = sub_1006699DC((uint64_t **)(a1 + 3864), (unsigned __int8 *)a2, (uint64_t)&unk_1012CF090, (__int128 **)&__p);
  sub_10066160C(v19 + 35, (uint64_t *)&v44);

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v20 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    __int128 v22 = &v44;
    sub_1000392EC((uint64_t)&v44, v21 + 1);
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (v21)
    {
      else {
        unsigned int v23 = *(const void **)a2;
      }
      memmove(v22, v23, v21);
    }

    *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 47;
    int v24 = *(char *)(a2 + 47);
    if (v24 >= 0) {
      uint64_t v25 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      uint64_t v25 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v24 >= 0) {
      std::string::size_type v26 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      std::string::size_type v26 = *(void *)(a2 + 32);
    }
    uint64_t v27 = std::string::append(&v44, v25, v26);
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    std::string v29 = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v44.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
    WORD2(v44.__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "pending, failure, fence, %{private}s, timestamp, %{private}.1lf, created transaction",  (uint8_t *)&v44,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v44, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v34 = qword_101934878;
    sub_10065EF44((const void **)a2, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v35 = &__p;
    }
    else {
      __int128 v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v40 = 136380931;
    char v41 = v35;
    __int16 v42 = 2049;
    double v43 = a4;
    LODWORD(v38) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  v34,  2LL,  "pending, failure, fence, %{private}s, timestamp, %{private}.1lf, created transaction",  &v40,  v38);
    unsigned int v37 = v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::addPendingFenceFailureNotification(CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::Notification &)",  "%s\n",  (const char *)v37);
    if (v37 != &v44) {
      free(v37);
    }
  }

void sub_1006615C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10066160C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a2[2];
  a2[2] = 0LL;
  uint64_t v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  int v5 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  uint64_t v6 = a1[2];
  a1[2] = 0LL;
  a2[2] = v6;

  return a1;
}

void sub_100661668(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, __n128 a5)
{
  double v7 = a5.n128_f64[0];
  int v156 = a2;
  uint64_t v8 = *(uint64_t **)(a1 + 3816);
  size_t v9 = (uint64_t *)(a1 + 3824);
  if (v8 != (uint64_t *)(a1 + 3824))
  {
    uint64_t v10 = (uint64_t **)(a1 + 3816);
    uint64_t v154 = 136316162LL;
    a5.n128_u64[0] = 136381443LL;
    __n128 v153 = a5;
    do
    {
      if (*((double *)v8 + 36) + 20.0 < v7)
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        __int128 v11 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          else {
            size_t v12 = v8[5];
          }
          sub_1000392EC((uint64_t)v163, v12 + 1);
          if (v165[9] >= 0) {
            __int128 v13 = v163;
          }
          else {
            __int128 v13 = *(_BYTE **)v163;
          }
          if (v12)
          {
            else {
              std::string::size_type v14 = (const void *)v8[4];
            }
            memmove(v13, v14, v12);
          }

          *(_WORD *)&v13[v12] = 47;
          int v15 = *((char *)v8 + 79);
          if (v15 >= 0) {
            __int128 v16 = (const std::string::value_type *)(v8 + 7);
          }
          else {
            __int128 v16 = (const std::string::value_type *)v8[7];
          }
          if (v15 >= 0) {
            std::string::size_type v17 = *((unsigned __int8 *)v8 + 79);
          }
          else {
            std::string::size_type v17 = v8[8];
          }
          int v18 = std::string::append((std::string *)v163, v16, v17);
          __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = v18->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string __p = v19;
          v18->__r_.__value_.__l.__size_ = 0LL;
          v18->__r_.__value_.__l.__cap_ = 0LL;
          v18->__r_.__value_.__r.__words[0] = 0LL;
          if ((v165[9] & 0x80000000) != 0) {
            operator delete(*(void **)v163);
          }
          __int128 v20 = __p;
          if (__p[23] < 0) {
            __int128 v20 = *(_BYTE **)__p;
          }
          unsigned int v21 = *((_DWORD *)v8 + 70) + 1;
          __int128 v22 = "---";
          if (v21 <= 4) {
            __int128 v22 = off_101847F50[v21];
          }
          unsigned int v23 = "---";
          uint64_t v24 = v8[36];
          *(_DWORD *)v163 = v154;
          *(void *)&v163[4] = v20;
          __int16 v164 = 2080;
          *(void *)v165 = v22;
          *(_WORD *)&v165[8] = 2080;
          *(void *)&v165[10] = v23;
          __int16 v166 = 1024;
          int v167 = a3;
          __int16 v168 = 2048;
          uint64_t v169 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#Warning Fence: avoid notifyFenceEntryExitForAuthorizedFence, fence, %s, status, %s, searchStatus, %s, clien t, %d, timestamp,%.1lf",  v163,  0x30u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(v163, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          uint64_t v47 = qword_101934878;
          sub_10065EF44((const void **)v8 + 4, &v157);
          __int128 v48 = &v157;
          if ((v157.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int128 v48 = (std::string *)v157.__r_.__value_.__r.__words[0];
          }
          unsigned int v49 = *((_DWORD *)v8 + 70) + 1;
          __int128 v50 = "---";
          if (v49 <= 4) {
            __int128 v50 = off_101847F50[v49];
          }
          __int128 v51 = "---";
          uint64_t v52 = v8[36];
          *(_DWORD *)std::string __p = v154;
          *(void *)&__p[4] = v48;
          *(_WORD *)&__p[12] = 2080;
          *(void *)&__p[14] = v50;
          *(_WORD *)&__p[22] = 2080;
          *(void *)&_BYTE __p[24] = v51;
          __int16 v159 = 1024;
          int v160 = a3;
          __int16 v161 = 2048;
          uint64_t v162 = v52;
          LODWORD(v152) = 48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  v163,  1628LL,  &_mh_execute_header,  v47,  2LL,  "#Warning Fence: avoid notifyFenceEntryExitForAuthorizedFence, fence, %s, status, %s, searchStatus, %s, clien t, %d, timestamp,%.1lf",  __p,  v152,  (const char *)v153.n128_u64[0],  v153.n128_u32[2],  *(double *)&v154);
          uint64_t v54 = v53;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceS tatus, int, const std::string &)",  "%s\n",  v54);
          if (v54 != v163) {
            free(v54);
          }
        }

        uint64_t v25 = sub_1000087E8(v10, v8);
        sub_100668624((uint64_t)(v8 + 4));
        operator delete(v8);
        goto LABEL_90;
      }

      uint64_t v26 = *((unsigned __int8 *)v8 + 55);
      if ((v26 & 0x80u) == 0LL) {
        uint64_t v27 = *((unsigned __int8 *)v8 + 55);
      }
      else {
        uint64_t v27 = v8[5];
      }
      uint64_t v28 = a4[23];
      int v29 = (char)v28;
      if ((v28 & 0x80u) != 0LL) {
        uint64_t v28 = *((void *)a4 + 1);
      }
      if (v27 == v28)
      {
        if (v29 >= 0) {
          uint64_t v30 = a4;
        }
        else {
          uint64_t v30 = *(unsigned __int8 **)a4;
        }
        if ((v26 & 0x80) == 0)
        {
          if (*((_BYTE *)v8 + 55))
          {
            double v31 = (unsigned __int8 *)(v8 + 4);
            while (*v31 == *v30)
            {
              ++v31;
              ++v30;
              if (!--v26) {
                goto LABEL_52;
              }
            }

            goto LABEL_85;
          }

LABEL_303:
      __int16 v142 = (uint64_t *)v113[1];
      if (v142)
      {
        do
        {
          v125 = v142;
          __int16 v142 = (uint64_t *)*v142;
        }

        while (v142);
      }

      else
      {
        do
        {
          v125 = (uint64_t *)v113[2];
          BOOL v46 = *v125 == (void)v113;
          __int128 v113 = v125;
        }

        while (!v46);
      }

              *(_DWORD *)(a1 + 136) = v127;
              goto LABEL_279;
            case 203:
              *(void *)(a1 + 172) |= 4uLL;
              __int128 v130 = *((void *)this + 1);
              __int128 v131 = *((void *)this + 2);
              __int128 v132 = *(void *)this;
              if (v130 <= 0xFFFFFFFFFFFFFFF5LL && v130 + 10 <= v131)
              {
                size_t v133 = 0;
                int v134 = 0;
                std::string v135 = 0LL;
                do
                {
                  int v136 = v130 + 1;
                  *((void *)this + 1) = v130 + 1;
                  uint64_t v137 = *(_BYTE *)(v132 + v130);
                  v135 |= (unint64_t)(v137 & 0x7F) << v133;
                  if ((v137 & 0x80) == 0) {
                    goto LABEL_307;
                  }
                  v133 += 7;
                  __int128 v130 = v136;
                  std::string::size_type v14 = v134++ > 8;
                }

                while (!v14);
LABEL_255:
                std::string v135 = 0LL;
                goto LABEL_307;
              }

              v190 = 0;
              v191 = 0;
              std::string v135 = 0LL;
              if (v131 <= v130) {
                __int128 v131 = *((void *)this + 1);
              }
              while (2)
              {
                if (v131 == v130)
                {
                  std::string v135 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  v192 = v130 + 1;
                  v193 = *(_BYTE *)(v132 + v130);
                  *((void *)this + 1) = v192;
                  v135 |= (unint64_t)(v193 & 0x7F) << v190;
                  if (v193 < 0)
                  {
                    v190 += 7;
                    __int128 v130 = v192;
                    std::string::size_type v14 = v191++ > 8;
                    if (v14) {
                      goto LABEL_255;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    std::string v135 = 0LL;
                  }
                }

                break;
              }

        *(_DWORD *)(a1 + 128) = v147;
        goto LABEL_304;
      default:
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_304;
    }
  }

LABEL_308:
      __int128 v113 = v125;
    }

    while (v125 != (uint64_t *)(a1 + 3872));
  }

    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    uint64_t v65 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfCyclingImpactThresholds",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10184D4F8);
      }
      LOWORD(v310) = 0;
      LODWORD(v309) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfCyclingImpactThresholds",  &v310,  v309);
      v246 = (uint8_t *)v245;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)",  "%s\n",  v245);
      if (v246 != buf) {
        free(v246);
      }
    }

    std::string::size_type v66 = sub_1008D9630();
    sub_100737F18(v66);
    if ((a4 & 0x800) == 0) {
      goto LABEL_320;
    }
    goto LABEL_314;
  }

  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10184D4F8);
  }
  std::string::size_type v138 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "Dropping reason for canceling because of untracked operating mode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    LOWORD(v310) = 0;
    LODWORD(v309) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "Dropping reason for canceling because of untracked operating mode",  &v310,  v309);
    v308 = (uint8_t *)v307;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)",  "%s\n",  v307);
    if (v308 != buf) {
      free(v308);
    }
  }

void sub_100662C18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100662C50(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4, uint64_t a5)
{
  if (*a3 >= 2u) {
    sub_101241D80();
  }
  uint64_t v96 = 0LL;
  uint64_t v97 = (double *)&v96;
  uint64_t v98 = 0x2020000000LL;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if ((a5 & 0x80000000) != 0) {
    sub_1006606C4(a1, a2, a3, a4, v97[3]);
  }
  uint64_t v92 = 0LL;
  v93 = &v92;
  uint64_t v94 = 0x2020000000LL;
  BOOL v95 = *a3 != 0;
  uint64_t v85 = 0LL;
  v86 = &v85;
  uint64_t v87 = 0x67812000000LL;
  int v88 = sub_1006634EC;
  uint64_t v89 = sub_1006636A4;
  std::string::size_type v90 = "/!0/-0";
  sub_1006681DC((uint64_t)v91);
  uint64_t v78 = 0LL;
  uint64_t v79 = &v78;
  uint64_t v80 = 0xB812000000LL;
  int v81 = sub_1006636AC;
  uint64_t v82 = nullsub_276;
  char v83 = &unk_10175E27B;
  sub_1009CA974(a1 + 296, (uint64_t)&v84);
  uint64_t v10 = v86;
  __int128 v11 = v86 + 6;
  std::string::operator=((std::string *)v86 + 2, (const std::string *)a2);
  std::string::operator=((std::string *)v10 + 3, (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)v10 + 4, (const std::string *)(a2 + 48));
  __int128 v12 = *(_OWORD *)(a2 + 72);
  __int128 v13 = *(_OWORD *)(a2 + 88);
  __int128 v14 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v10 + 21) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v10 + 19) = v14;
  *(_OWORD *)(v10 + 17) = v13;
  *(_OWORD *)(v10 + 15) = v12;
  __int128 v15 = *(_OWORD *)(a2 + 136);
  __int128 v16 = *(_OWORD *)(a2 + 152);
  __int128 v17 = *(_OWORD *)(a2 + 168);
  *(uint64_t *)((char *)v10 + 229) = *(void *)(a2 + 181);
  *(_OWORD *)(v10 + 27) = v17;
  *(_OWORD *)(v10 + 25) = v16;
  *(_OWORD *)(v10 + 23) = v15;
  std::string::operator=((std::string *)v10 + 10, (const std::string *)(a2 + 192));
  int v18 = (void *)v10[33];
  v10[33] = (uint64_t)*(id *)(a2 + 216);

  if (v11 != (void *)a2) {
    sub_10009B244( (char *)v10 + 272,  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  __int128 v19 = v86;
  __int128 v20 = v86 + 68;
  __int128 v21 = a4[1];
  *((_OWORD *)v86 + 34) = *a4;
  *((_OWORD *)v19 + 35) = v21;
  __int128 v22 = a4[5];
  __int128 v24 = a4[2];
  __int128 v23 = a4[3];
  *((_OWORD *)v19 + 38) = a4[4];
  *((_OWORD *)v19 + 39) = v22;
  *((_OWORD *)v19 + 36) = v24;
  *((_OWORD *)v19 + 37) = v23;
  __int128 v26 = a4[7];
  __int128 v25 = a4[8];
  __int128 v27 = a4[6];
  *(_OWORD *)((char *)v20 + 140) = *(__int128 *)((char *)a4 + 140);
  *((_OWORD *)v19 + 41) = v26;
  *((_OWORD *)v19 + 42) = v25;
  *((_OWORD *)v19 + 40) = v27;
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  uint64_t v28 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    if (*((_DWORD *)v93 + 6)) {
      int v29 = "exited";
    }
    else {
      int v29 = "entered";
    }
    uint64_t v30 = v86 + 12;
    double v31 = v86 + 6;
    std::string v32 = v86 + 9;
    size_t v33 = " (all)";
    double v34 = *((double *)v86 + 18);
    int v35 = *((unsigned __int8 *)v86 + 236);
    unsigned int v75 = a5;
    __int128 v71 = v30;
    unsigned int v73 = v29;
    int v67 = v32;
    std::string::size_type v69 = v31;
    uint64_t v65 = v33;
    if (v34 <= 400.0)
    {
      if (*((_BYTE *)v86 + 236))
      {
        BOOL v63 = 0;
        int v35 = 1;
LABEL_27:
        uint64_t v36 = v86[25];
        BOOL v37 = v34 >= 7000.0;
        unsigned int v38 = *((_DWORD *)v86 + 52);
        BOOL v39 = v86[35] != v86[34];
        int isStatic = CLMotionActivity::isStatic((CLMotionActivity *)(v79 + 6));
        int isWalking = CLMotionActivity::isWalking((CLMotionActivity *)(v79 + 6));
        int isDriving = CLMotionActivity::isDriving((CLMotionActivity *)(v79 + 6));
        int v43 = CLMotionActivity::isInVehicle((CLMotionActivity *)(v79 + 6));
        *(_DWORD *)__int128 buf = 136384515;
        size_t v133 = v73;
        __int16 v134 = 2082;
        std::string v135 = v71;
        __int16 v136 = 2081;
        uint64_t v137 = v69;
        __int16 v138 = 2081;
        std::string v139 = v67;
        __int16 v140 = 1026;
        unsigned int v141 = v75;
        __int16 v142 = 2081;
        uint64_t v143 = v65;
        __int16 v144 = 2049;
        uint64_t v145 = v36;
        __int16 v146 = 1025;
        BOOL v147 = v63;
        __int16 v148 = 1025;
        BOOL v149 = v37;
        a5 = v75;
        __int16 v150 = 1025;
        int v151 = (v38 >> 4) & 1;
        __int16 v152 = 1025;
        BOOL v153 = v39;
        __int16 v154 = 1025;
        int v155 = v35;
        __int16 v156 = 1025;
        int v157 = isStatic;
        __int16 v158 = 1025;
        int v159 = isWalking;
        __int16 v160 = 1025;
        int v161 = isDriving;
        __int16 v162 = 1025;
        int v163 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Fence: Sending %{private}s notification for [%{public}s]/%{private}s/%{private}s to client %{public}d%{private }s, sinceLast,%{private}.1f, type,%{private}d,%{private}d,%{private}d,%{private}d,%{private}d, motion,%{privat e}d,%{private}d,%{private}d,%{private}d",  buf,  0x7Au);
        goto LABEL_28;
      }

      if (*((_DWORD *)v86 + 57) != 2 && v86[35] == v86[34])
      {
        int v35 = 0;
        BOOL v63 = (v86[26] & 0x20) == 0;
        goto LABEL_27;
      }

      int v35 = 0;
    }

    BOOL v63 = 0;
    goto LABEL_27;
  }

void sub_100663474( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void *sub_1006634EC(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v2;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  __int128 v4 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v4;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  __int128 v5 = *(_OWORD *)(a2 + 120);
  __int128 v6 = *(_OWORD *)(a2 + 136);
  __int128 v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  __int128 v8 = *(_OWORD *)(a2 + 184);
  __int128 v9 = *(_OWORD *)(a2 + 200);
  __int128 v10 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 229) = *(void *)(a2 + 229);
  *(_OWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  __int128 v11 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v11;
  *(void *)(a2 + 240) = 0LL;
  *(void *)(a2 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = *(void *)(a2 + 288);
  *(void *)(a2 + 272) = 0LL;
  *(void *)(a2 + 280) = 0LL;
  *(void *)(a2 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  __int128 v12 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v12;
  *(void *)(a2 + 296) = 0LL;
  *(void *)(a2 + 304) = 0LL;
  *(void *)(a2 + 312) = 0LL;
  __int128 v13 = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = v13;
  *(void *)(a2 + 32_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 336) = 0LL;
  *(void *)(a2 + 320) = 0LL;
  __int128 v14 = *(_OWORD *)(a2 + 344);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = v14;
  *(void *)(a2 + 344) = 0LL;
  *(void *)(a2 + 352) = 0LL;
  *(void *)(a2 + 360) = 0LL;
  __int128 v15 = *(_OWORD *)(a2 + 368);
  __int128 v16 = *(_OWORD *)(a2 + 384);
  __int128 v17 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v17;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x7E0], 8) = v15;
  *(_OWORD *)(a1 + 384) = v16;
  __int128 v18 = *(_OWORD *)(a2 + 432);
  __int128 v19 = *(_OWORD *)(a2 + 448);
  __int128 v20 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 477) = *(void *)(a2 + 477);
  *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x7E0], 8) = v19;
  *(_OWORD *)(a1 + 464) = v20;
  *(_OWORD *)(a1 + 432) = v18;
  __int128 v21 = *(_OWORD *)(a2 + 488);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x7E0], 8) = v21;
  *(void *)(a2 + 48_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 496) = 0LL;
  *(void *)(a2 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a2 + 512) = 0LL;
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x7E0], 8) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a2 + 52_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 520) = 0LL;
  *(void *)(a2 + 536) = 0LL;
  return memcpy((void *)(a1 + 544), (const void *)(a2 + 544), 0x458uLL);
}

uint64_t sub_1006636A4(uint64_t a1)
{
  return sub_100668374(a1 + 48);
}

__n128 sub_1006636AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)(a2 + 48);
  __int128 v2 = *(_OWORD *)(a2 + 64);
  __int128 v3 = *(_OWORD *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 80) = v3;
  __n128 result = *(__n128 *)(a2 + 128);
  __int128 v6 = *(_OWORD *)(a2 + 144);
  __int128 v7 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_1006636E4(void *a1)
{
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100663754( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100663770(uint64_t a1, std::string::size_type a2, __int128 *a3, int a4)
{
  int v41 = 4;
  sub_1006681DC((uint64_t)&v19);
  std::string::operator=(&v19, (const std::string *)a2);
  std::string::operator=(&v20, (const std::string *)(a2 + 24));
  std::string::operator=(&v21, (const std::string *)(a2 + 48));
  __int128 v26 = *(_OWORD *)(a2 + 136);
  __int128 v27 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)(a2 + 168);
  *(void *)&v28[13] = *(void *)(a2 + 181);
  __int128 v22 = *(_OWORD *)(a2 + 72);
  __int128 v23 = *(_OWORD *)(a2 + 88);
  __int128 v24 = *(_OWORD *)(a2 + 104);
  __int128 v25 = *(_OWORD *)(a2 + 120);
  std::string::operator=(&v29, (const std::string *)(a2 + 192));
  __int128 v8 = v30;
  id v30 = *(id *)(a2 + 216);

  if (&v19 != (std::string *)a2) {
    sub_10009B244( v31,  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  *(_OWORD *)((char *)v40 + 12) = *(__int128 *)((char *)a3 + 140);
  __int128 v9 = a3[7];
  __int128 v38 = a3[6];
  __int128 v39 = v9;
  v40[0] = a3[8];
  __int128 v10 = a3[3];
  __int128 v34 = a3[2];
  __int128 v35 = v10;
  __int128 v11 = a3[5];
  __int128 v36 = a3[4];
  __int128 v37 = v11;
  __int128 v12 = a3[1];
  __int128 v32 = *a3;
  __int128 v33 = v12;
  if (a4 < 0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100661014(a1, a2, &v41, Current);
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  __int128 v14 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending Fence Failure notification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    v18[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Sending Fence Failure notification",  v18,  2);
    __int128 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::notifyFenceFailure(const CLFenceManager_Type::Fence &, const CLDaemonLocation &, int)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  *(_DWORD *)__int128 buf = 4;
  (*(void (**)(uint64_t, uint8_t *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v19,  0LL,  0xFFFFFFFFLL,  0LL);
  *(_DWORD *)__int128 buf = 10;
  (*(void (**)(uint64_t, uint8_t *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v19,  0LL,  0xFFFFFFFFLL,  0LL);
  sub_100668374((uint64_t)&v19);
  return 1LL;
}

void sub_100663A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100663AA8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    __int128 v4 = (void *)(a1 + 40);
    sub_100663770(v3, a1 + 40, (__int128 *)(a1 + 288), -1);
    id v5 = objc_msgSend( objc_msgSend(*(id *)(v3 + 32), "vendor"),  "proxyForService:",  @"CLApplicationLifecycleManager");
    objc_msgSend( v5,  "launchApplication:requiringAuthForServiceMask:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4),  2);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    __int128 v6 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Not launching client", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Not launching client",  v9,  2);
      __int128 v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::notifyAndLaunchClientForAuthorizedFenceFailure(const CLFenceManager_Type::Fence &)_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

char *sub_100663CBC(uint64_t a1, uint64_t a2)
{
  return sub_1002718F0((char *)(a1 + 40), (__int128 *)(a2 + 40));
}

void sub_100663CC8(uint64_t a1)
{
  char v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(void *)(a1 + 272) = v2;
    operator delete(v2);
  }
}

char *sub_100663D48(char *result, int a2)
{
  if (a2)
  {
    char v2 = result;
    uint64_t v3 = *((void *)result + 4);
    __int128 v4 = result + 40;
    sub_100662C50(v3, (uint64_t)(result + 40), (_DWORD *)result + 72, (__int128 *)(result + 292), 0xFFFFFFFFLL);
    id v5 = objc_msgSend( objc_msgSend(*(id *)(v3 + 32), "vendor"),  "proxyForService:",  @"CLApplicationLifecycleManager");
    if (v2[63] < 0) {
      __int128 v4 = (void *)*v4;
    }
    return (char *)objc_msgSend( v5,  "launchApplication:requiringAuthForServiceMask:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4),  2);
  }

  return result;
}

uint64_t sub_100663DD4()
{
  return 1LL;
}

uint64_t sub_100663DDC()
{
  return 1LL;
}

void *sub_100663DE4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

BOOL sub_100663E5C(uint64_t a1, uint64_t a2, int *a3, std::string *a4)
{
  BOOL v8 = sub_100663EE0(a1, a2, a3, a4);
  if (v8)
  {
    std::string::size_type size = a4->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unsigned int v10 = *a3;
      if (v10 <= 1)
      {
        v11.n128_f64[0] = CFAbsoluteTimeGetCurrent();
        sub_100661668(a1, v10, a2, (unsigned __int8 *)a4, v11);
      }
    }
  }

  return v8;
}

BOOL sub_100663EE0(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v46 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        __int128 v13 = (uint64_t *)v7;
      }
      else {
        __int128 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v45 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          __int128 v23 = (uint64_t *)v17;
        }
        else {
          __int128 v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }

      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)uint64_t v47 = v25;
        uint64_t v33 = *(void *)(v25 + 56);
        *(void *)__int128 buf = &v46;
        __int128 v34 = sub_1004C2E20((uint64_t **)(v25 + 40), &v46, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        sub_100922994(buf);
        sub_100922994(v53);
        int v54 = 0xFFFF;
        __int128 v55 = 0u;
        __asm { FMOV            V1.2D, #-1.0 }

        __int128 v56 = xmmword_1012E0070;
        __int128 v57 = _Q1;
        __int128 v58 = _Q1;
        __int128 v59 = _Q1;
        int v60 = 0;
        unint64_t v61 = 0xBFF0000000000000LL;
        __int128 v62 = 0u;
        int v63 = 0;
        unint64_t v64 = 0xBFF0000000000000LL;
        int v65 = 0x7FFFFFFF;
        __int128 v67 = 0u;
        uint64_t v66 = 0LL;
        char v68 = 0;
        uint64_t v70 = 1LL;
        __int128 v69 = 0u;
        unint64_t v71 = 0xBFF0000000000000LL;
        __int128 v72 = _Q1;
        __int128 v73 = _Q1;
        __int128 v74 = _Q1;
        __int128 v75 = _Q1;
        __int128 v76 = _Q1;
        __int128 v77 = _Q1;
        __int128 v78 = xmmword_1012E0070;
        int v79 = 0xFFFF;
        uint64_t v81 = 0LL;
        uint64_t v80 = 0LL;
        __int128 v82 = xmmword_1012E0070;
        __int128 v83 = _Q1;
        __int128 v84 = _Q1;
        __int128 v85 = _Q1;
        int v86 = 0;
        unint64_t v87 = 0xBFF0000000000000LL;
        uint64_t v89 = 0LL;
        uint64_t v88 = 0LL;
        int v90 = 0;
        unint64_t v91 = 0xBFF0000000000000LL;
        int v92 = 0x7FFFFFFF;
        char v96 = 0;
        uint64_t v94 = 0LL;
        uint64_t v93 = 0LL;
        uint64_t v95 = 0LL;
        int v97 = 0xFFFF;
        uint64_t v99 = 0LL;
        uint64_t v98 = 0LL;
        __int128 v100 = xmmword_1012E0070;
        __int128 v101 = _Q1;
        __int128 v102 = _Q1;
        __int128 v103 = _Q1;
        int v104 = 0;
        unint64_t v105 = 0xBFF0000000000000LL;
        uint64_t v106 = 0LL;
        uint64_t v107 = 0LL;
        int v108 = 0;
        unint64_t v109 = 0xBFF0000000000000LL;
        int v110 = 0x7FFFFFFF;
        uint64_t v111 = 0LL;
        uint64_t v112 = 0LL;
        uint64_t v113 = 0LL;
        char v114 = 0;
        int v115 = 0xFFFF;
        uint64_t v117 = 0LL;
        uint64_t v116 = 0LL;
        __int128 v118 = xmmword_1012E0070;
        __int128 v119 = _Q1;
        __int128 v120 = _Q1;
        __int128 v121 = _Q1;
        int v122 = 0;
        unint64_t v123 = 0xBFF0000000000000LL;
        uint64_t v125 = 0LL;
        uint64_t v124 = 0LL;
        int v126 = 0;
        unint64_t v127 = 0xBFF0000000000000LL;
        int v128 = 0x7FFFFFFF;
        uint64_t v130 = 0LL;
        uint64_t v129 = 0LL;
        char v132 = 0;
        uint64_t v131 = 0LL;
        __int128 v152 = 0u;
        __int128 v153 = 0u;
        __int128 v150 = 0u;
        __int128 v151 = 0u;
        __int128 v148 = 0u;
        __int128 v149 = 0u;
        __int128 v146 = 0u;
        __int128 v147 = 0u;
        __int128 v144 = 0u;
        __int128 v145 = 0u;
        __int128 v142 = 0u;
        __int128 v143 = 0u;
        __int128 v140 = 0u;
        __int128 v141 = 0u;
        __int128 v138 = 0u;
        __int128 v139 = 0u;
        __int128 v136 = 0u;
        __int128 v137 = 0u;
        __int128 v134 = 0u;
        __int128 v135 = 0u;
        __int128 v133 = 0u;
        int v154 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int128 v40 = sub_100669BC8((__int128 *)buf);
          sub_100668BE0((_BYTE *)a1, (uint64_t)&v45, (uint64_t)v47, v40);
        }

        sub_100668374((uint64_t)buf);
        if (v33) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(void *)uint64_t v47 = a1 + 64;
        char v29 = byte_101939850;
        HIDWORD(v44) = v16;
        *(void *)__int128 buf = (char *)&v44 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v44 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v44) = *a3;
        *(void *)__int128 buf = (char *)&v44 + 4;
        id v30 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v44 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v30 + 8);
        HIDWORD(v44) = *a3;
        *(void *)__int128 buf = (char *)&v44 + 4;
        double v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v44 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)__int128 buf = &v46;
        __int128 v32 = sub_1004C2E20(v31 + 5, &v46, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)__int128 buf = *a3;
        sub_10004A8FC((uint64_t **)(v45 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }
  __int128 v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    __int128 v15 = (void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v51 = 1026;
    int v52 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    int v41 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t v47 = 136446466;
    *(void *)&v47[4] = v41;
    __int16 v48 = 1026;
    int v49 = a2;
    LODWORD(v44) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v47,
      v44);
    int v43 = (char *)v42;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::strin g>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceMana ger_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, Reg istrationInfo_T = std::string]",  "%s\n",  v42);
    if (v43 != buf) {
      free(v43);
    }
    return 0LL;
  }

  return result;
}

void sub_1006644F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_100664528(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6)
{
  BOOL result = 1LL;
  if (*a3 <= 8u && ((1 << *a3) & 0x143) != 0)
  {
    uint64_t v8 = a6[23];
    uint64_t v9 = *((void *)a6 + 1);
    if ((v8 & 0x80u) == 0LL) {
      uint64_t v10 = a6[23];
    }
    else {
      uint64_t v10 = *((void *)a6 + 1);
    }
    uint64_t v11 = a4[23];
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0LL) {
      uint64_t v11 = *((void *)a4 + 1);
    }
    if (v10 != v11) {
      return v10 == 0;
    }
    if (v12 >= 0) {
      __int128 v13 = a4;
    }
    else {
      __int128 v13 = *(unsigned __int8 **)a4;
    }
    if ((v8 & 0x80) == 0)
    {
      if (!a6[23]) {
        return result;
      }
      while (*a6 == *v13)
      {
        ++a6;
        ++v13;
        if (!--v8) {
          return 1LL;
        }
      }

      return v10 == 0;
    }

    int v14 = memcmp(*(const void **)a6, v13, *((void *)a6 + 1));
    uint64_t v10 = v9;
    if (v14) {
      return v10 == 0;
    }
    return 1LL;
  }

  return result;
}

void sub_1006645EC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  switch(*a3)
  {
    case 0:
      if (*(_DWORD *)(a4 + 408) == -1)
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        uint64_t v8 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Transtion, but prev state unknown",  (uint8_t *)&buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          LOWORD(v13[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "Transtion, but prev state unknown",  v13,  2);
          int v12 = (std::string *)v11;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceManager::onMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMoni tor_Type::NotificationData &)",  "%s\n",  v11);
          if (v12 != &buf) {
            free(v12);
          }
        }
      }

      sub_10065FDB8(a1, a3, a4, (int *)(a4 + 248), a5, (_OWORD *)(a4 + 252));
      break;
    case 1:
      sub_10065FDB8(a1, a3, a4, (int *)(a4 + 248), a5, (_OWORD *)(a4 + 252));
      break;
    case 4:
      sub_1009D8F68(a1 + 3288, a4);
      break;
    case 5:
      if (sub_1009E30CC(a1 + 112, (uint64_t *)a4))
      {
        sub_1006681DC((uint64_t)&buf);
        std::string::operator=(&buf, (const std::string *)a4);
        std::string::operator=(&v15, (const std::string *)(a4 + 24));
        std::string::operator=(&v16, (const std::string *)(a4 + 48));
        __int128 v21 = *(_OWORD *)(a4 + 136);
        __int128 v22 = *(_OWORD *)(a4 + 152);
        *(_OWORD *)__int128 v23 = *(_OWORD *)(a4 + 168);
        *(void *)&v23[13] = *(void *)(a4 + 181);
        __int128 v17 = *(_OWORD *)(a4 + 72);
        __int128 v18 = *(_OWORD *)(a4 + 88);
        __int128 v19 = *(_OWORD *)(a4 + 104);
        __int128 v20 = *(_OWORD *)(a4 + 120);
        std::string::operator=(&v24, (const std::string *)(a4 + 192));
        uint64_t v9 = v25;
        id v25 = *(id *)(a4 + 216);

        if (&buf != (std::string *)a4) {
          sub_10009B244( v26,  *(char **)(a4 + 224),  *(void *)(a4 + 232),  (uint64_t)(*(void *)(a4 + 232) - *(void *)(a4 + 224)) >> 4);
        }
        uint64_t v28 = *(void *)(a4 + 416);
        v13[0] = 9;
        (*(void (**)(uint64_t, _DWORD *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v13,  &buf,  0LL,  0xFFFFFFFFLL,  0LL);
        goto LABEL_18;
      }

      break;
    case 6:
      sub_1006681DC((uint64_t)&buf);
      memcpy(v29, (const void *)(a4 + 424), sizeof(v29));
      std::string::operator=(&buf, (const std::string *)a4);
      std::string::operator=(&v15, (const std::string *)(a4 + 24));
      std::string::operator=(&v16, (const std::string *)(a4 + 48));
      __int128 v21 = *(_OWORD *)(a4 + 136);
      __int128 v22 = *(_OWORD *)(a4 + 152);
      *(_OWORD *)__int128 v23 = *(_OWORD *)(a4 + 168);
      *(void *)&v23[13] = *(void *)(a4 + 181);
      __int128 v17 = *(_OWORD *)(a4 + 72);
      __int128 v18 = *(_OWORD *)(a4 + 88);
      __int128 v20 = *(_OWORD *)(a4 + 120);
      __int128 v19 = *(_OWORD *)(a4 + 104);
      std::string::operator=(&v24, (const std::string *)(a4 + 192));
      uint64_t v10 = v25;
      id v25 = *(id *)(a4 + 216);

      if (&buf != (std::string *)a4) {
        sub_10009B244( v26,  *(char **)(a4 + 224),  *(void *)(a4 + 232),  (uint64_t)(*(void *)(a4 + 232) - *(void *)(a4 + 224)) >> 4);
      }
      int v27 = *(_DWORD *)(a4 + 248);
      v13[0] = 11;
      (*(void (**)(uint64_t, _DWORD *, std::string *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v13,  &buf,  0LL,  0xFFFFFFFFLL,  0LL);
LABEL_18:
      sub_100668374((uint64_t)&buf);
      break;
    default:
      return;
  }

void sub_100664A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100664AA4(uint64_t *a1, uint64_t a2, int *a3, std::string::size_type a4)
{
  int v5 = *a3;
  if (*a3 == 2)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v11 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Fence: Got data download invalidated notification",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      LOWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Got data download invalidated notification",  &v28,  2);
      __int128 v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onDataDownloadNotification(int, const CLFenceDataDownloadManager_Type::Notification &, cons t CLFenceDataDownloadManager_Type::NotificationData &)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    sub_1009E80EC((uint64_t)(a1 + 14));
  }

  else if (v5 == 1)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    int v12 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      else {
        std::string::size_type v13 = *(void *)(a4 + 48);
      }
      else {
        std::string::size_type v14 = *(void *)a4;
      }
      std::string::size_type v15 = a4 + 24;
      *(_DWORD *)std::string buf = 136446723;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v35 = 2081;
      std::string::size_type v36 = v14;
      __int16 v37 = 2081;
      std::string::size_type v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Got data download failure notification for [%{public}s]/%{private}s/%{private}s",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      else {
        std::string::size_type v23 = *(void *)(a4 + 48);
      }
      else {
        std::string::size_type v24 = *(void *)a4;
      }
      std::string::size_type v25 = a4 + 24;
      int v28 = 136446723;
      std::string::size_type v29 = v23;
      __int16 v30 = 2081;
      std::string::size_type v31 = v24;
      __int16 v32 = 2081;
      std::string::size_type v33 = v25;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Got data download failure notification for [%{public}s]/%{private}s/%{private}s",  &v28,  32);
      int v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onDataDownloadNotification(int, const CLFenceDataDownloadManager_Type::Notification &, cons t CLFenceDataDownloadManager_Type::NotificationData &)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    *(void *)std::string buf = 0LL;
    sub_1009E7F30((uint64_t)(a1 + 14), a4, a4 + 48, a4 + 24, (double *)buf);
  }

  else if (!v5)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    uint64_t v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      else {
        std::string::size_type v8 = *(void *)(a4 + 48);
      }
      else {
        std::string::size_type v9 = *(void *)a4;
      }
      else {
        std::string::size_type v10 = *(void *)(a4 + 24);
      }
      *(_DWORD *)std::string buf = 136446723;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v35 = 2082;
      std::string::size_type v36 = v9;
      __int16 v37 = 2081;
      std::string::size_type v38 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Fence: Got data downloaded notification for [%{public}s]/%{public}s/%{private}s",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      else {
        std::string::size_type v16 = *(void *)(a4 + 48);
      }
      else {
        std::string::size_type v17 = *(void *)a4;
      }
      else {
        std::string::size_type v18 = *(void *)(a4 + 24);
      }
      int v28 = 136446723;
      std::string::size_type v29 = v16;
      __int16 v30 = 2082;
      std::string::size_type v31 = v17;
      __int16 v32 = 2081;
      std::string::size_type v33 = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Got data downloaded notification for [%{public}s]/%{public}s/%{private}s",  &v28,  32);
      __int128 v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onDataDownloadNotification(int, const CLFenceDataDownloadManager_Type::Notification &, cons t CLFenceDataDownloadManager_Type::NotificationData &)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
    sub_1009E7F30((uint64_t)(a1 + 14), a4, a4 + 48, a4 + 24, (double *)buf);
    if (!*(_BYTE *)(a4 + 248)) {
      sub_10065E468(a1);
    }
    sub_1009C3FF0((uint64_t)(a1 + 37), a4);
  }

void sub_10066508C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(_DWORD *)(a4 + 188);
    uint64_t v8 = 3808LL;
    if (v7) {
      uint64_t v8 = 3800LL;
    }
    *(double *)(a1 + v_Block_object_dispose(&STACK[0x7E0], 8) = Current;
    sub_10065E3DC(a1, v7 != 0);
    sub_1009D7068(a1 + 3288);
    sub_1009DA304(a1 + 3288);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    std::string::size_type v9 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 3808);
      uint64_t v11 = *(void *)(a1 + 3800);
      *(_DWORD *)std::string buf = 67240704;
      BOOL v23 = v7 != 0;
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 2050;
      uint64_t v27 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Fence: Got kNotificationLocationServicesStatus, enabled, %{public}d, StopTime, %{public}.1lf, StartTime, %{public}.1lf",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      uint64_t v12 = *(void *)(a1 + 3808);
      uint64_t v13 = *(void *)(a1 + 3800);
      LODWORD(v20) = 67240704;
      HIDWORD(v20) = v7 != 0;
      *(_WORD *)__int128 v21 = 2050;
      *(void *)&v21[2] = v12;
      *(_WORD *)&v21[10] = 2050;
      *(void *)&v21[12] = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Got kNotificationLocationServicesStatus, enabled, %{public}d, StopTime, %{public}.1lf, StartTime, %{public}.1lf",  &v20,  28,  v20,  *(_OWORD *)v21,  *(void *)&v21[16]);
LABEL_21:
      __int128 v19 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager _Type::NotificationData &)",  "%s\n",  v14);
      if (v19 != buf) {
        free(v19);
      }
    }
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    std::string::size_type v16 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      BOOL v23 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Got unknown client notification %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v18 = *a3;
      LODWORD(v20) = 67240192;
      HIDWORD(v20) = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Got unknown client notification %{public}d",  &v20,  8,  v20,  *(void *)v21,  *(_OWORD *)&v21[8]);
      goto LABEL_21;
    }
  }

void sub_1006653D8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  switch(*a3)
  {
    case 0:
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      __int128 v6 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v7 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
        __int16 v103 = 2050;
        int v104 = (_BYTE *)v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence addition notification for %{public}ld fences",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        unint64_t v62 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
        *(_DWORD *)__dst = 136315394;
        *(void *)&__dst[4] = "onAuthorizationNotification";
        __int16 v89 = 2050;
        unint64_t v90 = v62;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence addition notification for %{public}ld fences",  __dst,  22);
        unint64_t v64 = (char *)v63;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v63);
        if (v64 != buf) {
          free(v64);
        }
      }

      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v83 = 0LL;
      __int128 v84 = 0LL;
      unint64_t v85 = 0LL;
      unint64_t v9 = *(void *)v4;
      uint64_t v10 = *(void *)(v4 + 8);
      if (*(void *)v4 != v10)
      {
        double v11 = Current;
        uint64_t v4 = a1 + 112;
        do
        {
          if (sub_1009E30CC(a1 + 112, (uint64_t *)v9))
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101847D40);
            }
            uint64_t v12 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v13 = (void *)(v9 + 48);
              std::string::size_type v14 = (_BYTE *)v9;
              std::string::size_type v15 = (std::stringbuf::string_type *)(v9 + 24);
              *(_DWORD *)std::string buf = 136446723;
              *(void *)&uint8_t buf[4] = v13;
              __int16 v103 = 2082;
              int v104 = v14;
              __int16 v105 = 2081;
              uint64_t v106 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Fence [%{public}s]/%{public}s/%{private}s is authorized",  buf,  0x20u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              __int128 v39 = (void *)(v9 + 48);
              unint64_t v40 = v9;
              int v41 = (void *)(v9 + 24);
              *(_DWORD *)__dst = 136446723;
              *(void *)&__dst[4] = v39;
              __int16 v89 = 2082;
              unint64_t v90 = v40;
              __int16 v91 = 2081;
              int v92 = v41;
              LODWORD(v72) = 32;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence [%{public}s]/%{public}s/%{private}s is authorized",  __dst,  v72);
              int v43 = (char *)v42;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notificati on &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v42);
              if (v43 != buf) {
                free(v43);
              }
            }

            if (*(_DWORD *)(v9 + 184) == -1)
            {
              sub_101241F04();
              abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceManager.mm",  1313,  "onAuthorizationNotification");
              __break(1u);
              goto LABEL_146;
            }

            if (*(double *)(v9 + 96) > 400.0
              || *(_BYTE *)(v9 + 188)
              || *(_DWORD *)(v9 + 180) == 2
              || *(void *)(v9 + 232) != *(void *)(v9 + 224)
              || (*(_BYTE *)(v9 + 160) & 0x20) != 0)
            {
              __int16 v26 = v84;
              if ((unint64_t)v84 >= v85)
              {
                uint64_t v27 = (char *)sub_100669E18(&v83, (__int128 *)v9);
              }

              else
              {
                sub_1002718F0(v84, (__int128 *)v9);
                uint64_t v27 = v26 + 248;
              }

              __int128 v84 = v27;
            }

            else
            {
              memset(&v82, 0, sizeof(v82));
              else {
                uint64_t v16 = *(unsigned __int8 *)(v9 + 71);
              }
              if (v16) {
                int v28 = (const std::string *)(v9 + 48);
              }
              else {
                int v28 = (const std::string *)v9;
              }
              std::string::operator=(&v82, v28);
              *(void *)__dst = &v82;
              std::string::size_type v29 = sub_100669C84( (uint64_t **)(a1 + 3888),  (const void **)&v82.__r_.__value_.__l.__data_,  (uint64_t)&unk_1012CF090,  (__int128 **)__dst);
              if (sub_10025D100((uint64_t)(v29 + 7), v11))
              {
                __int16 v30 = v84;
                if ((unint64_t)v84 >= v85)
                {
                  std::string::size_type v31 = (char *)sub_100669E18(&v83, (__int128 *)v9);
                }

                else
                {
                  sub_1002718F0(v84, (__int128 *)v9);
                  std::string::size_type v31 = v30 + 248;
                }

                __int128 v84 = v31;
              }

              else
              {
                sub_1002718F0(__dst, (__int128 *)v9);
                char v96 = 1;
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
                uint64_t v32 = qword_101934878;
                if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
                {
                  int v75 = v95;
                  __int128 v77 = (void **)v94[0];
                  int v79 = (os_log_s *)v32;
                  int v33 = SHIBYTE(v91);
                  __int128 v73 = *(_BYTE **)__dst;
                  sub_100923668((uint64_t)__dst, &__p);
                  __int128 v34 = __dst;
                  if (v33 < 0) {
                    __int128 v34 = v73;
                  }
                  __int16 v35 = v94;
                  if (v75 < 0) {
                    __int16 v35 = v77;
                  }
                  *(_DWORD *)std::string buf = 136446723;
                  p_p = &__p;
                  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                  }
                  *(void *)&uint8_t buf[4] = v35;
                  __int16 v103 = 2082;
                  int v104 = v34;
                  __int16 v105 = 2081;
                  uint64_t v106 = p_p;
                  _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "#Warning throttle fine fence usage by client [%{public}s]/%{public}s, %{private}s",  buf,  0x20u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934870 != -1) {
                    dispatch_once(&qword_101934870, &stru_101847D40);
                  }
                  int v76 = v95;
                  __int128 v78 = (void **)v94[0];
                  uint64_t v80 = qword_101934878;
                  int v44 = SHIBYTE(v91);
                  __int128 v74 = *(_BYTE **)__dst;
                  sub_100923668((uint64_t)__dst, &v81);
                  uint64_t v45 = __dst;
                  if (v44 < 0) {
                    uint64_t v45 = v74;
                  }
                  int v46 = v94;
                  if (v76 < 0) {
                    int v46 = v78;
                  }
                  LODWORD(__p.__r_.__value_.__l.__data_) = 136446723;
                  uint64_t v47 = &v81;
                  if ((v81.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    uint64_t v47 = (std::stringbuf::string_type *)v81.__r_.__value_.__r.__words[0];
                  }
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
                  WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
                  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v45;
                  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2081;
                  unint64_t v87 = v47;
                  LODWORD(v72) = 32;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  2LL,  "#Warning throttle fine fence usage by client [%{public}s]/%{public}s, %{private}s",  &__p,  v72);
                  int v49 = v48;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notifi cation &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v49);
                  if (v49 != buf) {
                    free(v49);
                  }
                }

                __int16 v37 = v84;
                if ((unint64_t)v84 >= v85)
                {
                  std::string::size_type v38 = (char *)sub_100669E18(&v83, (__int128 *)__dst);
                }

                else
                {
                  sub_1002718F0(v84, (__int128 *)__dst);
                  std::string::size_type v38 = v37 + 248;
                }

                __int128 v84 = v38;
                if (v100)
                {
                  __int128 v101 = v100;
                  operator delete(v100);
                }

                if (v98 < 0) {
                  operator delete(v97);
                }
                if (v95 < 0) {
                  operator delete(v94[0]);
                }
                if (v93 < 0) {
                  operator delete(v92);
                }
                if (SHIBYTE(v91) < 0) {
                  operator delete(*(void **)__dst);
                }
              }
            }
          }

          else
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101847D40);
            }
            int v17 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              int v18 = (void *)(v9 + 48);
              __int128 v19 = (_BYTE *)v9;
              uint64_t v20 = (std::stringbuf::string_type *)(v9 + 24);
              *(_DWORD *)std::string buf = 136446723;
              *(void *)&uint8_t buf[4] = v18;
              __int16 v103 = 2082;
              int v104 = v19;
              __int16 v105 = 2081;
              uint64_t v106 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Fence [%{public}s]/%{public}s/%{private}s is not authorized",  buf,  0x20u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              __int128 v21 = (void *)(v9 + 48);
              unint64_t v22 = v9;
              BOOL v23 = (void *)(v9 + 24);
              *(_DWORD *)__dst = 136446723;
              *(void *)&__dst[4] = v21;
              __int16 v89 = 2082;
              unint64_t v90 = v22;
              __int16 v91 = 2081;
              int v92 = v23;
              LODWORD(v72) = 32;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence [%{public}s]/%{public}s/%{private}s is not authorized",  __dst,  v72);
              uint64_t v25 = (char *)v24;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notificati on &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v24);
              if (v25 != buf) {
                free(v25);
              }
            }
          }

          v9 += 248LL;
        }

        while (v9 != v10);
      }

      sub_10065E074(a1, &v83);
      *(void *)std::string buf = &v83;
      sub_1006684D8((void ***)buf);
      break;
    case 1:
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      int v54 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v55 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
        __int16 v103 = 2050;
        int v104 = (_BYTE *)v55;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence removal notification for %{public}ld fences",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        unint64_t v65 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
        *(_DWORD *)__dst = 136315394;
        *(void *)&__dst[4] = "onAuthorizationNotification";
        __int16 v89 = 2050;
        unint64_t v90 = v65;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence removal notification for %{public}ld fences",  __dst,  22);
        __int128 v67 = (char *)v66;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v66);
        if (v67 != buf) {
          free(v67);
        }
      }

      sub_10065E220(a1, (unsigned __int8 **)v4, *(unsigned __int8 *)(v4 + 24));
      break;
    case 2:
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
      __int16 v51 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence reset notification",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        *(_DWORD *)__dst = 136315138;
        *(void *)&__dst[4] = "onAuthorizationNotification";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence reset notification",  __dst);
        unint64_t v61 = (char *)v60;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v60);
        if (v61 != buf) {
          free(v61);
        }
      }

      BOOL v52 = sub_1002958AC() == 1;
      sub_1009C1934(a1 + 296, v52);
      sub_10065DEC0(a1);
      break;
    case 3:
      if (*(_BYTE *)(a4 + 25))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        unsigned int v53 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence enable notification",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          *(_DWORD *)__dst = 136315138;
          *(void *)&__dst[4] = "onAuthorizationNotification";
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence enable notification",  __dst);
          __int128 v69 = (char *)v68;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification & , const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v68);
          if (v69 != buf) {
            free(v69);
          }
        }

        sub_1009C1934(a1 + 296, 1);
        sub_10065D8AC(a1, 0LL, 1, 0);
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        __int128 v56 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence disable notification",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          *(_DWORD *)__dst = 136315138;
          *(void *)&__dst[4] = "onAuthorizationNotification";
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence disable notification",  __dst);
          unint64_t v71 = (char *)v70;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification & , const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v70);
          if (v71 != buf) {
            free(v71);
          }
        }

        uint64_t v57 = a1 + 296;
        sub_1009C1934(v57, 0);
        sub_1009C1FE8(v57);
      }

      break;
    case 4:
      if (qword_101934870 != -1) {
LABEL_146:
      }
        dispatch_once(&qword_101934870, &stru_101847D40);
      __int128 v50 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = "onAuthorizationNotification";
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%s, Got fence failure notification",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        *(_DWORD *)__dst = 136315138;
        *(void *)&__dst[4] = "onAuthorizationNotification";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, Got fence failure notification",  __dst);
        __int128 v59 = (char *)v58;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v58);
        if (v59 != buf) {
          free(v59);
        }
      }

      sub_10065F7E0(a1, (void *)v4);
      break;
    default:
      return;
  }

void sub_1006665F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  a70 = (uint64_t)&a31;
  sub_1006684D8((void ***)&a70);
  _Unwind_Resume(a1);
}

void sub_1006666AC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLFenceManager");
  sub_100666774((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *uint64_t v8 = off_101847CA8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100666748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100666774(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101847F10;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100666848(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        unint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int128 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101847D20);
        }
        uint64_t v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        int v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::s tring>::removeClient(int) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceMan ager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100666ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_101939870);
  if ((v3 & 1) == 0)
  {
    uint64_t v9 = a1;
    uint64_t v8 = a3;
    unsigned int v7 = a2;
    int v5 = __cxa_guard_acquire(&qword_101939870);
    a2 = v7;
    a3 = v8;
    int v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_101939858 = 0LL;
      unk_101939860 = 0LL;
      qword_101939868 = 0LL;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101939858, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101939870);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &qword_101939858);
}

BOOL sub_100666B64(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        __int128 v21 = (uint64_t *)v15;
      }
      else {
        __int128 v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    char v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      double v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      __int16 v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
      __int16 v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      __int16 v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      __int16 v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::str ing>::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, Notific ationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100666DE4(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          double v11 = (uint64_t *)v6;
        }
        else {
          double v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            __int16 v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                __int16 v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10052A02C((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101847D20);
              }
              __int16 v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101847D20);
                }
                std::string::size_type v29 = a1 + 8;
                if (a1[31] < 0) {
                  std::string::size_type v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                unint64_t v40 = v29;
                __int16 v41 = 2082;
                unsigned int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                int v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char , std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceManage r_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_10066716C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  sub_10066A1B8(a3, v11);
  return 1LL;
}

uint64_t sub_1006671D8(uint64_t a1, int *a2, __int128 *a3)
{
  int v10 = *a2;
  BOOL v12 = &v10;
  uint64_t v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  int v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_100667284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100667298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v16 = 0xFFFF;
  __int128 v17 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }

  __int128 v18 = xmmword_1012E0070;
  __int128 v19 = _Q1;
  __int128 v20 = _Q1;
  __int128 v21 = _Q1;
  int v22 = 0;
  unint64_t v23 = 0xBFF0000000000000LL;
  __int128 v24 = 0u;
  int v25 = 0;
  unint64_t v26 = 0xBFF0000000000000LL;
  int v27 = 0x7FFFFFFF;
  __int128 v29 = 0u;
  uint64_t v28 = 0LL;
  char v30 = 0;
  uint64_t v32 = 1LL;
  __int128 v31 = 0u;
  unint64_t v33 = 0xBFF0000000000000LL;
  __int128 v34 = _Q1;
  __int128 v35 = _Q1;
  __int128 v36 = _Q1;
  __int128 v37 = _Q1;
  __int128 v38 = _Q1;
  __int128 v39 = _Q1;
  __int128 v40 = xmmword_1012E0070;
  int v41 = 0xFFFF;
  uint64_t v43 = 0LL;
  uint64_t v42 = 0LL;
  __int128 v44 = xmmword_1012E0070;
  __int128 v45 = _Q1;
  __int128 v46 = _Q1;
  __int128 v47 = _Q1;
  int v48 = 0;
  unint64_t v49 = 0xBFF0000000000000LL;
  uint64_t v51 = 0LL;
  uint64_t v50 = 0LL;
  int v52 = 0;
  unint64_t v53 = 0xBFF0000000000000LL;
  int v54 = 0x7FFFFFFF;
  char v58 = 0;
  uint64_t v56 = 0LL;
  uint64_t v55 = 0LL;
  uint64_t v57 = 0LL;
  int v59 = 0xFFFF;
  uint64_t v61 = 0LL;
  uint64_t v60 = 0LL;
  __int128 v62 = xmmword_1012E0070;
  __int128 v63 = _Q1;
  __int128 v64 = _Q1;
  __int128 v65 = _Q1;
  int v66 = 0;
  unint64_t v67 = 0xBFF0000000000000LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  int v70 = 0;
  unint64_t v71 = 0xBFF0000000000000LL;
  int v72 = 0x7FFFFFFF;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  char v76 = 0;
  int v77 = 0xFFFF;
  uint64_t v79 = 0LL;
  uint64_t v78 = 0LL;
  __int128 v80 = xmmword_1012E0070;
  __int128 v81 = _Q1;
  __int128 v82 = _Q1;
  __int128 v83 = _Q1;
  int v84 = 0;
  unint64_t v85 = 0xBFF0000000000000LL;
  uint64_t v87 = 0LL;
  uint64_t v86 = 0LL;
  int v88 = 0;
  unint64_t v89 = 0xBFF0000000000000LL;
  int v90 = 0x7FFFFFFF;
  uint64_t v92 = 0LL;
  uint64_t v91 = 0LL;
  char v94 = 0;
  uint64_t v93 = 0LL;
  __int128 v114 = 0u;
  __int128 v115 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  __int128 v108 = 0u;
  __int128 v109 = 0u;
  __int128 v106 = 0u;
  __int128 v107 = 0u;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v96 = 0u;
  __int128 v97 = 0u;
  __int128 v95 = 0u;
  int v116 = 0;
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v14,  a3,  a4,  0LL);
  return sub_100668374((uint64_t)v14);
}

void sub_1006674EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100667510(uint64_t a1, unsigned int *a2, __int128 *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    __int128 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      id v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)int v66 = 0;
      *(_WORD *)&v66[4] = 2082;
      *(void *)&v66[6] = "";
      *(_WORD *)&v66[14] = 2082;
      *(void *)&v66[16] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      int v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    __int128 v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        __int128 v20 = (__n128 **)v14;
      }
      else {
        __int128 v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        __int128 v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)unint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      int v72 = 0LL;
      sub_1005285AC((uint64_t)buf, a2, (uint64_t)v71);
      __int128 v17 = sub_100528470((uint64_t **)(a1 + 56), (__n128 *)buf);
      __int128 v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100528854((uint64_t)&v66[4], *(char **)&v66[12]);
      __int128 v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100528854((uint64_t)v71, *(char **)&v71[8]);
    }

    if (a4)
    {
      sub_100668CBC(a3, buf);
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v27 = *(std::__shared_weak_count **)&v66[4];
      if (*(void *)&v66[4])
      {
        uint64_t v28 = (unint64_t *)(*(void *)&v66[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    char v30 = sub_100668774(a3);
    if (a5 == -1)
    {
      sub_10066880C((void *)a1, (int *)a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          __int128 v36 = (uint64_t *)v32;
        }
        else {
          __int128 v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v63 = v33;
      unint64_t v37 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      __int128 v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          uint64_t v42 = (unint64_t *)v37;
        }
        else {
          uint64_t v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          __int128 v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v15 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        __int128 v62 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101847D20);
        }
        uint64_t v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          __int128 v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            __int128 v45 = v71;
          }
          else {
            __int128 v45 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)int v66 = v44;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a5;
          *(_WORD *)&v66[14] = 2080;
          *(void *)&v66[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101847D20);
          }
          __int128 v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v61 >= 0) {
            int v48 = __p;
          }
          else {
            int v48 = (void **)__p[0];
          }
          *(_DWORD *)unint64_t v71 = 136315650;
          *(void *)&v71[4] = v46;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v59);
          uint64_t v50 = v49;
          if (v61 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std: :string>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notifi cation_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, No tificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v50);
        }

        goto LABEL_83;
      }

      __int128 v62 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v53 = v39[3].n128_i64[0];
      uint64_t v51 = v39 + 3;
      int v52 = (__n128 *)v53;
      if (!v53) {
        goto LABEL_60;
      }
      int v54 = *(_DWORD *)(v33 + 32);
      uint64_t v55 = v51;
      do
      {
        int v56 = v52[2].n128_i32[0];
        BOOL v57 = v56 < v54;
        if (v56 >= v54) {
          char v58 = v52;
        }
        else {
          char v58 = (__n128 *)&v52->n128_i8[8];
        }
        if (!v57) {
          uint64_t v55 = v52;
        }
        int v52 = (__n128 *)v58->n128_u64[0];
      }

      while (v58->n128_u64[0]);
      sub_100668BE0((_BYTE *)a1, (uint64_t)&v63, (uint64_t)&v62, v30);
    }

void sub_100667B2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100667B78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    char v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::str ing>::listClients() [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Typ e::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101847D20);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
      int v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      char v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::str ing>::listClients() [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Typ e::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    int v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      __int128 v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101847D20);
            }
            id v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              unint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101847D20);
              }
              __int128 v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              __int128 v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CL FenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            __int128 v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                __int128 v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            int v10 = v26;
          }

          while (!v19);
        }

        int v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100668124(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10066A158(a1);
  operator delete(v1);
}

id sub_100668138(uint64_t a1, int a2, void *a3)
{
  id result = sub_100668E3C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100668184(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006681B0(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_1006681DC(uint64_t a1)
{
  char v2 = sub_100922994((char *)a1);
  sub_100922994(v2 + 248);
  *(_DWORD *)(a1 + 496) = 0xFFFF;
  *(void *)(a1 + 50_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 500) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 516) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 532) = _Q0;
  *(_OWORD *)(a1 + 54_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_OWORD *)(a1 + 564) = _Q0;
  *(_DWORD *)(a1 + 580) = 0;
  *(void *)(a1 + 584) = 0xBFF0000000000000LL;
  *(void *)(a1 + 600) = 0LL;
  *(void *)(a1 + 592) = 0LL;
  *(_DWORD *)(a1 + 60_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(void *)(a1 + 612) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 620) = 0x7FFFFFFF;
  *(void *)(a1 + 624) = 0LL;
  *(void *)(a1 + 640) = 0LL;
  *(void *)(a1 + 632) = 0LL;
  *(_BYTE *)(a1 + 64_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(_BYTE *)(a1 + 672) = 1;
  *(void *)(a1 + 680) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 68_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_OWORD *)(a1 + 704) = _Q0;
  *(_OWORD *)(a1 + 720) = _Q0;
  *(_OWORD *)(a1 + 736) = _Q0;
  *(_OWORD *)(a1 + 752) = _Q0;
  *(_OWORD *)(a1 + 76_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(void *)(a1 + 784) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 800) = 0xFFFF;
  *(void *)(a1 + 812) = 0LL;
  *(void *)(a1 + 804) = 0LL;
  *(_OWORD *)(a1 + 820) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 836) = _Q0;
  *(_OWORD *)(a1 + 852) = _Q0;
  *(_OWORD *)(a1 + 86_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_DWORD *)(a1 + 884) = 0;
  *(void *)(a1 + 88_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 904) = 0LL;
  *(void *)(a1 + 896) = 0LL;
  *(_DWORD *)(a1 + 912) = 0;
  *(void *)(a1 + 916) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 924) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 952) = 0;
  *(void *)(a1 + 936) = 0LL;
  *(void *)(a1 + 92_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 944) = 0LL;
  *(_DWORD *)(a1 + 956) = 0xFFFF;
  *(void *)(a1 + 96_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 960) = 0LL;
  *(_OWORD *)(a1 + 976) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 992) = _Q0;
  *(_OWORD *)(a1 + 100_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_OWORD *)(a1 + 1024) = _Q0;
  *(_DWORD *)(a1 + 1040) = 0;
  *(void *)(a1 + 1044) = 0xBFF0000000000000LL;
  *(void *)(a1 + 1052) = 0LL;
  *(void *)(a1 + 1060) = 0LL;
  *(_DWORD *)(a1 + 106_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(void *)(a1 + 1072) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 1080) = 0x7FFFFFFF;
  *(void *)(a1 + 1084) = 0LL;
  *(void *)(a1 + 1092) = 0LL;
  *(_BYTE *)(a1 + 110_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(void *)(a1 + 1100) = 0LL;
  *(_DWORD *)(a1 + 1112) = 0xFFFF;
  *(void *)(a1 + 1124) = 0LL;
  *(void *)(a1 + 1116) = 0LL;
  *(_OWORD *)(a1 + 1132) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 114_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_OWORD *)(a1 + 1164) = _Q0;
  *(_OWORD *)(a1 + 1180) = _Q0;
  *(_DWORD *)(a1 + 1196) = 0;
  *(void *)(a1 + 1200) = 0xBFF0000000000000LL;
  *(void *)(a1 + 1216) = 0LL;
  *(void *)(a1 + 120_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_DWORD *)(a1 + 1224) = 0;
  *(void *)(a1 + 122_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 1236) = 0x7FFFFFFF;
  *(void *)(a1 + 124_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 1240) = 0LL;
  *(_BYTE *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0LL;
  return a1;
}

void sub_100668360(_Unwind_Exception *a1)
{
}

uint64_t sub_100668374(uint64_t a1)
{
  char v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(void *)(a1 + 232) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_10066844C(id a1)
{
  qword_1019349F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

uint64_t sub_100668478(uint64_t a1)
{
  *(void *)(a1 + 24) = 0LL;
  return a1;
}

uint64_t sub_1006684A8(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

void sub_1006684D8(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 248LL;
        sub_10066855C((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10066855C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 224);
  if (v3)
  {
    *(void *)(a2 + 232) = v3;
    operator delete(v3);
  }
}

void sub_1006685DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006685DC(a1, *a2);
    sub_1006685DC(a1, a2[1]);
    sub_100668624((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_100668624(uint64_t a1)
{
  char v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1006686A8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006686A8(a1, *a2);
    sub_1006686A8(a1, a2[1]);
    sub_1006686F0((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_1006686F0(uint64_t a1)
{
  char v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  return a1;
}

CLCppContainer *sub_100668774(__int128 *a1)
{
  char v2 = (char *)operator new(0x648uLL);
  sub_100668DA4(v2, a1);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100668E18;
  void v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  1608LL);
}

void sub_1006687F8(_Unwind_Exception *a1)
{
}

void sub_10066880C(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          BOOL v12 = (uint64_t *)v4;
        }
        else {
          BOOL v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v51 = v9;
        id v13 = sub_100668E3C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100668BE0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                BOOL v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int128 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int128 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    BOOL v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      BOOL v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101847D20);
              }
              __int128 v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101847D20);
                }
                __int128 v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 8);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                int v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::s tring>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFenceManag er_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100668BE0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100668E3C(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    BOOL v12 = sub_1004C2E20(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 5);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t sub_100668CBC@<X0>(__int128 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x660uLL);
  uint64_t result = sub_100668D14((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100668D00(_Unwind_Exception *a1)
{
}

uint64_t sub_100668D14(uint64_t a1, __int128 *a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_101847E70;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  sub_100668DA4((char *)(a1 + 24), a2);
  return a1;
}

void sub_100668D4C(_Unwind_Exception *a1)
{
}

void sub_100668D60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101847E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100668D74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101847E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100668D98(uint64_t a1)
{
  return sub_100668374(a1 + 24);
}

char *sub_100668DA4(char *a1, __int128 *a2)
{
  uint64_t v4 = sub_1002718F0(a1, a2);
  sub_1002718F0(v4 + 248, (__int128 *)((char *)a2 + 248));
  memcpy(a1 + 496, a2 + 31, 0x458uLL);
  return a1;
}

void sub_100668DE8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101242078();
  _Unwind_Resume(a1);
}

void sub_100668E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    char v2 = (void *)sub_100668374(v1);
    operator delete(v2);
  }

id sub_100668E3C(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100668E88(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100668E88(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101847EB0);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D140LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101847EB0);
    }
    LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
    HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101847EB0);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D140LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101847EB0);
    }
    LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
    HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFenceManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100669234(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

char *sub_100669260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  return sub_1006692E8( (char *)a2,  *(__int128 **)(a1 + 32),  *(__int128 **)(a1 + 40),  0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3));
}

char *sub_100669290(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v2 = a1 + 32;
  *(void *)(v2 + 16) = 0LL;
  return sub_1006692E8( (char *)v2,  *(__int128 **)(a2 + 32),  *(__int128 **)(a2 + 40),  0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
}

void sub_1006692C0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  sub_1006684D8(&v1);
}

char *sub_1006692E8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_10066936C(result, a4);
    uint64_t result = sub_100669408((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_10066934C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x7E0], 8) = v10;
  sub_1006684D8(&a9);
  _Unwind_Resume(a1);
}

char *sub_10066936C(void *a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843LL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_1006693C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void *sub_1006693C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843LL) {
    sub_1000070D4();
  }
  return operator new(248 * a2);
}

char *sub_100669408(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  __int16 v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_1002718F0(v4, v6);
      int v6 = (__int128 *)((char *)v6 + 248);
      uint64_t v4 = v11 + 248;
      v11 += 248;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_1006694A8((uint64_t)v8);
  return v4;
}

void sub_100669494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006694A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1006694DC((uint64_t *)a1);
  }
  return a1;
}

void sub_1006694DC(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 248LL;
      sub_10066855C(v5, v3);
    }

    while (v3 != v4);
  }

uint64_t *sub_10066952C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  int v6 = (uint64_t **)sub_1006695D4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100669664((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1006697E8((uint64_t)v10, 0LL);
  }

  return v7;
}

void *sub_1006695D4(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (unsigned __int8 *)(v4 + 32);
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

char *sub_100669664@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x1D8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_1006696E0(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1006696C8(_Unwind_Exception *a1)
{
}

char *sub_1006696E0(char *a1, __int128 **a2)
{
  uint64_t v3 = sub_1002718F0(a1, *a2);
  sub_100669740((uint64_t)(v3 + 248));
  return a1;
}

void sub_100669710(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101242078();
  _Unwind_Resume(a1);
}

uint64_t sub_100669740(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 16) = 8;
  *(void *)(a1 + 24) = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence notification");
  *(_DWORD *)(a1 + 32) = 0xFFFF;
  *(void *)(a1 + 44) = 0LL;
  *(void *)(a1 + 36) = 0LL;
  *(_OWORD *)(a1 + 52) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_OWORD *)(a1 + 100) = _Q0;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 120) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 14_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 156) = 0x7FFFFFFF;
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(_BYTE *)(a1 + 184) = 0;
  return a1;
}

void sub_1006697E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100668624((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t *sub_10066982C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  int v6 = (uint64_t **)sub_1006695D4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1006698D4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1006697E8((uint64_t)v10, 0LL);
  }

  return v7;
}

uint64_t sub_1006698D4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x138uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_100669950((uint64_t)v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100669938(_Unwind_Exception *a1)
{
}

uint64_t sub_100669950(uint64_t a1, __int128 **a2)
{
  uint64_t v3 = sub_1002718F0((char *)a1, *a2);
  *((_DWORD *)v3 + 62) = -1;
  *((void *)v3 + 32) = 0xBFF0000000000000LL;
  *((_DWORD *)v3 + 66) = 8;
  *(void *)(a1 + 272) = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence notification");
  return a1;
}

void sub_1006699AC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101242078();
  _Unwind_Resume(a1);
}

uint64_t *sub_1006699DC(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  int v6 = (uint64_t **)sub_1006695D4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100669A84((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100669B84((uint64_t)v10, 0LL);
  }

  return v7;
}

uint64_t sub_100669A84@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x130uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_100669B00((uint64_t)v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100669AE8(_Unwind_Exception *a1)
{
}

uint64_t sub_100669B00(uint64_t a1, __int128 **a2)
{
  uint64_t v3 = sub_1002718F0((char *)a1, *a2);
  *((void *)v3 + 31) = 0xBFF0000000000000LL;
  *((_DWORD *)v3 + 64) = 4;
  *(void *)(a1 + 264) = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "Pending geofence failure notification");
  return a1;
}

void sub_100669B54(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101242078();
  _Unwind_Resume(a1);
}

void sub_100669B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1006686F0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

CLCppContainer *sub_100669BC8(__int128 *a1)
{
  uint64_t v2 = (char *)operator new(0x648uLL);
  sub_100668DA4(v2, a1);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100669C60;
  void v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  1608LL);
}

void sub_100669C4C(_Unwind_Exception *a1)
{
}

void sub_100669C60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (void *)sub_100668374(v1);
    operator delete(v2);
  }

uint64_t *sub_100669C84(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  int v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100669D18((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

void *sub_100669D18@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_100669D98(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100669D7C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_100669D98(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }

  sub_10025D0EC((uint64_t)(__dst + 3), 40, 1, 360.0);
  return __dst;
}

void sub_100669DFC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100669E18(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x84210842108421LL) {
    unint64_t v9 = 0x108421084210842LL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1006693C0(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int16 v13 = v10;
  unint64_t v14 = &v10[248 * v4];
  int v16 = &v10[248 * v9];
  sub_1002718F0(v14, a2);
  int v15 = v14 + 248;
  sub_100669F34(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10066A0E4(&v13);
  return v11;
}

void sub_100669F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100669F34(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100669FA8((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100669FA8( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (__int128 *)((char *)v9 - 248);
      sub_1002718F0((char *)(v7 - 248), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 248LL;
      *((void *)&v15 + 1) -= 248LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10066A060((uint64_t)v12);
  return v10;
}

void sub_10066A04C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10066A060(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10066A094((uint64_t *)a1);
  }
  return a1;
}

void sub_10066A094(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10066855C(v3, v1);
      v1 += 248LL;
    }

    while (v1 != v2);
  }

void **sub_10066A0E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10066A114(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 248;
    sub_10066855C(v4, i - 248);
  }

uint64_t sub_10066A158(uint64_t a1)
{
  *(void *)a1 = off_101847F10;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

uint64_t sub_10066A1B8(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v5 = *(_OWORD *)(a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 152);
  __int128 v8 = *(_OWORD *)(a2 + 168);
  uint64_t v9 = *(void *)(a2 + 181);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 181) = v9;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  uint64_t v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = *(id *)(a2 + 216);

  if (a1 != a2) {
    sub_10009B244( (char *)(a1 + 224),  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
  }
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  __int128 v11 = *(_OWORD *)(a2 + 368);
  __int128 v13 = *(_OWORD *)(a2 + 320);
  __int128 v12 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x7E0], 8) = v11;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v12;
  __int128 v15 = *(_OWORD *)(a2 + 400);
  __int128 v14 = *(_OWORD *)(a2 + 416);
  __int128 v16 = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 429) = *(void *)(a2 + 429);
  *(_OWORD *)(a1 + 400) = v15;
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 384) = v16;
  std::string::operator=((std::string *)(a1 + 440), (const std::string *)(a2 + 440));
  uint64_t v17 = *(void **)(a1 + 464);
  *(void *)(a1 + 464) = *(id *)(a2 + 464);

  if (a1 != a2) {
    sub_10009B244( (char *)(a1 + 472),  *(char **)(a2 + 472),  *(void *)(a2 + 480),  (uint64_t)(*(void *)(a2 + 480) - *(void *)(a2 + 472)) >> 4);
  }
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x458uLL);
  return a1;
}

void sub_10066A31C(void *__p)
{
}

BOOL sub_10066A324()
{
  return os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT);
}

void sub_10066A338()
{
}

  ;
}

void sub_10066A348()
{
}

void sub_10066A350()
{
}

BOOL sub_10066A358()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2168));
}

  ;
}

void sub_10066A370()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_10066A3D4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_10066A448(_Unwind_Exception *a1)
{
}

void sub_10066A460()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10130CF10;
      v1[3] = unk_10130CF20;
      v1[4] = xmmword_10130CF30;
      v1[0] = xmmword_10130CEF0;
      v1[1] = unk_10130CF00;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_10066A534(_Unwind_Exception *a1)
{
}

double sub_10066A550(uint64_t a1)
{
  uint64_t v1 = sub_10036DFEC(a1, 3600LL);
  *(void *)uint64_t v1 = &off_101847F88;
  double result = 0.0;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_DWORD *)(v1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  return result;
}

uint64_t sub_10066A584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) += a2;
  ++*(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_10066A5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 44) += a2;
  ++*(_DWORD *)(result + 56);
  return result;
}

uint64_t sub_10066A5BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) += a2;
  ++*(_DWORD *)(result + 60);
  return result;
}

uint64_t sub_10066A5D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t sub_10066A5E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x7E0], 8) = a2;
  return result;
}

uint64_t sub_10066A5E8(uint64_t result)
{
  return result;
}

void sub_10066A5F8(_DWORD *a1)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101847FC0);
  }
  uint64_t v2 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v4 = a1[16];
    int v3 = a1[17];
    *(_DWORD *)std::string buf = 67240448;
    int v36 = v3;
    __int16 v37 = 1026;
    int v38 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "@Wsb, WifiManager AP cache cnt, %{public}d, Aonsensed AP cache cnt, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101847FC0);
    }
    int v15 = a1[16];
    int v14 = a1[17];
    int v27 = 67240448;
    int v28 = v14;
    __int16 v29 = 1026;
    int v30 = v15;
    __int128 v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@Wsb, WifiManager AP cache cnt, %{public}d, Aonsensed AP cache cnt, %{public}d",  &v27,  14);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWsbScanComparatorMetrics::logMetricData()", "%s\n", v16);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101847FC0);
  }
  __int128 v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v6 = a1[11];
    int v7 = a1[12];
    int v9 = a1[9];
    int v8 = a1[10];
    *(_DWORD *)std::string buf = 67240960;
    int v36 = v6;
    __int16 v37 = 1026;
    int v38 = v8;
    __int16 v39 = 1026;
    int v40 = v7;
    __int16 v41 = 1026;
    int v42 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "@Wsb, WifiManager AP total cnt, %{public}d, Aonsensed AP total cnt, %{public}d, NotificationScan AP total cnt, %{p ublic}d, matched WSB AP cnt, %{public}d",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101847FC0);
    }
    int v17 = a1[11];
    int v18 = a1[12];
    int v20 = a1[9];
    int v19 = a1[10];
    int v27 = 67240960;
    int v28 = v17;
    __int16 v29 = 1026;
    int v30 = v19;
    __int16 v31 = 1026;
    int v32 = v18;
    __int16 v33 = 1026;
    int v34 = v20;
    LODWORD(v26) = 26;
    BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@Wsb, WifiManager AP total cnt, %{public}d, Aonsensed AP total cnt, %{public}d, NotificationScan AP total cnt, %{public}d, matched WSB AP cnt, %{public}d",  &v27,  v26);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWsbScanComparatorMetrics::logMetricData()", "%s\n", v21);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101847FC0);
  }
  uint64_t v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v12 = a1[14];
    int v11 = a1[15];
    int v13 = a1[13];
    *(_DWORD *)std::string buf = 67240704;
    int v36 = v12;
    __int16 v37 = 1026;
    int v38 = v11;
    __int16 v39 = 1026;
    int v40 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "@Wsb, WifiManager WSB notifications, %{public}d, scan notifications, %{public}d, Aonsensed notifications, %{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101847FC0);
    }
    int v23 = a1[14];
    int v22 = a1[15];
    int v24 = a1[13];
    int v27 = 67240704;
    int v28 = v23;
    __int16 v29 = 1026;
    int v30 = v22;
    __int16 v31 = 1026;
    int v32 = v24;
    LODWORD(v26) = 20;
    int v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@Wsb, WifiManager WSB notifications, %{public}d, scan notifications, %{public}d, Aonsensed notificat ions, %{public}d",  &v27,  v26);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWsbScanComparatorMetrics::logMetricData()", "%s\n", v25);
  }

double sub_10066AAC0(uint64_t a1)
{
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 36) = 0u;
  return result;
}

uint64_t sub_10066AAD4(unsigned int *a1)
{
  v12[0] = @"numScannedApsFromAonsensed";
  v13[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[10]);
  v12[1] = @"numScannedApsFromWifiManager";
  v13[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[11]);
  v12[2] = @"numScannedApsFromNotificationScan";
  v13[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[12]);
  void v12[3] = @"numNotificationScanCachesFromAonsensed";
  v13[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[13]);
  v12[4] = @"numNotificationScanCachesFromWifiManager";
  _DWORD v13[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[14]);
  v12[5] = @"numNotificationScans";
  v13[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[15]);
  v12[6] = @"numMatchedApsBetweenAonsensedAndWifiManager";
  v13[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[9]);
  v12[7] = @"numCachedApsFromAonsensed";
  v13[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[16]);
  v12[8] = @"numCachedApsFromWifiManager";
  _WORD v13[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[17]);
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  9LL);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101847FC0);
  }
  int v3 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    int v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "@Wsb, submitting CoreAnalytics event for WSB scan comparisons, %{private}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101847FC0);
    }
    int v8 = 138477827;
    int v9 = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@Wsb, submitting CoreAnalytics event for WSB scan comparisons, %{private}@",  &v8,  12);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWsbScanComparatorMetrics::sendCoreAnalyticsEvent()",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10066ADD8;
  void v7[3] = &unk_101820740;
  v7[4] = v2;
  return AnalyticsSendEventLazy(@"com.apple.clx.wsb.scancomparison", v7);
}

uint64_t sub_10066ADD8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10066ADE0(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10066AE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    v8[0] = CMMotionAlarmKey;
    v8[1] = CMErrorMessage;
    v9[0] = a2;
    v9[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3);
    int v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  2LL);
    sub_10066C694(a1, &v7);
  }
}

void sub_10066AF64(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

uint64_t sub_10066AFB0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v7 = off_101847FF0;
  *(_WORD *)(v7 + 41) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", @"CLMotionAlarmNotifier");
  int v8 = -[CLMotionAlarmSubscriptionAdapter initWithMotionAlarmSubscription:]( objc_alloc(&OBJC_CLASS___CLMotionAlarmSubscriptionAdapter),  "initWithMotionAlarmSubscription:",  a1);
  *(void *)(a1 + 56) = v8;
  -[CLMotionAlarmSubscriptionAdapter setValid:](v8, "setValid:", 1LL);
  objc_msgSend(*(id *)(a1 + 48), "registerDelegate:inSilo:", *(void *)(a1 + 56), objc_msgSend(a3, "silo"));
  *(_BYTE *)(a1 + 42) = sub_10066B068(a1);
  return a1;
}

void sub_10066B054(_Unwind_Exception *a1)
{
}

uint64_t sub_10066B068(uint64_t a1)
{
  uint64_t v2 = sub_100C6AC9C(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_10066B0C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066B0E0(uint64_t a1)
{
  *(void *)a1 = off_101847FF0;
  if (*(_BYTE *)(a1 + 41))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    int v3 = *(void **)(a1 + 24);
    if (v3)
    {
      [v3 clientName];
    }

    else
    {
      uint64_t v16 = 0LL;
      *(_OWORD *)std::stringbuf::string_type __p = 0u;
      __int128 v15 = 0u;
      __int128 v12 = 0u;
      *(_OWORD *)int v13 = 0u;
      __int128 v10 = 0u;
      *(_OWORD *)int v11 = 0u;
      *(_OWORD *)int v8 = 0u;
      *(_OWORD *)int v9 = 0u;
      *(_OWORD *)int v6 = 0u;
      __int128 v7 = 0u;
      *(_OWORD *)char v5 = 0u;
    }

    [v2 unregisterClient:sub_1011DBFBC((__int128 *)v5) systemClient:*(unsigned __int8 *)(a1 + 42)];
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[1]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[1]);
    }
    if (SHIBYTE(v9[0]) < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6[1]);
    }
    if (SHIBYTE(v6[0]) < 0) {
      operator delete(v5[0]);
    }
  }

  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  [*(id *)(a1 + 56) setValid:0];

  *(void *)(a1 + 56) = 0LL;
  return sub_100C6AB50(a1);
}

void sub_10066B20C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10066B0E0(a1);
  operator delete(v1);
}

void *sub_10066B220@<X0>(uint64_t a1@<X8>)
{
  v24[0] = &off_101848100;
  v24[1] = sub_10066B684;
  v24[2] = 0LL;
  int v25 = v24;
  sub_1010DDBC0(v26, "kCLConnectionMessageMotionAlarmFire");
  sub_10066CE14((uint64_t)&v27, (uint64_t)v24);
  BOOL v21 = &off_1018481B0;
  v22[0] = sub_10066B9A4;
  v22[1] = 0LL;
  int v23 = &v21;
  sub_1010DDBC0(v28, "kCLConnectionMessageMotionAlarmRegister");
  sub_10066CE14((uint64_t)&v29, (uint64_t)&v21);
  v19[0] = &off_1018481B0;
  v19[1] = sub_10066BE08;
  v19[2] = 0LL;
  int v20 = v19;
  sub_1010DDBC0(v30, "kCLConnectionMessageMotionAlarmUnregister");
  sub_10066CE14((uint64_t)&v31, (uint64_t)v19);
  v17[0] = &off_1018481B0;
  v17[1] = sub_10066C0D0;
  v17[2] = 0LL;
  int v18 = v17;
  sub_1010DDBC0(v32, "kCLConnectionMessageMotionAlarmAcknowledge");
  sub_10066CE14((uint64_t)&v33, (uint64_t)v17);
  v15[0] = &off_1018481B0;
  v15[1] = sub_10066C398;
  v15[2] = 0LL;
  uint64_t v16 = v15;
  sub_1010DDBC0(v34, "kCLConnectionMessageMotionAlarmLaunchRemoteApplication");
  sub_10066CE14((uint64_t)&v35, (uint64_t)v15);
  sub_10066D444(a1, (unsigned __int8 *)v26, 5LL);
  uint64_t v2 = 35LL;
  do
  {
    int v3 = (void *)v26[v2 - 1];
    if (&v24[v2] == v3)
    {
      int v3 = &v24[v2];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v23)[v2]) < 0) {
      operator delete((void *)v22[v2]);
    }
    v2 -= 7LL;
  }

  while (v2 * 8);
  char v5 = v16;
  if (v16 == v15)
  {
    uint64_t v6 = 4LL;
    char v5 = v15;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v16)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  __int128 v7 = v18;
  if (v18 == v17)
  {
    uint64_t v8 = 4LL;
    __int128 v7 = v17;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v18)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  int v9 = v20;
  if (v20 == v19)
  {
    uint64_t v10 = 4LL;
    int v9 = v19;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  else if (v20)
  {
    uint64_t v10 = 5LL;
    goto LABEL_24;
  }

  int v11 = v23;
  if (v23 == &v21)
  {
    uint64_t v12 = 4LL;
    int v11 = &v21;
LABEL_29:
    (*v11)[v12]();
  }

  else if (v23)
  {
    uint64_t v12 = 5LL;
    goto LABEL_29;
  }

  double result = v25;
  if (v25 == v24)
  {
    uint64_t v14 = 4LL;
    double result = v24;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  else if (v25)
  {
    uint64_t v14 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }

  return result;
}

void sub_10066B500( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25, uint64_t a26, uint64_t a27, char *a28, char a29)
{
  for (uint64_t i = 224LL; i != -56; i -= 56LL)
    sub_10026E430((uint64_t)(&a29 + i));
  uint64_t v31 = a12;
  if (a12 == &a9)
  {
    uint64_t v32 = 4LL;
    uint64_t v31 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_8;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_8:
  uint64_t v33 = a16;
  if (a16 == &a13)
  {
    uint64_t v34 = 4LL;
    uint64_t v33 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_13;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*(void *)v33 + 8 * v34))();
LABEL_13:
  uint64_t v35 = a20;
  if (a20 == &a17)
  {
    uint64_t v36 = 4LL;
    uint64_t v35 = &a17;
  }

  else
  {
    if (!a20) {
      goto LABEL_18;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*(void *)v35 + 8 * v36))();
LABEL_18:
  __int16 v37 = a24;
  if (a24 == &a21)
  {
    uint64_t v38 = 4LL;
    __int16 v37 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_23;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*(void *)v37 + 8 * v38))();
LABEL_23:
  __int16 v39 = a28;
  if (a28 == &a25)
  {
    uint64_t v40 = 4LL;
    __int16 v39 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_28;
    }
    uint64_t v40 = 5LL;
  }

  (*(void (**)(void))(*(void *)v39 + 8 * v40))();
LABEL_28:
  _Unwind_Resume(a1);
}

void sub_10066B684(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_1018480A0);
    }
    char v5 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t buf = 68289794LL;
      __int16 v36 = 2082;
      __int16 v37 = "";
      __int16 v38 = 2114;
      uint64_t v39 = v6;
      __int16 v40 = 2050;
      uint64_t v41 = a1;
      __int16 v42 = 1026;
      int v43 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Motion alarm fire subscription changed, Client:%{public, location:escape_only}@,  subscription:%{public}p, subscribe:%{public}hhd}",  (uint8_t *)&buf,  0x2Cu);
    }

    sub_100C6AC8C(a1);
    __int128 v7 = *(void **)(a1 + 48);
    uint64_t v8 = *(void **)(a1 + 24);
    if (a2)
    {
      if (v8)
      {
        [v8 clientName];
      }

      else
      {
        uint64_t v34 = 0LL;
        *(_OWORD *)std::stringbuf::string_type __p = 0u;
        __int128 v33 = 0u;
        __int128 v30 = 0u;
        *(_OWORD *)uint64_t v31 = 0u;
        __int128 v28 = 0u;
        *(_OWORD *)uint64_t v29 = 0u;
        *(_OWORD *)uint64_t v26 = 0u;
        *(_OWORD *)uint64_t v27 = 0u;
        *(_OWORD *)int v24 = 0u;
        __int128 v25 = 0u;
        __int128 v23 = 0u;
      }

      [v7 registerClient:sub_1011DBFBC(&v23) adapter:*(void *)(a1 + 56) systemClient:*(unsigned __int8 *)(a1 + 42)];
      if (SHIBYTE(v33) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v31[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[1]);
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(v27[1]);
      }
      if (SHIBYTE(v27[0]) < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[1]);
      }
      char v9 = 1;
      if ((SHIBYTE(v24[0]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      uint64_t v10 = &v23;
    }

    else
    {
      if (v8)
      {
        [v8 clientName];
      }

      else
      {
        uint64_t v22 = 0LL;
        *(_OWORD *)int v20 = 0u;
        __int128 v21 = 0u;
        __int128 v18 = 0u;
        *(_OWORD *)int v19 = 0u;
        __int128 v16 = 0u;
        *(_OWORD *)int v17 = 0u;
        *(_OWORD *)uint64_t v14 = 0u;
        *(_OWORD *)__int128 v15 = 0u;
        *(_OWORD *)uint64_t v12 = 0u;
        __int128 v13 = 0u;
        __int128 v11 = 0u;
      }

      [v7 unregisterClient:sub_1011DBFBC(&v11) systemClient:*(unsigned __int8 *)(a1 + 42)];
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[1]);
      }
      if (SHIBYTE(v20[0]) < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[1]);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(v15[1]);
      }
      if (SHIBYTE(v15[0]) < 0) {
        operator delete(v14[0]);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[1]);
      }
      char v9 = 0;
      if ((SHIBYTE(v12[0]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      uint64_t v10 = &v11;
    }

    operator delete(*(void **)v10);
LABEL_42:
    *(_BYTE *)(a1 + 41) = v9;
  }
}

void sub_10066B960( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_10066B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMMotionAlarm);
    uint64_t v6 = v5;
    *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    id v9 = objc_msgSend( (id)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, v7, v8, 0)),  "objectForKey:",  CMMotionAlarmKey);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_1018480A0);
    }
    uint64_t v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
    {
      id v11 = [*(id *)(a1 + 24) legacyClientKey];
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 138543618;
      id v47 = v11;
      __int16 v48 = 2114;
      uint64_t v49 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "#MotionAlarm handleMessageMotionAlarmRegister  clientKey: %{public}@  client: %{public}@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_1018480A0);
      }
      uint64_t v22 = qword_101934618;
      id v23 = [*(id *)(a1 + 24) legacyClientKey];
      uint64_t v24 = *(void *)(a1 + 24);
      int v42 = 138543618;
      id v43 = v23;
      __int16 v44 = 2114;
      uint64_t v45 = v24;
      LODWORD(v27) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  1LL,  "#MotionAlarm handleMessageMotionAlarmRegister  clientKey: %{public}@  client: %{public}@",  &v42,  v27);
      uint64_t v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmSubscription::handleMessageMotionAlarmRegister(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    __int128 v13 = *(void **)(a1 + 24);
    if (v13)
    {
      [v13 clientName];
    }

    else
    {
      uint64_t v41 = 0LL;
      *(_OWORD *)std::stringbuf::string_type __p = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      *(_OWORD *)__int16 v38 = 0u;
      __int128 v35 = 0u;
      *(_OWORD *)__int16 v36 = 0u;
      *(_OWORD *)__int128 v33 = 0u;
      *(_OWORD *)uint64_t v34 = 0u;
      *(_OWORD *)uint64_t v31 = 0u;
      __int128 v32 = 0u;
      *(_OWORD *)__int128 v30 = 0u;
    }

    [v9 setBundleId:sub_10066C73C((uint64_t)v30)];
    if (SHIBYTE(v40) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[1]);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[1]);
    }
    if (SHIBYTE(v34[0]) < 0) {
      operator delete(v33[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[1]);
    }
    if (SHIBYTE(v31[0]) < 0) {
      operator delete(v30[0]);
    }
    __int128 v15 = *(void **)(a1 + 48);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768LL;
    v28[2] = sub_10066CB90;
    void v28[3] = &unk_101848010;
    __int128 v16 = *(std::__shared_weak_count **)(a2 + 8);
    v28[4] = *(void *)a2;
    uint64_t v29 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    [v15 registerAlarm:v9 withReply:v28];
    int v19 = v29;
    if (v29)
    {
      int v20 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

  else
  {
    uint64_t v14 = *(CLConnectionMessage **)a2;
    uint64_t v50 = CMErrorMessage;
    uint64_t v51 = &off_1018D36B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v51,  &v50,  1LL);
    CLConnectionMessage::sendReply(v14);
  }
}

void sub_10066BDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10066BE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMMotionAlarm);
    uint64_t v6 = v5;
    *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    id v9 = objc_msgSend( (id)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, v7, v8, 0)),  "objectForKey:",  CMMotionAlarmKey);
    uint64_t v10 = *(void **)(a1 + 24);
    if (v10)
    {
      [v10 clientName];
    }

    else
    {
      uint64_t v32 = 0LL;
      *(_OWORD *)std::stringbuf::string_type __p = 0u;
      __int128 v31 = 0u;
      __int128 v28 = 0u;
      *(_OWORD *)uint64_t v29 = 0u;
      __int128 v26 = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)__int128 v25 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      __int128 v23 = 0u;
      *(_OWORD *)unint64_t v21 = 0u;
    }

    [v9 setBundleId:sub_10066C73C((uint64_t)v21)];
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[1]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[1]);
    }
    if (SHIBYTE(v25[0]) < 0) {
      operator delete(v24[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[1]);
    }
    if (SHIBYTE(v22[0]) < 0) {
      operator delete(v21[0]);
    }
    uint64_t v12 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768LL;
    v19[2] = sub_10066CC34;
    void v19[3] = &unk_101848010;
    __int128 v13 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = *(void *)a2;
    int v20 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }

    [v12 unregisterAlarm:v9 withReply:v19];
    __int128 v16 = v20;
    if (v20)
    {
      int v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  else
  {
    id v11 = *(CLConnectionMessage **)a2;
    uint64_t v33 = CMErrorMessage;
    uint64_t v34 = &off_1018D36B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
    CLConnectionMessage::sendReply(v11);
  }
}

void sub_10066C07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10066C0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMMotionAlarm);
    uint64_t v6 = v5;
    *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    id v9 = objc_msgSend( (id)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, v7, v8, 0)),  "objectForKey:",  CMMotionAlarmKey);
    uint64_t v10 = *(void **)(a1 + 24);
    if (v10)
    {
      [v10 clientName];
    }

    else
    {
      uint64_t v32 = 0LL;
      *(_OWORD *)std::stringbuf::string_type __p = 0u;
      __int128 v31 = 0u;
      __int128 v28 = 0u;
      *(_OWORD *)uint64_t v29 = 0u;
      __int128 v26 = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)__int128 v25 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      __int128 v23 = 0u;
      *(_OWORD *)unint64_t v21 = 0u;
    }

    [v9 setBundleId:sub_10066C73C((uint64_t)v21)];
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[1]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[1]);
    }
    if (SHIBYTE(v25[0]) < 0) {
      operator delete(v24[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[1]);
    }
    if (SHIBYTE(v22[0]) < 0) {
      operator delete(v21[0]);
    }
    uint64_t v12 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768LL;
    v19[2] = sub_10066CCD8;
    void v19[3] = &unk_101848010;
    __int128 v13 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = *(void *)a2;
    int v20 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }

    [v12 acknowledgeAlarm:v9 withReply:v19];
    __int128 v16 = v20;
    if (v20)
    {
      int v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  else
  {
    id v11 = *(CLConnectionMessage **)a2;
    uint64_t v33 = CMErrorMessage;
    uint64_t v34 = &off_1018D36B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
    CLConnectionMessage::sendReply(v11);
  }
}

void sub_10066C344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10066C398(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_10066C5FC(a1) & 1) != 0)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    if (v5)
    {
      [v5 clientName];
    }

    else
    {
      uint64_t v28 = 0LL;
      *(_OWORD *)std::stringbuf::string_type __p = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      *(_OWORD *)__int128 v25 = 0u;
      __int128 v22 = 0u;
      *(_OWORD *)__int128 v23 = 0u;
      *(_OWORD *)int v20 = 0u;
      *(_OWORD *)unint64_t v21 = 0u;
      *(_OWORD *)unint64_t v18 = 0u;
      __int128 v19 = 0u;
      *(_OWORD *)int v17 = 0u;
    }

    double v7 = sub_10066C73C((uint64_t)v17);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v25[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[1]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[1]);
    }
    if (SHIBYTE(v21[0]) < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[1]);
    }
    if (SHIBYTE(v18[0]) < 0) {
      operator delete(v17[0]);
    }
    uint64_t v8 = *(void **)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768LL;
    v15[2] = sub_10066CD7C;
    void v15[3] = &unk_101848040;
    id v9 = (std::__shared_weak_count *)a2[1];
    v15[4] = *a2;
    __int128 v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    [v8 launchRemoteApplication:v7 withReply:v15];
    uint64_t v12 = v16;
    if (v16)
    {
      __int128 v13 = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  else
  {
    uint64_t v6 = *a2;
    uint64_t v29 = CMErrorMessage;
    __int128 v30 = &off_1018D36B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL);
    CLConnectionMessage::sendReply(v6);
  }
}

void sub_10066C5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10066C5FC(uint64_t a1)
{
  if ((sub_100C6AC9C(a1) & 1) != 0)
  {
    if (v5 < 0) {
      operator delete(__p);
    }
    return 1LL;
  }

  else
  {
    uint64_t v2 = sub_10066B068(a1);
    if (v5 < 0) {
      operator delete(__p);
    }
  }

  return v2;
}

void sub_10066C678( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10066C694(uint64_t a1, void *a2)
{
  int v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10066C728(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

NSString *sub_10066C73C(uint64_t a1)
{
  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 151);
  }
  int v3 = (void **)(a1 + 128);
  if (v2)
  {
    sub_100FE370C(a1);
    uint64_t v4 = (void *)(a1 + 128);
    goto LABEL_19;
  }

  sub_100FE370C(a1);
  if (*(char *)(a1 + 127) < 0)
  {
    if (*(void *)(a1 + 112)) {
      goto LABEL_10;
    }
  }

  else if (*(_BYTE *)(a1 + 127))
  {
LABEL_10:
    unint64_t v5 = (void *)(a1 + 104);
    sub_100FE370C(a1);
    uint64_t v4 = v5;
LABEL_19:
    uint64_t v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
    double v7 = v6;
    if (v6 && -[NSString length](v6, "length")) {
      return v7;
    }
    goto LABEL_21;
  }

  uint64_t v4 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v4 = (void *)*v4;
      goto LABEL_19;
    }
  }

  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_19;
  }

void sub_10066CB60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066CB90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_10066CC34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_10066CCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_10066CD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = CMErrorMessage;
  unint64_t v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_10066CE14(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    int v3 = (void *)(a1 + 24);
  }

  *int v3 = 0LL;
  return a1;
}

void sub_10066CE78(id a1)
{
  qword_101934618 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

uint64_t sub_10066CEA4@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = sub_1000392EC(a3, v5 + 1);
  else {
    double v7 = *(_BYTE **)result;
  }
  *double v7 = a1;
  uint64_t v8 = v7 + 1;
  if (v5)
  {
    else {
      id v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }

  *((_BYTE *)v8 + v5) = 0;
  return result;
}

char *sub_10066CF30(uint64_t a1, uint64_t a2)
{
  return sub_1011F69B0((char *)(a1 + 32), (__int128 *)(a2 + 32));
}

uint64_t sub_10066CF3C(uint64_t a1)
{
  return sub_1011F6920(a1 + 32);
}

__n128 sub_10066CF44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101848100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

__n128 sub_10066CF80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101848100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_10066CFA4(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_10066CFAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10066CFE8()
{
}

void sub_10066CFF4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10066D078(a1, a2, (CLConnectionMessage **)&v6);
  int v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10066D060( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066D078(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101848170);
    }
    unint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int128 v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101848170);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int128 v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_10066D25C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10066D278(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10066D2A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1018481B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

__n128 sub_10066D2E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1018481B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_10066D304(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10066D30C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10066D348()
{
}

void sub_10066D354(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  int v3 = (std::__shared_weak_count *)a3[1];
  unint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  double v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  uint64_t v10 = v17;
  if (v17)
  {
    unint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    __int128 v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_10066D428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10066D444(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10066D4BC(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10066D4A8(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10066D4BC(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    __int128 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10066D73C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  __int128 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int128 v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_10066D724(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10066D73C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x7E0], 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_10066D7B0(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10066D798(_Unwind_Exception *a1)
{
}

void *sub_10066D7B0(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10066D808(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10066D824(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 64) = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 72) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *(void *)(a1 + 80) = *a4;
  uint64_t v11 = a4[1];
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = v11;
  if (v11)
  {
    unint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  *(_OWORD *)(a1 + 96) = xmmword_10130D600;
  *(_OWORD *)(a1 + 112) = unk_10130D610;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = xmmword_10130D620;
  *(_OWORD *)(a1 + 140) = *(__int128 *)((char *)&xmmword_10130D620 + 12);
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 29_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 18_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(_OWORD *)(a1 + 320) = xmmword_10130D570;
  *(_OWORD *)(a1 + 3++*(_DWORD *)(result + 36) = xmmword_10130D580;
  *(_OWORD *)(a1 + 352) = xmmword_10130D590;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x7E0], 8) = xmmword_10130D5A0;
  *(void *)(a1 + 384) = 0x404B800000000000LL;
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  unint64_t v15 = (uint64_t *)(a1 + 328);
  int v16 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_MaxDiffPeakHRMaxRecoveryHR", (void *)(a1 + 328));
  int v17 = v16;
  BOOL v18 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_14;
  }
  unint64_t v19 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v17) {
      goto LABEL_20;
    }
  }

  else
  {
LABEL_14:
    if (!v16) {
      goto LABEL_20;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  size_t v21 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *v15;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Estimator,fMaxDiffPeakHRMaxRecoveryHR overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    uint64_t v78 = *v15;
    int v100 = 134349056;
    uint64_t v101 = v78;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fMaxDiffPeakHRMaxRecoveryHR overridden (%{public}f)",  &v100,  12);
    __int128 v80 = (char *)v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v79);
  }

void sub_10066E5E4(_Unwind_Exception *a1)
{
}

void sub_10066E66C(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  __int128 v5 = a2[2];
  *(_OWORD *)(a1 + 140) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v5;
  *(_OWORD *)(a1 + 96) = v3;
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  uint64_t v6 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 152);
    double v8 = *(float *)(a1 + 116);
    int v9 = *(_DWORD *)(a1 + 100);
    int v10 = *(unsigned __int8 *)(a1 + 153);
    double v11 = *(float *)(a1 + 104);
    int v12 = *(unsigned __int8 *)(a1 + 154);
    double v13 = *(float *)(a1 + 108);
    int v14 = *(unsigned __int8 *)(a1 + 144);
    *(_DWORD *)uint64_t buf = 67241985;
    int v40 = v7;
    __int16 v41 = 2049;
    double v42 = v8;
    __int16 v43 = 1025;
    int v44 = v9;
    __int16 v45 = 1026;
    int v46 = v10;
    __int16 v47 = 2049;
    double v48 = v11;
    __int16 v49 = 1026;
    int v50 = v12;
    __int16 v51 = 2049;
    double v52 = v13;
    __int16 v53 = 1025;
    int v54 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f, IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    int v15 = *(unsigned __int8 *)(a1 + 152);
    double v16 = *(float *)(a1 + 116);
    int v17 = *(_DWORD *)(a1 + 100);
    int v18 = *(unsigned __int8 *)(a1 + 153);
    double v19 = *(float *)(a1 + 104);
    int v20 = *(unsigned __int8 *)(a1 + 154);
    double v21 = *(float *)(a1 + 108);
    int v22 = *(unsigned __int8 *)(a1 + 144);
    v24[0] = 67241985;
    v24[1] = v15;
    __int16 v25 = 2049;
    double v26 = v16;
    __int16 v27 = 1025;
    int v28 = v17;
    __int16 v29 = 1026;
    int v30 = v18;
    __int16 v31 = 2049;
    double v32 = v19;
    __int16 v33 = 1026;
    int v34 = v20;
    __int16 v35 = 2049;
    double v36 = v21;
    __int16 v37 = 1025;
    int v38 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Heigh t,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d",  v24,  62);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::feedBodyMetrics(const CLBodyMetrics &)",  "%s\n",  v23);
  }

void sub_10066E904(uint64_t a1, float a2)
{
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  __int128 v4 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134283521;
    double v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Estimator,restingHeartRateSevenDay,%{private}f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    double v5 = a2;
    int v7 = 134283521;
    double v8 = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,restingHeartRateSevenDay,%{private}f",  &v7,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::feedRestingHeartRate(float)", "%s\n", v6);
  }

  else
  {
    double v5 = a2;
  }

  *(double *)(a1 + 320) = v5;
}

void sub_10066EAC8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 156))
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int128 v4 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a2 + 40);
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = *(void *)(a2 + 16);
      *(_DWORD *)uint64_t buf = 134284033;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&_BYTE buf[12] = 2049;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2049;
      *(void *)&buf[24] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Estimator,startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      uint64_t v8 = *(void *)(a2 + 40);
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a2 + 16);
      int v12 = 134284033;
      uint64_t v13 = v8;
      __int16 v14 = 2049;
      uint64_t v15 = v9;
      __int16 v16 = 2049;
      uint64_t v17 = v10;
      double v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f",  &v12,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::feedStreamingHeartRate(const CLCatherineData &)",  "%s\n",  v11);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_10066ECEC(a1, 0, *(double *)(a2 + 40));
    if (*(_DWORD *)(a1 + 156))
    {
      *(void *)uint64_t buf = 0LL;
      *(void *)&uint8_t buf[8] = *(void *)(a2 + 40);
      *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 8);
      sub_10024D4E8(*(void *)(a1 + 48), (uint64_t)buf);
    }
  }

void sub_10066ECEC(uint64_t a1, int a2, double a3)
{
  if (a2 == 1)
  {
    uint64_t v6 = (double *)(a1 + 304);
LABEL_5:
    double *v6 = a3;
    double Current = CFAbsoluteTimeGetCurrent();
    int v8 = *(_DWORD *)(a1 + 156);
    if (v8 == 3)
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      double v21 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *(double *)(a1 + 184);
        *(_DWORD *)uint64_t buf = 134283777;
        double v48 = v22;
        __int16 v49 = 2049;
        *(void *)int v50 = 0x4066800000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Estimator: Workout paused from %{private}f, exceeding max pause duration:%{private}.2f seconds, need to unregi ster HR notification",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        double v31 = *(double *)(a1 + 184);
        int v41 = 134283777;
        double v42 = v31;
        __int16 v43 = 2049;
        *(void *)int v44 = 0x4066800000000000LL;
        double v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Workout paused from %{private}f, exceeding max pause duration:%{private}.2f seconds, need to unregister HR notification",  &v41,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v32);
      }

      int v17 = 0;
      BOOL v14 = 0;
      int v18 = 0;
      *(_DWORD *)(a1 + 156) = 4;
    }

    else
    {
      if (v8 != 2) {
        return;
      }
      double v9 = Current;
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      uint64_t v10 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134284033;
        double v48 = a3;
        __int16 v49 = 2049;
        *(double *)int v50 = v9;
        *(_WORD *)&v50[8] = 1025;
        *(_DWORD *)&v50[10] = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Estimator: Input sample time:%{private}f, now:%{private}f, inputType:%{private}d ",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        int v41 = 134284033;
        double v42 = a3;
        __int16 v43 = 2049;
        *(double *)int v44 = v9;
        *(_WORD *)&v44[8] = 1025;
        *(_DWORD *)&v44[10] = a2;
        int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Input sample time:%{private}f, now:%{private}f, inputType:%{private}d ",  &v41,  28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v30);
      }

      double v11 = *(double *)(a1 + 176) + 178.0;
      double v12 = *(double *)(a1 + 296);
      double v13 = *(double *)(a1 + 304);
      BOOL v14 = v13 > v11;
      if (v9 - a3 > 185.0)
      {
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        uint64_t v15 = (os_log_s *)qword_101934778;
        if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134284289;
          double v48 = a3;
          __int16 v49 = 1025;
          *(_DWORD *)int v50 = a2;
          *(_WORD *)&v50[4] = 2049;
          *(double *)&v50[6] = v9;
          __int16 v51 = 2049;
          double v52 = v9 - a3;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Estimator: Input sample time exceeds allowed delay, sample time:%{private}f, inputType:%{private}d, now:%{pr ivate}f, delay:%{private}f ",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          int v41 = 134284289;
          double v42 = a3;
          __int16 v43 = 1025;
          *(_DWORD *)int v44 = a2;
          *(_WORD *)&v44[4] = 2049;
          *(double *)&v44[6] = v9;
          __int16 v45 = 2049;
          double v46 = v9 - a3;
          LODWORD(v40) = 38;
          __int16 v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: Input sample time exceeds allowed delay, sample time:%{private}f, inputType:%{priva te}d, now:%{private}f, delay:%{private}f ",  &v41,  v40);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v33);
        }
      }

      if (v13 > v11 && v12 <= v11)
      {
        if (v9 - *(double *)(a1 + 296) <= 240.0)
        {
          int v17 = 0;
          int v18 = 0;
          BOOL v14 = 1;
          goto LABEL_58;
        }

        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        uint64_t v23 = (os_log_s *)qword_101934778;
        if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
        {
          double v24 = *(double *)(a1 + 296);
          *(_DWORD *)uint64_t buf = 134283777;
          double v48 = v9 - v24;
          __int16 v49 = 2049;
          *(double *)int v50 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Estimator: HR samples not received for %{private}f seconds, lastHRTime:%{private}f)",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          double v38 = *(double *)(a1 + 296);
          int v41 = 134283777;
          double v42 = v9 - v38;
          __int16 v43 = 2049;
          *(double *)int v44 = v38;
          LODWORD(v40) = 22;
          __int16 v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: HR samples not received for %{private}f seconds, lastHRTime:%{private}f)",  &v41,  v40);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v39);
        }

        int v18 = 0;
        int v17 = 1;
        BOOL v14 = 1;
      }

      else
      {
        int v17 = 0;
        if (v12 <= v11)
        {
          int v18 = 0;
LABEL_58:
          if (v14 && v17 | v18)
          {
            if (v18)
            {
              if (qword_101934770 != -1) {
                dispatch_once(&qword_101934770, &stru_101848228);
              }
              __int16 v27 = (os_log_s *)qword_101934778;
              if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
              {
                double v28 = *(double *)(a1 + 168);
                uint64_t v29 = *(void *)(a1 + 176);
                *(_DWORD *)uint64_t buf = 134283777;
                double v48 = v28;
                __int16 v49 = 2049;
                *(void *)int v50 = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Estimator: Ending session due to reaching the end of the post activity period (sessionStartTime:%{priv ate}f, activityEndTime:%{private}f)",  buf,  0x16u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934770 != -1) {
                  dispatch_once(&qword_101934770, &stru_101848228);
                }
                double v34 = *(double *)(a1 + 168);
                uint64_t v35 = *(void *)(a1 + 176);
                int v41 = 134283777;
                double v42 = v34;
                __int16 v43 = 2049;
                *(void *)int v44 = v35;
                LODWORD(v40) = 22;
                double v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Ending session due to reaching the end of the post activity period (sessionSt artTime:%{private}f, activityEndTime:%{private}f)",  &v41,  v40);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v36);
              }
            }

            sub_100670E5C(a1, v18);
          }

          return;
        }

        int v18 = 1;
      }
    }

    if (*(void *)(a1 + 24) && !*(_BYTE *)(a1 + 312))
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      __int16 v25 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Estimator: Unregistering HR notification",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        __int16 v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Unregistering HR notification",  &v41,  v40);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v37);
      }

      uint64_t v26 = sub_1002F8DDC();
      sub_1002A667C(v26, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
      *(_BYTE *)(a1 + 312) = 1;
      (*(void (**)(void))(a1 + 24))(*(void *)(a1 + 40));
    }

    goto LABEL_58;
  }

  if (!a2)
  {
    uint64_t v6 = (double *)(a1 + 296);
    goto LABEL_5;
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  double v19 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134283777;
    double v48 = a3;
    __int16 v49 = 1025;
    *(_DWORD *)int v50 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Estimator: Received input sample of unknown type, event time:%{private}f, inputType:%{private}d ",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    int v41 = 134283777;
    double v42 = a3;
    __int16 v43 = 1025;
    *(_DWORD *)int v44 = a2;
    int v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: Received input sample of unknown type, event time:%{private}f, inputType:%{private}d ",  &v41,  18);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)",  "%s\n",  v20);
  }

void sub_10066F8A0(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7)
{
  if (*(_DWORD *)(a1 + 156))
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    BOOL v14 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134284801;
      *(double *)&uint8_t buf[4] = a4;
      *(_WORD *)&_BYTE buf[12] = 2049;
      *(double *)&buf[14] = a5;
      *(_WORD *)&buf[22] = 1025;
      int v29 = a2;
      __int16 v30 = 2049;
      *(double *)double v31 = a6;
      *(_WORD *)&v31[8] = 2049;
      double v32 = a7;
      LOWORD(v33[0]) = 1025;
      *(_DWORD *)((char *)v33 + 2) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Estimator,computeTime,%{private}f,wrMets,%{private}f,gradeType,%{private}d,grade,%{private}f,userMets,%{private} f,userMetsSource,%{private}d",  buf,  0x36u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      int v16 = 134284801;
      double v17 = a4;
      __int16 v18 = 2049;
      double v19 = a5;
      __int16 v20 = 1025;
      int v21 = a2;
      __int16 v22 = 2049;
      double v23 = a6;
      __int16 v24 = 2049;
      double v25 = a7;
      __int16 v26 = 1025;
      int v27 = a3;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,computeTime,%{private}f,wrMets,%{private}f,gradeType,%{private}d,grade,%{private}f,userM ets,%{private}f,userMetsSource,%{private}d",  &v16,  54);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, double, CLMetsSource)",  "%s\n",  v15);
      if (v15 != buf) {
        free(v15);
      }
    }

    sub_10066ECEC(a1, 1, a4);
    if (*(_DWORD *)(a1 + 156))
    {
      *(void *)uint64_t buf = 0LL;
      *(double *)&uint8_t buf[8] = a4;
      *(double *)&buf[16] = a5;
      int v29 = a2;
      *(double *)&v31[2] = a6;
      double v32 = a7;
      v33[0] = a3;
      sub_10024D4E8(*(void *)(a1 + 64), (uint64_t)buf);
    }
  }

void sub_10066FB18(uint64_t a1, uint64_t a2)
{
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  __int128 v4 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(char **)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 112);
    *(_DWORD *)uint64_t buf = 134283777;
    double v25 = v5;
    __int16 v26 = 2049;
    uint64_t v27 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Estimator,workoutEvent,%{private}ld,workoutType,%{private}ld",  buf,  0x16u);
  }

  uint64_t v7 = sub_1002921D0(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 112);
    *(_DWORD *)uuid_string_t out = 134283777;
    *(void *)&out[4] = v13;
    *(_WORD *)&out[12] = 2049;
    *(void *)&out[14] = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,workoutEvent,%{private}ld,workoutType,%{private}ld",  out,  22);
    uint64_t v7 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v15);
  }

  uint64_t v8 = *(void *)(a2 + 16);
  switch(v8)
  {
    case 13LL:
      unint64_t v9 = *(void *)(a2 + 112);
      if ((v9 <= 0x18 && ((1LL << v9) & 0x1028000) != 0 || sub_10066FFBC(v7, v9)) && !*(void *)(a2 + 224)) {
        sub_100670184(a1, (const unsigned __int8 *)a2);
      }
      *(_BYTE *)(a1 + 313) = uuid_compare((const unsigned __int8 *)(a2 + 80), (const unsigned __int8 *)(a2 + 64)) != 0;
      return;
    case 14LL:
      return;
    case 15LL:
      sub_100670838(a1, a2);
      return;
    case 16LL:
      if (*(_DWORD *)(a1 + 156) == 1)
      {
        *(_DWORD *)(a1 + 156) = 3;
        *(void *)(a1 + 184) = *(void *)(a2 + 24);
      }

      return;
    case 17LL:
      sub_100670C94(a1);
      return;
    default:
      if (v8 || !*(_BYTE *)(a1 + 313)) {
        return;
      }
      uint64_t v10 = *(void *)(a2 + 112);
      if (v10 <= 23)
      {
        if (v10 != 15 && v10 != 17) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }

      if (v10 == 33) {
        return;
      }
      if (v10 == 24)
      {
LABEL_26:
        if (!*(void *)(a2 + 224))
        {
          sub_100670184(a1, (const unsigned __int8 *)a2);
          return;
        }
      }

BOOL sub_10066FFBC(uint64_t a1, unint64_t a2)
{
  if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)
    && (objc_msgSend( +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (a2 <= 0x12) {
      return (0x51230u >> a2) & 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int128 v4 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "HRRecovery, not collecting analytics, no IHA permission",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      v6[0] = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "HRRecovery, not collecting analytics, no IHA permission",  v6,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHRRecoveryEstimator::isValidWorkoutTypeForHRRecoveryCoreAnalytics(CMWorkoutType) const",  "%s\n",  v5);
      return 0LL;
    }
  }

  return result;
}

void sub_100670184(uint64_t a1, const unsigned __int8 *a2)
{
  __int128 v4 = a2 + 64;
  uuid_unparse(a2 + 64, out);
  if (!*(_DWORD *)(a1 + 156)) {
    goto LABEL_19;
  }
  if (uuid_compare(v4, (const unsigned __int8 *)(a1 + 192)))
  {
    uuid_unparse((const unsigned __int8 *)(a1 + 192), v30);
    unint64_t v5 = *((void *)a2 + 14);
    BOOL v6 = v5 > 0x18;
    uint64_t v7 = (1LL << v5) & 0x1028000;
    if (v6 || v7 == 0)
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      double v11 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a1 + 156);
        uint64_t v13 = *(void *)(a1 + 208);
        *(_DWORD *)uint64_t buf = 136381187;
        int v41 = v30;
        __int16 v42 = 1025;
        *(_DWORD *)__int16 v43 = v12;
        *(_WORD *)&v43[4] = 2048;
        *(void *)&v43[6] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Estimator: Session in progress (id,%{private}s,state,%{private}d,workoutType,%ld), not starting a new session",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        int v26 = *(_DWORD *)(a1 + 156);
        uint64_t v27 = *(void *)(a1 + 208);
        int v36 = 136381187;
        __int16 v37 = v30;
        __int16 v38 = 1025;
        *(_DWORD *)__int16 v39 = v26;
        *(_WORD *)&v39[4] = 2048;
        *(void *)&v39[6] = v27;
        double v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Session in progress (id,%{private}s,state,%{private}d,workoutType,%ld), not starting a new session",  &v36,  28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v28);
      }
    }

    else
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      unint64_t v9 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)uint64_t buf = 136381187;
        int v41 = v30;
        __int16 v42 = 1025;
        *(_DWORD *)__int16 v43 = v10;
        *(_WORD *)&v43[4] = 2081;
        *(void *)&v43[6] = out;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Estimator: Terminating session (id,%{private}s,state,%{private}d) in favor of newly started session (id,%{private}s)",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        int v24 = *(_DWORD *)(a1 + 156);
        int v36 = 136381187;
        __int16 v37 = v30;
        __int16 v38 = 1025;
        *(_DWORD *)__int16 v39 = v24;
        *(_WORD *)&v39[4] = 2081;
        *(void *)&v39[6] = out;
        double v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Terminating session (id,%{private}s,state,%{private}d) in favor of newly started sess ion (id,%{private}s)",  &v36,  28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v25);
      }

      sub_100670E5C(a1, 0);
    }
  }

  if (!*(_DWORD *)(a1 + 156))
  {
LABEL_19:
    memset(v30, 0, 32);
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    memset(v33, 0, sizeof(v33));
    __int128 v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BOOL v14 = uuid_compare(a2 + 80, v4) != 0;
    if (sub_10029DF68(*(void **)(a1 + 80), (uint64_t)v30) && !uuid_compare(v4, (const unsigned __int8 *)&v30[32]))
    {
      uint64_t v18 = *(void *)&v30[8];
      *(void *)(a1 + 160) = *(void *)v30;
      *(_OWORD *)(a1 + 192) = 0u;
      uint64_t v19 = v31;
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = v18;
      *(_OWORD *)(a1 + 176) = 0u;
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = v19;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
      *(_DWORD *)(a1 + 264) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
      *(_OWORD *)(a1 + 297) = 0u;
      *(_BYTE *)(a1 + 313) = v14;
      uuid_copy((unsigned __int8 *)(a1 + 192), v4);
    }

    else
    {
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = sub_100BEF6EC(*((void *)a2 + 14), *((void *)a2 + 15));
      *(_OWORD *)(a1 + 192) = 0u;
      *(void *)(a1 + 160) = 0LL;
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = v15;
      *(_OWORD *)(a1 + 176) = 0u;
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = v16;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
      *(_DWORD *)(a1 + 264) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
      *(_OWORD *)(a1 + 297) = 0u;
      *(_BYTE *)(a1 + 313) = v14;
      uuid_copy((unsigned __int8 *)(a1 + 192), v4);
      unint64_t v17 = *((void *)a2 + 14);
      if (v17 <= 0x18 && ((1LL << v17) & 0x1028000) != 0) {
        sub_1007F3AE0(*(void **)(a1 + 80), (double *)(a1 + 160));
      }
    }

    *(_DWORD *)(a1 + 156) = 1;
    if (*(void *)a1) {
      (*(void (**)(void))a1)(*(void *)(a1 + 40));
    }
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int16 v20 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 168);
      *(_DWORD *)uint64_t buf = 136380931;
      int v41 = out;
      __int16 v42 = 2049;
      *(void *)__int16 v43 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Estimator: Beginning session due to new workout (id:%{private}s, sessionStartTime:%{private}f)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      uint64_t v22 = *(void *)(a1 + 168);
      int v36 = 136380931;
      __int16 v37 = out;
      __int16 v38 = 2049;
      *(void *)__int16 v39 = v22;
      LODWORD(v29) = 22;
      double v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Beginning session due to new workout (id:%{private}s, sessionStartTime:%{private}f)",  &v36,  v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v23);
    }
  }

double sub_100670838(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 156);
  BOOL v3 = v2 > 4;
  int v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    uint64_t v8 = (const unsigned __int8 *)(a2 + 64);
    unint64_t v9 = (const unsigned __int8 *)(a1 + 192);
    if (uuid_compare((const unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)(a1 + 192)))
    {
      uuid_unparse(v9, out);
      uuid_unparse(v8, v26);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      int v10 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136380931;
        double v28 = out;
        __int16 v29 = 2081;
        uuid_string_t v30 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Estimator: Unexpected Workout SessionId (expected,%{private}s,actual,%{private}s)",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        int v22 = 136380931;
        double v23 = out;
        __int16 v24 = 2081;
        double v25 = v26;
        __int16 v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: Unexpected Workout SessionId (expected,%{private}s,actual,%{private}s)",  &v22,  22);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHRRecoveryEstimator::endWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v20);
      }

      return sub_100670E5C(a1, 0);
    }

    else
    {
      double result = *(double *)(a2 + 24);
      *(double *)(a1 + 176) = result;
      unint64_t v12 = *(void *)(a2 + 112);
      if (v12 <= 0x18 && ((1LL << v12) & 0x1028000) != 0)
      {
        uint64_t v13 = (double *)(a1 + 160);
        sqlite3_int64 v14 = *(void *)(a1 + 160);
        uint64_t v15 = *(void **)(a1 + 80);
        if (v14) {
          sub_1007F3894((uint64_t)v15, (uint64_t)v13, v14);
        }
        else {
          sub_1007F3AE0(v15, v13);
        }
      }

      int v16 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 156) = 2;
      if (v16 == 4)
      {
        return sub_100670E5C(a1, 1);
      }

      else
      {
        unint64_t v17 = *(void *)(a2 + 112);
        if (v17 <= 0x18 && ((1LL << v17) & 0x1028000) != 0)
        {
          uuid_unparse(v9, out);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          uint64_t v18 = (os_log_s *)qword_101934778;
          if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 136380675;
            double v28 = out;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Estimator: Caching session id %{private}s.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934770 != -1) {
              dispatch_once(&qword_101934770, &stru_101848228);
            }
            *(_DWORD *)int v26 = 136380675;
            *(void *)&v26[4] = out;
            uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "Estimator: Caching session id %{private}s.",  v26,  12);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::endWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v21);
          }

          uint64_t v19 = sub_1002F8DDC();
          sub_1002ACA84(v19, "HRRecoveryWorkoutSessionCachedId", out);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100670C94(uint64_t result)
{
  if ((*(_DWORD *)(result + 156) - 3) <= 1)
  {
    uint64_t v1 = result;
    *(_DWORD *)(result + 156) = 1;
    *(void *)(result + 184) = 0LL;
    if (*(void *)(result + 32))
    {
      if (*(_BYTE *)(result + 312))
      {
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        unsigned int v2 = (os_log_s *)qword_101934778;
        if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Estimator: Reregistering HR notification on workout resume",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          v4[0] = 0;
          BOOL v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Reregistering HR notification on workout resume",  v4,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::resumeWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v3);
        }

        *(_BYTE *)(v1 + 312) = 0;
        return (*(uint64_t (**)(void))(v1 + 32))(*(void *)(v1 + 40));
      }
    }
  }

  return result;
}

double sub_100670E5C(uint64_t a1, int a2)
{
  if (a2) {
    sub_100671600((id *)a1);
  }
  uint64_t v3 = sub_1002F8DDC();
  sub_1002A667C(v3, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
  if (*(void *)(a1 + 24) && !*(_BYTE *)(a1 + 312))
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    int v4 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Estimator: Unregistering HR notification",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      v9[0] = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Unregistering HR notification",  v9,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::endSession(BOOL)", "%s\n", v8);
    }

    *(_BYTE *)(a1 + 312) = 1;
    (*(void (**)(void))(a1 + 24))(*(void *)(a1 + 40));
  }

  unint64_t v5 = *(void (**)(void))(a1 + 8);
  if (v5) {
    v5(*(void *)(a1 + 40));
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v7 = (_OWORD *)(a1 + 160);
  *((_DWORD *)v7 - 1) = 0;
  v7[7] = 0u;
  _WORD v7[8] = 0u;
  *(_OWORD *)((char *)v7 + 13_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  void v7[3] = 0u;
  v7[4] = 0u;
  void v7[5] = 0u;
  *(_OWORD *)((char *)v7 + 92) = 0u;
  return result;
}

void sub_100671064(uint64_t a1)
{
  uint64_t v2 = sub_1002F8DDC();
  if (!sub_1002A8560(v2, "HRRecoveryWorkoutSessionCachedId", &__p)) {
    goto LABEL_20;
  }
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  uint64_t v3 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 136380675;
    __int16 v29 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Estimator: Found cached workout session %{private}s. Will attempt to recover.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    uint64_t v13 = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v19) = 136380675;
    *(void *)((char *)&v19 + 4) = v13;
    sqlite3_int64 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Found cached workout session %{private}s. Will attempt to recover.",  &v19,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v14);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uuid_parse((const char *)v5, uu);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  memset(v24, 0, sizeof(v24));
  __int128 v25 = 0u;
  memset(v26, 0, sizeof(v26));
  if (!sub_10029DF68(*(void **)(a1 + 80), (uint64_t)&v19) || uuid_compare(uu, v21))
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    BOOL v6 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Estimator: Cached session ID does not match most recent persisted session ID. Terminating recovery attempt.",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_19;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int16 v17 = 0;
    LODWORD(v16) = 2;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Cached session ID does not match most recent persisted session ID. Terminating recovery attempt.",  &v17,  v16);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v15);
    goto LABEL_41;
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v9 = v20;
  if (Current > *(double *)&v20 + 178.0)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    int v10 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Estimator: Recovered workout session is stale, terminating recovery.",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_19;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int16 v17 = 0;
    LODWORD(v16) = 2;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Recovered workout session is stale, terminating recovery.",  &v17,  v16);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v15);
LABEL_41:
    free(v15);
LABEL_19:
    uint64_t v7 = sub_1002F8DDC();
    sub_1002A667C(v7, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
    goto LABEL_20;
  }

  uint64_t v11 = *((void *)&v19 + 1);
  uint64_t v12 = v22;
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = v11;
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = v12;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 29_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  uuid_copy((unsigned __int8 *)(a1 + 192), uu);
  *(_DWORD *)(a1 + 156) = 2;
  if (*(void *)a1) {
    (*(void (**)(void))a1)(*(void *)(a1 + 40));
  }
LABEL_20:
}

void sub_1006715CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id *sub_100671600(id *result)
{
  if (*((_DWORD *)result + 39) != 2) {
    return result;
  }
  uint64_t v1 = (uint64_t)result;
  sub_100222B94(v47, (uint64_t)"CLHRRecoveryEstimator::estimateHeartRateRecovery", 0);
  double v3 = *(double *)(v1 + 168);
  double v2 = *(double *)(v1 + 176);
  double v25 = v2 + 178.0;
  LODWORD(v24) = 0;
  double v26 = 0.0;
  double v27 = v2 - v3;
  uint64_t v28 = *(void *)(v1 + 208);
  char v29 = *(_BYTE *)(v1 + 144);
  double v30 = v2;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }

  __int128 v33 = _Q1;
  __int128 v34 = 0u;
  uint64_t v46 = 0LL;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  char v38 = 0;
  __int16 v41 = 0;
  __int128 v40 = 0u;
  __int128 v39 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  unsigned __int8 v45 = 0;
  sub_100671D14(v1, &v24);
  int v9 = LODWORD(v24);
  if (v27 >= 360.0)
  {
    char v10 = 1;
  }

  else
  {
    char v10 = 0;
  }

  unsigned __int8 v45 = v10;
LABEL_9:
  if (!LODWORD(v24) || v45)
  {
    if (!LODWORD(v24))
    {
      double v12 = (*((double *)&v31 + 1) - *(double *)&v42) / *((double *)&v31 + 1) * *(float *)(v1 + 124);
      double v13 = v12 + -1.6;
      *(double *)&__int128 v39 = v13;
      if (v13 > 0.0)
      {
        *(double *)&__int128 v39 = v13;
      }

      sub_100671EF4(v1, (uint64_t)&v24);
    }

    double v11 = sub_100672020(v1, &v24);
    double v26 = v11;
    if (v11 >= *(double *)(v1 + 376) && v11 <= *(double *)(v1 + 384))
    {
      int v9 = LODWORD(v24);
    }

    else
    {
      int v9 = LODWORD(v24);
      if (LODWORD(v24) == 1)
      {
        int v9 = 13;
        LODWORD(v24) = 13;
      }

      unsigned __int8 v45 = 0;
    }
  }

  else
  {
    double v11 = v26;
  }

  *(void *)&__int128 v40 = 0xBFF999999999999ALL;
  uint64_t v46 = *(void *)(v1 + 320);
  __int128 v14 = v32;
  *(double *)(v1 + 216) = v11;
  *(void *)(v1 + 224) = *((void *)&v14 + 1);
  uint64_t v15 = *((void *)&v34 + 1);
  uint64_t v16 = v35;
  *(double *)(v1 + 232) = *(float *)(v1 + 124);
  *(void *)(v1 + 240) = v15;
  uint64_t v17 = *((void *)&v31 + 1);
  *(void *)(v1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = v31;
  *(void *)(v1 + 256) = v14;
  *(void *)(v1 + 272) = v39;
  *(void *)(v1 + 280) = v17;
  *(void *)(v1 + 28_Block_object_dispose(&STACK[0x7E0], 8) = v16;
  *(_DWORD *)(v1 + 264) = v9;
  unint64_t v18 = *(void *)(v1 + 208);
  if (v18 <= 0x18 && ((1LL << v18) & 0x1028000) != 0)
  {
    HIBYTE(v41) = sub_1007F6028(*(void *)(v1 + 80));
    sub_1007F3894(*(void *)(v1 + 80), v1 + 160, *(void *)(v1 + 160));
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  __int128 v19 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    int v114 = LODWORD(v24);
    double v116 = v25;
    uint64_t v20 = *(void *)(v1 + 168);
    double v118 = v26;
    uint64_t v120 = v20;
    double v122 = v30;
    uint64_t v124 = v28;
    uint64_t v128 = *((void *)&v31 + 1);
    uint64_t v126 = v31;
    uint64_t v132 = *((void *)&v32 + 1);
    uint64_t v130 = v32;
    uint64_t v136 = *((void *)&v33 + 1);
    uint64_t v134 = v33;
    uint64_t v140 = *((void *)&v34 + 1);
    uint64_t v138 = v34;
    uint64_t v144 = *((void *)&v35 + 1);
    uint64_t v142 = v35;
    uint64_t v148 = *((void *)&v36 + 1);
    uint64_t v146 = v36;
    uint64_t v152 = *((void *)&v37 + 1);
    uint64_t v150 = v37;
    uint64_t v154 = v40;
    uint64_t v158 = *((void *)&v39 + 1);
    uint64_t v156 = v39;
    int v160 = HIBYTE(v41);
    uint64_t v164 = *((void *)&v42 + 1);
    uint64_t v162 = v42;
    uint64_t v170 = *((void *)&v43 + 1);
    uint64_t v166 = v43;
    uint64_t v172 = v44;
    uint64_t v176 = *(void *)(v1 + 320);
    double v168 = *(float *)(v1 + 124);
    __int16 v159 = 1025;
    __int16 v173 = 1025;
    int v174 = v45;
    __int16 v115 = 2049;
    __int16 v117 = 2049;
    __int16 v119 = 2049;
    __int16 v121 = 2049;
    __int16 v123 = 2049;
    __int16 v125 = 2049;
    __int16 v127 = 2049;
    __int16 v129 = 2049;
    __int16 v131 = 2049;
    __int16 v133 = 2049;
    __int16 v135 = 2049;
    __int16 v137 = 2049;
    __int16 v139 = 2049;
    __int16 v141 = 2049;
    __int16 v143 = 2049;
    __int16 v145 = 2049;
    __int16 v147 = 2049;
    __int16 v149 = 2049;
    __int16 v151 = 2049;
    __int16 v153 = 2049;
    __int16 v155 = 2049;
    __int16 v157 = 2049;
    __int16 v161 = 2049;
    __int16 v163 = 2049;
    __int16 v165 = 2049;
    __int16 v167 = 2049;
    __int16 v169 = 2049;
    __int16 v171 = 2049;
    __int16 v175 = 2049;
    __int16 v177 = 2049;
    uint64_t v178 = *((void *)&v44 + 1);
    *(_DWORD *)uint64_t buf = 67182849;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Estimator,status,%{private}d,timeOfEstimate,%{private}f,hrRecovery,%{private}f,sessionStartTime,%{private}f,activi tyEndTime,%{private}f,workoutType,%{private}ld,recoveryOnsetTime,%{private}f,peakHR,%{private}f,steadyStateHR,%{pr ivate}f,lambda,%{private}f,mse,%{private}f,evs,%{private}f,tDrop,%{private}f,hrMinAdjusted,%{private}f,hrRecoveryR eference,%{private}f,recoveryLoad,%{private}f,maxRecoveryHR,%{private}f,minRecoveryHR,%{private}f,recoveryMetsMean ,%{private}f,recoveryMetsStdDev,%{private}f,biasAdjustment,%{private}f,sessionHrRecovery,%{private}f,peakHrOneMinu sFhr,%{private}f,isEligibleForHK,%{private}d,hrOneMinPostRecovery,%{private}f,hrRecoveryReferencePeak,%{private}f, hrOneMinExponential,%{private}f,hrmax,%{private}f,minHRAfterWorkoutEnd,%{private}f,maxHRAfterWorkoutEnd,%{private} f,isOtherwiseEligibleForLongitudinal,%{private}d,sevenDayRestingHR,%{private}f,oneMinusFHRAfterWorkoutEnd,%{private}f",  buf,  0x140u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    v48[1] = LODWORD(v24);
    double v50 = v25;
    uint64_t v22 = *(void *)(v1 + 168);
    double v52 = v26;
    uint64_t v54 = v22;
    double v56 = v30;
    uint64_t v58 = v28;
    uint64_t v62 = *((void *)&v31 + 1);
    uint64_t v60 = v31;
    uint64_t v66 = *((void *)&v32 + 1);
    uint64_t v64 = v32;
    uint64_t v70 = *((void *)&v33 + 1);
    uint64_t v68 = v33;
    uint64_t v74 = *((void *)&v34 + 1);
    uint64_t v72 = v34;
    uint64_t v78 = *((void *)&v35 + 1);
    uint64_t v76 = v35;
    uint64_t v82 = *((void *)&v36 + 1);
    uint64_t v80 = v36;
    uint64_t v86 = *((void *)&v37 + 1);
    uint64_t v84 = v37;
    uint64_t v88 = v40;
    uint64_t v92 = *((void *)&v39 + 1);
    uint64_t v90 = v39;
    int v94 = HIBYTE(v41);
    uint64_t v98 = *((void *)&v42 + 1);
    uint64_t v96 = v42;
    uint64_t v104 = *((void *)&v43 + 1);
    uint64_t v100 = v43;
    uint64_t v106 = v44;
    uint64_t v110 = *(void *)(v1 + 320);
    double v102 = *(float *)(v1 + 124);
    __int16 v93 = 1025;
    __int16 v107 = 1025;
    int v108 = v45;
    __int16 v49 = 2049;
    __int16 v51 = 2049;
    __int16 v53 = 2049;
    __int16 v55 = 2049;
    __int16 v57 = 2049;
    __int16 v59 = 2049;
    __int16 v61 = 2049;
    __int16 v63 = 2049;
    __int16 v65 = 2049;
    __int16 v67 = 2049;
    __int16 v69 = 2049;
    __int16 v71 = 2049;
    __int16 v73 = 2049;
    __int16 v75 = 2049;
    __int16 v77 = 2049;
    __int16 v79 = 2049;
    __int16 v81 = 2049;
    __int16 v83 = 2049;
    __int16 v85 = 2049;
    __int16 v87 = 2049;
    __int16 v89 = 2049;
    __int16 v91 = 2049;
    __int16 v95 = 2049;
    __int16 v97 = 2049;
    __int16 v99 = 2049;
    __int16 v101 = 2049;
    __int16 v103 = 2049;
    __int16 v105 = 2049;
    __int16 v109 = 2049;
    __int16 v111 = 2049;
    uint64_t v112 = *((void *)&v44 + 1);
    v48[0] = 67182849;
    __int128 v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,status,%{private}d,timeOfEstimate,%{private}f,hrRecovery,%{private}f,sessionStartTime,%{pr ivate}f,activityEndTime,%{private}f,workoutType,%{private}ld,recoveryOnsetTime,%{private}f,peakHR,%{ private}f,steadyStateHR,%{private}f,lambda,%{private}f,mse,%{private}f,evs,%{private}f,tDrop,%{priva te}f,hrMinAdjusted,%{private}f,hrRecoveryReference,%{private}f,recoveryLoad,%{private}f,maxRecoveryH R,%{private}f,minRecoveryHR,%{private}f,recoveryMetsMean,%{private}f,recoveryMetsStdDev,%{private}f, biasAdjustment,%{private}f,sessionHrRecovery,%{private}f,peakHrOneMinusFhr,%{private}f,isEligibleFor HK,%{private}d,hrOneMinPostRecovery,%{private}f,hrRecoveryReferencePeak,%{private}f,hrOneMinExponent ial,%{private}f,hrmax,%{private}f,minHRAfterWorkoutEnd,%{private}f,maxHRAfterWorkoutEnd,%{private}f, isOtherwiseEligibleForLongitudinal,%{private}d,sevenDayRestingHR,%{private}f,oneMinusFHRAfterWorkoutEnd,%{private}f",  v48,  320);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHRRecoveryEstimator::estimateHeartRateRecovery()", "%s\n", v23);
  }

  uint64_t v21 = *(void (**)(double *, void))(v1 + 16);
  if (v21) {
    v21(&v24, *(void *)(v1 + 40));
  }
  return sub_1001BA1BC(v47);
}

void sub_100671CF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, id a47)
{
}

void sub_100671D14(uint64_t a1, double *a2)
{
  double v11 = 0LL;
  double v12 = 0LL;
  uint64_t v13 = 0LL;
  std::string __p = 0LL;
  int v9 = 0LL;
  uint64_t v10 = 0LL;
  if (sub_1006724C8(a1, (uint64_t)a2, (uint64_t *)&v11, (uint64_t)&__p))
  {
    int v4 = operator new(1uLL);
    sub_100C17698();
    char v5 = sub_100C1769C(v4, (uint64_t)a2, (uint64_t *)&v11, (__int128 **)&__p);
    sub_1006728E8(a1, a2, &v11);
    if ((v5 & 1) != 0)
    {
      BOOL v6 = operator new(1uLL);
      nullsub_10(v6);
      if ((sub_10104EDA4((uint64_t)v6, (uint64_t)a2, (uint64_t *)&v11, (uint64_t *)&__p) & 1) != 0)
      {
        uint64_t v7 = operator new(1uLL);
        nullsub_10(v7);
        if (sub_1003D7490((uint64_t)v7, (uint64_t)a2, (uint64_t *)&v11))
        {
          sub_1006729DC(a1, a2, &v11);
          a2[14] = *(double *)(a1 + 320) * 0.97 + 4.03 + *(float *)(a1 + 124) * 0.21 + *(float *)(a1 + 116) * 0.1;
        }

        operator delete(v7);
      }

      operator delete(v6);
    }

    operator delete(v4);
  }

  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }

  if (v11)
  {
    double v12 = v11;
    operator delete(v11);
  }

void sub_100671E80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100671EF4(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(result + 152))
  {
    int v2 = 10;
    goto LABEL_7;
  }

  if (*(double *)(a2 + 24) < 360.0)
  {
    int v2 = 2;
LABEL_7:
    *(_DWORD *)a2 = v2;
    *(_BYTE *)(a2 + 264) = 0;
    return result;
  }

  if (*(double *)(a2 + 200) < *(double *)(result + 360))
  {
    int v2 = 3;
    goto LABEL_7;
  }

  if (*(_BYTE *)(a2 + 208))
  {
    int v3 = 16;
  }

  else
  {
    double v4 = *(double *)(a2 + 64);
    if (*(double *)(a2 + 136) - v4 <= *(double *)(result + 328))
    {
      if (*(double *)(a2 + 184) <= *(double *)(result + 344))
      {
        int v3 = 14;
      }

      else if (v4 - *(double *)(a2 + 72) <= *(double *)(result + 352))
      {
        int v3 = 15;
      }

      else
      {
        double v5 = *(double *)(a2 + 96);
        if (v5 == -1.0 || v5 < *(double *)(result + 368))
        {
          int v3 = 9;
        }

        else
        {
          double v6 = *(double *)(a2 + 176);
          if (v6 >= *(double *)(result + 376) && v6 <= *(double *)(result + 384))
          {
            else {
              int v3 = 18;
            }
          }

          else
          {
            int v3 = 13;
          }
        }
      }
    }

    else
    {
      int v3 = 11;
    }
  }

  *(_DWORD *)a2 = v3;
  return result;
}

double sub_100672020(uint64_t a1, double *a2)
{
  std::string __p = 0LL;
  __int128 v23 = 0LL;
  uint64_t v24 = 0LL;
  sub_1007F3E78(*(void *)(a1 + 80), (char **)&__p, 1, a2[1] + -7257600.0);
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  double v4 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134283521;
    unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (_BYTE *)__p) >> 5);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Estimator,Num of recent estimates:%{private}lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    int v25 = 134283521;
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (_BYTE *)__p) >> 5);
    uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "Estimator,Num of recent estimates:%{private}lu",  &v25,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLHRRecoveryEstimator::getLongitudinalEstimate(HRRecoveryResult &)",  "%s\n",  v20);
  }

  int v5 = *(_DWORD *)a2;
  double v6 = 0.0;
  if (*(_DWORD *)a2 == 1) {
    double v7 = 1.0;
  }
  else {
    double v7 = 0.0;
  }
  if (v5 == 1) {
    double v8 = a2[22];
  }
  else {
    double v8 = 0.0;
  }
  int v9 = (double *)__p;
  uint64_t v10 = v23;
  if (__p != v23)
  {
    do
    {
      if (v9[14] <= 0.0) {
        double v11 = v9[7];
      }
      else {
        double v11 = v9[14];
      }
      if (v11 >= *(double *)(a1 + 376) && v11 <= *(double *)(a1 + 384))
      {
        double v16 = a2[1] - v9[1];
        double v17 = exp2(v16 / 86400.0 / -28.0);
        double v8 = v8 + v17 * v11;
        double v7 = v7 + v17;
        if (v16 >= v6) {
          double v18 = v6;
        }
        else {
          double v18 = v16;
        }
        if (v6 == 0.0) {
          double v6 = v16;
        }
        else {
          double v6 = v18;
        }
      }

      else
      {
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        double v12 = (os_log_s *)qword_101934778;
        if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v13 = *((void *)v9 + 1);
          *(_DWORD *)uint64_t buf = 134283777;
          unint64_t v30 = v13;
          __int16 v31 = 2049;
          double v32 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Estimator: Excluding historical estimate from smoothing (startTime:%{private}f, sessionEstimate:%{private}f)",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          unint64_t v14 = *((void *)v9 + 1);
          int v25 = 134283777;
          unint64_t v26 = v14;
          __int16 v27 = 2049;
          double v28 = v11;
          LODWORD(v21) = 22;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "Estimator: Excluding historical estimate from smoothing (startTime:%{private}f, sessionEstimate:%{private}f)",  &v25,  v21);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLHRRecoveryEstimator::getLongitudinalEstimate(HRRecoveryResult &)",  "%s\n",  v15);
        }
      }

      v9 += 20;
    }

    while (v9 != v10);
    int v5 = *(_DWORD *)a2;
  }

  if (v5 != 1 && (v6 > 2419200.0 || v6 == 0.0)) {
    *((_BYTE *)a2 + 264) = 0;
  }
  else {
    double v8 = v8 / v7;
  }
  if (__p)
  {
    __int128 v23 = (double *)__p;
    operator delete(__p);
  }

  return v8;
}

void sub_1006724A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006724C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void, uint64_t, double, double))(**(void **)(a1 + 64) + 48LL))( *(void *)(a1 + 64),  a4,  *(double *)(a1 + 168),  *(double *)(a2 + 8)) == 2)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    double v7 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Estimator: Failed to fetch input work rates for estimation",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      LOWORD(__p) = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: Failed to fetch input work rates for estimation",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLHRRecoveryEstimator::getInputs(HRRecoveryResult &, std::vector<HRRecoveryInputHR> &, std::vector<HRRecoveryInputWR> &)",  "%s\n",  v21);
    }

    BOOL v8 = 0LL;
    *(_DWORD *)a2 = 4;
  }

  else
  {
    std::string __p = 0LL;
    int v25 = 0LL;
    uint64_t v26 = 0LL;
    int v9 = (*(uint64_t (**)(void, void **, double, double))(**(void **)(a1 + 48) + 48LL))( *(void *)(a1 + 48),  &__p,  *(double *)(a1 + 168),  *(double *)(a2 + 8));
    BOOL v8 = v9 != 2;
    if (v9 == 2)
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101848228);
      }
      __int128 v19 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Estimator: Failed to fetch input heart rates for estimation",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        v23[0] = 0;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Estimator: Failed to fetch input heart rates for estimation",  v23,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLHRRecoveryEstimator::getInputs(HRRecoveryResult &, std::vector<HRRecoveryInputHR> &, std::vector<HRRecoveryInputWR> &)",  "%s\n",  v22);
      }

      *(_DWORD *)a2 = 4;
    }

    else
    {
      uint64_t v10 = (double *)__p;
      double v11 = v25;
      *(void *)uint64_t buf = a3;
      if (__p != v25)
      {
        do
        {
          if (v10[3] >= 0.6) {
            sub_1000EAB6C((void ***)buf, v10);
          }
          v10 += 4;
        }

        while (v10 != v11);
      }

      double v12 = *(double *)(a1 + 176) + -60.0;
      uint64_t v13 = *a3;
      uint64_t v14 = a3[1];
      double v15 = 0.0;
      double v16 = 0.0;
      if (*a3 != v14)
      {
        int v17 = 0;
        do
        {
          v13 += 32LL;
        }

        while (v13 != v14);
        double v16 = (double)v17;
      }

      double v18 = *(double *)(a2 + 8);
      if (v18 > v12) {
        double v15 = v16 / (v18 - v12);
      }
      *(double *)(a2 + 200) = v15;
    }

    if (__p)
    {
      int v25 = (double *)__p;
      operator delete(__p);
    }
  }

  return v8;
}

void sub_1006728BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1006728E8(uint64_t a1, double *a2, void *a3)
{
  int v3 = (double *)a3[1];
  if ((double *)*a3 == v3)
  {
    double v8 = a2[31];
  }

  else
  {
    double v4 = a2[6];
    double v5 = a2[30];
    double v6 = a2[28];
    double v7 = a2[15];
    double v8 = a2[31];
    int v9 = (double *)(*a3 + 16LL);
    do
    {
      double v10 = *(v9 - 1);
      if (v10 > v4 && v10 < v4 + 178.0)
      {
        if (v6 == 0.0)
        {
          double v6 = *v9;
          a2[28] = *v9;
        }

        if (v10 > v4 + 60.0 && v7 == 0.0)
        {
          double v7 = *v9;
          a2[15] = *v9;
        }

        if (v8 < *v9) {
          double v8 = *v9;
        }
        a2[31] = v8;
        double v12 = v9;
        if (v5 != 0.0)
        {
          if (*v9 >= v5) {
            double v12 = a2 + 30;
          }
          else {
            double v12 = v9;
          }
        }

        double v5 = *v12;
        a2[30] = *v12;
      }

      uint64_t v13 = v9 + 2;
      v9 += 4;
    }

    while (v13 != v3);
  }

  double v14 = a2[8];
  if (v14 < v8) {
    double v14 = v8;
  }
  double result = 1.0 - (*(float *)(a1 + 124) - v14) / (*(float *)(a1 + 124) - *(double *)(a1 + 320));
  a2[32] = result;
  return result;
}

uint64_t sub_1006729DC(uint64_t a1, double *a2, void *a3)
{
  double v4 = a2[13];
  double v5 = a2[7];
  double v6 = *(float *)(a1 + 124);
  double v7 = v6 - *(double *)(a1 + 320);
  double v26 = 0.0;
  __int16 v27 = off_10182B230;
  memset(v29, 0, sizeof(v29));
  v31[0] = 0LL;
  v31[1] = 0LL;
  unint64_t v30 = v31;
  int v28 = 3;
  double v8 = (double *)a3[1];
  if ((double *)*a3 == v8)
  {
    uint64_t v22 = 0LL;
  }

  else
  {
    double v10 = v4 + 60.0;
    double v11 = v5 + 178.0;
    double v12 = v5 + 140.0;
    uint64_t v13 = (double *)(*a3 + 16LL);
    do
    {
      double v14 = *(v13 - 1);
      if (v14 > a2[13])
      {
        double v15 = a2[17];
        if (v15 < *v13) {
          double v15 = *v13;
        }
        a2[17] = v15;
        if (v14 < v12)
        {
          sub_1002104CC((uint64_t)&v27, v13);
          if (sub_100358478(&v27, 2, &v26))
          {
            double v16 = a2[18];
            if (v26 < v16 || v16 == 0.0) {
              double v16 = v26;
            }
            a2[18] = v16;
          }
        }

        double v18 = *(v13 - 1);
        if (v18 > v10 && a2[27] == 0.0) {
          a2[27] = *v13;
        }
        if (v18 < v11) {
          a2[16] = a2[16] + (*v13 - *(double *)(a1 + 320)) / v7;
        }
      }

      __int128 v19 = v13 + 2;
      v13 += 4;
    }

    while (v19 != v8);
    double v20 = *(double *)(a1 + 320);
    float v21 = *(float *)(a1 + 124);
    uint64_t v22 = (void *)v31[0];
    double v6 = v21;
    double v7 = v6 - v20;
  }

  double v23 = a2[8];
  double v24 = a2[9];
  a2[23] = 1.0 - (v6 - v23) / v7;
  a2[29] = v24 + (v23 - v24) * exp(a2[10] * -60.0);
  __int16 v27 = off_10182B230;
  sub_100008390((uint64_t)&v30, v22);
  return sub_100210578(v29);
}

void sub_100672BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100672BF4(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

uint64_t sub_100672C20(int *a1)
{
  int v1 = *a1;
  if (*a1 <= 255)
  {
    if (v1 == 128) {
      int v5 = 6;
    }
    else {
      int v5 = 0;
    }
    if (v1 == 64) {
      unsigned int v6 = 8;
    }
    else {
      unsigned int v6 = v5;
    }
    if (v1 == 32) {
      int v7 = 41;
    }
    else {
      int v7 = 0;
    }
    if (v1 == 16) {
      int v8 = 4;
    }
    else {
      int v8 = v7;
    }
    if (v1 <= 63) {
      unsigned int v6 = v8;
    }
    if (v1 == 12) {
      int v9 = 7;
    }
    else {
      int v9 = 0;
    }
    if (v1 == 4) {
      unsigned int v10 = 3;
    }
    else {
      unsigned int v10 = v9;
    }
    if (v1 == 2) {
      int v11 = 2;
    }
    else {
      int v11 = 0;
    }
    if (v1 == 1) {
      int v11 = 1;
    }
    if (v1 <= 3) {
      unsigned int v10 = v11;
    }
    BOOL v14 = __OFSUB__(v1, 15);
    BOOL v12 = v1 == 15;
    BOOL v13 = v1 - 15 < 0;
    goto LABEL_54;
  }

  if (v1 < 12288)
  {
    if (v1 == 0x2000) {
      int v15 = 52;
    }
    else {
      int v15 = 0;
    }
    if (v1 == 4096) {
      unsigned int v6 = 5;
    }
    else {
      unsigned int v6 = v15;
    }
    if (v1 == 512) {
      int v16 = 11;
    }
    else {
      int v16 = 0;
    }
    if (v1 == 256) {
      unsigned int v10 = 10;
    }
    else {
      unsigned int v10 = v16;
    }
    BOOL v14 = __OFSUB__(v1, 4095);
    BOOL v12 = v1 == 4095;
    BOOL v13 = v1 - 4095 < 0;
LABEL_54:
    if (v13 ^ v14 | v12) {
      return v10;
    }
    else {
      return v6;
    }
  }

  if (v1 < 196608)
  {
    if (v1 == 12288 || v1 == 0x4000) {
      return 56LL;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    if (v1 == 0x200000) {
      int v2 = 62;
    }
    else {
      int v2 = 0;
    }
    if (v1 == 0x100000) {
      unsigned int v3 = 61;
    }
    else {
      unsigned int v3 = v2;
    }
    if (v1 == 196608) {
      return 41LL;
    }
    else {
      return v3;
    }
  }

unint64_t sub_100672D30(unint64_t result)
{
  if (result <= 0x1A && ((1LL << result) & 0x6000001) != 0) {
    LOBYTE(result) = 0;
  }
  return result;
}

uint64_t sub_100672D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = sub_100672C20((int *)a1);
  int v4 = sub_100672C20((int *)(a1 + 24));
  int v5 = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x7E0], 8) = v4;
  *(_DWORD *)(a2 + 92) = v5;
  *(double *)(a2 + 80) = (double)*(unint64_t *)(a1 + 16) * 0.000001;
  int v6 = *(unsigned __int8 *)(a1 + 4);
  BOOL v7 = v6 == 3;
  if (v6 == 3) {
    int v6 = 2;
  }
  *(_BYTE *)(a2 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v7;
  *(_DWORD *)(a2 + 4) = v6;
  int v8 = *(unsigned __int8 *)(a1 + 6);
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 5);
  *(_DWORD *)(a2 + 16) = v8;
  float v9 = *(float *)(a1 + 84);
  *(_DWORD *)(a2 + 20) = v9 >= 0.75;
  *(double *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 52) = *(unsigned __int8 *)(a1 + 11);
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a2 + 96) & 0xE0 | *(_BYTE *)(a1 + 36) & 0x1F;
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a2 + 64) = v10;
  *(_WORD *)(a2 + 74) = *(_WORD *)(a1 + 46);
  uint64_t result = sub_100672C20((int *)(a1 + 56));
  *(void *)(a2 + 120) = *(void *)(a1 + 72);
  *(_DWORD *)(a2 + 100) = *(unsigned __int8 *)(a1 + 37);
  *(_DWORD *)(a2 + 104) = result;
  else {
    int v12 = 0;
  }
  *(_DWORD *)(a2 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v12;
  return result;
}

double sub_100672E64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 6_Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)(a1 + 148);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 40) = *(void *)a1;
  *(void *)(a2 + 80) = v4;
  double result = *(double *)(a1 + 16);
  *(double *)(a2 + 112) = result;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 144);
  return result;
}

void sub_100672EB8(int *a1, int *a2, uint64_t a3)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101848248);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a1;
    float v8 = *(float *)a2;
    int v9 = a2[1];
    int v10 = a1[3];
    int v11 = a2[3];
    int v12 = a2[4];
    double v13 = *((float *)a2 + 9);
    int v14 = a2[13];
    uint64_t v15 = *((void *)a2 + 7);
    uint64_t v16 = *((void *)a2 + 10);
    uint64_t v17 = *((void *)a2 + 5);
    int v18 = *((unsigned __int8 *)a2 + 32);
    int v19 = a2[22];
    int v20 = a2[23];
    unsigned int v21 = *((unsigned __int8 *)a2 + 96);
    uint64_t v22 = a3;
    LODWORD(a3) = a2[16];
    int v23 = a2[26];
    uint64_t v25 = *((void *)a2 + 14);
    uint64_t v24 = *((void *)a2 + 15);
    int v26 = a2[32];
    *(_DWORD *)uint64_t buf = 67115266;
    int v58 = v7;
    __int16 v59 = 1024;
    float v60 = v8;
    __int16 v61 = 1024;
    int v62 = v9;
    __int16 v63 = 1024;
    int v64 = v10;
    __int16 v65 = 1024;
    int v66 = v11;
    __int16 v67 = 1024;
    int v68 = v12;
    __int16 v69 = 2048;
    double v70 = v13;
    __int16 v71 = 1024;
    int v72 = v14;
    __int16 v73 = 2048;
    uint64_t v74 = v15;
    __int16 v75 = 2048;
    uint64_t v76 = v16;
    __int16 v77 = 2048;
    uint64_t v78 = v17;
    __int16 v79 = 1024;
    int v80 = v18;
    __int16 v81 = 1024;
    int v82 = v19;
    __int16 v83 = 1024;
    int v84 = v20;
    __int16 v85 = 1024;
    int v86 = v21 & 1;
    __int16 v87 = 1024;
    int v88 = (v21 >> 2) & 1;
    __int16 v89 = 1024;
    int v90 = (v21 >> 3) & 1;
    __int16 v91 = 1024;
    int v92 = (v21 >> 4) & 1;
    __int16 v93 = 1024;
    int v94 = (v21 >> 1) & 1;
    __int16 v95 = 1024;
    int v96 = a3;
    HIDWORD(a3) = HIDWORD(v22);
    __int16 v97 = 1024;
    int v98 = v23;
    __int16 v99 = 2048;
    uint64_t v100 = v25;
    __int16 v101 = 2048;
    uint64_t v102 = v24;
    __int16 v103 = 1024;
    int v104 = v26;
    __int16 v105 = 2080;
    uint64_t v106 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f ,timestamp,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,motionHint,%d,bbHint,%d,wifiHint,%d,btHint,%d,gpsHint, %d,vehicleType,%d,tag,workoutDetectionType,%d,workoutDetectionTime,%f,workoutEscalationTime,%lld, YouthMotionState, %d, %s\n",  buf,  0xB4u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101848248);
    }
    float v27 = *(float *)a2;
    int v28 = a2[1];
    int v29 = a1[3];
    int v30 = a2[4];
    double v31 = *((float *)a2 + 9);
    int v32 = a2[13];
    double v33 = *((double *)a2 + 7);
    uint64_t v34 = *((void *)a2 + 10);
    uint64_t v35 = *((void *)a2 + 5);
    int v36 = *((unsigned __int8 *)a2 + 32);
    int v37 = a2[23];
    unsigned int v38 = *((unsigned __int8 *)a2 + 96);
    int v39 = a2[16];
    uint64_t v40 = *((void *)a2 + 14);
    uint64_t v41 = *((void *)a2 + 15);
    int v42 = a2[32];
    LOWORD(v45) = 1024;
    HIWORD(v45) = LOWORD(v27);
    LOWORD(v46) = HIWORD(v29);
    HIWORD(v46) = 1024;
    LOWORD(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 2) = v30;
    HIWORD(v47) = 2048;
    LOWORD(v4_Block_object_dispose(&STACK[0x7E0], 8) = 1024;
    *(_DWORD *)((char *)&v48 + 2) = v32;
    HIWORD(v4_Block_object_dispose(&STACK[0x7E0], 8) = 2048;
    *(_WORD *)__int16 v49 = 2048;
    *(void *)&v49[2] = v34;
    *(_WORD *)&v49[10] = 2048;
    LOWORD(v50) = HIWORD(v36);
    HIWORD(v50) = 1024;
    LOWORD(v51) = 1024;
    HIWORD(v51) = v37;
    *(_DWORD *)double v52 = (v38 >> 2) & 1;
    *(_WORD *)&v52[4] = 1024;
    *(_WORD *)__int16 v53 = 1024;
    *(_DWORD *)&v53[2] = (v38 >> 4) & 1;
    LOWORD(v54) = HIWORD(v39);
    HIWORD(v54) = 1024;
    *(_WORD *)__int16 v55 = 2048;
    *(void *)&v55[2] = v40;
    *(_WORD *)&v55[10] = 2048;
    *(void *)&v55[12] = v41;
    *(_WORD *)&v55[20] = 1024;
    *(_DWORD *)&v55[22] = v42;
    *(_WORD *)&v55[26] = 2080;
    LODWORD(v56) = HIDWORD(a3);
    __int128 v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,% f,startTime,%f,timestamp,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,motionHint,%d,bbHint,%d,wi fiHint,%d,btHint,%d,gpsHint,%d,vehicleType,%d,tag,workoutDetectionType,%d,workoutDetectionTime,%f,wo rkoutEscalationTime,%lld, YouthMotionState, %d, %s\n",  &v44,  180,  67115266,  v45,  v28,  v46,  v47,  LODWORD(v31),  v48,  v33,  *(double *)v49,  *(_DWORD *)&v49[8],  HIDWORD(v35),  v50,  v51,  v38 & 1,  *(_DWORD *)&v52[2],  *(_DWORD *)v53,  (v38 >> 1) & 1,  v54,  *(_DWORD *)v55,  *(double *)&v55[8],  *(void *)&v55[16],  *(_DWORD *)&v55[24],  v56);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionStateUtils::logChange(const CLMotionActivity &, const CLMotionActivity &, const char *)",  "%s\n",  v43);
  }

uint64_t sub_1006732DC(uint64_t a1, double a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (a2 >= 0.0 && v2 == 4) {
    return 2LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100673310(unsigned int a1)
{
  if (a1 >= 4) {
    return 0;
  }
  else {
    return a1;
  }
}

void sub_100673320(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10067334C(uint64_t a1)
{
  if (a1) {
    sub_100676640(a1 - 128);
  }
  else {
    sub_100676640(0LL);
  }
}

id sub_10067335C(uint64_t a1)
{
  if (a1) {
    return sub_100676B90(a1 - 128);
  }
  else {
    return sub_100676B90(0LL);
  }
}

void sub_10067336C(uint64_t a1, _BYTE *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100676ED4(v2, a2);
}

void sub_10067337C(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1 - 128;
  }
  else {
    uint64_t v1 = 0LL;
  }
  if (*(_BYTE *)(v1 + 146)) {
    sub_100674570(v1);
  }
}

id sub_100673398(uint64_t a1)
{
  if (a1) {
    return sub_100677080(a1 - 128);
  }
  else {
    return sub_100677080(0LL);
  }
}

id sub_1006733A8(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_1006772B4(v2, a2);
}

id sub_1006733B8(uint64_t a1)
{
  if (a1) {
    return sub_10067745C(a1 - 128);
  }
  else {
    return sub_10067745C(0LL);
  }
}

void sub_1006733C8(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_1006775FC(v2, a2);
}

uint64_t sub_1006733D8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D2F3A8(a1, a2);
  *(void *)(v3 + 12_Block_object_dispose(&STACK[0x7E0], 8) = &unk_101848268;
  *(void *)(v3 + 1++*(_DWORD *)(result + 36) = 12LL;
  *(_WORD *)(v3 + 144) = 512;
  *(void *)uint64_t v3 = off_101848398;
  *(_BYTE *)(v3 + 146) = 0;
  id v4 = [*(id *)(v3 + 40) newTimer];
  *(void *)(a1 + 160) = 0x40AC200000000000LL;
  int v5 = (uint64_t *)(a1 + 160);
  *(void *)(a1 + 152) = v4;
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 184) = 0LL;
  uint64_t v7 = a1 + 184;
  *(void *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  if (*(void *)(a1 + 40))
  {
    BOOL v30 = 0;
    uint64_t v8 = sub_1002F8DDC();
    if (sub_1002A6F64(v8, "SavedInitialMotionCalsToWatch", &v30))
    {
      uint64_t v9 = sub_1002F8DDC();
      sub_1002A667C(v9, "SavedInitialMotionCalsToWatch", 0xFFFFFFFFLL);
    }

    uint64_t v10 = sub_1006E27E8();
    sub_100413284(v10, buf);
    sub_1002A82BC(*(uint64_t *)&buf[0], "MotionSyncFireIntervalInSeconds", (void *)(a1 + 160));
    int v11 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
    if (*((void *)&buf[0] + 1))
    {
      int v12 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    int v14 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *v5;
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v26 = *v5;
      int v31 = 134217984;
      uint64_t v32 = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.",  COERCE_DOUBLE(&v31));
      int v28 = (char *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)",  "%s\n",  v27);
    }

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    void v29[2] = sub_100673898;
    _OWORD v29[3] = &unk_10181D3D0;
    v29[4] = a1;
    [*(id *)(a1 + 152) setHandler:v29];
    sub_100468458((uint64_t)sub_100673D64, a1, *(void **)(a1 + 32), buf);
    uint64_t v16 = *(void *)&buf[0];
    *(void *)&buf[0] = 0LL;
    uint64_t v17 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      uint64_t v18 = *(void *)&buf[0];
      *(void *)&buf[0] = 0LL;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
      }
    }

    [*(id *)(*(void *)(a1 + 192) + 16) register:*(void *)(*(void *)(a1 + 192) + 8) forNotification:1 registrationInfo:0];
    sub_100E18F18((uint64_t)sub_100673F3C, a1, *(void **)(a1 + 32), buf);
    uint64_t v19 = *(void *)&buf[0];
    *(void *)&buf[0] = 0LL;
    uint64_t v20 = *(void *)v7;
    *(void *)uint64_t v7 = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
      uint64_t v21 = *(void *)&buf[0];
      *(void *)&buf[0] = 0LL;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
    }

    [*(id *)(*(void *)v7 + 16) register:*(void *)(*(void *)v7 + 8) forNotification:2 registrationInfo:0];
    sub_1003A09BC((uint64_t)sub_1006740FC, a1, *(void **)(a1 + 32), buf);
    uint64_t v22 = *(void *)&buf[0];
    *(void *)&buf[0] = 0LL;
    uint64_t v23 = *(void *)(a1 + 200);
    *(void *)(a1 + 200) = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
      uint64_t v24 = *(void *)&buf[0];
      *(void *)&buf[0] = 0LL;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      }
    }

    [*(id *)(*(void *)(a1 + 200) + 16) register:*(void *)(*(void *)(a1 + 200) + 8) forNotification:5 registrationInfo:0];
  }

  return a1;
}

void sub_100673804(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 192);
  *(void *)(v1 + 192) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *v2;
  *uint64_t v2 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_100D2FE80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100673898(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timer fired.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Timer fired.",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100673A30(v1);
}

uint64_t sub_100673A30(uint64_t a1)
{
  uint64_t result = sub_100D307B4(*(void **)(a1 + 168));
  if ((result & 0x80000000) == 0)
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    uint64_t v3 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = __p;
      sub_100D30214(*(void **)(a1 + 168), (std::stringbuf::string_type *)__p);
      if (SBYTE3(v21) < 0) {
        uint64_t v4 = *(_BYTE **)__p;
      }
      int v5 = sub_100D307B4(*(void **)(a1 + 168));
      double v6 = sub_100D30858(*(void **)(a1 + 168));
      *(_DWORD *)uint64_t buf = 136315650;
      uint64_t v23 = v4;
      __int16 v24 = 1024;
      int v25 = v5;
      __int16 v26 = 2048;
      double v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s, current version, %d, timestamp, %lf",  buf,  0x1Cu);
      if (SBYTE3(v21) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v9 = qword_101934608;
      uint64_t v10 = &v16;
      sub_100D30214(*(void **)(a1 + 168), &v16);
      if ((v16.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v10 = (std::stringbuf::string_type *)v16.__r_.__value_.__r.__words[0];
      }
      int v11 = sub_100D307B4(*(void **)(a1 + 168));
      double v12 = sub_100D30858(*(void **)(a1 + 168));
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 2048;
      double v21 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  1LL,  "%s, current version, %d, timestamp, %lf",  __p,  28,  v15[0]);
      int v14 = v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::sendMotionCalsToCompanion()", "%s\n", v14);
    }

    uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 168)),  1LL,  0LL);
    id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
    *(void *)&v15[0] = _NSConcreteStackBlock;
    *(void *)&v15[1] = 3221225472LL;
    *(void *)&v15[2] = sub_1006757A4;
    *(void *)&void v15[3] = &unk_101840D20;
    *(void *)&v15[4] = v7;
    return (uint64_t)[v8 doAsync:v15];
  }

  return result;
}

void sub_100673D2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100673D64(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101848500);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStoreWatch::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStoreWatch::onMotionStateMediatorNotification, event:%{public, location :escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100675CD0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100673F1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100673F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101848500);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    int v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStoreWatch::onUserInfoNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    double v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStoreWatch::onUserInfoNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_100675B2C(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006740DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006740FC(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101848500);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStoreWatch::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStoreWatch::onCompanionNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100675FE4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006742B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006742D8(uint64_t a1)
{
  *(void *)a1 = off_101848398;

  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  uint64_t v2 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }

  *(void *)(a1 + 152) = 0LL;
  uint64_t v5 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return sub_100D2FE80(a1);
}

void sub_1006743BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1006742D8(a1);
  operator delete(v1);
}

uint64_t sub_1006743D0(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unlocked", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, qword_101934608, 2LL, "unlocked", v6, 2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionSyncStoreWatch::deviceUnlocked()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100CCCC8C(a1 + 128, 1, (uint64_t)buf);
}

void sub_100674570(uint64_t a1)
{
  *(_BYTE *)(a1 + 146) = 1;
  if ((sub_100D2FFFC(a1) & 1) != 0)
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    uint64_t v2 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      int v3 = sub_100D307B4(*(void **)(a1 + 168));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Begin persisting calibrations to disk on watch, current version, %d.",  (uint8_t *)buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v31 = qword_101934608;
      int v32 = sub_100D307B4(*(void **)(a1 + 168));
      LODWORD(v55.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v55.__r_.__value_.__r.__words[0]) = v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v31,  2LL,  "Begin persisting calibrations to disk on watch, current version, %d.",  &v55);
      uint64_t v34 = (std::stringbuf::string_type *)v33;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    std::string::size_type v5 = CMNatalimeterSetUserVo2max;
    std::string::size_type v50 = CMNatalimeterSetUserPal;
    buf[0].__r_.__value_.__r.__words[0] = CMNatalimeterSetUserPal;
    buf[0].__r_.__value_.__l.__size_ = CMNatalimeterSetUserVo2max;
    std::string::size_type v49 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    buf[0].__r_.__value_.__l.__cap_ = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 3LL);
    id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v51,  v58,  16LL);
    if (v7)
    {
      uint64_t v8 = *(void *)v52;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void *)(*((void *)&v51 + 1) + 8LL * (void)i);
          if ([*(id *)(a1 + 168) objectForKeyedSubscript:v10])
          {
            objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v10), "floatValue");
            objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"),  v10);
          }
        }

        id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v51,  v58,  16LL);
      }

      while (v7);
    }

    id v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier");
    objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v5), "floatValue");
    if (v12 > 0.0) {
      [v11 setActiveVo2maxOverride:1];
    }
    if ([v4 objectForKeyedSubscript:v5]
      && (objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v5), "floatValue"), v13 == 0.0))
    {
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      __int16 v14 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Persisted a reset Motion Cals",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_1018484E0);
        }
        LOWORD(v55.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "Persisted a reset Motion Cals",  &v55,  2);
        double v47 = (std::stringbuf::string_type *)v46;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      [*(id *)(a1 + 168) removeObjectForKey:v5];
      buf[0].__r_.__value_.__r.__words[0] = v50;
      buf[0].__r_.__value_.__l.__size_ = v5;
      buf[0].__r_.__value_.__l.__cap_ = v49;
      objc_msgSend( v11,  "resetUserProfileForKeys:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 3));
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLSwimNotifier"),  "clearCalibrations");
    }

    else
    {
      [v11 setUserProfile:v4 merge:0];
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      double v21 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = objc_msgSend(objc_msgSend(v4, "description"), "UTF8String");
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Finished setting user profile on watch = %s",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_1018484E0);
        }
        uint64_t v42 = qword_101934608;
        id v43 = objc_msgSend(objc_msgSend(v4, "description"), "UTF8String");
        LODWORD(v55.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v42,  0LL,  "Finished setting user profile on watch = %s",  (const char *)&v55);
        int v45 = (std::stringbuf::string_type *)v44;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v44);
        if (v45 != buf) {
          free(v45);
        }
      }
    }

    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"])
    {
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "setRawSpeedToKValueBins:",  objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", @"RawSpeedToKValueTable"));
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v23 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Persisted raw speed to kValue bins",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_1018484E0);
        }
        LOWORD(v55.__r_.__value_.__l.__data_) = 0;
        LODWORD(v4_Block_object_dispose(&STACK[0x7E0], 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "Persisted raw speed to kValue bins",  &v55,  v48);
        int v39 = (std::stringbuf::string_type *)v38;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v38);
        if (v39 != buf) {
          free(v39);
        }
      }
    }

    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"])
    {
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "setStepCadenceToStrideLengthBins:",  objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", @"StepCadenceToStrideLengthTable"));
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      __int16 v24 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Persisted step cadence to stride length bins",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_1018484E0);
        }
        LOWORD(v55.__r_.__value_.__l.__data_) = 0;
        LODWORD(v4_Block_object_dispose(&STACK[0x7E0], 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "Persisted step cadence to stride length bins",  &v55,  v48);
        uint64_t v41 = (std::stringbuf::string_type *)v40;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v40);
        if (v41 != buf) {
          free(v41);
        }
      }
    }

    uint64_t v25 = sub_1002F8DDC();
    LODWORD(buf[0].__r_.__value_.__l.__data_) = sub_100D307B4(*(void **)(a1 + 168));
    sub_1002AC288(v25, @"CalibrationVersion", buf);
    uint64_t v26 = sub_1002F8DDC();
    buf[0].__r_.__value_.__r.__words[0] = sub_100D30858(*(void **)(a1 + 168));
    sub_1002AC820(v26, @"CalibrationTimestamp", buf);
    uint64_t v27 = sub_1002F8DDC();
    sub_100D30800(*(void **)(a1 + 168), buf);
    sub_1002ACDCC(v27, @"CalibrationUDID", (char *)buf);
    uint64_t v28 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v28 + 944LL))(v28);
    *(_BYTE *)(a1 + 146) = 0;
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    int v29 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      sub_100D30214(*(void **)(a1 + 168), buf);
      BOOL v30 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
          ? buf
          : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v55.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Completed persistence of motion cals to disk on watch. %s",  (uint8_t *)&v55,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v35 = qword_101934608;
      sub_100D30214(*(void **)(a1 + 168), &v55);
      int v36 = (v55.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &v55
          : (std::stringbuf::string_type *)v55.__r_.__value_.__r.__words[0];
      int v56 = 136315138;
      __int16 v57 = v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  1LL,  "Completed persistence of motion cals to disk on watch. %s",  (const char *)&v56);
      __int16 v20 = v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::persistCachedValues()",  "%s\n",  (const char *)v20);
      if (v20 != buf) {
LABEL_76:
      }
        free(v20);
    }
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    __int16 v15 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      int v16 = sub_100D307B4(*(void **)(a1 + 168));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v16;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = sub_100D2FFFC(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d",  (uint8_t *)buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v17 = qword_101934608;
      int v18 = sub_100D307B4(*(void **)(a1 + 168));
      LODWORD(v55.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v55.__r_.__value_.__r.__words[0]) = v18;
      LOWORD(v55.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v55.__r_.__value_.__r.__words[1] + 2) = sub_100D2FFFC(a1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v17,  2LL,  "Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d",  &v55,  14);
      __int16 v20 = (std::stringbuf::string_type *)v19;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v19);
      if (v20 != buf) {
        goto LABEL_76;
      }
    }
  }

void sub_1006752AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *__p, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006752D0(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionaryWithCapacity:](&OBJC_CLASS___NSMutableDictionary, "dictionaryWithCapacity:", 5LL);
  uint64_t v24 = a1;
  id v3 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "syncgetUserProfileInternal");
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v4 = CMNatalimeterSetUserVo2max;
  __p[0] = (void *)CMNatalimeterSetUserPal;
  __p[1] = (void *)CMNatalimeterSetUserVo2max;
  uint64_t v31 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  std::string::size_type v5 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", __p, 3LL);
  id v6 = -[NSArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v25,  v32,  16LL);
  if (v6)
  {
    uint64_t v7 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        if ([v9 isEqualToString:v4])
        {
          LOBYTE(__p[0]) = 0;
          uint64_t v11 = sub_1002F8DDC();
          sub_1002A6FD4(v11, (uint64_t)@"ActiveJacksonCalibration", (BOOL *)__p);
          if (!LOBYTE(__p[0])) {
            continue;
          }
        }

        if (v10) {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v10, v9);
        }
      }

      id v6 = -[NSArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v25,  v32,  16LL);
    }

    while (v6);
  }

  id v12 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(v24 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "syncgetCopyRawSpeedToKValueBins");
  if (v12)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v12,  @"RawSpeedToKValueTable");
  }

  id v13 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(v24 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "syncgetCopyStepCadenceToStrideLengthBins");
  if (v13)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v13,  @"StepCadenceToStrideLengthTable");
  }

  if ((sub_100D30BF4(*(void **)(v24 + 168), v2) & 1) == 0)
  {
    [*(id *)(v24 + 168) addEntriesFromDictionary:v2];
    objc_msgSend( *(id *)(v24 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()),  @"CalibrationTimestamp");
    sub_1004F2598();
    sub_1004F6194((uint64_t)__p);
    if (v31 >= 0) {
      __int16 v14 = __p;
    }
    else {
      __int16 v14 = (void **)__p[0];
    }
    objc_msgSend( *(id *)(v24 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14),  @"CalibrationUDID");
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = sub_1002F8DDC();
    __p[0] = COERCE_VOID_(sub_100D30858(*(void **)(v24 + 168)));
    sub_1002AC820(v15, @"CalibrationTimestamp", __p);
    uint64_t v16 = sub_1002F8DDC();
    sub_100D30800(*(void **)(v24 + 168), __p);
    sub_1002ACDCC(v16, @"CalibrationUDID", (char *)__p);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v17 + 944LL))(v17);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    int v18 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      int v19 = sub_100D307B4(*(void **)(v24 + 168));
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Watch retrieved calibrations and saved them in memory, current version, %d",  (uint8_t *)__p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      uint64_t v20 = qword_101934608;
      int v21 = sub_100D307B4(*(void **)(v24 + 168));
      v29[0] = 67109120;
      v29[1] = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v20,  1LL,  "Watch retrieved calibrations and saved them in memory, current version, %d",  v29);
      uint64_t v23 = (void **)v22;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::updateCalibrations()", "%s\n", v22);
      if (v23 != __p) {
        free(v23);
      }
    }
  }

void sub_10067577C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006757A4(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(120.0, a2, 14, *(void **)(a1 + 32), 300LL, 0LL, 0LL, 0LL, 1, 0LL);
}

void sub_1006757EC(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    sub_100D30214(a2, (std::stringbuf::string_type *)__p);
    if ((SBYTE3(v23) & 0x80u) == 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = *(_BYTE **)__p;
    }
    int v6 = sub_100D307B4(a2);
    double v7 = sub_100D30858(a2);
    uint64_t v8 = v17;
    if (v18 < 0) {
      uint64_t v8 = (void **)v17[0];
    }
    *(_DWORD *)uint64_t buf = 136315906;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 2048;
    double v30 = v7;
    __int16 v31 = 2080;
    int v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s",  buf,  0x26u);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    uint64_t v9 = qword_101934608;
    sub_100D30214(a2, &v16);
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      id v10 = &v16;
    }
    else {
      id v10 = (std::stringbuf::string_type *)v16.__r_.__value_.__r.__words[0];
    }
    int v11 = sub_100D307B4(a2);
    double v12 = sub_100D30858(a2);
    id v13 = v17;
    if (v18 < 0) {
      id v13 = (void **)v17[0];
    }
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 2048;
    double v23 = v12;
    __int16 v24 = 2080;
    __int128 v25 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  1LL,  "Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s",  __p,  38,  *(double *)&v16.__r_.__value_.__l.__data_,  (const char *)v16.__r_.__value_.__l.__size_);
    uint64_t v15 = v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionSyncStoreWatch::receiveMotionCals(NSDictionary *)",  "%s\n",  v15);
    if (v15 != buf) {
      free(v15);
    }
  }

  *(void *)uint64_t buf = a2;
  sub_100CCCC8C(a1 + 128, 4, (uint64_t)buf);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_100675ACC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100675B2C(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "user info notification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "user info notification",  v6,  2);
    std::string::size_type v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const C LNatalimetryNotifier_Type::NotificationData &)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  buf[0] = 0;
  return sub_100CCCC8C(a1 + 128, 5, (uint64_t)buf);
}

void sub_100675CD0(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (*a3 == 1)
  {
    if (!*a4)
    {
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      std::string::size_type v5 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Workout session ended on watch.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_1018484E0);
        }
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Workout session ended on watch.",  v14,  2);
        id v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notifica tion &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      buf[0] = 1;
      sub_100CCCC8C(a1 + 128, 5, (uint64_t)buf);
    }
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    double v7 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      int v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      int v9 = *a3;
      v14[0] = 67109120;
      v14[1] = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "#Warning Unhandled notification %d",  v14);
      int v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notificati on &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

void sub_100675FE4(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  double v7 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    int v13 = *a3;
    v16[0] = 67109120;
    v16[1] = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "notification, %d",  v16);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CL CompanionNotifier_Type::NotificationData &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (*a3 == 5)
  {
    if (*a4) {
      int v9 = 2;
    }
    else {
      int v9 = 3;
    }
    sub_100CCCC8C(a1 + 128, v9, (uint64_t)buf);
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    id v10 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_1018484E0);
      }
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Unhandled notification",  v16,  2);
      double v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

uint64_t sub_1006762F8(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "raw speed to kValue bins updated", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "raw speed to kValue bins updated",  v6,  2);
    std::string::size_type v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionSyncStoreWatch::rawSpeedToKValueBinsHaveChanged()",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  buf[0] = 0;
  return sub_100CCCC8C(a1 + 128, 5, (uint64_t)buf);
}

uint64_t sub_10067649C(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "step cadence to stride length bins updated",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "step cadence to stride length bins updated",  v6,  2);
    std::string::size_type v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionSyncStoreWatch::stepCadenceToStrideLengthBinsHaveChanged()",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  buf[0] = 0;
  return sub_100CCCC8C(a1 + 128, 5, (uint64_t)buf);
}

void sub_100676640(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore backup motion cals", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "restore backup motion cals",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doRestoreBackupMotionCals(const EDeviceUnlocked *)",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_1006767D8(a1);
}

void sub_1006767D8(uint64_t a1)
{
  uint64_t v2 = sub_1002F8DDC();
  sub_1002A85D0(v2, (uint64_t)@"CalibrationUDID", &v19);
  if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v3 = &v19;
  }
  else {
    id v3 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3),  @"CalibrationUDID");
  unsigned int v18 = -1;
  uint64_t v4 = sub_1002F8DDC();
  sub_1002A7D20(v4, (uint64_t)@"CalibrationVersion", &v18);
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18),  @"CalibrationVersion");
  double v17 = 0.0;
  uint64_t v5 = sub_1002F8DDC();
  sub_1002A832C(v5, (uint64_t)@"CalibrationTimestamp", &v17);
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17),  @"CalibrationTimestamp");
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  int v6 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    sub_100D30214(*(void **)(a1 + 168), (std::stringbuf::string_type *)__p);
    double v7 = (SBYTE3(v24) & 0x80u) == 0 ? __p : *(_BYTE **)__p;
    int v8 = sub_100D307B4(*(void **)(a1 + 168));
    double v9 = sub_100D30858(*(void **)(a1 + 168));
    *(_DWORD *)uint64_t buf = 136315650;
    __int128 v26 = v7;
    __int16 v27 = 1024;
    int v28 = v8;
    __int16 v29 = 2048;
    double v30 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Restored backup calibrations, %s, version, %d, timestamp, %lf",  buf,  0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    uint64_t v10 = qword_101934608;
    sub_100D30214(*(void **)(a1 + 168), &v16);
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &v16;
    }
    else {
      int v11 = (std::stringbuf::string_type *)v16.__r_.__value_.__r.__words[0];
    }
    int v12 = sub_100D307B4(*(void **)(a1 + 168));
    double v13 = sub_100D30858(*(void **)(a1 + 168));
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v11;
    __int16 v21 = 1024;
    int v22 = v12;
    __int16 v23 = 2048;
    double v24 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  1LL,  "Restored backup calibrations, %s, version, %d, timestamp, %lf",  __p,  28,  *(double *)&v16.__r_.__value_.__l.__data_);
    uint64_t v15 = v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::restoreBackupMotionCals()", "%s\n", v15);
  }

void sub_100676B2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100676B90(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "connected", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, qword_101934608, 2LL, "connected", v6, 2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doConnected(const ECompanionConnected *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  [*(id *)(a1 + 152) setFireInterval:*(double *)(a1 + 160)];
  return sub_100676D34(a1);
}

id sub_100676D34(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "schedule send to companion", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "schedule send to companion",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreWatch::scheduleFastSendToCompanion()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(a1 + 152) setNextFireDelay:2.56];
}

void sub_100676ED4(uint64_t a1, _BYTE *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "updating motion cals", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "updating motion cals",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doUpdateMotionCals(const EMotionCalsUpdated *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_1006752D0(a1);
  if (*a2) {
    sub_100676D34(a1);
  }
}

id sub_100677080(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore and arbitrate", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "restore and arbitrate",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doRestoreBackupMotionCalsArbitrate(const EDeviceUnlocked *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_1006767D8(a1);
  sub_100677228(a1);
  return sub_100676D34(a1);
}

void sub_100677228(uint64_t a1)
{
  id v2 = sub_100D30B24(*(void **)(a1 + 176));
  int v3 = sub_100677984((uint64_t)v2, *(void **)(a1 + 168), *(void **)(a1 + 176));
  sub_1006777A4(a1, *(void **)(a1 + 168), *(void **)(a1 + 176), v3);
  switch(v3)
  {
    case 2:
    case 4:
      sub_100674570(a1);
      break;
    case 3:
      goto LABEL_4;
    case 5:
      sub_100674570(a1);
LABEL_4:
      sub_100676D34(a1);
      break;
    default:
      return;
  }

id sub_1006772B4(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Buffered motion cals from companion", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "Buffered motion cals from companion",  v8,  2);
    double v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doBufferMotionCalsFromCompanion(const ECalibrationFromCompanion *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  return sub_100D30B24(*(void **)(a1 + 176));
}

id sub_10067745C(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  id v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "disconnected",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doDisconnected(const ECompanionDisconnected *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(a1 + 152) setNextFireDelay:1.79769313e308];
}

void sub_1006775FC(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitrateMotionCals", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "arbitrateMotionCals",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreWatch::doArbitrateMotionCals(const ECalibrationFromCompanion *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  sub_100677228(a1);
}

void sub_1006777A4(uint64_t a1, void *a2, void *a3, int a4)
{
  if (![a2 objectForKeyedSubscript:@"CalibrationUDID"])
  {
    double v13 = (_Unwind_Exception *)sub_1012420C4();
    if (v16 < 0) {
      operator delete(__p);
    }
    _Unwind_Resume(v13);
  }

  double v7 = sub_100D30800(a2, &__p);
  if (a4 == 4)
  {
    [a2 addEntriesFromDictionary:a3];
LABEL_9:
    uint64_t v12 = sub_100D307B4(a3);
    sub_100D308A4(a2, v12);
    goto LABEL_10;
  }

  if (a4 == 5)
  {
    int v14 = 0;
    BOOL v8 = sub_1006778D8((uint64_t)v7, a2, a3, (float *)&v14);
    [a2 addEntriesFromDictionary:a3];
    if (v8)
    {
      LODWORD(v9) = v14;
      uint64_t v10 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v9);
      [a2 setObject:v10 forKeyedSubscript:CMNatalimeterSetUserVo2max];
    }

    uint64_t v11 = sub_100D307B4(a3);
    sub_100D308A4(a2, v11);
  }

BOOL sub_1006778D8(uint64_t a1, void *a2, void *a3, float *a4)
{
  uint64_t v7 = CMNatalimeterSetUserVo2max;
  id v8 = [a3 objectForKeyedSubscript:CMNatalimeterSetUserVo2max];
  if (v8)
  {
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v7), "floatValue");
    *a4 = v9;
    if (v9 != 0.0)
    {
      if ([a2 objectForKeyedSubscript:v7])
      {
        float v10 = *a4;
        objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v7), "floatValue");
        *a4 = fmaxf(v10, v11);
      }
    }
  }

  return v8 != 0LL;
}

uint64_t sub_100677984(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = (uint64_t)a2;
  if (![a2 objectForKeyedSubscript:@"CalibrationUDID"])
  {
    sub_101242240();
    __break(1u);
    goto LABEL_59;
  }

  if ([a3 count])
  {
    sub_100D30800((void *)v10, &__p);
    double v7 = sub_100D30858((void *)v10);
    int v3 = sub_100D307B4((void *)v10);
    sub_100D30800(a3, &__s1);
    double v8 = sub_100D30858(a3);
    LODWORD(a3) = sub_100D307B4(a3);
    int v6 = buf;
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    uint64_t v4 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if ((sub_100D307B4((void *)v10) & 0x80000000) != 0)
    {
      uint64_t v10 = 4LL;
      goto LABEL_45;
    }

    uint64_t v11 = HIBYTE(v40);
    if (v40 >= 0.0) {
      size_t v12 = HIBYTE(v40);
    }
    else {
      size_t v12 = __n;
    }
    uint64_t v13 = v43;
    if ((v43 & 0x80u) != 0) {
      uint64_t v13 = v42;
    }
    if (v12 != v13) {
      goto LABEL_27;
    }
    if ((v43 & 0x80u) == 0) {
      p_p = (unsigned __int8 *)&__p;
    }
    else {
      p_p = (unsigned __int8 *)__p;
    }
    if ((HIBYTE(v40) & 0x80) != 0)
    {
      if (memcmp(__s1, p_p, __n))
      {
LABEL_27:
        if (v3 >= (int)a3)
        {
          if (qword_101934600 != -1) {
            dispatch_once(&qword_101934600, &stru_1018484E0);
          }
          double v17 = (os_log_s *)qword_101934608;
          if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
          {
            p_s1 = &__s1;
            if (v40 < 0.0) {
              p_s1 = __s1;
            }
            std::string v19 = &__p;
            if ((v43 & 0x80u) != 0) {
              std::string v19 = __p;
            }
            *(_DWORD *)uint64_t buf = 136315906;
            *(void *)std::stringbuf::string_type v55 = p_s1;
            *(_WORD *)&v55[8] = 2080;
            *(void *)&v55[10] = v19;
            __int16 v56 = 1024;
            int v57 = (int)a3;
            __int16 v58 = 1024;
            int v59 = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not large r than current version %d",  buf,  0x22u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934600 != -1) {
              dispatch_once(&qword_101934600, &stru_1018484E0);
            }
            double v33 = &__s1;
            if (v40 < 0.0) {
              double v33 = __s1;
            }
            uint64_t v34 = &__p;
            if ((v43 & 0x80u) != 0) {
              uint64_t v34 = __p;
            }
            int v44 = 136315906;
            *(void *)int v45 = v33;
            *(_WORD *)&v45[8] = 2080;
            *(void *)&v45[10] = v34;
            *(_WORD *)&v45[18] = 1024;
            *(_DWORD *)&v45[20] = (_DWORD)a3;
            __int16 v46 = 1024;
            int v47 = v3;
            LODWORD(v37) = 34;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not large r than current version %d",  (const char *)&v44,  v37,  (_DWORD)__s1,  __n);
            int v36 = (uint8_t *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const",  "%s\n",  v35);
            if (v36 != buf) {
              free(v36);
            }
          }

          uint64_t v10 = 0LL;
        }

        else
        {
          uint64_t v10 = 5LL;
        }

void sub_100678074( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006780C8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        float v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101848500);
      }
      uint64_t v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)uint64_t buf = 136446466;
        unsigned int v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101848500);
        }
        size_t v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        double v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::remov eClient(int) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_10067833C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019398D8);
}

uint64_t sub_100678350(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unsigned __int8 v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          int v36 = sub_100679BB8();
          sub_100679C24((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_1019398D9;
        HIDWORD(v40) = v17;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        __int16 v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        double v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101848500);
  }
  int v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    int v37 = (void *)(a1 + 8);
    *(_DWORD *)unsigned __int8 v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    int v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::registerF orNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionSyncStore_Type:: Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, Registrati onInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_1006787A8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      float v9 = (uint64_t *)v5;
    }
    else {
      float v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101848500);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      double v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::clientR egistered(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_ T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100678A28(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101848500);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101848500);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                double v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::No tification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

BOOL sub_100678DB0(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (!v4) {
    return 0LL;
  }
  int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      int v9 = (uint64_t *)v3;
    }
    else {
      int v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }

  while (*v9);
  return v6 != v2 && v5 >= *(_DWORD *)(v6 + 32) && *(void *)(v6 + 64) != 0LL;
}

uint64_t sub_100678E08(uint64_t a1, int *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void *v4 = off_101848550;
  *(void *)&__int128 v11 = v4 + 3;
  *((void *)&v11 + 1) = v4;
  int v10 = *a2;
  BOOL v12 = &v10;
  int v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    int v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_100678EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100678EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v5,  a3,  a4,  0LL);
}

void sub_100678F10(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    int v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    int v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v11 = (void *)(a1 + 8);
      BOOL v12 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v66 = 2082;
      __int16 v67 = v11;
      __int16 v68 = 2050;
      __int16 v69 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    uint64_t v14 = (__n128 *)(a1 + 64);
    uint64_t v13 = *(__n128 **)(a1 + 64);
    if (!v13) {
      goto LABEL_18;
    }
    signed __int32 v15 = *a2;
    uint64_t v16 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v17 = v13[2].n128_i32[0];
      BOOL v18 = v17 < v15;
      if (v17 >= v15) {
        int v19 = (__n128 **)v13;
      }
      else {
        int v19 = (__n128 **)&v13->n128_u64[1];
      }
      if (!v18) {
        uint64_t v16 = v13;
      }
      uint64_t v13 = *v19;
    }

    while (*v19);
    if (v16 == v14 || v15 < (signed __int32)v16[2].n128_u32[0])
    {
LABEL_18:
      *(void *)double v70 = &v70[8];
      memset(&v70[8], 0, 24);
      __int16 v71 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v70);
      uint64_t v16 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      uint64_t v20 = v69;
      if (v69)
      {
        p_shared_owners = (unint64_t *)&v69->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      int v23 = v71;
      if (v71)
      {
        BOOL v24 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }

      sub_100008390((uint64_t)v70, *(void **)&v70[8]);
    }

    if (a4)
    {
      uint64_t v26 = operator new(0x20uLL);
      _OWORD v26[2] = 0LL;
      *uint64_t v26 = off_101848550;
      v26[1] = 0LL;
      *(void *)uint64_t buf = v26 + 3;
      *(void *)&uint8_t buf[8] = v26;
      sub_10005F550((uint64_t)&v16[4], (__int128 *)buf);
      __int16 v27 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v28 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v16[4].n128_u64);
    }

    if (!v16[3].n128_u64[1]) {
      goto LABEL_83;
    }
    uint64_t v30 = sub_10067A570();
    if (a5 == -1)
    {
      sub_10067A5DC((void *)a1, (int *)a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          __int16 v36 = (uint64_t *)v32;
        }
        else {
          __int16 v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v63 = v33;
      unint64_t v37 = v14->n128_u64[0];
      if (!v14->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      int v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          int v42 = (unint64_t *)v37;
        }
        else {
          int v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          int v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v14 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        __int16 v62 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101848500);
        }
        unsigned __int8 v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          char v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v70, a1, a2);
          if (v70[23] >= 0) {
            int v45 = v70;
          }
          else {
            int v45 = *(_BYTE **)v70;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v44;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v70[23] & 0x80000000) != 0) {
            operator delete(*(void **)v70);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101848500);
          }
          __int16 v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v61 >= 0) {
            int v48 = __p;
          }
          else {
            int v48 = (void **)__p[0];
          }
          *(_DWORD *)double v70 = 136315650;
          *(void *)&v70[4] = v46;
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = a5;
          *(_WORD *)&v70[18] = 2080;
          *(void *)&v70[20] = v48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v70,
            28,
            v59);
          __int16 v50 = v49;
          if (v61 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::not ifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CL MotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, Notificat ionInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v50);
          if (v50 != buf) {
            free(v50);
          }
        }

        goto LABEL_83;
      }

      __int16 v62 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v53 = v39[3].n128_i64[0];
      __int128 v51 = v39 + 3;
      __int16 v52 = (__n128 *)v53;
      if (!v53) {
        goto LABEL_60;
      }
      int v54 = *(_DWORD *)(v33 + 32);
      std::stringbuf::string_type v55 = v51;
      do
      {
        int v56 = v52[1].n128_i32[3];
        BOOL v57 = v56 < v54;
        if (v56 >= v54) {
          __int16 v58 = v52;
        }
        else {
          __int16 v58 = (__n128 *)&v52->n128_i8[8];
        }
        if (!v57) {
          std::stringbuf::string_type v55 = v52;
        }
        __int16 v52 = (__n128 *)v58->n128_u64[0];
      }

      while (v58->n128_u64[0]);
      sub_100679C24((_BYTE *)a1, (uint64_t)&v63, (uint64_t)&v62, v30);
    }

void sub_100679540( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10067958C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136315138;
      unint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101848500);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listCli ents() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101848500);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      unint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101848500);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listCli ents() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    int v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      __int128 v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101848500);
            }
            uint64_t v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              unint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101848500);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>: :listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSync Store_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            signed __int32 v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                BOOL v18 = v17;
                signed __int32 v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                BOOL v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        unint64_t v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            unint64_t v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            uint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            int v10 = v26;
          }

          while (!v19);
        }

        int v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100679B34(id a1)
{
  qword_101934608 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_100679B60(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100679B8C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_100679BB8()
{
  uint64_t v1 = _NSConcreteStackBlock;
  uint64_t v2 = 3221225472LL;
  uint64_t v3 = sub_100679D00;
  uint64_t v4 = &unk_10181D3D0;
  char v5 = operator new(1uLL);
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_100679C24(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32LL);
    sub_100679D10(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80LL;
    BOOL v12 = (uint64_t **)(*(void *)a3 + 40LL);
    int v15 = (int *)(*(void *)a2 + 32LL);
    uint64_t v13 = sub_1004EF3D4(v12, v15, (uint64_t)&unk_1012CF090, &v15);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v14,  v10,  v11,  v13 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v14);
    }
  }

  return result;
}

void sub_100679D00(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100679D10(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppEncodableDataContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    sub_100679D88(a1);
  }

  else
  {
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
    if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0) {
      sub_10067A110(a1);
    }
  }

void sub_100679D88(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_10067A4BC((uint64_t)&v7 + 7, a1);
    return;
  }

  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D683LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101848520);
      }
      LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
      HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
LABEL_21:
      uint64_t v6 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Ca llback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    char v5 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D683LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101848520);
      }
      LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
      HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
      goto LABEL_21;
    }
  }

id sub_10067A110(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D683LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
    HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130D683LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101848520);
    }
    LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 134218498;
    HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Callba ck = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_10067A4BC(uint64_t a1, void *a2)
{
  if ([a2 cppObjectPtr]
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D36C8))
  {
    goto LABEL_5;
  }

  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)1)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    [a2 cppObjectPtr];
    return;
  }

  uint64_t v3 = (std::__shared_weak_count *)sub_1012423BC();
  sub_10067A530(v3);
}

void sub_10067A530(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101848550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10067A544(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101848550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

CLCppContainer *sub_10067A570()
{
  uint64_t v1 = _NSConcreteStackBlock;
  uint64_t v2 = 3221225472LL;
  uint64_t v3 = sub_10067A9B0;
  uint64_t v4 = &unk_10181D3D0;
  char v5 = operator new(1uLL);
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_10067A5DC(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    char v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        sub_100679D10(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v50 = v19;
              sub_100679C24(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                BOOL v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    BOOL v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  unsigned __int8 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      unsigned __int8 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      BOOL v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int16 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101848500);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                unint64_t v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                BOOL v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101848500);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                int v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::invok eClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionSyncStore_Type::N otification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

void sub_10067A9B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_10067A9C0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101997A38, (void *)&_mh_execute_header);
}

void *sub_10067AA04(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }

  sub_10067F76C(__dst + 3);
  sub_10067F76C(__dst + 5);
  __dst[7] = 0LL;
  __dst[8] = 0LL;
  sub_1010DDBC0(buf, "CLWifiLocationDatabase");
  sub_1010DDBC0(__p, "CLMovingApDetector");
  sub_100F81CD0(__dst + 9, buf, __p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v4 = (std::__shared_weak_count *)__dst[4];
  uint64_t v16 = __dst[3];
  uint64_t v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  sub_100F42930(__dst + 21, &v16);
  uint64_t v7 = v17;
  if (v17)
  {
    int v8 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  int v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, initialize database tables",  buf,  2u);
  }

  uint64_t v11 = sub_1002921D0(115, 2);
  if ((_DWORD)v11)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "MovingApDetector, initialize database tables",  __p,  2,  v16);
    int v15 = (uint8_t *)v14;
    uint64_t v11 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMovingApDetector::CLMovingApDetector(const std::string &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  sub_10067AE04(v11, (__int128 *)__dst, qword_101997A50, __dst + 8);
  sub_10067AE04(v12, (__int128 *)__dst, qword_101997A68, __dst + 7);
  return __dst;
}

void sub_10067ACE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  uint64_t v33 = *v29;
  uint64_t *v29 = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
  }
  uint64_t v34 = *v28;
  *int v28 = 0LL;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  sub_10000AE14(v27);
  sub_10000AE14(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_10067ADB0(uint64_t a1)
{
  *(void *)a1 = &off_10188FD28;
  return a1;
}

void sub_10067AE04(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v12 = 0x100000002LL;
  __int16 v13 = 256;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v15 = *((void *)a2 + 2);
  }

  uint64_t v16 = 0LL;
  int v6 = *((char *)a3 + 23);
  uint64_t v7 = (uint64_t *)*a3;
  int v8 = operator new(0x128uLL);
  uint64_t v9 = (uint64_t)v8;
  if (v6 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = v7;
  }
  sub_1004977F8(v8, v10, &v12, -1.0);
  uint64_t v11 = *a4;
  *a4 = v9;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10067AED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10067AF00(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 56);
  if (sub_100400B64(*(void *)(a1 + 56)))
  {
    BOOL v3 = sub_100400B64(*(void *)(a1 + 64));
    BOOL v4 = v3;
    sub_100F81CDC(a1 + 72, v3);
    BOOL v5 = sub_10036E100((double *)(a1 + 72));
    if (v4) {
      return;
    }
  }

  else
  {
    sub_100F81CDC(a1 + 72, 0);
    BOOL v5 = sub_10036E100((double *)(a1 + 72));
  }

  int v6 = (uint64_t *)(a1 + 64);
  sub_10067AE04(v5, (__int128 *)a1, qword_101997A50, (uint64_t *)(a1 + 64));
  sub_10067AE04(v7, (__int128 *)a1, qword_101997A68, v2);
  BOOL v8 = sub_100400B64(*(void *)(a1 + 56));
  uint64_t v9 = "fail";
  if (v8 && sub_100400B64(*v6)) {
    uint64_t v9 = "success";
  }
  sub_1010DDBC0(__p, v9);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  int v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = __p;
    if (v15 < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    char v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CLMovingApDetector, re-initialize database: %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v12 = __p;
    if (v15 < 0) {
      uint64_t v12 = (void **)__p[0];
    }
    int v16 = 136315138;
    uint64_t v17 = v12;
    __int16 v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CLMovingApDetector, re-initialize database: %s",  (const char *)&v16);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::reinitializeBadWifiCentroidDatabaseIfInvalid()",  "%s\n",  v13);
  }

  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10067B198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10067B1C0(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    if (sub_100400B64(*a2))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      BOOL v3 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a2 + 16LL))(__p);
        BOOL v4 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)uint64_t buf = 136380675;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, clearing database table %{private}s",  buf,  0xCu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        uint64_t v7 = qword_101934858;
        (*(void (**)(_BYTE *__return_ptr))(*(void *)*a2 + 16LL))(buf);
        if (v11 >= 0) {
          BOOL v8 = buf;
        }
        else {
          BOOL v8 = *(_BYTE **)buf;
        }
        int v12 = 136380675;
        __int16 v13 = v8;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v7,  0LL,  "MovingApDetector, clearing database table %{private}s",  &v12,  12);
        if (v11 < 0) {
          operator delete(*(void **)buf);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v9);
      }

      sub_1004031F8(*a2);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    BOOL v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      *(_WORD *)uint64_t buf = 0;
      int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  buf,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v6);
    }
  }

void sub_10067B52C(uint64_t a1)
{
}

BOOL sub_10067B554(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  if (v4 == 6)
  {
    BOOL v5 = sub_100F2A284(*(void *)(a1 + 40), a2);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    int v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_100869A44(a2, __p);
      uint64_t v7 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
      BOOL v8 = "yes";
      if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      if (v5) {
        BOOL v8 = "no";
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, CellOnly, received location: %{private}s, success: %s",  (uint8_t *)&buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v18 = qword_101934858;
      sub_100869A44(a2, &buf);
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      int v20 = "yes";
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      if (v5) {
        int v20 = "no";
      }
      int v24 = 136380931;
      uint64_t v25 = p_buf;
      __int16 v26 = 2080;
      uint64_t v27 = v20;
      char v21 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v18,  0LL,  "MovingApDetector, CellOnly, received location: %{private}s, success: %s",  &v24,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)",  "%s\n",  (const char *)v21);
      if (v21 != __p) {
        free(v21);
      }
    }

    int v4 = *(_DWORD *)(a2 + 96);
  }

  if (v4 != 1 && (v4 != 6 || !*((_BYTE *)sub_100F4BF38() + 1))) {
    return 0LL;
  }
  BOOL v9 = sub_100F2A284(*(void *)(a1 + 24), a2);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  int v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    sub_100869A44(a2, __p);
    char v11 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    int v12 = "yes";
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v11 = __p;
    }
    if (v9) {
      int v12 = "no";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, received location: %{private}s, success: %s",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v13 = qword_101934858;
    sub_100869A44(a2, &buf);
    unint64_t v14 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    char v15 = "yes";
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v14 = &buf;
    }
    if (v9) {
      char v15 = "no";
    }
    int v24 = 136380931;
    uint64_t v25 = v14;
    __int16 v26 = 2080;
    uint64_t v27 = v15;
    LODWORD(v22) = 22;
    int v16 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v13,  0LL,  "MovingApDetector, received location: %{private}s, success: %s",  &v24,  v22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)",  "%s\n",  (const char *)v16);
    if (v16 != __p) {
      free(v16);
    }
  }

  return v9;
}

void sub_10067B9F8(uint64_t a1, _DWORD *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_100F2B370(*(void *)(a1 + 24), &Current, a2, a2 + 1);
  sub_100F2B370(*(void *)(a1 + 40), &Current, a2, a2 + 1);
}

void sub_10067BA5C(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    sub_1010DDBC0(&v31, "MovingApDetector");
    std::string::append(&v31, ", gps: ");
    if (sub_100F2B880(*(void *)(a1 + 24))) {
      int v4 = "y";
    }
    else {
      int v4 = "n";
    }
    std::string::append(&v31, v4);
    std::string::append(&v31, ", cell: ");
    if (sub_100F2B950(*(void *)(a1 + 24))) {
      BOOL v5 = "y";
    }
    else {
      BOOL v5 = "n";
    }
    std::string::append(&v31, v5);
    if (!sub_100400B64(*a2))
    {
      std::string::append(&v31, ", database invalid");
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      int v24 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = &v31;
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v25 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        __int16 v26 = &v31;
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int16 v26 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        LODWORD(v33[0]) = 136315138;
        *(void *)((char *)v33 + 4) = v26;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s",  (const char *)v33);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v27);
      }

      goto LABEL_79;
    }

    sub_10049B6E8(*a2, (void **)v33);
    if (*(void *)&v33[0] == *((void *)&v33[0] + 1))
    {
      std::string::append(&v31, ", database empty");
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      int v28 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v29 = &v31;
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unint64_t v29 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_77;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v20 = qword_101934858;
      char v21 = &v31;
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
    }

    else
    {
      unsigned int v6 = sub_100498AD4(*a2);
      std::to_string(&v32, v6);
      uint64_t v7 = std::string::insert(&v32, 0LL, ", database count: ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      int64_t cap = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)__int128 __p = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v10 = HIBYTE(cap);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(&v31, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      std::string::append(&v31, ", samples");
      unsigned int v11 = 0;
      unint64_t v12 = rand() % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v33[0] + 1) - *(void *)&v33[0]) >> 6));
      do
      {
        sub_1007EC360(&v32);
        uint64_t v13 = std::string::insert(&v32, 0LL, ", ");
        __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        int64_t cap = v13->__r_.__value_.__l.__cap_;
        *(_OWORD *)__int128 __p = v14;
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v16 = HIBYTE(cap);
        }
        else {
          std::string::size_type v16 = (std::string::size_type)__p[1];
        }
        std::string::append(&v31, (const std::string::value_type *)v15, v16);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v18 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        char v19 = &v31;
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_77;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v20 = qword_101934858;
      char v21 = &v31;
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
    }

    LODWORD(v32.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v20,  0LL,  "%s",  (const char *)&v32);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v30);
LABEL_77:
    if (*(void *)&v33[0])
    {
      *((void *)&v33[0] + 1) = *(void *)&v33[0];
      operator delete(*(void **)&v33[0]);
    }

void sub_10067C288( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *__p, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10067C320(uint64_t a1)
{
}

void sub_10067C328(uint64_t a1, uint64_t *a2)
{
  if (sub_100400B64(*a2))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    BOOL v3 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = sub_100498AD4(*a2);
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, number of detected bad centroids in database: %u",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v5 = qword_101934858;
    int v6 = sub_100498AD4(*a2);
    v9[0] = 67109120;
    v9[1] = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  0LL,  "MovingApDetector, number of detected bad centroids in database: %u",  v9);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v7);
LABEL_20:
    free(v7);
    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  __int128 v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, #warning, could not log number of detected bad centroids due to invalid database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    LOWORD(v9[0]) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "MovingApDetector, #warning, could not log number of detected bad centroids due to invalid database",  v9,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v7);
  }

void sub_10067C60C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*a3)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    std::string::size_type v10 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int16 v29 = 0;
      BOOL v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  &v29,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiL ocationDatabase> &)",  "%s\n",  v9);
    }

    return;
  }

  sub_100F42A84(a1 + 168, (uint64_t *)a2);
  uint64_t v40 = *(void *)a2;
  sub_10049AE64(*a3, (uint64_t)&v40, &v29);
  sub_100C3A384(a2, (uint64_t)v28);
  nullsub_10(0LL);
  LODWORD(v26) = -1;
  uint64_t v25 = *(void *)a2;
  *(int32x2_t *)((char *)&v26 + 4) = vrev64_s32(*(int32x2_t *)(a2 + 48));
  HIDWORD(v26) = 1;
  LODWORD(v27) = -1;
  if (sub_100C3A4EC(a2)) {
    LODWORD(v26) = sub_100C3A4FC(a2);
  }
  HIDWORD(v27) = *(_DWORD *)(a2 + 92);
  if (!v39)
  {
    if (sub_1004995B0(*a3, (int *)&v25, (uint64_t)v28))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      int v11 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_10067CF34((uint64_t *)a2, (std::string *)__p);
        unint64_t v12 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, detected and inserted bad centroid: %{private}s",  (uint8_t *)&buf,  0xCu);
        if (SBYTE7(v45) < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = sub_1002921D0(115, 2);
      if (!(_DWORD)v13) {
        goto LABEL_60;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v14 = qword_101934858;
      sub_10067CF34((uint64_t *)a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v42 = 136380675;
      unsigned __int8 v43 = p_buf;
      std::string::size_type v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v14,  0LL,  "MovingApDetector, detected and inserted bad centroid: %{private}s",  &v42,  12,  v25,  v26,  v27);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v17 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_10067CF34((uint64_t *)a2, (std::string *)__p);
        uint64_t v18 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, #warning, could not insert bad centroid into database: %{private}s",  (uint8_t *)&buf,  0xCu);
        if (SBYTE7(v45) < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = sub_1002921D0(115, 2);
      if (!(_DWORD)v13) {
        goto LABEL_60;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v21 = qword_101934858;
      sub_10067CF34((uint64_t *)a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v22 = &buf;
      }
      else {
        uint64_t v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v42 = 136380675;
      unsigned __int8 v43 = v22;
      std::string::size_type v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v21,  0LL,  "MovingApDetector, #warning, could not insert bad centroid into database: %{private}s",  &v42,  12,  v25,  v26,  v27);
    }

    uint64_t v13 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLW ifiLocationDatabase> &)",  "%s\n",  v16);
LABEL_60:
    sub_10067C328(v13, a3);
    return;
  }

  __int128 v50 = v36;
  __int128 v51 = v37;
  v52[0] = *(_OWORD *)v38;
  *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)&v38[12];
  __int128 v46 = v32;
  __int128 v47 = v33;
  __int128 v48 = v34;
  __int128 v49 = v35;
  *(_OWORD *)__int128 __p = v30;
  __int128 v45 = v31;
  if (sub_1004995B0(*a3, (int *)&v25, (uint64_t)v28))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_10067CF34((uint64_t *)a2, (std::string *)__p);
      int v6 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, detected and replaced bad centroid: %{private}s",  (uint8_t *)&buf,  0xCu);
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v7 = qword_101934858;
    sub_10067CF34((uint64_t *)a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v8 = &buf;
    }
    else {
      __int128 v8 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v42 = 136380675;
    unsigned __int8 v43 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v7,  0LL,  "MovingApDetector, detected and replaced bad centroid: %{private}s",  &v42,  12,  v25,  v26,  v27);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    char v19 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_10067CF34((uint64_t *)a2, (std::string *)__p);
      uint64_t v20 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, #warning, could not replace bad centroid into database: %{private}s",  (uint8_t *)&buf,  0xCu);
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v23 = qword_101934858;
    sub_10067CF34((uint64_t *)a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v24 = &buf;
    }
    else {
      int v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v42 = 136380675;
    unsigned __int8 v43 = v24;
    BOOL v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v23,  0LL,  "MovingApDetector, #warning, could not replace bad centroid into database: %{private}s",  &v42,  12,  v25,  v26,  v27);
  }

  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v9);
  if (v9 != (char *)__p) {
LABEL_88:
  }
    free(v9);
}

void sub_10067CF34(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v11 = *a1;
  sub_1007EC360(&v12);
  int v4 = std::string::append(&v12, ", ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_100C3A384((uint64_t)a1, (uint64_t)v9);
  sub_10067E0B0((uint64_t)v9, &v10);
  if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v6 = &v10;
  }
  else {
    int v6 = (std::stringbuf::string_type *)v10.__r_.__value_.__r.__words[0];
  }
  if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v10.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  __int128 v8 = std::string::append(&v13, (const std::string::value_type *)v6, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10067D028(_Unwind_Exception *exception_object)
{
}

void sub_10067D074(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*a3)
  {
    uint64_t v5 = a1 + 168;
    sub_100F42B44(a1 + 168, (uint64_t)a2);
    uint64_t v14 = *a2;
    sub_10049AE64(*a3, (uint64_t)&v14, __p);
    if (v19)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      int v6 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_10067CF34(a2, __p);
        uint64_t v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, centroid %{private}s was previously detected as bad. Mark it as valid again.",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        uint64_t v10 = qword_101934858;
        sub_10067CF34(a2, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v16 = 136380675;
        uint64_t v17 = p_buf;
        std::string v12 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  0LL,  "MovingApDetector, centroid %{private}s was previously detected as bad. Mark it as valid again.",  &v16,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWi fiLocationDatabase> &)",  "%s\n",  (const char *)v12);
        if (v12 != __p) {
          free(v12);
        }
      }

      sub_10049C320(*a3, (uint64_t)&v14);
      sub_10067C328(v8, a3);
      sub_100F42BF8(v5, &v14);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    BOOL v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      std::string v13 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  &buf,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifi LocationDatabase> &)",  "%s\n",  (const char *)v13);
      if (v13 != __p) {
        free(v13);
      }
    }
  }

uint64_t sub_10067D418(uint64_t a1, double *a2, uint64_t *a3)
{
  if (!sub_100C3A418(a2)) {
    return 3LL;
  }
  if (!sub_100F2BA20(*(void *)(a1 + 24))) {
    return 2LL;
  }
  sub_100C3A384((uint64_t)a2, (uint64_t)v15);
  uint64_t v17 = *a3;
  uint64_t v16 = 0LL;
  BOOL v6 = sub_100F2A284(*(void *)(a1 + 24), (uint64_t)v15);
  BOOL v7 = sub_100F2A284(*(void *)(a1 + 40), (uint64_t)v15);
  sub_100F42FF4((_DWORD *)(a1 + 168), v6, v7);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  uint64_t v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    sub_10067CF34((uint64_t *)a2, &v24);
    BOOL v9 = (v24.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v24 : (std::string *)v24.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136381187;
    char v19 = v9;
    __int16 v20 = 1024;
    BOOL v21 = v7;
    __int16 v22 = 1024;
    BOOL v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, centroid: %{private}s, Rejected by Cell Only IM: %d, Rejected by GPS IM: %d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v11 = qword_101934858;
    sub_10067CF34((uint64_t *)a2, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v24.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v24.__r_.__value_.__r.__words[1] + 6) = v7;
    WORD1(v24.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v24.__r_.__value_.__r.__words[2]) = v6;
    std::string v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  0LL,  "MovingApDetector, centroid: %{private}s, Rejected by Cell Only IM: %d, Rejected by GPS IM: %d",  &v24,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CrossCheckOutcome CLMovingApDetector::crossCheckCentroid(const CLWifiAPLocation &, const CFAbsoluteTime &)",  "%s\n",  v13);
  }

  return !v6;
}

uint64_t sub_10067D6DC(uint64_t a1, double *a2, uint64_t *a3)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v6 = sub_10067D418(a1, a2, (uint64_t *)&Current);
  uint64_t v7 = v6;
  if ((_DWORD)v6 == 1)
  {
    sub_10067D074(a1, (uint64_t *)a2, a3);
  }

  else if (!(_DWORD)v6)
  {
    sub_10067C60C(a1, (uint64_t)a2, a3);
  }

  return v7;
}

BOOL sub_10067D760(uint64_t a1, double *a2, uint64_t *a3)
{
  BOOL result = sub_100F2BA20(*(void *)(a1 + 24));
  if (result)
  {
    if (*a3)
    {
      return sub_10067D6DC(a1, a2, a3) == 0;
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v7 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  buf,  2u);
      }

      BOOL v8 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        v10[0] = 0;
        BOOL v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  v10,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMovingApDetector::isBadCentroidFromGpsCellCrossCheck(const CLWifiAPLocation &, const std::unique_ptr<CL WifiLocationDatabase> &)",  "%s\n",  v9);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10067D92C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    uint64_t v55 = *a2;
    uint64_t result = sub_100400B64(v3);
    if (!(_DWORD)result) {
      return result;
    }
    sub_10049AE64(*a3, (uint64_t)&v55, &v44);
    if (v54)
    {
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_101997AA8);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_101997AA8))
      {
        sub_100D2D9A4((uint64_t)dbl_101997A80);
        __cxa_guard_release(&qword_101997AA8);
      }

      __int128 v41 = v51;
      __int128 v42 = v52;
      v43[0] = v53[0];
      *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)((char *)v53 + 12);
      __int128 v37 = v47;
      __int128 v38 = v48;
      __int128 v39 = v49;
      __int128 v40 = v50;
      __int128 v35 = v45;
      __int128 v36 = v46;
      sub_100C3A384((uint64_t)a2, (uint64_t)&v62);
      sub_100D2DCA4(dbl_101997A80, (uint64_t)&v35, (uint64_t)&v62);
      double v9 = v8;
      if (v8 == 0.0)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        uint64_t v10 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          sub_10067CF34(a2, &v62);
          int size = (char)v62.__r_.__value_.__s.__size_;
          std::string::size_type v12 = v62.__r_.__value_.__r.__words[0];
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 16LL))(&__p);
          std::string v13 = &v62;
          if (size < 0) {
            std::string v13 = (std::string *)v12;
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, found the exact centroid %{private}s in bad centroid database table %{private}s",  (uint8_t *)&buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v62, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848590);
          }
          uint64_t v23 = qword_101934858;
          sub_10067CF34(a2, &__p);
          int v24 = (char)__p.__r_.__value_.__s.__size_;
          std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
          (*(void (**)(std::stringbuf::string_type *__return_ptr))(*(void *)*a3 + 16LL))(&buf);
          __int128 v26 = &__p;
          if (v24 < 0) {
            __int128 v26 = (std::string *)v25;
          }
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::stringbuf::string_type buf = &buf;
          }
          else {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v56.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          WORD2(v56.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
          int v28 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v62,  1628LL,  &_mh_execute_header,  v23,  0LL,  "MovingApDetector, found the exact centroid %{private}s in bad centroid database table %{private}s",  &v56,  22,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43[0],  *(void *)&v43[1],  *((void *)&v43[1] + 1));
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLW ifiLocationDatabase> &)",  "%s\n",  (const char *)v28);
          if (v28 != &v62) {
            free(v28);
          }
        }

        return 1LL;
      }

      else
      {
        double v17 = *((double *)sub_100F4BF38() + 1);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        uint64_t v18 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          sub_10067CF34(a2, &__p);
          int v19 = (char)__p.__r_.__value_.__s.__size_;
          std::string::size_type v20 = __p.__r_.__value_.__r.__words[0];
          sub_10067E0B0((uint64_t)&v35, &buf);
          BOOL v21 = &__p;
          if (v19 < 0) {
            BOOL v21 = (std::string *)v20;
          }
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v22 = &buf;
          }
          else {
            __int16 v22 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v62.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
          WORD2(v62.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v62.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
          HIWORD(v62.__r_.__value_.__r.__words[2]) = 2049;
          double v63 = v9;
          __int16 v64 = 2049;
          double v65 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, centroid under lookup: %{private}s, database version: %{private}s. distance: %{private}.1f m. threshold: %{private}.1fm",  (uint8_t *)&v62,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v62, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848590);
          }
          uint64_t v29 = qword_101934858;
          sub_10067CF34(a2, &buf);
          int v30 = (char)buf.__r_.__value_.__s.__size_;
          std::string::size_type v31 = buf.__r_.__value_.__r.__words[0];
          sub_10067E0B0((uint64_t)&v35, &v56);
          __int128 v32 = &buf;
          if (v30 < 0) {
            __int128 v32 = (std::stringbuf::string_type *)v31;
          }
          if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int128 v33 = &v56;
          }
          else {
            __int128 v33 = (std::stringbuf::string_type *)v56.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
          double v58 = v9;
          __int16 v59 = 2049;
          double v60 = v17;
          __int128 v34 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v62,  1628LL,  &_mh_execute_header,  v29,  0LL,  "MovingApDetector, centroid under lookup: %{private}s, database version: %{private}s. di stance: %{private}.1fm. threshold: %{private}.1fm",  &__p,  42,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43[0],  *(void *)&v43[1],  *((void *)&v43[1] + 1));
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLW ifiLocationDatabase> &)",  "%s\n",  (const char *)v34);
          if (v34 != &v62) {
            free(v34);
          }
        }

        return v9 <= v17;
      }
    }

    return 0LL;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  char v15 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v62.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  (uint8_t *)&v62,  2u);
  }

  uint64_t result = sub_1002921D0(115, 0);
  if ((_DWORD)result)
  {
    bzero(&v62, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    __int16 v44 = 0;
    uint64_t v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v62,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  &v44,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLoc ationDatabase> &)",  "%s\n",  (const char *)v16);
    if (v16 != &v62) {
      free(v16);
    }
    return 0LL;
  }

  return result;
}

void sub_10067E054(_Unwind_Exception *a1)
{
}

uint64_t sub_10067E0B0@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  int v4 = sub_10000CF44(&v13, (uint64_t)"latlon ", 7LL);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 7LL;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + _Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)((_BYTE *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 4));
  uint64_t v6 = sub_10000CF44(&v13, (uint64_t)",", 1LL);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 16) = 7LL;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + _Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)((_BYTE *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  double v8 = sub_10000CF44(&v13, (uint64_t)", acc ", 6LL);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + _Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 20));
  std::stringbuf::str(a2, &v14);
  *(void *)((char *)v12
  uint64_t v13 = v10;
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_10067E234(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10067E254(uint64_t a1, double *a2, uint64_t *a3)
{
  BOOL v6 = sub_100F2BA20(*(void *)(a1 + 24));
  if (v6) {
    return sub_10067D760(a1, a2, a3);
  }
  else {
    return sub_10067D92C(v6, (uint64_t *)a2, a3);
  }
}

uint64_t sub_10067E2B0(uint64_t a1, double *a2)
{
  return sub_10067E254(a1, a2, (uint64_t *)(a1 + 64));
}

void sub_10067E2B8(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t *a4)
{
  if (*a4)
  {
    LODWORD(v52.__r_.__value_.__l.__data_) = 3;
    *(void *)std::string __p = &v52;
    int v7 = *((_DWORD *)sub_100228E48(a3, (int *)&v52, (uint64_t)&unk_1012CF090, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 0;
    *(void *)std::string __p = &v52;
    int v8 = *((_DWORD *)sub_100228E48(a3, (int *)&v52, (uint64_t)&unk_1012CF090, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 1;
    *(void *)std::string __p = &v52;
    int v9 = *((_DWORD *)sub_100228E48(a3, (int *)&v52, (uint64_t)&unk_1012CF090, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 2;
    *(void *)std::string __p = &v52;
    int v10 = *((_DWORD *)sub_100228E48(a3, (int *)&v52, (uint64_t)&unk_1012CF090, (unsigned int **)__p) + 8);
    sub_1010DDBC0(&v51, "MovingApDetector, ");
    unsigned int v11 = sub_100498AD4(*a4);
    if (v11)
    {
      std::to_string(&v52, v11);
      std::string::size_type v12 = std::string::insert(&v52, 0LL, "database count: ");
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      if (__p[23] >= 0) {
        std::stringbuf v14 = __p;
      }
      else {
        std::stringbuf v14 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v15 = __p[23];
      }
      else {
        std::string::size_type v15 = *(void *)&__p[8];
      }
      std::string::append(&v51, v14, v15);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    else
    {
      std::string::append(&v51, "database empty");
    }

    std::to_string(&v50, a2);
    int v19 = std::string::insert(&v50, 0LL, ", cross-checked ");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v21 = std::string::append(&v52, " centroids");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    if (__p[23] >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = *(const std::string::value_type **)__p;
    }
    if (__p[23] >= 0) {
      std::string::size_type v24 = __p[23];
    }
    else {
      std::string::size_type v24 = *(void *)&__p[8];
    }
    std::string::append(&v51, v23, v24);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v7 == a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      std::string::size_type v25 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v26 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int128 v26 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s, all centroids are invalid!", __p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      uint64_t v27 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v27 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, all centroids are invalid!",  (const char *)&v52);
      uint64_t v29 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v28);
    }

    else if (v10 == a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      int v30 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v31 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v31 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s, all centroids are unknown!", __p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v32 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v32 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, all centroids are unknown!",  (const char *)&v52);
      uint64_t v29 = (char *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v33);
    }

    else if (v9 == a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v34 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v35 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int128 v35 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s, all centroids are good!", __p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v36 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, all centroids are good!",  (const char *)&v52);
      uint64_t v29 = (char *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v37);
    }

    else if (v8 == a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v38 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v39 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int128 v39 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%s, all centroids are bad!", __p, 0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v40 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v40 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, all centroids are bad!",  (const char *)&v52);
      uint64_t v29 = (char *)v41;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v41);
    }

    else if (v9 + v7 == a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v42 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v43 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unsigned __int8 v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v43;
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = v7;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%s, %d invalid, all %d valid centroids are good!",  __p,  0x18u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int16 v44 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      WORD2(v52.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = v7;
      WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v52.__r_.__value_.__r.__words[2]) = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, %d invalid, all %d valid centroids are good!",  (const char *)&v52,  24,  LODWORD(v50.__r_.__value_.__l.__data_));
      uint64_t v29 = (char *)v45;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v45);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v46 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v47 = &v51;
        if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int128 v47 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136316162;
        *(void *)&__p[4] = v47;
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = v7;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v10;
        __int16 v58 = 1024;
        int v59 = v9;
        __int16 v60 = 1024;
        int v61 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s, %d invalid, %d unknown, %d good, %d bad!",  __p,  0x24u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v48 = &v51;
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v48 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
      WORD2(v52.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = v7;
      WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v52.__r_.__value_.__r.__words[2]) = v10;
      __int16 v53 = 1024;
      int v54 = v9;
      __int16 v55 = 1024;
      int v56 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "%s, %d invalid, %d unknown, %d good, %d bad!",  (const char *)&v52,  36,  LODWORD(v50.__r_.__value_.__l.__data_),  LODWORD(v50.__r_.__value_.__r.__words[1]),  LODWORD(v50.__r_.__value_.__r.__words[2]));
      uint64_t v29 = (char *)v49;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const s td::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v49);
    }

    if (v29 != __p) {
      free(v29);
    }
LABEL_107:
    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  uint64_t v16 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  __p,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  &v52,  2);
    uint64_t v18 = (char *)v17;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std ::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v17);
    if (v18 != __p) {
      free(v18);
    }
  }

void sub_10067EF7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10067F034(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    sub_10067AF00(a1);
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
    *(void *)a3 = a3 + 8;
    v33[0] = 0LL;
    v33[1] = 0LL;
    __int128 v32 = (uint64_t *)v33;
    int v7 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      do
      {
        if (sub_100C3A418((double *)v7 + 5))
        {
          if (sub_10067E254(a1, (double *)v7 + 5, (uint64_t *)(a1 + 56)))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 0;
            std::string __p = buf;
            int v8 = sub_100228E48(&v32, (int *)buf, (uint64_t)&unk_1012CF090, (unsigned int **)&__p);
            ++*((_DWORD *)v8 + 8);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101848590);
            }
            int v9 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
            {
              sub_10067CF34(v7 + 5, (std::string *)&__p);
              p_p = &__p;
              if ((v43 & 0x80000000LL) != 0) {
                p_p = __p;
              }
              *(_DWORD *)std::stringbuf::string_type buf = 136380675;
              *(void *)&uint8_t buf[4] = p_p;
              _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, centroid %{private}s is filtered out",  buf,  0xCu);
              if (SBYTE3(v43) < 0) {
                operator delete(__p);
              }
            }

            uint64_t v6 = sub_1002921D0(115, 2);
            if ((_DWORD)v6)
            {
              bzero(&__p, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101848590);
              }
              uint64_t v11 = qword_101934858;
              sub_10067CF34(v7 + 5, (std::string *)buf);
              if ((v36 & 0x80000000LL) == 0) {
                std::string::size_type v12 = buf;
              }
              else {
                std::string::size_type v12 = *(_BYTE **)buf;
              }
              int v37 = 136380675;
              __int128 v38 = v12;
              LODWORD(v30) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v11,  0LL,  "MovingApDetector, centroid %{private}s is filtered out",  &v37,  v30);
              std::stringbuf v14 = v13;
              if (SBYTE3(v36) < 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v6 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCen troids(const std::map<CLMacAddress, CLWifiAPLocation> &)",  "%s\n",  v14);
            }
          }

          else
          {
            *(_DWORD *)std::stringbuf::string_type buf = 1;
            std::string __p = buf;
            std::string::size_type v15 = sub_100228E48(&v32, (int *)buf, (uint64_t)&unk_1012CF090, (unsigned int **)&__p);
            ++*((_DWORD *)v15 + 8);
            uint64_t v6 = (uint64_t)sub_1002FAF5C((uint64_t **)a3, v7 + 4, v7 + 4, v7 + 5);
          }
        }

        else
        {
          *(_DWORD *)std::stringbuf::string_type buf = 3;
          std::string __p = buf;
          uint64_t v6 = (uint64_t)sub_100228E48(&v32, (int *)buf, (uint64_t)&unk_1012CF090, (unsigned int **)&__p);
          ++*(_DWORD *)(v6 + 32);
        }

        uint64_t v16 = (void *)v7[1];
        if (v16)
        {
          do
          {
            double v17 = v16;
            uint64_t v16 = (void *)*v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            double v17 = (void *)v7[2];
            BOOL v18 = *v17 == (void)v7;
            int v7 = v17;
          }

          while (!v18);
        }

        int v7 = v17;
      }

      while (v17 != a2 + 1);
    }

    sub_10067E2B8(v6, a2[2], &v32, (uint64_t *)(a1 + 56));
    sub_10067BA5C(a1, (uint64_t *)(a1 + 56));
    *(_DWORD *)std::stringbuf::string_type buf = 0;
    std::string __p = buf;
    int v19 = *((_DWORD *)sub_100228E48(&v32, (int *)buf, (uint64_t)&unk_1012CF090, (unsigned int **)&__p) + 8);
    if (v19 >= 1)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      __int128 v20 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = a2[2];
        uint64_t v22 = *(void *)(a3 + 16);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v19;
        __int16 v40 = 2048;
        uint64_t v41 = v21;
        __int16 v42 = 2048;
        uint64_t v43 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, %d out of %zu centroids got filtered out, %zu remaining",  (uint8_t *)&__p,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848590);
        }
        uint64_t v24 = a2[2];
        uint64_t v25 = *(void *)(a3 + 16);
        *(_DWORD *)std::stringbuf::string_type buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v24;
        __int16 v35 = 2048;
        uint64_t v36 = v25;
        LODWORD(v30) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "MovingApDetector, %d out of %zu centroids got filtered out, %zu remaining",  buf,  v30,  v31);
        uint64_t v27 = (void **)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(cons t std::map<CLMacAddress, CLWifiAPLocation> &)",  "%s\n",  v26);
        if (v27 != &__p) {
          free(v27);
        }
      }
    }

    sub_100008390((uint64_t)&v32, v33[0]);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    uint64_t v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "MovingApDetector, #warning, no centroids for cross-check",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848590);
      }
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "MovingApDetector, #warning, no centroids for cross-check",  buf,  2);
      uint64_t v29 = (void **)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)",  "%s\n",  v28);
      if (v29 != &__p) {
        free(v29);
      }
    }

    sub_1002FB114(a3, (uint64_t)a2);
  }

void sub_10067F6EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_10067F740(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void *sub_10067F76C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1B0uLL);
  uint64_t result = sub_10067F7B4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10067F7A0(_Unwind_Exception *a1)
{
}

void *sub_10067F7B4(void *a1)
{
  a1[2] = 0LL;
  *a1 = off_1018485C0;
  a1[1] = 0LL;
  sub_100F29B20((uint64_t)(a1 + 3));
  return a1;
}

void sub_10067F7EC(_Unwind_Exception *a1)
{
}

void sub_10067F800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018485C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10067F814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018485C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10067F838(uint64_t a1)
{
  return sub_100F29C08(a1 + 24);
}

void sub_10067F844()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_10067F8E0(_Unwind_Exception *a1)
{
}

void sub_10067F8F8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10067F984(_Unwind_Exception *a1)
{
}

uint64_t sub_10067F99C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101997A68, (void *)&_mh_execute_header);
}

_BYTE *sub_10067FA18(_BYTE *__dst, unsigned __int8 *a2, size_t a3)
{
  else {
    *__dst = -1;
  }
  return __dst;
}

uint64_t sub_10067FA68(unsigned __int8 *a1, void *a2)
{
  int v2 = *a1;
  if (v2 == 1)
  {
    uint64_t v3 = 2LL;
    goto LABEL_6;
  }

  if (v2 != 255)
  {
    if (v2 != 2) {
      return 1LL;
    }
    uint64_t v3 = 3LL;
LABEL_6:
    (*(void (**)(void *, unsigned __int8 *))(*a2 + 8 * v3))(a2, a1);
    return 1LL;
  }

  return 0LL;
}

void sub_10067FAC4(uint64_t a1, float a2, double a3)
{
  if (*(_BYTE *)(a1 + 48))
  {
    float v5 = sub_10067FC28((void *)a1, 20.0);
    float v6 = sub_10067FC28((void *)a1, 0.0);
    if (v5 != -9999.0)
    {
      BOOL v7 = v6 == -9999.0;
      float v8 = vabds_f32(v5, v6);
      if (!v7 && v8 < 1.0)
      {
        sub_10067FD4C((void *)a1, a3 + -4.0);
        *(_WORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0;
        *(double *)(a1 + 56) = a3;
      }
    }
  }

  else if (*(_BYTE *)(a1 + 49))
  {
    float v10 = sub_10067FC28((void *)a1, 0.0);
    float v11 = sub_10067FDD8((void *)a1);
    if (v10 != -9999.0)
    {
      BOOL v7 = v11 == -9999.0;
      float v12 = vabds_f32(v10, v11);
      if (!v7 && v12 >= 3.0) {
        *(_BYTE *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 1;
      }
    }
  }

uint64_t sub_10067FBA0(uint64_t a1, float a2, double a3)
{
  v7.n128_f64[0] = a3;
  v7.n128_u32[2] = sub_100FADFE8(a2 * 1000.0, 101320.0);
  sub_10067FFF0((void *)a1, &v7);
  uint64_t result = sub_10067FD4C((void *)a1, a3 + -44.0);
  *(_BYTE *)(a1 + 49) = (_DWORD)result != 0;
  return result;
}

float sub_10067FC28(void *a1, double a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return -9999.0;
  }
  unint64_t v3 = a1[4];
  unint64_t v4 = v3 + v2;
  unint64_t v5 = v3 + v2 - 1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  double v8 = *(double *)(*(void *)(v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v5) - a2;
  int v9 = (void *)(v6 + 8 * (v4 >> 8));
  if (v7 == v6) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *v9 + 16LL * v4;
  }
  int v12 = 0;
  double v13 = v8 + -4.0;
  float v14 = 0.0;
  while (1)
  {
    uint64_t v15 = v7 == v6 ? 0LL : *(void *)(v6 + 8 * (v3 >> 8)) + 16LL * a1[4];
    if (v10 == v15) {
      break;
    }
    if (v10 == *v9)
    {
      uint64_t v18 = *--v9;
      uint64_t v17 = v18;
      double v19 = *(double *)(v18 + 4080);
      if (v19 <= v8)
      {
        if (v19 < v13) {
          break;
        }
        float v14 = v14 + (float)((float)(*(float *)(v17 + 4088) - v14) / (float)++v12);
      }

      uint64_t v10 = *v9 + 4096LL;
    }

    else
    {
      double v16 = *(double *)(v10 - 16);
      if (v16 <= v8)
      {
        if (v16 < v13) {
          break;
        }
        float v14 = v14 + (float)((float)(*(float *)(v10 - 8) - v14) / (float)++v12);
      }
    }

    v10 -= 16LL;
  }

  float result = -9999.0;
  if (v12) {
    return v14;
  }
  return result;
}

uint64_t sub_10067FD4C(void *a1, double a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  do
  {
    unint64_t v6 = a1[4];
    a1[4] = v6 + 1;
    a1[5] = v2 - 1;
    sub_100232D40((uint64_t)a1, 1);
    uint64_t v5 = (v5 + 1);
    uint64_t v2 = a1[5];
  }

  while (v2);
  return v5;
}

float sub_10067FDD8(void *a1)
{
  uint64_t v1 = a1[5];
  if (!v1) {
    return -9999.0;
  }
  int v2 = 0;
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (uint64_t *)(v4 + 8 * (v3 >> 8));
  uint64_t v7 = *v6;
  uint64_t v8 = *v6 + 16LL * v3;
  double v9 = *(double *)v8 + 20.0;
  if (v5 == v4) {
    uint64_t v8 = 0LL;
  }
  unint64_t v10 = v3 + v1;
  float v11 = 0.0;
LABEL_5:
  uint64_t v12 = v7 - v8 + 4096;
  while (1)
  {
    uint64_t v13 = v5 == v4 ? 0LL : *(void *)(v4 + 8 * (v10 >> 8)) + 16LL * v10;
    float v11 = v11 + (float)((float)(*(float *)(v8 + 8) - v11) / (float)++v2);
    v8 += 16LL;
    v12 -= 16LL;
    if (!v12)
    {
      uint64_t v14 = v6[1];
      ++v6;
      uint64_t v7 = v14;
      uint64_t v8 = v14;
      goto LABEL_5;
    }
  }

  float result = -9999.0;
  if (v2) {
    return v11;
  }
  return result;
}

double sub_10067FEA0(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t sub_10067FEA8(uint64_t result)
{
  *(void *)(result + 56) = 0LL;
  return result;
}

void sub_10067FEB0(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v5 = v2 + *(void *)(a1 + 32) - 1;
    unint64_t v6 = *(void ***)(a1 + 8);
    uint64_t v7 = (double *)(*(char **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16 * v5);
    if (vabdd_f64(a2, *v7) <= 44.0)
    {
      for (double i = *v7 + 1.0; i < a2; double i = *v7 + 1.0)
      {
        *uint64_t v7 = i;
        v14.n128_u32[2] = -971228160;
        v14.n128_f64[0] = i;
        unint64_t v13 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1LL;
        v14.n128_u32[2] = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8LL))
                                    + 16LL * v13
                                    + 8);
        sub_10067FFF0((void *)a1, &v14);
      }
    }

    else
    {
      *(_WORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0;
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 40) = 0LL;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          uint64_t v10 = *(void *)(a1 + 16);
          unint64_t v6 = (void **)(*(void *)(a1 + 8) + 8LL);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = v6;
          unint64_t v9 = v10 - (void)v6;
        }

        while (v9 > 0x10);
      }

      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128LL;
      }

      else
      {
        if (v9 >> 3 != 2) {
          return;
        }
        uint64_t v11 = 256LL;
      }

      *(void *)(a1 + 32) = v11;
    }
  }

__n128 sub_10067FFF0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100680078(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100680078(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      __int128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100680340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10068038C(uint64_t a1, double a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  sub_10066A550(a1 + 88);
  *(double *)(a1 + 80) = a2;
  uint64_t v5 = (uint64_t *)(a1 + 80);
  sub_1002F0B04(buf);
  int v6 = sub_1002A82BC(*(uint64_t *)buf, "maxAllowedAccessPointNotificationAge", (void *)(a1 + 80));
  int v7 = v6;
  uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_5;
  }
  unint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    if (!v6) {
      goto LABEL_11;
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848620);
  }
  uint64_t v11 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *v5;
    *(_DWORD *)std::stringbuf::string_type buf = 134283521;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "@Wsb, #Warning defaults write maxAllowedAccessPointNotificationAge to %{private}.1f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848620);
    }
    uint64_t v14 = *v5;
    int v17 = 134283521;
    uint64_t v18 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@Wsb, #Warning defaults write maxAllowedAccessPointNotificationAge to %{private}.1f",  &v17,  12);
    uint64_t v16 = (char *)v15;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLWsbScanComparator::CLWsbScanComparator(const CFTimeInterval)", "%s\n", v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_10068062C(_Unwind_Exception *a1)
{
}

void sub_100680668(void *a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101997AC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101997AC0))
  {
    __cxa_atexit((void (*)(void *))sub_100680720, &qword_101997AB0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101997AC0);
  }

  if (qword_101997AC8 != -1) {
    dispatch_once(&qword_101997AC8, &stru_101848600);
  }
  uint64_t v3 = *(void *)algn_101997AB8;
  *a1 = qword_101997AB0;
  a1[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

void sub_100680724(id a1)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    unsigned __int8 v2 = (unint64_t *)(*((void *)&v4 + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

uint64_t sub_100680798(uint64_t result, void *a2)
{
  unsigned __int8 v2 = *(uint64_t **)result;
  unint64_t v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      uint64_t v10 = *v2;
      if (!sub_100353A18(a2, &v10))
      {
        memset(v9, 0, sizeof(v9));
        sub_100682C78((uint64_t)a2, &v10, &v10, (uint64_t)v9);
        uint64_t v11 = (void **)v9;
        sub_100023498(&v11);
      }

      unint64_t v5 = sub_100353A18(a2, &v10);
      if (!v5) {
        sub_10000C918("unordered_map::at: key not found");
      }
      int v6 = v5;
      int v7 = v5 + 3;
      unint64_t v8 = v6[4];
      if (v8 >= v6[5])
      {
        __n128 result = sub_100023888(v7, (uint64_t)v2);
      }

      else
      {
        sub_100023800((uint64_t)v7, (uint64_t)v2);
        __n128 result = v8 + 88;
      }

      v6[4] = result;
      v2 += 11;
    }

    while (v2 != v3);
  }

  return result;
}

void sub_100680870( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_100023498(&a14);
  _Unwind_Resume(a1);
}

void sub_10068088C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    unint64_t v5 = 0LL;
    double v6 = *(double *)(v3 + 56);
    unint64_t v31 = 0LL;
    unint64_t v32 = 0LL;
    unint64_t v33 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    while (1)
    {
      if (vabdd_f64(v6, *(double *)(v3 + 56)) <= 4.0)
      {
        if (v5 >= v33) {
          goto LABEL_18;
        }
        sub_100023800((uint64_t)&v31, v3);
        v5 += 88LL;
      }

      else
      {
        uint64_t v7 = v31;
        sub_100680F80(&v28, (uint64_t)&v31);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848640);
        }
        uint64_t v8 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v5 - v7) >> 3);
        unint64_t v9 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [a2 UTF8String];
          *(_DWORD *)std::stringbuf::string_type buf = 136446978;
          *(void *)&uint8_t buf[4] = v10;
          __int16 v43 = 2050;
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
          __int16 v45 = 2050;
          uint64_t v46 = v8;
          __int16 v47 = 2050;
          double v48 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848640);
          }
          uint64_t v13 = qword_101934868;
          id v14 = [a2 UTF8String];
          int v34 = 136446978;
          id v35 = v14;
          __int16 v36 = 2050;
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
          __int16 v38 = 2050;
          uint64_t v39 = v8;
          __int16 v40 = 2050;
          double v41 = v6;
          LODWORD(v27) = 42;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  0LL,  "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f",  &v34,  v27);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)",  "%s\n",  v15);
          if (v15 != buf) {
            free(v15);
          }
        }

        double v6 = *(double *)(v3 + 56);
        unint64_t v11 = v31;
        for (unint64_t i = v32; i != v11; i -= 88LL)
        {
        }

        unint64_t v32 = v11;
        if (v11 >= v33)
        {
LABEL_18:
          unint64_t v5 = sub_100023888((uint64_t *)&v31, v3);
          goto LABEL_19;
        }

        sub_100023800((uint64_t)&v31, v3);
        unint64_t v5 = v11 + 88;
      }

void sub_100680F30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void **a25)
{
  a25 = (void **)&a13;
  sub_1002E067C(&a25);
  a25 = (void **)&a16;
  sub_100023498(&a25);
  _Unwind_Resume(a1);
}

void *sub_100680F80(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)sub_10000701C((uint64_t)v4, v12);
    id v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0LL;
    *((void *)v14 + 2) = 0LL;
    *(void *)id v14 = 0LL;
    *(_OWORD *)id v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    v17[2] = v14 + 24;
    sub_100682F38(a1, v17);
    uint64_t v8 = (void *)a1[1];
    sub_1006830C8(v17);
  }

  else
  {
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = 0LL;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }

  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1006810AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1006810C0(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 1)
  {
    sub_100680798(a2, a1 + 5);
    sub_10066A5A0((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    memset(v12, 0, sizeof(v12));
    sub_1002DE3C8( v12,  *(void *)a2,  *(void *)(a2 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v5 = v12;
    sub_10068088C(v12, @"bgScanCache");
    goto LABEL_5;
  }

  if (v4 == 2)
  {
    sub_100680798(a2, a1);
    sub_10066A584((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    memset(v13, 0, sizeof(v13));
    sub_1002DE3C8( v13,  *(void *)a2,  *(void *)(a2 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v5 = v13;
    sub_10068088C(v13, @"aonsensed");
LABEL_5:
    *(void *)std::stringbuf::string_type buf = v5;
    sub_100023498((void ***)buf);
    return sub_1006813A4((uint64_t)a1);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848620);
  }
  unint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = sub_10099EC00(*(_DWORD *)(a2 + 24));
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "@Wsb, warning, received WSB scan from unsupported source %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848620);
    }
    uint64_t v9 = qword_101934858;
    unint64_t v10 = sub_10099EC00(*(_DWORD *)(a2 + 24));
    int v14 = 136446210;
    uint64_t v15 = v10;
    unint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  16LL,  "@Wsb, warning, received WSB scan from unsupported source %{public}s",  &v14,  12);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWsbScanComparator::receiveWsbScanEvent(const CL::Wifi1::Events::Wifi::Wsb &)",  "%s\n",  v11);
    if (v11 != buf) {
      free(v11);
    }
  }

  return sub_1006813A4((uint64_t)a1);
}

void sub_100681380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_1006813A4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 + 40);
  for (unint64_t i = *(void **)(a1 + 56); i; unint64_t i = (void *)*i)
    sub_100681C34((void *)a1, i + 2, i + 3);
  sub_100681BC4(a1, (void *)a1);
  sub_100681BC4(a1, v2);
  int v4 = *(void **)(a1 + 16);
  if (v4)
  {
    int v5 = 0;
    do
    {
      v5 -= 1171354717 * ((v4[4] - v4[3]) >> 3);
      int v4 = (void *)*v4;
    }

    while (v4);
    int v6 = v5;
  }

  else
  {
    int v6 = 0;
  }

  sub_10066A5D8(a1 + 88, v6);
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    int v8 = 0;
    do
    {
      v8 -= 1171354717 * ((v7[4] - v7[3]) >> 3);
      uint64_t v7 = (void *)*v7;
    }

    while (v7);
    int v9 = v8;
  }

  else
  {
    int v9 = 0;
  }

  sub_10066A5E0(a1 + 88, v9);
  sub_10066A5F8((_DWORD *)(a1 + 88));
  return sub_10036E100((double *)(a1 + 88));
}

uint64_t sub_100681494(uint64_t a1, void *a2)
{
  return sub_10066A5BC(a1 + 88, -1171354717 * ((uint64_t)(a2[1] - *a2) >> 3));
}

void sub_1006814BC(uint64_t a1, uint64_t **a2)
{
  unsigned __int8 v2 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (sub_10099E9E8((uint64_t)v2) <= *(double *)(a1 + 80) + 0.0)
      {
        v2 += 11;
        int v8 = a2[1];
      }

      else
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848620);
        }
        int v5 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          sub_10099E630(v2, __p);
          int v6 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
             ? __p
             : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "@Wsb, WsbScanComparator, removing AP %{private}s as it is too old",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848620);
          }
          uint64_t v10 = qword_101934858;
          sub_10099E630(v2, &buf);
          p_std::stringbuf::string_type buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          int v15 = 136380675;
          uint64_t v16 = p_buf;
          LODWORD(v13) = 12;
          unint64_t v12 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  2LL,  "@Wsb, WsbScanComparator, removing AP %{private}s as it is too old",  &v15,  v13);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWsbScanComparator::removeAccessPointsTooOld(CLWifiService_Type::AccessPointVector &)",  "%s\n",  (const char *)v12);
          if (v12 != __p) {
            free(v12);
          }
        }

        sub_100683148((uint64_t)__p, (uint64_t)(v2 + 11), (uint64_t)a2[1], (uint64_t)v2);
        int v8 = v7;
        for (unint64_t i = a2[1]; i != v8; i -= 11)
        {
        }

        a2[1] = v8;
      }
    }

    while (v2 != v8);
  }

void sub_100681770(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
  {
    if (i[3] == i[4])
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848620);
      }
      int v4 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        sub_1007EC360(__p);
        int v5 = __p;
        if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v5 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "@Wsb, failed validity check, mac %{private}s has 0 AP",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848620);
        }
        uint64_t v13 = qword_101934858;
        sub_1007EC360(&buf);
        p_std::stringbuf::string_type buf = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
        }
        int v17 = 136380675;
        uint64_t v18 = p_buf;
        LODWORD(v16) = 12;
        int v15 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v13,  17LL,  "@Wsb, failed validity check, mac %{private}s has 0 AP",  &v17,  v16);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)",  "%s\n",  (const char *)v15);
        if (v15 != __p) {
          free(v15);
        }
      }
    }

    uint64_t v7 = (uint64_t *)i[3];
    int v6 = (uint64_t *)i[4];
    while (v7 != v6)
    {
      if (sub_10099E9E8((uint64_t)v7) > *(double *)(a1 + 80) + 0.2)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848620);
        }
        int v8 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
        {
          sub_10099E630(v7, __p);
          int v9 = __p;
          if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v9 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0x3FC999999999999ALL;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "@Wsb, failed validity check, ap is too old, %{private}s, buffer, %{public}.1f",  (uint8_t *)&buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848620);
          }
          uint64_t v10 = qword_101934858;
          sub_10099E630(v7, &buf);
          unint64_t v11 = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unint64_t v11 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          int v17 = 136380931;
          uint64_t v18 = v11;
          __int16 v19 = 2050;
          uint64_t v20 = 0x3FC999999999999ALL;
          LODWORD(v16) = 22;
          unint64_t v12 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  17LL,  "@Wsb, failed validity check, ap is too old, %{private}s, buffer, %{public}.1f",  &v17,  v16);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)",  "%s\n",  (const char *)v12);
          if (v12 != __p) {
            free(v12);
          }
        }
      }

      v7 += 11;
    }
  }

void sub_100681BC4(uint64_t a1, void *a2)
{
  for (uint64_t i = a2[2]; i; uint64_t i = sub_1006831E4(a2, (uint64_t *)i))
  {
    while (1)
    {
      sub_1006814BC(a1, (uint64_t **)(i + 24));
      if (*(void *)(i + 24) == *(void *)(i + 32)) {
        break;
      }
      uint64_t i = *(void *)i;
      if (!i) {
        goto LABEL_6;
      }
    }
  }

void sub_100681C34(void *a1, void *a2, uint64_t *a3)
{
  if (sub_100353A18(a1, a2))
  {
    int v6 = sub_100353A18(a1, a2);
    if (!v6) {
      sub_10000C918("unordered_map::at: key not found");
    }
    uint64_t v7 = *a3;
    if (*a3 != a3[1])
    {
      int v8 = v6;
      uint64_t v9 = (uint64_t)(a1 + 11);
      do
      {
        uint64_t v10 = v8[3];
        if (v10 == v8[4])
        {
LABEL_24:
          v7 += 88LL;
        }

        else
        {
          uint64_t v11 = -v10;
          while (1)
          {
            __p[0].__r_.__value_.__r.__words[0] = *(void *)v7;
            v47.__r_.__value_.__r.__words[0] = *(void *)v10;
            if (!sub_1007EC0C4(__p, &v47) && *(_DWORD *)(v7 + 40) == *(_DWORD *)(v10 + 40))
            {
              unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_101997AD8);
              if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_101997AD8))
              {
                dword_101997AD0 = sub_1006823D0();
                __cxa_guard_release(&qword_101997AD8);
              }

              if (fabs((double)(*(_DWORD *)(v7 + 32) - *(_DWORD *)(v10 + 32))) <= (double)dword_101997AD0
                && (*(_BYTE *)(v7 + 72) != 0) == (*(_BYTE *)(v10 + 72) != 0))
              {
                unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_101997AE8);
                if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_101997AE8))
                {
                  qword_101997AE0 = sub_100682614();
                  __cxa_guard_release(&qword_101997AE8);
                }

                if (vabdd_f64(*(double *)(v7 + 56), *(double *)(v10 + 56)) <= *(double *)&qword_101997AE0)
                {
                  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_101997AF8);
                  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_101997AF8))
                  {
                    qword_101997AF0 = sub_10068285C();
                    __cxa_guard_release(&qword_101997AF8);
                  }
                }
              }
            }

            v10 += 88LL;
            v11 -= 88LL;
            if (v10 == v8[4]) {
              goto LABEL_24;
            }
          }

          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848620);
          }
          uint64_t v15 = qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
          {
            log = (os_log_s *)v15;
            sub_10099E630((uint64_t *)v7, __p);
            uint64_t v39 = v9;
            int size = (char)__p[0].__r_.__value_.__s.__size_;
            std::string::size_type v17 = __p[0].__r_.__value_.__r.__words[0];
            sub_10099E630((uint64_t *)v10, &v47);
            uint64_t v18 = __p;
            if (size < 0) {
              uint64_t v18 = (std::stringbuf::string_type *)v17;
            }
            __int16 v19 = &v47;
            if ((v47.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int16 v19 = (std::stringbuf::string_type *)v47.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
            _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "@Wsb, AP %{private}s from WifiManager is matched with AP %{private}s from Aonsensed",  (uint8_t *)&buf,  0x16u);
            uint64_t v9 = v39;
          }

          if (sub_1002921D0(115, 2))
          {
            uint64_t v40 = v9;
            bzero(__p, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101848620);
            }
            os_log_t loga = (os_log_t)qword_101934858;
            sub_10099E630((uint64_t *)v7, &v47);
            int v28 = (char)v47.__r_.__value_.__s.__size_;
            std::string::size_type v29 = v47.__r_.__value_.__r.__words[0];
            sub_10099E630((uint64_t *)v10, &buf);
            uint64_t v30 = &v47;
            if (v28 < 0) {
              uint64_t v30 = (std::stringbuf::string_type *)v29;
            }
            p_std::stringbuf::string_type buf = &buf;
            if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
            }
            int v42 = 136380931;
            __int16 v43 = v30;
            __int16 v44 = 2081;
            __int16 v45 = p_buf;
            LODWORD(v++*(_DWORD *)(result + 36) = 22;
            unint64_t v32 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  loga,  2LL,  "@Wsb, AP %{private}s from WifiManager is matched with AP %{private}s from Aonsensed",  &v42,  v36);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL checkIfApIsMatched(const CLWifiService_Type::AccessPoint &, CLWifiService_Type::AccessPointVector &)",  "%s\n",  (const char *)v32);
            uint64_t v9 = v40;
            if (v32 != __p) {
              free(v32);
            }
          }

          sub_100683148((uint64_t)__p, 88 - v11, v8[4], -v11);
          uint64_t v21 = v20;
          for (uint64_t i = v8[4]; i != v21; i -= 88LL)
          {
          }

          _DWORD v8[4] = v21;
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848620);
          }
          id v23 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
          {
            sub_10099E630((uint64_t *)v7, __p);
            uint64_t v24 = __p;
            if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v24 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
            }
            LODWORD(v47.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "@Wsb, removing AP %{private}s from WifiManager as it is matched with Aonsensed",  (uint8_t *)&v47,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101848620);
            }
            uint64_t v33 = qword_101934858;
            sub_10099E630((uint64_t *)v7, &v47);
            int v34 = &v47;
            if ((v47.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v34 = (std::stringbuf::string_type *)v47.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
            LODWORD(v++*(_DWORD *)(result + 36) = 12;
            id v35 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v33,  2LL,  "@Wsb, removing AP %{private}s from WifiManager as it is matched with Aonsensed",  &buf,  v36);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWsbScanComparator::checkApMatchForWifiManager(const CLMacAddress &, CLWifiService_Type::AccessPointVector &)",  "%s\n",  (const char *)v35);
            if (v35 != __p) {
              free(v35);
            }
          }

          sub_100683148((uint64_t)__p, v7 + 88, a3[1], v7);
          uint64_t v26 = v25;
          for (uint64_t j = a3[1]; j != v26; j -= 88LL)
          {
          }

          a3[1] = v26;
          sub_10066A5E8(v9);
        }
      }

      while (v7 != a3[1]);
    }
  }

void sub_10068230C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

void sub_100682378(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1006823A4(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1006823D0()
{
  HIDWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A7CB0(*(uint64_t *)buf, "maxRssiDeltaAllowed", (_DWORD *)&v8 + 1);
  int v1 = v0;
  unsigned __int8 v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1) {
        goto LABEL_6;
      }
LABEL_13:
      sub_1004F2598();
      else {
        return 0LL;
      }
    }
  }

  if (!v0) {
    goto LABEL_13;
  }
LABEL_6:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848620);
  }
  int v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v8);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "@Wsb, #Warning defaults write maxRssiDeltaAllowed to %{private}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848620);
    }
    v9[0] = 67174657;
    v9[1] = HIDWORD(v8);
    LODWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 8;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@Wsb, #Warning defaults write maxRssiDeltaAllowed to %{private}d",  v9,  v8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "int getMaxRssiDeltaAllowed()", "%s\n", v7);
  }

  return HIDWORD(v8);
}

void sub_1006825F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

double sub_100682614()
{
  double v9 = 0.0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A82BC(*(uint64_t *)&buf[0], "maxTimestampDeltaAllowed", &v9);
  int v1 = v0;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_5;
  }
  uint64_t v3 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1) {
      goto LABEL_6;
    }
  }

  else
  {
LABEL_5:
    if (v0)
    {
LABEL_6:
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848620);
      }
      int v5 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134283521;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "@Wsb, #Warning defaults write maxTimestampDeltaAllowed to %{private}.1f",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848620);
        }
        int v10 = 134283521;
        double v11 = v9;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@Wsb, #Warning defaults write maxTimestampDeltaAllowed to %{private}.1f",  &v10,  12);
        sub_10029211C("Generic", 1LL, 0, 2LL, "CFTimeInterval getMaxTimestampDeltaAllowed()", "%s\n", v8);
      }

      return v9;
    }
  }

  sub_1004F2598();
  int v7 = sub_1004F260C();
  double result = 1.0;
  if (v7) {
    return 5.0;
  }
  return result;
}

void sub_100682840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double sub_10068285C()
{
  double v9 = 0.0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A82BC(*(uint64_t *)&buf[0], "maxAgeDeltaAllowed", &v9);
  int v1 = v0;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_5;
  }
  uint64_t v3 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1) {
      goto LABEL_6;
    }
  }

  else
  {
LABEL_5:
    if (v0)
    {
LABEL_6:
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848620);
      }
      int v5 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134283521;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "@Wsb, #Warning defaults write maxAgeDeltaAllowed to %{private}.1f",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848620);
        }
        int v10 = 134283521;
        double v11 = v9;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@Wsb, #Warning defaults write maxAgeDeltaAllowed to %{private}.1f",  &v10,  12);
        sub_10029211C("Generic", 1LL, 0, 2LL, "CFTimeInterval getMaxAgeDeltaAllowed()", "%s\n", v8);
      }

      return v9;
    }
  }

  sub_1004F2598();
  int v7 = sub_1004F260C();
  double result = 1.0;
  if (v7) {
    return 5.0;
  }
  return result;
}

void sub_100682A88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100682AA4(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100682ADC(uint64_t a1, char *a2)
{
  if (a2)
  {
    unsigned __int8 v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 24);
      sub_100023498(&v4);
      operator delete(v2);
      unsigned __int8 v2 = v3;
    }

    while (v3);
  }

void sub_100682B28(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100682ADC(a1, *(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void *sub_100682B7C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB8uLL);
  double result = sub_100682BC4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100682BB0(_Unwind_Exception *a1)
{
}

void *sub_100682BC4(void *a1)
{
  a1[2] = 0LL;
  *a1 = off_101848670;
  a1[1] = 0LL;
  sub_10068038C((uint64_t)(a1 + 3), 6.0);
  return a1;
}

void sub_100682C00(_Unwind_Exception *a1)
{
}

void sub_100682C14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101848670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100682C28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101848670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100682C4C(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  sub_100682AA4(a1 + 64);
  return sub_100682AA4(v1);
}

char *sub_100682C78(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v9 = sub_1005B46E8((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unsigned __int8 v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_1007EC0B0((void *)v15 + 2, a2)) {
              return v15;
            }
          }

          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }

            else
            {
              v16 &= v11 - 1;
            }

            if (v16 != v4) {
              break;
            }
          }

          uint64_t v15 = *(char **)v15;
        }

        while (v15);
      }
    }
  }

  std::string::size_type v17 = (void *)(a1 + 16);
  uint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((void *)v15 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0LL;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1LL;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t v15 = *v25;
LABEL_38:
    void *v25 = v15;
    goto LABEL_39;
  }

  *(void *)uint64_t v15 = *v17;
  *std::string::size_type v17 = v15;
  *(void *)(v24 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v26 = *(void *)(*(void *)v15 + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }

    else
    {
      v26 &= v11 - 1;
    }

    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }

void sub_100682ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_100682EF0(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    sub_100023498(&v3);
  }

  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_100682F38(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100682FAC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100682FAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x7E0], 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_10068304C((uint64_t)v11);
  return v9;
}

uint64_t sub_10068304C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100683080(a1);
  }
  return a1;
}

void sub_100683080(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_100023498(&v3);
    v1 += 3;
  }

void **sub_1006830C8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1006830F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_100023498(&v5);
  }

uint64_t sub_100683148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      __int128 v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + _Block_object_dispose(&STACK[0x7E0], 8) = 0;
      __int128 v9 = *(_OWORD *)(v5 + 32);
      __int128 v10 = *(_OWORD *)(v5 + 48);
      __int128 v11 = *(_OWORD *)(v5 + 64);
      *(void *)(a4 + 80) = *(void *)(v5 + 80);
      *(_OWORD *)(a4 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v10;
      *(_OWORD *)(a4 + 64) = v11;
      *(_OWORD *)(a4 + 32) = v9;
      a4 += 88LL;
      v5 += 88LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t sub_1006831E4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10005BEB8(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0LL;
  if (v3) {
    sub_100682EF0((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_10068322C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1006832C8(_Unwind_Exception *a1)
{
}

void sub_1006832E0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10068336C(_Unwind_Exception *a1)
{
}

uint64_t sub_100683384@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1002DC708((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1006833D0(_Unwind_Exception *a1)
{
}

_DWORD *sub_1006833E4(_DWORD *a1, uint64_t a2)
{
  unint64_t v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10068342C(_Unwind_Exception *a1)
{
}

_DWORD *sub_100683440(_DWORD *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6 = sub_1002E0454(a1);
  uint64_t v7 = (std::string *)(v6 + 1618);
  *((void *)v6 + 811) = 0LL;
  *(_OWORD *)(v6 + 161_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  sub_1002DCA80((uint64_t)v6, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  std::string::operator=(v7, a3);
  return a1;
}

void sub_1006834B4(_Unwind_Exception *a1)
{
}

void sub_1006834DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204LL);
    if (*(_BYTE *)(a2 + 1624))
    {
      sub_100496D94(a2 + 5968, 2, v4);
      sub_10049609C(a2 + 5968, 5, 9u, v4);
    }

    else
    {
      sub_100496D94(a2 + 5968, 1, v4);
    }
  }

void sub_100683588(_Unwind_Exception *a1)
{
}

void sub_1006835A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v354 = 0LL;
  std::string __p = 0LL;
  v355 = 0LL;
  v351 = 0LL;
  v350 = 0LL;
  v352 = 0LL;
  for (uint64_t i = *(uint64_t **)(a1 + 1200); i; uint64_t i = (uint64_t *)*i)
  {
    int v5 = sub_100B83D5C(a1 + 3208);
    if (v5)
    {
      *(void *)__src = sub_1005B46E8(a1 + 3208);
      LOBYTE(v5) = sub_1007EC0B0(i + 2, __src);
    }

    uint64_t v6 = i + 3;
    double v7 = vabdd_f64(*(double *)(a1 + 6384), *((double *)i + 13));
    if ((v5 & 1) != 0 || v7 <= 5.0)
    {
      __int128 v8 = v354;
      if (v354 >= (_OWORD *)v355)
      {
        __int128 v14 = __p;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v354 - (_BYTE *)__p) >> 5);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0x2AAAAAAAAAAAAAALL) {
          goto LABEL_417;
        }
        if (0x5555555555555556LL * ((v355 - (_BYTE *)__p) >> 5) > v16) {
          unint64_t v16 = 0x5555555555555556LL * ((v355 - (_BYTE *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v355 - (_BYTE *)__p) >> 5) >= 0x155555555555555LL) {
          unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          float v18 = (char *)sub_1003F6AEC((uint64_t)&v355, v17);
          __int128 v8 = v354;
          __int128 v14 = __p;
        }

        else
        {
          float v18 = 0LL;
        }

        float v19 = &v18[96 * v15];
        __int128 v20 = *(_OWORD *)(i + 5);
        *(_OWORD *)float v19 = *v6;
        *((_OWORD *)v19 + 1) = v20;
        __int128 v21 = *(_OWORD *)(i + 7);
        __int128 v22 = *(_OWORD *)(i + 9);
        __int128 v23 = *(_OWORD *)(i + 13);
        *((_OWORD *)v19 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v19 + 5) = v23;
        *((_OWORD *)v19 + 2) = v21;
        *((_OWORD *)v19 + 3) = v22;
        if (v8 == v14)
        {
          std::string::size_type v29 = &v18[96 * v15];
        }

        else
        {
          uint64_t v24 = &v18[96 * v15];
          do
          {
            __int128 v25 = *(v8 - 5);
            *((_OWORD *)v24 - 6) = *(v8 - 6);
            *((_OWORD *)v24 - 5) = v25;
            __int128 v26 = *(v8 - 4);
            __int128 v27 = *(v8 - 3);
            __int128 v28 = *(v8 - 1);
            std::string::size_type v29 = v24 - 96;
            *((_OWORD *)v24 - 2) = *(v8 - 2);
            *((_OWORD *)v24 - 1) = v28;
            *((_OWORD *)v24 - 4) = v26;
            *((_OWORD *)v24 - 3) = v27;
            v8 -= 6;
            v24 -= 96;
          }

          while (v8 != v14);
        }

        __int128 v13 = v19 + 96;
        std::string __p = v29;
        v354 = v19 + 96;
        v355 = &v18[96 * v17];
        if (v14) {
          operator delete(v14);
        }
      }

      else
      {
        __int128 v9 = *(_OWORD *)(i + 5);
        _OWORD *v354 = *v6;
        v8[1] = v9;
        __int128 v10 = *(_OWORD *)(i + 7);
        __int128 v11 = *(_OWORD *)(i + 9);
        __int128 v12 = *(_OWORD *)(i + 13);
        _DWORD v8[4] = *(_OWORD *)(i + 11);
        v8[5] = v12;
        void v8[2] = v10;
        void v8[3] = v11;
        __int128 v13 = v8 + 6;
      }

      v354 = v13;
    }

    if (v7 <= 30.0)
    {
      uint64_t v30 = v351;
      if (v351 >= v352)
      {
        uint64_t v36 = (char *)v350;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v351 - (_BYTE *)v350) >> 5);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0x2AAAAAAAAAAAAAALL) {
LABEL_417:
        }
          sub_100007008();
        if (0x5555555555555556LL * ((v352 - (_BYTE *)v350) >> 5) > v38) {
          unint64_t v38 = 0x5555555555555556LL * ((v352 - (_BYTE *)v350) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v352 - (_BYTE *)v350) >> 5) >= 0x155555555555555LL) {
          unint64_t v39 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_1003F6AEC((uint64_t)&v352, v39);
          uint64_t v30 = v351;
          uint64_t v36 = (char *)v350;
        }

        else
        {
          uint64_t v40 = 0LL;
        }

        double v41 = &v40[32 * ((v351 - (_BYTE *)v350) >> 5)];
        __int128 v42 = *(_OWORD *)(i + 5);
        *(_OWORD *)double v41 = *v6;
        *((_OWORD *)v41 + 1) = v42;
        __int128 v43 = *(_OWORD *)(i + 7);
        __int128 v44 = *(_OWORD *)(i + 9);
        __int128 v45 = *(_OWORD *)(i + 13);
        *((_OWORD *)v41 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v41 + 5) = v45;
        *((_OWORD *)v41 + 2) = v43;
        *((_OWORD *)v41 + 3) = v44;
        if (v30 == v36)
        {
          std::string v51 = &v40[96 * v37];
        }

        else
        {
          uint64_t v46 = &v40[96 * v37];
          do
          {
            __int128 v47 = *((_OWORD *)v30 - 5);
            *((_OWORD *)v46 - 6) = *((_OWORD *)v30 - 6);
            *((_OWORD *)v46 - 5) = v47;
            __int128 v48 = *((_OWORD *)v30 - 4);
            __int128 v49 = *((_OWORD *)v30 - 3);
            __int128 v50 = *((_OWORD *)v30 - 1);
            std::string v51 = v46 - 96;
            *((_OWORD *)v46 - 2) = *((_OWORD *)v30 - 2);
            *((_OWORD *)v46 - 1) = v50;
            *((_OWORD *)v46 - 4) = v48;
            *((_OWORD *)v46 - 3) = v49;
            v30 -= 96;
            v46 -= 96;
          }

          while (v30 != v36);
        }

        id v35 = v41 + 96;
        v350 = v51;
        v351 = v41 + 96;
        v352 = &v40[96 * v39];
        if (v36) {
          operator delete(v36);
        }
      }

      else
      {
        __int128 v31 = *(_OWORD *)(i + 5);
        *(_OWORD *)v351 = *v6;
        *((_OWORD *)v30 + 1) = v31;
        __int128 v32 = *(_OWORD *)(i + 7);
        __int128 v33 = *(_OWORD *)(i + 9);
        __int128 v34 = *(_OWORD *)(i + 13);
        *((_OWORD *)v30 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v30 + 5) = v34;
        *((_OWORD *)v30 + 2) = v32;
        *((_OWORD *)v30 + 3) = v33;
        id v35 = v30 + 96;
      }

      v351 = v35;
    }
  }

  v349[1] = 0LL;
  v349[0] = 0LL;
  v348 = v349;
  v346 = 0LL;
  uint64_t v345 = 0LL;
  unint64_t v347 = 0LL;
  for (uint64_t j = *(double **)(a1 + 1160); j; uint64_t j = *(double **)j)
  {
    double v53 = j[10];
    double v54 = *(double *)(a1 + 6384);
    __int128 v55 = sub_1005CE368((void *)(a1 + 1264), (void *)j + 2);
    double v56 = vabdd_f64(v54, v53);
    if (v56 <= 30.0 && v55 == 0LL)
    {
      sub_1007EC360(&v315);
      int v58 = *((_DWORD *)j + 14);
      *(std::string *)__src = v315;
      memset(&v315, 0, sizeof(v315));
      *(_DWORD *)&__src[24] = v58;
      sub_1003F95E8((uint64_t **)&v348, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
    }

    int v59 = sub_100B83D5C(a1 + 3208);
    if (v59)
    {
      *(void *)__src = sub_1005B46E8(a1 + 3208);
      int v59 = sub_1007EC0B0((void *)j + 2, __src);
    }

    if (v56 <= 5.0 || v59 != 0)
    {
      sub_1007EC360(&v315);
      int v61 = v346;
      if ((unint64_t)v346 >= v347)
      {
        unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v346[-v345] >> 3);
        unint64_t v64 = v63 + 1;
        if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v65 = v64;
        }
        *(void *)&__src[32] = &v347;
        if (v65) {
          __int16 v66 = (char *)sub_10000701C((uint64_t)&v347, v65);
        }
        else {
          __int16 v66 = 0LL;
        }
        __int16 v67 = &v66[24 * v63];
        *(void *)__src = v66;
        *(void *)&__src[8] = v67;
        *(void *)&__src[24] = &v66[24 * v65];
        __int128 v68 = *(_OWORD *)&v315.__r_.__value_.__l.__data_;
        *((void *)v67 + 2) = v315.__r_.__value_.__l.__cap_;
        *(_OWORD *)__int16 v67 = v68;
        memset(&v315, 0, sizeof(v315));
        *(void *)&__src[16] = v67 + 24;
        sub_100013F10(&v345, __src);
        __int16 v69 = v346;
        sub_100014098((uint64_t)__src);
        v346 = v69;
      }

      else
      {
        __int128 v62 = *(_OWORD *)&v315.__r_.__value_.__l.__data_;
        *((void *)v346 + 2) = v315.__r_.__value_.__l.__cap_;
        *int v61 = v62;
        v346 = (char *)v61 + 24;
      }
    }
  }

  memset(&v315, 0, sizeof(v315));
  double v70 = (double *)__p;
  __int16 v71 = (double *)v354;
  if (__p == v354)
  {
    int v94 = 0;
  }

  else
  {
    do
    {
      if (sub_100C3A418(v70) && v70[4] > 0.0)
      {
        int size = (_OWORD *)v315.__r_.__value_.__l.__size_;
        if (v315.__r_.__value_.__l.__size_ >= v315.__r_.__value_.__l.__cap_)
        {
          uint64_t v78 = (_OWORD *)v315.__r_.__value_.__r.__words[0];
          unint64_t v79 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v315.__r_.__value_.__l.__size_ - v315.__r_.__value_.__r.__words[0]) >> 5);
          unint64_t v80 = v79 + 1;
          if (v79 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          if (0x5555555555555556LL
             * ((uint64_t)(v315.__r_.__value_.__l.__cap_ - v315.__r_.__value_.__r.__words[0]) >> 5) > v80)
            unint64_t v80 = 0x5555555555555556LL
                * ((uint64_t)(v315.__r_.__value_.__l.__cap_ - v315.__r_.__value_.__r.__words[0]) >> 5);
          if (0xAAAAAAAAAAAAAAABLL {
          else
          }
            unint64_t v81 = v80;
          if (v81)
          {
            int v82 = (char *)sub_1003F6AEC((uint64_t)&v315.__r_.__value_.__l.__cap_, v81);
            int size = (_OWORD *)v315.__r_.__value_.__l.__size_;
            uint64_t v78 = (_OWORD *)v315.__r_.__value_.__r.__words[0];
          }

          else
          {
            int v82 = 0LL;
          }

          __int16 v83 = &v82[96 * v79];
          __int128 v84 = *((_OWORD *)v70 + 1);
          *(_OWORD *)__int16 v83 = *(_OWORD *)v70;
          *((_OWORD *)v83 + 1) = v84;
          __int128 v85 = *((_OWORD *)v70 + 2);
          __int128 v86 = *((_OWORD *)v70 + 3);
          __int128 v87 = *((_OWORD *)v70 + 5);
          *((_OWORD *)v83 + 4) = *((_OWORD *)v70 + 4);
          *((_OWORD *)v83 + 5) = v87;
          *((_OWORD *)v83 + 2) = v85;
          *((_OWORD *)v83 + 3) = v86;
          if (size == v78)
          {
            std::string::size_type v93 = (std::string::size_type)&v82[96 * v79];
          }

          else
          {
            int v88 = &v82[96 * v79];
            do
            {
              __int128 v89 = *(size - 5);
              *((_OWORD *)v88 - 6) = *(size - 6);
              *((_OWORD *)v88 - 5) = v89;
              __int128 v90 = *(size - 4);
              __int128 v91 = *(size - 3);
              __int128 v92 = *(size - 1);
              std::string::size_type v93 = (std::string::size_type)(v88 - 96);
              *((_OWORD *)v88 - 2) = *(size - 2);
              *((_OWORD *)v88 - 1) = v92;
              *((_OWORD *)v88 - 4) = v90;
              *((_OWORD *)v88 - 3) = v91;
              size -= 6;
              v88 -= 96;
            }

            while (size != v78);
          }

          std::string::size_type v77 = (std::string::size_type)(v83 + 96);
          v315.__r_.__value_.__r.__words[0] = v93;
          v315.__r_.__value_.__l.__size_ = (std::string::size_type)(v83 + 96);
          v315.__r_.__value_.__l.__cap_ = (std::string::size_type)&v82[96 * v81];
          if (v78) {
            operator delete(v78);
          }
        }

        else
        {
          __int128 v73 = *((_OWORD *)v70 + 1);
          *(_OWORD *)v315.__r_.__value_.__l.__size_ = *(_OWORD *)v70;
          size[1] = v73;
          __int128 v74 = *((_OWORD *)v70 + 2);
          __int128 v75 = *((_OWORD *)v70 + 3);
          __int128 v76 = *((_OWORD *)v70 + 5);
          size[4] = *((_OWORD *)v70 + 4);
          size[5] = v76;
          size[2] = v74;
          size[3] = v75;
          std::string::size_type v77 = (std::string::size_type)(size + 6);
        }

        v315.__r_.__value_.__l.__size_ = v77;
      }

      v70 += 12;
    }

    while (v70 != v71);
    int v94 = -1431655765 * ((v315.__r_.__value_.__l.__size_ - v315.__r_.__value_.__r.__words[0]) >> 5);
  }

  __int16 v95 = v346;
  uint64_t v96 = v345;
  HIDWORD(v97) = -1030792151 * rand() + 85899344;
  LODWORD(v97) = HIDWORD(v97);
  if ((v97 >> 2) <= 0x28F5C28)
  {
    *(void *)__src = _NSConcreteStackBlock;
    *(void *)&__src[8] = 3221225472LL;
    *(void *)&__src[16] = sub_10068CA1C;
    *(void *)&__src[24] = &unk_1018486F8;
    *(_DWORD *)&__src[32] = -1431655765 * ((unint64_t)&v95[-v96] >> 3);
    *(_DWORD *)&__src[36] = v94;
    *(_DWORD *)&__src[40] = (int)((double)v94 * 100.0 / (double)*(int *)&__src[32]);
    AnalyticsSendEventLazy(@"com.apple.locationd.WifiLatLonCentroidVsScan", __src);
  }

  if (v315.__r_.__value_.__r.__words[0])
  {
    v315.__r_.__value_.__l.__size_ = v315.__r_.__value_.__r.__words[0];
    operator delete(v315.__r_.__value_.__l.__data_);
  }

  uint64_t v333 = 0LL;
  char v334 = 0;
  uint64_t v338 = 0LL;
  char v339 = 0;
  memset(v331, 0, sizeof(v331));
  int v332 = 0;
  uint64_t v336 = 0LL;
  uint64_t v335 = 0LL;
  __int16 v337 = 0;
  __int128 v340 = 0u;
  memset(v341, 0, sizeof(v341));
  uint64_t v342 = 0xFFFFFFFFLL;
  *(_OWORD *)v343 = 0u;
  memset(v344, 0, sizeof(v344));
  uint64_t v328 = 0LL;
  uint64_t v327 = 0LL;
  unsigned int v330 = 0;
  uint64_t v329 = 0LL;
  sub_10068940C( (uint64_t)&v348,  (uint64_t *)&__p,  (uint64_t *)&v350,  a1 + 3328,  a1 + 4944,  a3 + 3016,  *(void **)(a1 + 3192),  &v327,  v319,  *(double *)(a1 + 6384),  (uint64_t)v331,  *(_DWORD *)(a1 + 6372));
  *(void *)&v322[12] = *(void *)(a1 + 6384);
  LODWORD(v323) = 4;
  sub_10068AD98(a1, (uint64_t)v319);
  sub_100A6B784(&v315, &__p);
  sub_100A6B788((uint64_t)&v315);
  sub_100A6B790((double *)&v315, (uint64_t)v319);
  sub_100A6C358((uint64_t)&v315, (__int128 *)(a1 + 3328), (char *)(a1 + 3488));
  sub_100A6C254((uint64_t)&v315, v319);
  sub_100A6C3AC((uint64_t)&v315, (uint64_t)v319);
  sub_10068AD98(a1, (uint64_t)v319);
  unsigned int v98 = *(_DWORD *)&v325[28];
  if (v98 >= *(_DWORD *)sub_100F4CD5C() && sub_100869780((uint64_t)v319))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    __int16 v99 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      sub_100869A44((uint64_t)v319, (std::stringbuf::string_type *)__src);
      uint64_t v100 = __src[23] >= 0 ? __src : *(_BYTE **)__src;
      *(_DWORD *)std::stringbuf::string_type buf = 136380675;
      *(void *)&uint8_t buf[4] = v100;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEBUG,  "WifiCalc, integrity, updating reference multi-AP wifi location to %{private}s",  buf,  0xCu);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848798);
      }
      uint64_t v217 = qword_101934858;
      sub_100869A44((uint64_t)v319, (std::stringbuf::string_type *)buf);
      if ((SBYTE7(v369) & 0x80u) == 0) {
        v218 = buf;
      }
      else {
        v218 = *(uint8_t **)buf;
      }
      *(_DWORD *)v367 = 136380675;
      *(void *)&v367[4] = v218;
      LODWORD(v229) = 12;
      v219 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  v217,  2LL,  "WifiCalc, integrity, updating reference multi-AP wifi location to %{private}s",  v367,  v229);
      if (SBYTE7(v369) < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v219);
      if (v219 != __src) {
        free(v219);
      }
    }

    __int128 v101 = *(_OWORD *)&v325[16];
    *(_OWORD *)(a3 + 5256) = *(_OWORD *)v325;
    *(_OWORD *)(a3 + 5272) = v101;
    *(_OWORD *)(a3 + 528_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)&v325[32];
    __int128 v102 = *(_OWORD *)&v322[16];
    *(_OWORD *)(a3 + 5192) = *(_OWORD *)v322;
    *(_OWORD *)(a3 + 520_Block_object_dispose(&STACK[0x7E0], 8) = v102;
    __int128 v103 = v324;
    *(_OWORD *)(a3 + 5224) = v323;
    *(_OWORD *)(a3 + 5240) = v103;
    __int128 v104 = v319[1];
    *(_OWORD *)(a3 + 512_Block_object_dispose(&STACK[0x7E0], 8) = v319[0];
    *(_OWORD *)(a3 + 5144) = v104;
    __int128 v105 = v321;
    *(_OWORD *)(a3 + 5160) = v320;
    *(void *)(a3 + 5304) = v326;
    *(_OWORD *)(a3 + 5176) = v105;
    sub_1008D83E8((uint64_t)v319, (uint64_t)__src);
    memcpy((void *)(a3 + 5312), __src, 0x201uLL);
    sub_10005F550(a3 + 5832, v376);
    __int128 v106 = v376[3];
    *(_OWORD *)(a3 + 5896) = v376[4];
    __int128 v107 = v377[0];
    *(_OWORD *)(a3 + 5912) = v376[5];
    *(_OWORD *)(a3 + 592_Block_object_dispose(&STACK[0x7E0], 8) = v107;
    __int128 v108 = v376[2];
    *(_OWORD *)(a3 + 584_Block_object_dispose(&STACK[0x7E0], 8) = v376[1];
    *(_OWORD *)(a3 + 5864) = v108;
    *(void *)(a3 + 5941) = *(void *)((char *)v377 + 13);
    *(_OWORD *)(a3 + 5880) = v106;
    __int16 v109 = (std::__shared_weak_count *)*((void *)&v376[0] + 1);
    if (*((void *)&v376[0] + 1))
    {
      uint64_t v110 = (unint64_t *)(*((void *)&v376[0] + 1) + 8LL);
      do
        unint64_t v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }

  sub_100F76854(__src);
  uint64_t v112 = sub_100F7F1D4(*(uint64_t *)__src);
  __int128 v113 = (void *)v112;
  int v114 = *(std::__shared_weak_count **)&__src[8];
  if (!*(void *)&__src[8]) {
    goto LABEL_125;
  }
  __int16 v115 = (unint64_t *)(*(void *)&__src[8] + 8LL);
  do
    unint64_t v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if (!v113) {
      goto LABEL_129;
    }
  }

  else
  {
LABEL_125:
    if (!v112) {
      goto LABEL_129;
    }
  }

  if ([v113 isValid])
  {
    [v113 submitMetricsIfPossible:sub_100B83D5C(a1 + 3208)];
    [v113 purgeRecordsWithDistanceLargerThanThreshold:v319];
  }

LABEL_175:
  if (v354 != __p)
  {
    unint64_t v137 = (unint64_t)((char *)v354 - (_BYTE *)__p) >> 5;
    unint64_t v138 = *(void *)(a1 + 1128);
    if (v138) {
      unint64_t v139 = (100 * *(_DWORD *)&v325[28]) / v138;
    }
    else {
      LODWORD(v139) = -1;
    }
    int v140 = -*(_DWORD *)&v325[28];
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    int v141 = v140 - 1431655765 * v137;
    uint64_t v142 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v143 = *(void *)(a1 + 1128);
      *(_DWORD *)__src = 67241218;
      *(_DWORD *)&__src[4] = v143;
      *(_WORD *)&__src[8] = 2082;
      *(void *)&__src[10] = a2;
      *(_WORD *)&__src[18] = 1026;
      *(_DWORD *)&__src[20] = *(_DWORD *)&v325[28];
      *(_WORD *)&__src[24] = 1026;
      *(_DWORD *)&__src[26] = v141;
      *(_WORD *)&__src[30] = 1026;
      *(_DWORD *)&__src[32] = v139;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEBUG,  "WlpMetric, fixaps, %{public}d, trigger, %{public}s, used, %{public}d, out, %{public}d, pct, %{public}d",  __src,  0x24u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      uint64_t v209 = *(void *)(a1 + 1128);
      *(_DWORD *)v367 = 67241218;
      *(_DWORD *)&v367[4] = v209;
      *(_WORD *)&v367[8] = 2082;
      *(void *)&v367[10] = a2;
      *(_WORD *)&v367[18] = 1026;
      *(_DWORD *)&v367[20] = *(_DWORD *)&v325[28];
      *(_WORD *)&v367[24] = 1026;
      *(_DWORD *)&v367[26] = v141;
      *(_WORD *)&v367[30] = 1026;
      *(_DWORD *)&v367[32] = v139;
      LODWORD(v229) = 36;
      v210 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WlpMetric, fixaps, %{public}d, trigger, %{public}s, used, %{public}d, out, %{public}d, pct, %{public}d",  v367,  v229);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v210);
      if (v210 != __src) {
        free(v210);
      }
    }

    if ((*(_BYTE *)(a1 + 6440) & 0xF) == 0)
    {
      v297[0] = _NSConcreteStackBlock;
      v297[1] = 3221225472LL;
      v297[2] = sub_10068AEA0;
      v297[3] = &unk_101848738;
      __int128 v306 = *(_OWORD *)v325;
      __int128 v307 = *(_OWORD *)&v325[16];
      __int128 v308 = *(_OWORD *)&v325[32];
      __int128 v302 = *(_OWORD *)v322;
      __int128 v303 = *(_OWORD *)&v322[16];
      __int128 v304 = v323;
      __int128 v305 = v324;
      __int128 v298 = v319[0];
      __int128 v299 = v319[1];
      __int128 v300 = v320;
      __int128 v301 = v321;
      uint64_t v309 = v326;
      uint64_t v310 = a2;
      int v311 = v141;
      int v312 = v139;
      AnalyticsSendEventLazy(@"com.apple.clx.wifiloc.fixaps", v297);
    }

    if (*(_DWORD *)&v325[28])
    {
      if (*(_DWORD *)&v325[28] == 1) {
        uint64_t v144 = "1AP";
      }
      else {
        uint64_t v144 = "MultiAP";
      }
      if (sub_10029286C(*(double *)((char *)v319 + 4), *(double *)((char *)v319 + 12)))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848798);
        }
        __int16 v145 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(void *)&__src[4] = "wifi, null";
          *(_WORD *)&__src[12] = 2081;
          *(void *)&__src[14] = v144;
          _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEBUG,  "ClxMetric, islands, %{private}s, %{private}s",  __src,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848798);
          }
          *(_DWORD *)v367 = 136380931;
          *(void *)&v367[4] = "wifi, null";
          *(_WORD *)&v367[12] = 2081;
          *(void *)&v367[14] = v144;
          LODWORD(v229) = 22;
          v220 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "ClxMetric, islands, %{private}s, %{private}s",  v367,  v229);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v220);
          if (v220 != __src) {
            free(v220);
          }
        }

        v296[0] = _NSConcreteStackBlock;
        v296[1] = 3221225472LL;
        v296[2] = sub_10068AF80;
        v296[3] = &unk_101820718;
        v296[4] = v144;
        AnalyticsSendEventLazy(@"com.apple.clx.islands", v296);
      }

      if (*(double *)((char *)v319 + 4) == -1.0 && *(double *)((char *)v319 + 12) == -1.0)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848798);
        }
        uint64_t v146 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(void *)&__src[4] = "wifi, sentinel";
          *(_WORD *)&__src[12] = 2081;
          *(void *)&__src[14] = v144;
          _os_log_impl( (void *)&_mh_execute_header,  v146,  OS_LOG_TYPE_DEBUG,  "ClxMetric, islands, %{private}s, %{private}s",  __src,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848798);
          }
          *(_DWORD *)v367 = 136380931;
          *(void *)&v367[4] = "wifi, sentinel";
          *(_WORD *)&v367[12] = 2081;
          *(void *)&v367[14] = v144;
          LODWORD(v229) = 22;
          v221 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "ClxMetric, islands, %{private}s, %{private}s",  v367,  v229);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v221);
          if (v221 != __src) {
            free(v221);
          }
        }

        v295[0] = _NSConcreteStackBlock;
        v295[1] = 3221225472LL;
        v295[2] = sub_10068B028;
        v295[3] = &unk_101820718;
        v295[4] = v144;
        AnalyticsSendEventLazy(@"com.apple.clx.islands", v295);
      }
    }
  }

  *(double *)&v322[24] = *(double *)(a1 + 6160) * 1.5;
  *(_DWORD *)v325 = sub_100989D60((uint64_t)v319, a3 + 5128, a3 + 5312, a1 + 4128, a1 + 4288);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848778);
  }
  __int16 v147 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__src = 67241730;
    *(_DWORD *)&__src[4] = *(_DWORD *)&v325[28];
    *(_WORD *)&__src[8] = 2050;
    *(void *)&__src[10] = *(void *)((char *)&v319[1] + 4);
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = *(_DWORD *)&v325[32];
    *(_WORD *)&__src[24] = 2050;
    *(void *)&__src[26] = *(void *)((char *)&v320 + 4);
    *(_WORD *)&__src[34] = 1026;
    *(_DWORD *)&__src[36] = *(_DWORD *)&v322[20];
    *(_WORD *)&__src[40] = 2082;
    *(void *)&__src[42] = a2;
    *(_WORD *)&__src[50] = 2050;
    *(void *)&__src[52] = *(void *)&v322[12];
    _os_log_impl( (void *)&_mh_execute_header,  v147,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, compute, %{public}u, hacc, %{public}.1f, vaps, %{public}u, vacc, %{public}.1f, conf, %{public}d, reason , %{public}s, time, %{public}.1f",  __src,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__src, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    *(_DWORD *)v367 = 67241730;
    *(_DWORD *)&v367[4] = *(_DWORD *)&v325[28];
    *(_WORD *)&v367[8] = 2050;
    *(void *)&v367[10] = *(void *)((char *)&v319[1] + 4);
    *(_WORD *)&v367[18] = 1026;
    *(_DWORD *)&v367[20] = *(_DWORD *)&v325[32];
    *(_WORD *)&v367[24] = 2050;
    *(void *)&v367[26] = *(void *)((char *)&v320 + 4);
    *(_WORD *)&v367[34] = 1026;
    *(_DWORD *)&v367[36] = *(_DWORD *)&v322[20];
    *(_WORD *)&v367[40] = 2082;
    *(void *)&v367[42] = a2;
    *(_WORD *)&v367[50] = 2050;
    *(void *)&v367[52] = *(void *)&v322[12];
    LODWORD(v229) = 60;
    v208 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, compute, %{public}u, hacc, %{public}.1f, vaps, %{public}u, vacc, %{public}.1f, conf, %{p ublic}d, reason, %{public}s, time, %{public}.1f",  v367,  v229);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v208);
    if (v208 != __src) {
      free(v208);
    }
  }

  if (sub_100869780((uint64_t)v319))
  {
    int v148 = *(_DWORD *)(a1 + 3328);
    double v149 = *(double *)(a1 + 3332);
    double v150 = *(double *)(a1 + 3340);
    double v151 = *(double *)(a1 + 3348);
    __int128 v152 = *(_OWORD *)(a1 + 3372);
    *(_OWORD *)v364 = *(_OWORD *)(a1 + 3356);
    __int128 v365 = v152;
    __int128 v366 = *(_OWORD *)(a1 + 3388);
    double v153 = *(double *)(a1 + 3404);
    uint64_t v293 = *(void *)(a1 + 3412);
    int v294 = *(_DWORD *)(a1 + 3420);
    unsigned int v154 = *(_DWORD *)(a1 + 3424);
    __int128 v155 = *(_OWORD *)(a1 + 3428);
    __int128 v156 = *(_OWORD *)(a1 + 3444);
    __int128 v157 = *(_OWORD *)(a1 + 3460);
    *(void *)&v367[48] = *(void *)(a1 + 3476);
    *(_OWORD *)&v367[32] = v157;
    unsigned int v158 = *(_DWORD *)(a1 + 6368) - 1;
    if (v158 >= 2) {
      __int16 v159 = "moving";
    }
    else {
      __int16 v159 = "static";
    }
    double v160 = *(double *)&v322[12] - v153;
    *(_OWORD *)&v367[16] = v156;
    *(_OWORD *)v367 = v155;
    double v161 = *(double *)(a1 + 5952);
    if (v151 > 0.0 && v154 <= 0xB && ((1 << v154) & 0xC02) != 0)
    {
      if (v158 >= 2) {
        BOOL v162 = v160 < 1.25;
      }
      else {
        BOOL v162 = *(double *)&v322[12] > v161;
      }
      if (v162)
      {
        double v163 = sub_100D2EC74(*(double *)((char *)v319 + 4), *(double *)((char *)v319 + 12), v149, v150);
        else {
          double v164 = -1.0;
        }
        if (v160 <= 1.25)
        {
          int v165 = 1;
        }

        else if (v160 <= 3.0)
        {
          int v165 = 3;
        }

        else if (v160 <= 10.0)
        {
          int v165 = 10;
        }

        else if (v160 <= 30.0)
        {
          int v165 = 30;
        }

        else if (v160 <= 60.0)
        {
          int v165 = 600;
        }

        else if (v160 <= 1800.0)
        {
          int v165 = 1800;
        }

        else if (v160 <= 3600.0)
        {
          int v165 = 3600;
        }

        else if (v160 > 18000.0)
        {
          int v165 = 3601;
        }

        else
        {
          int v165 = 18000;
        }

        int v237 = v148;
        int v238 = v165;
        uint64_t v245 = *(void *)&v325[28];
        v239 = v159;
        if (BYTE4(v326)) {
          int v169 = 1;
        }
        else {
          int v169 = -1431655765 * ((unint64_t)(v328 - v327) >> 3);
        }
        if (v169 != *(_DWORD *)&v325[28])
        {
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          uint64_t v170 = (os_log_s *)qword_101934868;
          if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__src = 67240448;
            *(_DWORD *)&__src[4] = v169;
            *(_WORD *)&__src[8] = 1026;
            *(_DWORD *)&__src[10] = v245;
            _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_ERROR,  "Invalid apsUsedInCalculation, numberOfApsUsedInHorizontalCalculation. apsUsedInCalculation: %{public}u, nu mberOfApsUsedInHorizontalCalculation: %{public}u",  __src,  0xEu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(__src, 0x65CuLL);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_101848778);
            }
            *(_DWORD *)v356 = 67240448;
            *(_DWORD *)&v356[4] = v169;
            *(_WORD *)&v356[8] = 1026;
            *(_DWORD *)&v356[10] = v245;
            LODWORD(v229) = 14;
            v226 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "Invalid apsUsedInCalculation, numberOfApsUsedInHorizontalCalculation. apsUsedInCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u",  v356,  v229);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v226);
            if (v226 != __src) {
              free(v226);
            }
          }
        }

        unsigned int v171 = v330;
        int v172 = v245 - v330;
        if (BYTE4(v326)) {
          unsigned int v173 = 0;
        }
        else {
          unsigned int v173 = v330;
        }
        if (BYTE4(v326)) {
          int v174 = 0;
        }
        else {
          int v174 = v245 - v330;
        }
        int v242 = v173;
        int v243 = v174;
        if (!BYTE4(v326) && v245 < v330)
        {
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          __int16 v175 = (os_log_s *)qword_101934868;
          if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__src = 67240704;
            *(_DWORD *)&__src[4] = v171;
            *(_WORD *)&__src[8] = 1026;
            *(_DWORD *)&__src[10] = v172;
            *(_WORD *)&__src[14] = 1026;
            *(_DWORD *)&__src[16] = v245;
            _os_log_impl( (void *)&_mh_execute_header,  v175,  OS_LOG_TYPE_ERROR,  "Invalid tile, ALS AP counts. numberOfTileApsUsedInHorizontalCalculation: %{public}u, numberOfAlsApsUsedInH orizontalCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u",  __src,  0x14u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(__src, 0x65CuLL);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_101848778);
            }
            *(_DWORD *)v356 = 67240704;
            *(_DWORD *)&v356[4] = v171;
            *(_WORD *)&v356[8] = 1026;
            *(_DWORD *)&v356[10] = v172;
            LOWORD(v357) = 1026;
            *(_DWORD *)((char *)&v357 + 2) = v245;
            LODWORD(v229) = 20;
            v227 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "Invalid tile, ALS AP counts. numberOfTileApsUsedInHorizontalCalculation: %{public}u, number OfAlsApsUsedInHorizontalCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u",  v356,  v229);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v227);
            if (v227 != __src) {
              free(v227);
            }
          }
        }

        int v236 = sub_1006891FC(v243, v245, 100LL);
        int v235 = sub_1006891FC(v242, v245, 100LL);
        unsigned int v176 = *(_DWORD *)(a3 + 1208);
        int v240 = *(_DWORD *)(a3 + 1288);
        int v241 = *(_DWORD *)(a3 + 1248);
        unsigned int v177 = v240 + v241 + v176;
        int v234 = sub_1006891FC(v176, v177, 100LL);
        int v178 = sub_1006891FC(v240 + v241, v177, 100LL);
        int v233 = sub_1006891FC(v241, v177, 100LL);
        int v232 = sub_1006891FC(v240, v177, 100LL);
        int v231 = sub_1006891FC(v245, v177, 100LL);
        int v230 = sub_1006891FC(v245, v176, 100LL);
        unsigned int v179 = v176;
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        v180 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 134350082;
          *(double *)&__src[4] = v163;
          *(_WORD *)&__src[12] = 2082;
          *(void *)&__src[14] = v239;
          *(_WORD *)&__src[22] = 2050;
          *(double *)&__src[24] = v160;
          *(_WORD *)&__src[32] = 1026;
          *(_DWORD *)&__src[34] = v238;
          *(_WORD *)&__src[38] = 2050;
          *(double *)&__src[40] = v164;
          _os_log_impl( (void *)&_mh_execute_header,  v180,  OS_LOG_TYPE_DEBUG,  "WlpMetric, fixerror, %{public}.1f, agetype, %{public}s, dt, %{public}.1f, %{public}d, horizontalErrorRatio, %{public}.1f",  __src,  0x30u);
        }

        BOOL v181 = sub_1002921D0(115, 2);
        unsigned int v182 = v179;
        if (v181)
        {
          bzero(__src, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          *(_DWORD *)v356 = 134350082;
          *(double *)&v356[4] = v163;
          *(_WORD *)&v356[12] = 2082;
          v357 = v239;
          __int16 v358 = 2050;
          double v359 = v160;
          __int16 v360 = 1026;
          int v361 = v238;
          __int16 v362 = 2050;
          double v363 = v164;
          LODWORD(v229) = 48;
          v222 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WlpMetric, fixerror, %{public}.1f, agetype, %{public}s, dt, %{public}.1f, %{public}d, horizon talErrorRatio, %{public}.1f",  v356,  v229);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v222);
          if (v222 != __src) {
            free(v222);
          }
          unsigned int v182 = v179;
        }

        if ((*(_BYTE *)(a1 + 6440) & 0xF) == 0)
        {
          v248[0] = _NSConcreteStackBlock;
          v248[1] = 3221225472LL;
          v248[2] = sub_10068B0D0;
          v248[3] = &unk_101848758;
          *(double *)&v248[4] = v163;
          v248[5] = v239;
          *(double *)&v248[6] = v164;
          v248[7] = v319;
          int v261 = v238;
          int v262 = v237;
          double v263 = v149;
          double v264 = v150;
          __int128 v266 = *(_OWORD *)v364;
          __int128 v267 = v365;
          __int128 v268 = v366;
          double v265 = v151;
          double v269 = v153;
          int v271 = v294;
          uint64_t v270 = v293;
          unsigned int v272 = v154;
          uint64_t v276 = *(void *)&v367[48];
          __int128 v274 = *(_OWORD *)&v367[16];
          __int128 v275 = *(_OWORD *)&v367[32];
          __int128 v273 = *(_OWORD *)v367;
          uint64_t v277 = v245;
          __int128 v251 = v320;
          __int128 v252 = v321;
          __int128 v250 = v319[1];
          __int128 v249 = v319[0];
          __int128 v255 = v323;
          __int128 v256 = v324;
          __int128 v253 = *(_OWORD *)v322;
          __int128 v254 = *(_OWORD *)&v322[16];
          uint64_t v260 = v326;
          __int128 v258 = *(_OWORD *)&v325[16];
          __int128 v259 = *(_OWORD *)&v325[32];
          __int128 v257 = *(_OWORD *)v325;
          int v278 = v243;
          int v279 = v242;
          int v280 = v236;
          int v281 = v235;
          unsigned int v282 = v182;
          int v283 = v241;
          int v284 = v240;
          int v285 = v240 + v241;
          unsigned int v286 = v177;
          int v287 = v234;
          int v288 = v178;
          int v289 = v233;
          int v290 = v232;
          int v291 = v231;
          int v292 = v230;
          AnalyticsSendEventLazy(@"com.apple.clx.wifiloc.fixerror", v248);
        }

        goto LABEL_287;
      }

      __int16 v167 = "timebad";
    }

    else
    {
      if (v158 >= 2) {
        BOOL v166 = v160 < 1.25;
      }
      else {
        BOOL v166 = *(double *)&v322[12] > v161;
      }
      if (v166) {
        __int16 v167 = "placebad";
      }
      else {
        __int16 v167 = "bothbad";
      }
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    double v168 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__src = 136446210;
      *(void *)&__src[4] = v167;
      _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEBUG, "WlpMetric, fixerror, %{public}s", __src, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      *(_DWORD *)v356 = 136446210;
      *(void *)&v356[4] = v167;
      LODWORD(v229) = 12;
      v215 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WlpMetric, fixerror, %{public}s",  v356,  v229);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v215);
      if (v215 != __src) {
        free(v215);
      }
    }

    if ((*(_BYTE *)(a1 + 6440) & 0xF) == 0)
    {
      v247[0] = _NSConcreteStackBlock;
      v247[1] = 3221225472LL;
      v247[2] = sub_10068B458;
      v247[3] = &unk_101820718;
      v247[4] = v167;
      AnalyticsSendEventLazy(@"com.apple.clx.wifiloc.fixerror", v247);
    }
  }

    uint64_t v121 = 0LL;
    if (!v99) {
      goto LABEL_177;
    }
    goto LABEL_176;
  }

  __int128 v106 = (sqlite3_stmt *)sub_100019240(v99);
  __int128 v107 = sqlite3_step(v106);
  __int128 v108 = v107;
  if (v107 == 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int16 v123 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      else {
        unint64_t v124 = *(void *)a3;
      }
      if (a2[23] >= 0) {
        __int128 v125 = (std::string::size_type)a2;
      }
      else {
        __int128 v125 = *(void *)a2;
      }
      else {
        __int128 v126 = *(void *)a4;
      }
      LODWORD(v274.__r_.__value_.__l.__data_) = 136446723;
      *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 4) = v124;
      WORD2(v274.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v274.__r_.__value_.__r.__words[1] + 6) = v125;
      HIWORD(v274.__r_.__value_.__r.__words[2]) = 2081;
      __int128 v275 = v126;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEBUG,  "Fence: Fence doesn't exist [%{public}s]/%{public}s/%{private}s",  (uint8_t *)&v274,  0x20u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_264;
    }
    bzero(&v274, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      __int128 v127 = *(void *)a3;
    }
    if (a2[23] >= 0) {
      uint64_t v128 = (std::string::size_type)a2;
    }
    else {
      uint64_t v128 = *(void *)a2;
    }
    else {
      __int16 v129 = *(void *)a4;
    }
    LODWORD(__str.__r_.__value_.__l.__data_) = 136446723;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v127;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v128;
    HIWORD(__str.__r_.__value_.__r.__words[2]) = 2081;
    v261.__r_.__value_.__r.__words[0] = v129;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v274,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Fence doesn't exist [%{public}s]/%{public}s/%{private}s",  &__str,  32);
    int v131 = (std::string *)v130;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)",  "%s\n",  v130);
LABEL_232:
    if (v131 != &v274) {
      free(v131);
    }
    goto LABEL_264;
  }

  if (v107 != 100)
  {
    sub_1003B5988(a1, v107);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    char v132 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      else {
        __int16 v133 = *(void *)a3;
      }
      if (a2[23] >= 0) {
        uint64_t v134 = (std::string::size_type)a2;
      }
      else {
        uint64_t v134 = *(void *)a2;
      }
      else {
        __int16 v135 = *(void *)a4;
      }
      LODWORD(v274.__r_.__value_.__l.__data_) = 136446723;
      *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 4) = v133;
      WORD2(v274.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v274.__r_.__value_.__r.__words[1] + 6) = v134;
      HIWORD(v274.__r_.__value_.__r.__words[2]) = 2081;
      __int128 v275 = v135;
      _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving fence key from database for [%{public}s/%{public}s/%{private}s",  (uint8_t *)&v274,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_264;
    }
    bzero(&v274, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      uint64_t v136 = *(void *)a3;
    }
    if (a2[23] >= 0) {
      unint64_t v137 = (std::string::size_type)a2;
    }
    else {
      unint64_t v137 = *(void *)a2;
    }
    else {
      unint64_t v138 = *(void *)a4;
    }
    LODWORD(__str.__r_.__value_.__l.__data_) = 136446723;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v136;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v137;
    HIWORD(__str.__r_.__value_.__r.__words[2]) = 2081;
    v261.__r_.__value_.__r.__words[0] = v138;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v274,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving fence key from database for [%{public}s/%{public}s/%{private}s",  &__str,  32);
    int v131 = (std::string *)v139;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)",  "%s\n",  v139);
    goto LABEL_232;
  }

  __int16 v109 = (sqlite3_stmt *)sub_100019240(v99);
  uint64_t v110 = sqlite3_column_text(v109, 11);
  if (v110) {
    unint64_t v111 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v110);
  }
  uint64_t v112 = (sqlite3_stmt *)sub_100019240(v99);
  __int128 v113 = sqlite3_column_int(v112, 9);
  sub_1003D8DD4(a1 + 272, v113, (uint64_t)&v174);
  if (sub_1008695D8((uint64_t)&v174, (uint64_t)&xmmword_101339630))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    int v114 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v274.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFence";
      _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_ERROR,  "%s,  Couldn't get centroid from database",  (uint8_t *)&v274,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v274, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFence";
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v274,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "%s,  Couldn't get centroid from database",  (const char *)&__str);
      unint64_t v116 = (std::string *)v115;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)",  "%s\n",  v115);
LABEL_278:
      if (v116 != &v274) {
        free(v116);
      }
      goto LABEL_175;
    }

    goto LABEL_175;
  }

  int v140 = (sqlite3_stmt *)sub_100019240(v99);
  int v141 = (char *)sqlite3_column_text(v140, 0);
  sub_1010DDBC0(&v172, v141);
  uint64_t v142 = (sqlite3_stmt *)sub_100019240(v99);
  uint64_t v143 = (char *)sqlite3_column_text(v142, 1);
  sub_1010DDBC0(&v170, v143);
  uint64_t v144 = (sqlite3_stmt *)sub_100019240(v99);
  __int16 v145 = (char *)sqlite3_column_text(v144, 7);
  sub_1010DDBC0(&v168, v145);
  uint64_t v146 = (sqlite3_stmt *)sub_100019240(v99);
  sqlite3_column_double(v146, 2);
  __int16 v147 = (sqlite3_stmt *)sub_100019240(v99);
  sqlite3_column_double(v147, 3);
  int v148 = (sqlite3_stmt *)sub_100019240(v99);
  sqlite3_column_int(v148, 9);
  double v149 = (sqlite3_stmt *)sub_100019240(v99);
  double v150 = (char *)sqlite3_column_text(v149, 10);
  sub_1010DDBC0(&v166, v150);
  sub_100922EB8(&__str);
  if (v167 < 0) {
    operator delete(v166);
  }
  if (v169 < 0) {
    operator delete(v168);
  }
  if (v171 < 0) {
    operator delete(v170);
  }
  if (v173 < 0) {
    operator delete(v172);
  }
  double v151 = (sqlite3_stmt *)sub_100019240(v99);
  *((void *)&v265 + 1) = sqlite3_column_double(v151, 4);
  __int128 v152 = (sqlite3_stmt *)sub_100019240(v99);
  *(void *)&__int128 v266 = sqlite3_column_double(v152, 5);
  double v153 = (sqlite3_stmt *)sub_100019240(v99);
  *((void *)&v268 + 1) = sqlite3_column_int64(v153, 6);
  unsigned int v154 = (sqlite3_stmt *)sub_100019240(v99);
  *(_DWORD *)&v269[12] = sqlite3_column_int(v154, 8);
  sub_100BDEB90(a1 + 136, *(int *)&v269[16], (double **)&__src);
  std::string::operator=((std::string *)a5, &__str);
  std::string::operator=((std::string *)(a5 + 24), &v261);
  std::string::operator=((std::string *)(a5 + 48), &v262);
  *(_OWORD *)(a5 + 1++*(_DWORD *)(result + 36) = v267;
  *(_OWORD *)(a5 + 152) = v268;
  *(_OWORD *)(a5 + 16_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)v269;
  *(void *)(a5 + 181) = *(void *)&v269[13];
  *(_OWORD *)(a5 + 72) = v263;
  *(_OWORD *)(a5 + 8_Block_object_dispose(&STACK[0x7E0], 8) = v264;
  *(_OWORD *)(a5 + 104) = v265;
  *(_OWORD *)(a5 + 120) = v266;
  std::string::operator=((std::string *)(a5 + 192), &v270);
  __int128 v155 = *(void **)(a5 + 216);
  *(void *)(a5 + 216) = v271;

  if (&__str != (std::string *)a5) {
    sub_10009B244((char *)(a5 + 224), (char *)__src, (uint64_t)v273, (v273 - (_BYTE *)__src) >> 4);
  }
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  __int128 v156 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    sub_100923668(a5, &v274);
    __int128 v157 = (v274.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v274 : (std::string *)v274.__r_.__value_.__r.__words[0];
    LODWORD(v277.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v277.__r_.__value_.__r.__words + 4) = (std::string::size_type)v157;
    _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEBUG,  "fetched fence, %{private}s",  (uint8_t *)&v277,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v274, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    BOOL v162 = qword_101934878;
    sub_100923668(a5, &v277);
    if ((v277.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v163 = &v277;
    }
    else {
      double v163 = (std::string *)v277.__r_.__value_.__r.__words[0];
    }
    LODWORD(v276.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v276.__r_.__value_.__r.__words + 4) = (std::string::size_type)v163;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v274,  1628LL,  &_mh_execute_header,  v162,  2LL,  "fetched fence, %{private}s",  &v276,  12);
    int v165 = v164;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)",  "%s\n",  (const char *)v165);
    if (v165 != &v274) {
      free(v165);
    }
  }

  if (*(_DWORD *)(a5 + 184) == -1)
  {
    sub_1012426F4();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceDatabase.mm",  760,  "getFence");
    __break(1u);
  }

  if (__src)
  {
    __int128 v273 = __src;
    operator delete(__src);
  }

LABEL_264:
  uint64_t v121 = v108 == 100;
  if (v99) {
LABEL_176:
  }
    (*(void (**)(uint64_t))(*(void *)v99 + 8LL))(v99);
LABEL_177:
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v121;
}

  if (!HIBYTE(v3)) {
    goto LABEL_215;
  }
  if ((v3 & 0x1000000) != 0)
  {
    __int128 v89 = *(void *)(a1 + 184);
    if (!v89) {
      __int128 v89 = *(void *)(qword_1019A1D48 + 184);
    }
    __int128 v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10061E7A0(v89, a2);
    __int128 v91 = (int)v90;
    else {
      __int128 v92 = 1;
    }
    double v4 = (v4 + v91 + v92 + 2);
    uint64_t v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_178:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_179;
      }
      goto LABEL_195;
    }
  }

  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_178;
  }

  std::string::size_type v93 = *(void *)(a1 + 192);
  if (!v93) {
    std::string::size_type v93 = *(void *)(qword_1019A1D48 + 192);
  }
  int v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10061C7E8(v93, a2);
  __int16 v95 = (int)v94;
  else {
    uint64_t v96 = 1;
  }
  double v4 = (v4 + v95 + v96 + 2);
  uint64_t v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_179:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_180;
    }
    goto LABEL_199;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  BOOL v57 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v58 = *(void *)(a1 + 8);
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    int v192 = "alertCanceledBecauseStand";
    uint64_t v193 = 2048;
    v194 = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    double v150 = *(void *)(a1 + 8);
    uint64_t v187 = 136315394;
    int v188 = "alertCanceledBecauseStand";
    char v189 = 2048;
    __int16 v190 = v150;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    __int128 v152 = (uint8_t *)v151;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v151);
    if (v152 != buf) {
      free(v152);
    }
  }

  a4[16] = 1;
  __int128 v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000000LL) == 0)
  {
LABEL_26:
    if ((v10 & 0x4000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_187;
  }

      __int16 v66 = (uint64_t *)v66[1];
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188BA18);
  }
  __int128 v22 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188BA18);
    }
    *(_WORD *)int v148 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr",  v148,  2);
    float v19 = (uint8_t *)v127;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, doubl e, std::vector<CLMapRoadWithDirection> &, BOOL) const",  "%s\n",  v127);
LABEL_191:
    if (v19 != buf) {
      free(v19);
    }
  }

  return 0LL;
}

  uint64_t result = *(float *)(a2 + 292);
  v5 |= 0x8000000000000000LL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 292) = result;
  double v4 = *v3;
  double v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x200000000000000LL) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_177;
  }

  PB::TextFormatter::format(this, "quiescencePulseEpochCount", *(_DWORD *)(a1 + 228));
  double v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x1000000000000LL) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000LL) == 0) {
      goto LABEL_75;
    }
    goto LABEL_177;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 292), 0x1F6u);
  int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200000000000000LL) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_177;
  }

            PB::Reader::recallMark(this, v194);
          }

          else
          {
            __int128 v155 = *(char **)(a1 + 40);
            unsigned int v154 = *(void *)(a1 + 48);
            if ((unint64_t)v155 >= v154)
            {
              int v174 = (char *)*v10;
              __int16 v175 = (v155 - (_BYTE *)*v10) >> 2;
              unsigned int v176 = v175 + 1;
              if ((unint64_t)(v175 + 1) >> 62) {
LABEL_309:
              }
                sub_100007008();
              unsigned int v177 = v154 - (void)v174;
              if (v177 >> 1 > v176) {
                unsigned int v176 = v177 >> 1;
              }
              else {
                int v178 = v176;
              }
              if (v178)
              {
                unsigned int v179 = (char *)sub_10000956C(v193, v178);
                int v174 = *(char **)(a1 + 32);
                __int128 v155 = *(char **)(a1 + 40);
              }

              else
              {
                unsigned int v179 = 0LL;
              }

              __int128 v186 = &v179[4 * v175];
              *(_DWORD *)__int128 v186 = 0;
              __int16 v133 = v186 + 4;
              while (v155 != v174)
              {
                uint64_t v187 = *((_DWORD *)v155 - 1);
                v155 -= 4;
                *((_DWORD *)v186 - 1) = v187;
                v186 -= 4;
              }

              *(void *)(a1 + 32) = v186;
              *(void *)(a1 + 40) = v133;
              *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = &v179[4 * v178];
              if (v174) {
                operator delete(v174);
              }
            }

            else
            {
              *(_DWORD *)__int128 v155 = 0;
              __int16 v133 = v155 + 4;
            }

            *(void *)(a1 + 40) = v133;
LABEL_290:
            int v188 = *((void *)this + 1);
            if (v188 <= 0xFFFFFFFFFFFFFFFBLL && v188 + 4 <= *((void *)this + 2))
            {
              *(v133 - 1) = *(_DWORD *)(*(void *)this + v188);
LABEL_294:
              __int128 v44 = *((void *)this + 1) + 4LL;
LABEL_295:
              *((void *)this + 1) = v44;
            }

            else
            {
LABEL_292:
              *((_BYTE *)this + 24) = 1;
            }
          }

LABEL_287:
  __int128 v183 = v324;
  *(_OWORD *)(a3 + 1504) = v323;
  *(_OWORD *)(a3 + 1520) = v183;
  *(_OWORD *)(a3 + 15++*(_DWORD *)(result + 36) = *(_OWORD *)v325;
  __int128 v184 = v321;
  *(_OWORD *)(a3 + 1440) = v320;
  *(_OWORD *)(a3 + 1456) = v184;
  __int128 v185 = *(_OWORD *)&v322[16];
  *(_OWORD *)(a3 + 1472) = *(_OWORD *)v322;
  *(_OWORD *)(a3 + 148_Block_object_dispose(&STACK[0x7E0], 8) = v185;
  __int128 v186 = v319[1];
  *(_OWORD *)(a3 + 140_Block_object_dispose(&STACK[0x7E0], 8) = v319[0];
  uint64_t v187 = *(void *)&v325[40];
  int v188 = HIDWORD(v342);
  char v189 = BYTE4(v326);
  __int16 v190 = HIWORD(v326);
  *(_OWORD *)(a3 + 1424) = v186;
  *(_OWORD *)(a3 + 154_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)&v325[12];
  *(void *)(a3 + 1564) = *(void *)&v325[28];
  *(void *)(a3 + 1576) = v187;
  *(_DWORD *)(a3 + 1584) = v188;
  *(_BYTE *)(a3 + 158_Block_object_dispose(&STACK[0x7E0], 8) = v189;
  *(_WORD *)(a3 + 1590) = v190;
  if ((sub_100869780(a3 + 1408) & 1) == 0)
  {
    if (*(void *)(a3 + 1168))
    {
      if (__p == v354)
      {
        sub_10068B4D8((std::string *)(a3 + 1592), "invalidComputedLocation_NoValidHorizontalAPs");
      }

      else
      {
        v191 = (std::string *)(a3 + 1592);
        if (*(_DWORD *)&v325[28]) {
          sub_10068B4D8(v191, "invalidComputedLocation_Other");
        }
        else {
          sub_10068B4D8(v191, "invalidComputedLocation_NoAPsUsedInHorizontalCalculation");
        }
      }
    }

    else
    {
      sub_10068B4D8((std::string *)(a3 + 1592), "invalidComputedLocation_EmptyScan");
    }
  }

  *(_BYTE *)(a3 + 1624) = sub_10068B51C(a1, a3 + 1408);
  int v192 = sub_100869780((uint64_t)v319);
  uint64_t v193 = *(void *)(a3 + 6424);
  if (v192) {
    ++*(_DWORD *)(v193 + 236);
  }
  else {
    ++*(_DWORD *)(v193 + 240);
  }
  if (sub_100B83D5C(a1 + 3208))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    v194 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v364 = sub_1005B46E8(v117);
      sub_1007EC360((std::string *)__src);
      v195 = __src[23] >= 0 ? __src : *(_BYTE **)__src;
      *(_DWORD *)v367 = 136380675;
      *(void *)&v367[4] = v195;
      _os_log_impl( (void *)&_mh_execute_header,  v194,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, associated AP set: YES, %{private}s",  v367,  0xCu);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848798);
      }
      uint64_t v212 = qword_101934858;
      *(void *)v356 = sub_1005B46E8(v117);
      sub_1007EC360((std::string *)v367);
      if (v367[23] >= 0) {
        v213 = v367;
      }
      else {
        v213 = *(_BYTE **)v367;
      }
      *(_DWORD *)v364 = 136380675;
      *(void *)&v364[4] = v213;
      LODWORD(v229) = 12;
      v214 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  v212,  0LL,  "WifiCalc, associated AP set: YES, %{private}s",  v364,  v229);
      if ((v367[23] & 0x80000000) != 0) {
        operator delete(*(void **)v367);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v214);
      if (v214 != __src) {
        free(v214);
      }
    }

    uint64_t v196 = a3;
    v197 = *(_DWORD **)(a3 + 6424);
    ++v197[54];
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    v198 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__src = 0;
      _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP set: NO", __src, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848798);
      }
      *(_WORD *)v367 = 0;
      LODWORD(v229) = 2;
      v211 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiCalc, associated AP set: NO",  v367,  v229);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const",  "%s\n",  v211);
      if (v211 != __src) {
        free(v211);
      }
    }

    uint64_t v196 = a3;
    v197 = *(_DWORD **)(a3 + 6424);
    ++v197[55];
  }

  if (*(_BYTE *)(v196 + 1588)) {
    ++v197[56];
  }
  v199 = v318;
  if (v318)
  {
    p_shared_owners = (unint64_t *)&v318->__shared_owners_;
    do
      unint64_t v201 = __ldaxr(p_shared_owners);
    while (__stlxr(v201 - 1, p_shared_owners));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }

  sub_100008390((uint64_t)v317, v317[1]);
  v202 = v316;
  if (v316)
  {
    v203 = (unint64_t *)&v316->__shared_owners_;
    do
      unint64_t v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }

  v205 = (std::__shared_weak_count *)v315.__r_.__value_.__l.__size_;
  if (v315.__r_.__value_.__l.__size_)
  {
    v206 = (unint64_t *)(v315.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }

  *(void *)__src = &v327;
  sub_1000129D4((void ***)__src);
  *(void *)__src = (char *)v344 + 8;
  sub_1000129D4((void ***)__src);
  if (v343[0])
  {
    v343[1] = v343[0];
    operator delete(v343[0]);
  }

  *(void *)__src = &v345;
  sub_1000129D4((void ***)__src);
  sub_1000229D4((uint64_t)&v348, v349[0]);
  if (v350)
  {
    v351 = (char *)v350;
    operator delete(v350);
  }

  if (__p)
  {
    v354 = __p;
    operator delete(__p);
  }

                                        int v114 = (unsigned __int8 *)*((void *)this + 1);
                                        __int128 v22 = *((void *)this + 2);
                                        __int128 v127 = *v114;
                                        if (v127 != 93)
                                        {
                                          if (v127 == 96)
                                          {
                                            for (k = (char *)(v114 + 1); ; k = (char *)(v139 + 1))
                                            {
                                              *((void *)this + 1) = k;
LABEL_292:
                                              if ((unint64_t)k >= v22 || *k < 0)
                                              {
                                                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v224);
                                                if (!(_DWORD)result) {
                                                  return result;
                                                }
                                                uint64_t v128 = v224[0];
                                              }

                                              else
                                              {
                                                uint64_t v128 = *k;
                                                *((void *)this + 1) = k + 1;
                                              }

                                              __int16 v129 = *(_DWORD *)(a1 + 160);
                                              if (v129 == *(_DWORD *)(a1 + 164))
                                              {
                                                sub_10004AAFC(v218, v129 + 1);
                                                __int16 v129 = *(_DWORD *)(a1 + 160);
                                              }

                                              unint64_t v130 = *(void *)(a1 + 152);
                                              *(_DWORD *)(a1 + 160) = v129 + 1;
                                              *(_DWORD *)(v130 + 4LL * v129) = v128;
                                              int v131 = *(_DWORD *)(a1 + 164) - *(_DWORD *)(a1 + 160);
                                              if (v131 >= 1)
                                              {
                                                char v132 = v131 + 1;
                                                do
                                                {
                                                  __int16 v133 = (_BYTE *)*((void *)this + 1);
                                                  uint64_t v134 = *((void *)this + 2);
                                                  *((void *)this + 1) = v133 + 1;
                                                  if ((unint64_t)(v133 + 1) >= v134 || (char)v133[1] < 0)
                                                  {
                                                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v224);
                                                    if (!(_DWORD)result) {
                                                      return result;
                                                    }
                                                    __int16 v135 = v224[0];
                                                  }

                                                  else
                                                  {
                                                    __int16 v135 = v133[1];
                                                    *((void *)this + 1) = v133 + 2;
                                                  }

                                                  uint64_t v136 = *(_DWORD *)(a1 + 160);
                                                  if (v136 >= *(_DWORD *)(a1 + 164))
                                                  {
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e55 7b55/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVOS .platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/incl ude/google/protobuf/repeated_field.h",  602LL);
                                                    unint64_t v137 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v137);
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                    uint64_t v136 = *(_DWORD *)(a1 + 160);
                                                  }

                                                  unint64_t v138 = *(void *)(a1 + 152);
                                                  *(_DWORD *)(a1 + 160) = v136 + 1;
                                                  *(_DWORD *)(v138 + 4LL * v1++*(_DWORD *)(result + 36) = v135;
                                                  --v132;
                                                }

                                                while (v132 > 1);
                                              }

                    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLMapMatchingEngine.mm",  LODWORD(__p[0]),  "CLMapMatchingEngine");
                    goto LABEL_288;
                  }
                }

                else
                {
LABEL_65:
                  if (!v47) {
                    goto LABEL_67;
                  }
                }

                *(_BYTE *)(a1 + 434) = v189;
                goto LABEL_67;
              }
            }

            else
            {
LABEL_54:
              if (!v40) {
                goto LABEL_56;
              }
            }

            *(_BYTE *)(a1 + 36_Block_object_dispose(&STACK[0x7E0], 8) = v189;
            goto LABEL_56;
          }
        }

        else
        {
LABEL_43:
          if (!v33) {
            goto LABEL_45;
          }
        }

        os_log_s *v5 = v189;
        goto LABEL_45;
      }

      sub_10126DB9C(__p);
    }

    else
    {
      sub_10126DCE0(__p);
    }
  }

  else
  {
    sub_10126DE24(__p);
  }

  abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLMapMatchingEngine.mm",  LODWORD(__p[0]),  "CLMapMatchingEngine");
LABEL_288:
  __break(1u);
LABEL_289:
  dispatch_once(&qword_1019348B0, &stru_101881F60);
LABEL_149:
  __int128 v106 = (os_log_s *)v2[279];
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
  {
    __int128 v107 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10LL);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEBUG,  "CLMMPED,CyclingDirectionOfTravel,%d",  (uint8_t *)__p,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    int v169 = v2[279];
    uint64_t v170 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10LL);
    LODWORD(v196[0]) = 67109120;
    HIDWORD(v196[0]) = v170;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v169,  2LL,  "CLMMPED,CyclingDirectionOfTravel,%d",  v196);
    int v172 = (void **)v171;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)",  "%s\n",  v171);
    if (v172 != __p) {
      free(v172);
    }
  }

  char v189 = 0;
  sub_1002F0B04(__p);
  __int128 v108 = sub_1002A6F64((uint64_t)__p[0], "EnableCyclingDirectionOfTravel", (BOOL *)&v189);
  __int16 v109 = v108;
  uint64_t v110 = (std::__shared_weak_count *)__p[1];
  if (!__p[1]) {
    goto LABEL_156;
  }
  unint64_t v111 = (unint64_t *)((char *)__p[1] + 8);
  do
    uint64_t v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
    if (v109) {
      goto LABEL_157;
    }
  }

  else
  {
LABEL_156:
    if (v108)
    {
LABEL_157:
      *(_BYTE *)(*(void *)(a1 + 632) + 1sub_100272D04(v1, 0LL) = v189;
      __int128 v113 = (os_log_s *)v2[279];
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
      {
        int v114 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10LL);
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = v114;
        _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEBUG,  "CLMMPED,Overwrite,EnableCyclingDirectionOfTravel,%{public}d",  (uint8_t *)__p,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        int v178 = v2[279];
        unsigned int v179 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10LL);
        LODWORD(v196[0]) = 67240192;
        HIDWORD(v196[0]) = v179;
        LODWORD(v185) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v178,  2LL,  "CLMMPED,Overwrite,EnableCyclingDirectionOfTravel,%{public}d",  v196,  v185);
        BOOL v181 = (void **)v180;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)",  "%s\n",  v180);
        if (v181 != __p) {
          free(v181);
        }
      }
    }
  }

  char v189 = 0;
  *(_BYTE *)(*(void *)(a1 + 632) + 11LL) = 1;
  sub_1002F0B04(__p);
  __int16 v115 = sub_1002A6F64((uint64_t)__p[0], "EnableActivityBasedCyclingDirectionOfTravel", (BOOL *)&v189);
  unint64_t v116 = v115;
  uint64_t v117 = (std::__shared_weak_count *)__p[1];
  if (!__p[1]) {
    goto LABEL_166;
  }
  int v118 = (unint64_t *)((char *)__p[1] + 8);
  do
    __int16 v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
    if (!v116) {
      goto LABEL_172;
    }
  }

  else
  {
LABEL_166:
    if (!v115) {
      goto LABEL_172;
    }
  }

  *(_BYTE *)(*(void *)(a1 + 632) + 11LL) = v189;
  uint64_t v120 = (os_log_s *)v2[279];
  if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v189;
    _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEBUG,  "CLMMPED,Overwrite,EnableActivityBasedCyclingDirectionOfTravel,%{public}d",  (uint8_t *)__p,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    unsigned int v182 = v2[279];
    LODWORD(v196[0]) = 67240192;
    HIDWORD(v196[0]) = v189;
    LODWORD(v185) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v182,  2LL,  "CLMMPED,Overwrite,EnableActivityBasedCyclingDirectionOfTravel,%{public}d",  v196,  v185);
    __int128 v184 = (void **)v183;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)",  "%s\n",  v183);
    if (v184 != __p) {
      free(v184);
    }
  }

                  *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v39;
                  goto LABEL_279;
                case 6:
                  *(void *)(a1 + 172) |= 0x2000000uLL;
                  __int128 v42 = *((void *)this + 1);
                  __int128 v43 = *((void *)this + 2);
                  __int128 v44 = *(void *)this;
                  if (v42 <= 0xFFFFFFFFFFFFFFF5LL && v42 + 10 <= v43)
                  {
                    __int128 v45 = 0;
                    uint64_t v46 = 0;
                    __int128 v47 = 0LL;
                    do
                    {
                      __int128 v48 = v42 + 1;
                      *((void *)this + 1) = v42 + 1;
                      __int128 v49 = *(_BYTE *)(v44 + v42);
                      v47 |= (unint64_t)(v49 & 0x7F) << v45;
                      if ((v49 & 0x80) == 0) {
                        goto LABEL_291;
                      }
                      v45 += 7;
                      __int128 v42 = v48;
                      __int128 v14 = v46++ > 8;
                    }

                    while (!v14);
LABEL_205:
                    LODWORD(v47) = 0;
                    goto LABEL_291;
                  }

                  int v174 = 0;
                  __int16 v175 = 0;
                  __int128 v47 = 0LL;
                  if (v43 <= v42) {
                    __int128 v43 = *((void *)this + 1);
                  }
                  while (2)
                  {
                    if (v43 == v42)
                    {
                      LODWORD(v47) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }

                    else
                    {
                      unsigned int v176 = v42 + 1;
                      unsigned int v177 = *(_BYTE *)(v44 + v42);
                      *((void *)this + 1) = v176;
                      v47 |= (unint64_t)(v177 & 0x7F) << v174;
                      if (v177 < 0)
                      {
                        v174 += 7;
                        __int128 v42 = v176;
                        __int128 v14 = v175++ > 8;
                        if (v14) {
                          goto LABEL_205;
                        }
                        continue;
                      }

                      if (*((_BYTE *)this + 24)) {
                        LODWORD(v47) = 0;
                      }
                    }

                    break;
                  }

        *(_DWORD *)(a1 + 10_Block_object_dispose(&STACK[0x7E0], 8) = v114;
        goto LABEL_304;
      case 0x16u:
        *(_DWORD *)(a1 + 152) |= 0x2000u;
        uint64_t v117 = *((void *)this + 1);
        int v118 = *((void *)this + 2);
        __int16 v119 = *(void *)this;
        if (v117 <= 0xFFFFFFFFFFFFFFF5LL && v117 + 10 <= v118)
        {
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          double v122 = 0LL;
          do
          {
            __int16 v123 = v117 + 1;
            *((void *)this + 1) = v117 + 1;
            unint64_t v124 = *(_BYTE *)(v119 + v117);
            v122 |= (unint64_t)(v124 & 0x7F) << v120;
            if ((v124 & 0x80) == 0) {
              goto LABEL_291;
            }
            v120 += 7;
            uint64_t v117 = v123;
            unint64_t v15 = v121++ > 8;
          }

          while (!v15);
LABEL_228:
          LODWORD(v122) = 0;
          goto LABEL_291;
        }

        __int128 v186 = 0;
        uint64_t v187 = 0;
        double v122 = 0LL;
        if (v118 <= v117) {
          int v118 = *((void *)this + 1);
        }
        while (2)
        {
          if (v118 == v117)
          {
            LODWORD(v122) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v188 = v117 + 1;
            char v189 = *(_BYTE *)(v119 + v117);
            *((void *)this + 1) = v188;
            v122 |= (unint64_t)(v189 & 0x7F) << v186;
            if (v189 < 0)
            {
              v186 += 7;
              uint64_t v117 = v188;
              unint64_t v15 = v187++ > 8;
              if (v15) {
                goto LABEL_228;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v122) = 0;
            }
          }

          break;
        }

          *(void *)(a1 + 40) = v135;
          goto LABEL_296;
        case 0x1Au:
          *(_DWORD *)(a1 + 116) |= 0x20000u;
          unint64_t v138 = *((void *)this + 1);
          unint64_t v139 = *((void *)this + 2);
          int v140 = *(void *)this;
          if (v138 <= 0xFFFFFFFFFFFFFFF5LL && v138 + 10 <= v139)
          {
            int v141 = 0;
            uint64_t v142 = 0;
            uint64_t v143 = 0LL;
            do
            {
              uint64_t v144 = v138 + 1;
              *((void *)this + 1) = v138 + 1;
              __int16 v145 = *(_BYTE *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0) {
                goto LABEL_291;
              }
              v141 += 7;
              unint64_t v138 = v144;
              __int128 v14 = v142++ > 8;
            }

            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }

          v194 = 0;
          v195 = 0;
          uint64_t v143 = 0LL;
          if (v139 <= v138) {
            unint64_t v139 = *((void *)this + 1);
          }
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v196 = v138 + 1;
              v197 = *(_BYTE *)(v140 + v138);
              *((void *)this + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                unint64_t v138 = v196;
                __int128 v14 = v195++ > 8;
                if (v14) {
                  goto LABEL_237;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v143) = 0;
              }
            }

            break;
          }

void sub_100686240(_Unwind_Exception *a1)
{
  STACK[0xB40] = (unint64_t)&STACK[0x8E0];
  sub_1000129D4((void ***)&STACK[0xB40]);
  sub_10068ABCC((uint64_t)&STACK[0x900]);
  STACK[0x3D0] = (unint64_t)&STACK[0x9D0];
  sub_1000129D4((void ***)&STACK[0x3D0]);
  sub_1000229D4((uint64_t)&STACK[0x9E8], (char *)STACK[0x9F0]);
  uint64_t v2 = (void *)STACK[0xA00];
  if (STACK[0xA00])
  {
    STACK[0xA08] = (unint64_t)v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)STACK[0xA18];
  if (STACK[0xA18])
  {
    STACK[0xA20] = (unint64_t)v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100686470(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    if (*(_BYTE *)(a2 + 1624))
    {
      sub_100496D94(a2 + 5968, 2, v4);
      sub_10049609C(a2 + 5968, 5, 3u, v4);
    }

    else
    {
      sub_100496D94(a2 + 5968, 1, v4);
    }

    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204LL);
  }

void sub_10068651C(_Unwind_Exception *a1)
{
}

void sub_100686534(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204LL);
    if (*(_BYTE *)(a2 + 1624))
    {
      int v5 = *(_DWORD *)(a2 + 6024);
      sub_100496D94(a2 + 5968, 2, v4);
      if (v5 < 3) {
        unsigned int v6 = 5;
      }
      else {
        unsigned int v6 = 6;
      }
      sub_10049609C(a2 + 5968, 5, v6, v4);
    }

    else
    {
      sub_100496D94(a2 + 5968, 1, v4);
    }
  }

void sub_1006865F4(_Unwind_Exception *a1)
{
}

void sub_100686610(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p = 0LL;
  __int128 v32 = 0LL;
  __int128 v33 = 0LL;
  sub_100686848(&__p, *(void *)(a1 + 1208));
  uint64_t v3 = *(uint64_t **)(a1 + 1200);
  if (v3)
  {
    double v4 = v32;
    do
    {
      int v5 = v3 + 3;
      if (v4 >= v33)
      {
        __int128 v10 = (char *)__p;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)__p) >> 5);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        if (0x5555555555555556LL * ((v33 - (_BYTE *)__p) >> 5) > v12) {
          unint64_t v12 = 0x5555555555555556LL * ((v33 - (_BYTE *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 5) >= 0x155555555555555LL) {
          unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          __int128 v14 = (char *)sub_1003F6AEC((uint64_t)&v33, v13);
          __int128 v10 = (char *)__p;
          double v4 = v32;
        }

        else
        {
          __int128 v14 = 0LL;
        }

        unint64_t v15 = &v14[96 * v11];
        __int128 v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)unint64_t v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        __int128 v17 = *(_OWORD *)(v3 + 7);
        __int128 v18 = *(_OWORD *)(v3 + 9);
        __int128 v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          __int128 v25 = &v14[96 * v11];
        }

        else
        {
          __int128 v20 = &v14[96 * v11];
          do
          {
            __int128 v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            __int128 v22 = *((_OWORD *)v4 - 4);
            __int128 v23 = *((_OWORD *)v4 - 3);
            __int128 v24 = *((_OWORD *)v4 - 1);
            __int128 v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }

          while (v4 != v10);
        }

        double v4 = v15 + 96;
        std::string __p = v25;
        __int128 v32 = v15 + 96;
        __int128 v33 = &v14[96 * v13];
        if (v10) {
          operator delete(v10);
        }
      }

      else
      {
        __int128 v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)double v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        __int128 v7 = *(_OWORD *)(v3 + 7);
        __int128 v8 = *(_OWORD *)(v3 + 9);
        __int128 v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }

      __int128 v32 = v4;
      uint64_t v3 = (uint64_t *)*v3;
    }

    while (v3);
  }

  sub_10068692C(a1, (void *)(a1 + 1072), *(void **)(a1 + 3312), (double **)&__p, 0, (uint64_t *)&v29);
  __int128 v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(void *)(a2 + 1640) = v26;
    operator delete(v26);
    *(void *)(a2 + 1632) = 0LL;
    *(void *)(a2 + 1640) = 0LL;
    *(void *)(a2 + 164_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  }

  *(_OWORD *)(a2 + 1632) = v29;
  __int128 v27 = (char *)__p;
  *(void *)(a2 + 164_Block_object_dispose(&STACK[0x7E0], 8) = v30;
  if (v27)
  {
    __int128 v32 = v27;
    operator delete(v27);
  }

void sub_100686818( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002D9D34(a10);
  _Unwind_Resume(a1);
}

void sub_100686848(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_100007008();
    }
    uint64_t v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 96;
    __int128 v6 = (char *)sub_1003F6AEC(v3, a2);
    __int128 v7 = &v6[96 * v5];
    __int128 v9 = &v6[96 * v8];
    unint64_t v11 = (char *)*a1;
    __int128 v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v13;
        __int128 v14 = *((_OWORD *)v10 - 4);
        __int128 v15 = *((_OWORD *)v10 - 3);
        __int128 v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v16;
        *((_OWORD *)v12 - 4) = v14;
        *((_OWORD *)v12 - 3) = v15;
        v12 -= 96;
        v10 -= 96;
      }

      while (v10 != v11);
      __int128 v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_10068692C@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, double **a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  double v8 = *(double *)(a1 + 6384);
  sub_10068CADC(a6, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  __int128 v9 = "reproc";
  if (!a5) {
    __int128 v9 = "live";
  }
  __int128 v155 = v9;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848778);
  }
  unint64_t v11 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)std::stringbuf::string_type buf = 134349314;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v155;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "@WsbCalc, groups, %{public}lu, %{public}s",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)int v240 = 134349314;
    *(void *)&v240[4] = v141;
    *(_WORD *)&v240[12] = 2082;
    *(void *)&v240[14] = v155;
    uint64_t v142 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbCalc, groups, %{public}lu, %{public}s",  v240,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(cons t CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, T ypes::WsbPassType) const",  "%s\n",  v142);
    if (v142 != buf) {
      free(v142);
    }
  }

  __int128 v13 = *a4;
  __int128 v14 = a4[1];
  if (*a4 == v14)
  {
    __int128 v221 = 0u;
    __int128 v220 = 0u;
    int v222 = 1065353216;
  }

  else
  {
    do
    {
      if (!sub_100C3A418(v13))
      {
        sub_101242530();
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifiPositionCalculation.mm",  187,  "processScanGroups");
        __break(1u);
      }

      v13 += 12;
    }

    while (v13 != v14);
    __int128 v16 = *a4;
    __int128 v15 = a4[1];
    __int128 v221 = 0u;
    __int128 v220 = 0u;
    int v222 = 1065353216;
    while (v16 != v15)
    {
      *(double *)std::stringbuf::string_type buf = *v16;
      sub_10068CB5C((uint64_t)&v220, buf, buf, v16);
      v16 += 12;
    }
  }

  uint64_t v203 = 0LL;
  uint64_t v204 = 0LL;
  __int128 v205 = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v206 = _Q0;
  __int128 v207 = _Q0;
  __int128 v208 = _Q0;
  int v202 = 0xFFFF;
  int v209 = 0;
  unint64_t v210 = 0xBFF0000000000000LL;
  uint64_t v212 = 0LL;
  uint64_t v211 = 0LL;
  unint64_t v214 = 0xBFF0000000000000LL;
  int v213 = 0;
  int v215 = 0x7FFFFFFF;
  uint64_t v217 = 0LL;
  uint64_t v218 = 0LL;
  uint64_t v216 = 0LL;
  char v219 = 0;
  __int128 v22 = (void *)*a2;
  double v150 = (void *)a2[1];
  if ((void *)*a2 == v150)
  {
    int v23 = 0;
    uint64_t v154 = 0LL;
    int v153 = 0;
  }

  else
  {
    int v153 = 0;
    unsigned int v167 = 0;
    uint64_t v154 = 0LL;
    int v23 = 0;
    BOOL v149 = a5 == 1;
    do
    {
      v200 = 0LL;
      std::string __p = 0LL;
      unint64_t v201 = 0LL;
      *(void *)std::stringbuf::string_type buf = *(void *)(*v22 + 56LL);
      uint64_t v198 = sub_100F3534C(a3, (double *)buf);
      *(void *)std::stringbuf::string_type buf = sub_1007EC044();
      BOOL v24 = sub_1007EC0C4(&v198, buf);
      int v157 = v23;
      LOBYTE(v191) = 0;
      char v197 = 0;
      uint64_t v25 = *v22;
      uint64_t v26 = v22[1];
      double v168 = v22;
      if (*v22 == v26)
      {
        char v27 = 0;
        char v28 = 1;
      }

      else
      {
        char v27 = 0;
        char v28 = 1;
        do
        {
          if (*(_BYTE *)(v25 + 72))
          {
            if (v24 && (*(void *)std::stringbuf::string_type buf = *(void *)v25, sub_1007EC0B0(&v198, buf)))
            {
              __int128 v29 = (os_log_s *)qword_101934868;
              if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
              {
                v239[0].__r_.__value_.__r.__words[0] = *(void *)v25;
                sub_1007EC360((std::string *)buf);
                uint64_t v30 = buf;
                if (buf[23] < 0) {
                  uint64_t v30 = *(_BYTE **)buf;
                }
                *(_DWORD *)int v240 = 136380675;
                *(void *)&v240[4] = v30;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "@Wsb, consistent associated AP %{private}s between associated AP history and aonsensed",  v240,  0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                uint64_t v69 = qword_101934868;
                *(void *)uint64_t v223 = *(void *)v25;
                sub_1007EC360((std::string *)v240);
                double v70 = v240;
                if (v240[23] < 0) {
                  double v70 = *(_BYTE **)v240;
                }
                LODWORD(v239[0].__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v239[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
                LODWORD(v147) = 12;
                __int16 v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v69,  2LL,  "@Wsb, consistent associated AP %{private}s between associated AP history and aonsensed",  v239,  v147);
                if ((v240[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v240);
                }
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processSca nGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vecto r<CLWifiAPLocation> &, Types::WsbPassType) const",  "%s\n",  v71);
                if (v71 != buf) {
                  free(v71);
                }
              }

              char v28 = 1;
            }

            else
            {
              __int128 v31 = (os_log_s *)qword_101934868;
              if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
              {
                sub_1007EC360((std::string *)buf);
                int v32 = buf[23];
                __int128 v33 = *(_BYTE **)buf;
                *(void *)uint64_t v223 = *(void *)v25;
                sub_1007EC360((std::string *)v240);
                __int128 v34 = buf;
                if (v32 < 0) {
                  __int128 v34 = v33;
                }
                id v35 = v240;
                if (v240[23] < 0) {
                  id v35 = *(_BYTE **)v240;
                }
                LODWORD(v239[0].__r_.__value_.__l.__data_) = 136380931;
                *(std::string::size_type *)((char *)v239[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                WORD2(v239[0].__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v239[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "@Wsb, warning, inconsistent associated AP %{private}s vs %{private}s between associated AP history and aonsensed",  (uint8_t *)v239,  0x16u);
                if ((v240[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v240);
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                uint64_t v63 = qword_101934868;
                sub_1007EC360((std::string *)v240);
                int v64 = v240[23];
                unint64_t v65 = *(_BYTE **)v240;
                std::string::size_type v187 = *(void *)v25;
                sub_1007EC360(v239);
                __int16 v66 = v240;
                if (v64 < 0) {
                  __int16 v66 = v65;
                }
                __int16 v67 = v239;
                if ((v239[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int16 v67 = (std::string *)v239[0].__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)uint64_t v223 = 136380931;
                *(void *)&v223[4] = v66;
                *(_WORD *)&v223[12] = 2081;
                *(void *)&v223[14] = v67;
                LODWORD(v147) = 22;
                __int128 v68 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v63,  2LL,  "@Wsb, warning, inconsistent associated AP %{private}s vs %{private}s between associated AP history and aonsensed",  v223,  v147);
                if ((v240[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v240);
                }
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processSca nGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vecto r<CLWifiAPLocation> &, Types::WsbPassType) const",  "%s\n",  v68);
                if (v68 != buf) {
                  free(v68);
                }
              }

              char v28 = 0;
            }

            uint64_t v198 = *(void *)v25;
            char v27 = 1;
            BOOL v24 = 1;
          }

          *(void *)std::stringbuf::string_type buf = *(void *)v25;
          uint64_t v36 = sub_100353A18(&v220, buf);
          if (v36)
          {
            __int128 v37 = *(_OWORD *)(v36 + 7);
            __int128 v38 = *(_OWORD *)(v36 + 9);
            __int128 v39 = *(_OWORD *)(v36 + 13);
            __int128 v256 = *(_OWORD *)(v36 + 11);
            __int128 v257 = v39;
            *(_OWORD *)&buf[32] = v37;
            *(_OWORD *)&buf[48] = v38;
            __int128 v40 = *(_OWORD *)(v36 + 5);
            *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(v36 + 3);
            *(_OWORD *)&uint8_t buf[16] = v40;
            sub_100C3A3F8((uint64_t)buf, *(_DWORD *)(v25 + 32), *(_DWORD *)(v25 + 40), *(double *)(v25 + 56));
            double v41 = v200;
            if (v200 >= v201)
            {
              __int128 v47 = (char *)__p;
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v200 - (_BYTE *)__p) >> 5);
              unint64_t v49 = v48 + 1;
              if (v48 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_100007008();
              }
              if (0x5555555555555556LL * ((v201 - (_BYTE *)__p) >> 5) > v49) {
                unint64_t v49 = 0x5555555555555556LL * ((v201 - (_BYTE *)__p) >> 5);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v201 - (_BYTE *)__p) >> 5) >= 0x155555555555555LL) {
                unint64_t v50 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v50 = v49;
              }
              if (v50)
              {
                std::string v51 = (char *)sub_1003F6AEC((uint64_t)&v201, v50);
                double v41 = v200;
                __int128 v47 = (char *)__p;
              }

              else
              {
                std::string v51 = 0LL;
              }

              uint64_t v52 = &v51[96 * v48];
              __int128 v53 = *(_OWORD *)&buf[16];
              *(_OWORD *)uint64_t v52 = *(_OWORD *)buf;
              *((_OWORD *)v52 + 1) = v53;
              __int128 v54 = *(_OWORD *)&buf[32];
              __int128 v55 = *(_OWORD *)&buf[48];
              __int128 v56 = v257;
              *((_OWORD *)v52 + 4) = v256;
              *((_OWORD *)v52 + 5) = v56;
              *((_OWORD *)v52 + 2) = v54;
              *((_OWORD *)v52 + 3) = v55;
              if (v41 == v47)
              {
                __int128 v62 = &v51[96 * v48];
              }

              else
              {
                BOOL v57 = &v51[96 * v48];
                do
                {
                  __int128 v58 = *((_OWORD *)v41 - 5);
                  *((_OWORD *)v57 - 6) = *((_OWORD *)v41 - 6);
                  *((_OWORD *)v57 - 5) = v58;
                  __int128 v59 = *((_OWORD *)v41 - 4);
                  __int128 v60 = *((_OWORD *)v41 - 3);
                  __int128 v61 = *((_OWORD *)v41 - 1);
                  __int128 v62 = v57 - 96;
                  *((_OWORD *)v57 - 2) = *((_OWORD *)v41 - 2);
                  *((_OWORD *)v57 - 1) = v61;
                  *((_OWORD *)v57 - 4) = v59;
                  *((_OWORD *)v57 - 3) = v60;
                  v41 -= 96;
                  v57 -= 96;
                }

                while (v41 != v47);
              }

              uint64_t v46 = v52 + 96;
              std::string __p = v62;
              v200 = v52 + 96;
              unint64_t v201 = &v51[96 * v50];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              __int128 v42 = *(_OWORD *)&buf[16];
              *(_OWORD *)v200 = *(_OWORD *)buf;
              *((_OWORD *)v41 + 1) = v42;
              __int128 v43 = *(_OWORD *)&buf[32];
              __int128 v44 = *(_OWORD *)&buf[48];
              __int128 v45 = v257;
              *((_OWORD *)v41 + 4) = v256;
              *((_OWORD *)v41 + 5) = v45;
              *((_OWORD *)v41 + 2) = v43;
              *((_OWORD *)v41 + 3) = v44;
              uint64_t v46 = v41 + 96;
            }

            v200 = v46;
            if (*(_BYTE *)(v25 + 72))
            {
              __int128 v193 = *(_OWORD *)&buf[32];
              __int128 v194 = *(_OWORD *)&buf[48];
              __int128 v195 = v256;
              __int128 v196 = v257;
              __int128 v191 = *(_OWORD *)buf;
              __int128 v192 = *(_OWORD *)&buf[16];
              if (!v197) {
                char v197 = 1;
              }
            }
          }

          v25 += 88LL;
        }

        while (v25 != v26);
      }

      if (v24 && (v27 & 1) == 0)
      {
        int v72 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          sub_1007EC360((std::string *)buf);
          __int128 v73 = buf;
          if (buf[23] < 0) {
            __int128 v73 = *(_BYTE **)buf;
          }
          *(_DWORD *)int v240 = 136380675;
          *(void *)&v240[4] = v73;
          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "@Wsb, warning, aonsensed does not have associated AP %{private}s from associated AP history",  v240,  0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          uint64_t v119 = qword_101934868;
          sub_1007EC360((std::string *)v240);
          uint64_t v120 = v240;
          if (v240[23] < 0) {
            uint64_t v120 = *(_BYTE **)v240;
          }
          LODWORD(v239[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v239[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
          LODWORD(v147) = 12;
          uint64_t v121 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v119,  2LL,  "@Wsb, warning, aonsensed does not have associated AP %{private}s from associated AP history",  v239,  v147);
          if ((v240[23] & 0x80000000) != 0) {
            operator delete(*(void **)v240);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v121);
          if (v121 != buf) {
            free(v121);
          }
        }

        __int128 v74 = sub_100353A18(&v220, &v198);
        if (!v74) {
          goto LABEL_102;
        }
        __int128 v75 = *(_OWORD *)(v74 + 3);
        __int128 v76 = *(_OWORD *)(v74 + 5);
        __int128 v77 = *(_OWORD *)(v74 + 7);
        __int128 v78 = *(_OWORD *)(v74 + 9);
        __int128 v79 = *(_OWORD *)(v74 + 13);
        __int128 v195 = *(_OWORD *)(v74 + 11);
        __int128 v196 = v79;
        __int128 v193 = v77;
        __int128 v194 = v78;
        __int128 v191 = v75;
        __int128 v192 = v76;
        if (!v197)
        {
          char v28 = 0;
          char v197 = 1;
        }

        else
        {
LABEL_102:
          char v28 = 0;
        }
      }

      uint64_t v243 = 0LL;
      char v244 = 0;
      uint64_t v248 = 0LL;
      char v249 = 0;
      memset(v240, 0, sizeof(v240));
      __int128 v241 = 0u;
      int v242 = 0;
      uint64_t v245 = 0LL;
      uint64_t v246 = 0LL;
      __int16 v247 = 0;
      __int128 v250 = 0u;
      *(_OWORD *)__int128 v251 = 0u;
      *(void *)&v251[14] = 0x100000000000000LL;
      uint64_t v252 = 0xFFFFFFFFLL;
      __int128 v253 = 0u;
      memset(v254, 0, sizeof(v254));
      uint64_t v188 = 0LL;
      std::string::size_type v187 = 0LL;
      int v190 = 0;
      uint64_t v189 = 0LL;
      sub_10068940C( 0LL,  (uint64_t *)&__p,  (uint64_t *)&__p,  (uint64_t)&v202,  (uint64_t)&v202,  0LL,  0LL,  (uint64_t *)&v187,  buf,  *(double *)(*v168 + 56LL),  (uint64_t)v240,  0);
      uint64_t v80 = *a6;
      uint64_t v81 = *a6 + 184LL * v167;
      *(_OWORD *)(v81 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v260;
      *(_OWORD *)(v81 + 144) = v261;
      *(_OWORD *)(v81 + 160) = v262;
      *(void *)(v81 + 176) = v263;
      *(_OWORD *)(v81 + 64) = v256;
      *(_OWORD *)(v81 + 80) = v257;
      *(_OWORD *)(v81 + 96) = v258;
      *(_OWORD *)(v81 + 112) = v259;
      *(_OWORD *)uint64_t v81 = *(_OWORD *)buf;
      *(_OWORD *)(v81 + 16) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v81 + 32) = *(_OWORD *)&buf[32];
      *(_OWORD *)(v81 + 4_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)&buf[48];
      if (0xD37A6F4DE9BD37A7LL * ((a6[1] - v80) >> 3) <= v167) {
        sub_100092C20();
      }
      *(void *)(v81 + 76) = *(void *)(*v168 + 56LL);
      int v82 = (double *)(v81 + 76);
      *(_DWORD *)(v81 + 96) = 4;
      sub_100E670CC(*(void **)(a1 + 4928), (double *)(v81 + 76), (uint64_t)v239);
      __int16 v83 = p_vtable[268];
      if (v24)
      {
        __int128 v84 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          sub_1007EC360((std::string *)buf);
          __int128 v85 = buf;
          if (buf[23] < 0) {
            __int128 v85 = *(_BYTE **)buf;
          }
          *(_DWORD *)uint64_t v223 = 136380675;
          *(void *)&v223[4] = v85;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "@WsbLoc, associated AP, %{private}s",  v223,  0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          uint64_t v123 = qword_101934868;
          sub_1007EC360((std::string *)v223);
          unint64_t v124 = v223;
          if (v223[23] < 0) {
            unint64_t v124 = *(_BYTE **)v223;
          }
          int v237 = 136380675;
          *(void *)int v238 = v124;
          LODWORD(v147) = 12;
          __int128 v125 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v123,  0LL,  "@WsbLoc, associated AP, %{private}s",  &v237,  v147);
          if ((v223[23] & 0x80000000) != 0) {
            operator delete(*(void **)v223);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v125);
          if (v125 != buf) {
            free(v125);
          }
        }

        sub_100F76854(&v237);
        sub_1010DDBC0(v223, "WSB");
        sub_100B7779C(buf, &v198, &v191, &v237, a1 + 6472, v223, v239);
        if ((v223[23] & 0x80000000) != 0) {
          operator delete(*(void **)v223);
        }
        __int128 v86 = *(std::__shared_weak_count **)&v238[4];
        if (*(void *)&v238[4])
        {
          __int128 v87 = (unint64_t *)(*(void *)&v238[4] + 8LL);
          do
            unint64_t v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }

        sub_100B7AE6C((uint64_t)buf, (__int128 *)v81);
        sub_100B7B6FC((uint64_t)buf);
        LODWORD(v154) = v154 + 1;
        sub_10068C0F8((uint64_t)buf);
      }

      else
      {
        __int128 v89 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "@WsbLoc, associated AP, none", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          *(_WORD *)uint64_t v223 = 0;
          LODWORD(v147) = 2;
          double v122 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbLoc, associated AP, none",  v223,  v147);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v122);
          if (v122 != buf) {
            free(v122);
          }
        }

        ++HIDWORD(v154);
      }

      uint64_t v90 = v80 + 184LL * v167;
      int v92 = *(unsigned __int8 *)(v90 + 180);
      __int128 v91 = (unsigned __int8 *)(v90 + 180);
      *(double *)(v81 + 8_Block_object_dispose(&STACK[0x7E0], 8) = *(double *)(a1 + 6160) * 1.5;
      unint64_t v93 = (v188 - v187) >> 3;
      uint64_t v94 = (-1431655765 * v93);
      int v95 = v190;
      unsigned int v166 = v94 - v190;
      unsigned int v164 = sub_1006891FC((int)v94 - v190, -1431655765 * (int)v93, 100LL);
      int v156 = v92;
      unsigned int v163 = sub_1006891FC(v95, v94, 100LL);
      uint64_t v96 = -1171354717 * ((v168[1] - *v168) >> 3);
      unint64_t v97 = (unint64_t)(v200 - (_BYTE *)__p) >> 5;
      uint64_t v98 = (-1431655765 * v97);
      unsigned int v162 = sub_1006891FC(-1431655765 * (int)v97, -1171354717 * ((v168[1] - *v168) >> 3), 100LL);
      unsigned int v161 = sub_1006891FC((int)v96 - (int)v98, v96, 100LL);
      unsigned int v160 = sub_1006891FC(v94, v96, 100LL);
      unsigned int v165 = v95;
      unsigned int v159 = sub_1006891FC(v94, v98, 100LL);
      id v99 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
      v235[0] = @"aps";
      v236[0] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v94);
      v235[1] = @"alsAps";
      v236[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v166);
      v235[2] = @"tileAps";
      v236[2] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v165);
      v235[3] = @"percentAlsAps";
      v236[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v164);
      v235[4] = @"percentTileAps";
      v236[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v163);
      v235[5] = @"pass";
      v236[5] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v155);
      v236[6] = &__kCFBooleanFalse;
      v235[6] = @"isWifiFixWithAssociatedAp";
      v235[7] = @"isConsistentAssociatedApBetweenAssociatedApHistoryAndAonsensed";
      v236[7] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v28 & 1);
      v235[8] = @"apsInScanGroup";
      v236[8] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v96);
      v235[9] = @"apsWithLocationInScanGroup";
      v236[9] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v98);
      v235[10] = @"apsWithoutLocationInScanGroup";
      v236[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v96 - v98));
      v235[11] = @"percentApsWithLocationInScanGroup";
      v236[11] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v162);
      v235[12] = @"percentApsWithoutLocationInScanGroup";
      v236[12] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v161);
      v235[13] = @"percentApsInScanGroupUsedInLocation";
      v236[13] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v160);
      v235[14] = @"percentApsWithLocationUsedInLocation";
      v236[14] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v159);
      objc_msgSend( v99,  "setDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v236,  v235,  15));
      if (sub_100869780(v81))
      {
        double v100 = *(double *)(v81 + 20);
        if (v100 < 20.0) {
          double v100 = 20.0;
        }
        *(double *)(v81 + 20) = v100;
        *(_DWORD *)(v81 + 12_Block_object_dispose(&STACK[0x7E0], 8) = sub_1009889F0(*(_DWORD *)(v81 + 84));
        *(_OWORD *)(v81 + 100) = *(_OWORD *)(v81 + 4);
        *(void *)(v81 + 116) = *(void *)(v81 + 60);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        __int128 v101 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v102 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v168[1] - *v168) >> 3);
          uint64_t v103 = *(void *)(v81 + 76);
          uint64_t v104 = *(void *)(v81 + 4);
          uint64_t v105 = *(void *)(v81 + 12);
          uint64_t v106 = *(void *)(v81 + 20);
          *(_DWORD *)std::stringbuf::string_type buf = 67242241;
          *(_DWORD *)&uint8_t buf[4] = v94;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v102;
          *(_WORD *)&_BYTE buf[18] = 1026;
          *(_DWORD *)&buf[20] = v149;
          *(_WORD *)&_BYTE buf[24] = 2050;
          *(void *)&buf[26] = v103;
          *(_WORD *)&buf[34] = 2049;
          *(void *)&_BYTE buf[36] = v104;
          *(_WORD *)&buf[44] = 2049;
          *(void *)&buf[46] = v105;
          *(_WORD *)&buf[54] = 2050;
          *(void *)&buf[56] = v106;
          LOWORD(v256) = 1026;
          *(_DWORD *)((char *)&v256 + 2) = v166;
          WORD3(v256) = 1026;
          DWORD2(v256) = v165;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "@WsbLoc, fix, aps, %{public}d, %{public}lu, reproc, %{public}d, time, %{public}.1f, ll, %{private}.7f, %{pri vate}.7f, hAcc, %{public}.1f, alsAps, %{public}u, tileAps, %{public}u",  buf,  0x4Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          uint64_t v129 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v168[1] - *v168) >> 3);
          uint64_t v130 = *(void *)(v81 + 76);
          uint64_t v131 = *(void *)(v81 + 4);
          uint64_t v132 = *(void *)(v81 + 12);
          uint64_t v133 = *(void *)(v81 + 20);
          *(_DWORD *)uint64_t v223 = 67242241;
          *(_DWORD *)&v223[4] = v94;
          *(_WORD *)&v223[8] = 2050;
          *(void *)&v223[10] = v129;
          *(_WORD *)&v223[18] = 1026;
          *(_DWORD *)&v223[20] = v149;
          *(_WORD *)&v223[24] = 2050;
          *(void *)&v223[26] = v130;
          __int16 v224 = 2049;
          uint64_t v225 = v131;
          __int16 v226 = 2049;
          uint64_t v227 = v132;
          __int16 v228 = 2050;
          uint64_t v229 = v133;
          __int16 v230 = 1026;
          unsigned int v231 = v166;
          __int16 v232 = 1026;
          unsigned int v233 = v165;
          LODWORD(v147) = 76;
          uint64_t v134 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbLoc, fix, aps, %{public}d, %{public}lu, reproc, %{public}d, time, %{public}.1f, ll, %{pri vate}.7f, %{private}.7f, hAcc, %{public}.1f, alsAps, %{public}u, tileAps, %{public}u",  v223,  v147);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v134);
          if (v134 != buf) {
            free(v134);
          }
        }

        double v107 = *v82;
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        __int128 v108 = (os_log_s *)qword_101934868;
        double v109 = (v8 - v107) / 60.0;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67240706;
          *(_DWORD *)&uint8_t buf[4] = v94;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(double *)&buf[10] = v109;
          *(_WORD *)&_BYTE buf[18] = 2082;
          *(void *)&buf[20] = v155;
          _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEBUG,  "WsbMetric, fix, aps, %{public}d, age, %{public}0.1f, %{public}s",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          *(_DWORD *)uint64_t v223 = 67240706;
          *(_DWORD *)&v223[4] = v94;
          *(_WORD *)&v223[8] = 2050;
          *(double *)&v223[10] = v109;
          *(_WORD *)&v223[18] = 2082;
          *(void *)&v223[20] = v155;
          LODWORD(v147) = 28;
          __int16 v135 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, fix, aps, %{public}d, age, %{public}0.1f, %{public}s",  v223,  v147);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v135);
          if (v135 != buf) {
            free(v135);
          }
        }

        [v99 setObject:&__kCFBooleanTrue forKeyedSubscript:@"fix"];
        objc_msgSend( v99,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v109),  @"age");
        objc_msgSend( v99,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *v91),  @"isWifiFixWithAssociatedAp");
        if (*v91)
        {
          [v99 setObject:&off_1018D36E0 forKeyedSubscript:@"aps"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"alsAps"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"tileAps"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"percentAlsAps"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"percentTileAps"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"percentApsInScanGroupUsedInLocation"];
          [v99 setObject:&off_1018D36F8 forKeyedSubscript:@"percentApsWithLocationUsedInLocation"];
        }

        sub_100E02C88((uint64_t)buf, (uint64_t)v239);
        if (sub_100E02CBC((uint64_t)buf, v81))
        {
          sub_100E02D40((uint64_t)buf, v81);
          double v111 = *(double *)(v81 + 20);
          if (v111 > 0.0) {
            double v112 = v110 / v111;
          }
          else {
            double v112 = -1.0;
          }
          objc_msgSend( v99,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  @"horizontalError");
          objc_msgSend( v99,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v112),  @"horizontalErrorRatio");
          *(void *)&double v113 = sub_100E02D54((uint64_t)buf, v223).n128_u64[0];
          objc_msgSend( v99,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v234, v113),  @"referenceLocationType");
        }

        v174[0] = _NSConcreteStackBlock;
        v174[1] = 3221225472LL;
        v174[2] = sub_10068A9A4;
        v174[3] = &unk_1018486B0;
        int v175 = v94;
        unsigned int v176 = v166;
        unsigned int v177 = v165;
        unsigned int v178 = v164;
        *(double *)&v174[4] = v109;
        v174[5] = v155;
        v174[6] = v81;
        unsigned int v179 = v163;
        int v180 = v96;
        int v181 = v98;
        int v182 = v96 - v98;
        unsigned int v183 = v162;
        unsigned int v184 = v161;
        unsigned int v185 = v160;
        unsigned int v186 = v159;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.fix", v174);
        ++v153;
      }

      else
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        int v114 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
        {
          uint64_t v115 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v168[1] - *v168) >> 3);
          double v116 = *v82;
          *(_DWORD *)std::stringbuf::string_type buf = 134349568;
          *(void *)&uint8_t buf[4] = v115;
          *(_WORD *)&_BYTE buf[12] = 1026;
          *(_DWORD *)&buf[14] = v149;
          *(_WORD *)&_BYTE buf[18] = 2050;
          *(double *)&buf[20] = v116;
          _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_INFO,  "@WsbLoc, none, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          uint64_t v126 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v168[1] - *v168) >> 3);
          double v127 = *v82;
          *(_DWORD *)uint64_t v223 = 134349568;
          *(void *)&v223[4] = v126;
          *(_WORD *)&v223[12] = 1026;
          *(_DWORD *)&v223[14] = v149;
          *(_WORD *)&v223[18] = 2050;
          *(double *)&v223[20] = v127;
          LODWORD(v147) = 28;
          uint64_t v128 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbLoc, none, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f",  v223,  v147);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroup s(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLo cation> &, Types::WsbPassType) const",  "%s\n",  v128);
          if (v128 != buf) {
            free(v128);
          }
        }

        [v99 setObject:&__kCFBooleanFalse forKeyedSubscript:@"fix"];
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      uint64_t v117 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 138477827;
        *(void *)&uint8_t buf[4] = v99;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "@WsbMetric, result, %{private}@", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        *(_DWORD *)uint64_t v223 = 138477827;
        *(void *)&v223[4] = v99;
        LODWORD(v147) = 12;
        int v118 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbMetric, result, %{private}@",  v223,  v147);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups( const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocati on> &, Types::WsbPassType) const",  "%s\n",  v118);
        if (v118 != buf) {
          free(v118);
        }
      }

      v173[0] = _NSConcreteStackBlock;
      v173[1] = 3221225472LL;
      v173[2] = sub_10068ABC4;
      v173[3] = &unk_1018486D8;
      v173[4] = v99;
      AnalyticsSendEventLazy(@"com.apple.clx.wsb.result", v173);
      *(void *)std::stringbuf::string_type buf = &v187;
      sub_1000129D4((void ***)buf);
      *(void *)std::stringbuf::string_type buf = &v254[8];
      sub_1000129D4((void ***)buf);
      if ((void)v253)
      {
        *((void *)&v253 + 1) = v253;
        operator delete((void *)v253);
      }

      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
      if (__p)
      {
        v200 = (char *)__p;
        operator delete(__p);
      }

      int v23 = v157 + v156;
      ++v167;
      __int128 v22 = v168 + 3;
    }

    while (v168 + 3 != v150);
  }

  uint64_t v136 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)std::stringbuf::string_type buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = v153;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v137;
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v155;
    _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)int v240 = 67240706;
    *(_DWORD *)&v240[4] = v153;
    *(_WORD *)&v240[8] = 2050;
    *(void *)&v240[10] = v143;
    *(_WORD *)&v240[18] = 2082;
    *(void *)&v240[20] = v155;
    LODWORD(v147) = 28;
    uint64_t v144 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s",  v240,  v147);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(cons t CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, T ypes::WsbPassType) const",  "%s\n",  v144);
    if (v144 != buf) {
      free(v144);
    }
  }

  if (v153)
  {
    unint64_t v138 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      *(void *)&uint8_t buf[4] = v155;
      *(_WORD *)&_BYTE buf[12] = 1026;
      *(_DWORD *)&buf[14] = v153;
      _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEBUG,  "WsbMetric, groupresult, %{public}s, %{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)int v240 = 136446466;
      *(void *)&v240[4] = v155;
      *(_WORD *)&v240[12] = 1026;
      *(_DWORD *)&v240[14] = v153;
      LODWORD(v147) = 18;
      uint64_t v146 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, groupresult, %{public}s, %{public}d",  v240,  v147);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(co nst CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const",  "%s\n",  v146);
      if (v146 != buf) {
        free(v146);
      }
    }

    v171[0] = _NSConcreteStackBlock;
    v171[1] = 3221225472LL;
    v171[2] = sub_10068AC14;
    v171[3] = &unk_1018486F8;
    v171[4] = v155;
    int v172 = v153;
    AnalyticsSendEventLazy(@"com.apple.clx.wsb.groupresult", v171);
  }

  unint64_t v139 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67240962;
    *(_DWORD *)&uint8_t buf[4] = v154;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = HIDWORD(v154);
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = v23;
    *(_WORD *)&buf[20] = 2082;
    *(void *)&buf[22] = v155;
    _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEBUG,  "@WsbMetric, wsbWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociate dAp, %{public}d, passType, %{public}s",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    *(_DWORD *)int v240 = 67240962;
    *(_DWORD *)&v240[4] = v154;
    *(_WORD *)&v240[8] = 1026;
    *(_DWORD *)&v240[10] = HIDWORD(v154);
    *(_WORD *)&v240[14] = 1026;
    *(_DWORD *)&v240[16] = v23;
    *(_WORD *)&v240[20] = 2082;
    *(void *)&v240[22] = v155;
    LODWORD(v147) = 30;
    __int16 v145 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbMetric, wsbWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFix esWithAssociatedAp, %{public}d, passType, %{public}s",  v240,  v147);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(cons t CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, T ypes::WsbPassType) const",  "%s\n",  v145);
    if (v145 != buf) {
      free(v145);
    }
  }

  v169[0] = _NSConcreteStackBlock;
  v169[1] = 3221225472LL;
  v169[2] = sub_10068ACB8;
  v169[3] = &unk_101848718;
  v169[5] = v154;
  int v170 = v23;
  v169[4] = v155;
  AnalyticsSendEventLazy(@"com.apple.clx.wsbWithAssociatedAp", v169);
  return sub_100019CEC((uint64_t)&v220);
}

void sub_100688E28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  int v32 = *(void **)a31;
  if (*(void *)a31)
  {
    *(void *)(a31 + _Block_object_dispose(&STACK[0x7E0], 8) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

void sub_100688FC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p = 0LL;
  int v32 = 0LL;
  __int128 v33 = 0LL;
  sub_100686848(&__p, *(void *)(a1 + 1208));
  uint64_t v3 = *(uint64_t **)(a1 + 1200);
  if (v3)
  {
    double v4 = v32;
    do
    {
      uint64_t v5 = v3 + 3;
      if (v4 >= v33)
      {
        __int128 v10 = (char *)__p;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)__p) >> 5);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        if (0x5555555555555556LL * ((v33 - (_BYTE *)__p) >> 5) > v12) {
          unint64_t v12 = 0x5555555555555556LL * ((v33 - (_BYTE *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 5) >= 0x155555555555555LL) {
          unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          __int128 v14 = (char *)sub_1003F6AEC((uint64_t)&v33, v13);
          __int128 v10 = (char *)__p;
          double v4 = v32;
        }

        else
        {
          __int128 v14 = 0LL;
        }

        __int128 v15 = &v14[96 * v11];
        __int128 v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)__int128 v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        __int128 v17 = *(_OWORD *)(v3 + 7);
        __int128 v18 = *(_OWORD *)(v3 + 9);
        __int128 v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          uint64_t v25 = &v14[96 * v11];
        }

        else
        {
          __int128 v20 = &v14[96 * v11];
          do
          {
            __int128 v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            __int128 v22 = *((_OWORD *)v4 - 4);
            __int128 v23 = *((_OWORD *)v4 - 3);
            __int128 v24 = *((_OWORD *)v4 - 1);
            uint64_t v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }

          while (v4 != v10);
        }

        double v4 = v15 + 96;
        std::string __p = v25;
        int v32 = v15 + 96;
        __int128 v33 = &v14[96 * v13];
        if (v10) {
          operator delete(v10);
        }
      }

      else
      {
        __int128 v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)double v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        __int128 v7 = *(_OWORD *)(v3 + 7);
        __int128 v8 = *(_OWORD *)(v3 + 9);
        __int128 v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }

      int v32 = v4;
      uint64_t v3 = (uint64_t *)*v3;
    }

    while (v3);
  }

  sub_10068692C(a1, (void *)(a1 + 6280), *(void **)(a1 + 3312), (double **)&__p, 1, (uint64_t *)&v29);
  uint64_t v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(void *)(a2 + 1640) = v26;
    operator delete(v26);
    *(void *)(a2 + 1632) = 0LL;
    *(void *)(a2 + 1640) = 0LL;
    *(void *)(a2 + 164_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  }

  *(_OWORD *)(a2 + 1632) = v29;
  char v27 = (char *)__p;
  *(void *)(a2 + 164_Block_object_dispose(&STACK[0x7E0], 8) = v30;
  if (v27)
  {
    int v32 = v27;
    operator delete(v27);
  }

void sub_1006891CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002D9D34(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1006891FC(int a1, unsigned int a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v6 = a3;
  if (a2) {
    uint64_t v6 = 100 * a1 / a2;
  }
  if (v6 >= 0x65)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    __int128 v7 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240960;
      int v18 = v6;
      __int16 v19 = 1026;
      int v20 = a1;
      __int16 v21 = 1026;
      unsigned int v22 = a2;
      __int16 v23 = 1026;
      int v24 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Invalid percentage: %{public}u. count: %{public}u, total: %{public}u, defaultPercentage: %{public}u",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      v10[0] = 67240960;
      v10[1] = v6;
      __int16 v11 = 1026;
      int v12 = a1;
      __int16 v13 = 1026;
      unsigned int v14 = a2;
      __int16 v15 = 1026;
      int v16 = v3;
      __int128 v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "Invalid percentage: %{public}u. count: %{public}u, total: %{public}u, defaultPercentage: %{public}u",  v10,  26);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CL::Wifi1::Policies::PositionCalculation::percentage(uint32_t, uint32_t, uint32_t)",  "%s\n",  v9);
    }
  }

  return v6;
}

void sub_10068940C( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, double a10@<D0>, uint64_t a11, int a12)
{
  uint64_t v159 = 0LL;
  int v158 = 0;
  unint64_t v157 = 0xBFF0000000000000LL;
  *(void *)&v153[12] = 0LL;
  *(void *)&v153[4] = 0LL;
  *(_OWORD *)&v153[20] = xmmword_1012E0070;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)&v153[36] = _Q1;
  *(_OWORD *)&v153[52] = _Q1;
  *(_OWORD *)&v153[68] = _Q1;
  *(_DWORD *)int v153 = 0xFFFF;
  *(_DWORD *)&v153[84] = 0;
  __int128 v154 = 0uLL;
  *(void *)&v153[88] = 0xBFF0000000000000LL;
  *(void *)((char *)&v155 + 4) = 0xBFF0000000000000LL;
  LODWORD(v155) = 0;
  HIDWORD(v155) = 0x7FFFFFFF;
  memset(v156, 0, 25);
  int v152 = -200;
  unint64_t v151 = 0xC069000000000000LL;
  BOOL v150 = 0;
  double v149 = a10;
  *(double *)(a11 + 120) = a10;
  uint64_t v134 = 0LL;
  uint64_t v135 = 0LL;
  uint64_t v133 = &v134;
  v129[0] = 0LL;
  v129[1] = 0LL;
  uint64_t v128 = v129;
  *(void *)&v161[8] = 0LL;
  *(void *)unsigned int v161 = 0LL;
  *(void *)std::stringbuf::string_type buf = v161;
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1];
  if (*a2 != v19)
  {
    do
    {
      *(void *)std::string __p = *(void *)v18;
      sub_1007EC360((std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_1010DD48C(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__src;
        *(void *)&__p[16] = *(void *)&__src[16];
      }

      __int128 v20 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)&_BYTE __p[24] = *(_OWORD *)v18;
      *(_OWORD *)&__p[40] = v20;
      __int128 v21 = *(_OWORD *)(v18 + 32);
      __int128 v22 = *(_OWORD *)(v18 + 48);
      __int128 v23 = *(_OWORD *)(v18 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v18 + 64);
      *(_OWORD *)&__p[104] = v23;
      *(_OWORD *)&__p[56] = v21;
      *(_OWORD *)&__p[72] = v22;
      sub_10068C1D4((uint64_t **)&v133, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10002276C((uint64_t **)&v128, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      v18 += 96LL;
    }

    while (v18 != v19);
  }

  uint64_t v24 = *a3;
  uint64_t v25 = a3[1];
  if (*a3 != v25)
  {
    do
    {
      *(void *)std::string __p = *(void *)v24;
      sub_1007EC360((std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_1010DD48C(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__src;
        *(void *)&__p[16] = *(void *)&__src[16];
      }

      __int128 v26 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)&_BYTE __p[24] = *(_OWORD *)v24;
      *(_OWORD *)&__p[40] = v26;
      __int128 v27 = *(_OWORD *)(v24 + 32);
      __int128 v28 = *(_OWORD *)(v24 + 48);
      __int128 v29 = *(_OWORD *)(v24 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v24 + 64);
      *(_OWORD *)&__p[104] = v29;
      *(_OWORD *)&__p[56] = v27;
      *(_OWORD *)&__p[72] = v28;
      sub_10068C1D4((uint64_t **)&v133, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10002276C((uint64_t **)buf, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      v24 += 96LL;
    }

    while (v24 != v25);
  }

  uint64_t v120 = a3;
  uint64_t v30 = (uint64_t *)v133;
  if (v133 != &v134)
  {
    int v31 = 0;
    do
    {
      sub_1010DDBC0(v165, "type");
      int v32 = v30 + 4;
      int v33 = v31 + 1;
      if (v31 < (int)sub_100B7E828())
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101848798);
        }
        __int128 v34 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          id v35 = v30 + 4;
          uint64_t v36 = v30[8];
          uint64_t v37 = v30[9];
          uint64_t v39 = v30[10];
          uint64_t v38 = v30[11];
          uint64_t v40 = v30[12];
          int v41 = *((_DWORD *)v30 + 32);
          int v42 = *((_DWORD *)v30 + 26);
          int v43 = *((_DWORD *)v30 + 27);
          uint64_t v44 = v30[17];
          uint64_t v45 = v30[15];
          uint64_t v46 = v165;
          if (v165[23] < 0) {
            uint64_t v46 = *(_BYTE **)v165;
          }
          *(_DWORD *)std::string __p = 67243523;
          *(_DWORD *)&__p[4] = v33;
          *(_WORD *)&std::string __p[8] = 2050;
          *(void *)&__p[10] = v135;
          *(_WORD *)&__p[18] = 2081;
          *(void *)&__p[20] = v35;
          *(_WORD *)&__p[28] = 2049;
          *(void *)&__p[30] = v36;
          *(_WORD *)&__p[38] = 2049;
          *(void *)&__p[40] = v37;
          *(_WORD *)&__p[48] = 2050;
          *(void *)&__p[50] = v38;
          *(_WORD *)&__p[58] = 1026;
          *(_DWORD *)&__p[60] = v42;
          *(_WORD *)&__p[64] = 2049;
          *(void *)&__p[66] = v39;
          *(_WORD *)&__p[74] = 2050;
          *(void *)&__p[76] = v40;
          *(_WORD *)&__p[84] = 1026;
          *(_DWORD *)&__p[86] = v41;
          *(_WORD *)&__p[90] = 1026;
          *(_DWORD *)&__p[92] = v43;
          *(_WORD *)&__p[96] = 2050;
          *(void *)&__p[98] = v44;
          *(_WORD *)&__p[106] = 2050;
          *(void *)&__p[108] = v45;
          *(_WORD *)&__p[116] = 2081;
          *(void *)&__p[118] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "WifiCalc, input AP, %{public}d / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}.6f, reach, %{public}d, altitude, %{private}.2f, vacc, %{public}.2f, rssi, %{public}d, channel, %{public}d, scan timestamp, %{public}.3lf, query timestamp, %{public}.3lf, %{private}s",  __p,  0x7Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101848798);
          }
          uint64_t v49 = v30[8];
          uint64_t v50 = v30[9];
          uint64_t v52 = v30[10];
          uint64_t v51 = v30[11];
          uint64_t v53 = v30[12];
          int v54 = *((_DWORD *)v30 + 32);
          int v55 = *((_DWORD *)v30 + 26);
          int v56 = *((_DWORD *)v30 + 27);
          uint64_t v57 = v30[17];
          uint64_t v58 = v30[15];
          __int128 v59 = v165;
          if (v165[23] < 0) {
            __int128 v59 = *(_BYTE **)v165;
          }
          *(_DWORD *)__src = 67243523;
          *(_DWORD *)&__src[4] = v33;
          *(_WORD *)&__src[8] = 2050;
          *(void *)&__src[10] = v135;
          *(_WORD *)&__src[18] = 2081;
          *(void *)&__src[20] = v32;
          *(_WORD *)&__src[28] = 2049;
          *(void *)&__src[30] = v49;
          *(_WORD *)&__src[38] = 2049;
          *(void *)&__src[40] = v50;
          *(_WORD *)&__src[48] = 2050;
          *(void *)&__src[50] = v51;
          *(_WORD *)&__src[58] = 1026;
          *(_DWORD *)&__src[60] = v55;
          *(_WORD *)int v169 = 2049;
          *(void *)&v169[2] = v52;
          *(_WORD *)int v170 = 2050;
          *(void *)&v170[2] = v53;
          LOWORD(v171) = 1026;
          *(_DWORD *)((char *)&v171 + 2) = v54;
          HIWORD(v171) = 1026;
          *(_DWORD *)int v172 = v56;
          *(_WORD *)&v172[4] = 2050;
          *(void *)&v172[6] = v57;
          *(_WORD *)&v172[14] = 2050;
          *(void *)&v172[16] = v58;
          *(_WORD *)&v172[24] = 2081;
          *(void *)&v172[26] = v59;
          LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 126;
          __int128 v60 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, input AP, %{public}d / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}.6f, reach, %{public}d, altitude, %{private}.2f, vacc, %{public}.2f, rssi, %{public} d, channel, %{public}d, scan timestamp, %{public}.3lf, query timestamp, %{public}.3lf, %{private}s",  __src,  v118);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CL::Wifi1::Policies::PositionCalculation::logWifiApLocations(const std::vector<CLWifiAPLocation> &, con st std::vector<CLWifiAPLocation> &)",  "%s\n",  v60);
          if (v60 != __p) {
            free(v60);
          }
        }
      }

      if ((v165[23] & 0x80000000) != 0) {
        operator delete(*(void **)v165);
      }
      __int128 v47 = (char *)v30[1];
      if (v47)
      {
        do
        {
          unint64_t v48 = (char **)v47;
          __int128 v47 = *(char **)v47;
        }

        while (v47);
      }

      else
      {
        do
        {
          unint64_t v48 = (char **)v30[2];
          _ZF = *v48 == (char *)v30;
          uint64_t v30 = (uint64_t *)v48;
        }

        while (!_ZF);
      }

      int v31 = v33;
      uint64_t v30 = (uint64_t *)v48;
    }

    while (v48 != &v134);
  }

  sub_1000229D4((uint64_t)buf, *(char **)v161);
  sub_1000229D4((uint64_t)&v128, v129[0]);
  sub_1000229D4((uint64_t)&v133, v134);
  if (*a2 != a2[1]) {
    sub_1003F463C( a1,  a2,  v120,  100.0,  v149,  500.0,  90LL,  4LL,  4LL,  (int *)&v159 + 1,  (int *)&v159,  (double *)&v157,  a4,  (uint64_t)v153,  &v152,  (double *)&v151,  &v150,  &v158,  a8,  a11,  a12);
  }
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848778);
  }
  __int128 v61 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    BOOL v63 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)std::string __p = 134349824;
    *(void *)&__p[4] = v62;
    *(_WORD *)&_BYTE __p[12] = 1026;
    *(_DWORD *)&__p[14] = v159;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v158;
    *(_WORD *)&_BYTE __p[24] = 1026;
    *(_DWORD *)&__p[26] = v63;
    _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "@WifiAps, compute, %{public}lu, used, %{public}u, used_vert, %{public}u, hint, %{public}d",  __p,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    BOOL v105 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)__src = 134349824;
    *(void *)&__src[4] = v104;
    *(_WORD *)&__src[12] = 1026;
    *(_DWORD *)&__src[14] = v159;
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = v158;
    *(_WORD *)&__src[24] = 1026;
    *(_DWORD *)&__src[26] = v105;
    LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 30;
    uint64_t v106 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiAps, compute, %{public}lu, used, %{public}u, used_vert, %{public}u, hint, %{public}d",  __src,  v118);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::m ap<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaem onLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::Za xisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)",  "%s\n",  v106);
    if (v106 != __p) {
      free(v106);
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848798);
  }
  int v64 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v65 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)std::string __p = 67240192;
    *(_DWORD *)&__p[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, isWsb, %{public}d", __p, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    int v107 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)__src = 67240192;
    *(_DWORD *)&__src[4] = v107;
    LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 8;
    __int128 v108 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, zaxis, isWsb, %{public}d",  __src,  v118);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::m ap<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaem onLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::Za xisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)",  "%s\n",  v108);
    if (v108 != __p) {
      free(v108);
    }
  }

  if (!a7 || !a6 || *a2 == a2[1])
  {
    *(_OWORD *)(a11 + 12_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)&v153[28];
    int v69 = v159;
    int v70 = v158;
    unint64_t v71 = v157;
    int v72 = *(_DWORD *)(a11 + 152);
    __int128 v73 = v155;
    __int128 v74 = a9;
    a9[6] = v154;
    a9[7] = v73;
    a9[8] = *(_OWORD *)v156;
    *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v156[12];
    __int128 v75 = *(_OWORD *)&v153[48];
    a9[2] = *(_OWORD *)&v153[32];
    a9[3] = v75;
    __int128 v76 = *(_OWORD *)&v153[80];
    a9[4] = *(_OWORD *)&v153[64];
    a9[5] = v76;
    __int128 v77 = *(_OWORD *)v153;
    __int128 v78 = *(_OWORD *)&v153[16];
    goto LABEL_113;
  }

  sub_100E5C958(a6, (uint64_t)&v133);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848798);
  }
  __int16 v66 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    if (v147) {
      __int16 v67 = "Yes";
    }
    else {
      __int16 v67 = "No";
    }
    *(_DWORD *)std::string __p = 136450051;
    *(void *)&__p[4] = v67;
    *(_WORD *)&_BYTE __p[12] = 2049;
    *(void *)&__p[14] = v146;
    *(_WORD *)&__p[22] = 2049;
    *(void *)&_BYTE __p[24] = v148;
    *(_WORD *)&_BYTE __p[32] = 2049;
    *(void *)&__p[34] = v133;
    *(_WORD *)&__p[42] = 2049;
    *(void *)&__p[44] = v135;
    *(_WORD *)&__p[52] = 2049;
    *(void *)&__p[54] = v134;
    *(_WORD *)&__p[62] = 2049;
    *(void *)&__p[64] = v136;
    *(_WORD *)&__p[72] = 2049;
    *(void *)&__p[74] = v137;
    *(_WORD *)&__p[82] = 2049;
    *(void *)&__p[84] = v138;
    *(_WORD *)&__p[92] = 2049;
    *(void *)&__p[94] = v139;
    *(_WORD *)&__p[102] = 2049;
    *(void *)&__p[104] = v140;
    *(_WORD *)&__p[112] = 2049;
    *(void *)&__p[114] = v141;
    *(_WORD *)&__p[122] = 2049;
    *(void *)&__p[124] = v142;
    __int16 v180 = 2049;
    uint64_t v181 = v144;
    __int16 v182 = 2049;
    uint64_t v183 = v143;
    __int16 v184 = 2049;
    uint64_t v185 = v145;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "WifiCalc, zaxis input kalmanFilter, initialized, %{public}s, relative altitude, %{private}.6f, wifiAltUncAve, %{pr ivate}.6f, alt_k_k, %{private}.6f, alt_k1_k, %{private}.6f, cov_k_k, %{private}.6f, cov_k1_k, %{private}.6f, proce ss noise variance, stable, %{private}.6f, unstable, %{private}.6f, measurement variance, %{private}.6f, timestamp, propagate, %{private}.3lf, update, %{private}.3lf, relative altitude timestamp, %{private}.3lf, wifi time interva l, %{private}.6f, relative altitude time interval, %{private}.6f, altitude change during baro outage, %{private}.6f",  __p,  0xA2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    double v109 = "Yes";
    if (!v147) {
      double v109 = "No";
    }
    *(_DWORD *)__src = 136450051;
    *(void *)&__src[4] = v109;
    *(_WORD *)&__src[12] = 2049;
    *(void *)&__src[14] = v146;
    *(_WORD *)&__src[22] = 2049;
    *(void *)&__src[24] = v148;
    *(_WORD *)&__src[32] = 2049;
    *(void *)&__src[34] = v133;
    *(_WORD *)&__src[42] = 2049;
    *(void *)&__src[44] = v135;
    *(_WORD *)&__src[52] = 2049;
    *(void *)&__src[54] = v134;
    *(_WORD *)&__src[62] = 2049;
    *(void *)int v169 = v136;
    *(_WORD *)&v169[8] = 2049;
    *(void *)int v170 = v137;
    *(_WORD *)&v170[8] = 2049;
    uint64_t v171 = v138;
    *(_WORD *)int v172 = 2049;
    *(void *)&v172[2] = v139;
    *(_WORD *)&v172[10] = 2049;
    *(void *)&v172[12] = v140;
    *(_WORD *)&v172[20] = 2049;
    *(void *)&v172[22] = v141;
    *(_WORD *)&v172[30] = 2049;
    *(void *)&v172[32] = v142;
    __int16 v173 = 2049;
    uint64_t v174 = v144;
    __int16 v175 = 2049;
    uint64_t v176 = v143;
    __int16 v177 = 2049;
    uint64_t v178 = v145;
    LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 162;
    double v110 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, zaxis input kalmanFilter, initialized, %{public}s, relative altitude, %{private}.6f, wifi AltUncAve, %{private}.6f, alt_k_k, %{private}.6f, alt_k1_k, %{private}.6f, cov_k_k, %{private}.6f, cov_k1_k, %{private}.6f, process noise variance, stable, %{private}.6f, unstable, %{private}.6f, me asurement variance, %{private}.6f, timestamp, propagate, %{private}.3lf, update, %{private}.3lf, re lative altitude timestamp, %{private}.3lf, wifi time interval, %{private}.6f, relative altitude tim e interval, %{private}.6f, altitude change during baro outage, %{private}.6f",  __src,  v118);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::m ap<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaem onLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::Za xisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)",  "%s\n",  v110);
    if (v110 != __p) {
      free(v110);
    }
  }

  unint64_t v132 = 0xBFF0000000000000LL;
  double v68 = *(double *)&v153[36];
  if (*(double *)(a5 + 36) < 0.0)
  {
    double v68 = *((double *)sub_100F4BF20() + 42);
    goto LABEL_82;
  }

  double v79 = v149;
  double v80 = *(double *)(a5 + 76);
  if (v79 - v80 < *((double *)sub_100F4BF20() + 41)
    || (double v81 = *(double *)(a5 + 28),
        double v82 = *(double *)&v153[28],
        __int16 v83 = (double *)sub_100F4BF20(),
        double v84 = vabdd_f64(v81, v82),
        double v68 = -1.0,
        v84 <= v83[43]))
  {
    double v68 = *(double *)(a5 + 36);
LABEL_82:
    unint64_t v132 = *(void *)&v68;
    if (v68 > 0.0)
    {
      double v85 = *((double *)sub_100F4BF20() + 40);
      double v86 = *(double *)&v153[36];
      double v68 = v86 * *((double *)sub_100F4BF20() + 40) + v68 * (1.0 - v85);
      unint64_t v132 = *(void *)&v68;
    }
  }

  *(double *)(a11 + 16) = v68;
  __int128 v87 = a7 + 1;
  sub_10068C294((uint64_t)__p, a7 + 1);
  uint64_t v88 = *(void *)&__p[40];
  sub_100231C10(__p);
  if (v88)
  {
    int v89 = (*(uint64_t (**)(void *, double *))(*a7 + 16LL))(a7, &v149);
    sub_10068C294((uint64_t)__p, v87);
    *(void *)(a11 + 96) = *(void *)(*(void *)(*(void *)&__p[8]
    *(_BYTE *)(a11 + 89) = 1;
    sub_100231C10(__p);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    uint64_t v90 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      sub_10068C294((uint64_t)__p, v87);
      int v91 = *(_DWORD *)&__p[40];
      sub_10068C294((uint64_t)__src, v87);
      uint64_t v92 = *(void *)(*(void *)(*(void *)&__src[8]
      sub_10068C294((uint64_t)&v128, v87);
      unint64_t v93 = "No";
      uint64_t v94 = *(void *)(*(void *)&v129[0][((unint64_t)(v131 + v130 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
      *(_DWORD *)std::stringbuf::string_type buf = 67240963;
      if (v89) {
        unint64_t v93 = "Yes";
      }
      *(_DWORD *)&uint8_t buf[4] = v91;
      *(_WORD *)unsigned int v161 = 2049;
      *(void *)&v161[2] = v92;
      *(_WORD *)&v161[10] = 2050;
      *(void *)&v161[12] = v94;
      __int16 v162 = 2082;
      *(void *)unsigned int v163 = v93;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEBUG,  "WifiCalc, zaxis input elevation, size, %{public}d, relative altitude, %{private}.6f, timestamp, %{public}.3lf, e levation steady, %{public}s",  buf,  0x26u);
      sub_100231C10(&v128);
      sub_100231C10(__src);
      sub_100231C10(__p);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848798);
      }
      uint64_t v111 = qword_101934858;
      sub_10068C294((uint64_t)__src, v87);
      int v112 = *(_DWORD *)&__src[40];
      sub_10068C294((uint64_t)&v128, v87);
      uint64_t v113 = *(void *)(*(void *)&v129[0][((unint64_t)(v131 + v130 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
                       + 16LL * (v131 + v130 - 1));
      sub_10068C294((uint64_t)buf, v87);
      int v114 = "No";
      uint64_t v115 = *(void *)(*(void *)(*(void *)v161
                                   + (((unint64_t)(v164 + *(void *)&v163[2] - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL))
      *(_DWORD *)unsigned int v165 = 67240963;
      if (v89) {
        int v114 = "Yes";
      }
      *(_DWORD *)&v165[4] = v112;
      *(_WORD *)&v165[8] = 2049;
      *(void *)&v165[10] = v113;
      *(_WORD *)&_BYTE v165[18] = 2050;
      *(void *)&v165[20] = v115;
      __int16 v166 = 2082;
      unsigned int v167 = v114;
      LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 38;
      double v116 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v111,  2LL,  "WifiCalc, zaxis input elevation, size, %{public}d, relative altitude, %{private}.6f, timestamp, % {public}.3lf, elevation steady, %{public}s",  v165,  v118);
      sub_100231C10(buf);
      sub_100231C10(&v128);
      sub_100231C10(__src);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std: :map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CL DaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFil ter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalcul ator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)",  "%s\n",  v116);
      if (v116 != __p) {
        free(v116);
      }
    }
  }

  if ((sub_10060A358(a6) & 1) != 0)
  {
  }

  else
  {
    *(double *)std::string __p = (double)v152;
    sub_100E5C984(a6, &v149, (double *)&v153[28], (double *)&v132, (uint64_t)a7, (double *)__p, (double *)&v151);
  }

  if (sub_10060A358(a6))
  {
    *(_OWORD *)(a11 + 24) = *(_OWORD *)&v153[28];
    *(_BYTE *)(a11 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 1;
  }

  char v95 = sub_10060A358(a6);
  unint64_t v96 = *(void *)&v153[36];
  else {
    char v97 = v95;
  }
  if ((v97 & 1) == 0)
  {
    unint64_t v96 = v132;
    *(void *)&v153[36] = v132;
  }

  *(void *)(a11 + 12_Block_object_dispose(&STACK[0x7E0], 8) = *(void *)&v153[28];
  *(void *)(a11 + 1++*(_DWORD *)(result + 36) = v96;
  BOOL v98 = sub_100E5D040((double *)&v153[28], (double *)&v153[36]);
  char v99 = *(double *)&v153[36] == -1.0 || v98;
  if ((v99 & 1) == 0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848798);
    }
    double v100 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string __p = 134283777;
      *(void *)&__p[4] = *(void *)&v153[28];
      *(_WORD *)&_BYTE __p[12] = 2049;
      *(void *)&__p[14] = *(void *)&v153[36];
      _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_FAULT,  "WifiCalc, zaxis, reported invalid alt, %{private}.2f, unc, %{private}.2f",  __p,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101848798);
      }
      *(_DWORD *)__src = 134283777;
      *(void *)&__src[4] = *(void *)&v153[28];
      *(_WORD *)&__src[12] = 2049;
      *(void *)&__src[14] = *(void *)&v153[36];
      LODWORD(v11_Block_object_dispose(&STACK[0x7E0], 8) = 22;
      uint64_t v117 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiCalc, zaxis, reported invalid alt, %{private}.2f, unc, %{private}.2f",  __src,  v118);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std: :map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CL DaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFil ter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalcul ator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)",  "%s\n",  v117);
      if (v117 != __p) {
        free(v117);
      }
    }
  }

  int v69 = v159;
  int v70 = v158;
  unint64_t v71 = v157;
  int v72 = *(_DWORD *)(a11 + 152);
  __int128 v101 = v155;
  __int128 v74 = a9;
  a9[6] = v154;
  a9[7] = v101;
  a9[8] = *(_OWORD *)v156;
  *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v156[12];
  __int128 v102 = *(_OWORD *)&v153[48];
  a9[2] = *(_OWORD *)&v153[32];
  a9[3] = v102;
  __int128 v103 = *(_OWORD *)&v153[80];
  a9[4] = *(_OWORD *)&v153[64];
  a9[5] = v103;
  __int128 v77 = *(_OWORD *)v153;
  __int128 v78 = *(_OWORD *)&v153[16];
LABEL_113:
  _OWORD *v74 = v77;
  v74[1] = v78;
  *((_DWORD *)v74 + 39) = v69;
  *((_DWORD *)v74 + 40) = v70;
  *((void *)v74 + 21) = v71;
  *((_DWORD *)v74 + 44) = v72;
  *((_BYTE *)v74 + 180) = 0;
  *((_WORD *)v74 + 91) = 0;
}

void sub_10068A8D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

NSDictionary *sub_10068A9A4(uint64_t a1)
{
  v3[0] = @"aps";
  v4[0] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 56));
  v3[1] = @"alsAps";
  v4[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 60));
  v3[2] = @"tileAps";
  void v4[2] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 64));
  v3[3] = @"percentAlsAps";
  void v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  void v3[4] = @"percentTileAps";
  v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v3[5] = @"age";
  void v4[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v3[6] = @"pass";
  v4[6] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 40));
  v3[7] = @"isWifiFixWithAssociatedAp";
  v4[7] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 48) + 180LL));
  v3[8] = @"apsInScanGroup";
  _WORD v4[8] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 76));
  v3[9] = @"apsWithLocationInScanGroup";
  v4[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 80));
  v3[10] = @"apsWithoutLocationInScanGroup";
  v4[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 84));
  v3[11] = @"percentApsWithLocationInScanGroup";
  v4[11] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 88));
  v3[12] = @"percentApsWithoutLocationInScanGroup";
  v4[12] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 92));
  v3[13] = @"percentApsInScanGroupUsedInLocation";
  v4[13] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 96));
  v3[14] = @"percentApsWithLocationUsedInLocation";
  v4[14] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 100));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  15LL);
}

uint64_t sub_10068ABC4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_10068ABCC(uint64_t a1)
{
  double v4 = (void **)(a1 + 184);
  sub_1000129D4(&v4);
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x7E0], 8) = v2;
    operator delete(v2);
  }

  return a1;
}

NSDictionary *sub_10068AC14(uint64_t a1)
{
  v4[0] = @"groupResult";
  uint64_t v2 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  v4[1] = @"numInGroup";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
}

NSDictionary *sub_10068ACB8(uint64_t a1)
{
  v3[0] = @"numAssociated";
  v4[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[1] = @"numUnassociated";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[2] = @"numWifiFixesWithAssociatedAp";
  void v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[3] = @"wsbPassType";
  void v4[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  4LL);
}

void sub_10068AD98(uint64_t a1, uint64_t a2)
{
  int v3 = 2 * *(_DWORD *)(a2 + 156) + 63;
  *(_DWORD *)(a2 + 84) = v3;
  if (*(double *)(a1 + 3348) >= 0.0 && *(double *)(a2 + 20) >= 0.0)
  {
    uint64_t v4 = a1 + 3328;
    sub_100D2D9A4((uint64_t)v7);
    sub_100D2DCA4(v7, v4, a2);
    BOOL v6 = v5 <= 35000.0 && *(_DWORD *)(a2 + 156) == 1;
    int v3 = *(_DWORD *)(a2 + 84);
    if (v6) {
      ++v3;
    }
  }

  if (v3 >= 80) {
    int v3 = 80;
  }
  *(_DWORD *)(a2 + 84) = v3;
}

void *sub_10068AE30@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = (void *)result[2]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[2];
    uint64_t result = sub_1002DFB20(a2, &v4, &v4);
  }

  return result;
}

void sub_10068AE8C(_Unwind_Exception *a1)
{
}

NSDictionary *sub_10068AEA0(uint64_t a1)
{
  v3[0] = @"fixaps";
  v4[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 188));
  v3[1] = @"trigger";
  v4[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 216));
  v3[2] = @"outliers";
  void v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 224));
  v3[3] = @"pct";
  void v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 228));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  4LL);
}

NSDictionary *sub_10068AF80(uint64_t a1)
{
  v4[0] = @"wifi";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  v3[2] = @"island";
  v4[1] = v1;
  void v4[2] = @"null";
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

NSDictionary *sub_10068B028(uint64_t a1)
{
  v4[0] = @"wifi";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  v3[2] = @"island";
  v4[1] = v1;
  void v4[2] = @"sentinel";
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

NSDictionary *sub_10068B0D0(uint64_t a1)
{
  v3[0] = @"distance";
  v4[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v3[1] = @"agebin";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 248));
  v3[2] = @"motion";
  void v4[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 40));
  void v3[3] = @"uncertainty";
  void v4[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  void v4[4] = @"valid";
  void v3[4] = @"truth";
  v3[5] = @"altitude";
  void v4[5] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 56) + 28LL));
  v3[6] = @"verticalAccuracy";
  v4[6] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 56) + 36LL));
  v3[7] = @"horizontalAccuracy";
  v4[7] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 56) + 20LL));
  v3[8] = @"referenceLocationType";
  _WORD v4[8] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 348));
  v3[9] = @"numberOfApsUsedInHorizontalCalculation";
  v4[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 408));
  v3[10] = @"numberOfApsUsedInVerticalCalculation";
  v4[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 412));
  v3[11] = @"isWifiFixWithAssociatedAp";
  v4[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 244));
  v3[12] = @"visibilityIntersectionOverrideState";
  v4[12] = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 246));
  v3[13] = @"numberOfAlsApsUsedInHorizontalCalculation";
  v4[13] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 416));
  v3[14] = @"numberOfTileApsUsedInHorizontalCalculation";
  v4[14] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 420));
  void v3[15] = @"percentAlsAps";
  void v4[15] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 424));
  v3[16] = @"percentTileAps";
  v4[16] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 428));
  v3[17] = @"numberOfApsWithValidCentroids";
  v4[17] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 432));
  v3[18] = @"numberOfApsWithNoCentroidInformation";
  v4[18] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 436));
  v3[19] = @"numberOfApsInDatabasesButNoValidCentroid";
  v4[19] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 440));
  v3[20] = @"numberOfApsWithoutValidCentroids";
  v4[20] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 444));
  v3[21] = @"numberOfApsTotal";
  v4[21] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 448));
  v3[22] = @"percentApsWithValidCentroids";
  v4[22] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 452));
  v3[23] = @"percentApsWithoutValidCentroids";
  v4[23] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 456));
  v3[24] = @"percentApsWithNoCentroidInformation";
  v4[24] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 460));
  v3[25] = @"percentApsInDatabasesButNoValidCentroid";
  v4[25] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 464));
  v3[26] = @"percentApsUsedInHorizontalCalculation";
  v4[26] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 468));
  v3[27] = @"percentApsWithValidCentroidsUsedInHorizontalCalculation";
  v4[27] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 472));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  28LL);
}

NSDictionary *sub_10068B458(uint64_t a1)
{
  uint64_t v2 = @"truth";
  int v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v3,  &v2,  1LL);
}

std::string *sub_10068B4D8(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::assign(a1, a2);
  }

  else
  {
    sub_1010DDBC0(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }

  return a1;
}

BOOL sub_10068B51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_BYTE *)(a1 + 6172);
  int v5 = sub_100495E64((_DWORD *)(a1 + 5968)) || *v4 != 0;
  return sub_10068B5BC(a2, v4[248], v5, *(float *)(a1 + 6416));
}

uint64_t sub_10068B57C(uint64_t a1)
{
  return sub_10000AE14(a1);
}

BOOL sub_10068B5BC(uint64_t a1, int a2, int a3, float a4)
{
  double v4 = *(double *)(a1 + 20);
  if (v4 < 0.0)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    int v5 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, wifi fix is insufficient as it is invalid",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      LOWORD(v29) = 0;
      __int128 v7 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, wifi fix is insufficient as it is invalid",  &v29,  2,  v29);
LABEL_10:
      __int128 v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::Com putedLocation &, float, BOOL, BOOL)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }

    return result;
  }

  if (a2)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    __int128 v9 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, wifi fix is sufficient as it is on watch",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    LOWORD(v29) = 0;
    __int128 v22 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, wifi fix is sufficient as it is on watch",  &v29,  2,  (void)v29);
    goto LABEL_80;
  }

  double v10 = a4;
  if (v4 <= a4)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 156);
    if (*(_BYTE *)(a1 + 180))
    {
      if (v13 != 1)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        __int16 v15 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
        {
          int v16 = *(_DWORD *)(a1 + 156);
          *(_DWORD *)std::stringbuf::string_type buf = 67174657;
          LODWORD(v31[0]) = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "expect 1 AP for wifi fix with associated AP, got %{private}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          int v26 = *(_DWORD *)(a1 + 156);
          LODWORD(v29) = 67174657;
          DWORD1(v29) = v26;
          __int128 v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "expect 1 AP for wifi fix with associated AP, got %{private}d",  &v29,  8);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types: :ComputedLocation &, float, BOOL, BOOL)",  "%s\n",  v27);
        }
      }

      if (a3)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        __int128 v17 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient as it is in emergency mode",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          LOWORD(v29) = 0;
          LODWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 2;
          __int128 v7 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient as it is in emergency mode",  &v29,  v28,  v29);
          goto LABEL_10;
        }

        return result;
      }

      if (!*((_BYTE *)sub_100F4BF44() + 92))
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        uint64_t v24 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient so we do not skip scan by settings",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          LOWORD(v29) = 0;
          LODWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 2;
          __int128 v7 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient so we do not ski p scan by settings",  &v29,  v28,  v29);
          goto LABEL_10;
        }

        return result;
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      __int128 v21 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as sufficient so we can skip scan by settings",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        LOWORD(v29) = 0;
        LODWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 2;
        __int128 v22 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, mark wifi fix with associated AP as sufficient so we can skip scan by settings",  &v29,  v28,  (void)v29);
LABEL_80:
        uint64_t v25 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::C omputedLocation &, float, BOOL, BOOL)",  "%s\n",  v22);
        if (v25 != buf) {
          free(v25);
        }
      }
    }

    else
    {
      if (v13 <= 3)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        uint64_t v18 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(a1 + 156);
          *(_DWORD *)std::stringbuf::string_type buf = 67174913;
          LODWORD(v31[0]) = v19;
          WORD2(v31[0]) = 1025;
          *(_DWORD *)((char *)v31 + 6) = 4;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, wifi fix is insufficient as it used %{private}d APs, less than threshold %{private}d",  buf,  0xEu);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848778);
          }
          int v20 = *(_DWORD *)(a1 + 156);
          LODWORD(v29) = 67174913;
          DWORD1(v29) = v20;
          WORD4(v29) = 1025;
          *(_DWORD *)((char *)&v29 + 10) = 4;
          __int128 v7 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, wifi fix is insufficient as it used %{private}d APs, less than th reshold %{private}d",  &v29,  14,  v29);
          goto LABEL_10;
        }

        return result;
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848778);
      }
      __int128 v23 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, wifi fix is sufficient",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848778);
        }
        LOWORD(v29) = 0;
        __int128 v22 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, wifi fix is sufficient",  &v29,  2,  (void)v29);
        goto LABEL_80;
      }
    }

    return 1LL;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848778);
  }
  __int16 v11 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134283521;
    *(double *)int v31 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, sufficiency, wifi fix is insufficient as it has higher hacc than desired %{private}.1lf",  buf,  0xCu);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
    LODWORD(v29) = 134283521;
    *(double *)((char *)&v29 + 4) = v10;
    __int128 v7 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, sufficiency, wifi fix is insufficient as it has higher hacc than desired %{private}.1lf",  &v29,  12,  v29);
    goto LABEL_10;
  }

  return result;
}

void *sub_10068BF54(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }

  return __dst;
}

void sub_10068BFA0(const std::string *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  if (v9 < 0) {
    operator delete(__p);
  }
  sub_1002E1244((uint64_t)&v7);
  sub_1002E1094((uint64_t)&v6);
  sub_1002DDAD8((uint64_t)v5);
}

void sub_10068C064(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10068C080(uint64_t a1)
{
  return a1;
}

void sub_10068C0CC(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_10068C0F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_10000AE14(a1 + 624);
  return a1;
}

void sub_10068C1A8(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_OWORD *sub_10068C1D4(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (void **)sub_1000227E8((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x98uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(_OWORD *)((char *)v6 + 8_Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)((char *)v6 + 104) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)((char *)v6 + 120) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)((char *)v6 + 1++*(_DWORD *)(result + 36) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    sub_1000085FC(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

uint64_t sub_10068C294(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    __int128 v8 = 0LL;
    __int16 v11 = 0LL;
    double v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }

  else
  {
    __int128 v8 = (__int128 *)(*(void *)v7 + 16LL * v4);
    unint64_t v9 = a2[5] + v4;
    double v10 = (char *)(v5 + 8 * (v9 >> 8));
    __int16 v11 = (__int128 *)(*(void *)v10 + 16LL * v9);
  }

  sub_10068C334((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10068C320(_Unwind_Exception *a1)
{
}

void *sub_10068C334(void *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_10068C368(a1, a2, a3, v5);
}

void *sub_10068C368(void *a1, void *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10068C494(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  unsigned int v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 16LL * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  BOOL result = sub_10025C760((uint64_t)v22, a4);
  while (v14 != v16)
  {
    __int128 v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((_OWORD *)v14 == v17)
    {
      __int128 v17 = (_OWORD *)v14;
    }

    else
    {
      uint64_t v18 = (_OWORD *)v14;
      do
      {
        __int128 v19 = *a3++;
        *uint64_t v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          int v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }

        ++v18;
      }

      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }

  return result;
}

void sub_10068C494(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      __int128 v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int128 v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          int v31 = &v29[8 * (v28 >> 2)];
          int v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            id v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)id v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }

          __int128 v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 255LL;
          }
          else {
            uint64_t v64 = 256LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        __int16 v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          double v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              double v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              double v81 = &v79[8 * (v78 >> 2)];
              double v82 = (uint64_t *)a1[1];
              __int16 v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                __int16 v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                double v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)double v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              __int128 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                __int16 v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int128 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                __int16 v66 = (char *)a1[1];
              }

              __int128 v77 = &v66[-8 * (v74 >> 1)];
              __int16 v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)__int16 v66 = v69;
          __int16 v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        __int16 v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        __int16 v15 = 0LL;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                int v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)int v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              __int128 v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      __int128 v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_10068C9A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_10068CA1C(unsigned int *a1)
{
  v3[0] = @"numScannedAps";
  v4[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[8]);
  v3[1] = @"numScannedApsWithKnownLocations";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[9]);
  v3[2] = @"percentageOfScannedApsWithKnownLocationsToAllScannedAps";
  void v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[10]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

void *sub_10068CADC(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_1002DF6A8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = 184 * a2;
    unint64_t v6 = v4 + 184 * a2;
    do
    {
      sub_1002E05D4(v4);
      uint64_t v4 = v7 + 184;
      v5 -= 184LL;
    }

    while (v5);
    a1[1] = v6;
  }

  return a1;
}

void sub_10068CB40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x7E0], 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10068CB5C(uint64_t a1, void *a2, void *a3, _OWORD *a4)
{
  unint64_t v9 = sub_1005B46E8((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      __int16 v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_1007EC0B0((void *)v15 + 2, a2)) {
              return v15;
            }
          }

          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }

            else
            {
              v16 &= v11 - 1;
            }

            if (v16 != v4) {
              break;
            }
          }

          __int16 v15 = *(char **)v15;
        }

        while (v15);
      }
    }
  }

  __int16 v15 = (char *)operator new(0x78uLL);
  *(void *)__int16 v15 = 0LL;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = *a3;
  __int128 v17 = a4[3];
  *(_OWORD *)(v15 + 56) = a4[2];
  *(_OWORD *)(v15 + 72) = v17;
  __int128 v18 = a4[5];
  *(_OWORD *)(v15 + 8_Block_object_dispose(&STACK[0x7E0], 8) = a4[4];
  *(_OWORD *)(v15 + 104) = v18;
  __int128 v19 = a4[1];
  *(_OWORD *)(v15 + 24) = *a4;
  *(_OWORD *)(v15 + 40) = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1LL;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100019E10(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v26 = *(void *)a1;
  __int128 v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)__int16 v15 = *v27;
LABEL_38:
    *__int128 v27 = v15;
    goto LABEL_39;
  }

  *(void *)__int16 v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }

    else
    {
      v28 &= v11 - 1;
    }

    __int128 v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }

void sub_10068CDA8(_Unwind_Exception *a1)
{
}

void sub_10068CDBC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100607C80(v4 - 112);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10068CE2C(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_1006833E4(a3, a2);
      break;
    case 7:
      sub_100686534(a2, (uint64_t)a3);
      break;
    case 8:
      sub_100686610(a2, (uint64_t)a3);
      break;
    case 0x14:
      sub_1006834DC(a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_100686470(a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_100688FC0(a2, (uint64_t)a3);
      break;
    default:
      sub_1002DDAB0();
  }

void sub_10068CEA8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_10068CF44(_Unwind_Exception *a1)
{
}

void sub_10068CF5C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10068CFE8(_Unwind_Exception *a1)
{
}

void sub_10068D000()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_10068D064()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_10068D0D8(_Unwind_Exception *a1)
{
}

uint64_t sub_10068D0F0()
{
  HIBYTE(v22) = 0;
  sub_1002F0B04(&buf);
  int v0 = sub_1002A6F64(buf, "wifiTilesEnabled", (BOOL *)&v22 + 7);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    uint64_t v2 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018487B8);
    }
    uint64_t v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      if (HIBYTE(v22)) {
        uint64_t v5 = "true";
      }
      else {
        uint64_t v5 = "false";
      }
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWifiTilesManagerSettings, #Warning defaults write wifiTilesEnabled to %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018487B8);
      }
      if (HIBYTE(v22)) {
        __int16 v15 = "true";
      }
      else {
        __int16 v15 = "false";
      }
      *(_DWORD *)unint64_t v23 = 136380675;
      *(void *)&v23[4] = v15;
      LODWORD(v22) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CLWifiTilesManagerSettings, #Warning defaults write wifiTilesEnabled to %{private}s",  v23,  v22);
      __int128 v17 = (char *)v16;
      sub_10029211C("Generic", 1LL, 0, 2LL, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v16);
    }

    unint64_t v6 = (unsigned __int8 *)&v22 + 7;
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018487B8);
    }
    uint64_t v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004F2598();
      sub_1004F5420(&buf);
      unint64_t v8 = v28 >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)unint64_t v23 = 136446210;
      *(void *)&v23[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLWifiTilesManagerSettings, system version: %{public}s",  v23,  0xCu);
      if (v28 < 0) {
        operator delete((void *)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018487B8);
      }
      uint64_t v18 = qword_101934858;
      sub_1004F2598();
      sub_1004F5420(v23);
      if (v24 >= 0) {
        __int128 v19 = v23;
      }
      else {
        __int128 v19 = *(_BYTE **)v23;
      }
      int v25 = 136446210;
      uint64_t v26 = v19;
      LODWORD(v22) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "CLWifiTilesManagerSettings, system version: %{public}s",  &v25,  v22);
      float v21 = v20;
      if (v24 < 0) {
        operator delete(*(void **)v23);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v21);
    }

    sub_1004F2598();
    if (sub_1004F7000())
    {
      unint64_t v6 = (unsigned __int8 *)sub_100F4CD80() + 16;
    }

    else
    {
      sub_1004F2598();
      if (sub_1001B9A1C())
      {
        unint64_t v6 = (unsigned __int8 *)sub_100F4CD80() + 19;
      }

      else
      {
        sub_1004F2598();
        int v10 = sub_1004F75F8();
        sub_1004F2598();
        if (v10)
        {
          int v11 = sub_1004F6DCC();
          uint8x8_t v12 = (char *)sub_100F4CD80();
          if (v11) {
            unint64_t v6 = (unsigned __int8 *)(v12 + 17);
          }
          else {
            unint64_t v6 = (unsigned __int8 *)(v12 + 18);
          }
        }

        else if (sub_1004F7858())
        {
          unint64_t v6 = (unsigned __int8 *)sub_100F4CD80() + 21;
        }

        else
        {
          sub_1004F2598();
          int v13 = sub_1004F7968();
          unint64_t v14 = (char *)sub_100F4CD80();
          if (v13) {
            unint64_t v6 = (unsigned __int8 *)(v14 + 22);
          }
          else {
            unint64_t v6 = (unsigned __int8 *)(v14 + 24);
          }
        }
      }
    }
  }

  return *v6;
}

void sub_10068D570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10068D58C(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10068D5B8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_10068D654(_Unwind_Exception *a1)
{
}

void sub_10068D66C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10068D6F8(_Unwind_Exception *a1)
{
}

void sub_10068D710(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x200000000LL;
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = 0;
  uint64_t v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1010DD48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0LL;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0LL;
  }

void sub_10068D794( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068D7B0(uint64_t a1)
{
  if (v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10068D800( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068D81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003B35F4(a1, a2);
  sub_100BDDE18(v4 + 136, a2);
  sub_1003D7CC4(a1 + 272);
  if (sub_1003C1048(a1))
  {
    if (sub_1003B59A0( a1,  "FenceHandOffDeviceId",  (const char **)&off_101848AC8,  (const std::string::value_type **)&off_1019398E0,  0)) {
      sub_10068DAB4(a1);
    }
    sub_1003B59A0(a1, "GeoFence", (const char **)&off_1018487D8, (const std::string::value_type **)off_1019398F0, 0);
    sub_10068EBD8(a1);
    sub_10068ED98(a1);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    char v5 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Fence: No access to DB", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: No access to DB",  v9,  2);
      unint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLFenceDatabase::CLFenceDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *, BOOL)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  return a1;
}

void sub_10068DA7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10068DAB4(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v18, (uint64_t)"INSERT INTO ", 12LL);
  uint64_t v3 = sub_10000CF44(v2, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)"(", 1LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"DeviceIdIndex", 13LL);
  sub_10000CF44(v5, (uint64_t)") VALUES (?)", 12LL);
  std::stringbuf::str(&v21, &v19);
  if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v6 = &v21;
  }
  else {
    unint64_t v6 = (std::stringbuf::string_type *)v21.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v6, &v16);
  uint64_t v7 = v16;
  uint64_t v16 = 0LL;
  unint64_t v8 = (sqlite3_stmt *)sub_100019240(v7);
  if (sub_1003C2D24(v8, 1, -1LL))
  {
    unint64_t v9 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(a1, v9);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    int v10 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v21.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Fence: #FenceHandoff Unable to initDeviceIdTable",  (uint8_t *)&v21,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v21, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v16) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v21,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: #FenceHandoff Unable to initDeviceIdTable",  &v16,  2);
      __int16 v15 = (std::stringbuf::string_type *)v14;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLFenceDatabase::initDeviceIdTable()", "%s\n", v14);
      if (v15 != &v21) {
        free(v15);
      }
    }

    int v11 = (sqlite3_stmt *)sub_100019240(v7);
    sqlite3_reset(v11);
  }

  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)((char *)v17
  uint64_t v18 = v12;
  std::streambuf::~streambuf(&v19);
  return std::ios::~ios(&v20);
}

void sub_10068DD9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_10068DDF4(uint64_t a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)p_p, buf);
  uint64_t v3 = *(void *)buf;
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  int v5 = sqlite3_step(v4);
  if (v5 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    unint64_t v6 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)__int128 buf = 68289026LL;
      __int16 v23 = 2082;
      char v24 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Fence: Unable to read/insert Fences for migration}",  buf,  0x12u);
    }
  }

  uint64_t v7 = (sqlite3_stmt *)sub_100019240(v3);
  sqlite3_reset(v7);
  if (v5 == 101)
  {
    sub_1010DDBC0(buf, "MonitorFlags");
    unint64_t v8 = (char **)sub_10008E8D0((uint64_t)v16, (const void **)buf);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 != v8) {
      sub_100698AB0(a1);
    }
    sub_1010DDBC0(buf, "ReferenceFrame");
    unint64_t v9 = (char **)sub_10008E8D0((uint64_t)v16, (const void **)buf);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 != v9) {
      sub_100698E38(a1);
    }
    sub_1010DDBC0(buf, "OnBehalfBundleId");
    int v10 = (char **)sub_10008E8D0((uint64_t)v16, (const void **)buf);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 != v10) {
      sub_100698C70(a1);
    }
    sub_1010DDBC0(buf, "FenceForeignKey");
    int v11 = (char **)sub_10008E8D0((uint64_t)v16, (const void **)buf);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 != v11) {
      sub_100698FF8(a1);
    }
    sub_10069A664(a1);
    sub_10069A80C(a1);
    sub_10069AB44(a1, 0);
    sub_10069AE7C(a1);
    sub_1003B4F44(a1, 1);
    sub_1003C0200(a1, "Fences");
    else {
      uint64_t v12 = *(void *)(a1 + 88);
    }
    sub_1003C1EC0(a1, v12);
    sub_1003C05BC(a1);
  }

  else
  {
    sub_1003C05BC(a1);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1000229D4((uint64_t)v16, v17[0]);
  *(void *)((char *)v18
  v18[2] = v13;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf(v19);
  std::ios::~ios(&v21);
  return v5 == 101;
}

void sub_10068E16C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000229D4((uint64_t)&a16, a17);
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10068E204()
{
  uint64_t v4 = 0x200000000LL;
  __int16 v5 = 0;
  if (SHIBYTE(v3) < 0)
  {
    sub_1010DD48C(&v6, __p[0], (unint64_t)__p[1]);
    uint64_t v8 = 0LL;
    if (SHIBYTE(v3) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v6 = *(_OWORD *)__p;
    uint64_t v7 = v3;
    uint64_t v8 = 0LL;
  }

  sub_1003B35F4(__p, &v4);
  uint64_t v0 = sub_1003B747C(__p, "GeoFences");
  sub_1003B3930(__p);
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  return v0;
}

void sub_10068E2C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10068E304(uint64_t a1)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "performMigrationToSplitDB";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    *(_DWORD *)uint64_t v33 = 136315138;
    *(void *)&v33[4] = "performMigrationToSplitDB";
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, qword_101934878, 0LL, "%s", v33);
    uint64_t v18 = (char *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  if ((sub_10069B1B0(a1) & 1) != 0)
  {
    sub_1003C0454(a1);
    sub_10000CE18((uint64_t)v33);
    sub_10069B704(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(a1, (char *)p_p, buf);
    uint64_t v4 = *(void *)buf;
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int16 v5 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v6 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v6 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "performMigrationToSplitDB";
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s, %s", buf, 0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      uint64_t v21 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v21 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v32[0]) = 136315394;
      *(uint64_t *)((char *)v32 + 4) = (uint64_t)"performMigrationToSplitDB";
      WORD2(v32[1]) = 2080;
      *(uint64_t *)((char *)&v32[1] + 6) = (uint64_t)v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, %s",  (const char *)v32,  22);
      __int16 v23 = (char *)v22;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    uint64_t v7 = (sqlite3_stmt *)sub_100019240(v4);
    int v8 = sqlite3_step(v7);
    BOOL v9 = v8 == 101;
    if (v8 != 101)
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      int v10 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Fence: Unable to read/insert Fences for migration}",  buf,  0x12u);
      }
    }

    int v11 = (sqlite3_stmt *)sub_100019240(v4);
    sqlite3_reset(v11);
    if (v8 == 101)
    {
      sub_10069A664(a1);
      sub_10069A80C(a1);
      sub_10069AB44(a1, 0);
      sub_10069AE7C(a1);
      sub_1003C0200(a1, "GeoFences");
      else {
        uint64_t v12 = *(void *)(a1 + 88);
      }
      sub_1003C1EC0(a1, v12);
      sub_1003C05BC(a1);
      memset(v32, 0, 24);
      sub_100690D5C(a1, v32);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      uint64_t v13 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "performMigrationToSplitDB";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = 0xEF7BDEF7BDEF7BDFLL * ((v32[1] - v32[0]) >> 3);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s, complete, %lu fences migrated",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        int v28 = 136315394;
        __int128 v29 = "performMigrationToSplitDB";
        __int16 v30 = 2048;
        unint64_t v31 = 0xEF7BDEF7BDEF7BDFLL * ((v32[1] - v32[0]) >> 3);
        LODWORD(v26) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, complete, %lu fences migrated",  (const char *)&v28,  v26);
        char v25 = (char *)v24;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      *(void *)__int128 buf = v32;
      sub_1006684D8((void ***)buf);
    }

    else
    {
      sub_1003C05BC(a1);
    }

    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v34 = v15;
    if (v36 < 0) {
      operator delete((void *)v35[8]);
    }
    std::streambuf::~streambuf(v35);
    std::ios::~ios(&v37);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    unint64_t v14 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "performMigrationToSplitDB";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Fence Centroid Migration Failed, aborting migration",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      *(_DWORD *)uint64_t v33 = 136315138;
      *(void *)&v33[4] = "performMigrationToSplitDB";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s Fence Centroid Migration Failed, aborting migration",  v33);
      uint64_t v20 = (char *)v19;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return 0LL;
  }

  return v9;
}

void sub_10068EB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62)
{
  a62 = &a22;
  sub_1006684D8((void ***)&a62);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_10068EBD8(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v15, (uint64_t)"DELETE FROM ", 12LL);
  uint64_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" WHERE length(", 14LL);
  __int16 v5 = sub_10000CF44(v4, (uint64_t)"Name", 4LL);
  sub_10000CF44(v5, (uint64_t)") > 512", 7LL);
  std::stringbuf::str(&v12, &v16);
  if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v6 = &v12;
  }
  else {
    __int128 v6 = (std::stringbuf::string_type *)v12.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v6, &v13);
  uint64_t v7 = v13;
  uint64_t v13 = 0LL;
  int v8 = (sqlite3_stmt *)sub_100019240(v7);
  sub_1003BB2BC(a1, v8);
  else {
    uint64_t v9 = *(void *)(a1 + 88);
  }
  sub_1003C1EC0(a1, v9);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)((char *)v14
  uint64_t v15 = v10;
  std::streambuf::~streambuf(&v16);
  return std::ios::~ios(&v17);
}

void sub_10068ED4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10068ED98(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v25, (uint64_t)"DELETE FROM ", 12LL);
  uint64_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" WHERE ", 7LL);
  __int16 v5 = sub_10000CF44(v4, (uint64_t)"BundleId", 8LL);
  __int128 v6 = sub_10000CF44(v5, (uint64_t)"=?", 2LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)" AND ", 5LL);
  int v8 = sub_10000CF44(v7, (uint64_t)"DeviceIdIndex", 13LL);
  sub_10000CF44(v8, (uint64_t)"=?", 2LL);
  uint64_t v9 = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  @"/System/Library/LocationBundles/LocationFenceSync.bundle",  112LL);
  std::stringbuf::str(&v28, &v26);
  if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &v28;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)v28.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v10, &v23);
  uint64_t v11 = v23;
  uint64_t v23 = 0LL;
  std::stringbuf::string_type v12 = (sqlite3_stmt *)sub_100019240(v11);
  if (sub_1003BC1F0( v12,  1,  (char *)-[NSString UTF8String](-[CLClientKeyPath legacyClientKey](v9, "legacyClientKey", v23), "UTF8String"))
    && (uint64_t v13 = (sqlite3_stmt *)sub_100019240(v11), sub_1003C2D24(v13, 2, -1LL)))
  {
    unint64_t v14 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003BB2BC(a1, v14))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101848B58);
      }
      uint64_t v15 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        v28.__r_.__value_.__r.__words[0] = 68289026LL;
        LOWORD(v28.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#monitor Fence: Removed fences installed under wrong identity}",  (uint8_t *)&v28,  0x12u);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101848B58);
      }
      uint64_t v21 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        v28.__r_.__value_.__r.__words[0] = 68289026LL;
        LOWORD(v28.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor Fence: unable to clear Monitor fences}",  (uint8_t *)&v28,  0x12u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101848B58);
        }
      }

      uint64_t v22 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        v28.__r_.__value_.__r.__words[0] = 68289026LL;
        LOWORD(v28.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor Fence: unable to clear Monitor fences",  "{msg%{public}.0s:#monitor Fence: unable to clear Monitor fences}",  (uint8_t *)&v28,  0x12u);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101848B58);
    }
    std::stringbuf v16 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      v28.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(v28.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor Fence: unable bind statement to clear Monitor fences}",  (uint8_t *)&v28,  0x12u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101848B58);
      }
    }

    uint64_t v17 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      v28.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(v28.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor Fence: unable bind statement to clear Monitor fences",  "{msg%{public}.0s:#monitor Fence: unable bind statement to clear Monitor fences}",  (uint8_t *)&v28,  0x12u);
    }

    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v11);
    sqlite3_reset(v18);
  }

  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  *(void *)((char *)v24
  uint64_t v25 = v19;
  std::streambuf::~streambuf(&v26);
  return std::ios::~ios(&v27);
}

void sub_10068F284(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10068F2DC(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  __int128 v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    sub_100923668(a2, &__p);
    uint64_t v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
       ? &__p
       : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Fence: addFence, %{private}s, key, %{public}d",  (uint8_t *)&buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v69 = qword_101934878;
    sub_100923668(a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 v87 = 136380931;
    *(void *)&v87[4] = p_buf;
    __int16 v88 = 1026;
    LODWORD(v89) = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v69,  2LL,  "Fence: addFence, %{private}s, key, %{public}d",  v87,  18);
    uint64_t v72 = v71;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)",  "%s\n",  (const char *)v72);
    if (v72 != &__p) {
      free(v72);
    }
  }

  if (a3 == -1)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    int v8 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Fence: attempting to add fence to db without a key",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      LODWORD(v86) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: attempting to add fence to db without a key",  &buf,  v86);
      uint64_t v74 = (std::stringbuf::string_type *)v73;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)",  "%s\n",  v73);
      if (v74 != &__p) {
        free(v74);
      }
    }

    return 0LL;
  }

  uint64_t v10 = *(void **)(a2 + 216);
  sub_10000CE18((uint64_t)&buf);
  uint64_t v11 = sub_10000CF44(&buf.__r_.__value_.__l.__cap_, (uint64_t)"INSERT INTO ", 12LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)"GeoFence", 8LL);
  uint64_t v13 = sub_10000CF44(v12, (uint64_t)" (", 2LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)"BundleId", 8LL);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)", ", 2LL);
  std::stringbuf v16 = sub_10000CF44(v15, (uint64_t)"Name", 4LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)", ", 2LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)"Timestamp", 9LL);
  uint64_t v19 = sub_10000CF44(v18, (uint64_t)", ", 2LL);
  uint64_t v20 = sub_10000CF44(v19, (uint64_t)"Distance", 8LL);
  uint64_t v21 = sub_10000CF44(v20, (uint64_t)", ", 2LL);
  uint64_t v22 = sub_10000CF44(v21, (uint64_t)"DesiredAccuracy", 15LL);
  uint64_t v23 = sub_10000CF44(v22, (uint64_t)", ", 2LL);
  char v24 = sub_10000CF44(v23, (uint64_t)"SetupComplete", 13LL);
  uint64_t v25 = sub_10000CF44(v24, (uint64_t)", ", 2LL);
  std::stringbuf v26 = sub_10000CF44(v25, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v27 = sub_10000CF44(v26, (uint64_t)", ", 2LL);
  std::stringbuf::string_type v28 = sub_10000CF44(v27, (uint64_t)"OnBehalfBundleId", 16LL);
  __int128 v29 = sub_10000CF44(v28, (uint64_t)", ", 2LL);
  __int16 v30 = sub_10000CF44(v29, (uint64_t)"ReferenceFrame", 14LL);
  unint64_t v31 = sub_10000CF44(v30, (uint64_t)", ", 2LL);
  int v32 = sub_10000CF44(v31, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v33 = sub_10000CF44(v32, (uint64_t)", ", 2LL);
  uint64_t v34 = sub_10000CF44(v33, (uint64_t)"HandoffTag", 10LL);
  id v35 = sub_10000CF44(v34, (uint64_t)", ", 2LL);
  char v36 = sub_10000CF44(v35, (uint64_t)"HandoffFenceEnablementStatus", 28LL);
  uint64_t v37 = sub_10000CF44(v36, (uint64_t)", ", 2LL);
  uint64_t v38 = sub_10000CF44(v37, (uint64_t)"DeviceIdIndex", 13LL);
  sub_10000CF44(v38, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 48LL);
  std::stringbuf::str(&__p, &v93);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)p_p, v87);
  uint64_t v40 = *(void *)v87;
  *(void *)__int128 v87 = 0LL;
  int64_t v41 = (sqlite3_stmt *)sub_100019240(v40);
  else {
    uint64_t v42 = *(char **)a2;
  }
  if (sub_1003BC1F0(v41, 1, v42))
  {
    uint64_t v43 = (sqlite3_stmt *)sub_100019240(v40);
    uint64_t v44 = *(char *)(a2 + 47) >= 0 ? (char *)(a2 + 24) : *(char **)(a2 + 24);
    if (sub_1003BC1F0(v43, 2, v44))
    {
      uint64_t v45 = (sqlite3_stmt *)sub_100019240(v40);
      double Current = CFAbsoluteTimeGetCurrent();
      if (sub_1003B7480(v45, 3, Current))
      {
        __int128 v47 = (sqlite3_stmt *)sub_100019240(v40);
        if (sub_1003B7480(v47, 4, *(double *)(a2 + 88)))
        {
          unint64_t v48 = (sqlite3_stmt *)sub_100019240(v40);
          if (sub_1003B7480(v48, 5, *(double *)(a2 + 104)))
          {
            uint64_t v49 = (sqlite3_stmt *)sub_100019240(v40);
            if (sub_1003C2D24(v49, 13, -1LL))
            {
              uint64_t v50 = (sqlite3_stmt *)sub_100019240(v40);
              uint64_t v51 = *(char *)(a2 + 215) >= 0 ? (char *)(a2 + 192) : *(char **)(a2 + 192);
              if (sub_1003BC1F0(v50, 11, v51))
              {
                uint64_t v52 = (sqlite3_stmt *)sub_100019240(v40);
                if (sub_1003C28BC(v52, 12, 0))
                {
                  uint64_t v53 = (sqlite3_stmt *)sub_100019240(v40);
                  if (sub_1003B7480(v53, 6, -1.0))
                  {
                    int v54 = (sqlite3_stmt *)sub_100019240(v40);
                    sub_1003C2D24(v54, 7, *(void *)(a2 + 160));
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  uint64_t v55 = (sqlite3_stmt *)sub_100019240(v40);
  else {
    int v56 = *(char **)(a2 + 48);
  }
  sub_1003BC1F0(v55, 8, v56);
  uint64_t v57 = (sqlite3_stmt *)sub_100019240(v40);
  sub_1003C28BC(v57, 9, *(_DWORD *)(a2 + 180));
  uint64_t v58 = (sqlite3_stmt *)sub_100019240(v40);
  if (sub_1003C28BC(v58, 10, a3))
  {
    __int128 v59 = (sqlite3_stmt *)sub_100019240(v40);
    sub_1003BB2BC(a1, v59);
    if (sub_1003D7F38(a1 + 272, *(_DWORD *)(a2 + 184), *(double *)(a2 + 72), *(double *)(a2 + 80)))
    {
      __int128 v60 = (double **)(a2 + 224);
      if (*(void *)(a2 + 232) == *(void *)(a2 + 224) || (sub_100BDE000(a1 + 136, v60, a3) & 1) != 0)
      {
        uint64_t v9 = 1LL;
        if (!v40) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }

    else
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      __int16 v66 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"addFence";
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_FAULT,  "%s, Unable to to add fence to db due to centroid store failure",  (uint8_t *)&__p,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        *(_DWORD *)__int128 v87 = 136315138;
        *(void *)&v87[4] = "addFence";
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "%s, Unable to to add fence to db due to centroid store failure",  v87);
        double v85 = (std::stringbuf::string_type *)v84;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)",  "%s\n",  v84);
        if (v85 != &__p) {
          free(v85);
        }
      }
    }

    sub_10068FE70(a1, a2);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int128 v61 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      else {
        std::string::size_type v62 = *(void *)a2;
      }
      else {
        std::string::size_type v63 = *(void *)(a2 + 24);
      }
      id v64 = objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446723;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v62;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v63;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2082;
      id v96 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Couldn't bind statement for adding fence (bundle ID %{public}s, name %{private}s, deviceId %{public}s)",  (uint8_t *)&__p,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      uint64_t v75 = qword_101934878;
      else {
        int64_t v76 = *(char **)a2;
      }
      int v77 = *(char *)(a2 + 47);
      uint64_t v80 = *(void *)(a2 + 24);
      uint64_t v79 = a2 + 24;
      uint64_t v78 = v80;
      if (v77 < 0) {
        uint64_t v79 = v78;
      }
      id v81 = objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      *(_DWORD *)__int128 v87 = 136446723;
      *(void *)&v87[4] = v76;
      __int16 v88 = 2081;
      uint64_t v89 = v79;
      __int16 v90 = 2082;
      id v91 = v81;
      LODWORD(v86) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v75,  0LL,  "#Warning Fence: Couldn't bind statement for adding fence (bundle ID %{public}s, name %{private}s, deviceId %{public}s)",  v87,  v86);
      uint64_t v83 = (std::stringbuf::string_type *)v82;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)",  "%s\n",  v82);
      if (v83 != &__p) {
        free(v83);
      }
    }

    uint64_t v65 = (sqlite3_stmt *)sub_100019240(v40);
    sqlite3_reset(v65);
  }

  uint64_t v9 = 0LL;
  if (v40) {
LABEL_69:
  }
    (*(void (**)(uint64_t, double **))(*(void *)v40 + 8LL))(v40, v60);
LABEL_70:
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
  buf.__r_.__value_.__l.__cap_ = v67;
  std::streambuf::~streambuf(&v93);
  std::ios::~ios(&v94);
  return v9;
}

void sub_10068FE08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10068FE70(uint64_t a1, uint64_t a2)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    else {
      std::string::size_type v5 = *(void *)a2;
    }
    else {
      std::string::size_type v6 = *(void *)(a2 + 24);
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446467;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Fence: Removing fence %{public}s/%{private}s",  (uint8_t *)buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      uint64_t v41 = *(void *)a2;
    }
    else {
      uint64_t v42 = *(void *)(a2 + 24);
    }
    *(_DWORD *)std::string::size_type v62 = 136446467;
    *(void *)&v62[4] = v41;
    __int16 v63 = 2081;
    *(void *)id v64 = v42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: Removing fence %{public}s/%{private}s",  v62,  22);
    uint64_t v44 = (std::stringbuf::string_type *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
  }

  sub_10000CE18((uint64_t)v62);
  uint64_t v7 = sub_10000CF44(&v64[2], (uint64_t)"DELETE FROM ", 12LL);
  int v8 = sub_10000CF44(v7, (uint64_t)"GeoFence", 8LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)" WHERE ", 7LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)"BundleId", 8LL);
  uint64_t v11 = sub_10000CF44(v10, (uint64_t)"=? AND ", 7LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)"Name", 4LL);
  uint64_t v13 = sub_10000CF44(v12, (uint64_t)"=? AND ", 7LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v14, (uint64_t)"=?", 2LL);
  std::stringbuf::str(buf, &v65);
  if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v15 = buf;
  }
  else {
    uint64_t v15 = (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v15, &v59);
  uint64_t v16 = v59.__r_.__value_.__r.__words[0];
  v59.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v16);
  else {
    uint64_t v18 = *(char **)a2;
  }
  if (!sub_1003BC1F0(v17, 1, v18)
    || ((uint64_t v19 = (sqlite3_stmt *)sub_100019240(v16), *(char *)(a2 + 47) >= 0)
      ? (uint64_t v20 = (char *)(a2 + 24))
      : (uint64_t v20 = *(char **)(a2 + 24)),
        !sub_1003BC1F0(v19, 2, v20)
     || ((uint64_t v21 = (sqlite3_stmt *)sub_100019240(v16), *(char *)(a2 + 71) >= 0)
       ? (uint64_t v22 = (char *)(a2 + 48))
       : (uint64_t v22 = *(char **)(a2 + 48)),
         !sub_1003BC1F0(v21, 3, v22))))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int128 v29 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      else {
        std::string::size_type v30 = *(void *)a2;
      }
      else {
        std::string::size_type v31 = *(void *)(a2 + 24);
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v30;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Couldn't bind statement for deleting fence (bundle ID %{public}s, name %{private}s)",  (uint8_t *)buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      else {
        std::string::size_type v45 = *(void *)a2;
      }
      int v46 = *(char *)(a2 + 47);
      std::string::size_type v49 = *(void *)(a2 + 24);
      std::string::size_type v48 = a2 + 24;
      std::string::size_type v47 = v49;
      if (v46 >= 0) {
        std::string::size_type v50 = v48;
      }
      else {
        std::string::size_type v50 = v47;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = v45;
      WORD2(v59.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = v50;
      LODWORD(v5_Block_object_dispose(&STACK[0x7E0], 8) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Couldn't bind statement for deleting fence (bundle ID %{public}s, name %{private}s)",  &v59,  v58);
      uint64_t v52 = (std::stringbuf::string_type *)v51;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)",  "%s\n",  v51);
      if (v52 != buf) {
        free(v52);
      }
    }

    int v32 = (sqlite3_stmt *)sub_100019240(v16);
    sqlite3_reset(v32);
LABEL_58:
    uint64_t v28 = 0LL;
    if (!v16) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }

  uint64_t v23 = (sqlite3_stmt *)sub_100019240(v16);
  sub_1003BB2BC(a1, v23);
  if (!sub_1003D8634(a1 + 272, *(_DWORD *)(a2 + 184)))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    id v35 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      sub_100923668(a2, buf);
      char v36 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
          ? buf
          : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v59.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Fence: Centroid not removed for fence %{private}s",  (uint8_t *)&v59,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      uint64_t v37 = qword_101934878;
      sub_100923668(a2, &v59);
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v38 = &v59;
      }
      else {
        uint64_t v38 = (std::stringbuf::string_type *)v59.__r_.__value_.__r.__words[0];
      }
      int v60 = 136380675;
      __int128 v61 = v38;
      LODWORD(v5_Block_object_dispose(&STACK[0x7E0], 8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v37,  16LL,  "Fence: Centroid not removed for fence %{private}s",  &v60,  v58);
      uint64_t v40 = v39;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)",  "%s\n",  (const char *)v40);
      if (v40 != buf) {
        free(v40);
      }
    }

    goto LABEL_58;
  }

  if (!sub_100BDE6CC(a1 + 136, *(_DWORD *)(a2 + 184)))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    char v24 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a2 + 184);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Fence: No vertices removed for key %{public}d",  (uint8_t *)buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      int v55 = *(_DWORD *)(a2 + 184);
      LODWORD(v59.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v59.__r_.__value_.__r.__words[0]) = v55;
      LODWORD(v5_Block_object_dispose(&STACK[0x7E0], 8) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: No vertices removed for key %{public}d",  &v59,  v58);
      uint64_t v57 = (std::stringbuf::string_type *)v56;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)",  "%s\n",  v56);
      if (v57 != buf) {
        free(v57);
      }
    }
  }

  else {
    uint64_t v26 = *(void *)(a1 + 88);
  }
  sub_1003C1EC0(a1, v26);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v27 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"removeFence";
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s, successfully removed fence",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)"removeFence";
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, successfully removed fence",  (const char *)&v59);
    int v54 = (std::stringbuf::string_type *)v53;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)",  "%s\n",  v53);
    if (v54 != buf) {
      free(v54);
    }
  }

  uint64_t v28 = 1LL;
  if (v16) {
LABEL_59:
  }
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
LABEL_60:
  *(void *)&v64[2] = v33;
  std::streambuf::~streambuf(&v65);
  std::ios::~ios(&v66);
  return v28;
}

void sub_1006908A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100690910(uint64_t a1, char *a2, int **a3)
{
  std::string::size_type v6 = sub_10000CF44(&v33, (uint64_t)"DELETE FROM ", 12LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"GeoFence", 8LL);
  int v8 = sub_10000CF44(v7, (uint64_t)" WHERE ", 7LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"BundleId", 8LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)"=? OR ", 6LL);
  uint64_t v11 = sub_10000CF44(v10, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v11, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v37, &v34);
  if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::stringbuf::string_type v12 = &v37;
  }
  else {
    std::stringbuf::string_type v12 = (std::stringbuf::string_type *)v37.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v12, v36);
  uint64_t v13 = *(void *)v36;
  *(void *)char v36 = 0LL;
  unint64_t v14 = (sqlite3_stmt *)sub_100019240(v13);
  if (a2[23] >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = *(char **)a2;
  }
  if (sub_1003BC1F0(v14, 1, v15))
  {
    uint64_t v16 = (sqlite3_stmt *)sub_100019240(v13);
    uint64_t v17 = a2[23] >= 0 ? a2 : *(char **)a2;
    if (sub_1003BC1F0(v16, 2, v17))
    {
      uint64_t v18 = (sqlite3_stmt *)sub_100019240(v13);
      sub_1003BB2BC(a1, v18);
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
      if (*a3 != v20)
      {
        do
        {
          int v21 = *v19;
          sub_100BDE6CC(a1 + 136, *v19);
          sub_1003D8634(a1 + 272, v21);
          ++v19;
        }

        while (v19 != v20);
      }

      else {
        uint64_t v22 = *(void *)(a1 + 88);
      }
      sub_1003C1EC0(a1, v22);
      uint64_t v23 = 1LL;
      if (!v13) {
        goto LABEL_31;
      }
LABEL_30:
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      goto LABEL_31;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  char v24 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      std::string::size_type v25 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v25 = *(void *)a2;
    }
    LODWORD(v37.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 4) = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Couldn't bind statement for deleting fences for bundle ID %{public}s",  (uint8_t *)&v37,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v37, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    if (a2[23] >= 0) {
      __int128 v29 = a2;
    }
    else {
      __int128 v29 = *(char **)a2;
    }
    *(_DWORD *)char v36 = 136446210;
    *(void *)&v36[4] = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v37,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Couldn't bind statement for deleting fences for bundle ID %{public}s",  v36,  12);
    std::string::size_type v31 = (std::stringbuf::string_type *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &, const std::vector<int> &)",  "%s\n",  v30);
    if (v31 != &v37) {
      free(v31);
    }
  }

  uint64_t v26 = (sqlite3_stmt *)sub_100019240(v13);
  sqlite3_reset(v26);
  uint64_t v23 = 0LL;
  if (v13) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)((char *)v32
  uint64_t v33 = v27;
  std::streambuf::~streambuf(&v34);
  std::ios::~ios(&v35);
  return v23;
}

void sub_100690D00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100690D5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000CF44(&v112, (uint64_t)"SELECT ", 7LL);
  std::string::size_type v5 = sub_10000CF44(v4, (uint64_t)"BundleId", 8LL);
  std::string::size_type v6 = sub_10000CF44(v5, (uint64_t)", ", 2LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"Name", 4LL);
  int v8 = sub_10000CF44(v7, (uint64_t)", ", 2LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"Distance", 8LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)", ", 2LL);
  uint64_t v11 = sub_10000CF44(v10, (uint64_t)"DesiredAccuracy", 15LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)", ", 2LL);
  uint64_t v13 = sub_10000CF44(v12, (uint64_t)"SetupComplete", 13LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)", ", 2LL);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)"Timestamp", 9LL);
  uint64_t v16 = sub_10000CF44(v15, (uint64_t)", ", 2LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)", ", 2LL);
  uint64_t v19 = sub_10000CF44(v18, (uint64_t)"OnBehalfBundleId", 16LL);
  uint64_t v20 = sub_10000CF44(v19, (uint64_t)", ", 2LL);
  int v21 = sub_10000CF44(v20, (uint64_t)"ReferenceFrame", 14LL);
  uint64_t v22 = sub_10000CF44(v21, (uint64_t)", ", 2LL);
  uint64_t v23 = sub_10000CF44(v22, (uint64_t)"FenceForeignKey", 15LL);
  char v24 = sub_10000CF44(v23, (uint64_t)", ", 2LL);
  std::string::size_type v25 = sub_10000CF44(v24, (uint64_t)"HandoffTag", 10LL);
  uint64_t v26 = sub_10000CF44(v25, (uint64_t)", ", 2LL);
  uint64_t v27 = sub_10000CF44(v26, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v28 = sub_10000CF44(v27, (uint64_t)".", 1LL);
  __int128 v29 = sub_10000CF44(v28, (uint64_t)"DeviceId", 8LL);
  std::string::size_type v30 = sub_10000CF44(v29, (uint64_t)" FROM ", 6LL);
  std::string::size_type v31 = sub_10000CF44(v30, (uint64_t)"GeoFence", 8LL);
  int v32 = sub_10000CF44(v31, (uint64_t)" INNER JOIN ", 12LL);
  uint64_t v33 = sub_10000CF44(v32, (uint64_t)"FenceHandOffDeviceId", 20LL);
  std::stringbuf v34 = sub_10000CF44(v33, (uint64_t)" ON ", 4LL);
  uint64_t v35 = sub_10000CF44(v34, (uint64_t)"GeoFence", 8LL);
  char v36 = sub_10000CF44(v35, (uint64_t)".", 1LL);
  std::stringbuf::string_type v37 = sub_10000CF44(v36, (uint64_t)"DeviceIdIndex", 13LL);
  uint64_t v38 = sub_10000CF44(v37, (uint64_t)"=", 1LL);
  uint64_t v39 = sub_10000CF44(v38, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v40 = sub_10000CF44(v39, (uint64_t)".", 1LL);
  sub_10000CF44(v40, (uint64_t)"DeviceIdIndex", 13LL);
  std::stringbuf::str(&v135, &v113);
  if ((v135.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v41 = &v135;
  }
  else {
    uint64_t v41 = (std::stringbuf::string_type *)v135.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v41, __dst);
  uint64_t v42 = *(void *)__dst;
  *(void *)__dst = 0LL;
  uint64_t v44 = *a2;
  uint64_t v43 = a2[1];
  if (v43 != *a2)
  {
    do
    {
      v43 -= 248LL;
      sub_10066855C((uint64_t)(a2 + 2), v43);
    }

    while (v43 != v44);
  }

  a2[1] = v44;
  std::string::size_type v45 = (sqlite3_stmt *)sub_100019240(v42);
  int v46 = sqlite3_step(v45);
  if ((v46 - 102) < 0xFFFFFFFE)
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934870 != -1) {
      goto LABEL_98;
    }
    goto LABEL_10;
  }

  if (v46 == 100)
  {
    p_vtable = (void **)(a1 + 272);
    uint64_t v101 = a1 + 136;
    while (1)
    {
      std::string::size_type v50 = (sqlite3_stmt *)sub_100019240(v42);
      uint64_t v51 = sqlite3_column_text(v50, 11);
      if (v51) {
        uint64_t v52 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v51);
      }
      uint64_t v53 = (sqlite3_stmt *)sub_100019240(v42);
      int v54 = sqlite3_column_int(v53, 9);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      int v55 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v135.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v135.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getAllFences";
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "%s, Fetching fence centroid",  (uint8_t *)&v135,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&v135, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        *(_DWORD *)__dst = 136315138;
        *(void *)&__dst[4] = "getAllFences";
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "%s, Fetching fence centroid",  __dst);
        uint64_t v79 = (std::stringbuf::string_type *)v78;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v78);
        if (v79 != &v135) {
          free(v79);
        }
      }

      sub_1003D8DD4((uint64_t)p_vtable, v54, (uint64_t)v110);
      if (sub_1008695D8((uint64_t)v110, (uint64_t)&xmmword_101339630))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        uint64_t v56 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v135.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v135.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getAllFences";
          WORD2(v135.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v135.__r_.__value_.__r.__words[1] + 6) = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "%s, Couldn't get centroid from database, key, %d",  (uint8_t *)&v135,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v135, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          *(_DWORD *)__dst = 136315394;
          *(void *)&__dst[4] = "getAllFences";
          __int16 v119 = 1024;
          LODWORD(v120) = v54;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "%s, Couldn't get centroid from database, key, %d",  __dst,  18);
          id v81 = (std::stringbuf::string_type *)v80;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v80);
          if (v81 != &v135) {
            free(v81);
          }
        }

        uint64_t v57 = (sqlite3_stmt *)sub_100019240(v42);
        int v58 = sqlite3_step(v57);
      }

      else
      {
        std::stringbuf::string_type v59 = (sqlite3_stmt *)sub_100019240(v42);
        int v60 = (char *)sqlite3_column_text(v59, 0);
        sub_1010DDBC0(&v108, v60);
        __int128 v61 = (sqlite3_stmt *)sub_100019240(v42);
        std::string::size_type v62 = (char *)sqlite3_column_text(v61, 1);
        sub_1010DDBC0(&v106, v62);
        __int16 v63 = (sqlite3_stmt *)sub_100019240(v42);
        id v64 = (char *)sqlite3_column_text(v63, 7);
        sub_1010DDBC0(&v104, v64);
        std::stringbuf v65 = (sqlite3_stmt *)sub_100019240(v42);
        sqlite3_column_double(v65, 2);
        uint64_t v66 = (sqlite3_stmt *)sub_100019240(v42);
        sqlite3_column_double(v66, 3);
        std::string::size_type v67 = (sqlite3_stmt *)sub_100019240(v42);
        double v68 = (char *)sqlite3_column_text(v67, 10);
        sub_1010DDBC0(&__p, v68);
        sub_100922EB8(__dst);
        if (v103 < 0) {
          operator delete(__p);
        }
        if (v105 < 0) {
          operator delete(v104);
        }
        if (v107 < 0) {
          operator delete(v106);
        }
        if (v109 < 0) {
          operator delete(v108);
        }
        uint64_t v69 = (sqlite3_stmt *)sub_100019240(v42);
        double v126 = sqlite3_column_double(v69, 4);
        uint64_t v70 = (sqlite3_stmt *)sub_100019240(v42);
        double v127 = sqlite3_column_double(v70, 5);
        uint64_t v71 = (sqlite3_stmt *)sub_100019240(v42);
        sqlite3_int64 v128 = sqlite3_column_int64(v71, 6);
        uint64_t v72 = (sqlite3_stmt *)sub_100019240(v42);
        int v129 = sqlite3_column_int(v72, 8);
        uint64_t v73 = (sqlite3_stmt *)sub_100019240(v42);
        int v58 = sqlite3_step(v73);
        sub_100BDEB90(v101, v130, (double **)v134);
        unint64_t v74 = a2[1];
        if (v74 >= a2[2])
        {
          uint64_t v75 = sub_100669E18(a2, (__int128 *)__dst);
        }

        else
        {
          sub_1002718F0((char *)a2[1], (__int128 *)__dst);
          uint64_t v75 = v74 + 248;
          a2[1] = v74 + 248;
        }

        a2[1] = v75;
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        int64_t v76 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          sub_100923668((uint64_t)__dst, &v135);
          int v77 = &v135;
          if ((v135.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v77 = (std::stringbuf::string_type *)v135.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "Fence: fetched fence, %{private}s",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v135, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          uint64_t v82 = qword_101934878;
          sub_100923668((uint64_t)__dst, &buf);
          p_std::stringbuf::string_type buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          int v116 = 136380675;
          uint64_t v117 = p_buf;
          LODWORD(v100) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  v82,  2LL,  "Fence: fetched fence, %{private}s",  &v116,  v100);
          double v85 = v84;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  (const char *)v85);
          if (v85 != &v135) {
            free(v85);
          }
        }

        if (v130 == -1)
        {
          sub_1012426F4();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceDatabase.mm",  671,  "getAllFences");
          __break(1u);
LABEL_98:
          dispatch_once(&qword_101934870, &stru_101848AA8);
LABEL_10:
          std::string::size_type v48 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
          {
            LOWORD(v135.__r_.__value_.__l.__data_) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't get fences from database",  (uint8_t *)&v135,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&v135, 0x65CuLL);
            *(_WORD *)__dst = 0;
            LODWORD(v100) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't get fences from database",  __dst,  v100);
            uint64_t v94 = (std::stringbuf::string_type *)v93;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v93);
            if (v94 != &v135) {
              free(v94);
            }
          }

          std::string::size_type v49 = (sqlite3_stmt *)sub_100019240(v42);
          sqlite3_reset(v49);
          sub_100691E50((void **)a2);
LABEL_92:
          uint64_t v89 = 0LL;
          if (v42) {
            goto LABEL_93;
          }
          goto LABEL_94;
        }

        if (v134[0])
        {
          v134[1] = v134[0];
          operator delete(v134[0]);
        }

        if (v132 < 0) {
          operator delete(v131);
        }
        if (v125 < 0) {
          operator delete(v124);
        }
        if (v123 < 0) {
          operator delete(v122);
        }
        if (v121 < 0) {
          operator delete(*(void **)__dst);
        }
      }

      if (v58 != 100) {
        goto LABEL_79;
      }
    }
  }

  int v58 = 101;
LABEL_79:
  uint64_t v86 = (sqlite3_stmt *)sub_100019240(v42);
  sqlite3_reset(v86);
  sub_100691E50((void **)a2);
  if (v58 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int16 v90 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v135.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving fences from database",  (uint8_t *)&v135,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v135, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      *(_WORD *)__dst = 0;
      LODWORD(v100) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving fences from database",  __dst,  v100);
      char v99 = (std::stringbuf::string_type *)v98;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v98);
      if (v99 != &v135) {
        free(v99);
      }
    }

    goto LABEL_92;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  __int128 v87 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v88 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    LODWORD(v135.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v135.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getAllFences";
    WORD2(v135.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v135.__r_.__value_.__r.__words[1] + 6) = v88;
    _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "%s, successfully fetched %lu fences",  (uint8_t *)&v135,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v135, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    unint64_t v95 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)__dst = 136315394;
    *(void *)&__dst[4] = "getAllFences";
    __int16 v119 = 2048;
    unint64_t v120 = v95;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v135,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "%s, successfully fetched %lu fences",  __dst,  v100);
    char v97 = (std::stringbuf::string_type *)v96;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getAllFences(std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v96);
    if (v97 != &v135) {
      free(v97);
    }
  }

  uint64_t v89 = 1LL;
  if (v42) {
LABEL_93:
  }
    (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
LABEL_94:
  *(void *)((char *)v111
  uint64_t v112 = v91;
  std::streambuf::~streambuf(&v113);
  std::ios::~ios(&v114);
  return v89;
}

void sub_100691D3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  sub_1011F8850((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void **sub_100691E50(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xEF7BDEF7BDEF7BDFLL * v3.i64[1] > v4)
  {
    std::string::size_type v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      int v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    else
    {
      int v8 = (char *)sub_1006693C0(v7, v4);
    }

    uint64_t v10 = v8;
    uint64_t v11 = &v8[248 * v5];
    std::stringbuf::string_type v12 = v11;
    uint64_t v13 = &v8[248 * v9];
    sub_100669F34(v6, &v10);
    return sub_10066A0E4(&v10);
  }

  return result;
}

void sub_100691F0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL sub_100691F34(uint64_t a1, char *a2, std::string::size_type a3, std::string::size_type a4, uint64_t a5)
{
  v219.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v219, "SELECT ");
  uint64_t v10 = std::string::append(&v219, "BundleId");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  char v218 = 2;
  strcpy(__s, ", ");
  std::stringbuf::string_type v12 = std::string::append(&v220, __s, 2uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v221, "Name");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  char v216 = 2;
  strcpy(v215, ", ");
  uint64_t v16 = std::string::append(&v222, v215, 2uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v223, "Distance");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  char v214 = 2;
  strcpy(v213, ", ");
  uint64_t v20 = std::string::append(&v224, v213, 2uLL);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v22 = std::string::append(&v225, "DesiredAccuracy");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  char v212 = 2;
  strcpy(v211, ", ");
  char v24 = std::string::append(&v226, v211, 2uLL);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v26 = std::string::append(&v227, "SetupComplete");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  char v210 = 2;
  strcpy(v209, ", ");
  uint64_t v28 = std::string::append(&v228, v209, 2uLL);
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v30 = std::string::append(&v229, "Timestamp");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  char v208 = 2;
  strcpy(v207, ", ");
  int v32 = std::string::append(&v230, v207, 2uLL);
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  std::stringbuf v34 = std::string::append(&v231, "MonitorFlags");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  char v206 = 2;
  strcpy(v205, ", ");
  char v36 = std::string::append(&v232, v205, 2uLL);
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v38 = std::string::append(&v233, "OnBehalfBundleId");
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  char v204 = 2;
  strcpy(v203, ", ");
  uint64_t v40 = std::string::append(&v234, v203, 2uLL);
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v42 = std::string::append(&v235, "ReferenceFrame");
  __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0LL;
  v42->__r_.__value_.__l.__cap_ = 0LL;
  v42->__r_.__value_.__r.__words[0] = 0LL;
  char v202 = 2;
  strcpy(v201, ", ");
  uint64_t v44 = std::string::append(&v236, v201, 2uLL);
  __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0LL;
  v44->__r_.__value_.__l.__cap_ = 0LL;
  v44->__r_.__value_.__r.__words[0] = 0LL;
  int v46 = std::string::append(&v237, "FenceForeignKey");
  __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0LL;
  v46->__r_.__value_.__l.__cap_ = 0LL;
  v46->__r_.__value_.__r.__words[0] = 0LL;
  char v200 = 2;
  strcpy(v199, ", ");
  std::string::size_type v48 = std::string::append(&v238, v199, 2uLL);
  __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0LL;
  v48->__r_.__value_.__l.__cap_ = 0LL;
  v48->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v50 = std::string::append(&v239, "HandoffTag");
  __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0LL;
  v50->__r_.__value_.__l.__cap_ = 0LL;
  v50->__r_.__value_.__r.__words[0] = 0LL;
  char v198 = 2;
  strcpy(v197, ", ");
  uint64_t v52 = std::string::append(&v240, v197, 2uLL);
  __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0LL;
  v52->__r_.__value_.__l.__cap_ = 0LL;
  v52->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v54 = std::string::append(&v241, "FenceHandOffDeviceId");
  __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v242.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  char v196 = 1;
  strcpy(v195, ".");
  uint64_t v56 = std::string::append(&v242, v195, 1uLL);
  __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v243.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0LL;
  v56->__r_.__value_.__l.__cap_ = 0LL;
  v56->__r_.__value_.__r.__words[0] = 0LL;
  int v58 = std::string::append(&v243, "DeviceId");
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  char v194 = 6;
  strcpy(v193, " FROM ");
  int v60 = std::string::append(&v244, v193, 6uLL);
  __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__l.__cap_ = v60->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0LL;
  v60->__r_.__value_.__l.__cap_ = 0LL;
  v60->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v62 = std::string::append(&v245, "GeoFence");
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v246.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  char v192 = 12;
  strcpy((char *)v191, " INNER JOIN ");
  id v64 = std::string::append(&v246, (const std::string::value_type *)v191, 0xCuLL);
  __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v247.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0LL;
  v64->__r_.__value_.__l.__cap_ = 0LL;
  v64->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v66 = std::string::append(&v247, "FenceHandOffDeviceId");
  __int128 v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__l.__cap_ = v66->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0LL;
  v66->__r_.__value_.__l.__cap_ = 0LL;
  v66->__r_.__value_.__r.__words[0] = 0LL;
  char v190 = 4;
  strcpy(v189, " ON ");
  double v68 = std::string::append(&v248, v189, 4uLL);
  __int128 v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__l.__cap_ = v68->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0LL;
  v68->__r_.__value_.__l.__cap_ = 0LL;
  v68->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v70 = std::string::append(&v249, "GeoFence");
  __int128 v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__l.__cap_ = v70->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0LL;
  v70->__r_.__value_.__l.__cap_ = 0LL;
  v70->__r_.__value_.__r.__words[0] = 0LL;
  char v188 = 1;
  strcpy(v187, ".");
  uint64_t v72 = std::string::append(&v250, v187, 1uLL);
  __int128 v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__l.__cap_ = v72->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0LL;
  v72->__r_.__value_.__l.__cap_ = 0LL;
  v72->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v74 = std::string::append(&v251, "DeviceIdIndex");
  __int128 v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__l.__cap_ = v74->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0LL;
  v74->__r_.__value_.__l.__cap_ = 0LL;
  v74->__r_.__value_.__r.__words[0] = 0LL;
  char v186 = 1;
  strcpy(v185, "=");
  int64_t v76 = std::string::append(&v252, v185, 1uLL);
  __int128 v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__l.__cap_ = v76->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0LL;
  v76->__r_.__value_.__l.__cap_ = 0LL;
  v76->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v78 = std::string::append(&v253, "FenceHandOffDeviceId");
  __int128 v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v254.__r_.__value_.__l.__cap_ = v78->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0LL;
  v78->__r_.__value_.__l.__cap_ = 0LL;
  v78->__r_.__value_.__r.__words[0] = 0LL;
  char v184 = 1;
  strcpy(v183, ".");
  uint64_t v80 = std::string::append(&v254, v183, 1uLL);
  __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v255.__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0LL;
  v80->__r_.__value_.__l.__cap_ = 0LL;
  v80->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v82 = std::string::append(&v255, "DeviceIdIndex");
  __int128 v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__l.__cap_ = v82->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0LL;
  v82->__r_.__value_.__l.__cap_ = 0LL;
  v82->__r_.__value_.__r.__words[0] = 0LL;
  char v182 = 7;
  strcpy(v181, " WHERE ");
  uint64_t v84 = std::string::append(&v256, v181, 7uLL);
  __int128 v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__l.__cap_ = v84->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0LL;
  v84->__r_.__value_.__l.__cap_ = 0LL;
  v84->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v86 = std::string::append(&v257, "BundleId");
  __int128 v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v276.__r_.__value_.__l.__cap_ = v86->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v276.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0LL;
  v86->__r_.__value_.__l.__cap_ = 0LL;
  v86->__r_.__value_.__r.__words[0] = 0LL;
  char v180 = 7;
  strcpy(v179, "=? AND ");
  unint64_t v88 = std::string::append(&v276, v179, 7uLL);
  __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0LL;
  v88->__r_.__value_.__l.__cap_ = 0LL;
  v88->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v90 = std::string::append(&v277, "Name");
  __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0LL;
  v90->__r_.__value_.__l.__cap_ = 0LL;
  v90->__r_.__value_.__r.__words[0] = 0LL;
  char v178 = 7;
  strcpy(v177, "=? AND ");
  uint64_t v92 = std::string::append(&v174, v177, 7uLL);
  __int128 v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__l.__cap_ = v92->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0LL;
  v92->__r_.__value_.__l.__cap_ = 0LL;
  v92->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v94 = std::string::append(&__str, "OnBehalfBundleId");
  __int128 v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v274.__r_.__value_.__l.__cap_ = v94->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0LL;
  v94->__r_.__value_.__l.__cap_ = 0LL;
  v94->__r_.__value_.__r.__words[0] = 0LL;
  char v176 = 2;
  strcpy(v175, "=?");
  id v96 = std::string::append(&v274, v175, 2uLL);
  __int128 v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  int64_t cap = v96->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v97;
  v96->__r_.__value_.__l.__size_ = 0LL;
  v96->__r_.__value_.__l.__cap_ = 0LL;
  v96->__r_.__value_.__r.__words[0] = 0LL;
  if (v176 < 0) {
    operator delete(*(void **)v175);
  }
  if (v178 < 0) {
    operator delete(*(void **)v177);
  }
  if (v180 < 0) {
    operator delete(*(void **)v179);
  }
  if (v182 < 0) {
    operator delete(*(void **)v181);
  }
  if (v184 < 0) {
    operator delete(*(void **)v183);
  }
  if (v186 < 0) {
    operator delete(*(void **)v185);
  }
  if (v188 < 0) {
    operator delete(*(void **)v187);
  }
  if (v190 < 0) {
    operator delete(*(void **)v189);
  }
  if (v192 < 0) {
    operator delete(v191[0]);
  }
  if (v194 < 0) {
    operator delete(*(void **)v193);
  }
  if (v196 < 0) {
    operator delete(*(void **)v195);
  }
  if (v198 < 0) {
    operator delete(*(void **)v197);
  }
  if (v200 < 0) {
    operator delete(*(void **)v199);
  }
  if (v202 < 0) {
    operator delete(*(void **)v201);
  }
  if (v204 < 0) {
    operator delete(*(void **)v203);
  }
  if (v206 < 0) {
    operator delete(*(void **)v205);
  }
  if (v208 < 0) {
    operator delete(*(void **)v207);
  }
  if (v210 < 0) {
    operator delete(*(void **)v209);
  }
  if (v212 < 0) {
    operator delete(*(void **)v211);
  }
  if (v214 < 0) {
    operator delete(*(void **)v213);
  }
  if (v216 < 0) {
    operator delete(*(void **)v215);
  }
  if (v218 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    BOOL v98 = (char *)__p;
  }
  else {
    BOOL v98 = (char *)__p[0];
  }
  sub_1003C0D54(a1, v98, &v274);
  uint64_t v99 = v274.__r_.__value_.__r.__words[0];
  uint64_t v100 = (sqlite3_stmt *)sub_100019240((uint64_t)v274.__r_.__value_.__l.__data_);
  if (a2[23] >= 0) {
    uint64_t v101 = a2;
  }
  else {
    uint64_t v101 = *(char **)a2;
  }
  if (!sub_1003BC1F0(v100, 1, v101)
    || ((__int128 v102 = (sqlite3_stmt *)sub_100019240(v99), *(char *)(a4 + 23) >= 0)
      ? (char v103 = (char *)a4)
      : (char v103 = *(char **)a4),
        !sub_1003BC1F0(v102, 2, v103)
     || ((unint64_t v104 = (sqlite3_stmt *)sub_100019240(v99), *(char *)(a3 + 23) >= 0)
       ? (char v105 = (char *)a3)
       : (char v105 = *(char **)a3),
         !sub_1003BC1F0(v104, 3, v105))))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v117 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      else {
        std::string::size_type v118 = *(void *)a3;
      }
      if (a2[23] >= 0) {
        std::string::size_type v119 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v119 = *(void *)a2;
      }
      else {
        std::string::size_type v120 = *(void *)a4;
      }
      LODWORD(v274.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 4) = v118;
      WORD2(v274.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v274.__r_.__value_.__r.__words[1] + 6) = v119;
      HIWORD(v274.__r_.__value_.__r.__words[2]) = 2082;
      std::string::size_type v275 = v120;
      _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s",  (uint8_t *)&v274,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v274, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      else {
        std::string::size_type v158 = *(void *)a3;
      }
      if (a2[23] >= 0) {
        std::string::size_type v159 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v159 = *(void *)a2;
      }
      else {
        std::string::size_type v160 = *(void *)a4;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v158;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v159;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 2082;
      v261.__r_.__value_.__r.__words[0] = v160;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v274,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s",  &__str,  32);
      int v116 = (std::string *)v161;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)",  "%s\n",  v161);
      goto LABEL_278;
    }

void sub_100693998(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100694004(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      v6 -= 248LL;
      sub_10066855C((uint64_t)(a3 + 2), v6);
    }

    while (v6 != v7);
  }

  a3[1] = v7;
  sub_10000CE18((uint64_t)v121);
  int v8 = sub_10000CF44(&v122, (uint64_t)"SELECT ", 7LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"BundleId", 8LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)", ", 2LL);
  __int128 v11 = sub_10000CF44(v10, (uint64_t)"Name", 4LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)", ", 2LL);
  __int128 v13 = sub_10000CF44(v12, (uint64_t)"Distance", 8LL);
  uint64_t v14 = sub_10000CF44(v13, (uint64_t)", ", 2LL);
  __int128 v15 = sub_10000CF44(v14, (uint64_t)"DesiredAccuracy", 15LL);
  uint64_t v16 = sub_10000CF44(v15, (uint64_t)", ", 2LL);
  __int128 v17 = sub_10000CF44(v16, (uint64_t)"SetupComplete", 13LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)", ", 2LL);
  __int128 v19 = sub_10000CF44(v18, (uint64_t)"Timestamp", 9LL);
  uint64_t v20 = sub_10000CF44(v19, (uint64_t)", ", 2LL);
  __int128 v21 = sub_10000CF44(v20, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v22 = sub_10000CF44(v21, (uint64_t)", ", 2LL);
  __int128 v23 = sub_10000CF44(v22, (uint64_t)"OnBehalfBundleId", 16LL);
  char v24 = sub_10000CF44(v23, (uint64_t)", ", 2LL);
  __int128 v25 = sub_10000CF44(v24, (uint64_t)"ReferenceFrame", 14LL);
  uint64_t v26 = sub_10000CF44(v25, (uint64_t)", ", 2LL);
  __int128 v27 = sub_10000CF44(v26, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v28 = sub_10000CF44(v27, (uint64_t)", ", 2LL);
  __int128 v29 = sub_10000CF44(v28, (uint64_t)"HandoffTag", 10LL);
  std::string::size_type v30 = sub_10000CF44(v29, (uint64_t)", ", 2LL);
  __int128 v31 = sub_10000CF44(v30, (uint64_t)"FenceHandOffDeviceId", 20LL);
  int v32 = sub_10000CF44(v31, (uint64_t)".", 1LL);
  __int128 v33 = sub_10000CF44(v32, (uint64_t)"DeviceId", 8LL);
  std::stringbuf v34 = sub_10000CF44(v33, (uint64_t)" FROM ", 6LL);
  __int128 v35 = sub_10000CF44(v34, (uint64_t)"GeoFence", 8LL);
  char v36 = sub_10000CF44(v35, (uint64_t)" INNER JOIN ", 12LL);
  __int128 v37 = sub_10000CF44(v36, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v38 = sub_10000CF44(v37, (uint64_t)" ON ", 4LL);
  __int128 v39 = sub_10000CF44(v38, (uint64_t)"GeoFence", 8LL);
  uint64_t v40 = sub_10000CF44(v39, (uint64_t)".", 1LL);
  __int128 v41 = sub_10000CF44(v40, (uint64_t)"DeviceIdIndex", 13LL);
  uint64_t v42 = sub_10000CF44(v41, (uint64_t)" = ", 3LL);
  __int128 v43 = sub_10000CF44(v42, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v44 = sub_10000CF44(v43, (uint64_t)".", 1LL);
  __int128 v45 = sub_10000CF44(v44, (uint64_t)"DeviceIdIndex", 13LL);
  int v46 = sub_10000CF44(v45, (uint64_t)" WHERE ", 7LL);
  __int128 v47 = sub_10000CF44(v46, (uint64_t)"BundleId", 8LL);
  sub_10000CF44(v47, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v145, &v123);
  if ((v145.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v48 = &v145;
  }
  else {
    std::string::size_type v48 = (std::stringbuf::string_type *)v145.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v48, __dst);
  uint64_t v49 = *(void *)__dst;
  *(void *)__dst = 0LL;
  std::string::size_type v50 = (sqlite3_stmt *)sub_100019240(v49);
  if (a2[23] >= 0) {
    __int128 v51 = a2;
  }
  else {
    __int128 v51 = *(char **)a2;
  }
  if (!sub_1003BC1F0(v50, 1, v51))
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934870 != -1) {
      goto LABEL_117;
    }
    goto LABEL_20;
  }

  uint64_t v52 = (sqlite3_stmt *)sub_100019240(v49);
  int v53 = sqlite3_step(v52);
  if ((v53 - 102) < 0xFFFFFFFE)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v54 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v145.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't get fences from database",  (uint8_t *)&v145,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v145, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      *(_WORD *)__dst = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't get fences from database",  __dst,  2);
      double v110 = (std::stringbuf::string_type *)v109;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v109);
      if (v110 != &v145) {
        free(v110);
      }
    }

    __int128 v55 = (sqlite3_stmt *)sub_100019240(v49);
    sqlite3_reset(v55);
    goto LABEL_27;
  }

  if (v53 == 100)
  {
    p_vtable = (void **)(a1 + 272);
    while (1)
    {
      __int128 v63 = (sqlite3_stmt *)sub_100019240(v49);
      id v64 = sqlite3_column_text(v63, 11);
      if (v64) {
        __int128 v65 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v64);
      }
      uint64_t v66 = (sqlite3_stmt *)sub_100019240(v49);
      int v67 = sqlite3_column_int(v66, 9);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      double v68 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v145.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFencesForBundle";
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "%s, Fetching fence centroid",  (uint8_t *)&v145,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&v145, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        *(_DWORD *)__dst = 136315138;
        *(void *)&__dst[4] = "getFencesForBundle";
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "%s, Fetching fence centroid",  __dst);
        __int128 v93 = (std::stringbuf::string_type *)v92;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v92);
        if (v93 != &v145) {
          free(v93);
        }
      }

      sub_1003D8DD4((uint64_t)p_vtable, v67, (uint64_t)v120);
      if (sub_1008695D8((uint64_t)v120, (uint64_t)&xmmword_101339630))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        __int128 v69 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v145.__r_.__value_.__l.__data_) = 136315395;
          *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFencesForBundle";
          WORD2(v145.__r_.__value_.__r.__words[1]) = 1025;
          *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "%s, Couldn't get centroid from database, key, %{private}d",  (uint8_t *)&v145,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v145, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          *(_DWORD *)__dst = 136315395;
          *(void *)&__dst[4] = "getFencesForBundle";
          __int16 v129 = 1025;
          int v130 = v67;
          LODWORD(v111) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "%s, Couldn't get centroid from database, key, %{private}d",  __dst,  v111);
          __int128 v95 = (std::stringbuf::string_type *)v94;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v94);
          if (v95 != &v145) {
            free(v95);
          }
        }

        uint64_t v70 = (sqlite3_stmt *)sub_100019240(v49);
        int v71 = sqlite3_step(v70);
      }

      else
      {
        uint64_t v72 = (sqlite3_stmt *)sub_100019240(v49);
        __int128 v73 = (char *)sqlite3_column_text(v72, 0);
        sub_1010DDBC0(&v118, v73);
        unint64_t v74 = (sqlite3_stmt *)sub_100019240(v49);
        __int128 v75 = (char *)sqlite3_column_text(v74, 1);
        sub_1010DDBC0(&v116, v75);
        int64_t v76 = (sqlite3_stmt *)sub_100019240(v49);
        __int128 v77 = (char *)sqlite3_column_text(v76, 7);
        sub_1010DDBC0(&v114, v77);
        uint64_t v78 = (sqlite3_stmt *)sub_100019240(v49);
        sqlite3_column_double(v78, 2);
        __int128 v79 = (sqlite3_stmt *)sub_100019240(v49);
        sqlite3_column_double(v79, 3);
        uint64_t v80 = (sqlite3_stmt *)sub_100019240(v49);
        sqlite3_column_int(v80, 9);
        __int128 v81 = (sqlite3_stmt *)sub_100019240(v49);
        uint64_t v82 = (char *)sqlite3_column_text(v81, 10);
        sub_1010DDBC0(&v112, v82);
        sub_100922EB8(__dst);
        if (v113 < 0) {
          operator delete(v112);
        }
        if (v115 < 0) {
          operator delete(v114);
        }
        if (v117 < 0) {
          operator delete(v116);
        }
        if (v119 < 0) {
          operator delete(v118);
        }
        __int128 v83 = (sqlite3_stmt *)sub_100019240(v49);
        double v136 = sqlite3_column_double(v83, 4);
        uint64_t v84 = (sqlite3_stmt *)sub_100019240(v49);
        double v137 = sqlite3_column_double(v84, 5);
        __int128 v85 = (sqlite3_stmt *)sub_100019240(v49);
        sqlite3_int64 v138 = sqlite3_column_int64(v85, 6);
        uint64_t v86 = (sqlite3_stmt *)sub_100019240(v49);
        int v139 = sqlite3_column_int(v86, 8);
        __int128 v87 = (sqlite3_stmt *)sub_100019240(v49);
        int v71 = sqlite3_step(v87);
        sub_100BDEB90(a1 + 136, v140, (double **)v144);
        unint64_t v88 = a3[1];
        if (v88 >= a3[2])
        {
          uint64_t v89 = sub_100669E18(a3, (__int128 *)__dst);
        }

        else
        {
          sub_1002718F0((char *)a3[1], (__int128 *)__dst);
          uint64_t v89 = v88 + 248;
          a3[1] = v88 + 248;
        }

        a3[1] = v89;
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        __int16 v90 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          sub_100923668((uint64_t)__dst, &v145);
          __int128 v91 = &v145;
          if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int128 v91 = (std::stringbuf::string_type *)v145.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
          _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEBUG,  "fetched bundle fence, %{private}s",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v145, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          uint64_t v96 = qword_101934878;
          sub_100923668((uint64_t)__dst, &buf);
          p_std::stringbuf::string_type buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          int v126 = 136380675;
          std::string::size_type v127 = p_buf;
          LODWORD(v111) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  v96,  2LL,  "fetched bundle fence, %{private}s",  &v126,  v111);
          uint64_t v99 = v98;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  (const char *)v99);
          if (v99 != &v145) {
            free(v99);
          }
        }

        if (v140 == -1)
        {
          sub_1012426F4();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceDatabase.mm",  862,  "getFencesForBundle");
          __break(1u);
LABEL_117:
          dispatch_once(&qword_101934870, &stru_101848AA8);
LABEL_20:
          __int128 v57 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
          {
            if (a2[23] >= 0) {
              std::string::size_type v58 = (std::string::size_type)a2;
            }
            else {
              std::string::size_type v58 = *(void *)a2;
            }
            LODWORD(v145.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = v58;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't bind bundle ID %{public}s",  (uint8_t *)&v145,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&v145, 0x65CuLL);
            if (a2[23] >= 0) {
              uint64_t v106 = a2;
            }
            else {
              uint64_t v106 = *(char **)a2;
            }
            *(_DWORD *)__dst = 136446210;
            *(void *)&__dst[4] = v106;
            LODWORD(v111) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't bind bundle ID %{public}s",  __dst,  v111);
            int v108 = (std::stringbuf::string_type *)v107;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v107);
            if (v108 != &v145) {
              free(v108);
            }
          }

          __int128 v59 = (sqlite3_stmt *)sub_100019240(v49);
          sqlite3_reset(v59);
LABEL_27:
          sub_100691E50((void **)a3);
LABEL_28:
          uint64_t v60 = 0LL;
          if (v49) {
            goto LABEL_29;
          }
          goto LABEL_30;
        }

        if (v144[0])
        {
          v144[1] = v144[0];
          operator delete(v144[0]);
        }

        if (v142 < 0) {
          operator delete(v141);
        }
        if (v135 < 0) {
          operator delete(v134);
        }
        if (v133 < 0) {
          operator delete(v132);
        }
        if (v131 < 0) {
          operator delete(*(void **)__dst);
        }
      }

      if (v71 != 100) {
        goto LABEL_98;
      }
    }
  }

  int v71 = 101;
LABEL_98:
  uint64_t v100 = (sqlite3_stmt *)sub_100019240(v49);
  sqlite3_reset(v100);
  sub_100691E50((void **)a3);
  if (v71 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v101 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      if (a2[23] >= 0) {
        std::string::size_type v102 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v102 = *(void *)a2;
      }
      LODWORD(v145.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = v102;
      _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving fences from database for bundle ID %{public}s",  (uint8_t *)&v145,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v145, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      if (a2[23] >= 0) {
        char v103 = a2;
      }
      else {
        char v103 = *(char **)a2;
      }
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = v103;
      LODWORD(v111) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v145,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving fences from database for bundle ID %{public}s",  __dst,  v111);
      char v105 = (std::stringbuf::string_type *)v104;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v104);
      if (v105 != &v145) {
        free(v105);
      }
    }

    goto LABEL_28;
  }

  uint64_t v60 = 1LL;
  if (v49) {
LABEL_29:
  }
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
LABEL_30:
  *(void *)((char *)v121
  uint64_t v122 = v61;
  std::streambuf::~streambuf(&v123);
  std::ios::~ios(&v124);
  return v60;
}

void sub_100695050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  sub_1011F8850((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_100695168(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      v6 -= 248LL;
      sub_10066855C((uint64_t)(a3 + 2), v6);
    }

    while (v6 != v7);
  }

  a3[1] = v7;
  sub_100222B94(v128, (uint64_t)"CLFenceDatabase::getFencesForBundleIncludingOnBehalf", 0);
  sub_10000CE18((uint64_t)v124);
  int v8 = sub_10000CF44(&v125, (uint64_t)"SELECT ", 7LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"BundleId", 8LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)", ", 2LL);
  __int128 v11 = sub_10000CF44(v10, (uint64_t)"Name", 4LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)", ", 2LL);
  __int128 v13 = sub_10000CF44(v12, (uint64_t)"Distance", 8LL);
  uint64_t v14 = sub_10000CF44(v13, (uint64_t)", ", 2LL);
  __int128 v15 = sub_10000CF44(v14, (uint64_t)"DesiredAccuracy", 15LL);
  uint64_t v16 = sub_10000CF44(v15, (uint64_t)", ", 2LL);
  __int128 v17 = sub_10000CF44(v16, (uint64_t)"SetupComplete", 13LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)", ", 2LL);
  __int128 v19 = sub_10000CF44(v18, (uint64_t)"Timestamp", 9LL);
  uint64_t v20 = sub_10000CF44(v19, (uint64_t)", ", 2LL);
  __int128 v21 = sub_10000CF44(v20, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v22 = sub_10000CF44(v21, (uint64_t)", ", 2LL);
  __int128 v23 = sub_10000CF44(v22, (uint64_t)"OnBehalfBundleId", 16LL);
  char v24 = sub_10000CF44(v23, (uint64_t)", ", 2LL);
  __int128 v25 = sub_10000CF44(v24, (uint64_t)"ReferenceFrame", 14LL);
  uint64_t v26 = sub_10000CF44(v25, (uint64_t)", ", 2LL);
  __int128 v27 = sub_10000CF44(v26, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v28 = sub_10000CF44(v27, (uint64_t)", ", 2LL);
  __int128 v29 = sub_10000CF44(v28, (uint64_t)"HandoffTag", 10LL);
  std::string::size_type v30 = sub_10000CF44(v29, (uint64_t)", ", 2LL);
  __int128 v31 = sub_10000CF44(v30, (uint64_t)"FenceHandOffDeviceId", 20LL);
  int v32 = sub_10000CF44(v31, (uint64_t)".", 1LL);
  __int128 v33 = sub_10000CF44(v32, (uint64_t)"DeviceId", 8LL);
  std::stringbuf v34 = sub_10000CF44(v33, (uint64_t)" FROM ", 6LL);
  __int128 v35 = sub_10000CF44(v34, (uint64_t)"GeoFence", 8LL);
  char v36 = sub_10000CF44(v35, (uint64_t)" INNER JOIN ", 12LL);
  __int128 v37 = sub_10000CF44(v36, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v38 = sub_10000CF44(v37, (uint64_t)" ON ", 4LL);
  __int128 v39 = sub_10000CF44(v38, (uint64_t)"GeoFence", 8LL);
  uint64_t v40 = sub_10000CF44(v39, (uint64_t)".", 1LL);
  __int128 v41 = sub_10000CF44(v40, (uint64_t)"DeviceIdIndex", 13LL);
  uint64_t v42 = sub_10000CF44(v41, (uint64_t)" = ", 3LL);
  __int128 v43 = sub_10000CF44(v42, (uint64_t)"FenceHandOffDeviceId", 20LL);
  uint64_t v44 = sub_10000CF44(v43, (uint64_t)".", 1LL);
  __int128 v45 = sub_10000CF44(v44, (uint64_t)"DeviceIdIndex", 13LL);
  int v46 = sub_10000CF44(v45, (uint64_t)" WHERE ", 7LL);
  __int128 v47 = sub_10000CF44(v46, (uint64_t)"BundleId", 8LL);
  std::string::size_type v48 = sub_10000CF44(v47, (uint64_t)"=? OR ", 6LL);
  uint64_t v49 = sub_10000CF44(v48, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v49, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v149, &v126);
  if ((v149.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v50 = &v149;
  }
  else {
    std::string::size_type v50 = (std::stringbuf::string_type *)v149.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v50, __dst);
  uint64_t v51 = *(void *)__dst;
  *(void *)__dst = 0LL;
  uint64_t v52 = (sqlite3_stmt *)sub_100019240(v51);
  if (a2[23] >= 0) {
    int v53 = a2;
  }
  else {
    int v53 = *(char **)a2;
  }
  if (!sub_1003BC1F0(v52, 1, v53)
    || ((uint64_t v54 = (sqlite3_stmt *)sub_100019240(v51), a2[23] >= 0) ? (v55 = a2) : (v55 = *(char **)a2),
        !sub_1003BC1F0(v54, 2, v55)))
  {
    if (qword_101934870 != -1) {
      goto LABEL_120;
    }
    goto LABEL_24;
  }

  uint64_t v56 = (sqlite3_stmt *)sub_100019240(v51);
  int v57 = sqlite3_step(v56);
  if ((v57 - 102) < 0xFFFFFFFE)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    std::string::size_type v58 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v149.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "Fence: Couldn't get fences from database",  (uint8_t *)&v149,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v149, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      *(_WORD *)__dst = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "Fence: Couldn't get fences from database",  __dst,  2);
      char v113 = (std::stringbuf::string_type *)v112;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v112);
      if (v113 != &v149) {
        free(v113);
      }
    }

    __int128 v59 = (sqlite3_stmt *)sub_100019240(v51);
    sqlite3_reset(v59);
    goto LABEL_31;
  }

  if (v57 == 100)
  {
    while (1)
    {
      uint64_t v66 = (sqlite3_stmt *)sub_100019240(v51);
      int v67 = sqlite3_column_text(v66, 11);
      if (v67) {
        double v68 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v67);
      }
      __int128 v69 = (sqlite3_stmt *)sub_100019240(v51);
      int v70 = sqlite3_column_int(v69, 9);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      int v71 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v149.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFencesForBundleIncludingOnBehalf";
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "%s, Fetching fence centroid",  (uint8_t *)&v149,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&v149, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        *(_DWORD *)__dst = 136315138;
        *(void *)&__dst[4] = "getFencesForBundleIncludingOnBehalf";
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "%s, Fetching fence centroid",  __dst);
        uint64_t v96 = (std::stringbuf::string_type *)v95;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v95);
        if (v96 != &v149) {
          free(v96);
        }
      }

      sub_1003D8DD4(a1 + 272, v70, (uint64_t)v123);
      if (sub_1008695D8((uint64_t)v123, (uint64_t)&xmmword_101339630))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        uint64_t v72 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v149.__r_.__value_.__l.__data_) = 136315395;
          *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)"getFencesForBundleIncludingOnBehalf";
          WORD2(v149.__r_.__value_.__r.__words[1]) = 1025;
          *(_DWORD *)((char *)&v149.__r_.__value_.__r.__words[1] + 6) = v70;
          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "%s, Couldn't get centroid from database, key, %{private}d",  (uint8_t *)&v149,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v149, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          *(_DWORD *)__dst = 136315395;
          *(void *)&__dst[4] = "getFencesForBundleIncludingOnBehalf";
          __int16 v133 = 1025;
          int v134 = v70;
          LODWORD(v114) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "%s, Couldn't get centroid from database, key, %{private}d",  __dst,  v114);
          BOOL v98 = (std::stringbuf::string_type *)v97;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v97);
          if (v98 != &v149) {
            free(v98);
          }
        }

        __int128 v73 = (sqlite3_stmt *)sub_100019240(v51);
        int v74 = sqlite3_step(v73);
      }

      else
      {
        __int128 v75 = (sqlite3_stmt *)sub_100019240(v51);
        int64_t v76 = (char *)sqlite3_column_text(v75, 0);
        sub_1010DDBC0(&v121, v76);
        __int128 v77 = (sqlite3_stmt *)sub_100019240(v51);
        uint64_t v78 = (char *)sqlite3_column_text(v77, 1);
        sub_1010DDBC0(&v119, v78);
        __int128 v79 = (sqlite3_stmt *)sub_100019240(v51);
        uint64_t v80 = (char *)sqlite3_column_text(v79, 7);
        sub_1010DDBC0(&v117, v80);
        __int128 v81 = (sqlite3_stmt *)sub_100019240(v51);
        sqlite3_column_double(v81, 2);
        uint64_t v82 = (sqlite3_stmt *)sub_100019240(v51);
        sqlite3_column_double(v82, 3);
        __int128 v83 = (sqlite3_stmt *)sub_100019240(v51);
        sqlite3_column_int(v83, 9);
        uint64_t v84 = (sqlite3_stmt *)sub_100019240(v51);
        __int128 v85 = (char *)sqlite3_column_text(v84, 10);
        sub_1010DDBC0(&v115, v85);
        sub_100922EB8(__dst);
        if (v116 < 0) {
          operator delete(v115);
        }
        if (v118 < 0) {
          operator delete(v117);
        }
        if (v120 < 0) {
          operator delete(v119);
        }
        if (v122 < 0) {
          operator delete(v121);
        }
        uint64_t v86 = (sqlite3_stmt *)sub_100019240(v51);
        double v140 = sqlite3_column_double(v86, 4);
        __int128 v87 = (sqlite3_stmt *)sub_100019240(v51);
        double v141 = sqlite3_column_double(v87, 5);
        unint64_t v88 = (sqlite3_stmt *)sub_100019240(v51);
        sqlite3_int64 v142 = sqlite3_column_int64(v88, 6);
        uint64_t v89 = (sqlite3_stmt *)sub_100019240(v51);
        int v143 = sqlite3_column_int(v89, 8);
        __int16 v90 = (sqlite3_stmt *)sub_100019240(v51);
        int v74 = sqlite3_step(v90);
        sub_100BDEB90(a1 + 136, v144, (double **)v148);
        unint64_t v91 = a3[1];
        if (v91 >= a3[2])
        {
          uint64_t v92 = sub_100669E18(a3, (__int128 *)__dst);
        }

        else
        {
          sub_1002718F0((char *)a3[1], (__int128 *)__dst);
          uint64_t v92 = v91 + 248;
          a3[1] = v91 + 248;
        }

        a3[1] = v92;
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101848AA8);
        }
        __int128 v93 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          sub_100923668((uint64_t)__dst, &v149);
          uint64_t v94 = &v149;
          if ((v149.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v94 = (std::stringbuf::string_type *)v149.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v94;
          _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "fetched bundle or onbehalf fence, %{private}s",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v149, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101848AA8);
          }
          uint64_t v99 = qword_101934878;
          sub_100923668((uint64_t)__dst, &buf);
          p_std::stringbuf::string_type buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          int v130 = 136380675;
          char v131 = p_buf;
          LODWORD(v114) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  v99,  2LL,  "fetched bundle or onbehalf fence, %{private}s",  &v130,  v114);
          std::string::size_type v102 = v101;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  (const char *)v102);
          if (v102 != &v149) {
            free(v102);
          }
        }

        if (v144 == -1)
        {
          sub_1012426F4();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceDatabase.mm",  966,  "getFencesForBundleIncludingOnBehalf");
          __break(1u);
LABEL_120:
          dispatch_once(&qword_101934870, &stru_101848AA8);
LABEL_24:
          uint64_t v60 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
          {
            if (a2[23] >= 0) {
              std::string::size_type v61 = (std::string::size_type)a2;
            }
            else {
              std::string::size_type v61 = *(void *)a2;
            }
            LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = v61;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't bind bundle ID %{public}s",  (uint8_t *)&v149,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&v149, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101848AA8);
            }
            if (a2[23] >= 0) {
              char v109 = a2;
            }
            else {
              char v109 = *(char **)a2;
            }
            *(_DWORD *)__dst = 136446210;
            *(void *)&__dst[4] = v109;
            LODWORD(v114) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't bind bundle ID %{public}s",  __dst,  v114);
            uint64_t v111 = (std::stringbuf::string_type *)v110;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v110);
            if (v111 != &v149) {
              free(v111);
            }
          }

          std::string::size_type v62 = (sqlite3_stmt *)sub_100019240(v51);
          sqlite3_reset(v62);
LABEL_31:
          sub_100691E50((void **)a3);
LABEL_32:
          uint64_t v63 = 0LL;
          if (v51) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }

        if (v148[0])
        {
          v148[1] = v148[0];
          operator delete(v148[0]);
        }

        if (v146 < 0) {
          operator delete(v145);
        }
        if (v139 < 0) {
          operator delete(v138);
        }
        if (v137 < 0) {
          operator delete(v136);
        }
        if (v135 < 0) {
          operator delete(*(void **)__dst);
        }
      }

      if (v74 != 100) {
        goto LABEL_101;
      }
    }
  }

  int v74 = 101;
LABEL_101:
  char v103 = (sqlite3_stmt *)sub_100019240(v51);
  sqlite3_reset(v103);
  sub_100691E50((void **)a3);
  if (v74 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    unint64_t v104 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        std::string::size_type v105 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v105 = *(void *)a2;
      }
      LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = v105;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "Fence: Error in retrieving fences from database for bundle or onbehalf ID %{public}s",  (uint8_t *)&v149,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v149, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      if (a2[23] >= 0) {
        uint64_t v106 = a2;
      }
      else {
        uint64_t v106 = *(char **)a2;
      }
      *(_DWORD *)__dst = 136446210;
      *(void *)&__dst[4] = v106;
      LODWORD(v114) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v149,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "Fence: Error in retrieving fences from database for bundle or onbehalf ID %{public}s",  __dst,  v114);
      int v108 = (std::stringbuf::string_type *)v107;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v107);
      if (v108 != &v149) {
        free(v108);
      }
    }

    goto LABEL_32;
  }

  uint64_t v63 = 1LL;
  if (v51) {
LABEL_33:
  }
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
LABEL_34:
  *(void *)((char *)v124
  uint64_t v125 = v64;
  std::streambuf::~streambuf(&v126);
  std::ios::~ios(&v127);
  sub_1001BA1BC(v128);
  return v63;
}

void sub_10069621C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  sub_1011F8850((uint64_t)&a56);
  sub_1001BA1BC((id *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

BOOL sub_100696344(uint64_t a1, char *a2, std::string::size_type a3, uint64_t *a4)
{
  int v8 = sub_10000CF44(&v60, (uint64_t)"SELECT ", 7LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)" FROM ", 6LL);
  __int128 v11 = sub_10000CF44(v10, (uint64_t)"GeoFence", 8LL);
  std::stringbuf::string_type v12 = sub_10000CF44(v11, (uint64_t)" WHERE ", 7LL);
  __int128 v13 = sub_10000CF44(v12, (uint64_t)"BundleId", 8LL);
  uint64_t v14 = sub_10000CF44(v13, (uint64_t)"=? AND ", 7LL);
  __int128 v15 = sub_10000CF44(v14, (uint64_t)"Name", 4LL);
  uint64_t v16 = sub_10000CF44(v15, (uint64_t)"=? AND ", 7LL);
  __int128 v17 = sub_10000CF44(v16, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v17, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v68, &v61);
  if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v18 = &v68;
  }
  else {
    uint64_t v18 = (std::stringbuf::string_type *)v68.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v18, v63);
  uint64_t v19 = *(void *)v63;
  *(void *)uint64_t v63 = 0LL;
  uint64_t v20 = (sqlite3_stmt *)sub_100019240(v19);
  if (a2[23] >= 0) {
    __int128 v21 = a2;
  }
  else {
    __int128 v21 = *(char **)a2;
  }
  if (sub_1003BC1F0(v20, 1, v21))
  {
    uint64_t v22 = (sqlite3_stmt *)sub_100019240(v19);
    __int128 v23 = *((char *)a4 + 23) >= 0 ? (char *)a4 : (char *)*a4;
    if (sub_1003BC1F0(v22, 2, v23))
    {
      char v24 = (sqlite3_stmt *)sub_100019240(v19);
      __int128 v25 = *(char *)(a3 + 23) >= 0 ? (char *)a3 : *(char **)a3;
      if (sub_1003BC1F0(v24, 3, v25))
      {
        uint64_t v26 = (sqlite3_stmt *)sub_100019240(v19);
        int v27 = sqlite3_step(v26);
        BOOL v28 = v27 == 100;
        if (v27 != 100)
        {
          if (v27 == 101)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101848AA8);
            }
            __int128 v29 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              else {
                std::string::size_type v30 = *(void *)a3;
              }
              if (a2[23] >= 0) {
                std::string::size_type v31 = (std::string::size_type)a2;
              }
              else {
                std::string::size_type v31 = *(void *)a2;
              }
              else {
                int v32 = (uint64_t *)*a4;
              }
              LODWORD(v68.__r_.__value_.__l.__data_) = 136446723;
              *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = v30;
              WORD2(v68.__r_.__value_.__r.__words[1]) = 2082;
              *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = v31;
              HIWORD(v68.__r_.__value_.__r.__words[2]) = 2081;
              __int128 v69 = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "Fence: Fence doesn't exist [%{public}s]/%{public}s/%{private}s",  (uint8_t *)&v68,  0x20u);
            }

            if (!sub_1002921D0(115, 2)) {
              goto LABEL_80;
            }
            bzero(&v68, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101848AA8);
            }
            else {
              std::string::size_type v33 = *(void *)a3;
            }
            if (a2[23] >= 0) {
              std::stringbuf v34 = a2;
            }
            else {
              std::stringbuf v34 = *(char **)a2;
            }
            else {
              __int128 v35 = (uint64_t *)*a4;
            }
            *(_DWORD *)uint64_t v63 = 136446723;
            *(void *)&v63[4] = v33;
            __int16 v64 = 2082;
            __int128 v65 = v34;
            __int16 v66 = 2081;
            int v67 = v35;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v68,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Fence doesn't exist [%{public}s]/%{public}s/%{private}s",  v63,  32);
            __int128 v37 = (std::stringbuf::string_type *)v36;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceDatabase::isFenceRegistered(const std::string &, const std::string &, const std::string &)",  "%s\n",  v36);
          }

          else
          {
            sub_1003B5988(a1, v27);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101848AA8);
            }
            __int128 v45 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
            {
              else {
                std::string::size_type v46 = *(void *)a3;
              }
              if (a2[23] >= 0) {
                std::string::size_type v47 = (std::string::size_type)a2;
              }
              else {
                std::string::size_type v47 = *(void *)a2;
              }
              else {
                std::string::size_type v48 = (uint64_t *)*a4;
              }
              LODWORD(v68.__r_.__value_.__l.__data_) = 136446723;
              *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = v46;
              WORD2(v68.__r_.__value_.__r.__words[1]) = 2082;
              *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = v47;
              HIWORD(v68.__r_.__value_.__r.__words[2]) = 2081;
              __int128 v69 = v48;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving fence key from database for [%{public}s/%{public}s/%{private}s",  (uint8_t *)&v68,  0x20u);
            }

            if (!sub_1002921D0(115, 0)) {
              goto LABEL_80;
            }
            bzero(&v68, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101848AA8);
            }
            else {
              std::string::size_type v55 = *(void *)a3;
            }
            if (a2[23] >= 0) {
              uint64_t v56 = a2;
            }
            else {
              uint64_t v56 = *(char **)a2;
            }
            else {
              int v57 = (uint64_t *)*a4;
            }
            *(_DWORD *)uint64_t v63 = 136446723;
            *(void *)&v63[4] = v55;
            __int16 v64 = 2082;
            __int128 v65 = v56;
            __int16 v66 = 2081;
            int v67 = v57;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v68,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving fence key from database for [%{public}s/%{public}s/%{private}s",  v63,  32);
            __int128 v37 = (std::stringbuf::string_type *)v58;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::isFenceRegistered(const std::string &, const std::string &, const std::string &)",  "%s\n",  v58);
          }

          if (v37 != &v68) {
            free(v37);
          }
        }

void sub_100696B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100696BD0(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10000CF44(&v24, (uint64_t)"SELECT COUNT(*) FROM ", 21LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"GeoFence", 8LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" WHERE ", 7LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"BundleId", 8LL);
  sub_10000CF44(v7, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v28, &v25);
  if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v8 = &v28;
  }
  else {
    int v8 = (std::stringbuf::string_type *)v28.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v8, v27);
  uint64_t v9 = *(void *)v27;
  *(void *)int v27 = 0LL;
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(v9);
  if (a2[23] >= 0) {
    __int128 v11 = a2;
  }
  else {
    __int128 v11 = *(char **)a2;
  }
  if (sub_1003BC1F0(v10, 1, v11) && (std::stringbuf::string_type v12 = (sqlite3_stmt *)sub_100019240(v9), sqlite3_step(v12) == 100))
  {
    __int128 v13 = (sqlite3_stmt *)sub_100019240(v9);
    uint64_t v14 = sqlite3_column_int(v13, 0);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int128 v15 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0) {
        std::string::size_type v16 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v16 = *(void *)a2;
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Couldn't get number of fences for bundle ID %{public}s",  (uint8_t *)&v28,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v28, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      if (a2[23] >= 0) {
        uint64_t v20 = a2;
      }
      else {
        uint64_t v20 = *(char **)a2;
      }
      *(_DWORD *)int v27 = 136446210;
      *(void *)&v27[4] = v20;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v28,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Couldn't get number of fences for bundle ID %{public}s",  v27,  12);
      uint64_t v22 = (std::stringbuf::string_type *)v21;
      sub_10029211C("Generic", 1LL, 0, 2LL, "int CLFenceDatabase::numFencesForBundle(const std::string &)", "%s\n", v21);
      if (v22 != &v28) {
        free(v22);
      }
    }

    uint64_t v14 = 0xFFFFFFFFLL;
  }

  __int128 v17 = (sqlite3_stmt *)sub_100019240(v9);
  sqlite3_reset(v17);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)((char *)v23
  uint64_t v24 = v18;
  std::streambuf::~streambuf(&v25);
  std::ios::~ios(&v26);
  return v14;
}

void sub_100696F28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100696F80(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10000CF44(&v27, (uint64_t)"SELECT COUNT(*) FROM ", 21LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"GeoFence", 8LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" WHERE ", 7LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"BundleId", 8LL);
  int v8 = sub_10000CF44(v7, (uint64_t)"=?", 2LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)" OR ", 4LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v10, (uint64_t)"=?", 2LL);
  std::stringbuf::str((std::stringbuf::string_type *)v30, &v28);
  if (v30[23] >= 0) {
    __int128 v11 = v30;
  }
  else {
    __int128 v11 = *(char **)v30;
  }
  sub_1003C0D54(a1, v11, &v25);
  uint64_t v12 = v25;
  uint64_t v25 = 0LL;
  if ((v30[23] & 0x80000000) != 0) {
    operator delete(*(void **)v30);
  }
  __int128 v13 = (sqlite3_stmt *)sub_100019240(v12);
  if (a2[23] >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *(char **)a2;
  }
  if (sub_1003BC1F0(v13, 1, v14)
    && ((__int128 v15 = (sqlite3_stmt *)sub_100019240(v12), a2[23] >= 0) ? (v16 = a2) : (v16 = *(char **)a2),
        sub_1003BC1F0(v15, 2, v16) && (__int128 v17 = (sqlite3_stmt *)sub_100019240(v12), sqlite3_step(v17) == 100)))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v12);
    uint64_t v19 = sqlite3_column_int(v18, 0);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v20 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0) {
        __int128 v21 = a2;
      }
      else {
        __int128 v21 = *(char **)a2;
      }
      *(void *)std::string::size_type v30 = 68289282LL;
      *(_WORD *)&v30[8] = 2082;
      *(void *)&v30[10] = "";
      *(_WORD *)&v30[18] = 2082;
      *(void *)&v30[20] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Fence: Couldn't get number of fences matching given value from bundle ID or on-b ehalf-of, bundleID:%{public, location:escape_only}s}",  v30,  0x1Cu);
    }

    uint64_t v19 = 0xFFFFFFFFLL;
  }

  uint64_t v22 = (sqlite3_stmt *)sub_100019240(v12);
  sqlite3_reset(v22);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  *(void *)((char *)v26
  uint64_t v27 = v23;
  std::streambuf::~streambuf(&v28);
  std::ios::~ios(&v29);
  return v19;
}

void sub_10069725C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1006972B0( uint64_t a1, std::string::size_type a2, std::string::size_type a3, std::string::size_type a4, double a5)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v10 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      std::string::size_type v11 = *(void *)a3;
    }
    else {
      std::string::size_type v12 = *(void *)a2;
    }
    else {
      __int128 v13 = *(std::stringbuf_vtbl **)a4;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v12;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2081;
    __int128 v59 = v13;
    __int16 v60 = 2050;
    double v61 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Fence: Recording [%{public}s]/%{public}s/%{private}s last download time change to %{public}.2f",  (uint8_t *)&buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      std::string::size_type v40 = *(void *)a3;
    }
    else {
      std::string::size_type v41 = *(void *)a2;
    }
    else {
      uint64_t v42 = *(std::stringbuf_vtbl **)a4;
    }
    *(_DWORD *)int v53 = 136446979;
    *(void *)&v53[4] = v40;
    __int16 v54 = 2082;
    *(void *)std::string::size_type v55 = v41;
    *(_WORD *)&v55[8] = 2081;
    v56.__vftable = v42;
    LOWORD(v56.__loc_.__locale_) = 2050;
    *(double *)((char *)&v56.__loc_.__locale_ + 2) = a5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Recording [%{public}s]/%{public}s/%{private}s last download time change to %{public}.2f",  v53,  42);
    uint64_t v44 = (std::stringbuf::string_type *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)",  "%s\n",  v43);
    if (v44 != &buf) {
      free(v44);
    }
  }

  sub_10000CE18((uint64_t)v53);
  uint64_t v14 = sub_10000CF44(&v55[2], (uint64_t)"UPDATE ", 7LL);
  __int128 v15 = sub_10000CF44(v14, (uint64_t)"GeoFence", 8LL);
  std::string::size_type v16 = sub_10000CF44(v15, (uint64_t)" SET ", 5LL);
  __int128 v17 = sub_10000CF44(v16, (uint64_t)"SetupComplete", 13LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)"=?", 2LL);
  uint64_t v19 = sub_10000CF44(v18, (uint64_t)" WHERE ", 7LL);
  uint64_t v20 = sub_10000CF44(v19, (uint64_t)"BundleId", 8LL);
  __int128 v21 = sub_10000CF44(v20, (uint64_t)"=? AND ", 7LL);
  uint64_t v22 = sub_10000CF44(v21, (uint64_t)"Name", 4LL);
  uint64_t v23 = sub_10000CF44(v22, (uint64_t)"=? AND ", 7LL);
  uint64_t v24 = sub_10000CF44(v23, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v24, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&buf, &v56);
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_std::stringbuf::string_type buf = &buf;
  }
  else {
    p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)p_buf, v50);
  uint64_t v26 = *(void *)v50;
  *(void *)std::string::size_type v50 = 0LL;
  uint64_t v27 = (sqlite3_stmt *)sub_100019240(v26);
  if (sub_1003B7480(v27, 1, a5)
    && ((std::stringbuf v28 = (sqlite3_stmt *)sub_100019240(v26), *(char *)(a2 + 23) >= 0) ? (v29 = (char *)a2) : (v29 = *(char **)a2),
        sub_1003BC1F0(v28, 2, v29)
     && ((v30 = (sqlite3_stmt *)sub_100019240(v26), *(char *)(a4 + 23) >= 0) ? (std::string::size_type v31 = (char *)a4) : (std::string::size_type v31 = *(char **)a4),
         sub_1003BC1F0(v30, 3, v31)
      && ((int v32 = (sqlite3_stmt *)sub_100019240(v26), *(char *)(a3 + 23) >= 0)
        ? (std::string::size_type v33 = (char *)a3)
        : (std::string::size_type v33 = *(char **)a3),
          sub_1003BC1F0(v32, 4, v33)))))
  {
    std::stringbuf v34 = (sqlite3_stmt *)sub_100019240(v26);
    sub_1003BB2BC(a1, v34);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int128 v35 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      else {
        std::string::size_type v36 = *(void *)a2;
      }
      else {
        std::string::size_type v37 = *(void *)a4;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v36;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Couldn't update last download time for %{public}s/%{private}s in database",  (uint8_t *)&buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      else {
        std::string::size_type v45 = *(void *)a2;
      }
      else {
        std::string::size_type v46 = *(std::stringbuf_vtbl **)a4;
      }
      *(_DWORD *)std::string::size_type v50 = 136446467;
      *(void *)&v50[4] = v45;
      __int16 v51 = 2081;
      uint64_t v52 = v46;
      LODWORD(v49) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Couldn't update last download time for %{public}s/%{private}s in database",  v50,  v49);
      std::string::size_type v48 = (std::stringbuf::string_type *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)",  "%s\n",  v47);
      if (v48 != &buf) {
        free(v48);
      }
    }
  }

  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  *(void *)&v55[2] = v38;
  std::streambuf::~streambuf(&v56);
  return std::ios::~ios(&v57);
}

void sub_1006978EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100697944(uint64_t a1)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Fence: Marking all fence data download times as invalid",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    LOWORD(v14.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Marking all fence data download times as invalid",  &v14,  2);
    __int128 v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceDatabase::markDataDownloadInvalid()", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  sub_10000CE18((uint64_t)buf);
  int64x2_t v3 = sub_10000CF44(&v17, (uint64_t)"UPDATE ", 7LL);
  unint64_t v4 = sub_10000CF44(v3, (uint64_t)"GeoFence", 8LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)" SET ", 5LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)"SetupComplete", 13LL);
  sub_10000CF44(v6, (uint64_t)"=-1", 3LL);
  std::stringbuf::str(&v14, &v18);
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = &v14;
  }
  else {
    uint64_t v7 = (std::stringbuf::string_type *)v14.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v7, &v15);
  uint64_t v8 = v15;
  uint64_t v15 = 0LL;
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(v8);
  sub_1003BB2BC(a1, v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v17 = v10;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_100697C04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100697C58(uint64_t a1, std::string::size_type a2, char *a3)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  uint64_t v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      std::string::size_type v7 = *(void *)a2;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Fence: invalidate download date for, %{public}s",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      std::string::size_type v29 = *(void *)a2;
    }
    *(_DWORD *)std::string::size_type v37 = 136446210;
    *(void *)&v37[4] = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: invalidate download date for, %{public}s",  v37,  12);
    std::string::size_type v31 = (std::stringbuf::string_type *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  sub_10000CE18((uint64_t)v37);
  uint64_t v8 = sub_10000CF44(&v38, (uint64_t)"UPDATE OR IGNORE ", 17LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"GeoFence", 8LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)" SET ", 5LL);
  std::string::size_type v11 = sub_10000CF44(v10, (uint64_t)"SetupComplete", 13LL);
  std::string::size_type v12 = sub_10000CF44(v11, (uint64_t)"=-1", 3LL);
  __int128 v13 = sub_10000CF44(v12, (uint64_t)" WHERE ", 7LL);
  std::stringbuf::string_type v14 = sub_10000CF44(v13, (uint64_t)"BundleId", 8LL);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)"=? AND ", 7LL);
  std::string::size_type v16 = sub_10000CF44(v15, (uint64_t)"OnBehalfBundleId", 16LL);
  sub_10000CF44(v16, (uint64_t)"=?", 2LL);
  std::stringbuf::str(buf, &v39);
  if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v17 = buf;
  }
  else {
    uint64_t v17 = (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v17, v36);
  uint64_t v18 = *(void *)v36;
  *(void *)std::string::size_type v36 = 0LL;
  uint64_t v19 = (sqlite3_stmt *)sub_100019240(v18);
  else {
    uint64_t v20 = *(char **)a2;
  }
  if (sub_1003BC1F0(v19, 1, v20)
    && ((__int128 v21 = (sqlite3_stmt *)sub_100019240(v18), a3[23] >= 0) ? (v22 = a3) : (v22 = *(char **)a3),
        sub_1003BC1F0(v21, 2, v22)))
  {
    uint64_t v23 = (sqlite3_stmt *)sub_100019240(v18);
    sub_1003BB2BC(a1, v23);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v24 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      else {
        std::string::size_type v25 = *(void *)a2;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "Fence: failed to bind bundleId, %{public}s",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      else {
        std::string::size_type v32 = *(void *)a2;
      }
      *(_DWORD *)std::string::size_type v36 = 136446210;
      *(void *)&v36[4] = v32;
      LODWORD(v35) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: failed to bind bundleId, %{public}s",  v36,  v35);
      std::stringbuf v34 = (std::stringbuf::string_type *)v33;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    uint64_t v26 = (sqlite3_stmt *)sub_100019240(v18);
    sqlite3_reset(v26);
  }

  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v38 = v27;
  std::streambuf::~streambuf(&v39);
  return std::ios::~ios(&v40);
}

void sub_100698174( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  sub_1011F8850((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006981CC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_10000CF44(&v40, (uint64_t)"SELECT DISTINCT ", 16LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"BundleId", 8LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" FROM ", 6LL);
  sub_10000CF44(v6, (uint64_t)"GeoFence", 8LL);
  std::stringbuf::str(&v43, &v41);
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = &v43;
  }
  else {
    std::string::size_type v7 = (std::stringbuf::string_type *)v43.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v7, __p);
  uint64_t v8 = __p[0];
  __p[0] = 0LL;
  sub_100012A14(a2);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240((uint64_t)v8);
  int v10 = sqlite3_step(v9);
  if ((v10 - 102) < 0xFFFFFFFE)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    std::string::size_type v11 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v43.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't get bundle IDs from database",  (uint8_t *)&v43,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v43, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v43,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't get bundle IDs from database",  __p,  2);
      std::stringbuf v34 = (std::stringbuf::string_type *)v33;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getBundleIds(std::vector<std::string> &)",  "%s\n",  v33);
      if (v34 != &v43) {
        free(v34);
      }
    }

    std::string::size_type v12 = (sqlite3_stmt *)sub_100019240((uint64_t)v8);
    sqlite3_reset(v12);
    sub_1006987E8((uint64_t)a2);
    goto LABEL_37;
  }

  while (v10 == 100)
  {
    __int128 v13 = (sqlite3_stmt *)sub_100019240((uint64_t)v8);
    std::stringbuf::string_type v14 = (char *)sqlite3_column_text(v13, 0);
    if (v14)
    {
      sub_1010DDBC0(__p, v14);
      unint64_t v16 = a2[1];
      unint64_t v15 = a2[2];
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a2) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555LL) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        std::string::size_type v45 = a2 + 2;
        if (v21) {
          uint64_t v22 = (char *)sub_10000701C((uint64_t)(a2 + 2), v21);
        }
        else {
          uint64_t v22 = 0LL;
        }
        std::string::size_type v23 = (std::string::size_type)&v22[24 * v18];
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v43.__r_.__value_.__l.__size_ = v23;
        uint64_t v44 = &v22[24 * v21];
        __int128 v24 = *(_OWORD *)__p;
        *(void *)(v23 + 16) = v38;
        *(_OWORD *)std::string::size_type v23 = v24;
        __p[1] = 0LL;
        uint64_t v38 = 0LL;
        __p[0] = 0LL;
        v43.__r_.__value_.__l.__cap_ = v23 + 24;
        sub_100013F10(a2, &v43);
        uint64_t v25 = a2[1];
        sub_100014098((uint64_t)&v43);
        int v26 = SHIBYTE(v38);
        a2[1] = v25;
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        __int128 v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v38;
        *(_OWORD *)unint64_t v16 = v17;
        a2[1] = v16 + 24;
      }
    }

    uint64_t v27 = (sqlite3_stmt *)sub_100019240((uint64_t)v8);
    int v10 = sqlite3_step(v27);
  }

  std::stringbuf v28 = (sqlite3_stmt *)sub_100019240((uint64_t)v8);
  sqlite3_reset(v28);
  sub_1006987E8((uint64_t)a2);
  if (v10 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    std::string::size_type v30 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v43.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving bundle IDs from database",  (uint8_t *)&v43,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v43, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v43,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving bundle IDs from database",  __p,  2);
      std::string::size_type v36 = (std::stringbuf::string_type *)v35;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::getBundleIds(std::vector<std::string> &)",  "%s\n",  v35);
      if (v36 != &v43) {
        free(v36);
      }
    }

void sub_100698754( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1006987E8(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    else
    {
      uint64_t v8 = (char *)sub_10000701C(v7, v4);
    }

    int v10 = v8;
    std::string::size_type v11 = &v8[24 * v5];
    std::string::size_type v12 = v11;
    __int128 v13 = &v8[24 * v9];
    sub_100013F10(v6, &v10);
    return sub_100014098((uint64_t)&v10);
  }

  return result;
}

void sub_10069889C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1006988C4(uint64_t a1, const char *a2, uint64_t *a3)
{
  int64x2_t v3 = a3;
  unint64_t v4 = (uint64_t *)a2;
  unint64_t v5 = (const char *)a3;
  int v10 = v5;
  int v11 = 5;
  __int16 v12 = 0;
  char v13 = 0;
  char v14 = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  uint64_t v6 = sub_1003BC614(a1, a2, &v10);
  if ((_DWORD)v6)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 2082;
      unint64_t v20 = v4;
      __int16 v21 = 2082;
      uint64_t v22 = v3;
      uint64_t v8 = "{msg%{public}.0s:Fence: #migration column exists, table:%{public, location:escape_only}s, colum"
           "n:%{public, location:escape_only}s}";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x26u);
    }
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 2082;
      unint64_t v20 = v4;
      __int16 v21 = 2082;
      uint64_t v22 = v3;
      uint64_t v8 = "{msg%{public}.0s:Fence: #migration column doesn't exists, table:%{public, location:escape_only}s,"
           " column:%{public, location:escape_only}s}";
      goto LABEL_22;
    }
  }

  return v6;
}

uint64_t sub_100698AB0(uint64_t a1)
{
  int64x2_t v2 = sub_10000CF44(&v16, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  unint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" = ", 3LL);
  uint64_t v7 = (void *)std::ostream::operator<<(v6, 3LL);
  sub_10000CF44(v7, (uint64_t)";", 1LL);
  std::stringbuf::str(&v13, &v17);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &v13;
  }
  else {
    uint64_t v8 = (std::stringbuf::string_type *)v13.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v8, &v14);
  uint64_t v9 = v14;
  uint64_t v14 = 0LL;
  int v10 = (sqlite3_stmt *)sub_100019240(v9);
  sub_1003BB2BC(a1, v10);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)((char *)v15
  uint64_t v16 = v11;
  std::streambuf::~streambuf(&v17);
  return std::ios::~ios(&v18);
}

void sub_100698C24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100698C70(uint64_t a1)
{
  int64x2_t v2 = sub_10000CF44(&v16, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  unint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"OnBehalfBundleId", 16LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" = ", 3LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"''", 2LL);
  sub_10000CF44(v7, (uint64_t)";", 1LL);
  std::stringbuf::str(&v13, &v17);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &v13;
  }
  else {
    uint64_t v8 = (std::stringbuf::string_type *)v13.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v8, &v14);
  uint64_t v9 = v14;
  uint64_t v14 = 0LL;
  int v10 = (sqlite3_stmt *)sub_100019240(v9);
  sub_1003BB2BC(a1, v10);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)((char *)v15
  uint64_t v16 = v11;
  std::streambuf::~streambuf(&v17);
  return std::ios::~ios(&v18);
}

void sub_100698DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100698E38(uint64_t a1)
{
  int64x2_t v2 = sub_10000CF44(&v16, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  unint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)"ReferenceFrame", 14LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)" = ", 3LL);
  uint64_t v7 = (void *)std::ostream::operator<<(v6, 0LL);
  sub_10000CF44(v7, (uint64_t)";", 1LL);
  std::stringbuf::str(&v13, &v17);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &v13;
  }
  else {
    uint64_t v8 = (std::stringbuf::string_type *)v13.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v8, &v14);
  uint64_t v9 = v14;
  uint64_t v14 = 0LL;
  int v10 = (sqlite3_stmt *)sub_100019240(v9);
  sub_1003BB2BC(a1, v10);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)((char *)v15
  uint64_t v16 = v11;
  std::streambuf::~streambuf(&v17);
  return std::ios::~ios(&v18);
}

void sub_100698FAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100698FF8(uint64_t a1)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  int64x2_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Fence: Setting fence keys values for existing fences",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    LOWORD(v14.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Setting fence keys values for existing fences",  &v14,  2);
    std::stringbuf::string_type v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceDatabase::setUniqueKeysToFenceForeignKeyColumn()", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  sub_10000CE18((uint64_t)buf);
  int64x2_t v3 = sub_10000CF44(&v17, (uint64_t)"UPDATE ", 7LL);
  unint64_t v4 = sub_10000CF44(v3, (uint64_t)"GeoFence", 8LL);
  unint64_t v5 = sub_10000CF44(v4, (uint64_t)" SET ", 5LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)"FenceForeignKey", 15LL);
  sub_10000CF44(v6, (uint64_t)" = rowid", 8LL);
  std::stringbuf::str(&v14, &v18);
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = &v14;
  }
  else {
    uint64_t v7 = (std::stringbuf::string_type *)v14.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v7, &v15);
  uint64_t v8 = v15;
  uint64_t v15 = 0LL;
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(v8);
  sub_1003BB2BC(a1, v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v17 = v10;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_1006992B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10069930C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)a2 = a2 + 8;
  sub_1010DDBC0(v24, "Fences");
  sub_1010DDBC0(v22, "MonitorFlags");
  char v4 = sub_1006988C4(a1, (const char *)v24, (uint64_t *)v22);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if ((v4 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else if ((v4 & 1) != 0)
  {
    goto LABEL_9;
  }

  sub_1010DDBC0(v20, "MonitorFlags");
  sub_1003F9748((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_9:
  sub_1010DDBC0(v18, "Fences");
  sub_1010DDBC0(__p, "ReferenceFrame");
  char v5 = sub_1006988C4(a1, (const char *)v18, (uint64_t *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if ((v5 & 1) != 0) {
      goto LABEL_17;
    }
  }

  else if ((v5 & 1) != 0)
  {
    goto LABEL_17;
  }

  sub_1010DDBC0(v20, "ReferenceFrame");
  sub_1003F9748((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_17:
  sub_1010DDBC0(v14, "Fences");
  sub_1010DDBC0(v12, "OnBehalfBundleId");
  char v6 = sub_1006988C4(a1, (const char *)v14, (uint64_t *)v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if ((v6 & 1) != 0) {
      goto LABEL_25;
    }
  }

  else if ((v6 & 1) != 0)
  {
    goto LABEL_25;
  }

  sub_1010DDBC0(v20, "OnBehalfBundleId");
  sub_1003F9748((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_25:
  sub_1010DDBC0(v10, "Fences");
  sub_1010DDBC0(v8, "FenceForeignKey");
  char v7 = sub_1006988C4(a1, (const char *)v10, (uint64_t *)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if ((v7 & 1) != 0) {
      return;
    }
  }

  else if ((v7 & 1) != 0)
  {
    return;
  }

  sub_1010DDBC0(v20, "FenceForeignKey");
  sub_1003F9748((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
}

void sub_100699588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
}

uint64_t sub_100699684@<X0>(uint64_t a1@<X1>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10008E8D0(a1, (const void **)buf);
  if (v223 < 0) {
    operator delete(*(void **)buf);
  }
  if (a1 + 8 != v4)
  {
    char v5 = sub_10000CF44(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
    char v6 = sub_10000CF44(v5, (uint64_t)"GeoFence", 8LL);
    char v7 = sub_10000CF44(v6, (uint64_t)" (", 2LL);
    uint64_t v8 = sub_10000CF44(v7, (uint64_t)"BundleId", 8LL);
    char v9 = sub_10000CF44(v8, (uint64_t)",", 1LL);
    uint64_t v10 = sub_10000CF44(v9, (uint64_t)"Name", 4LL);
    char v11 = sub_10000CF44(v10, (uint64_t)",", 1LL);
    __int16 v12 = sub_10000CF44(v11, (uint64_t)"Timestamp", 9LL);
    char v13 = sub_10000CF44(v12, (uint64_t)",", 1LL);
    std::stringbuf::string_type v14 = sub_10000CF44(v13, (uint64_t)"Latitude", 8LL);
    char v15 = sub_10000CF44(v14, (uint64_t)",", 1LL);
    uint64_t v16 = sub_10000CF44(v15, (uint64_t)"Longitude", 9LL);
    char v17 = sub_10000CF44(v16, (uint64_t)",", 1LL);
    std::stringbuf v18 = sub_10000CF44(v17, (uint64_t)"Distance", 8LL);
    char v19 = sub_10000CF44(v18, (uint64_t)",", 1LL);
    unint64_t v20 = sub_10000CF44(v19, (uint64_t)"DesiredAccuracy", 15LL);
    char v21 = sub_10000CF44(v20, (uint64_t)",", 1LL);
    uint64_t v22 = sub_10000CF44(v21, (uint64_t)"SetupComplete", 13LL);
    char v23 = sub_10000CF44(v22, (uint64_t)") SELECT ", 9LL);
    __int128 v24 = sub_10000CF44(v23, (uint64_t)"BundleId", 8LL);
    char v25 = sub_10000CF44(v24, (uint64_t)",", 1LL);
    int v26 = sub_10000CF44(v25, (uint64_t)"Name", 4LL);
    uint64_t v27 = sub_10000CF44(v26, (uint64_t)",", 1LL);
    std::stringbuf v28 = sub_10000CF44(v27, (uint64_t)"Timestamp", 9LL);
    uint64_t v29 = sub_10000CF44(v28, (uint64_t)",", 1LL);
    std::string::size_type v30 = sub_10000CF44(v29, (uint64_t)"Latitude", 8LL);
    uint64_t v31 = sub_10000CF44(v30, (uint64_t)",", 1LL);
    std::string::size_type v32 = sub_10000CF44(v31, (uint64_t)"Longitude", 9LL);
    std::string::size_type v33 = sub_10000CF44(v32, (uint64_t)",", 1LL);
    std::stringbuf v34 = sub_10000CF44(v33, (uint64_t)"Distance", 8LL);
    uint64_t v35 = sub_10000CF44(v34, (uint64_t)",", 1LL);
    std::string::size_type v36 = sub_10000CF44(v35, (uint64_t)"DesiredAccuracy", 15LL);
    std::string::size_type v37 = sub_10000CF44(v36, (uint64_t)",", 1LL);
    uint64_t v38 = "SetupComplete";
    uint64_t v39 = 13LL;
    goto LABEL_18;
  }

  sub_1010DDBC0(buf, "ReferenceFrame");
  uint64_t v40 = sub_10008E8D0(a1, (const void **)buf);
  if (v223 < 0) {
    operator delete(*(void **)buf);
  }
  if (v4 != v40)
  {
    std::stringbuf v41 = sub_10000CF44(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
    uint64_t v42 = sub_10000CF44(v41, (uint64_t)"GeoFence", 8LL);
    std::stringbuf::string_type v43 = sub_10000CF44(v42, (uint64_t)" (", 2LL);
    uint64_t v44 = sub_10000CF44(v43, (uint64_t)"BundleId", 8LL);
    uint64_t v45 = sub_10000CF44(v44, (uint64_t)",", 1LL);
    uint64_t v46 = sub_10000CF44(v45, (uint64_t)"Name", 4LL);
    std::string::size_type v47 = sub_10000CF44(v46, (uint64_t)",", 1LL);
    std::string::size_type v48 = sub_10000CF44(v47, (uint64_t)"Timestamp", 9LL);
    uint64_t v49 = sub_10000CF44(v48, (uint64_t)",", 1LL);
    std::string::size_type v50 = sub_10000CF44(v49, (uint64_t)"Latitude", 8LL);
    __int16 v51 = sub_10000CF44(v50, (uint64_t)",", 1LL);
    uint64_t v52 = sub_10000CF44(v51, (uint64_t)"Longitude", 9LL);
    int v53 = sub_10000CF44(v52, (uint64_t)",", 1LL);
    uint64_t v54 = sub_10000CF44(v53, (uint64_t)"Distance", 8LL);
    std::string::size_type v55 = sub_10000CF44(v54, (uint64_t)",", 1LL);
    uint64_t v56 = sub_10000CF44(v55, (uint64_t)"DesiredAccuracy", 15LL);
    uint64_t v57 = sub_10000CF44(v56, (uint64_t)",", 1LL);
    std::string::size_type v58 = sub_10000CF44(v57, (uint64_t)"SetupComplete", 13LL);
    __int128 v59 = sub_10000CF44(v58, (uint64_t)",", 1LL);
    __int16 v60 = sub_10000CF44(v59, (uint64_t)"MonitorFlags", 12LL);
    double v61 = sub_10000CF44(v60, (uint64_t)") SELECT ", 9LL);
    uint64_t v62 = sub_10000CF44(v61, (uint64_t)"BundleId", 8LL);
    uint64_t v63 = sub_10000CF44(v62, (uint64_t)",", 1LL);
    __int16 v64 = sub_10000CF44(v63, (uint64_t)"Name", 4LL);
    __int128 v65 = sub_10000CF44(v64, (uint64_t)",", 1LL);
    __int16 v66 = sub_10000CF44(v65, (uint64_t)"Timestamp", 9LL);
    int v67 = sub_10000CF44(v66, (uint64_t)",", 1LL);
    std::stringbuf::string_type v68 = sub_10000CF44(v67, (uint64_t)"Latitude", 8LL);
    __int128 v69 = sub_10000CF44(v68, (uint64_t)",", 1LL);
    int v70 = sub_10000CF44(v69, (uint64_t)"Longitude", 9LL);
    int v71 = sub_10000CF44(v70, (uint64_t)",", 1LL);
    uint64_t v72 = sub_10000CF44(v71, (uint64_t)"Distance", 8LL);
    __int128 v73 = sub_10000CF44(v72, (uint64_t)",", 1LL);
    int v74 = sub_10000CF44(v73, (uint64_t)"DesiredAccuracy", 15LL);
    __int128 v75 = sub_10000CF44(v74, (uint64_t)",", 1LL);
    int64_t v76 = sub_10000CF44(v75, (uint64_t)"SetupComplete", 13LL);
    std::string::size_type v37 = sub_10000CF44(v76, (uint64_t)",", 1LL);
    uint64_t v38 = "MonitorFlags";
    uint64_t v39 = 12LL;
    goto LABEL_18;
  }

  sub_1010DDBC0(buf, "OnBehalfBundleId");
  uint64_t v77 = sub_10008E8D0(a1, (const void **)buf);
  if (v223 < 0) {
    operator delete(*(void **)buf);
  }
  if (v4 != v77)
  {
    uint64_t v78 = sub_10000CF44(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
    __int128 v79 = sub_10000CF44(v78, (uint64_t)"GeoFence", 8LL);
    uint64_t v80 = sub_10000CF44(v79, (uint64_t)" (", 2LL);
    __int128 v81 = sub_10000CF44(v80, (uint64_t)"BundleId", 8LL);
    uint64_t v82 = sub_10000CF44(v81, (uint64_t)",", 1LL);
    __int128 v83 = sub_10000CF44(v82, (uint64_t)"Name", 4LL);
    uint64_t v84 = sub_10000CF44(v83, (uint64_t)",", 1LL);
    __int128 v85 = sub_10000CF44(v84, (uint64_t)"Timestamp", 9LL);
    uint64_t v86 = sub_10000CF44(v85, (uint64_t)",", 1LL);
    __int128 v87 = sub_10000CF44(v86, (uint64_t)"Latitude", 8LL);
    unint64_t v88 = sub_10000CF44(v87, (uint64_t)",", 1LL);
    uint64_t v89 = sub_10000CF44(v88, (uint64_t)"Longitude", 9LL);
    __int16 v90 = sub_10000CF44(v89, (uint64_t)",", 1LL);
    unint64_t v91 = sub_10000CF44(v90, (uint64_t)"Distance", 8LL);
    uint64_t v92 = sub_10000CF44(v91, (uint64_t)",", 1LL);
    __int128 v93 = sub_10000CF44(v92, (uint64_t)"DesiredAccuracy", 15LL);
    uint64_t v94 = sub_10000CF44(v93, (uint64_t)",", 1LL);
    __int128 v95 = sub_10000CF44(v94, (uint64_t)"SetupComplete", 13LL);
    uint64_t v96 = sub_10000CF44(v95, (uint64_t)",", 1LL);
    __int128 v97 = sub_10000CF44(v96, (uint64_t)"MonitorFlags", 12LL);
    BOOL v98 = sub_10000CF44(v97, (uint64_t)",", 1LL);
    uint64_t v99 = sub_10000CF44(v98, (uint64_t)"ReferenceFrame", 14LL);
    uint64_t v100 = sub_10000CF44(v99, (uint64_t)") SELECT ", 9LL);
    uint64_t v101 = sub_10000CF44(v100, (uint64_t)"BundleId", 8LL);
    std::string::size_type v102 = sub_10000CF44(v101, (uint64_t)",", 1LL);
    char v103 = sub_10000CF44(v102, (uint64_t)"Name", 4LL);
    unint64_t v104 = sub_10000CF44(v103, (uint64_t)",", 1LL);
    std::string::size_type v105 = sub_10000CF44(v104, (uint64_t)"Timestamp", 9LL);
    uint64_t v106 = sub_10000CF44(v105, (uint64_t)",", 1LL);
    int v107 = sub_10000CF44(v106, (uint64_t)"Latitude", 8LL);
    int v108 = sub_10000CF44(v107, (uint64_t)",", 1LL);
    char v109 = sub_10000CF44(v108, (uint64_t)"Longitude", 9LL);
    double v110 = sub_10000CF44(v109, (uint64_t)",", 1LL);
    uint64_t v111 = sub_10000CF44(v110, (uint64_t)"Distance", 8LL);
    uint64_t v112 = sub_10000CF44(v111, (uint64_t)",", 1LL);
    char v113 = sub_10000CF44(v112, (uint64_t)"DesiredAccuracy", 15LL);
    uint64_t v114 = sub_10000CF44(v113, (uint64_t)",", 1LL);
    char v115 = sub_10000CF44(v114, (uint64_t)"SetupComplete", 13LL);
    char v116 = sub_10000CF44(v115, (uint64_t)",", 1LL);
    char v117 = "MonitorFlags";
    uint64_t v118 = 12LL;
LABEL_17:
    uint64_t v162 = sub_10000CF44(v116, (uint64_t)v117, v118);
    std::string::size_type v37 = sub_10000CF44(v162, (uint64_t)",", 1LL);
    uint64_t v38 = "ReferenceFrame";
    uint64_t v39 = 14LL;
    goto LABEL_18;
  }

  sub_1010DDBC0(buf, "FenceForeignKey");
  uint64_t v119 = sub_10008E8D0(a1, (const void **)buf);
  if (v223 < 0) {
    operator delete(*(void **)buf);
  }
  if (v4 != v119)
  {
    char v120 = sub_10000CF44(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
    BOOL v121 = sub_10000CF44(v120, (uint64_t)"GeoFence", 8LL);
    char v122 = sub_10000CF44(v121, (uint64_t)" (", 2LL);
    std::stringbuf v123 = sub_10000CF44(v122, (uint64_t)"BundleId", 8LL);
    uint64_t v124 = sub_10000CF44(v123, (uint64_t)",", 1LL);
    uint64_t v125 = sub_10000CF44(v124, (uint64_t)"Name", 4LL);
    std::stringbuf v126 = sub_10000CF44(v125, (uint64_t)",", 1LL);
    uint64_t v127 = sub_10000CF44(v126, (uint64_t)"Timestamp", 9LL);
    std::string::size_type v128 = sub_10000CF44(v127, (uint64_t)",", 1LL);
    __int16 v129 = sub_10000CF44(v128, (uint64_t)"Latitude", 8LL);
    int v130 = sub_10000CF44(v129, (uint64_t)",", 1LL);
    char v131 = sub_10000CF44(v130, (uint64_t)"Longitude", 9LL);
    char v132 = sub_10000CF44(v131, (uint64_t)",", 1LL);
    __int16 v133 = sub_10000CF44(v132, (uint64_t)"Distance", 8LL);
    int v134 = sub_10000CF44(v133, (uint64_t)",", 1LL);
    char v135 = sub_10000CF44(v134, (uint64_t)"DesiredAccuracy", 15LL);
    double v136 = sub_10000CF44(v135, (uint64_t)",", 1LL);
    char v137 = sub_10000CF44(v136, (uint64_t)"SetupComplete", 13LL);
    sqlite3_int64 v138 = sub_10000CF44(v137, (uint64_t)",", 1LL);
    char v139 = sub_10000CF44(v138, (uint64_t)"MonitorFlags", 12LL);
    double v140 = sub_10000CF44(v139, (uint64_t)",", 1LL);
    double v141 = sub_10000CF44(v140, (uint64_t)"OnBehalfBundleId", 16LL);
    sqlite3_int64 v142 = sub_10000CF44(v141, (uint64_t)",", 1LL);
    int v143 = sub_10000CF44(v142, (uint64_t)"ReferenceFrame", 14LL);
    int v144 = sub_10000CF44(v143, (uint64_t)") SELECT ", 9LL);
    std::stringbuf::string_type v145 = sub_10000CF44(v144, (uint64_t)"BundleId", 8LL);
    char v146 = sub_10000CF44(v145, (uint64_t)",", 1LL);
    id v147 = sub_10000CF44(v146, (uint64_t)"Name", 4LL);
    uint64_t v148 = sub_10000CF44(v147, (uint64_t)",", 1LL);
    std::stringbuf::string_type v149 = sub_10000CF44(v148, (uint64_t)"Timestamp", 9LL);
    BOOL v150 = sub_10000CF44(v149, (uint64_t)",", 1LL);
    unint64_t v151 = sub_10000CF44(v150, (uint64_t)"Latitude", 8LL);
    int v152 = sub_10000CF44(v151, (uint64_t)",", 1LL);
    int v153 = sub_10000CF44(v152, (uint64_t)"Longitude", 9LL);
    __int128 v154 = sub_10000CF44(v153, (uint64_t)",", 1LL);
    __int128 v155 = sub_10000CF44(v154, (uint64_t)"Distance", 8LL);
    int v156 = sub_10000CF44(v155, (uint64_t)",", 1LL);
    unint64_t v157 = sub_10000CF44(v156, (uint64_t)"DesiredAccuracy", 15LL);
    std::string::size_type v158 = sub_10000CF44(v157, (uint64_t)",", 1LL);
    std::string::size_type v159 = sub_10000CF44(v158, (uint64_t)"SetupComplete", 13LL);
    std::string::size_type v160 = sub_10000CF44(v159, (uint64_t)",", 1LL);
    unsigned int v161 = sub_10000CF44(v160, (uint64_t)"MonitorFlags", 12LL);
    char v116 = sub_10000CF44(v161, (uint64_t)",", 1LL);
    char v117 = "OnBehalfBundleId";
    uint64_t v118 = 16LL;
    goto LABEL_17;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  char v167 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)std::stringbuf::string_type buf = 68289026LL;
    __int16 v221 = 2082;
    std::string v222 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Fence: #migration contains FenceForeignKey}",  buf,  0x12u);
  }

  double v168 = sub_10000CF44(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
  char v169 = sub_10000CF44(v168, (uint64_t)"GeoFence", 8LL);
  int v170 = sub_10000CF44(v169, (uint64_t)" (", 2LL);
  char v171 = sub_10000CF44(v170, (uint64_t)"BundleId", 8LL);
  int v172 = sub_10000CF44(v171, (uint64_t)",", 1LL);
  char v173 = sub_10000CF44(v172, (uint64_t)"Name", 4LL);
  std::string v174 = sub_10000CF44(v173, (uint64_t)",", 1LL);
  __int16 v175 = sub_10000CF44(v174, (uint64_t)"Timestamp", 9LL);
  char v176 = sub_10000CF44(v175, (uint64_t)",", 1LL);
  __int16 v177 = sub_10000CF44(v176, (uint64_t)"Latitude", 8LL);
  char v178 = sub_10000CF44(v177, (uint64_t)",", 1LL);
  unsigned int v179 = sub_10000CF44(v178, (uint64_t)"Longitude", 9LL);
  char v180 = sub_10000CF44(v179, (uint64_t)",", 1LL);
  uint64_t v181 = sub_10000CF44(v180, (uint64_t)"Distance", 8LL);
  char v182 = sub_10000CF44(v181, (uint64_t)",", 1LL);
  uint64_t v183 = sub_10000CF44(v182, (uint64_t)"DesiredAccuracy", 15LL);
  char v184 = sub_10000CF44(v183, (uint64_t)",", 1LL);
  uint64_t v185 = sub_10000CF44(v184, (uint64_t)"SetupComplete", 13LL);
  char v186 = sub_10000CF44(v185, (uint64_t)",", 1LL);
  std::string::size_type v187 = sub_10000CF44(v186, (uint64_t)"MonitorFlags", 12LL);
  char v188 = sub_10000CF44(v187, (uint64_t)",", 1LL);
  uint64_t v189 = sub_10000CF44(v188, (uint64_t)"OnBehalfBundleId", 16LL);
  char v190 = sub_10000CF44(v189, (uint64_t)",", 1LL);
  __int128 v191 = sub_10000CF44(v190, (uint64_t)"ReferenceFrame", 14LL);
  char v192 = sub_10000CF44(v191, (uint64_t)",", 1LL);
  __int128 v193 = sub_10000CF44(v192, (uint64_t)"FenceForeignKey", 15LL);
  char v194 = sub_10000CF44(v193, (uint64_t)") SELECT ", 9LL);
  __int128 v195 = sub_10000CF44(v194, (uint64_t)"BundleId", 8LL);
  char v196 = sub_10000CF44(v195, (uint64_t)",", 1LL);
  char v197 = sub_10000CF44(v196, (uint64_t)"Name", 4LL);
  char v198 = sub_10000CF44(v197, (uint64_t)",", 1LL);
  v199 = sub_10000CF44(v198, (uint64_t)"Timestamp", 9LL);
  char v200 = sub_10000CF44(v199, (uint64_t)",", 1LL);
  unint64_t v201 = sub_10000CF44(v200, (uint64_t)"Latitude", 8LL);
  char v202 = sub_10000CF44(v201, (uint64_t)",", 1LL);
  uint64_t v203 = sub_10000CF44(v202, (uint64_t)"Longitude", 9LL);
  char v204 = sub_10000CF44(v203, (uint64_t)",", 1LL);
  __int128 v205 = sub_10000CF44(v204, (uint64_t)"Distance", 8LL);
  char v206 = sub_10000CF44(v205, (uint64_t)",", 1LL);
  __int128 v207 = sub_10000CF44(v206, (uint64_t)"DesiredAccuracy", 15LL);
  char v208 = sub_10000CF44(v207, (uint64_t)",", 1LL);
  int v209 = sub_10000CF44(v208, (uint64_t)"SetupComplete", 13LL);
  char v210 = sub_10000CF44(v209, (uint64_t)",", 1LL);
  uint64_t v211 = sub_10000CF44(v210, (uint64_t)"MonitorFlags", 12LL);
  char v212 = sub_10000CF44(v211, (uint64_t)",", 1LL);
  int v213 = sub_10000CF44(v212, (uint64_t)"OnBehalfBundleId", 16LL);
  char v214 = sub_10000CF44(v213, (uint64_t)",", 1LL);
  int v215 = sub_10000CF44(v214, (uint64_t)"ReferenceFrame", 14LL);
  std::string::size_type v37 = sub_10000CF44(v215, (uint64_t)",", 1LL);
  uint64_t v38 = "FenceForeignKey";
  uint64_t v39 = 15LL;
LABEL_18:
  unsigned int v163 = sub_10000CF44(v37, (uint64_t)v38, v39);
  uint64_t v164 = sub_10000CF44(v163, (uint64_t)" FROM ", 6LL);
  sub_10000CF44(v164, (uint64_t)"Fences", 6LL);
  std::stringbuf::str(a2, &v218);
  *(void *)((char *)v216
  uint64_t v217 = v165;
  std::streambuf::~streambuf(&v218);
  return std::ios::~ios(&v219);
}

void sub_10069A614(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10069A664(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v14, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"FenceIndex", 10LL);
  sub_10000CF44(v5, (uint64_t)" = rowid", 8LL);
  std::stringbuf::str(&v11, &v15);
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v6 = &v11;
  }
  else {
    char v6 = (std::stringbuf::string_type *)v11.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v6, &v12);
  uint64_t v7 = v12;
  uint64_t v12 = 0LL;
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(v7);
  sub_1003BB2BC(a1, v8);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)((char *)v13
  uint64_t v14 = v9;
  std::streambuf::~streambuf(&v15);
  return std::ios::~ios(&v16);
}

void sub_10069A7C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10069A80C(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v17, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"HandoffTag", 10LL);
  sub_10000CF44(v5, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v20, &v18);
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v6 = &v20;
  }
  else {
    char v6 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v6, &v15);
  uint64_t v7 = v15;
  uint64_t v15 = 0LL;
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(v7);
  if (sub_1003BC1F0(v8, 1, "''"))
  {
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(a1, v9);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v10 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v20.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Fence: Unable to bind default handoff tag",  (uint8_t *)&v20,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v20, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v20,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Unable to bind default handoff tag",  &v15,  2);
      uint64_t v14 = (std::stringbuf::string_type *)v13;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLFenceDatabase::initHandoffTag()", "%s\n", v13);
      if (v14 != &v20) {
        free(v14);
      }
    }
  }

  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)((char *)v16
  uint64_t v17 = v11;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10069AAEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10069AB44(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10000CF44(&v19, (uint64_t)"UPDATE ", 7LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"GeoFence", 8LL);
  char v6 = sub_10000CF44(v5, (uint64_t)" SET ", 5LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"HandoffFenceEnablementStatus", 28LL);
  sub_10000CF44(v7, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v22, &v20);
  if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &v22;
  }
  else {
    uint64_t v8 = (std::stringbuf::string_type *)v22.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v8, &v17);
  uint64_t v9 = v17;
  uint64_t v17 = 0LL;
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(v9);
  if (sub_1003C28BC(v10, 1, a2))
  {
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003BB2BC(a1, v11);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v12 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v22.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Fence: Unable to bind default enablement status",  (uint8_t *)&v22,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v22, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v22,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Unable to bind default enablement status",  &v17,  2);
      uint64_t v16 = (std::stringbuf::string_type *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceDatabase::setFenceEnablementStatus(CLFenceHandoffManager_Type::FenceHandoffEnablementStatus)",  "%s\n",  v15);
      if (v16 != &v22) {
        free(v16);
      }
    }
  }

  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)((char *)v18
  uint64_t v19 = v13;
  std::streambuf::~streambuf(&v20);
  return std::ios::~ios(&v21);
}

void sub_10069AE24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10069AE7C(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v17, (uint64_t)"UPDATE ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" SET ", 5LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"DeviceIdIndex", 13LL);
  sub_10000CF44(v5, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v20, &v18);
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v6 = &v20;
  }
  else {
    char v6 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v6, &v15);
  uint64_t v7 = v15;
  uint64_t v15 = 0LL;
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(v7);
  if (sub_1003C2D24(v8, 1, -1LL))
  {
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(a1, v9);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v10 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v20.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Fence: Unable to bind default deviceId index",  (uint8_t *)&v20,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v20, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v20,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Unable to bind default deviceId index",  &v15,  2);
      uint64_t v14 = (std::stringbuf::string_type *)v13;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLFenceDatabase::initDeviceIdIndex()", "%s\n", v13);
      if (v14 != &v20) {
        free(v14);
      }
    }
  }

  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)((char *)v16
  uint64_t v17 = v11;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10069B158( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10069B1B0(uint64_t a1)
{
  uint64_t v2 = sub_10000CF44(&v33, (uint64_t)"SELECT ", 7LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"Latitude", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)",", 1LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"Longitude", 9LL);
  char v6 = sub_10000CF44(v5, (uint64_t)",", 1LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v8 = sub_10000CF44(v7, (uint64_t)" FROM ", 6LL);
  sub_10000CF44(v8, (uint64_t)"GeoFences", 9LL);
  std::stringbuf::str(&v36, &v34);
  if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v9 = &v36;
  }
  else {
    uint64_t v9 = (std::stringbuf::string_type *)v36.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v9, &v31);
  uint64_t v10 = v31;
  uint64_t v31 = 0LL;
  uint64_t v11 = (sqlite3_stmt *)sub_100019240(v10);
  int v12 = sqlite3_step(v11);
  if ((v12 - 102) < 0xFFFFFFFE)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    uint64_t v13 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't migrate centroids from database",  (uint8_t *)&v36,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v36, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v36,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't migrate centroids from database",  &v31,  2);
      std::stringbuf v28 = (std::stringbuf::string_type *)v27;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLFenceDatabase::migrateFenceCentroids()", "%s\n", v27);
      if (v28 != &v36) {
        free(v28);
      }
    }

    uint64_t v14 = (sqlite3_stmt *)sub_100019240(v10);
    sqlite3_reset(v14);
    goto LABEL_23;
  }

  while (v12 == 100)
  {
    uint64_t v15 = (sqlite3_stmt *)sub_100019240(v10);
    double v16 = sqlite3_column_double(v15, 0);
    uint64_t v17 = (sqlite3_stmt *)sub_100019240(v10);
    double v18 = sqlite3_column_double(v17, 1);
    uint64_t v19 = (sqlite3_stmt *)sub_100019240(v10);
    int v20 = sqlite3_column_int(v19, 2);
    sub_1003D7F38(a1 + 272, v20, v16, v18);
    uint64_t v21 = (sqlite3_stmt *)sub_100019240(v10);
    int v12 = sqlite3_step(v21);
  }

  std::stringbuf::string_type v22 = (sqlite3_stmt *)sub_100019240(v10);
  sqlite3_reset(v22);
  if (v12 != 101)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    __int128 v24 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "Fence: Error in retrieving fences from database",  (uint8_t *)&v36,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v36, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101848AA8);
      }
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v36,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Error in retrieving fences from database",  &v31,  2);
      std::string::size_type v30 = (std::stringbuf::string_type *)v29;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLFenceDatabase::migrateFenceCentroids()", "%s\n", v29);
      if (v30 != &v36) {
        free(v30);
      }
    }

void sub_10069B6A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10069B704@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  uint64_t v2 = sub_10000CF44(&v48, (uint64_t)"INSERT OR IGNORE INTO ", 22LL);
  int64x2_t v3 = sub_10000CF44(v2, (uint64_t)"GeoFence", 8LL);
  uint64_t v4 = sub_10000CF44(v3, (uint64_t)" (", 2LL);
  char v5 = sub_10000CF44(v4, (uint64_t)"BundleId", 8LL);
  char v6 = sub_10000CF44(v5, (uint64_t)",", 1LL);
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)"Name", 4LL);
  uint64_t v8 = sub_10000CF44(v7, (uint64_t)",", 1LL);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)"Timestamp", 9LL);
  uint64_t v10 = sub_10000CF44(v9, (uint64_t)",", 1LL);
  uint64_t v11 = sub_10000CF44(v10, (uint64_t)"Distance", 8LL);
  int v12 = sub_10000CF44(v11, (uint64_t)",", 1LL);
  uint64_t v13 = sub_10000CF44(v12, (uint64_t)"DesiredAccuracy", 15LL);
  uint64_t v14 = sub_10000CF44(v13, (uint64_t)",", 1LL);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)"SetupComplete", 13LL);
  double v16 = sub_10000CF44(v15, (uint64_t)",", 1LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)"MonitorFlags", 12LL);
  double v18 = sub_10000CF44(v17, (uint64_t)",", 1LL);
  uint64_t v19 = sub_10000CF44(v18, (uint64_t)"OnBehalfBundleId", 16LL);
  int v20 = sub_10000CF44(v19, (uint64_t)",", 1LL);
  uint64_t v21 = sub_10000CF44(v20, (uint64_t)"ReferenceFrame", 14LL);
  std::stringbuf::string_type v22 = sub_10000CF44(v21, (uint64_t)",", 1LL);
  uint64_t v23 = sub_10000CF44(v22, (uint64_t)"FenceForeignKey", 15LL);
  __int128 v24 = sub_10000CF44(v23, (uint64_t)") SELECT ", 9LL);
  uint64_t v25 = sub_10000CF44(v24, (uint64_t)"BundleId", 8LL);
  int v26 = sub_10000CF44(v25, (uint64_t)",", 1LL);
  uint64_t v27 = sub_10000CF44(v26, (uint64_t)"Name", 4LL);
  std::stringbuf v28 = sub_10000CF44(v27, (uint64_t)",", 1LL);
  uint64_t v29 = sub_10000CF44(v28, (uint64_t)"Timestamp", 9LL);
  std::string::size_type v30 = sub_10000CF44(v29, (uint64_t)",", 1LL);
  uint64_t v31 = sub_10000CF44(v30, (uint64_t)"Distance", 8LL);
  std::string::size_type v32 = sub_10000CF44(v31, (uint64_t)",", 1LL);
  uint64_t v33 = sub_10000CF44(v32, (uint64_t)"DesiredAccuracy", 15LL);
  std::stringbuf v34 = sub_10000CF44(v33, (uint64_t)",", 1LL);
  uint64_t v35 = sub_10000CF44(v34, (uint64_t)"SetupComplete", 13LL);
  std::stringbuf::string_type v36 = sub_10000CF44(v35, (uint64_t)",", 1LL);
  std::string::size_type v37 = sub_10000CF44(v36, (uint64_t)"MonitorFlags", 12LL);
  uint64_t v38 = sub_10000CF44(v37, (uint64_t)",", 1LL);
  uint64_t v39 = sub_10000CF44(v38, (uint64_t)"OnBehalfBundleId", 16LL);
  uint64_t v40 = sub_10000CF44(v39, (uint64_t)",", 1LL);
  std::stringbuf v41 = sub_10000CF44(v40, (uint64_t)"ReferenceFrame", 14LL);
  uint64_t v42 = sub_10000CF44(v41, (uint64_t)",", 1LL);
  std::stringbuf::string_type v43 = sub_10000CF44(v42, (uint64_t)"FenceForeignKey", 15LL);
  uint64_t v44 = sub_10000CF44(v43, (uint64_t)" FROM ", 6LL);
  sub_10000CF44(v44, (uint64_t)"GeoFences", 9LL);
  std::stringbuf::str(a1, &v49);
  *(void *)((char *)v47
  uint64_t v48 = v45;
  std::streambuf::~streambuf(&v49);
  return std::ios::~ios(&v50);
}

void sub_10069BA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10069BA84(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10069BAB0(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

  ;
}

BOOL sub_10069BAE8()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2168), OS_LOG_TYPE_INFO);
}

uint64_t sub_10069BAF8(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_10130D800;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = a1 + 56;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0x403E000000000000LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0x40F5180000000000LL;
  sub_10069BD98(a1);
  sub_1002F0B04(buf);
  double v2 = *(double *)(a1 + 88);
  int v3 = sub_1002A82BC(*(uint64_t *)&buf[0], "LCStatsSubmitMetricsThrSec", v14);
  double v4 = *(double *)v14;
  if (!v3) {
    double v4 = v2;
  }
  *(double *)(a1 + 80) = v4;
  char v5 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    char v6 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101848B98);
  }
  uint64_t v8 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,fMetricsCollectionDuration,%{public}f",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    *(_DWORD *)uint64_t v14 = 134349056;
    *(void *)&_DWORD v14[4] = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,fMetricsCollectionDuration,%{public}f",  v14,  12);
    uint64_t v13 = (char *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "cllcf::CLLCFusionStats::CLLCFusionStats()", "%s\n", v12);
  }

  return a1;
}

void sub_10069BD68(_Unwind_Exception *a1)
{
}

void sub_10069BD98(uint64_t a1)
{
  *(double *)(a1 + 72) = sub_101171D4C();
}

void sub_10069BE20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069BE30(uint64_t a1)
{
  double v2 = sub_101171D4C();
  double v3 = v2;
  if (*(_DWORD *)(a1 + 24) == 4 && v2 - *(double *)(a1 + 32) > 900.0)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    double v4 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      int v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,reverting visit exit likely context to,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v15 = *(_DWORD *)(a1 + 28);
      v19[0] = 67240192;
      v19[1] = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,reverting visit exit likely context to,%{public}d",  v19,  8);
      uint64_t v17 = (uint8_t *)v16;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::submitMetrics()", "%s\n", v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

  double v6 = *(double *)(a1 + 80);
  if (v3 - *(double *)(a1 + 72) >= v6)
  {
    double v10 = *(double *)(a1 + 88);
    uint64_t v11 = *(void **)(a1 + 48);
    if (v11 != (void *)(a1 + 56))
    {
      do
      {
        sub_10069C1DC(a1, (uint64_t)(v11 + 4), v6 < v10, *((_DWORD *)v11 + 7));
        int v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            int v12 = (void *)*v12;
          }

          while (v12);
        }

        else
        {
          do
          {
            uint64_t v13 = (void *)v11[2];
            BOOL v14 = *v13 == (void)v11;
            uint64_t v11 = v13;
          }

          while (!v14);
        }

        uint64_t v11 = v13;
      }

      while (v13 != (void *)(a1 + 56));
    }

    if (v6 >= v10) {
      sub_10069BD98(a1);
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    unint64_t v7 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#LCFusionStats,submitMetrics,less than threshold time to submit metrics",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      LOWORD(v19[0]) = 0;
      LODWORD(v1_Block_object_dispose(&STACK[0x7E0], 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#LCFusionStats,submitMetrics,less than threshold time to submit metrics",  v19,  v18);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::submitMetrics()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_10069C1D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069C1DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(_BYTE *)a2)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 4);
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    unsigned int v10 = *(_DWORD *)(a2 + 16);
    unsigned int v12 = *(_DWORD *)(a2 + 20);
    unsigned int v13 = v8 + v9 + v11 + v10 + v12;
    if (v13)
    {
      unsigned int v14 = ((double)v9 * 100.0 / (double)v13);
      unsigned int v15 = ((double)v8 * 100.0 / (double)v13);
      unsigned int v16 = ((double)v11 * 100.0 / (double)v13);
      LODWORD(v197) = ((double)v12 * 100.0 / (double)v13);
      HIDWORD(v197) = ((double)v10 * 100.0 / (double)v13);
    }

    else
    {
      uint64_t v197 = 0LL;
      unsigned int v16 = 0;
      unsigned int v15 = 0;
      unsigned int v14 = 0;
    }

    unsigned int v21 = *(_DWORD *)(a2 + 184);
    unsigned int v20 = *(_DWORD *)(a2 + 188);
    unsigned int v23 = *(_DWORD *)(a2 + 192);
    unsigned int v22 = *(_DWORD *)(a2 + 196);
    unsigned int v24 = v20 + v21 + v23 + v22;
    if (v24)
    {
      LODWORD(v196) = ((double)v20 * 100.0 / (double)v24);
      HIDWORD(v196) = ((double)v21 * 100.0 / (double)v24);
      LODWORD(v195) = ((double)v22 * 100.0 / (double)v24);
      HIDWORD(v195) = ((double)v23 * 100.0 / (double)v24);
    }

    else
    {
      uint64_t v195 = 0LL;
      uint64_t v196 = 0LL;
    }

    unsigned int v26 = *(_DWORD *)(a2 + 200);
    unsigned int v25 = *(_DWORD *)(a2 + 204);
    unsigned int v28 = *(_DWORD *)(a2 + 208);
    unsigned int v27 = *(_DWORD *)(a2 + 212);
    unsigned int v29 = v25 + v26 + v28 + v27;
    if (v29)
    {
      LODWORD(v194) = ((double)v25 * 100.0 / (double)v29);
      HIDWORD(v194) = ((double)v26 * 100.0 / (double)v29);
      LODWORD(v193) = ((double)v27 * 100.0 / (double)v29);
      HIDWORD(v193) = ((double)v28 * 100.0 / (double)v29);
    }

    else
    {
      uint64_t v193 = 0LL;
      uint64_t v194 = 0LL;
    }

    uint64_t v31 = *(void *)(a2 + 232);
    uint64_t v30 = *(void *)(a2 + 240);
    v32.i64[0] = v30;
    v32.i64[1] = v31;
    unsigned int v33 = vaddvq_s32(v32);
    if (v33)
    {
      v34.i64[0] = v31;
      v34.i64[1] = HIDWORD(v31);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      float64x2_t v36 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
      int32x2_t v37 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v34), v35), v36)));
      v34.i64[0] = v30;
      v34.i64[1] = HIDWORD(v30);
      int32x2_t v191 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v34), v35), v36)));
      int32x2_t v192 = v37;
    }

    else
    {
      int32x2_t v191 = 0LL;
      int32x2_t v192 = 0LL;
    }

    uint64_t v39 = *(void *)(a2 + 248);
    uint64_t v38 = *(void *)(a2 + 256);
    v40.i64[0] = v38;
    v40.i64[1] = v39;
    unsigned int v41 = vaddvq_s32(v40);
    if (v41)
    {
      v42.i64[0] = v39;
      v42.i64[1] = HIDWORD(v39);
      float64x2_t v43 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      float64x2_t v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41), 0);
      int32x2_t v45 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v42), v43), v44)));
      v42.i64[0] = v38;
      v42.i64[1] = HIDWORD(v38);
      int32x2_t v189 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v42), v43), v44)));
      int32x2_t v190 = v45;
    }

    else
    {
      int32x2_t v189 = 0LL;
      int32x2_t v190 = 0LL;
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v46 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = *(_DWORD *)(a2 + 144);
      int v47 = *(_DWORD *)(a2 + 148);
      int v49 = *(_DWORD *)(a2 + 152);
      int v50 = *(_DWORD *)(a2 + 156);
      int v52 = *(_DWORD *)(a2 + 136);
      int v51 = *(_DWORD *)(a2 + 140);
      int v53 = *(_DWORD *)(a2 + 120);
      int v54 = *(_DWORD *)(a2 + 124);
      int v55 = *(_DWORD *)(a2 + 128);
      int v56 = *(_DWORD *)(a2 + 132);
      int v58 = *(_DWORD *)(a2 + 60);
      int v57 = *(_DWORD *)(a2 + 64);
      int v59 = *(_DWORD *)(a2 + 48);
      int v60 = *(_DWORD *)(a2 + 52);
      int v61 = *(_DWORD *)(a2 + 56);
      int v62 = *(_DWORD *)(a2 + 40);
      unsigned int v63 = *(_DWORD *)(a2 + 44);
      unsigned int v65 = *(_DWORD *)(a2 + 32);
      int v64 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)std::stringbuf::string_type buf = 67245056;
      int v267 = a4;
      __int16 v268 = 1026;
      int v269 = v49;
      __int16 v270 = 1026;
      int v271 = v47;
      __int16 v272 = 1026;
      int v273 = v53;
      __int16 v274 = 1026;
      int v275 = v48;
      __int16 v276 = 1026;
      int v277 = v51;
      __int16 v278 = 1026;
      int v279 = v50;
      __int16 v280 = 1026;
      int v281 = v55;
      __int16 v282 = 1026;
      int v283 = v52;
      __int16 v284 = 1026;
      int v285 = v54;
      __int16 v286 = 1026;
      int v287 = v56;
      __int16 v288 = 1026;
      int v289 = v62;
      __int16 v290 = 1026;
      int v291 = v59;
      __int16 v292 = 1026;
      int v293 = v57;
      __int16 v294 = 1026;
      int v295 = v61;
      __int16 v296 = 1026;
      int v297 = v60;
      __int16 v298 = 1026;
      int v299 = v64;
      __int16 v300 = 1026;
      int v301 = v58;
      __int16 v302 = 1026;
      unsigned int v303 = v63;
      __int16 v304 = 1026;
      unsigned int v305 = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,dynamics mode,loc rejection reason,visitContext,%{public}d,cntDynModeAirborneHighG,%{public}d,cnt DynModeAirborneLowG,%{public}d,cntDynModeGeneralPurpose,%{public}d,cntDynModeGroundVehicleFast,%{public}d,cntDyn ModeGroundVehicleSlow,%{public}d,cntDynModeLsqTest,%{public}d,cntDynModeMovPed,%{public}d,cntDynModeRunning,%{pu blic}d,cntDynModeStationaryKnown,%{public}d,cntDynModeWalking,%{public}d,cntRejReasonDuplicateLocation,%{public} d,cntRejReasonGrossOutlier,%{public}d,cntRejReasonHypothesisSelectionFailed,%{public}d,cntRejReasonInconsistentC ellPosition,%{public}d,cntRejReasonIndoorFavoringWiFiAP,%{public}d,cntRejReasonInvalidLocation,%{public}d,cntRej ReasonLowAccuracyCellOrWiFiPosition,%{public}d,cntRejReasonOldLocation,%{public}d,cntRejReasonOther,%{public}d,",  buf,  0x7Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      unsigned int v188 = v14;
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v115 = *(_DWORD *)(a2 + 144);
      int v114 = *(_DWORD *)(a2 + 148);
      int v116 = *(_DWORD *)(a2 + 152);
      int v117 = *(_DWORD *)(a2 + 156);
      int v119 = *(_DWORD *)(a2 + 136);
      int v118 = *(_DWORD *)(a2 + 140);
      int v120 = *(_DWORD *)(a2 + 120);
      int v121 = *(_DWORD *)(a2 + 124);
      int v122 = *(_DWORD *)(a2 + 128);
      int v123 = *(_DWORD *)(a2 + 132);
      int v125 = *(_DWORD *)(a2 + 60);
      int v124 = *(_DWORD *)(a2 + 64);
      int v126 = *(_DWORD *)(a2 + 48);
      int v127 = *(_DWORD *)(a2 + 52);
      int v128 = *(_DWORD *)(a2 + 56);
      int v129 = *(_DWORD *)(a2 + 40);
      unsigned int v130 = *(_DWORD *)(a2 + 44);
      unsigned int v132 = *(_DWORD *)(a2 + 32);
      int v131 = *(_DWORD *)(a2 + 36);
      int v216 = 67245056;
      int v217 = a4;
      __int16 v218 = 1026;
      int v219 = v116;
      __int16 v220 = 1026;
      int v221 = v114;
      __int16 v222 = 1026;
      int v223 = v120;
      __int16 v224 = 1026;
      int v225 = v115;
      __int16 v226 = 1026;
      int v227 = v118;
      __int16 v228 = 1026;
      int v229 = v117;
      __int16 v230 = 1026;
      int v231 = v122;
      __int16 v232 = 1026;
      int v233 = v119;
      __int16 v234 = 1026;
      int v235 = v121;
      __int16 v236 = 1026;
      int v237 = v123;
      __int16 v238 = 1026;
      int v239 = v129;
      __int16 v240 = 1026;
      int v241 = v126;
      __int16 v242 = 1026;
      int v243 = v124;
      __int16 v244 = 1026;
      int v245 = v128;
      __int16 v246 = 1026;
      int v247 = v127;
      __int16 v248 = 1026;
      int v249 = v131;
      __int16 v250 = 1026;
      int v251 = v125;
      __int16 v252 = 1026;
      unsigned int v253 = v130;
      __int16 v254 = 1026;
      unsigned int v255 = v132;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,dynamics mode,loc rejection reason,visitContext,%{public}d,cntDynModeAirborneHighG,%{public}d,cnt DynModeAirborneLowG,%{public}d,cntDynModeGeneralPurpose,%{public}d,cntDynModeGroundVehicleFast,%{public}d,cntDyn ModeGroundVehicleSlow,%{public}d,cntDynModeLsqTest,%{public}d,cntDynModeMovPed,%{public}d,cntDynModeRunning,%{pu blic}d,cntDynModeStationaryKnown,%{public}d,cntDynModeWalking,%{public}d,cntRejReasonDuplicateLocation,%{public} d,cntRejReasonGrossOutlier,%{public}d,cntRejReasonHypothesisSelectionFailed,%{public}d,cntRejReasonInconsistentC ellPosition,%{public}d,cntRejReasonIndoorFavoringWiFiAP,%{public}d,cntRejReasonInvalidLocation,%{public}d,cntRej ReasonLowAccuracyCellOrWiFiPosition,%{public}d,cntRejReasonOldLocation,%{public}d,cntRejReasonOther,%{public}d,",  &v216,  122,  qword_101934968);
      int v134 = (uint8_t *)v133;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v133);
      unsigned int v14 = v188;
      if (v134 != buf) {
        free(v134);
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    __int16 v66 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v67 = *(_DWORD *)(a2 + 168);
      int v68 = *(_DWORD *)(a2 + 172);
      int v69 = *(_DWORD *)(a2 + 176);
      int v70 = *(_DWORD *)(a2 + 180);
      int v72 = *(_DWORD *)(a2 + 72);
      int v71 = *(_DWORD *)(a2 + 76);
      int v73 = *(_DWORD *)(a2 + 160);
      int v74 = *(_DWORD *)(a2 + 164);
      int v75 = *(_DWORD *)(a2 + 68);
      int v76 = *(_DWORD *)(a2 + 24);
      int v77 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)std::stringbuf::string_type buf = 67246336;
      int v267 = a4;
      __int16 v268 = 1026;
      int v269 = v73;
      __int16 v270 = 1026;
      int v271 = v75;
      __int16 v272 = 1026;
      int v273 = v67;
      __int16 v274 = 1026;
      int v275 = v68;
      __int16 v276 = 1026;
      int v277 = v69;
      __int16 v278 = 1026;
      int v279 = v70;
      __int16 v280 = 1026;
      int v281 = v71;
      __int16 v282 = 1026;
      int v283 = v74;
      __int16 v284 = 1026;
      int v285 = v72;
      __int16 v286 = 1026;
      int v287 = v77;
      __int16 v288 = 1026;
      int v289 = v76;
      __int16 v290 = 1026;
      int v291 = HIDWORD(v196);
      __int16 v292 = 1026;
      int v293 = v196;
      __int16 v294 = 1026;
      int v295 = HIDWORD(v195);
      __int16 v296 = 1026;
      int v297 = v195;
      __int16 v298 = 1026;
      int v299 = v197;
      __int16 v300 = 1026;
      int v301 = HIDWORD(v197);
      __int16 v302 = 1026;
      unsigned int v303 = v16;
      __int16 v304 = 1026;
      unsigned int v305 = v15;
      __int16 v306 = 1026;
      unsigned int v307 = v14;
      __int16 v308 = 1026;
      int v309 = HIDWORD(v194);
      __int16 v310 = 1026;
      int v311 = v194;
      __int16 v312 = 1026;
      int v313 = HIDWORD(v193);
      __int16 v314 = 1026;
      int v315 = v193;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,hypothesis,visitContext,%{public}d,cntGPSFuserDistanceGT500m,%{public}d,cntGPSIsYieldingButNotSel ected,%{public}d,cntHypoDistanceLT50m,%{public}d,cntHypoDistanceGT50mLT100m,%{public}d,cntHypoDistanceGT100mLT20 0m,%{public}d,cntHypoDistanceGT200m,%{public}d,cntHypoCreated,%{public}d,cntWiFiFuserDistanceGT500m,%{public}d,c ntLikelihoodOutlierRej,%{public}d,maxEuclideanDistBtwnActiveHypo,%{public}d,maxMDistBtwnActiveHypo,%{public}d,pc tGPSFuserDistLT50m,%{public}d,pctGPSFuserDistGT50mLT100m,%{public}d,pctGPSFuserDistGT100mLT200m,%{public}d,pctGP SFuserDistGT200m,%{public}d,pctFixesWithMoreThanFourHypoActive,%{public}d,pctFixesWithFourHypoActive,%{public}d, pctFixesWithThreeHypoActive,%{public}d,pctFixesWithTwoHypoActive,%{public}d,pctFixesWithOneHypoActive,%{public}d ,pctWiFiFuserDistLT50m,%{public}d,pctWiFiFuserDistGT50mLT100m,%{public}d,pctWiFiFuserDistGT100mLT200m,%{public}d ,pctWiFiFuserDistGT200m,%{public}d,",  buf,  0x98u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v135 = *(_DWORD *)(a2 + 168);
      int v136 = *(_DWORD *)(a2 + 172);
      int v137 = *(_DWORD *)(a2 + 176);
      int v138 = *(_DWORD *)(a2 + 180);
      int v140 = *(_DWORD *)(a2 + 72);
      int v139 = *(_DWORD *)(a2 + 76);
      int v141 = *(_DWORD *)(a2 + 160);
      int v142 = *(_DWORD *)(a2 + 164);
      int v143 = *(_DWORD *)(a2 + 68);
      int v144 = *(_DWORD *)(a2 + 24);
      int v145 = *(_DWORD *)(a2 + 28);
      int v216 = 67246336;
      int v217 = a4;
      __int16 v218 = 1026;
      int v219 = v141;
      __int16 v220 = 1026;
      int v221 = v143;
      __int16 v222 = 1026;
      int v223 = v135;
      __int16 v224 = 1026;
      int v225 = v136;
      __int16 v226 = 1026;
      int v227 = v137;
      __int16 v228 = 1026;
      int v229 = v138;
      __int16 v230 = 1026;
      int v231 = v139;
      __int16 v232 = 1026;
      int v233 = v142;
      __int16 v234 = 1026;
      int v235 = v140;
      __int16 v236 = 1026;
      int v237 = v145;
      __int16 v238 = 1026;
      int v239 = v144;
      __int16 v240 = 1026;
      int v241 = HIDWORD(v196);
      __int16 v242 = 1026;
      int v243 = v196;
      __int16 v244 = 1026;
      int v245 = HIDWORD(v195);
      __int16 v246 = 1026;
      int v247 = v195;
      __int16 v248 = 1026;
      int v249 = v197;
      __int16 v250 = 1026;
      int v251 = HIDWORD(v197);
      __int16 v252 = 1026;
      unsigned int v253 = v16;
      __int16 v254 = 1026;
      unsigned int v255 = v15;
      __int16 v256 = 1026;
      unsigned int v257 = v14;
      __int16 v258 = 1026;
      int v259 = HIDWORD(v194);
      __int16 v260 = 1026;
      int v261 = v194;
      __int16 v262 = 1026;
      int v263 = HIDWORD(v193);
      __int16 v264 = 1026;
      int v265 = v193;
      LODWORD(v187) = 152;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,hypothesis,visitContext,%{public}d,cntGPSFuserDistanceGT500m,%{public}d,cntGPSIsYieldingButNotSel ected,%{public}d,cntHypoDistanceLT50m,%{public}d,cntHypoDistanceGT50mLT100m,%{public}d,cntHypoDistanceGT100mLT20 0m,%{public}d,cntHypoDistanceGT200m,%{public}d,cntHypoCreated,%{public}d,cntWiFiFuserDistanceGT500m,%{public}d,c ntLikelihoodOutlierRej,%{public}d,maxEuclideanDistBtwnActiveHypo,%{public}d,maxMDistBtwnActiveHypo,%{public}d,pc tGPSFuserDistLT50m,%{public}d,pctGPSFuserDistGT50mLT100m,%{public}d,pctGPSFuserDistGT100mLT200m,%{public}d,pctGP SFuserDistGT200m,%{public}d,pctFixesWithMoreThanFourHypoActive,%{public}d,pctFixesWithFourHypoActive,%{public}d, pctFixesWithThreeHypoActive,%{public}d,pctFixesWithTwoHypoActive,%{public}d,pctFixesWithOneHypoActive,%{public}d ,pctWiFiFuserDistLT50m,%{public}d,pctWiFiFuserDistGT50mLT100m,%{public}d,pctWiFiFuserDistGT100mLT200m,%{public}d ,pctWiFiFuserDistGT200m,%{public}d,",  &v216,  v187);
      id v147 = (uint8_t *)v146;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v146);
      if (v147 != buf) {
        free(v147);
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v78 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v79 = *(_DWORD *)(a2 + 4);
      int v80 = *(_DWORD *)(a2 + 8);
      int v81 = *(_DWORD *)(a2 + 12);
      int v82 = *(_DWORD *)(a2 + 16);
      int v83 = *(_DWORD *)(a2 + 20);
      int v84 = *(_DWORD *)(a2 + 184);
      int v85 = *(_DWORD *)(a2 + 188);
      int v86 = *(_DWORD *)(a2 + 192);
      int v87 = *(_DWORD *)(a2 + 196);
      int v89 = *(_DWORD *)(a2 + 200);
      int v88 = *(_DWORD *)(a2 + 204);
      int v90 = *(_DWORD *)(a2 + 208);
      int v91 = *(_DWORD *)(a2 + 212);
      *(_DWORD *)std::stringbuf::string_type buf = 67243520;
      int v267 = a4;
      __int16 v268 = 1026;
      int v269 = v79;
      __int16 v270 = 1026;
      int v271 = v80;
      __int16 v272 = 1026;
      int v273 = v81;
      __int16 v274 = 1026;
      int v275 = v82;
      __int16 v276 = 1026;
      int v277 = v83;
      __int16 v278 = 1026;
      int v279 = v84;
      __int16 v280 = 1026;
      int v281 = v85;
      __int16 v282 = 1026;
      int v283 = v86;
      __int16 v284 = 1026;
      int v285 = v87;
      __int16 v286 = 1026;
      int v287 = v89;
      __int16 v288 = 1026;
      int v289 = v88;
      __int16 v290 = 1026;
      int v291 = v90;
      __int16 v292 = 1026;
      int v293 = v91;
      _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,hypotheses count valuesvisitContext,%{public}d,cntFixesWithOneHypothesActive,%{public}d,cntFixesW ithTwoHypothesActive,%{public}d,cntFixesWithThreeHypothesActive,%{public}d,cntFixesWithFourHypothesActive,%{publ ic}d,cntFixesWithMoreThanFourHypothesActive,%{public}d,cntGPSFuserDistanceLT50m,%{public}d,cntGPSFuserDistanceGT 50mLT100m,%{public}d,cntGPSFuserDistanceGT100mLT200m,%{public}d,cntGPSFuserDistanceGT200m,%{public}d,cntWiFiFuse rDistanceLT50m,%{public}d,cntWiFiFuserDistanceGT50mLT100m,%{public}d,cntWiFiFuserDistanceGT100mLT200m,%{public}d ,cntWiFiFuserDistanceGT200m,%{public}d,",  buf,  0x56u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v148 = *(_DWORD *)(a2 + 4);
      int v149 = *(_DWORD *)(a2 + 8);
      int v150 = *(_DWORD *)(a2 + 12);
      int v151 = *(_DWORD *)(a2 + 16);
      int v152 = *(_DWORD *)(a2 + 20);
      int v153 = *(_DWORD *)(a2 + 184);
      int v154 = *(_DWORD *)(a2 + 188);
      int v155 = *(_DWORD *)(a2 + 192);
      int v156 = *(_DWORD *)(a2 + 196);
      int v158 = *(_DWORD *)(a2 + 200);
      int v157 = *(_DWORD *)(a2 + 204);
      int v159 = *(_DWORD *)(a2 + 208);
      int v160 = *(_DWORD *)(a2 + 212);
      int v216 = 67243520;
      int v217 = a4;
      __int16 v218 = 1026;
      int v219 = v148;
      __int16 v220 = 1026;
      int v221 = v149;
      __int16 v222 = 1026;
      int v223 = v150;
      __int16 v224 = 1026;
      int v225 = v151;
      __int16 v226 = 1026;
      int v227 = v152;
      __int16 v228 = 1026;
      int v229 = v153;
      __int16 v230 = 1026;
      int v231 = v154;
      __int16 v232 = 1026;
      int v233 = v155;
      __int16 v234 = 1026;
      int v235 = v156;
      __int16 v236 = 1026;
      int v237 = v158;
      __int16 v238 = 1026;
      int v239 = v157;
      __int16 v240 = 1026;
      int v241 = v159;
      __int16 v242 = 1026;
      int v243 = v160;
      LODWORD(v187) = 86;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,hypotheses count valuesvisitContext,%{public}d,cntFixesWithOneHypothesActive,%{public}d,cntFixesW ithTwoHypothesActive,%{public}d,cntFixesWithThreeHypothesActive,%{public}d,cntFixesWithFourHypothesActive,%{publ ic}d,cntFixesWithMoreThanFourHypothesActive,%{public}d,cntGPSFuserDistanceLT50m,%{public}d,cntGPSFuserDistanceGT 50mLT100m,%{public}d,cntGPSFuserDistanceGT100mLT200m,%{public}d,cntGPSFuserDistanceGT200m,%{public}d,cntWiFiFuse rDistanceLT50m,%{public}d,cntWiFiFuserDistanceGT50mLT100m,%{public}d,cntWiFiFuserDistanceGT100mLT200m,%{public}d ,cntWiFiFuserDistanceGT200m,%{public}d,",  &v216,  v187);
      uint64_t v162 = (uint8_t *)v161;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v161);
      if (v162 != buf) {
        free(v162);
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v92 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v94 = *(_DWORD *)(a2 + 80);
      int v93 = *(_DWORD *)(a2 + 84);
      int v95 = *(_DWORD *)(a2 + 88);
      int v96 = *(_DWORD *)(a2 + 92);
      int v98 = *(_DWORD *)(a2 + 104);
      int v97 = *(_DWORD *)(a2 + 108);
      int v100 = *(_DWORD *)(a2 + 96);
      int v99 = *(_DWORD *)(a2 + 100);
      *(_DWORD *)std::stringbuf::string_type buf = 67242240;
      int v267 = a4;
      __int16 v268 = 1026;
      int v269 = v93;
      __int16 v270 = 1026;
      int v271 = v94;
      __int16 v272 = 1026;
      int v273 = v95;
      __int16 v274 = 1026;
      int v275 = v96;
      __int16 v276 = 1026;
      int v277 = v97;
      __int16 v278 = 1026;
      int v279 = v99;
      __int16 v280 = 1026;
      int v281 = v98;
      __int16 v282 = 1026;
      int v283 = v100;
      _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,io,visitContext,%{public}d,cntBioDispGTExpected,%{public}d,cntBioDispLargeGapInIO,%{public}d,cntI ODerivedMotionSpeedMatchMotionActivity,%{public}d,cntIODerivedMotionSpeedMisMatchMotionActivity,%{public}d,cntIO MotionActivityMovingGroundVehicle,%{public}d,cntIOMotionActivityMovingInPlace,%{public}d,cntIOMotionActivityMovi ngWithPurpose,%{public}d,cntIOMotionActivityStationary,%{public}d,",  buf,  0x38u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v164 = *(_DWORD *)(a2 + 80);
      int v163 = *(_DWORD *)(a2 + 84);
      int v165 = *(_DWORD *)(a2 + 88);
      int v166 = *(_DWORD *)(a2 + 92);
      int v168 = *(_DWORD *)(a2 + 104);
      int v167 = *(_DWORD *)(a2 + 108);
      int v170 = *(_DWORD *)(a2 + 96);
      int v169 = *(_DWORD *)(a2 + 100);
      int v216 = 67242240;
      int v217 = a4;
      __int16 v218 = 1026;
      int v219 = v163;
      __int16 v220 = 1026;
      int v221 = v164;
      __int16 v222 = 1026;
      int v223 = v165;
      __int16 v224 = 1026;
      int v225 = v166;
      __int16 v226 = 1026;
      int v227 = v167;
      __int16 v228 = 1026;
      int v229 = v169;
      __int16 v230 = 1026;
      int v231 = v168;
      __int16 v232 = 1026;
      int v233 = v170;
      LODWORD(v187) = 56;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,io,visitContext,%{public}d,cntBioDispGTExpected,%{public}d,cntBioDispLargeGapInIO,%{public}d,cntI ODerivedMotionSpeedMatchMotionActivity,%{public}d,cntIODerivedMotionSpeedMisMatchMotionActivity,%{public}d,cntIO MotionActivityMovingGroundVehicle,%{public}d,cntIOMotionActivityMovingInPlace,%{public}d,cntIOMotionActivityMovi ngWithPurpose,%{public}d,cntIOMotionActivityStationary,%{public}d,",  &v216,  v187);
      int v172 = (uint8_t *)v171;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v171);
      if (v172 != buf) {
        free(v172);
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v101 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v102 = *(_DWORD *)(a2 + 216);
      int v103 = *(_DWORD *)(a2 + 220);
      int v104 = *(_DWORD *)(a2 + 224);
      int v105 = *(_DWORD *)(a2 + 228);
      int v106 = *(_DWORD *)(a2 + 232);
      int v107 = *(_DWORD *)(a2 + 236);
      int v108 = *(_DWORD *)(a2 + 240);
      int v109 = *(_DWORD *)(a2 + 244);
      int v110 = *(_DWORD *)(a2 + 248);
      int v111 = *(_DWORD *)(a2 + 252);
      int v112 = *(_DWORD *)(a2 + 256);
      int v113 = *(_DWORD *)(a2 + 260);
      *(_DWORD *)std::stringbuf::string_type buf = 67243264;
      int v267 = a4;
      __int16 v268 = 1026;
      int v269 = v102;
      __int16 v270 = 1026;
      int v271 = v103;
      __int16 v272 = 1026;
      int v273 = v104;
      __int16 v274 = 1026;
      int v275 = v105;
      __int16 v276 = 1026;
      int v277 = v106;
      __int16 v278 = 1026;
      int v279 = v107;
      __int16 v280 = 1026;
      int v281 = v108;
      __int16 v282 = 1026;
      int v283 = v109;
      __int16 v284 = 1026;
      int v285 = v110;
      __int16 v286 = 1026;
      int v287 = v111;
      __int16 v288 = 1026;
      int v289 = v112;
      __int16 v290 = 1026;
      int v291 = v113;
      _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,Mahalanobis distances,UncLT50m,visitContext,%{public}d,CountHypoDistLT2Sd,%{public}d,CountHypoDis tGT2SdLT3Sd,%{public}d,CountHypoDistGT3SdLTThresholdSd,%{public}d,CountHypoDistGTThresholdSd,%{public}d,CountGPS FuserDistLT2Sd,%{public}d,CountGPSFuserDistGT2SdLT3Sd,%{public}d,CountGPSFuserDistGT3SdLTThresholdSd,%{public}d, CountGPSFuserDistGTThresholdSd,%{public}d,CountWiFiFuserDistLT2Sd,%{public}d,CountWiFiFuserDistGT2SdLT3Sd,%{publ ic}d,CountWiFiFuserDistGT3SdLTThresholdSd,%{public}d,CountWiFiFuserDistGTThresholdSd,%{public}d,",  buf,  0x50u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v173 = *(_DWORD *)(a2 + 216);
      int v174 = *(_DWORD *)(a2 + 220);
      int v175 = *(_DWORD *)(a2 + 224);
      int v176 = *(_DWORD *)(a2 + 228);
      int v177 = *(_DWORD *)(a2 + 232);
      int v178 = *(_DWORD *)(a2 + 236);
      int v179 = *(_DWORD *)(a2 + 240);
      int v180 = *(_DWORD *)(a2 + 244);
      int v181 = *(_DWORD *)(a2 + 248);
      int v182 = *(_DWORD *)(a2 + 252);
      int v183 = *(_DWORD *)(a2 + 256);
      int v184 = *(_DWORD *)(a2 + 260);
      int v216 = 67243264;
      int v217 = a4;
      __int16 v218 = 1026;
      int v219 = v173;
      __int16 v220 = 1026;
      int v221 = v174;
      __int16 v222 = 1026;
      int v223 = v175;
      __int16 v224 = 1026;
      int v225 = v176;
      __int16 v226 = 1026;
      int v227 = v177;
      __int16 v228 = 1026;
      int v229 = v178;
      __int16 v230 = 1026;
      int v231 = v179;
      __int16 v232 = 1026;
      int v233 = v180;
      __int16 v234 = 1026;
      int v235 = v181;
      __int16 v236 = 1026;
      int v237 = v182;
      __int16 v238 = 1026;
      int v239 = v183;
      __int16 v240 = 1026;
      int v241 = v184;
      LODWORD(v187) = 80;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,Mahalanobis distances,UncLT50m,visitContext,%{public}d,CountHypoDistLT2Sd,%{public}d,CountHypoDis tGT2SdLT3Sd,%{public}d,CountHypoDistGT3SdLTThresholdSd,%{public}d,CountHypoDistGTThresholdSd,%{public}d,CountGPS FuserDistLT2Sd,%{public}d,CountGPSFuserDistGT2SdLT3Sd,%{public}d,CountGPSFuserDistGT3SdLTThresholdSd,%{public}d, CountGPSFuserDistGTThresholdSd,%{public}d,CountWiFiFuserDistLT2Sd,%{public}d,CountWiFiFuserDistGT2SdLT3Sd,%{publ ic}d,CountWiFiFuserDistGT3SdLTThresholdSd,%{public}d,CountWiFiFuserDistGTThresholdSd,%{public}d,",  &v216,  v187);
      char v186 = (uint8_t *)v185;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v185);
      if (v186 != buf) {
        free(v186);
      }
    }

    if (a3)
    {
      *(double *)(a1 + 72) = sub_101171D4C();
    }

    else
    {
      v198[0] = _NSConcreteStackBlock;
      v198[1] = 3221225472LL;
      v198[2] = sub_10069D3C8;
      v198[3] = &unk_101848B78;
      v198[4] = a1;
      v198[5] = a2;
      int v199 = a4;
      int v200 = HIDWORD(v195);
      int v201 = v195;
      uint64_t v202 = v196;
      int v203 = HIDWORD(v197);
      int v204 = v197;
      unsigned int v205 = v14;
      unsigned int v206 = v16;
      unsigned int v207 = v15;
      int v208 = HIDWORD(v194);
      int v209 = v194;
      int v210 = HIDWORD(v193);
      int v211 = v193;
      int32x2_t v212 = vrev64_s32(v191);
      int32x2_t v213 = vrev64_s32(v192);
      int32x2_t v214 = vrev64_s32(v189);
      int32x2_t v215 = vrev64_s32(v190);
      AnalyticsSendEventLazy(@"com.apple.locationd.position.LCFuserInternalHomeVisitMetrics", v198);
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    uint64_t v17 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      int v267 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#LCFusionStats,submitMetrics,no data for visitContext,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v216 = 67240192;
      int v217 = a4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#LCFusionStats,submitMetrics,no data for visitContext,%{public}d",  &v216,  8);
      uint64_t v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetr icsVisitContext)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }
  }

void sub_10069D3BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

NSDictionary *sub_10069D3C8(uint64_t a1)
{
  v4[0] = @"CountBIODisplacementMoreThanExpected";
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 84LL));
  v4[1] = @"CountBIOResetLargeGapInIOData";
  v5[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 80LL));
  void v4[2] = @"CountDynamicsModeAirborneHighG";
  void v5[2] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 152LL));
  void v4[3] = @"CountDynamicsModeAirborneLowG";
  v5[3] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 148LL));
  void v4[4] = @"CountDynamicsModeGeneralPurposeMode";
  v5[4] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 120LL));
  void v4[5] = @"CountDynamicsModeGroundVehicleFast";
  v5[5] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 144LL));
  v4[6] = @"CountDynamicsModeGroundVehicleSlow";
  v5[6] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 140LL));
  v4[7] = @"CountDynamicsModeLsqTestMode";
  v5[7] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 156LL));
  _WORD v4[8] = @"CountDynamicsModeMovingPedestrian";
  _WORD v5[8] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 128LL));
  v4[9] = @"CountDynamicsModeRunning";
  v5[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 136LL));
  v4[10] = @"CountDynamicsModeStationaryKnown";
  v5[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 124LL));
  v4[11] = @"CountDynamicsModeWalking";
  v5[11] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 132LL));
  v4[12] = @"CountGPSFuserDistanceGT500m";
  v5[12] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 160LL));
  v4[13] = @"CountGPSIsYieldingButNotSelected";
  v5[13] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 68LL));
  v4[14] = @"CountHypoDistanceGT100mLT200mHypoUncLT50m";
  v5[14] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 176LL));
  void v4[15] = @"CountHypoDistanceGT200mHypoUncLT50m";
  v5[15] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 180LL));
  v4[16] = @"CountHypoDistanceGT50mLT100mHypoUncLT50m";
  v5[16] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 172LL));
  v4[17] = @"CountHypoDistanceLT50mHypoUncLT50m";
  v5[17] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 168LL));
  v4[18] = @"CountIODerivedMotionSpeedMatchMotionActivity";
  v5[18] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 88LL));
  v4[19] = @"CountIODerivedMotionSpeedMisMatchMotionActivity";
  v5[19] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 92LL));
  v4[20] = @"CountIOMotionActivityMovingGroundVehicle";
  v5[20] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 108LL));
  v4[21] = @"CountIOMotionActivityMovingInPlace";
  v5[21] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 100LL));
  v4[22] = @"CountIOMotionActivityMovingWithPurpose";
  v5[22] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 104LL));
  v4[23] = @"CountIOMotionActivityStationary";
  v5[23] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 96LL));
  v4[24] = @"CountLocRejectionReasonDuplicateLocation";
  v5[24] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 40LL));
  v4[25] = @"CountLocRejectionReasonGrossOutlier";
  v5[25] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 48LL));
  v4[26] = @"CountLocRejectionReasonHypothesisSelectionFailed";
  v5[26] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 64LL));
  v4[27] = @"CountLocRejectionReasonInconsistentCellPosition";
  v5[27] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 56LL));
  void v4[28] = @"CountLocRejectionReasonIndoorFavoringWiFiAP";
  v5[28] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 52LL));
  v4[29] = @"CountLocRejectionReasonInvalidLocation";
  v5[29] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 36LL));
  v4[30] = @"CountLocRejectionReasonLowAccuracyCellOrWiFiPosition";
  v5[30] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 60LL));
  v4[31] = @"CountLocRejectionReasonOldLocation";
  v5[31] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 44LL));
  v4[32] = @"CountLocRejectionReasonOther";
  v5[32] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 32LL));
  v4[33] = @"CountOfHypothesisCreated";
  v5[33] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 76LL));
  v4[34] = @"CountWiFiFuserDistanceGT500m";
  v5[34] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 164LL));
  v5[35] = &off_1018D3710;
  v4[35] = @"CumulativeDistanceWanderWhenStatic";
  v4[36] = @"LCFuserInternalMetricsVisitContext";
  v5[36] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48));
  v4[37] = @"LCFuserInternalSignalEnvironmentForHomeVisit";
  v5[37] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v2 + 40));
  v4[38] = @"LikelihoodOutlierRejectionCount";
  v5[38] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 72LL));
  v4[39] = @"MaxEuclideanDistBtwnActiveHypothesis";
  v5[39] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 28LL));
  v5[40] = &off_1018D3710;
  v4[40] = @"MaxFusionHypothesisConvergenceSeconds";
  v4[41] = @"MaxIODerivedGroundSpeed";
  v5[41] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 112LL));
  v4[42] = @"MaxLocDistanceWithIOMotionStationary";
  v5[42] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 116LL));
  v4[43] = @"MaxMahalanobisDistBtwnActiveHypothesis";
  v5[43] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 24LL));
  v4[44] = @"PctGPSFuserDistanceGT100mLT200mGPSUncLT50m";
  v5[44] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 52));
  v4[45] = @"PctGPSFuserDistanceGT200mGPSUncLT50m";
  v5[45] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 56));
  v4[46] = @"PctGPSFuserDistanceGT50mLT100mGPSUncLT50m";
  v5[46] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 60));
  v4[47] = @"PctGPSFuserDistanceLT50mGPSUncLT50m";
  v5[47] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 64));
  v4[48] = @"PctOfFixesWithFourHypothesActive";
  v5[48] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 68));
  v4[49] = @"PctOfFixesWithMoreThanFourHypothesActive";
  v5[49] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 72));
  v4[50] = @"PctOfFixesWithOneHypothesActive";
  v5[50] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 76));
  v4[51] = @"PctOfFixesWithThreeHypothesActive";
  v5[51] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 80));
  v4[52] = @"PctOfFixesWithTwoHypothesActive";
  v5[52] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 84));
  v4[53] = @"PctWiFiFuserDistanceGT100mLT200mFuserUncLT50m";
  v5[53] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 88));
  v4[54] = @"PctWiFiFuserDistanceGT200mFuserUncLT50m";
  v5[54] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 92));
  v4[55] = @"PctWiFiFuserDistanceGT50mLT100mFuserUncLT50m";
  v5[55] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 96));
  v4[56] = @"PctWiFiFuserDistanceLT50mFuserUncLT50m";
  v5[56] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 100));
  v4[57] = @"CountHypoDistanceGTThresholdSdHypoUncLT50m";
  v5[57] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 228LL));
  v4[58] = @"CountHypoDistanceGT3SdLTThresholdHypoUncLT50m";
  v5[58] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 224LL));
  v4[59] = @"CountHypoDistanceGT2SdLT3SdHypoUncLT50m";
  v5[59] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 220LL));
  v4[60] = @"CountHypoDistanceLT2SdHypoUncLT50m";
  v5[60] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 216LL));
  v4[61] = @"PctGPSFuserDistanceGTThresholdSdGPSUncLT50m";
  v5[61] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 104));
  v4[62] = @"PctGPSFuserDistanceGT3SdLTThresholdGPSUncLT50m";
  v5[62] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 108));
  v4[63] = @"PctGPSFuserDistanceGT2SdLT3SdGPSUncLT50m";
  v5[63] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 112));
  v4[64] = @"PctGPSFuserDistanceLT2SdGPSUncLT50m";
  v5[64] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 116));
  v4[65] = @"PctWiFiFuserDistanceGTThresholdSdFuserUncLT50m";
  v5[65] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 120));
  v4[66] = @"PctWiFiFuserDistanceGT3SdLTThresholdFuserUncLT50m";
  v5[66] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 124));
  v4[67] = @"PctWiFiFuserDistanceGT2SdLT3SdFuserUncLT50m";
  v5[67] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 128));
  v4[68] = @"PctWiFiFuserDistanceLT2SdFuserUncLT50m";
  v5[68] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 132));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  69LL);
}

uint64_t sub_10069DC68(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 0:
          ++*(_DWORD *)(v4 + 152);
          break;
        case 1:
          ++*(_DWORD *)(v4 + 156);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 160);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 164);
          break;
        case 5:
          ++*(_DWORD *)(v4 + 168);
          break;
        case 6:
          ++*(_DWORD *)(v4 + 172);
          break;
        case 7:
          ++*(_DWORD *)(v4 + 176);
          break;
        case 8:
          ++*(_DWORD *)(v4 + 180);
          break;
        case 9:
          ++*(_DWORD *)(v4 + 184);
          break;
        case 10:
          ++*(_DWORD *)(v4 + 188);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }

  return result;
}

uint64_t sub_10069DD88(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1:
          ++*(_DWORD *)(v4 + 128);
          break;
        case 2:
          ++*(_DWORD *)(v4 + 132);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 136);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 140);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }

  return result;
}

uint64_t sub_10069DE48(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1u:
          char v8 = (_DWORD *)(v4 + 36);
          goto LABEL_18;
        case 2u:
          char v8 = (_DWORD *)(v4 + 40);
          goto LABEL_18;
        case 3u:
          char v8 = (_DWORD *)(v4 + 44);
          goto LABEL_18;
        case 4u:
          char v8 = (_DWORD *)(v4 + 48);
          goto LABEL_18;
        default:
          if (a2 < 5) {
            return result;
          }
          char v8 = (_DWORD *)(v4 + 52);
LABEL_18:
          ++*v8;
          break;
      }
    }
  }

  return result;
}

uint64_t sub_10069DEF4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1:
          ++*(_DWORD *)(v4 + 64);
          break;
        case 2:
          ++*(_DWORD *)(v4 + 68);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 72);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 76);
          break;
        case 5:
          ++*(_DWORD *)(v4 + 80);
          break;
        case 6:
          ++*(_DWORD *)(v4 + 84);
          break;
        case 7:
          ++*(_DWORD *)(v4 + 88);
          break;
        case 8:
          ++*(_DWORD *)(v4 + 92);
          break;
        case 9:
          ++*(_DWORD *)(v4 + 96);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }

  return result;
}

uint64_t sub_10069E004(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }

    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 100);
    }
  }

  return result;
}

uint64_t sub_10069E060(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }

    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 104);
    }
  }

  return result;
}

uint64_t sub_10069E0BC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }

    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 108);
    }
  }

  return result;
}

uint64_t sub_10069E118(uint64_t result, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(void *)(result + 56);
  if (v5)
  {
    int v6 = *(_DWORD *)(result + 24);
    uint64_t v7 = result + 56;
    do
    {
      int v8 = *(_DWORD *)(v5 + 28);
      BOOL v9 = v8 < v6;
      if (v8 >= v6) {
        unsigned int v10 = (uint64_t *)v5;
      }
      else {
        unsigned int v10 = (uint64_t *)(v5 + 8);
      }
      if (!v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }

    while (*v10);
    if (v7 != result + 56 && v6 >= *(_DWORD *)(v7 + 28))
    {
      *(_BYTE *)(v7 + 32) = 1;
      int v11 = *(_DWORD *)(v7 + 116) + a3;
      *(_DWORD *)(v7 + 112) += a2;
      *(_DWORD *)(v7 + 116) = v11;
      int v12 = *(_DWORD *)(v7 + 124) + a4;
      *(_DWORD *)(v7 + 120) += a5;
      *(_DWORD *)(v7 + 124) = v12;
    }
  }

  return result;
}

uint64_t sub_10069E188(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        uint64_t v7 = (uint64_t *)v2;
      }
      else {
        uint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      int v8 = *a2;
      BOOL v9 = a2[1];
      if (*a2 != v9)
      {
        *(_BYTE *)(v4 + 32) = 1;
        int v10 = *(_DWORD *)(v4 + 200);
        int v11 = *(_DWORD *)(v4 + 204);
        int v12 = v8;
        int v13 = *(_DWORD *)(v4 + 208);
        BOOL result = *(unsigned int *)(v4 + 212);
        do
        {
          double v14 = *v12;
          if (*v12 <= 0.0 || v14 > 50.0)
          {
            if (v14 <= 50.0 || v14 > 100.0)
            {
              if (v14 <= 100.0 || v14 > 200.0)
              {
                BOOL result = (result + 1);
                *(_DWORD *)(v4 + 212) = result;
              }

              else
              {
                *(_DWORD *)(v4 + 20_Block_object_dispose(&STACK[0x7E0], 8) = ++v13;
              }
            }

            else
            {
              *(_DWORD *)(v4 + 204) = ++v11;
            }
          }

          else
          {
            *(_DWORD *)(v4 + 200) = ++v10;
          }

          ++v12;
        }

        while (v12 != v9);
        uint64_t v18 = v8 + 1;
        if (v8 + 1 != v9)
        {
          double v19 = *v8;
          unsigned int v20 = v8 + 1;
          do
          {
            double v21 = *v20++;
            double v22 = v21;
            if (v19 < v21)
            {
              double v19 = v22;
              int v8 = v18;
            }

            uint64_t v18 = v20;
          }

          while (v20 != v9);
        }

        unsigned int v23 = *v8;
        if (*(_DWORD *)(v4 + 60) < v23) {
          *(_DWORD *)(v4 + 60) = v23;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10069E2B8(uint64_t result, double **a2, double a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 24);
    uint64_t v5 = result + 56;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0)
    {
      BOOL v9 = *a2;
      int v10 = a2[1];
      if (*a2 != v10)
      {
        BOOL result = 0x4059000000000000LL;
        do
        {
          double v11 = *v9;
          if (a3 <= 50.0)
          {
            BOOL v13 = v11 <= 0.0 || v11 > 50.0;
            int v12 = (_DWORD *)(v5 + 216);
            if (v13)
            {
              BOOL v14 = v11 <= 50.0 || v11 > 100.0;
              int v12 = (_DWORD *)(v5 + 220);
              if (v14)
              {
                if (v11 > 200.0 || v11 <= 100.0) {
                  int v12 = (_DWORD *)(v5 + 228);
                }
                else {
                  int v12 = (_DWORD *)(v5 + 224);
                }
              }
            }
          }

          else
          {
            int v12 = (_DWORD *)(v5 + 192);
            if (v11 <= 500.0) {
              goto LABEL_34;
            }
          }

          ++*v12;
          *(_BYTE *)(v5 + 32) = 1;
LABEL_34:
          ++v9;
        }

        while (v9 != v10);
      }
    }
  }

  return result;
}

uint64_t sub_10069E3BC(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      int v8 = *a2;
      BOOL v9 = a2[1];
      if (*a2 != v9)
      {
        BOOL result = 0x4059000000000000LL;
        do
        {
          double v10 = v8[1];
          if (v10 > 0.0)
          {
            double v11 = *v8;
            if (v10 <= 50.0)
            {
              BOOL v13 = v11 <= 0.0 || v11 > 50.0;
              int v12 = (_DWORD *)(v4 + 232);
              if (v13)
              {
                BOOL v14 = v11 <= 50.0 || v11 > 100.0;
                int v12 = (_DWORD *)(v4 + 236);
                if (v14)
                {
                  if (v11 > 200.0 || v11 <= 100.0) {
                    int v12 = (_DWORD *)(v4 + 244);
                  }
                  else {
                    int v12 = (_DWORD *)(v4 + 240);
                  }
                }
              }
            }

            else
            {
              int v12 = (_DWORD *)(v4 + 196);
              if (v11 <= 500.0) {
                goto LABEL_34;
              }
            }

            ++*v12;
            *(_BYTE *)(v4 + 32) = 1;
          }

uint64_t sub_10069E4C4(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      int v8 = *a2;
      BOOL v9 = a2[1];
      if (*a2 != v9)
      {
        *(_BYTE *)(v4 + 32) = 1;
        int v10 = *(_DWORD *)(v4 + 248);
        int v11 = *(_DWORD *)(v4 + 252);
        int v12 = *(_DWORD *)(v4 + 256);
        int v13 = *(_DWORD *)(v4 + 260);
        BOOL v14 = v8;
        double v15 = *(double *)result;
        do
        {
          double v16 = *v14;
          if (*v14 <= 0.0 || v16 > v15)
          {
            double v18 = *(double *)(result + 8);
            if (v16 <= v15 || v16 > v18)
            {
              else {
                *(_DWORD *)(v4 + 260) = ++v13;
              }
            }

            else
            {
              *(_DWORD *)(v4 + 252) = ++v11;
            }
          }

          else
          {
            *(_DWORD *)(v4 + 24_Block_object_dispose(&STACK[0x7E0], 8) = ++v10;
          }

          ++v14;
        }

        while (v14 != v9);
        unsigned int v20 = v8 + 1;
        if (v8 + 1 != v9)
        {
          double v21 = *v8;
          double v22 = v8 + 1;
          do
          {
            double v23 = *v22++;
            double v24 = v23;
            if (v21 < v23)
            {
              double v21 = v24;
              int v8 = v20;
            }

            unsigned int v20 = v22;
          }

          while (v22 != v9);
        }

        unsigned int v25 = *v8;
        if (*(_DWORD *)(v4 + 56) < v25) {
          *(_DWORD *)(v4 + 56) = v25;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10069E5EC(uint64_t result, double **a2, double a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 24);
    uint64_t v5 = result + 56;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0 && a3 <= 50.0)
    {
      BOOL v9 = *a2;
      int v10 = a2[1];
      if (*a2 != v10)
      {
        *(_BYTE *)(v5 + 32) = 1;
        int v11 = (_DWORD *)(v5 + 264);
        int v12 = (_DWORD *)(v5 + 268);
        int v13 = (_DWORD *)(v5 + 272);
        BOOL v14 = (_DWORD *)(v5 + 276);
        double v15 = *(double *)result;
        do
        {
          double v16 = *v9;
          BOOL v17 = *v9 <= 0.0 || v16 > v15;
          double v18 = v11;
          if (v17)
          {
            double v19 = *(double *)(result + 8);
            BOOL v20 = v16 <= v15 || v16 > v19;
            double v18 = v12;
            if (v20)
            {
            }
          }

          ++*v18;
          ++v9;
        }

        while (v9 != v10);
      }
    }
  }

  return result;
}

uint64_t sub_10069E6D0(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      int v8 = *a2;
      BOOL v9 = a2[1];
      if (*a2 != v9)
      {
        do
        {
          double v10 = v8[1];
          if (v10 <= 50.0 || v10 > 0.0)
          {
            double v11 = *v8;
            double v12 = *(double *)result;
            BOOL v13 = *v8 <= 0.0 || v11 > v12;
            BOOL v14 = (_DWORD *)(v4 + 280);
            if (v13)
            {
              double v15 = *(double *)(result + 8);
              BOOL v16 = v11 <= v12 || v11 > v15;
              BOOL v14 = (_DWORD *)(v4 + 284);
              if (v16)
              {
              }
            }

            ++*v14;
            *(_BYTE *)(v4 + 32) = 1;
          }

          v8 += 2;
        }

        while (v8 != v9);
      }
    }
  }

  return result;
}

void sub_10069E7B8(uint64_t a1, int a2)
{
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101848B98);
  }
  uint64_t v4 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type buf = 67240192;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,feedInAVisit,%{public}d,",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    int v7 = *(_DWORD *)(a1 + 24);
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,feedInAVisit,%{public}d,",  v10,  8);
    BOOL v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::feedInAVisit(const BOOL)", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if (a2) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  *(_DWORD *)(a1 + 24) = v6;
}

void sub_10069E97C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069E988(uint64_t a1)
{
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101848B98);
  }
  uint64_t v2 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type buf = 67240192;
    int v17 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,feedLikelyOutOfAVisit,%{public}d,",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    int v10 = *(_DWORD *)(a1 + 24);
    int v14 = 67240192;
    int v15 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,feedLikelyOutOfAVisit,%{public}d,",  &v14,  8);
    int v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 == 3)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    int v5 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      int v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,feedLikelyOutOfAVisit,Ignored,%{public}d,",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101848B98);
      }
      int v7 = *(_DWORD *)(a1 + 24);
      int v14 = 67240192;
      int v15 = v7;
      LODWORD(v13) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,feedLikelyOutOfAVisit,Ignored,%{public}d,",  &v14,  v13);
      BOOL v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x7E0], 8) = v4;
    *(double *)(a1 + 32) = sub_101171D4C();
    *(_DWORD *)(a1 + 24) = 4;
  }

void sub_10069ECA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069ECAC(uint64_t a1)
{
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101848B98);
  }
  uint64_t v2 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type buf = 67240192;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,feedOutOfAVisit,%{public}d,",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    int v4 = *(_DWORD *)(a1 + 24);
    v7[0] = 67240192;
    v7[1] = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,feedOutOfAVisit,%{public}d,",  v7,  8);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusionStats::feedOutOfAVisit()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  *(_DWORD *)(a1 + 24) = 3;
}

void sub_10069EE64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069EE70(uint64_t a1, int *a2)
{
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101848B98);
  }
  int v4 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *a2;
    *(_DWORD *)std::stringbuf::string_type buf = 67240448;
    int v15 = v5;
    __int16 v16 = 1026;
    int v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#LCFusionStats,feedSignalEnvironment,%{public}d,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101848B98);
    }
    int v7 = *(_DWORD *)(a1 + 24);
    int v8 = *a2;
    v11[0] = 67240448;
    v11[1] = v7;
    __int16 v12 = 1026;
    int v13 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#LCFusionStats,feedSignalEnvironment,%{public}d,%{public}d",  v11,  14);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusionStats::feedSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  *(_DWORD *)(a1 + 40) = *a2;
}

void sub_10069F04C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10069F058(id a1)
{
  qword_101934968 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t **sub_10069F084(uint64_t **result, int *a2, int *a3)
{
  int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    int v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v10 = result;
    double v11 = v8;
    __int16 v12 = v8;
    if (v8)
    {
      double v11 = sub_100115560((uint64_t)v8);
      while (a2 != a3)
      {
        sub_10069F188(v5, a2, (uint64_t)v8);
        if ((v9 & 1) != 0)
        {
          int v8 = v11;
          __int16 v12 = v11;
          if (!v11)
          {
            a2 += 67;
            break;
          }

          double v11 = sub_100115560((uint64_t)v11);
        }

        else
        {
          int v8 = v12;
        }

        a2 += 67;
        if (!v8) {
          break;
        }
      }
    }

    BOOL result = (uint64_t **)sub_1001155B4((uint64_t)&v10);
  }

  while (a2 != a3)
  {
    BOOL result = (uint64_t **)sub_10069F238(v5, a2, a2);
    a2 += 67;
  }

  return result;
}

void sub_10069F174(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10069F188(uint64_t **a1, int *a2, uint64_t a3)
{
  int v3 = (uint64_t *)a3;
  int v6 = a1 + 1;
  int v5 = a1[1];
  int v7 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }

      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x7E0], 8) = v7;
    memcpy((void *)(a3 + 32), a2 + 1, 0x108uLL);
    sub_1000085FC(a1, (uint64_t)v8, v6, v3);
  }

  return v3;
}

uint64_t *sub_10069F238(uint64_t **a1, int *a2, const void *a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x128uLL);
    memcpy((char *)v10 + 28, a3, 0x10CuLL);
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t sub_10069F4A8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0LL;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_30;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v15;
    }

    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString(a2);

      *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = String;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_10069F9D0(float a1)
{
  return sqrtf((float)(a1 * 9.8067) * 0.58) * 0.742;
}

uint64_t sub_10069F9FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

char *sub_10069FA78(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }

  *((void *)__dst + 6) = 0x100000002LL;
  *((_WORD *)__dst + 2_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst + 64, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *((void *)__dst + 10) = *((void *)a3 + 2);
    *((_OWORD *)__dst + 4) = v7;
  }

  *((void *)__dst + 15) = 0LL;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  sub_1006A00CC((uint64_t)__dst);
  uint64_t v8 = *((void *)__dst + 15);
  if (!v8 || !sub_1003C1048(v8))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    BOOL v9 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "@TileData, CLWifiTileBlobsTable, not connected to wifi #tile header table",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      LOWORD(v46.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@TileData, CLWifiTileBlobsTable, not connected to wifi #tile header table",  &v46,  2);
      int32x2_t v37 = (std::string *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiTileBlobsTable::CLWifiTileBlobsTable(const std::string &, const std::string &)",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  v38.__r_.__value_.__s.__size_ = 13;
  strcpy((char *)&v38, "SELECT rowid,");
  int v10 = std::string::append(&v38, "TileDataOffsetBytes");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v12 = std::string::append(&v39, ",");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v14 = std::string::append(&v40, "SizeOfTileDataBytes");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v16 = std::string::append(&v41, " FROM ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = __dst[23];
  if (v18 >= 0) {
    double v19 = __dst;
  }
  else {
    double v19 = *(const std::string::value_type **)__dst;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = __dst[23];
  }
  else {
    std::string::size_type v20 = *((void *)__dst + 1);
  }
  double v21 = std::string::append(&v42, v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  double v23 = std::string::append(&v43, " WHERE ");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v25 = std::string::append(&v44, "TileX");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v27 = std::string::append(&v45, " = ? AND ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v29 = std::string::append(&v46, "TileY");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v31 = std::string::append(buf, " = ? LIMIT 1;");
  std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
  v47[0] = v31->__r_.__value_.__l.__size_;
  *(void *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v31->__r_.__value_.__s.__size_;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if (__dst[119] < 0) {
    operator delete(*((void **)__dst + 12));
  }
  uint64_t v34 = v47[0];
  *((void *)__dst + 12) = v32;
  *((void *)__dst + 13) = v34;
  *(void *)(__dst + 111) = *(void *)((char *)v47 + 7);
  __dst[119] = size;
  return __dst;
}

void sub_10069FF64(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006A00CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2 || (uint64_t result = sub_1003C1048(v2), (result & 1) == 0))
  {
    sub_1006A0148((char *)a1, (const char **)qword_101997B00, a1 + 48, &v4);
    uint64_t result = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = v4;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_1006A0134(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return sub_1003C1048(result);
  }
  return result;
}

void sub_1006A0148(char *a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x88uLL);
  sub_1003B35F4(v8, a3);
  *a4 = v8;
  if (!sub_1003C1048((uint64_t)v8))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    __int128 v13 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "failed to connect to wifi #tile header database",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    v16[0] = 0;
    __int128 v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "failed to connect to wifi #tile header database",  v16,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::unique_ptr<CLSqliteDatabase> CLWifiTileBlobsTable::connectAndCreateTableIfNotExistsIfNecessary(const s td::string &, const CLSqliteDatabase::ColumnInfo *, const CLSqliteDatabase::SqliteProperties &)",  "%s\n",  v15);
    goto LABEL_37;
  }

  if (a1[23] >= 0) {
    BOOL v9 = a1;
  }
  else {
    BOOL v9 = *(char **)a1;
  }
  if ((sub_1003B59A0((uint64_t)v8, v9, a2, 0LL, 0) & 1) == 0)
  {
    int v10 = a1[23] >= 0 ? a1 : *(char **)a1;
    if ((sub_1003B747C(v8, v10) & 1) == 0)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      unsigned int v14 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "failed to connect to wifi #tile heeaders table",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      v16[0] = 0;
      __int128 v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "failed to connect to wifi #tile heeaders table",  v16,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static std::unique_ptr<CLSqliteDatabase> CLWifiTileBlobsTable::connectAndCreateTableIfNotExistsIfNecessary(const std::string &, const CLSqliteDatabase::ColumnInfo *, const CLSqliteDatabase::SqliteProperties &)",  "%s\n",  v15);
LABEL_37:
LABEL_24:
      *a4 = 0LL;
      (*(void (**)(void *))(*(void *)v8 + 8LL))(v8);
      return;
    }
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848BB8);
  }
  __int128 v11 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "successfully created wifi #tile headers table",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    v16[0] = 0;
    __int16 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "successfully created wifi #tile headers table",  v16,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::unique_ptr<CLSqliteDatabase> CLWifiTileBlobsTable::connectAndCreateTableIfNotExistsIfNecessary(const s td::string &, const CLSqliteDatabase::ColumnInfo *, const CLSqliteDatabase::SqliteProperties &)",  "%s\n",  v12);
  }

void sub_1006A05B0(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0LL;
  (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A05F0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5 && sub_1003C1048(v5))
  {
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
    strcpy(v50.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    int v7 = *(char *)(v4 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (const std::string::value_type *)v4;
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)v4;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(v4 + 8);
    }
    int v10 = std::string::append(&v50, v8, v9);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v12 = std::string::append(&v51, " (");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    sub_1006A0EB4(0, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = std::string::append(&v56, (const std::string::value_type *)p_p, size);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    int v18 = std::string::append(&v58, ") VALUES (?, ?, ?, ?, ?)");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t cap = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)int v52 = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v20 = (char *)v52;
    }
    else {
      std::string::size_type v20 = (char *)v52[0];
    }
    sub_1003C0D54(*(void *)(v4 + 120), v20, &v58);
    std::string::size_type v21 = v58.__r_.__value_.__r.__words[0];
    __int128 v22 = (sqlite3_stmt *)sub_100019240((uint64_t)v58.__r_.__value_.__l.__data_);
    LODWORD(v51.__r_.__value_.__l.__data_) = 0;
    if ((_BYTE)v55) {
      LODWORD(v51.__r_.__value_.__l.__data_) = sub_1000F0F50(v54);
    }
    int v23 = sub_100496E10(a2);
    if (!sub_1003C28BC(v22, 1, v23)
      || (int v24 = sub_100924300((uint64_t)a2), !sub_1003C28BC(v22, 2, v24))
      || (int v25 = sub_100808784((uint64_t)a2), !sub_1003C2AF0(v22, 3, v25))
      || !sub_1003C2AF0(v22, 4, (int)v51.__r_.__value_.__l.__data_)
      || !sub_1003C31B4(v22, 5, (int)v51.__r_.__value_.__l.__data_))
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      std::string v40 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
      {
        int v41 = sub_100496E10(a2);
        int v42 = sub_100924300((uint64_t)a2);
        v58.__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = v41;
        __int16 v59 = 1025;
        int v60 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:@TileData, wifi, failed to bind values for #tile save blob data, x:%{private}d,  y:%{private}d}",  (uint8_t *)&v58,  0x1Eu);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848BB8);
        }
      }

      std::string v43 = (os_log_s *)qword_101934868;
      if (os_signpost_enabled((os_log_t)qword_101934868))
      {
        int v44 = sub_100496E10(a2);
        int v45 = sub_100924300((uint64_t)a2);
        v58.__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = v44;
        __int16 v59 = 1025;
        int v60 = v45;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to bind values for #tile save blob data",  "{msg%{public}.0s:@TileData, wifi, failed to bind values for #tile save blob data, x:%{private}d,  y:%{private}d}",  (uint8_t *)&v58,  0x1Eu);
      }

      uint64_t v39 = 0LL;
      if (!v21) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }

    sub_1003BB2BC(*(void *)(v4 + 120), v22);
    unsigned int v26 = sub_100496E10(a2);
    v58.__r_.__value_.__r.__words[0] = __PAIR64__(sub_100924300((uint64_t)a2), v26);
    int v27 = sub_1006A1018(v4, (int *)&v58);
    __int128 v28 = (std::string *)operator new(0x20uLL);
    v28->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101848C08;
    v28->__r_.__value_.__l.__size_ = v4;
    v28->__r_.__value_.__l.__cap_ = (std::string::size_type)&v54;
    v28[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    int v57 = v28;
    uint64_t v29 = *(void *)(v4 + 120);
    if (sub_1003BDC2C(v29, "main", (const char *)v4, "TileData", v27, 0, (uint64_t)&v56))
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      __int128 v30 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
      {
        int v31 = sub_100496E10(a2);
        int v32 = sub_100924300((uint64_t)a2);
        v58.__r_.__value_.__r.__words[0] = 68289795LL;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = v27;
        __int16 v59 = 1025;
        int v60 = v31;
        __int16 v61 = 1025;
        int v62 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:@TileData, wifi, failed to dump #tile to blob, row:%{public}d, tileX:%{privat e}d, tileY:%{private}d}",  (uint8_t *)&v58,  0x24u);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848BB8);
        }
      }

      unsigned int v33 = (os_log_s *)qword_101934868;
      if (os_signpost_enabled((os_log_t)qword_101934868))
      {
        int v34 = sub_100496E10(a2);
        int v35 = sub_100924300((uint64_t)a2);
        v58.__r_.__value_.__r.__words[0] = 68289795LL;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = v27;
        __int16 v59 = 1025;
        int v60 = v34;
        __int16 v61 = 1025;
        int v62 = v35;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to dump #tile to blob",  "{msg%{public}.0s:@TileData, wifi, failed to dump #tile to blob, row:%{public}d, tileX:%{privat e}d, tileY:%{private}d}",  (uint8_t *)&v58,  0x24u);
      }
    }

    float64x2_t v36 = v57;
    if (v57 == &v56)
    {
      uint64_t v37 = 4LL;
      float64x2_t v36 = &v56;
    }

    else
    {
      if (!v57) {
        goto LABEL_68;
      }
      uint64_t v37 = 5LL;
    }

    (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 8 * v37))();
LABEL_68:
    uint64_t v39 = 1LL;
    if (!v21)
    {
LABEL_63:
      if (SHIBYTE(cap) < 0) {
        operator delete(v52[0]);
      }
      return v39;
    }

void sub_1006A0DAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, void **a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  int v53 = a45;
  if (a45 == &a39)
  {
    uint64_t v54 = 4LL;
    int v53 = &a39;
  }

  else
  {
    if (!a45) {
      goto LABEL_6;
    }
    uint64_t v54 = 5LL;
  }

  (*((void (**)(void))*v53 + v54))();
LABEL_6:
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A0EB4(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4 = 0LL;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if (!a1 || LODWORD(qword_101997B00[v4 + 1]) != 4)
    {
      std::string::size_type size = a2->__r_.__value_.__s.__size_;
      if ((size & 0x80u) != 0LL) {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        v10.__r_.__value_.__s.__size_ = 2;
        strcpy((char *)&v10, ", ");
        __int128 v6 = std::string::append(&v10, (const std::string::value_type *)qword_101997B00[v4]);
        __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        int64_t cap = v6->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0LL;
        v6->__r_.__value_.__l.__cap_ = 0LL;
        v6->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v9 = HIBYTE(cap);
        }
        else {
          std::string::size_type v9 = (std::string::size_type)__p[1];
        }
        std::string::append(a2, (const std::string::value_type *)v8, v9);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        std::string::append(a2, (const std::string::value_type *)qword_101997B00[v4]);
      }
    }

    v4 += 6LL;
  }

  while (v4 != 30);
}

void sub_1006A0FCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

unint64_t sub_1006A1018(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = (char *)(a1 + 96);
  sub_1003C0D54(v4, v5, &v15);
  uint64_t v6 = v15;
  __int128 v7 = (sqlite3_stmt *)sub_100019240(v15);
  int v9 = *a2;
  int v8 = a2[1];
  if (sub_1003C28BC(v7, 1, v9) && sub_1003C28BC(v7, 2, v8))
  {
    if (j__sqlite3_step(v7) == 100)
    {
      unsigned int v10 = sqlite3_column_int(v7, 0);
      unint64_t v11 = v10 | (unint64_t)((uint64_t)sqlite3_column_int(v7, 1) << 32);
      sqlite3_column_int(v7, 2);
      if (!v6) {
        return v11;
      }
      goto LABEL_16;
    }
  }

  else
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    __int16 v12 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      uint64_t v15 = 68289539LL;
      __int16 v16 = 2082;
      __int128 v17 = "";
      __int16 v18 = 1025;
      int v19 = v9;
      __int16 v20 = 1025;
      int v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:@TileData, wifi, failed to bind values for #tile to find mac address, x:%{private}d , y:%{private}d}",  (uint8_t *)&v15,  0x1Eu);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
    }

    __int128 v13 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      uint64_t v15 = 68289539LL;
      __int16 v16 = 2082;
      __int128 v17 = "";
      __int16 v18 = 1025;
      int v19 = v9;
      __int16 v20 = 1025;
      int v21 = v8;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to bind values for #tile to find mac address",  "{msg%{public}.0s:@TileData, wifi, failed to bind values for #tile to find mac address, x:%{private}d , y:%{private}d}",  (uint8_t *)&v15,  0x1Eu);
    }
  }

  unint64_t v11 = -1LL;
  if (v6) {
LABEL_16:
  }
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  return v11;
}

void sub_1006A1284(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A12B4(uint64_t a1@<X0>, int *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = 0;
  a3[16] = 0;
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5 && sub_1003C1048(v5))
  {
    v48.__r_.__value_.__s.__size_ = 7;
    strcpy((char *)&v48, "SELECT ");
    sub_1006A0EB4(1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v9 = std::string::append(&v48, (const std::string::value_type *)p_p, size);
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    char v46 = 6;
    strcpy(__s, " FROM ");
    unint64_t v11 = std::string::append(&v49, __s, 6uLL);
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    int v13 = *(char *)(a1 + 23);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)a1;
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)a1;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a1 + 8);
    }
    __int16 v16 = std::string::append(&v50, v14, v15);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    char v44 = 7;
    strcpy(v43, " WHERE ");
    __int16 v18 = std::string::append(&v51, v43, 7uLL);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v20 = std::string::append(&v52, "TileX");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    char v42 = 7;
    strcpy(v41, "=? AND ");
    __int128 v22 = std::string::append(&v53, v41, 7uLL);
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    int v24 = std::string::append(&v54, "TileY");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    char v40 = 2;
    strcpy(v39, "=?");
    unsigned int v26 = std::string::append(&v55, v39, 2uLL);
    __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    int64_t cap = v26->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type buf = v27;
    v26->__r_.__value_.__l.__size_ = 0LL;
    v26->__r_.__value_.__l.__cap_ = 0LL;
    v26->__r_.__value_.__r.__words[0] = 0LL;
    if (v40 < 0) {
      operator delete(*(void **)v39);
    }
    if (v42 < 0) {
      operator delete(*(void **)v41);
    }
    if (v44 < 0) {
      operator delete(*(void **)v43);
    }
    if (v46 < 0) {
      operator delete(*(void **)__s);
    }
    if (cap >= 0) {
      __int128 v28 = (char *)buf;
    }
    else {
      __int128 v28 = *(char **)buf;
    }
    sub_1003C0D54(*(void *)(a1 + 120), v28, &v55);
    std::string::size_type v29 = v55.__r_.__value_.__r.__words[0];
    __int128 v30 = (sqlite3_stmt *)sub_100019240((uint64_t)v55.__r_.__value_.__l.__data_);
    int v31 = *a2;
    int v32 = a2[1];
    if (sub_1003C28BC(v30, 1, v31) && sub_1003C28BC(v30, 2, v32) && j__sqlite3_step(v30) == 100)
    {
      int v33 = sqlite3_column_int(v30, 0);
      int v34 = sqlite3_column_int(v30, 1);
      double v35 = sqlite3_column_double(v30, 2);
      double v36 = sqlite3_column_double(v30, 3);
      sub_100924414(&v55, v33, v34, v35, v36);
      *(_OWORD *)a3 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
      a3[16] = 1;
    }

    if (v29) {
      (*(void (**)(std::string::size_type))(*(void *)v29 + 8LL))(v29);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    uint64_t v37 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "@TileData, selectBlobDataByTileXY, not connected to wifi #tile data table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      LOWORD(v55.__r_.__value_.__l.__data_) = 0;
      std::string v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@TileData, selectBlobDataByTileXY, not connected to wifi #tile data table",  &v55,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLWifiTileBlobsEntry> CLWifiTileBlobsTable::selectBlobDataByTileXY(const WifiTileXY &)",  "%s\n",  v38);
    }
  }

void sub_1006A183C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  if (a62 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006A19A8(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3 && sub_1003C1048(v3))
  {
    v32.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v32, "DELETE FROM ");
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v6 = *(const std::string::value_type **)a1;
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v7 = *(void *)(a1 + 8);
    }
    int v8 = std::string::append(&v32, v6, v7);
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v10 = std::string::append(&v33, " WHERE ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v34, "TileX");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v14 = std::string::append(&v35, " = ? AND ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v16 = std::string::append(&v36, "TileY");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v18 = std::string::append(&v39, " = ? ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t cap = v18->__r_.__value_.__l.__cap_;
    __int128 __p = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    sub_1003C0D54(*(void *)(a1 + 120), p_p, &v39);
    std::string::size_type v21 = v39.__r_.__value_.__r.__words[0];
    __int128 v22 = (sqlite3_stmt *)sub_100019240((uint64_t)v39.__r_.__value_.__l.__data_);
    int v24 = *a2;
    int v23 = a2[1];
    if (sub_1003C28BC(v22, 1, v24) && sub_1003C28BC(v22, 2, v23))
    {
      sub_1003BB2BC(*(void *)(a1 + 120), v22);
      uint64_t v25 = 1LL;
      if (!v21)
      {
LABEL_43:
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)__p);
        }
        return v25;
      }
    }

    else
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
      __int128 v27 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
      {
        v39.__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v39.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v39.__r_.__value_.__r.__words[2]) = 1025;
        HIDWORD(v39.__r_.__value_.__r.__words[2]) = v24;
        __int16 v40 = 1025;
        int v41 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:@TileData, wifi, failed to bind values for deleting #tile, x:%{private}d, y:%{private}d}",  (uint8_t *)&v39,  0x1Eu);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848BB8);
        }
      }

      __int128 v28 = (os_log_s *)qword_101934868;
      if (os_signpost_enabled((os_log_t)qword_101934868))
      {
        v39.__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v39.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v39.__r_.__value_.__r.__words[2]) = 1025;
        HIDWORD(v39.__r_.__value_.__r.__words[2]) = v24;
        __int16 v40 = 1025;
        int v41 = v23;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to bind values for deleting #tile",  "{msg%{public}.0s:@TileData, wifi, failed to bind values for deleting #tile, x:%{private}d, y:%{private}d}",  (uint8_t *)&v39,  0x1Eu);
      }

      uint64_t v25 = 0LL;
      if (!v21) {
        goto LABEL_43;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v21 + 8LL))(v21);
    goto LABEL_43;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848BB8);
  }
  unsigned int v26 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    LOWORD(v39.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "@TileData, deleteBlobDataByTileXY, not connected to wifi #tile blob data table",  (uint8_t *)&v39,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v39, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v39,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@TileData, deleteBlobDataByTileXY, not connected to wifi #tile blob data table",  &__p,  2);
    int v31 = (std::string *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiTileBlobsTable::deleteBlobDataByTileXY(const WifiTileXY &)",  "%s\n",  v30);
    if (v31 != &v39) {
      free(v31);
    }
  }

  return 0LL;
}

void sub_1006A1EC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A1F90(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
    return;
  }

  sub_1006A2E7C(a6, (v7 - *a2) >> 3);
  __int128 v13 = (const char *)a1;
  uint64_t v14 = *(void *)(a1 + 120);
  __int128 v15 = operator new(0x30uLL);
  *__int128 v15 = &off_101848C98;
  v15[1] = a1;
  void v15[2] = a2;
  void v15[3] = a6;
  *((_DWORD *)v15 + _Block_object_dispose(&STACK[0x7E0], 8) = a4;
  *((_DWORD *)v15 + 9) = a5;
  double v15[5] = &v25;
  __int128 v27 = (uint8_t *)v15;
  p_vtable = (void **)buf;
  int v17 = sub_1003BDC2C(v14, "main", v13, "TileData", a3, 1, (uint64_t)buf);
  __int16 v18 = v27;
  if (v27 == buf)
  {
    uint64_t v19 = 4LL;
    __int16 v18 = buf;
  }

  else
  {
    if (!v27) {
      goto LABEL_10;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_10:
  if (!v17) {
    goto LABEL_15;
  }
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934860 != -1) {
    goto LABEL_17;
  }
  while (1)
  {
    __int16 v20 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "Failed to read wifi tile successfully",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      v24[0] = 0;
      LODWORD(v23) = 2;
      p_vtable = (void **)buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "Failed to read wifi tile successfully",  v24,  v23);
      __int128 v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<std::optional<CLTilesManager_Type::AccessPointEntry>> CLWifiTileBlobsTable::findMacAddresses(const s td::vector<CLMacAddress> &, int, int, int)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }

void sub_1006A2264( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __int16 v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + _Block_object_dispose(&STACK[0x7E0], 8) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(exception_object);
}

void sub_1006A22C4(std::string::size_type a1@<X0>, int *a2@<X1>, std::string::size_type *a3@<X8>)
{
  v48.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&v48, "SELECT rowid, ");
  uint64_t v6 = std::string::append(&v48, "TileDataOffsetBytes");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  int v8 = std::string::append(&v49, ", ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v50, "SizeOfTileDataBytes");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v12 = std::string::append(&v51, " FROM ");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  int v14 = *(char *)(a1 + 23);
  if (v14 >= 0) {
    __int128 v15 = (const std::string::value_type *)a1;
  }
  else {
    __int128 v15 = *(const std::string::value_type **)a1;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a1 + 8);
  }
  int v17 = std::string::append(&v52, v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v19 = std::string::append(&v53, " WHERE ");
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v21 = std::string::append(&v54, "TileX");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v23 = std::string::append(&v55, " = ? AND ");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  char v25 = std::string::append(&v60, "TileY");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v27 = std::string::append(&v58, " = ?;");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  int64_t cap = v27->__r_.__value_.__l.__cap_;
  __int128 v56 = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string::size_type v29 = (char *)&v56;
  }
  else {
    std::string::size_type v29 = (char *)v56;
  }
  sub_1003C0D54(*(void *)(a1 + 120), v29, &v55);
  __int128 v30 = (sqlite3_stmt *)sub_100019240((uint64_t)v55.__r_.__value_.__l.__data_);
  int v32 = *a2;
  int v31 = a2[1];
  if (!sub_1003C28BC(v30, 1, v32) || !sub_1003C28BC(v30, 2, v31))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    std::string v39 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      v58.__r_.__value_.__r.__words[0] = 68289539LL;
      LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
      HIDWORD(v58.__r_.__value_.__r.__words[2]) = v32;
      LOWORD(v59) = 1025;
      *(_DWORD *)((char *)&v59 + 2) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:@TileData, wifi, failed to serialize #tile, x:%{private}d, y:%{private}d}",  (uint8_t *)&v58,  0x1Eu);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
    }

    __int16 v40 = (os_log_s *)qword_101934868;
    if (!os_signpost_enabled((os_log_t)qword_101934868)) {
      goto LABEL_49;
    }
    v58.__r_.__value_.__r.__words[0] = 68289539LL;
    LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
    HIDWORD(v58.__r_.__value_.__r.__words[2]) = v32;
    LOWORD(v59) = 1025;
    *(_DWORD *)((char *)&v59 + 2) = v31;
    int v41 = "@TileData, wifi, failed to serialize #tile";
    char v42 = "{msg%{public}.0s:@TileData, wifi, failed to serialize #tile, x:%{private}d, y:%{private}d}";
    goto LABEL_48;
  }

  LODWORD(v53.__r_.__value_.__l.__data_) = 0;
  if (j__sqlite3_step(v30) != 100)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    char v44 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      v58.__r_.__value_.__r.__words[0] = 68289539LL;
      LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
      HIDWORD(v58.__r_.__value_.__r.__words[2]) = v32;
      LOWORD(v59) = 1025;
      *(_DWORD *)((char *)&v59 + 2) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:@TileData, wifi, failed to find relevant row for #tile, x:%{private}d, y:%{private}d}",  (uint8_t *)&v58,  0x1Eu);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
    }

    __int16 v40 = (os_log_s *)qword_101934868;
    if (!os_signpost_enabled((os_log_t)qword_101934868)) {
      goto LABEL_49;
    }
    v58.__r_.__value_.__r.__words[0] = 68289539LL;
    LOWORD(v58.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(v58.__r_.__value_.__r.__words[2]) = 1025;
    HIDWORD(v58.__r_.__value_.__r.__words[2]) = v32;
    LOWORD(v59) = 1025;
    *(_DWORD *)((char *)&v59 + 2) = v31;
    int v41 = "@TileData, wifi, failed to find relevant row for #tile";
    char v42 = "{msg%{public}.0s:@TileData, wifi, failed to find relevant row for #tile, x:%{private}d, y:%{private}d}";
LABEL_48:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v41,  v42,  (uint8_t *)&v58,  0x1Eu);
LABEL_49:
    *a3 = 0LL;
    goto LABEL_50;
  }

  int v33 = sqlite3_column_int(v30, 0);
  sqlite3_column_int(v30, 1);
  LODWORD(v53.__r_.__value_.__l.__data_) = sqlite3_column_int(v30, 2);
  sqlite3_reset(v30);
  std::string v34 = operator new(0x18uLL);
  sub_1006A334C(v34, SLODWORD(v53.__r_.__value_.__l.__data_));
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::string v35 = (std::string *)operator new(0x20uLL);
  v35->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101848D18;
  v35->__r_.__value_.__l.__size_ = a1;
  v35->__r_.__value_.__l.__cap_ = (std::string::size_type)&v53;
  v35[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  __int16 v59 = v35;
  uint64_t v36 = *(void *)(a1 + 120);
  if (sub_1003BDC2C(v36, "main", (const char *)a1, "TileData", v33, 1, (uint64_t)&v58))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    uint64_t v37 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      v60.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(v60.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:@TileData, wifi, something went wrong trying to dump the #tile data}",  (uint8_t *)&v60,  0x12u);
    }

    std::string::size_type v38 = 0LL;
  }

  else
  {
    std::string::size_type v38 = v54.__r_.__value_.__r.__words[0];
    v54.__r_.__value_.__r.__words[0] = 0LL;
  }

  *a3 = v38;
  int v45 = v59;
  if (v59 == &v58)
  {
    uint64_t v46 = 4LL;
    int v45 = &v58;
  }

  else
  {
    if (!v59) {
      goto LABEL_68;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(v45->__r_.__value_.__r.__words[0] + 8 * v46))();
LABEL_68:
  int v47 = (void **)v54.__r_.__value_.__r.__words[0];
  v54.__r_.__value_.__r.__words[0] = 0LL;
  if (v47) {
    sub_100223734((int)&v54, v47);
  }
LABEL_50:
  std::string::size_type v43 = v55.__r_.__value_.__r.__words[0];
  v55.__r_.__value_.__r.__words[0] = 0LL;
  if (v43) {
    (*(void (**)(std::string::size_type))(*(void *)v43 + 8LL))(v43);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v56);
  }
}

void sub_1006A2A20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,void **__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  __int16 v59 = *(void **)(v57 - 120);
  if (v59 == v56)
  {
    uint64_t v60 = 4LL;
    __int16 v59 = (void *)(v57 - 144);
  }

  else
  {
    if (!v59) {
      goto LABEL_6;
    }
    uint64_t v60 = 5LL;
  }

  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_6:
  __int16 v61 = __p;
  __int128 __p = 0LL;
  if (v61) {
    sub_100223734((int)&__p, v61);
  }
  uint64_t v62 = *(void *)(v57 - 208);
  *(void *)(v57 - 20_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A2BB4(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1006A2BE0(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

__n128 sub_1006A2C14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_101848C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1006A2C54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101848C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_1006A2C7C(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = sqlite3_blob_write(*a2, *(const void **)(**(void **)(a1 + 16) + 40LL), **(_DWORD **)(a1 + 24), 0);
  if (v3)
  {
    int v4 = v3;
    sub_1003B5988(*(void *)(v2 + 120), v3);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    int v5 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      __int128 v10 = "";
      __int16 v11 = 1026;
      int v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:@TileData, wifi, failed to write #blob data to #tile #database, code:%{public}d}",  (uint8_t *)&v7,  0x18u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      __int128 v10 = "";
      __int16 v11 = 1026;
      int v12 = v4;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to write #blob data to #tile #database",  "{msg%{public}.0s:@TileData, wifi, failed to write #blob data to #tile #database, code:%{public}d}",  (uint8_t *)&v7,  0x18u);
    }
  }

uint64_t sub_1006A2E34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1006A2E70()
{
}

void *sub_1006A2E7C(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_1006A2EF4(a1, a2);
    int v4 = (_BYTE *)a1[1];
    int v5 = &v4[11 * a2];
    do
    {
      _BYTE *v4 = 0;
      v4[10] = 0;
      v4 += 11;
    }

    while (v4 != v5);
    a1[1] = v5;
  }

  return a1;
}

void sub_1006A2ED8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x7E0], 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_1006A2EF4(void *a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2LL) {
    sub_100007008();
  }
  __n128 result = (char *)sub_1006A2F48((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[11 * v4];
  return result;
}

void *sub_1006A2F48(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2LL) {
    sub_1000070D4();
  }
  return operator new(11 * a2);
}

__n128 sub_1006A2F98(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &off_101848C98;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1006A2FE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101848C98;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_1006A3010(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2 = **(void **)(a1 + 16);
  if (*(void *)(*(void *)(a1 + 16) + 8LL) != v2)
  {
    unint64_t v4 = 0LL;
    int v5 = *a2;
    uint64_t v23 = *(void *)(a1 + 8);
    do
    {
      int v6 = *(_DWORD *)(a1 + 32);
      unint64_t v7 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_14:
        unint64_t v15 = 0LL;
        uint64_t v16 = 0LL;
        int v17 = 0;
LABEL_23:
        unint64_t v21 = v16 | v15;
        uint64_t v22 = **(void **)(a1 + 24) + 11 * v4;
        *(void *)uint64_t v22 = v21;
        *(_BYTE *)(v22 + 10) = BYTE2(v17);
        *(_WORD *)(v22 + _Block_object_dispose(&STACK[0x7E0], 8) = v17;
      }

      else
      {
        int v8 = 0;
        __int16 v9 = (void *)(v2 + 8 * v4);
        unint64_t v10 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
        while (1)
        {
          int v11 = (v7 & 0x80000000) == 0LL ? v7 : (int)v7 + 1;
          int v12 = v11 >> 1;
          int v13 = sqlite3_blob_read(v5, &Z, 10, v6 + 10 * (v11 >> 1));
          if (v13) {
            break;
          }
          uint64_t Z = sub_100C74EF0((uint64_t)&Z);
          unsigned __int16 v26 = v14;
          unint64_t v24 = sub_1007EC028((unsigned __int8 *)&Z);
          if (sub_1007EC0B0(&v24, v9))
          {
            unint64_t v15 = Z & 0xFFFFFFFFFFFFFF00LL;
            int v17 = v26 | 0x10000;
            uint64_t v16 = Z;
            goto LABEL_23;
          }

          if (sub_1007EC0D8(&v24, v9)) {
            int v8 = v12 + 1;
          }
          else {
            LODWORD(sub_100682EF0(v11, v10) = v12 - 1;
          }
          LODWORD(v7) = v8 + v10;
        }

        int v18 = v13;
        sub_1003B5988(*(void *)(v23 + 120), v13);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848BB8);
        }
        uint64_t v19 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
        {
          uint64_t Z = 68289282LL;
          unsigned __int16 v26 = 2082;
          __int128 v27 = "";
          __int16 v28 = 1026;
          int v29 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:@TileData, wifi, failed to read #blob data from #tile #database, code:%{public}d}",  (uint8_t *)&Z,  0x18u);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848BB8);
          }
        }

        __int128 v20 = (os_log_s *)qword_101934868;
        if (os_signpost_enabled((os_log_t)qword_101934868))
        {
          uint64_t Z = 68289282LL;
          unsigned __int16 v26 = 2082;
          __int128 v27 = "";
          __int16 v28 = 1026;
          int v29 = v18;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to read #blob data from #tile #database",  "{msg%{public}.0s:@TileData, wifi, failed to read #blob data from #tile #database, code:%{public}d}",  (uint8_t *)&Z,  0x18u);
        }
      }

      ++v4;
      uint64_t v2 = **(void **)(a1 + 16);
    }

    while (v4 < (*(void *)(*(void *)(a1 + 16) + 8LL) - v2) >> 3);
  }

uint64_t sub_1006A3304(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1006A3340()
{
}

void *sub_1006A334C(void *a1, size_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_1006A33BC(a1, a2);
    unint64_t v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }

  return a1;
}

void sub_1006A33A0(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x7E0], 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_1006A33BC(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_100007008();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

__n128 sub_1006A3404(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_101848D18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1006A3444(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101848D18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_1006A346C(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v3 = **(void **)(a1 + 24);
  if (*(void *)(v3 + 8) == *(void *)v3) {
    sub_100092C20();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = sqlite3_blob_read(*a2, *(void **)v3, **(_DWORD **)(a1 + 16), 0);
  if (v5)
  {
    sub_1003B5988(*(void *)(v4 + 120), v5);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848BB8);
    }
    int v6 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:@TileData, wifi, failed to incrementally read contents of blob from #tile header}",  (uint8_t *)&v10,  0x12u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101848BB8);
      }
    }

    unint64_t v7 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "@TileData, wifi, failed to incrementally read contents of blob from #tile header",  "{msg%{public}.0s:@TileData, wifi, failed to incrementally read contents of blob from #tile header}",  (uint8_t *)&v10,  0x12u);
    }

    int v8 = *(void ****)(a1 + 24);
    __int16 v9 = *v8;
    *int v8 = 0LL;
    if (v9) {
      sub_100223734((int)v8, v9);
    }
  }

uint64_t sub_1006A362C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1006A3668()
{
}

void sub_1006A3674()
{
  qword_101997B00 = (uint64_t)"TileX";
  dword_101997B08 = 1;
  word_101997B0C = 1;
  byte_101997B10 = 0;
  byte_101997B28 = 0;
  qword_101997B30 = (uint64_t)"TileY";
  dword_101997B38 = 1;
  word_101997B3C = 1;
  byte_101997B40 = 0;
  byte_101997B58 = 0;
  qword_101997B60 = (uint64_t)"TileDataOffsetBytes";
  dword_101997B68 = 1;
  word_101997B6C = 0;
  byte_101997B70 = 0;
  byte_101997B88 = 0;
  qword_101997B90 = (uint64_t)"SizeOfTileDataBytes";
  dword_101997B98 = 1;
  word_101997B9C = 0;
  byte_101997BA0 = 0;
  byte_101997BB8 = 0;
  qword_101997BC0 = (uint64_t)"TileData";
  dword_101997BC8 = 4;
  word_101997BCC = 0;
  byte_101997BD0 = 0;
  byte_101997BE8 = 0;
  qword_101997BF0 = 0LL;
  dword_101997BF8 = 5;
  word_101997BFC = 0;
  byte_101997C00 = 0;
  byte_101997C18 = 0;
}

BOOL sub_1006A372C(void *a1, _WORD *a2)
{
  if ((unint64_t)[a1 length] > 1)
  {
    int v8 = *(unsigned __int16 *)[a1 bytes];
    if (a2)
    {
      *a2 = v8;
    }

    else
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      __int16 v9 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Invalid version parameter.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        v11[0] = 0;
        int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Invalid version parameter.",  v11,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)",  "%s\n",  v10);
      }
    }

    return v8 == 2;
  }

  else
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    uint64_t v4 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "GYTT data not long enough to get version properly",  buf,  2u);
    }

    BOOL v5 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      v11[0] = 0;
      unint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "GYTT data not long enough to get version properly",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)",  "%s\n",  v7);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1006A3A28(void *a1)
{
  CFTypeRef cf = 0LL;
  uint64_t v2 = sub_1006E27E8();
  sub_100413284(v2, buf);
  int v3 = sub_1002A6E78(*(uint64_t *)&buf[0], "GYTTOverride", &cf, 0xFFFFFFFFLL);
  int v4 = v3;
  BOOL v5 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_5;
  }
  int v6 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4) {
      goto LABEL_6;
    }
  }

  else
  {
LABEL_5:
    if (v3)
    {
LABEL_6:
      CFRetain(cf);
      goto LABEL_10;
    }
  }

  int v29 = @"name";
  __int128 v30 = @"gyro";
  int v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL);
  __int128 v27 = @"IOPropertyMatch";
  __int16 v28 = v8;
  io_service_t MatchingService = IOServiceGetMatchingService( kIOMainPortDefault,  (CFDictionaryRef) +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
  io_object_t v10 = MatchingService;
  if (!MatchingService)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101848DA8);
    }
    int v18 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Service doesn't exist", (uint8_t *)buf, 2u);
    }

    uint64_t result = sub_1002921D0(115, 0);
    if (!(_DWORD)result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101848DA8);
    }
    LOWORD(v24) = 0;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Service doesn't exist",  &v24,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v19);
    goto LABEL_62;
  }

  CFTypeRef cf = IORegistryEntryCreateCFProperty(MatchingService, @"gyro-temp-table", kCFAllocatorDefault, 0);
  IOObjectRelease(v10);
LABEL_10:
  if (!cf || (CFTypeID v11 = CFGetTypeID(cf), v11 != CFDataGetTypeID()))
  {
    if ((sub_1004F97F4() & 0x80000) != 0)
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      int v17 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "No optional GYTT data found",  (uint8_t *)buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      LOWORD(v24) = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "No optional GYTT data found",  &v24,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v16);
    }

    else
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      unint64_t v15 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Cannot get GYTT property",  (uint8_t *)buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      LOWORD(v24) = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Cannot get GYTT property",  &v24,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v16);
    }

void sub_1006A41C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1006A41DC(void *a1)
{
  uint64_t v2 = (char *)[a1 bytes];
  id result = [a1 length];
  if ((unint64_t)result >= 4)
  {
    unint64_t v4 = (unint64_t)result;
    uint64_t v5 = 0LL;
    do
    {
      unsigned int v6 = bswap32(*(_DWORD *)&v2[v5]);
      id result = objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", v5, 4, &v6, 4);
      v5 += 4LL;
      v4 -= 4LL;
    }

    while (v4 > 3);
  }

  return result;
}

id sub_1006A425C(void *a1)
{
  uint64_t v2 = [a1 bytes];
  __int16 v3 = v2[2];
  __int16 v6 = -v2[3];
  __int16 v5 = v3;
  objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", 4, 2, &v6, 2);
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", 6, 2, &v5, 2);
}

void sub_1006A42C8(void **a1)
{
  char v44 = 0LL;
  if ((sub_1006A3A28(&v44) & 1) != 0)
  {
    unsigned __int16 v43 = -1;
    if (!sub_1006A372C(v44, &v43))
    {
      sub_1004F2598();
      if (sub_1004F2690() - 191 >= 2)
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        std::string v35 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67240448;
          *(_DWORD *)std::string v55 = v43;
          *(_WORD *)&v55[4] = 1026;
          *(_DWORD *)&v55[6] = 2;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_FAULT,  "GYTT version (%{public}u) does not match expected version (%{public}u)",  buf,  0xEu);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_87;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        int v45 = 67240448;
        *(_DWORD *)uint64_t v46 = v43;
        *(_WORD *)&v46[4] = 1026;
        *(_DWORD *)&v46[6] = 2;
        std::string v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "GYTT version (%{public}u) does not match expected version (%{public}u)",  &v45,  14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v34);
        goto LABEL_99;
      }

      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101848D88);
      }
      int v31 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Attempting GYTT recovery!", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        LOWORD(v45) = 0;
        std::string::size_type v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Attempting GYTT recovery!",  &v45,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v38);
      }

      id v32 = [v44 mutableCopy];

      char v44 = v32;
      sub_1006A41DC(v32);
      if (!sub_1006A372C(v44, &v43))
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        uint64_t v36 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67240448;
          *(_DWORD *)std::string v55 = v43;
          *(_WORD *)&v55[4] = 1026;
          *(_DWORD *)&v55[6] = 2;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "After recovery, GYTT version (%{public}u) still does not match expected version (%{public}u)",  buf,  0xEu);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_87;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101848D88);
        }
        int v45 = 67240448;
        *(_DWORD *)uint64_t v46 = v43;
        *(_WORD *)&v46[4] = 1026;
        *(_DWORD *)&v46[6] = 2;
        LODWORD(v39) = 14;
        std::string v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "After recovery, GYTT version (%{public}u) still does not match expected version (%{public}u)",  &v45,  *(void *)&v39);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v34);
        goto LABEL_99;
      }

      sub_1004F2598();
    }

    uint64_t v2 = (char *)[v44 bytes];
    __int16 v3 = (char *)[v44 length];
    if ((unint64_t)(v3 - 10) > 0xFFFFFFFFFFFFFFF7LL)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 2LL;
      *(void *)&__int128 v4 = 134349056LL;
      __int128 v40 = v4;
      do
      {
        uint64_t v42 = *(void *)&v2[v6];
        float v7 = (float)(__int16)v42 * 0.0039062;
        if (v7 > 100.0)
        {
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_101848D88);
          }
          int v8 = (os_log_s *)off_101934598;
          if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::stringbuf::string_type buf = v40;
            *(double *)std::string v55 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Invalid GYTT temperature %{public}f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934590 != -1) {
              dispatch_once(&qword_101934590, &stru_101848D88);
            }
            int v45 = v40;
            *(double *)uint64_t v46 = v7;
            LODWORD(v39) = 12;
            int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Invalid GYTT temperature %{public}f",  &v45,  *(void *)&v39);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v29);
          }
        }

        float v9 = (float)SWORD1(v42) * 0.0039062;
        float v10 = (float)SWORD2(v42) * 0.0039062;
        float v11 = (float)SHIWORD(v42) * 0.0039062;
        if (v42)
        {
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_101848D88);
          }
          CFTypeRef v12 = (os_log_s *)off_101934598;
          if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 134219008;
            *(void *)std::string v55 = v5;
            *(_WORD *)&v55[8] = 2048;
            double v56 = v7;
            __int16 v57 = 2048;
            double v58 = v9;
            __int16 v59 = 2048;
            double v60 = v10;
            __int16 v61 = 2048;
            double v62 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Reading GYTT point %zu: %f,%f,%f,%f",  buf,  0x34u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934590 != -1) {
              dispatch_once(&qword_101934590, &stru_101848D88);
            }
            int v45 = 134219008;
            *(void *)uint64_t v46 = v5;
            *(_WORD *)&v46[8] = 2048;
            double v47 = v7;
            __int16 v48 = 2048;
            double v49 = v9;
            __int16 v50 = 2048;
            double v51 = v10;
            __int16 v52 = 2048;
            double v53 = v11;
            LODWORD(v39) = 52;
            __int16 v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "Reading GYTT point %zu: %f,%f,%f,%f",  (size_t)&v45,  v39,  *(double *)&v40,  *((double *)&v40 + 1),  v41);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v28);
          }

          int v13 = (float *)a1[1];
          unint64_t v14 = (unint64_t)a1[2];
          if ((unint64_t)v13 >= v14)
          {
            uint64_t v18 = ((char *)v13 - (_BYTE *)*a1) >> 4;
            unint64_t v19 = v18 + 1;
            uint64_t v20 = v14 - (void)*a1;
            if (v20 >> 3 > v19) {
              unint64_t v19 = v20 >> 3;
            }
            else {
              unint64_t v21 = v19;
            }
            uint64_t v22 = (char *)sub_100037038((uint64_t)(a1 + 2), v21);
            int v24 = (float *)&v22[16 * v18];
            float *v24 = v7;
            v24[1] = v9;
            void v24[2] = v10;
            void v24[3] = v11;
            unsigned __int16 v26 = (char *)*a1;
            CFTypeRef v25 = (char *)a1[1];
            __int128 v27 = v24;
            if (v25 != *a1)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
                v27 -= 4;
                v25 -= 16;
              }

              while (v25 != v26);
              CFTypeRef v25 = (char *)*a1;
            }

            unint64_t v15 = v24 + 4;
            *a1 = v27;
            a1[1] = v24 + 4;
            a1[2] = &v22[16 * v23];
            if (v25) {
              operator delete(v25);
            }
          }

          else
          {
            *int v13 = v7;
            v13[1] = v9;
            unint64_t v15 = v13 + 4;
            void v13[2] = v10;
            uint64_t v13[3] = v11;
          }

          a1[1] = v15;
          ++v5;
        }

        else
        {
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_101848D88);
          }
          uint64_t v16 = (os_log_s *)off_101934598;
          if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 134219008;
            *(void *)std::string v55 = v5;
            *(_WORD *)&v55[8] = 2048;
            double v56 = v7;
            __int16 v57 = 2048;
            double v58 = v9;
            __int16 v59 = 2048;
            double v60 = v10;
            __int16 v61 = 2048;
            double v62 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Skipping GYTT point %zu: %f,%f,%f,%f",  buf,  0x34u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934590 != -1) {
              dispatch_once(&qword_101934590, &stru_101848D88);
            }
            int v45 = 134219008;
            *(void *)uint64_t v46 = v5;
            *(_WORD *)&v46[8] = 2048;
            double v47 = v7;
            __int16 v48 = 2048;
            double v49 = v9;
            __int16 v50 = 2048;
            double v51 = v10;
            __int16 v52 = 2048;
            double v53 = v11;
            LODWORD(v39) = 52;
            int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "Skipping GYTT point %zu: %f,%f,%f,%f",  (size_t)&v45,  v39,  *(double *)&v40,  *((double *)&v40 + 1),  v41);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v17);
          }
        }

        v6 += 8LL;
      }

      while ((unint64_t)&v3[-v6] > 7);
    }

    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    int v33 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(void *)std::string v55 = v5;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%zu GYTT points found", buf, 0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_87;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    int v45 = 134217984;
    *(void *)uint64_t v46 = v5;
    std::string v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "%zu GYTT points found",  (size_t)&v45);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v34);
LABEL_99:
LABEL_87:

    return;
  }

  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101848D88);
  }
  __int128 v30 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to read GYTT.", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    LOWORD(v45) = 0;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Failed to read GYTT.",  &v45,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)",  "%s\n",  v37);
  }
}

void sub_1006A5044(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1006A5070(id a1)
{
  qword_1019344C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void *sub_1006A509C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101997C28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_101997C28)) {
    __cxa_guard_release(&qword_101997C28);
  }
  return &unk_101997C20;
}

uint64_t sub_1006A50E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnalyticsSendEventLazy(a2, a3);
}

uint64_t sub_1006A50F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_101848DD8;
  sub_10001A504(a1 + 8, a3);
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_1006A5130(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return 1LL;
  }
  __int16 v3 = operator new(4uLL);
  __int128 __p = v3;
  *__int16 v3 = 0;
  int v13 = v3 + 1;
  unint64_t v14 = v3 + 1;
  __int16 v17 = 0;
  *(_OWORD *)uint64_t v16 = xmmword_1012E1E90;
  memset(&v16[2], 0, 135);
  __int128 v18 = xmmword_1012E1E90;
  uint64_t v19 = 0LL;
  int v20 = 0;
  v22[0] = 0LL;
  uint64_t v21 = 0LL;
  *(void *)((char *)v22 + 5) = 0LL;
  *(void *)((char *)&v22[1] + 6) = 0LL;
  char v23 = 0;
  memset(&v22[3], 0, 24);
  __int128 v24 = xmmword_1012E1E90;
  uint64_t v25 = 0LL;
  int v26 = 0;
  unint64_t v27 = 0xFFEFFFFFFFFFFFFFLL;
  int v38 = 0;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  int v33 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  memset(v37, 0, sizeof(v37));
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  unint64_t v41 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v42 = 0LL;
  int v43 = 0;
  uint64_t v49 = 0LL;
  __int16 v50 = 0;
  int v55 = 0;
  int v48 = 0;
  __int128 v47 = 0u;
  __int128 v46 = 0u;
  __int128 v45 = 0u;
  __int128 v44 = 0u;
  __int128 v52 = 0u;
  __int128 v51 = 0u;
  char v53 = 0;
  memset(v54, 0, sizeof(v54));
  unint64_t v56 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  uint64_t v76 = 0LL;
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  unint64_t v82 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v83 = 0LL;
  int v84 = 0;
  uint64_t v85 = 0LL;
  char v86 = 0;
  unint64_t v87 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v89 = 0LL;
  uint64_t v88 = 0LL;
  uint64_t v90 = 0x80000000800000LL;
  uint64_t v92 = 0LL;
  uint64_t v91 = 0LL;
  __int128 v93 = xmmword_1012E1EA0;
  uint64_t v94 = 0x80000000800000LL;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  uint64_t v97 = 0LL;
  unint64_t v98 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  int v105 = 0;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v107 = 0;
  int v108 = 0;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v110 = 7LL;
  unint64_t v111 = 0xFFEFFFFFFFFFFFFFLL;
  char v112 = 0;
  uint64_t v114 = 0LL;
  uint64_t v113 = 0LL;
  uint64_t v115 = 0LL;
  uint64_t v1 = sub_100CDB578(*(double **)(a1 + 40), &__p, (uint64_t)v16);
  if ((v1 & 1) != 0)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101848E00);
    }
    __int128 v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Started Tier2 smoother.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101848E00);
      }
      __int16 v11 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Started Tier2 smoother.",  &v11,  2);
      float v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWorkoutLabeler::startTier2SmootherIfNecessary()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    sub_100672E64((uint64_t)v16, (uint64_t)buf);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = operator new(0x2100uLL);
    sub_10048029C((uint64_t)v6, (uint64_t)buf, v5);
    float v7 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v6;
    if (v7)
    {
      operator delete(v7);
      uint64_t v6 = *(void **)(a1 + 48);
    }

    sub_10048158C((uint64_t)v6, *(unsigned __int8 *)(a1 + 56));
  }

  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }

  return v1;
}

void sub_1006A5564( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A5598(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101848E00);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped Tier2 smoother.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101848E00);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Stopped Tier2 smoother.",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutLabeler::stopTier2Smoother()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  __int16 v3 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  if (v3) {
    operator delete(v3);
  }
}

void *sub_1006A573C(void *a1)
{
  *a1 = off_101848DD8;
  sub_1006A5598((uint64_t)a1);
  uint64_t v2 = (void *)a1[6];
  a1[6] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  __int16 v3 = (void *)a1[4];
  if (v3 == a1 + 1)
  {
    uint64_t v4 = 4LL;
    __int16 v3 = a1 + 1;
    goto LABEL_7;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1006A57B4(void *a1)
{
  uint64_t v1 = sub_1006A573C(a1);
  operator delete(v1);
}

uint64_t sub_1006A57C8(uint64_t a1)
{
  uint64_t result = sub_1006A5130(a1);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1004802F0(*(void *)(a1 + 48), (uint64_t)&v7);
    if ((_DWORD)result)
    {
      memset(&v21[8], 0, 192);
      __int128 v19 = v7;
      __int128 v20 = v8;
      *(void *)uint64_t v21 = v9;
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101848E00);
      }
      __int16 v3 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109376;
        int v16 = DWORD2(v7);
        __int16 v17 = 1024;
        int v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Tier2Smoothed,%d,Confidence,%d", buf, 0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101848E00);
        }
        v12[0] = 67109376;
        v12[1] = DWORD2(v7);
        __int16 v13 = 1024;
        int v14 = v8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Tier2Smoothed,%d,Confidence,%d",  v12,  14);
        uint64_t v6 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLWorkoutLabeler::update()", "%s\n", v5);
        if (v6 != buf) {
          free(v6);
        }
      }

      v10[12] = *(_OWORD *)&v21[160];
      v10[13] = *(_OWORD *)&v21[176];
      uint64_t v11 = *(void *)&v21[192];
      _WORD v10[8] = *(_OWORD *)&v21[96];
      v10[9] = *(_OWORD *)&v21[112];
      v10[10] = *(_OWORD *)&v21[128];
      v10[11] = *(_OWORD *)&v21[144];
      _DWORD v10[4] = *(_OWORD *)&v21[32];
      v10[5] = *(_OWORD *)&v21[48];
      v10[6] = *(_OWORD *)&v21[64];
      v10[7] = *(_OWORD *)&v21[80];
      v10[0] = v19;
      v10[1] = v20;
      _DWORD v10[2] = *(_OWORD *)v21;
      v10[3] = *(_OWORD *)&v21[16];
      *(_DWORD *)std::stringbuf::string_type buf = 4;
      uint64_t v4 = *(void *)(a1 + 32);
      if (!v4) {
        sub_100008BDC();
      }
      return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *))(*(void *)v4 + 48LL))(v4, buf, v10);
    }
  }

  return result;
}

void sub_1006A5A70(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_1006A5A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (sub_1001B9A1C())
  {
    uint64_t v6 = operator new(0xDF0uLL);
    uint64_t result = sub_100A21CC0((uint64_t)v6, a1, a2);
  }

  else
  {
    sub_1004F2598();
    if (sub_1004F7000())
    {
      uint64_t v6 = operator new(0xDF0uLL);
      uint64_t result = sub_100A21AA8((uint64_t)v6, a1, a2);
      void *v6 = &off_101832A18;
    }

    else
    {
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_101848E20);
      }
      __int128 v8 = (os_log_s *)qword_101934758;
      if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Indoor outdoor detection running on unsupported platform, defaulting to watch version",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934750 != -1) {
          dispatch_once(&qword_101934750, &stru_101848E20);
        }
        v10[0] = 0;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  16LL,  "Indoor outdoor detection running on unsupported platform, defaulting to watch version",  v10,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static std::unique_ptr<CLIndoorOutdoorDetectorInterface> CLIndoorOutdoorDetectorInterface::create(CLOutdoorSou rces &, CLIndoorOutdoorProtocol *)",  "%s\n",  v9);
      }

      uint64_t v6 = operator new(0xDF0uLL);
      uint64_t result = sub_100A21CC0((uint64_t)v6, a1, a2);
    }
  }

  *a3 = v6;
  return result;
}

void sub_1006A5CB8(_Unwind_Exception *a1)
{
}

void sub_1006A5CDC(id a1)
{
  qword_101934758 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

BOOL sub_1006A5F60(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_37;
          }

          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            int v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_40;
          }
        }

        int v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v1_Block_object_dispose(&STACK[0x7E0], 8) = v14;
        goto LABEL_41;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0LL;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        int v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_38;
      }

      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        int v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_40;
      }
    }

    int v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1006A64D8()
{
  if (qword_101997C30 != -1) {
    dispatch_once(&qword_101997C30, &stru_101848E40);
  }
  return qword_1019A14D0;
}

void sub_1006A6518(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (*(void *)(a1 + 48) == a2)
  {
    if (a4 == 30)
    {
      __int16 v8 = *(_WORD *)(a3 + 7);
      unsigned __int8 v9 = a3[17];
      int v10 = *(_DWORD *)(a3 + 26);
      *(void *)std::stringbuf::string_type buf = *(void *)(a3 + 9);
      *(_WORD *)&buf[20] = v8;
      unsigned __int8 v31 = v9;
      *(void *)&uint8_t buf[8] = *(void *)(a3 + 18);
      *(_DWORD *)&uint8_t buf[16] = v10;
      *(void *)__int128 v29 = sub_101171C7C(*(unint64_t *)buf);
      uint64_t v11 = buf;
      uint64_t v12 = a1;
      uint64_t v13 = 0LL;
      uint64_t v14 = 23LL;
LABEL_13:
      sub_1006DD528(v12, v13, (uint64_t)v11, v14);
      return;
    }

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    char v16 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      *(void *)&uint8_t buf[4] = a4;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = 30LL;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Bad motion report input %ld, expected %lu",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 == -1)
    {
LABEL_25:
      LODWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "Bad motion report input %ld, expected %lu",  v29,  v28);
LABEL_64:
      __int128 v24 = (char *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)",  "%s\n",  v7);
      if (v24 != buf) {
        free(v24);
      }
      return;
    }

_BYTE *sub_1006A6DA0(_BYTE *result, uint64_t a2, int a3)
{
  uint64_t v4 = (uint64_t)result;
  if (*((void *)result + 5) == a2)
  {
    char v8 = a3;
    double v7 = sub_101171D38();
    uint64_t result = (_BYTE *)sub_1006DD528(v4, 2LL, (uint64_t)&v8, 1LL);
    *(_BYTE *)(v4 + 91) = v8;
    if (a3)
    {
      uint64_t result = (_BYTE *)sub_1006A7BD4();
      if (*(unsigned __int8 *)(v4 + 89) != (_DWORD)result)
      {
        char v6 = (char)result;
        v9[0] = -60;
        v9[1] = (_BYTE)result;
        uint64_t result = objc_msgSend(*(id *)(v4 + 40), "setReport:payload:length:", 196, v9, 2, *(void *)&v7);
        if ((_DWORD)result) {
          *(_BYTE *)(v4 + 89) = v6;
        }
      }
    }

    else
    {
      *(_BYTE *)(v4 + 89) = 0;
    }
  }

  else if (*((void *)result + 6) == a2)
  {
    if (a3)
    {
      uint64_t result = (_BYTE *)sub_1006A7938();
      if (*(unsigned __int8 *)(v4 + 90) != (_DWORD)result)
      {
        char v5 = (char)result;
        v10[0] = 105;
        v10[1] = (_BYTE)result;
        uint64_t result = [*(id *)(v4 + 48) setReport:105 payload:v10 length:2];
        if ((_DWORD)result) {
          *(_BYTE *)(v4 + 90) = v5;
        }
      }
    }

    else
    {
      result[90] = 0;
    }
  }

  return result;
}

CFIndex sub_1006A6EF0(uint64_t a1, uint64_t a2)
{
  CFIndex result = IOHIDEventConformsTo(a2, 17LL);
  if ((_DWORD)result)
  {
    CFIndex result = IOHIDEventGetChildren(a2);
    if (result)
    {
      char v5 = (const __CFArray *)result;
      CFIndex result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        CFIndex v6 = result;
        for (CFIndex i = 0LL; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
          CFIndex result = IOHIDEventGetType(ValueAtIndex);
          if ((_DWORD)result == 11)
          {
            CFIndex result = IOHIDEventGetIntegerValue(ValueAtIndex, 720905LL);
            int v9 = result == 1;
            if (*(unsigned __int8 *)(a1 + 72) != v9)
            {
              BOOL v10 = result == 1;
              CFIndex result = sub_1006DD65C(a1, 3LL, (uint64_t)&v10, 1LL);
              *(_BYTE *)(a1 + 72) = v9;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1006A7014(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 91))
  {
    uint64_t v3 = result;
    if (a2 == 1)
    {
      char v4 = 2;
    }

    else
    {
      if (a2 != 3) {
        return result;
      }
      char v4 = 1;
    }

    HIBYTE(v9) = v4;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    char v5 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      *(void *)&uint8_t buf[4] = off_101939A38(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "iPad Hall Effect sensor detected the cover was, %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101848ED8);
      }
      uint64_t v6 = qword_1019345C8;
      int v10 = 138412290;
      uint64_t v11 = off_101939A38(a2);
      LODWORD(v9) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  1LL,  "iPad Hall Effect sensor detected the cover was, %@",  &v10,  v9);
      char v8 = (char *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKeyboardMotionNotifier::onSmartCoverOpened(SBSSmartCoverState)",  "%s\n",  v7);
    }

    *(void *)std::stringbuf::string_type buf = sub_101171D38();
    return sub_1006DD528(v3, 4LL, (uint64_t)&v9 + 7, 1LL);
  }

  return result;
}

void sub_1006A722C()
{
  if (qword_101997C30 != -1) {
    dispatch_once(&qword_101997C30, &stru_101848E40);
  }
  sub_1006A726C(qword_1019A14D0);
}

void sub_1006A726C(uint64_t a1)
{
  int v2 = sub_1006A7BD4();
  int v3 = sub_1006A7938();
  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101848ED8);
  }
  char v4 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2;
    LOWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    int v23 = 67109376;
    BOOL v24 = v2;
    __int16 v25 = 1024;
    int v26 = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d",  &v23,  14);
    char v19 = (uint8_t *)v18;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  sub_1006A78BC((id *)a1, v3);
  if (*(unsigned __int8 *)(a1 + 89) != v2)
  {
    buf[0] = -60;
    buf[1] = v2;
  }

  if (*(unsigned __int8 *)(a1 + 90) != v3)
  {
    buf[0] = 105;
    buf[1] = v3;
  }

  BOOL v22 = 0;
  sub_1002F0B04(buf);
  int v5 = sub_1002A6F64(*(uint64_t *)buf, "MotionLoggerLogKeyboardMotion", &v22);
  int v6 = v5;
  double v7 = v28;
  if (!v28) {
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6) {
      return;
    }
  }

  else
  {
LABEL_16:
    if (!v5) {
      return;
    }
  }

  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101848ED8);
  }
  int v10 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "KeyboardMotion,Msl Logging,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    int v23 = 67109120;
    BOOL v24 = v22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "KeyboardMotion,Msl Logging,%d",  &v23);
    char v21 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  sub_1002F0B04(buf);
  sub_1002AB3FC(*(uint64_t *)buf, "MslLogger.Enable", &v22);
  uint64_t v11 = v28;
  if (v28)
  {
    uint64_t v12 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1002F0B04(buf);
  if (v22) {
    int v14 = 15;
  }
  else {
    int v14 = 255;
  }
  int v23 = v14;
  sub_1002AC220(*(uint64_t *)buf, "MslLogger.FlushTimeout", &v23);
  int v15 = v28;
  if (v28)
  {
    char v16 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_1006A772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1006A7750(id a1)
{
  if (sub_1004F75F8())
  {
    uint64_t v1 = operator new(0x60uLL);
    sub_1006A77A0(v1);
    qword_1019A14D0 = (uint64_t)v1;
  }

void sub_1006A778C(_Unwind_Exception *a1)
{
}

void *sub_1006A77A0(void *a1)
{
  uint64_t v2 = sub_1006DC9EC((uint64_t)a1, (uint64_t)"CLKeyboardMotionNotifier", 5);
  *(void *)uint64_t v2 = off_101848E70;
  *(_OWORD *)(v2 + 32) = 0u;
  int v3 = (void *)(v2 + 32);
  *(void *)(v2 + 80) = 0LL;
  char v4 = (void *)(v2 + 80);
  *(_OWORD *)(v2 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(v2 + 57) = 0u;
  *(_DWORD *)(v2 + 87) = 0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_1006A722C,  @"com.apple.locationd.KeyboardMotion.DataCollectionMode",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  a1[7] = objc_opt_new(&OBJC_CLASS___CLKeyboardMotionAdapter);
  *int v3 = -[CLHidManager initWithDelegate:queue:]( objc_alloc(&OBJC_CLASS___CLHidManager),  "initWithDelegate:queue:",  a1[7],  dispatch_get_global_queue(0LL, 0LL));
  void *v4 =  -[objc_class registerSmartCoverStateObserver:]( -[objc_class sharedInstance](off_101939A30(), "sharedInstance"),  "registerSmartCoverStateObserver:",  a1[7]);
  int v6 = sub_1006A7938();
  sub_1006A78BC((id *)a1, v6);
  return a1;
}

void sub_1006A78A8(_Unwind_Exception *a1)
{
}

id *sub_1006A78BC(id *result, int a2)
{
  uint64_t v2 = (uint64_t)result;
  if (a2)
  {
    if (!result[5])
    {
      CFIndex result = (id *)[result[4] registerForDeviceMatching:&off_1018D6968];
      *(void *)(v2 + 40) = result;
    }
  }

  else
  {
    CFIndex result = (id *)sub_1006DD950((uint64_t)result, 1);
    if (!result)
    {
      CFIndex result = (id *)sub_1006DD950(v2, 2);
      if (!result)
      {
        CFIndex result = (id *)sub_1006DD950(v2, 4);
        if (!result)
        {
          CFIndex result = (id *)[*(id *)(v2 + 32) unregisterForDeviceMatching:*(void *)(v2 + 40)];
          *(void *)(v2 + 40) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1006A7938()
{
  BOOL v7 = 0;
  sub_1002F0B04(&v5);
  unsigned int v0 = sub_1002A6F64(v5, "EnableKeyboardMotionAccelStream", &v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v7) {
    return v0;
  }
  else {
    return 0LL;
  }
}

void sub_1006A79C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1006A79D8(id *a1)
{
  *a1 = off_101848E70;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  a1,  @"com.apple.locationd.KeyboardMotion.DataCollectionMode",  0LL);

  [a1[10] invalidate];
  return sub_1006DCAA8(a1);
}

void sub_1006A7A54(id *a1)
{
  uint64_t v1 = sub_1006A79D8(a1);
  operator delete(v1);
}

void sub_1006A7A68(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      if (a3)
      {
        if (!*(void *)(a1 + 48)) {
          *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = [*(id *)(a1 + 32) registerForDeviceMatching:&off_1018D68A0];
        }
      }

      else
      {
        [*(id *)(a1 + 32) unregisterForDeviceMatching:*(void *)(a1 + 48)];

        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
      }

      break;
    case 1:
    case 4:
      sub_1006A78BC((id *)a1, a3 != 0);
      break;
    case 2:
      sub_1006A78BC((id *)a1, a3 != 0);
      if (a3)
      {
        sub_101171D38();
        sub_1006DD528(a1, 2LL, a1 + 91, 1LL);
      }

      break;
    case 3:
      uint64_t v5 = *(void **)(a1 + 64);
      if (a3)
      {
        if (!v5)
        {
          int v6 = -[CLHidEventMonitorManager initWithDelegate:queue:matching:]( objc_alloc(&OBJC_CLASS___CLHidEventMonitorManager),  "initWithDelegate:queue:matching:",  *(void *)(a1 + 56),  dispatch_get_global_queue(0LL, 0LL),  &off_1018D6940);
          *(void *)(a1 + 64) = v6;
          -[CLHidEventMonitorManager addSystemClientMatching:](v6, "addSystemClientMatching:", &off_1018D6940);
        }
      }

      else
      {
        _[v5 removeSystemClientmatching:&off_1018D6940];
      }

      break;
    default:
      return;
  }

uint64_t sub_1006A7BD4()
{
  BOOL v7 = 0;
  sub_1002F0B04(&v5);
  unsigned int v0 = sub_1002A6F64(v5, "EnableKeyboardMotionDataCollectionMode", &v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v7) {
    return v0;
  }
  else {
    return 0LL;
  }
}

void sub_1006A7C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

Class sub_1006A7C74()
{
  if (qword_101997C40 != -1) {
    dispatch_once(&qword_101997C40, &stru_101848EB8);
  }
  Class result = objc_getClass("SBSSmartCoverService");
  qword_101997C38 = (uint64_t)result;
  off_101939A30 = sub_1006A7CD0;
  return result;
}

uint64_t sub_1006A7CD0()
{
  return qword_101997C38;
}

void sub_1006A7CDC(id a1)
{
  qword_101997C48 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices",  2);
}

void sub_1006A7D04(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

BOOL sub_1006A7D30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && a1[1] == a2[1]
    && a1[2] == a2[2]
    && (*(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3)
      ? (BOOL v2 = *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7))
      : (BOOL v2 = 0),
        v2))
  {
    return a1[9] == a2[9];
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1006A7D98(uint64_t a1)
{
  if (qword_101997C40 != -1) {
    dispatch_once(&qword_101997C40, &stru_101848EB8);
  }
  off_101939A38 = (uint64_t (*)())dlsym((void *)qword_101997C48, "NSStringFromSBSSmartCoverState");
  return ((uint64_t (*)(uint64_t))off_101939A38)(a1);
}

uint64_t sub_1006A7E04(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_101997C68);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_101997C68))
  {
    *(void *)__int128 __p = 3LL;
    sub_1002C72A8(qword_101997C50, __p, 2uLL);
    __cxa_atexit((void (*)(void *))sub_1002C7328, qword_101997C50, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101997C68);
  }

  *(void *)(a1 + 400) = 0LL;
  __int16 v134 = 0;
  v131[0] = xmmword_1012E1E90;
  memset(&v131[1], 0, 96);
  __int128 v132 = 0u;
  memset(v133, 0, sizeof(v133));
  __int128 v135 = xmmword_1012E1E90;
  uint64_t v136 = 0LL;
  int v137 = 0;
  v139[0] = 0LL;
  uint64_t v138 = 0LL;
  *(void *)((char *)v139 + 5) = 0LL;
  *(void *)((char *)&v139[1] + 6) = 0LL;
  double v141 = 0.0;
  char v142 = 0;
  v139[3] = 0LL;
  double v140 = 0.0;
  __int128 v143 = xmmword_1012E1E90;
  uint64_t v144 = 0LL;
  int v145 = 0;
  unint64_t v146 = 0xFFEFFFFFFFFFFFFFLL;
  int v157 = 0;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
  __int128 v149 = 0u;
  __int128 v150 = 0u;
  __int128 v151 = 0u;
  int v152 = 0;
  __int128 v153 = 0u;
  __int128 v154 = 0u;
  __int128 v155 = 0u;
  memset(v156, 0, sizeof(v156));
  uint64_t v158 = 0LL;
  uint64_t v159 = 0LL;
  unint64_t v160 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v161 = 0LL;
  int v162 = 0;
  uint64_t v168 = 0LL;
  __int16 v169 = 0;
  int v174 = 0;
  int v167 = 0;
  __int128 v166 = 0u;
  __int128 v165 = 0u;
  __int128 v164 = 0u;
  __int128 v163 = 0u;
  __int128 v171 = 0u;
  __int128 v170 = 0u;
  char v172 = 0;
  memset(v173, 0, sizeof(v173));
  unint64_t v175 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v194 = 0u;
  __int128 v193 = 0u;
  __int128 v192 = 0u;
  __int128 v191 = 0u;
  __int128 v190 = 0u;
  __int128 v189 = 0u;
  __int128 v188 = 0u;
  __int128 v187 = 0u;
  __int128 v186 = 0u;
  __int128 v185 = 0u;
  __int128 v184 = 0u;
  __int128 v183 = 0u;
  __int128 v182 = 0u;
  __int128 v181 = 0u;
  __int128 v180 = 0u;
  __int128 v179 = 0u;
  __int128 v178 = 0u;
  __int128 v177 = 0u;
  __int128 v176 = 0u;
  uint64_t v195 = 0LL;
  unint64_t v196 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v197 = 0u;
  __int128 v198 = 0u;
  __int128 v199 = 0u;
  __int128 v200 = 0u;
  unint64_t v201 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v202 = 0LL;
  int v203 = 0;
  uint64_t v204 = 0LL;
  char v205 = 0;
  unint64_t v206 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v208 = 0LL;
  uint64_t v207 = 0LL;
  uint64_t v209 = 0x80000000800000LL;
  uint64_t v211 = 0LL;
  uint64_t v210 = 0LL;
  __int128 v212 = xmmword_1012E1EA0;
  uint64_t v213 = 0x80000000800000LL;
  __int128 v214 = 0u;
  __int128 v215 = 0u;
  uint64_t v216 = 0LL;
  unint64_t v217 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v218 = 0u;
  __int128 v219 = 0u;
  __int128 v220 = 0u;
  __int128 v221 = 0u;
  __int128 v222 = 0u;
  __int128 v223 = 0u;
  int v224 = 0;
  unint64_t v225 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v226 = 0;
  int v227 = 0;
  unint64_t v228 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v229 = 7LL;
  unint64_t v230 = 0xFFEFFFFFFFFFFFFFLL;
  char v231 = 0;
  uint64_t v233 = 0LL;
  uint64_t v232 = 0LL;
  uint64_t v234 = 0LL;
  if ((sub_100CDB578((double *)a2, qword_101997C50, (uint64_t)v131) & 1) == 0)
  {
    sub_1010DDBC0(__p, "HRStop");
    sub_100CDC2CC((void *)a2, (uint64_t *)__p, (uint64_t)qword_101997C50);
    if (SHIBYTE(v119) < 0) {
      operator delete(*(void **)__p);
    }
    return 0LL;
  }

  uint64_t v5 = *((void *)&v143 + 1);
  *(void *)(a1 + 24) = *((void *)&v143 + 1);
  double v6 = *(double *)(a2 + 304);
  float v7 = *(float *)(a2 + 356);
  double v8 = v140;
  double v9 = v141;
  if (v141 > 0.389999986)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(double **)(a1 + 48);
    if ((unint64_t)v11 >= v10)
    {
      int v14 = *(double **)(a1 + 40);
      uint64_t v15 = ((char *)v11 - (char *)v14) >> 4;
      unint64_t v16 = v15 + 1;
      uint64_t v17 = v10 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        char v19 = (char *)sub_100037038(a1 + 56, v18);
        int v14 = *(double **)(a1 + 40);
        uint64_t v11 = *(double **)(a1 + 48);
      }

      else
      {
        char v19 = 0LL;
      }

      unsigned int v20 = (double *)&v19[16 * v15];
      char v21 = &v19[16 * v18];
      *(void *)unsigned int v20 = v5;
      v20[1] = v8;
      uint64_t v12 = v20 + 2;
      if (v11 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v11 - 1);
          v20 -= 2;
          v11 -= 2;
        }

        while (v11 != v14);
        int v14 = *(double **)(a1 + 40);
      }

      *(void *)(a1 + 40) = v20;
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v12;
      *(void *)(a1 + 56) = v21;
      if (v14) {
        operator delete(v14);
      }
    }

    else
    {
      *(void *)uint64_t v11 = v5;
      v11[1] = v8;
      uint64_t v12 = v11 + 2;
    }

    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v12;
    double v9 = v141;
  }

  if (v9 < 0.59)
  {
    int v22 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v22 + 1;
    *(_BYTE *)(a1 + 440) = 1;
    if (v22 >= 9)
    {
      *(void *)(a1 + 416) = 0xC08F380000000000LL;
      *(_BYTE *)(a1 + 424) = 0;
      *(void *)(a1 + 432) = 0LL;
    }

    uint64_t result = 0LL;
    *(void *)(a1 + 392) = 0LL;
    return result;
  }

  double v23 = (v8 - v6) * 100.0 / (v7 - v6);
  *(_BYTE *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  double v24 = *(double *)(a1 + 392);
  if (v24 > 0.0) {
    *(double *)(a1 + 400) = v23 - v24;
  }
  int v26 = (char **)(a1 + 40);
  __int16 v25 = *(double **)(a1 + 40);
  uint64_t v28 = (char **)(a1 + 48);
  unint64_t v27 = *(double **)(a1 + 48);
  unint64_t v29 = 126 - 2 * __clz(((char *)v27 - (char *)v25) >> 4);
  *(double *)(a1 + 416) = v23;
  *(double *)(a1 + 392) = v23;
  *(double *)(a1 + 432) = v9;
  if (v27 == v25) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_1006A8CCC(v25, v27, (uint64_t)__p, v30, 1);
  unsigned __int8 v31 = *v26;
  if (*v26 != *v28)
  {
    unsigned __int8 v31 = *v26;
    while (*(double *)(a2 + 296) - *(double *)v31 > *(double *)(a1 + 16))
    {
      v31 += 16;
      if (v31 == *v28)
      {
        unsigned __int8 v31 = *v28;
        break;
      }
    }
  }

  sub_1006A8BD8(a1 + 40, *v26, v31);
  __int128 v32 = *(double **)(a1 + 40);
  int v33 = *(double **)(a1 + 48);
  double v34 = 0.0;
  double v35 = 0.0;
  double v36 = 0.0;
  if ((unint64_t)((char *)v33 - (char *)v32) >= 0x3C1)
  {
    uint64_t v37 = (int)((double)(int)(((unint64_t)((char *)v33 - (char *)v32) >> 4) - 1) * 0.75);
    int v38 = &v32[2 * v37];
    while (v33 != v38)
    {
      unint64_t v39 = ((char *)v33 - (char *)v32) >> 4;
      if (v39 < 2) {
        break;
      }
      if (v39 == 3)
      {
        sub_1006A9654(v32, v32 + 2, v33 - 2);
        break;
      }

      if (v39 == 2)
      {
        if (*(v33 - 1) < v32[1])
        {
          double v74 = *v32;
          *__int128 v32 = *(v33 - 2);
          *(v33 - 2) = v74;
          uint64_t v75 = *((void *)v32 + 1);
          v32[1] = *(v33 - 1);
          *((void *)v33 - 1) = v75;
        }

        break;
      }

      if ((char *)v33 - (char *)v32 <= 127)
      {
        while (v32 != v33 - 2)
        {
          uint64_t v76 = v32;
          v32 += 2;
          if (v76 != v33 && v32 != v33)
          {
            unint64_t v77 = v32;
            __int128 v78 = v76;
            do
            {
              if (v77[1] < v78[1]) {
                __int128 v78 = v77;
              }
              v77 += 2;
            }

            while (v77 != v33);
            if (v78 != v76)
            {
              uint64_t v79 = *(void *)v76;
              double *v76 = *v78;
              *(void *)__int128 v78 = v79;
              uint64_t v80 = *((void *)v76 + 1);
              v76[1] = v78[1];
              *((void *)v78 + 1) = v80;
            }
          }
        }

        break;
      }

      uint64_t v40 = &v32[2 * (v39 >> 1)];
      unint64_t v41 = v33 - 2;
      int v42 = sub_1006A9654(v32, v40, v33 - 2);
      double v43 = v32[1];
      double v44 = v40[1];
      if (v43 >= v44)
      {
        __int128 v46 = v33 - 2;
        while (1)
        {
          __int128 v45 = v46 - 2;
          if (v46 - 2 == v32) {
            break;
          }
          double v47 = *(v46 - 1);
          v46 -= 2;
          if (v47 < v44)
          {
            double v48 = *v32;
            *__int128 v32 = *v45;
            double *v45 = v48;
            uint64_t v49 = *((void *)v32 + 1);
            v32[1] = v45[1];
            *((void *)v45 + 1) = v49;
            ++v42;
            goto LABEL_51;
          }
        }

        __int128 v63 = v32 + 2;
        if (v43 >= *(v33 - 1))
        {
          while (v63 != v41)
          {
            if (v43 < v63[1])
            {
              double v67 = *v63;
              *__int128 v63 = *(v33 - 2);
              *(v33 - 2) = v67;
              uint64_t v68 = *((void *)v63 + 1);
              v63[1] = *(v33 - 1);
              *((void *)v33 - 1) = v68;
              v63 += 2;
              goto LABEL_83;
            }

            v63 += 2;
          }

          break;
        }

void sub_1006A8BA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

char *sub_1006A8BD8(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    unint64_t v3 = *(char **)(a1 + 8);
    unsigned __int8 v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 16 * ((a3 - a2) >> 4);
      unsigned __int8 v4 = a2;
      do
      {
        uint64_t v6 = *(void *)&v4[v5 + 8];
        *(void *)unsigned __int8 v4 = *(void *)&v4[v5];
        *((void *)v4 + 1) = v6;
        v4 += 16;
      }

      while (&v4[v5] != v3);
    }

    *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = v4;
  }

  return a2;
}

void *sub_1006A8C28(void *a1)
{
  *a1 = off_101848F08;
  BOOL v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1006A8C64(void *__p)
{
  *__int128 __p = off_101848F08;
  BOOL v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_1006A8CA0(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1006A8CCC(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  double v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        double v21 = *(a2 - 2);
        double v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          double *v9 = v21;
          *(a2 - 2) = v22;
          uint64_t v23 = *((void *)v9 + 1);
          v9[1] = *(a2 - 1);
          *((void *)a2 - 1) = v23;
        }

        return;
      case 3uLL:
        sub_1003F7018(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        sub_1003F75F4(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        sub_1003F76F4(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (uint64_t)(a2 - 2));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0) {
            sub_1003F6EA4(v9, a2);
          }
          else {
            sub_1003F6F7C(v9, a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1003F7018(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          else
          {
            sub_1003F7018(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_1003F7018(v9 + 2, v15 - 2, a2 - 4);
            sub_1003F7018(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_1003F7018(v15 - 2, v15, &v9[2 * v14 + 2]);
            __int128 v16 = *(_OWORD *)v9;
            *(_OWORD *)double v9 = *(_OWORD *)v15;
            *(_OWORD *)uint64_t v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          double v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            double v9 = sub_1003F716C(v9, a2);
            goto LABEL_18;
          }

BOOL sub_1006A9040(uint64_t a1, double *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      double v6 = *(a2 - 2);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1 || v7 >= v6 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v6;
        *(a2 - 2) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(double *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = *(a2 - 1);
        *((void *)a2 - 1) = v8;
      }

      return result;
    case 3LL:
      sub_1003F7018((double *)a1, (double *)(a1 + 16), a2 - 2);
      return 1LL;
    case 4LL:
      sub_1003F75F4((double *)a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1LL;
    case 5LL:
      sub_1003F76F4((double *)a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1LL;
    default:
      double v9 = (double *)(a1 + 32);
      sub_1003F7018((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v10 = (double *)(a1 + 48);
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  do
  {
    double v13 = *v10;
    double v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      double v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }

    else
    {
      double v15 = v10[1];
    }

    *uint64_t v10 = v14;
    v10[1] = v9[1];
    __int128 v16 = (double *)a1;
    uint64_t v17 = v11;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      double v19 = *(double *)(a1 + v17 + 16);
      if (v13 < v19)
      {
        double v20 = *(double *)(v18 + 24);
        goto LABEL_18;
      }

      if (v19 < v13)
      {
        __int128 v16 = v9;
        goto LABEL_22;
      }

      double v20 = *(double *)(a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *(double *)(v18 + 32) = v19;
      *(double *)(a1 + v17 + 40) = v20;
      v17 -= 16LL;
      if (v17 == -32)
      {
        __int128 v16 = (double *)a1;
        goto LABEL_22;
      }
    }

    __int128 v16 = (double *)(a1 + v17 + 32);
LABEL_22:
    *__int128 v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    double v9 = v10;
    v11 += 16LL;
    v10 += 2;
  }

  while (v10 != a2);
  return 1LL;
}

uint64_t sub_1006A9240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_1006A93C0(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        double v15 = *(double *)v14;
        double v16 = *(double *)a1;
        if (*(double *)v14 < *(double *)a1 || v16 >= v15 && *(double *)(v14 + 8) < *(double *)(a1 + 8))
        {
          *(double *)uint64_t v14 = v16;
          *(double *)a1 = v15;
          uint64_t v17 = *(void *)(v14 + 8);
          *(void *)(v14 + _Block_object_dispose(&STACK[0x7E0], 8) = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = v17;
          sub_1006A93C0(a1, a4, v9, (double *)a1);
        }

        v14 += 16LL;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      double v19 = (double *)(a2 - 16);
      do
      {
        double v21 = *(double *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        sub_1006A950C((double *)a1, a4, v18);
        if (v19 == v22)
        {
          *double v22 = v21;
          *((void *)v22 + 1) = v20;
        }

        else
        {
          *double v22 = *v19;
          v22[1] = v19[1];
          double *v19 = v21;
          *((void *)v19 + 1) = v20;
          sub_1006A95A0(a1, (uint64_t)(v22 + 2), a4, ((uint64_t)v22 - a1 + 16) >> 4);
        }

        v19 -= 2;
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_1006A93C0(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }

      double v11 = *v8;
      double v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }

        else
        {
          double v13 = a4[1];
        }

        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = (double *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              double v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(double *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }

            double v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }

        uint64_t v14 = v8;
LABEL_23:
        double *v14 = v12;
        v14[1] = v13;
      }
    }
  }

  return result;
}

double sub_1006A950C(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      double v10 = a1[2];
      if (*a1 < v10 || v10 >= *a1 && v6[2 * v7 + 1] < a1[3])
      {
        a1 += 2;
        uint64_t v3 = v9;
      }
    }

    double *v6 = *a1;
    double result = a1[1];
    v6[1] = result;
  }

  while (v3 <= v5);
  return result;
}

uint64_t sub_1006A95A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (double *)(result + 16 * (v4 >> 1));
    double v7 = *v6;
    double v8 = *(double *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      double v9 = *(double *)(a2 - 8);
    }

    else
    {
      double v9 = *(double *)(a2 - 8);
    }

    *(double *)(a2 - 16) = v7;
    *(void *)(a2 - _Block_object_dispose(&STACK[0x7E0], 8) = *(void *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v10 = (double *)(result + 16 * v5);
        double v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          double v13 = *(double *)(result + 16 * v5 + 8);
          if (v13 >= v9) {
            break;
          }
        }

        else
        {
          double v13 = v10[1];
        }

        double *v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (double *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }

    double v10 = v6;
LABEL_13:
    *double v10 = v8;
    v10[1] = v9;
  }

  return result;
}

uint64_t sub_1006A9654(double *a1, double *a2, double *a3)
{
  uint64_t v3 = a2 + 1;
  double v4 = a2[1];
  unint64_t v5 = a1 + 1;
  double v6 = a3[1];
  if (v4 >= a1[1])
  {
    if (v6 >= v4) {
      return 0LL;
    }
    double v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    uint64_t v10 = *((void *)a2 + 1);
    a2[1] = a3[1];
    *((void *)a3 + 1) = v10;
    if (a2[1] < *v5)
    {
      double v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
      uint64_t result = 2LL;
LABEL_10:
      double v14 = *v5;
      double *v5 = *v3;
      *uint64_t v3 = v14;
      return result;
    }
  }

  else
  {
    uint64_t v7 = *(void *)a1;
    if (v6 < v4)
    {
      *a1 = *a3;
      *(void *)a3 = v7;
      uint64_t result = 1LL;
LABEL_9:
      uint64_t v3 = a3 + 1;
      goto LABEL_10;
    }

    *a1 = *a2;
    *(void *)a2 = v7;
    double v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    if (a3[1] < v12)
    {
      double v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t result = 2LL;
      unint64_t v5 = a2 + 1;
      goto LABEL_9;
    }
  }

  return 1LL;
}

void sub_1006A97F0(id a1)
{
  qword_101997C70 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLTransitMacTileDataProviderSilo");
}

id sub_1006A9A70(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _[a4 onDarwinNotifierNotification:*a2 data:*a3];
}

void sub_1006A9D28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006AA090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_1006AA108()
{
}

id sub_1006AA110(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  v3[2] = sub_1006AA67C;
  void v3[3] = &unk_101848FC0;
  unint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  __int128 __p = 0LL;
  sub_100007590(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  id v1 = [v3 copy];
  if (__p)
  {
    unint64_t v5 = __p;
    operator delete(__p);
  }

  return v1;
}

void sub_1006AA1A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006AA1C0(id a1, NSArray *a2, NSError *a3)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101848FA0);
  }
  double v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = -[NSArray count](a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TransitMac: result, %lu", (uint8_t *)buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101848FA0);
    }
    uint64_t v15 = qword_101934A78;
    LODWORD(v22.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = -[NSArray count](a2, "count");
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v15, 1LL, "TransitMac: result, %lu", &v22);
    double v17 = (std::string *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( a2,  "countByEnumeratingWithState:objects:count:",  &v18,  v25,  16LL);
  if (v5)
  {
    uint64_t v6 = *(void *)v19;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(a2);
        }
        nullsub_10([*(id *)(*((void *)&v18 + 1) + 8 * (void)v7) macAddress]);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101848FA0);
        }
        double v8 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
        {
          sub_1007EC360(buf);
          double v9 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
             ? buf
             : (std::string *)buf[0].__r_.__value_.__r.__words[0];
          LODWORD(v22.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "TransitMac, result, mac, %s",  (uint8_t *)&v22,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101848FA0);
          }
          uint64_t v10 = qword_101934A78;
          sub_1007EC360(&v22);
          double v11 = &v22;
          if ((v22.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            double v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          int v23 = 136315138;
          double v24 = v11;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  1LL,  "TransitMac, result, mac, %s",  (const char *)&v23);
          double v13 = v12;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke",  "%s\n",  (const char *)v13);
          if (v13 != buf) {
            free(v13);
          }
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v14 = -[NSArray countByEnumeratingWithState:objects:count:]( a2,  "countByEnumeratingWithState:objects:count:",  &v18,  v25,  16LL);
      id v5 = v14;
    }

    while (v14);
  }

void sub_1006AA650(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1006AA67C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_100007590( a2,  *(const void **)(a1 + 32),  *(void *)(a1 + 40),  (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3);
}

void *sub_1006AA698(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  BOOL v2 = (void *)(a1 + 32);
  v2[2] = 0LL;
  return sub_100007590( v2,  *(const void **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
}

void sub_1006AA6B4(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

void sub_1006AA6CC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1006AA730()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1006AA7A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1006AA888(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
      }

      else
      {
        *(_BYTE *)(a2 + v11) = 1;
        int v15 = 0;
      }

      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = v15;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1006AABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 166056;
  *(void *)a1 = &off_101849000;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = a2;
  sub_100CEDD10(a1 + 16, a2);
  sub_100C67470((void *)(a1 + 80));
  bzero((void *)(a1 + 712), 0x8D08uLL);
  *(_DWORD *)(a1 + 740) = 501;
  sub_100A15E98(a1 + 36816);
  sub_1007E0A58(a1 + 114064);
  sub_100DAC330(a1 + 114712);
  sub_100F69D58(a1 + 121752, 6.0, 1.0);
  sub_100A36880(a1 + 153112);
  sub_100D7B9A0(a1 + 153240, a2);
  *(void *)uint64_t v4 = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v11 = _Q0;
  *(_OWORD *)(v4 + _Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  sub_1000B072C((void *)(a1 + 153112), *(void *)(a1 + 8));
  *(_OWORD *)(a1 + 165992) = xmmword_10130E100;
  *(_OWORD *)(a1 + 16600_Block_object_dispose(&STACK[0x7E0], 8) = unk_10130E110;
  *(_OWORD *)(a1 + 166024) = xmmword_10130E120;
  *(_OWORD *)(a1 + 1660++*(_DWORD *)(result + 36) = *(__int128 *)((char *)&xmmword_10130E120 + 12);
  *(_OWORD *)(a1 + 153144) = 0u;
  *(_OWORD *)(a1 + 153160) = 0u;
  *(_OWORD *)(a1 + 153176) = 0u;
  *(_OWORD *)(a1 + 153192) = 0u;
  *(void *)(a1 + 15320_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_OWORD *)(a1 + 114040) = 0u;
  *(_DWORD *)(a1 + 114056) = 0;
  *(_OWORD *)(v4 + _Block_object_dispose(&STACK[0x7E0], 8) = v11;
  *(void *)(a1 + 712) = 0LL;
  return a1;
}

void sub_1006AACDC(uint64_t a1, double a2)
{
  if (vabdd_f64(a2, *(double *)(a1 + 728)) > 1.0)
  {
    *(void *)((char *)&v15[1] + 1) = 0LL;
    *(void *)int v15 = 0LL;
    int v4 = sub_100DACD54(a1 + 114712, (uint64_t)v15, v16, 3.75);
    sub_100D7B9A4(a1 + 153240, (uint64_t)v12);
    int v6 = v5;
    *(double *)(a1 + 72_Block_object_dispose(&STACK[0x7E0], 8) = a2;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0x3F80000000000000LL;
    sub_1006AADE0((unsigned __int16 *)(a1 + 736), (uint64_t)v8);
    if (v4)
    {
      if (v6)
      {
        *(void *)&v7[0] = __PAIR64__(LODWORD(v16[13]), v15[0]);
        *((void *)&v7[0] + 1) = __PAIR64__(v14, v13);
        v7[1] = (__int128)vextq_s8(v11, v11, 8uLL);
        sub_100CEDF4C(a1 + 16, v7);
      }
    }
  }

__n128 sub_1006AADE0(unsigned __int16 *a1, uint64_t a2)
{
  int v4 = *a1;
  BOOL v2 = a1 + 4;
  int v3 = v4;
  int v5 = &v2[36 * v4];
  *(_DWORD *)a2 = *(_DWORD *)v5;
  *(_DWORD *)(a2 + 4) = *((_DWORD *)v5 + 1);
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = *((_DWORD *)v5 + 2);
  *(_DWORD *)(a2 + 12) = *((_DWORD *)v5 + 3);
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v5 + 4);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)v5 + 5);
  *(_DWORD *)(a2 + 24) = *((_DWORD *)v5 + 6);
  *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x7E0], 8) = *((_DWORD *)v5 + 7);
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v5 + 8);
  __n128 result = *(__n128 *)&v2[36 * v3 + 28];
  *(__n128 *)(a2 + 56) = result;
  return result;
}

unsigned __int16 *sub_1006AAE60(uint64_t a1, uint64_t a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101849030);
  }
  int v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(double *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    double v7 = *(float *)(a2 + 16);
    double v8 = *(float *)(a2 + 32);
    *(_DWORD *)std::stringbuf::string_type buf = 134218752;
    double v25 = v5;
    __int16 v26 = 2048;
    uint64_t v27 = v6;
    __int16 v28 = 2048;
    double v29 = v7;
    __int16 v30 = 2048;
    double v31 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "SwimAlg, workout classifier result, startTime, %f, workoutType, %lu, confidence, %f, probability_swimming, %f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101849030);
    }
    double v10 = *(double *)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    double v12 = *(float *)(a2 + 16);
    double v13 = *(float *)(a2 + 32);
    int v16 = 134218752;
    double v17 = v10;
    __int16 v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    double v21 = v12;
    __int16 v22 = 2048;
    double v23 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "SwimAlg, workout classifier result, startTime, %f, workoutType, %lu, confidence, %f, probability_swimming, %f",  COERCE_DOUBLE(&v16),  42);
    int v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimAlgController::feedWorkoutClassification(const CLMotionStateMediator_Type::WorkoutClassifierResult &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  return sub_100C67490(a1 + 80, *(void *)(a2 + 8), *(double *)a2, *(float *)(a2 + 32));
}

uint64_t sub_1006AB084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(*(void *)(a1 + 8) + 2168LL) = *(void *)(a2 + 64);
  *(void *)(a1 + 712) = v6;
  sub_1006AD1AC((unsigned __int16 *)(a1 + 736), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, a2, a3);
}

uint64_t sub_1006AB0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = a3;
  uint64_t v3 = a2;
  uint64_t v5 = a1 + 166000;
  uint64_t v6 = (float *)(a1 + 121752);
  double v7 = (double *)(a1 + 36816);
  double v8 = *(double *)(a2 + 56);
  sub_1006AACDC(a1, v8);
  sub_1006ABC9C(a1, a1 + 114712);
  sub_1006ABD10(a1, (uint64_t)v6);
  uint64_t v85 = a1 + 153240;
  sub_1006ABD84(a1, a1 + 153240);
  if (sub_1006ABDF8(a1, (uint64_t)v7, *v6 / *(float *)v5, v6[4]))
  {
    __int128 v87 = *(_OWORD *)(a1 + 36816);
    *(_OWORD *)__int128 __p = v87;
    float v9 = *(double *)&v87 - *(double *)(v5 + 56);
    int v91 = sub_100DAC980(a1 + 114712, v9);
    *(void *)(v5 + 56) = v87;
    *(void *)double v115 = 0x400000000LL;
    sub_100C67768(a1 + 80, (double *)__p, (unsigned __int16 *)v115);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101849030);
    }
    double v10 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      double v11 = *v7;
      double v12 = v7[1];
      *(_DWORD *)std::stringbuf::string_type buf = 134218496;
      double v106 = v11;
      __int16 v107 = 2048;
      double v108 = v12;
      __int16 v109 = 2048;
      *(void *)__int16 v110 = v91;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Potential stroke,timestamp,%.3f,startTime,%f,style,%lu",  buf,  0x20u);
    }

    uint64_t v84 = v3;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101849030);
      }
      double v60 = *v7;
      double v61 = v7[1];
      int v92 = 134218496;
      double v93 = v60;
      __int16 v94 = 2048;
      double v95 = v61;
      __int16 v96 = 2048;
      *(void *)double v97 = v91;
      LODWORD(v81) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "Potential stroke,timestamp,%.3f,startTime,%f,style,%lu",  COERCE_DOUBLE(&v92),  v81,  v82);
      __int128 v63 = (uint8_t *)v62;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v62);
      if (v63 != buf) {
        free(v63);
      }
    }

    if (*(_WORD *)&v115[2])
    {
      *(void *)&__int128 v13 = 134219520LL;
      __int128 v87 = v13;
      do
      {
        unsigned int v14 = &v115[56 * *(unsigned __int16 *)v115 + 8];
        double v15 = *(double *)v14;
        uint64_t v16 = *((void *)v14 + 1);
        uint64_t v17 = *((unsigned int *)v14 + 4);
        ++qword_101997C80;
        sub_100CEDDBC((uint64_t *)(a1 + 16), v15);
        double v18 = (*(double (**)(void, uint64_t))(**(void **)(a1 + 8) + 192LL))(*(void *)(a1 + 8), v17);
        uint64_t v20 = v19;
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        double v21 = (os_log_s *)qword_1019344E8;
        if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = qword_101997C80;
          BOOL v23 = sub_100CEDD54(a1 + 16);
          *(_DWORD *)std::stringbuf::string_type buf = v87;
          double v106 = v15;
          __int16 v107 = 2048;
          double v108 = *(double *)&v22;
          __int16 v109 = 2048;
          *(void *)__int16 v110 = v16;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)double v111 = v23;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v17;
          *(_WORD *)__int16 v112 = 2048;
          *(double *)&v112[2] = v18;
          __int16 v113 = 2048;
          *(void *)__int16 v114 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d,length,%f,distanceError,%f",  buf,  0x40u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344E0 != -1) {
            dispatch_once(&qword_1019344E0, &stru_101849030);
          }
          double v83 = *(double *)&qword_1019344E8;
          uint64_t v28 = qword_101997C80;
          BOOL v29 = sub_100CEDD54(a1 + 16);
          int v92 = v87;
          double v93 = v15;
          __int16 v94 = 2048;
          double v95 = *(double *)&v28;
          __int16 v96 = 2048;
          *(void *)double v97 = v16;
          *(_WORD *)&v97[8] = 1024;
          BOOL v98 = v29;
          __int16 v99 = 1024;
          int v100 = v17;
          __int16 v101 = 2048;
          double v102 = v18;
          __int16 v103 = 2048;
          uint64_t v104 = v20;
          LODWORD(v81) = 64;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  *(void *)&v83,  1LL,  "Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d,length,%f,distanceError,%f",  COERCE_DOUBLE(&v92),  *(void *)&v81,  v83,  v84,  v85,  *(double *)&v86,  *(double *)&v87);
          double v31 = (uint8_t *)v30;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
        }

        uint64_t v24 = *(void *)(a1 + 8);
        char v25 = sub_100CEDD54(a1 + 16);
        sub_10020D6B8(v24, v17, v25, v15);
        if (!*(_WORD *)&v115[2]) {
          break;
        }
        unint64_t v26 = *(unsigned __int16 *)v115 + 1LL;
        __int16 v27 = *(_WORD *)&v115[4];
        *(_WORD *)double v115 = v26 - v27;
        --*(_WORD *)&v115[2];
      }

      while (*(_WORD *)&v115[2]);
    }

    uint64_t v3 = v84;
  }

  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8))
    || (uint64_t v123 = 0LL,
        *(void *)double v124 = 0x3F80000000000000LL,
        sub_1006AADE0((unsigned __int16 *)(a1 + 736), (uint64_t)v115),
        double v89 = *(double *)v126,
        double v88 = 0.0,
        int v32 = sub_100CEDD28(a1 + 16, &v88),
        ((sub_1006ABE94(a1, a1 + 114064, *(void *)(a1 + 8), &v89) | v32) & 1) == 0))
  {
    uint64_t v43 = 0LL;
    goto LABEL_46;
  }

  int v33 = &v89;
  if (v32) {
    int v33 = &v88;
  }
  double v89 = *v33;
  BOOL v34 = sub_100CEDD64(a1 + 16, v89);
  sub_100D7BB78(v85, (double **)__p, v89);
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101849030);
  }
  double v35 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
  {
    double v36 = *(double *)(a1 + 712);
    double v37 = v36 - v89;
    BOOL v38 = v36 <= v89;
    double v39 = 0.0;
    if (!v38) {
      double v39 = v37;
    }
    double v40 = *(double *)(*(void *)(a1 + 8) + 2168LL) - v39;
    *(_DWORD *)std::stringbuf::string_type buf = 134218752;
    double v106 = v89;
    __int16 v107 = 2048;
    double v108 = v40;
    __int16 v109 = 1024;
    *(_DWORD *)__int16 v110 = v34;
    *(_WORD *)&_BYTE v110[4] = 1024;
    *(_DWORD *)&v110[6] = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Turn detected,timestamp,%f,startTime,%f,isSwimming,%d,injectedForPause,%d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101849030);
    }
    double v75 = *(double *)(a1 + 712);
    double v76 = v75 - v89;
    BOOL v38 = v75 <= v89;
    double v77 = 0.0;
    if (!v38) {
      double v77 = v76;
    }
    double v78 = *(double *)(*(void *)(a1 + 8) + 2168LL) - v77;
    int v92 = 134218752;
    double v93 = v89;
    __int16 v94 = 2048;
    double v95 = v78;
    __int16 v96 = 1024;
    *(_DWORD *)double v97 = v34;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = v32;
    LODWORD(v81) = 34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "Turn detected,timestamp,%f,startTime,%f,isSwimming,%d,injectedForPause,%d",  COERCE_DOUBLE(&v92),  v81,  v82,  v84);
    uint64_t v80 = (uint8_t *)v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v79);
    if (v80 != buf) {
      free(v80);
    }
  }

  if (v34)
  {
LABEL_38:
    else {
      uint64_t v43 = 0LL;
    }
    int v42 = (double *)__p[0];
    if (__p[0]) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }

  int v42 = (double *)__p[0];
  unint64_t v41 = (double *)__p[1];
  if (__p[0] != __p[1])
  {
    do
      sub_10020D6B8(*(void *)(a1 + 8), 6u, 1, *v42++);
    while (v42 != v41);
    goto LABEL_38;
  }

  uint64_t v43 = 0LL;
  if (__p[0])
  {
LABEL_42:
    __p[1] = v42;
    operator delete(v42);
  }

void sub_1006ABC54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006ABC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0x3F80000000000000LL;
  uint64_t v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_1006AD22C((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(void *)&v5[36] = 0LL;
    uint64_t v6 = 0x3F80000000000000LL;
    sub_1006AADE0(v3, (uint64_t)v5);
    return sub_100DAC334(a2, (uint64_t)v9, v8, v7);
  }

  return result;
}

uint64_t sub_1006ABD10(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0x3F80000000000000LL;
  uint64_t v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_1006AD22C((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(void *)&v5[36] = 0LL;
    uint64_t v6 = 0x3F80000000000000LL;
    sub_1006AADE0(v3, (uint64_t)v5);
    return sub_100F69DC0(a2, (uint64_t)v9, v8, v7);
  }

  return result;
}

uint64_t sub_1006ABD84(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0x3F80000000000000LL;
  uint64_t v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_1006AD22C((unsigned __int16 *)(a1 + 736), 0x100u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(void *)&v5[36] = 0LL;
    uint64_t v6 = 0x3F80000000000000LL;
    sub_1006AADE0(v3, (uint64_t)v5);
    return sub_100D7C2F0(a2, (uint64_t)v9, v8, v7);
  }

  return result;
}

uint64_t sub_1006ABDF8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = 0x3F80000000000000LL;
  double v7 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_1006AD22C((unsigned __int16 *)(a1 + 736), 0x12Cu, (uint64_t)v13);
  if ((_DWORD)result)
  {
    *(void *)&_BYTE v9[36] = 0LL;
    uint64_t v10 = 0x3F80000000000000LL;
    sub_1006AADE0(v7, (uint64_t)v9);
    return sub_100A15F44(a2, (uint64_t)v13, v12, v11, a3, a4);
  }

  return result;
}

uint64_t sub_1006ABE94(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = 0x3F80000000000000LL;
  double v7 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_1006AD22C((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v13);
  if ((_DWORD)result)
  {
    *(void *)&_BYTE v9[36] = 0LL;
    uint64_t v10 = 0x3F80000000000000LL;
    sub_1006AADE0(v7, (uint64_t)v9);
    return sub_1007E0AD8(a2, (uint64_t)v13, a3, a4, v12, v11);
  }

  return result;
}

BOOL sub_1006ABF20(uint64_t *a1, double a2, double a3)
{
  if (!sub_10020EBD8(a1[1]) || !sub_10020D828((void *)a1[1], (__n128 *)&v17, a2)) {
    return 0LL;
  }
  __int128 v14 = v17;
  uint64_t v15 = v18;
  sub_100A37184((uint64_t)(a1 + 19139), &v14, v6, v7, v8, v9, __p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void))(*(void *)a1[1] + 40LL))(&v21, a1[1], DWORD2(v17));
  if (sub_100A37C40((uint64_t)(a1 + 19139), DWORD2(v17), (uint64_t)&v21))
  {
    uint64_t v10 = a1[1];
    v20[4] = v25;
    v20[5] = v26;
    v20[6] = v27;
    v20[0] = v21;
    v20[1] = v22;
    v20[2] = v23;
    v20[3] = v24;
    sub_10020EBF0(v10, SDWORD2(v17), v20);
  }

  _DWORD v19[4] = v25;
  void v19[5] = v26;
  v19[6] = v27;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  void v19[3] = v24;
  sub_1006AC8A8((uint64_t)a1, SDWORD2(v17), (uint64_t)v19, a2, a3);
  v11.n128_f64[0] = a3;
  BOOL v12 = sub_1006AC39C(a1, (double *)__p, v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v12;
}

void sub_1006AC098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1006AC0C0(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8));
  double result = 2.56;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1006AC0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0x3F80000000000000LL;
  sub_1006AADE0((unsigned __int16 *)(a1 + 736), (uint64_t)v5);
  return (*(uint64_t (**)(void, uint64_t, double, double, double))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  a2,  v8,  v9,  2.56);
}

double sub_1006AC154(uint64_t a1, double *a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101849030);
  }
  int v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = *((void *)a2 + 5);
    uint64_t v9 = *((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7);
    uint64_t v11 = *((void *)a2 + 8);
    *(_DWORD *)std::stringbuf::string_type buf = 134219520;
    uint64_t v38 = v5;
    __int16 v39 = 2048;
    uint64_t v40 = v6;
    __int16 v41 = 2048;
    uint64_t v42 = v7;
    __int16 v43 = 2048;
    uint64_t v44 = v8;
    __int16 v45 = 2048;
    uint64_t v46 = v9;
    __int16 v47 = 2048;
    uint64_t v48 = v10;
    __int16 v49 = 2048;
    uint64_t v50 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccur acy,%lf,timestampGps,%lf",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101849030);
    }
    uint64_t v13 = *((void *)a2 + 1);
    uint64_t v14 = *((void *)a2 + 2);
    uint64_t v15 = *((void *)a2 + 4);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v17 = *((void *)a2 + 6);
    uint64_t v18 = *((void *)a2 + 7);
    uint64_t v19 = *((void *)a2 + 8);
    int v23 = 134219520;
    uint64_t v24 = v13;
    __int16 v25 = 2048;
    uint64_t v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = v15;
    __int16 v29 = 2048;
    uint64_t v30 = v16;
    __int16 v31 = 2048;
    uint64_t v32 = v17;
    __int16 v33 = 2048;
    uint64_t v34 = v18;
    __int16 v35 = 2048;
    uint64_t v36 = v19;
    LODWORD(v22) = 72;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccur acy,%lf,timestampGps,%lf",  COERCE_DOUBLE(&v23),  v22);
    __int128 v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimAlgController::feedOdometer(const CLOdometerNotifier_Type::NotificationData &)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  double result = a2[1];
  if (result > 0.0) {
    return sub_10020FB78(*(void *)(a1 + 8), result);
  }
  return result;
}

BOOL sub_1006AC39C(uint64_t *a1, double *a2, __n128 a3)
{
  uint64_t v17 = (const char *)*((void *)a2 + 1);
  double v18 = *a2;
  if (*(const char **)a2 != v17)
  {
    double v3 = a3.n128_f64[0];
    a3.n128_u64[0] = 134221314LL;
    __n128 v19 = a3;
    double v6 = *a2;
    do
    {
      __int128 v7 = **(_OWORD **)&v6;
      uint64_t v21 = *(void *)(*(void *)&v6 + 16LL);
      __int128 v20 = v7;
      (*(void (**)(uint64_t *, __int128 *))(*a1 + 24))(a1, &v20);
      sub_10020F5D0(a1[1], (uint64_t)&v20, v3);
      uint64_t v90 = 0LL;
      __int128 v89 = 0u;
      __int128 v88 = 0u;
      __int128 v87 = 0u;
      __int128 v86 = 0u;
      __int128 v85 = 0u;
      __int128 v84 = 0u;
      __int128 v83 = 0u;
      __int128 v82 = 0u;
      __int128 v81 = 0u;
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1[1] + 120LL))(a1[1], &v81))
      {
        uuid_unparse((const unsigned __int8 *)&v81 + 8, out);
        uuid_unparse((const unsigned __int8 *)&v82 + 8, v80);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        uint64_t v8 = (os_log_s *)qword_1019344E8;
        if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
        {
          BOOL v9 = *(void *)&v6 + 24LL != *((void *)a2 + 1);
          *(_DWORD *)std::stringbuf::string_type buf = v19.n128_u32[0];
          uint64_t v52 = v81;
          __int16 v53 = 2080;
          uint64_t v54 = out;
          __int16 v55 = 2080;
          int v56 = v80;
          __int16 v57 = 2048;
          uint64_t v58 = *((void *)&v83 + 1);
          __int16 v59 = 2048;
          uint64_t v60 = v84;
          __int16 v61 = 2048;
          uint64_t v62 = *((void *)&v84 + 1);
          __int16 v63 = 2048;
          uint64_t v64 = v85;
          __int16 v65 = 2048;
          uint64_t v66 = *((void *)&v85 + 1);
          __int16 v67 = 1024;
          int v68 = v87;
          __int16 v69 = 1024;
          int v70 = DWORD1(v87);
          __int16 v71 = 1024;
          int v72 = DWORD2(v87);
          __int16 v73 = 1024;
          int v74 = HIDWORD(v87);
          __int16 v75 = 1024;
          BOOL v76 = v9;
          __int16 v77 = 1024;
          int v78 = DWORD2(v88);
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f , distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d",  buf,  0x76u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_17;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        BOOL v10 = *(void *)&v6 + 24LL != *((void *)a2 + 1);
        unsigned __int32 v23 = v19.n128_u32[0];
        uint64_t v24 = v81;
        __int16 v25 = 2080;
        uint64_t v26 = out;
        __int16 v27 = 2080;
        uint64_t v28 = v80;
        __int16 v29 = 2048;
        uint64_t v30 = *((void *)&v83 + 1);
        __int16 v31 = 2048;
        uint64_t v32 = v84;
        __int16 v33 = 2048;
        uint64_t v34 = *((void *)&v84 + 1);
        __int16 v35 = 2048;
        uint64_t v36 = v85;
        __int16 v37 = 2048;
        uint64_t v38 = *((void *)&v85 + 1);
        __int16 v39 = 1024;
        int v40 = v87;
        __int16 v41 = 1024;
        int v42 = DWORD1(v87);
        __int16 v43 = 1024;
        int v44 = DWORD2(v87);
        __int16 v45 = 1024;
        int v46 = HIDWORD(v87);
        __int16 v47 = 1024;
        BOOL v48 = v10;
        __int16 v49 = 1024;
        int v50 = DWORD2(v88);
        LODWORD(v16) = 118;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d",  &v23,  v16,  v17,  v18,  v19.n128_f64[0],  v19.n128_f64[1],  *(double *)&v20,  *((double *)&v20 + 1),  v21,  v22);
        BOOL v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)",  "%s\n",  v11);
      }

      else
      {
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        uint64_t v13 = (os_log_s *)qword_1019344E8;
        if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "New lap entry, failed to get and log new lap entry after adding to db.",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_17;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        LOWORD(v23) = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "New lap entry, failed to get and log new lap entry after adding to db.",  &v23,  v16);
        BOOL v12 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)",  "%s\n",  v14);
      }

      if (v12 != buf) {
        free(v12);
      }
LABEL_17:
      *(void *)&v6 += 24LL;
    }

    while (*(void *)&v6 != *((void *)a2 + 1));
  }

  return *(void *)&v18 != (void)v17;
}

void sub_1006AC8A8(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  double v9 = a5 - a4;
  if (a5 <= a4) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  double v11 = *(double *)(*(void *)(a1 + 8) + 2168LL);
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101849030);
  }
  double v12 = v11 - v10;
  uint64_t v13 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a3 + 72);
    uint64_t v15 = *(void *)(a3 + 80);
    uint64_t v16 = *(void *)(a3 + 48);
    uint64_t v17 = *(void *)(a3 + 56);
    int v18 = *(_DWORD *)(a3 + 64);
    uint64_t v19 = *(void *)(a3 + 88);
    uint64_t v20 = *(void *)(a3 + 96);
    uint64_t v21 = *(void *)(a3 + 104);
    *(_DWORD *)std::stringbuf::string_type buf = 67111936;
    int v45 = a2;
    __int16 v46 = 2048;
    double v47 = a5;
    __int16 v48 = 2048;
    double v49 = a4;
    __int16 v50 = 2048;
    double v51 = v12;
    __int16 v52 = 2048;
    uint64_t v53 = v16;
    __int16 v54 = 2048;
    uint64_t v55 = v14;
    __int16 v56 = 2048;
    uint64_t v57 = v15;
    __int16 v58 = 2048;
    uint64_t v59 = v19;
    __int16 v60 = 2048;
    uint64_t v61 = v17;
    __int16 v62 = 1024;
    int v63 = v18;
    __int16 v64 = 2048;
    uint64_t v65 = v20;
    __int16 v66 = 2048;
    uint64_t v67 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,% d,prctile10,%f,prctile90,%f",  buf,  0x72u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101849030);
    }
    uint64_t v22 = *(void *)(a3 + 72);
    uint64_t v23 = *(void *)(a3 + 80);
    double v24 = *(double *)(a3 + 48);
    uint64_t v25 = *(void *)(a3 + 56);
    int v26 = *(_DWORD *)(a3 + 64);
    uint64_t v27 = *(void *)(a3 + 88);
    uint64_t v28 = *(void *)(a3 + 96);
    uint64_t v29 = *(void *)(a3 + 104);
    LODWORD(v33) = 67111936;
    HIDWORD(v33) = a2;
    *(_WORD *)uint64_t v34 = 2048;
    *(double *)&v34[2] = a5;
    *(_WORD *)&v34[10] = 2048;
    *(double *)&v34[12] = a4;
    *(_WORD *)&v34[20] = 2048;
    *(double *)&v34[22] = v12;
    *(_WORD *)&v34[30] = 2048;
    *(_WORD *)__int16 v35 = 2048;
    *(void *)&void v35[2] = v22;
    *(_WORD *)&void v35[10] = 2048;
    LODWORD(v++*(_DWORD *)(result + 36) = HIDWORD(v23);
    WORD2(v++*(_DWORD *)(result + 36) = 2048;
    *(void *)((char *)&v36 + 6) = v27;
    HIWORD(v++*(_DWORD *)(result + 36) = 2048;
    uint64_t v37 = v25;
    __int16 v38 = 1024;
    int v39 = v26;
    __int16 v40 = 2048;
    uint64_t v41 = v28;
    __int16 v42 = 2048;
    uint64_t v43 = v29;
    LODWORD(v32) = 114;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,% d,prctile10,%f,prctile90,%f",  &v33,  v32,  v33,  *(double *)v34,  *(double *)&v34[8],  *(double *)&v34[16],  *(double *)&v34[24],  v24,  *(double *)v35,  *(_DWORD *)&v35[8],  *(double *)&v36,  *((double *)&v36 + 1));
    __int16 v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimAlgController::logDistributionParameters(CLSwimStyleType, CLMotionTypeTimestamp, CLMotionTypeTimestamp, CLSwimStrokesPerTurnDistribution) const",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

BOOL sub_1006ACB74(uint64_t a1, double a2, double a3)
{
  if (!sub_10020EBD8(*(void *)(a1 + 8))) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  do
  {
    (*(void (**)(__int128 *__return_ptr, void, uint64_t))(**(void **)(a1 + 8) + 40LL))( &v25,  *(void *)(a1 + 8),  v6);
    if ((*(int (**)(void, uint64_t))(**(void **)(a1 + 8) + 112LL))(*(void *)(a1 + 8), v6) >= 5)
    {
      sub_100A37C90(a1 + 153112, v6, (uint64_t)&v25);
      uint64_t v7 = *(void *)(a1 + 8);
      v24[4] = v29;
      v24[5] = v30;
      v24[6] = v31;
      v24[0] = v25;
      v24[1] = v26;
      void v24[2] = v27;
      void v24[3] = v28;
      sub_10020EBF0(v7, v6, v24);
      v23[4] = v29;
      v23[5] = v30;
      v23[6] = v31;
      v23[0] = v25;
      v23[1] = v26;
      void v23[2] = v27;
      v23[3] = v28;
      sub_1006AC8A8(a1, v6, (uint64_t)v23, a2, a3);
    }

    uint64_t v6 = (v6 + 1);
  }

  while ((_DWORD)v6 != 7);
  BOOL v8 = *(_BYTE *)(a1 + 52) == 0;
  sub_100D7BB78(a1 + 153240, (double **)&v25, a2);
  if (v8)
  {
    uint64_t v17 = (double *)*((void *)&v25 + 1);
  }

  if (sub_10020D828(*(void **)(a1 + 8), (__n128 *)&v21, a2))
  {
    __int128 v18 = v21;
    uint64_t v19 = v22;
    sub_100A37184(a1 + 153112, &v18, v9, v10, v11, v12, __p);
    v13.n128_f64[0] = a3;
    BOOL v14 = sub_1006AC39C((uint64_t *)a1, (double *)__p, v13);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    BOOL v14 = 0LL;
  }

  if ((void)v25)
  {
    *((void *)&v25 + 1) = v25;
    operator delete((void *)v25);
  }

  return v14;
}

void sub_1006ACD88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)(v14 - 184);
  if (v16)
  {
    *(void *)(v14 - 176) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

float sub_1006ACDCC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 166064);
  *(_OWORD *)a2 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 153144);
  unsigned int v5 = *(_DWORD *)(a1 + 153148);
  uint64_t v7 = *(void *)(a1 + 153152);
  int v8 = *(_DWORD *)(a1 + 153164);
  LODWORD(v9) = sub_100A176BC(a1 + 36816, *(double *)&v4).u32[0];
  float v11 = v10;
  float v13 = v12;
  if (v5) {
    float v14 = (float)((float)v6 * 100.0) / (float)v5;
  }
  else {
    float v14 = 0.0;
  }
  *(_DWORD *)(a2 + 20) = vcvtas_u32_f32(v14);
  float result = (*(float (**)(void))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8)) * 10.0;
  *(_DWORD *)(a2 + 24) = vcvtas_u32_f32(result);
  *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(void *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = vcvtas_u32_f32(v13);
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x7E0], 8) = vcvtas_u32_f32(v9);
  *(_DWORD *)(a2 + 52) = vcvtas_u32_f32(v11);
  return result;
}

uint64_t sub_1006ACEAC(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = a1 + 166064;
  int v8 = sub_10020A844(*(void *)(a1 + 8), a2, a4, *(double *)(a1 + 712));
  if ((v8 - 1) >= 3)
  {
    if (v8 == 5)
    {
      *(double *)(v7 + _Block_object_dispose(&STACK[0x7E0], 8) = a4;
      sub_1006ACDCC(a1, a3);
      *(void *)(a1 + 15320_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
      *(_OWORD *)(a1 + 153176) = 0u;
      *(_OWORD *)(a1 + 153192) = 0u;
      *(_OWORD *)(a1 + 153144) = 0u;
      *(_OWORD *)(a1 + 153160) = 0u;
      *(_OWORD *)(a1 + 114040) = 0u;
      *(_DWORD *)(a1 + 114056) = 0;
      __asm { FMOV            V0.2D, #-1.0 }

      *(_OWORD *)uint64_t v7 = _Q0;
      uint64_t result = 1LL;
      *(void *)(a1 + 712) = 0LL;
    }

    else
    {
      if (v8 == 6) {
        sub_1006ACFB8((uint64_t *)a1, 0, *(double *)(a1 + 712), a4, a4);
      }
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 15320_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
    *(_OWORD *)(a1 + 153176) = 0u;
    *(_OWORD *)(a1 + 153192) = 0u;
    *(_OWORD *)(a1 + 153144) = 0u;
    *(_OWORD *)(a1 + 153160) = 0u;
    *(_OWORD *)(a1 + 114040) = 0u;
    *(_DWORD *)(a1 + 114056) = 0;
    *(void *)(v7 + _Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
    *(void *)(a1 + 712) = 0LL;
    *(double *)uint64_t v7 = a4;
  }

  return result;
}

void sub_1006ACFB8(uint64_t *a1, int a2, double a3, double a4, double a5)
{
  uint64_t v9 = a1[1];
  *(double *)(v9 + 216_Block_object_dispose(&STACK[0x7E0], 8) = a4;
  sub_100210204(v9, a5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 176LL))(a1[1]))
  {
    sub_1006ACB74((uint64_t)a1, a3, a3);
    sub_100A37164((uint64_t)(a1 + 19139), __p);
    if (a2)
    {
      v10.n128_f64[0] = a3;
      sub_1006AC39C(a1, (double *)__p, v10);
    }

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  if (a2) {
    sub_10020D3B0(a1[1], a4, a3);
  }
}

void sub_1006AD06C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AD088(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0LL;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t result = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8), v9);
  BOOL v8 = !(_DWORD)result
    || (int v5 = DWORD1(v13),
        uint64_t result = (*(uint64_t (**)(void, double, double))(**(void **)(a1 + 8) + 144LL))( *(void *)(a1 + 8),  *(double *)(a2 + 8),  *(double *)a2),  v5 != (_DWORD)result)
    && ((_DWORD)result != 6 ? (BOOL v6 = v5 == 6) : (BOOL v6 = 1), v6)
  *(_BYTE *)(a2 + 20) = v8;
  return result;
}

void *sub_1006AD170(void *result)
{
  *uint64_t result = &off_101849000;
  return result;
}

void sub_1006AD180(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

unsigned __int16 *sub_1006AD1AC(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0LL;
  }
  __int128 v4 = &result[36 * (v3 - v2)];
  int v5 = *(_DWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 12) = v6;
  *((_DWORD *)v4 + 10) = v5;
  *(_OWORD *)(v4 + 22) = *(_OWORD *)(a2 + 36);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 56);
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1LL;
    if (v9 < v8) {
      LOWORD(v_Block_object_dispose(&STACK[0x7E0], 8) = 0;
    }
    *uint64_t result = v9 - v8;
  }

  else
  {
    result[1] = v7 + 1;
  }

  return result;
}

BOOL sub_1006AD22C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = a2 - 501LL;
  unint64_t v5 = v4 + v3;
  if (__CFADD__(v4, v3))
  {
    uint64_t v7 = sub_1006AD2D4(a1, v4 + v3);
    *(_DWORD *)a3 = *(_DWORD *)v7;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)(v7 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v7 + 12);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(v7 + 20);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x7E0], 8) = *(_DWORD *)(v7 + 28);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 32);
    if (v7 != a3) {
      *(_OWORD *)(a3 + ++*(_DWORD *)(result + 36) = *(_OWORD *)(v7 + 36);
    }
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v7 + 56);
  }

  return v5 < v3;
}

uint64_t sub_1006AD2D4(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849050);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849050);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLSwimFusionInput>::operator[](const size_t) const [T = CLSwimFusionInput]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[36 * (v4 - v5) + 4];
}

void sub_1006AD4D0(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

float sub_1006AD500(uint64_t a1, void *a2, double *a3, int8x16_t a4, int8x16_t a5)
{
  float v5 = 3.4028e38;
  if (*(_BYTE *)(a1 + 82))
  {
    float v6 = 3.4028e38;
    float32x4_t v9 = (float32x4_t)veorq_s8(a4, a4);
    float32x4_t v7 = (float32x4_t)veorq_s8(a5, a5);
    v9.i64[0] = *a2;
    int v8 = (__int32 *)(a2 + 1);
    v9.i32[2] = *v8;
    double v10 = *(double *)((unint64_t)(v8 + 2) & 0xFFFFFFFFFFFFFFF8LL);
    __int128 v11 = *(void **)a1;
    int v12 = *(unsigned __int16 *)(a1 + 80);
    unint64_t v13 = *(_DWORD **)(a1 + 16);
    do
    {
      v7.i64[0] = *v11;
      __int16 v14 = v11 + 1;
      v7.i32[2] = *v14;
      __int128 v11 = v14 + 1;
      float32x4_t v15 = vsubq_f32(v7, v9);
      float32x4_t v16 = vmulq_f32(v15, v15);
      float32x4_t v7 = vpaddq_f32(v16, v16);
      v7.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v7.f32));
      *v13++ = v7.i32[0];
      float v6 = fminf(v6, v7.f32[0]);
      BOOL v17 = __OFSUB__(v12--, 1);
    }

    while (v12 < 0 == v17);
    *(_WORD *)(a1 + 80) = *(_WORD *)(*(void *)(a1 + 64) + 2LL);
    if (SLODWORD(v6) <= *(_DWORD *)(a1 + 32))
    {
      int v18 = *(_DWORD *)(a1 + 40);
      BOOL v19 = v18 != 0;
      *(_DWORD *)(a1 + 40) = (v18 + 1) % *(unsigned __int16 *)(a1 + 38);
      uint64_t v20 = *(_WORD **)(a1 + 48);
      __int128 v21 = *(float **)(a1 + 24);
      int v22 = *(unsigned __int16 *)(a1 + 36);
      do
      {
        uint64_t v23 = (double *)(*(void *)(a1 + 72) + 4LL * ((void)v20 - *(void *)(a1 + 48)));
        uint64_t v24 = (unsigned __int16)*v20;
        if (v19 || *v20)
        {
          if (*v20)
          {
            __int128 v30 = (unsigned __int16 *)(*(void *)(a1 + 64) + 4 * v24);
            uint64_t v31 = *v30;
            int v32 = *(v30 - 2);
            uint64_t v33 = (v31 - v32);
            float v34 = 3.4028e38;
            float v35 = 3.4028e38;
            int v36 = v30[1];
            uint64_t v37 = (float *)(*(void *)(a1 + 16) + 4 * v31);
            int v38 = *(v30 - 1);
            int v39 = v31 + 1;
            float v41 = *v37;
            __int16 v40 = v37 + 1;
            float v42 = v41 + fminf(v34, v35);
            uint64_t v43 = &v21[v39 - v32];
            if (v38 > v36) {
              int v38 = v30[1];
            }
            int v45 = v38 - v39;
            BOOL v44 = v38 < v39;
            float v46 = v42;
            *__int128 v21 = v42;
            double v47 = v21 + 1;
            if (!v44)
            {
              do
              {
                float v48 = fminf(v35, v46);
                float v49 = *v43++;
                float v35 = v49;
                float v50 = fminf(v48, v49);
                float v51 = *v40++;
                ++v39;
                float v46 = v51 + v50;
                float v42 = fminf(v42, v51 + v50);
                *v47++ = v51 + v50;
                BOOL v17 = __OFSUB__(v45--, 1);
              }

              while (v45 < 0 == v17);
            }

            int v52 = v36 - v39;
            if (v36 >= v39)
            {
              float v54 = *v40;
              uint64_t v53 = v40 + 1;
              BOOL v17 = __OFSUB__(v52, 1);
              int v55 = v52 - 1;
              float v56 = v54 + fminf(v35, v46);
              float v42 = fminf(v42, v56);
              *double v47 = v56;
              for (CFIndex i = v47 + 1; v55 < 0 == v17; --v55)
              {
                float v58 = *v53++;
                float v56 = v56 + v58;
                float v42 = fminf(v42, v56);
                *i++ = v56;
                BOOL v17 = __OFSUB__(v55, 1);
              }
            }

            int v59 = *(_DWORD *)(a1 + 32);
            uint64_t v60 = (v24 + 1);
            _WORD *v20 = v60;
            if (SLODWORD(v42) <= v59)
            {
              if ((int)v60 < *(unsigned __int16 *)(a1 + 10))
              {
                int v61 = *(unsigned __int16 *)(a1 + 80);
                if (v61 < SHIWORD(*(_DWORD *)(*(void *)(a1 + 64) + 4 * v60))) {
                  LOWORD(v61) = HIWORD(*(_DWORD *)(*(void *)(a1 + 64) + 4 * v60));
                }
                *(_WORD *)(a1 + 80) = v61;
              }

              else
              {
                if (SLODWORD(v5) > SLODWORD(v42))
                {
                  float v5 = v42;
                  *a3 = v10 - *v23;
                }

                _WORD *v20 = 0;
              }
            }

            else
            {
              _WORD *v20 = 0;
            }
          }
        }

        else
        {
          int v25 = *(unsigned __int16 *)(a1 + 58);
          *__int128 v21 = **(float **)(a1 + 16);
          __int128 v26 = v21 + 1;
          BOOL v17 = __OFSUB__(v25, 1);
          for (int j = v25 - 1; !((j < 0) ^ v17 | (j == 0)); --j)
          {
            *v26++ = 2139095039;
            BOOL v17 = __OFSUB__(j, 1);
          }

          int v28 = *(unsigned __int16 *)(a1 + 80);
          uint64_t v29 = *(void *)(a1 + 64);
          _WORD *v20 = 1;
          if (v28 < SHIWORD(*(_DWORD *)(v29 + 4))) {
            LOWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = HIWORD(*(_DWORD *)(v29 + 4));
          }
          *(_WORD *)(a1 + 80) = v28;
          *uint64_t v23 = v10;
          BOOL v19 = 1;
        }

        ++v20;
        v21 += *(unsigned __int16 *)(a1 + 58);
        BOOL v17 = __OFSUB__(v22--, 1);
      }

      while (!((v22 < 0) ^ v17 | (v22 == 0)));
    }

    else
    {
      bzero(*(void **)(a1 + 48), 2 * *(unsigned __int16 *)(a1 + 36));
      return 3.4028e38;
    }
  }

  return v5;
}

void *sub_1006AD7E8(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_101849080;
  a1[9] = off_101849160;
  a1[43] = off_1018491B0;
  sub_100B14CF0(a1 + 44, 0LL, 0LL);
  sub_100B14CF0(a1 + 46, 0LL, 0LL);
  sub_100B14CF0(a1 + 48, 0LL, 0LL);
  sub_100B14CF0(a1 + 50, 0LL, 0LL);
  sub_100B14CF0(a1 + 52, 0LL, 0LL);
  sub_100B14CF0(a1 + 54, 0LL, 0LL);
  sub_100B14CF0(a1 + 56, 0LL, 0LL);
  sub_100B14CF0(a1 + 58, 0LL, 0LL);
  sub_100B14CF0(a1 + 60, 0LL, 0LL);
  sub_100B14CF0(a1 + 62, 0LL, 0LL);
  sub_100B14CF0(a1 + 64, 0LL, 0LL);
  sub_100B14CF0(a1 + 66, 0LL, 0LL);
  sub_100B14CF0(a1 + 68, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_1006AD950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AD97C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_10182BDA0;
  *(void *)a1 = off_101849418;
  *(void *)(a1 + 72) = off_1018494C0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101849418;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_1018494C0;
  *(_OWORD *)(a1 + 232) = 0u;
  unint64_t v13 = (void *)(a1 + 232);
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 280));
  *(void *)(a1 + 280) = &off_10182BDA0;
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v30 = a1 + 112;
  (*(void (**)(void))(v14 + 16))();
  __int16 v32 = 256;
  if (a3)
  {
    *unint64_t v13 = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v30 + 24LL))(v30);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a4;
    uint64_t v29 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  float32x4_t v16 = (int *)(a1 + 264);
  char v17 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 264));
  int v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if ((v17 & 1) == 0) {
    *float32x4_t v16 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101849500);
  }
  __int128 v21 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *v16;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849500);
    }
    int v25 = *v16;
    v33[0] = 67109120;
    v33[1] = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v33);
    __int128 v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLMobility::BoutBoundary>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActi vityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  int v23 = HIBYTE(v32);
  *unint64_t v13 = 0xBFF0000000000000LL;
  if (v23)
  {
    if ((_BYTE)v32)
    {
      pthread_mutex_unlock(v31);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_1006ADD34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[34] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1001B9D48(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_1006ADDD8()
{
}

void *sub_1006ADDE0(void *a1)
{
  a1[9] = off_1018494C0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101849418;
  a1[34] = off_10182BD58;
  sub_1001B9C98(a1 + 35);
  sub_1001B9D48(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_1006ADE60(uint64_t a1)
{
  return sub_1006ADDE0((void *)(a1 - 72));
}

void *sub_1006ADE68(uint64_t a1)
{
  return sub_1006ADDE0((void *)(a1 - 344));
}

void sub_1006ADE70(void *a1)
{
  int v1 = sub_1006ADDE0(a1);
  operator delete(v1);
}

void sub_1006ADE84(uint64_t a1)
{
  int v1 = sub_1006ADDE0((void *)(a1 - 72));
  operator delete(v1);
}

void sub_1006ADE9C(uint64_t a1)
{
  int v1 = sub_1006ADDE0((void *)(a1 - 344));
  operator delete(v1);
}

uint64_t sub_1006ADEB4(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100B14CF8(a1 + 50, &v13);
  float v5 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v6 = a1[10];
    float32x4_t v7 = (sqlite3_stmt *)sub_100019240(v13);
    sub_1003BB2BC(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }

  else
  {
    uint64_t v8 = -1LL;
  }

  sub_1003C05BC(a1[10]);
  uint64_t v9 = a1[10];
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_1003C1EC0(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return v8;
}

void sub_1006ADFBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006ADFE0(uint64_t a1, uint64_t a2)
{
  return sub_1006ADEB4((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1006ADFE8(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100B14CF8((uint64_t *)(a1 + 416), &v22);
    sub_1003C0454(*(void *)(a1 + 80));
    *(_DWORD *)__int128 v21 = 0;
    memset(&v21[8], 0, 32);
    while (!sub_1006AE1D4(&v22, (uint64_t)v21))
    {
      unint64_t v5 = (unint64_t)a2[1];
      unint64_t v6 = (unint64_t)a2[2];
      if (v5 >= v6)
      {
        unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*a2) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x666666666666666LL) {
          sub_100007008();
        }
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)*a2) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x333333333333333LL) {
          unint64_t v12 = 0x666666666666666LL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[40 * v9];
        __int128 v15 = *(_OWORD *)&v21[16];
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v21;
        *((_OWORD *)v14 + 1) = v15;
        *((void *)v14 + 4) = *(void *)&v21[32];
        char v17 = *a2;
        float32x4_t v16 = a2[1];
        int v18 = v14;
        if (v16 != *a2)
        {
          do
          {
            __int128 v19 = *(_OWORD *)(v16 - 40);
            __int128 v20 = *(_OWORD *)(v16 - 24);
            *((void *)v18 - 1) = *((void *)v16 - 1);
            *(_OWORD *)(v18 - 24) = v20;
            *(_OWORD *)(v18 - 40) = v19;
            v18 -= 40;
            v16 -= 40;
          }

          while (v16 != v17);
          float32x4_t v16 = *a2;
        }

        uint64_t v8 = v14 + 40;
        *a2 = v18;
        a2[1] = v14 + 40;
        a2[2] = &v13[40 * v12];
        if (v16) {
          operator delete(v16);
        }
      }

      else
      {
        __int128 v7 = *(_OWORD *)&v21[16];
        *(_OWORD *)unint64_t v5 = *(_OWORD *)v21;
        *(_OWORD *)(v5 + 16) = v7;
        *(void *)(v5 + 32) = *(void *)&v21[32];
        uint64_t v8 = (char *)(v5 + 40);
      }

      a2[1] = v8;
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t result = v22;
    uint64_t v22 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AE1A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8LL))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AE1D4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  unint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  __int128 v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + _Block_object_dispose(&STACK[0x7E0], 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  unint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  unint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x7E0], 8) = sqlite3_column_int(v10, 4);
  unint64_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 32) = sqlite3_column_int(v11, 5);
  unint64_t v12 = (sqlite3_stmt *)sub_100019240(*a1);
  int v13 = sqlite3_column_int(v12, 6);
  uint64_t result = 0LL;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 36) = v13;
  return result;
}

uint64_t sub_1006AE2B4(uint64_t a1)
{
  unint64_t v3 = (sqlite3_stmt *)sub_100019240(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }

  uint64_t v6 = v8;
  uint64_t v8 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1006AE344( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AE36C(uint64_t a1)
{
  return sub_1006AE2B4(a1 - 72);
}

uint64_t sub_1006AE374(uint64_t a1, int a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 352), &v11);
    int v5 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003C28BC(v5, 1, a2))
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101849268);
      }
      uint64_t v6 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67240192;
        int v14 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Deleting boundary from db: id=%{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101849268);
        }
        v12[0] = 67240192;
        v12[1] = a2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "Deleting boundary from db: id=%{public}d",  v12,  8);
        unint64_t v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMobility::BoutBoundaryRecorderDb::deleteBoundary(int)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v11);
      sub_1003BB2BC(v7, v8);
    }

    uint64_t result = v11;
    uint64_t v11 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AE580( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AE5B0(uint64_t a1, int a2)
{
  return sub_1006AE374(a1 - 344, a2);
}

uint64_t sub_1006AE5B8(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v9 = a1 + 112;
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 72;
  v33[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  __int16 v34 = 256;
  if ((sub_100D8A92C(v10) & 1) != 0)
  {
    a2[1] = *a2;
    sub_100B14CF8((uint64_t *)(a1 + 448), v33);
    LODWORD(buf[0]) = 0;
    memset((char *)buf + 8, 0, 32);
    if (a4 >= a3)
    {
      uint64_t v11 = (sqlite3_stmt *)sub_100019240(v33[0]);
      if (sub_1003B7480(v11, 1, a3))
      {
        unint64_t v12 = (sqlite3_stmt *)sub_100019240(v33[0]);
        if (sub_1003B7480(v12, 2, a4))
        {
          while (!sub_1006AE1D4(v33, (uint64_t)buf))
          {
            unint64_t v13 = (unint64_t)a2[1];
            unint64_t v14 = (unint64_t)a2[2];
            if (v13 >= v14)
            {
              unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 3);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0x666666666666666LL) {
                sub_100007008();
              }
              unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 3);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x333333333333333LL) {
                unint64_t v19 = 0x666666666666666LL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19) {
                __int128 v20 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v19);
              }
              else {
                __int128 v20 = 0LL;
              }
              __int128 v21 = &v20[40 * v16];
              *(_OWORD *)__int128 v21 = buf[0];
              *((_OWORD *)v21 + 1) = buf[1];
              *((void *)v21 + 4) = *(void *)&buf[2];
              int v23 = *a2;
              uint64_t v22 = a2[1];
              uint64_t v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  __int128 v25 = *(_OWORD *)(v22 - 40);
                  __int128 v26 = *(_OWORD *)(v22 - 24);
                  *((void *)v24 - 1) = *((void *)v22 - 1);
                  *(_OWORD *)(v24 - 24) = v26;
                  *(_OWORD *)(v24 - 40) = v25;
                  v24 -= 40;
                  v22 -= 40;
                }

                while (v22 != v23);
                uint64_t v22 = *a2;
              }

              __int128 v15 = v21 + 40;
              *a2 = v24;
              a2[1] = v21 + 40;
              a2[2] = &v20[40 * v19];
              if (v22) {
                operator delete(v22);
              }
            }

            else
            {
              *(_OWORD *)unint64_t v13 = buf[0];
              *(_OWORD *)(v13 + 16) = buf[1];
              *(void *)(v13 + 32) = *(void *)&buf[2];
              __int128 v15 = (char *)(v13 + 40);
            }

            a2[1] = v15;
          }
        }
      }
    }

    uint64_t v29 = v33[0];
    v33[0] = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    uint64_t v28 = 100LL;
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    __int128 v27 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "MobilityWalkingBoutHistory not accessible",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101849268);
      }
      LOWORD(v33[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "MobilityWalkingBoutHistory not accessible",  v33,  2);
      __int16 v32 = (char *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLMobility::BoutBoundaryRecorderDb::queryBoundariesInTimeRange(CFAbsoluteTime, CFAbsoluteTime, s td::vector<BoutBoundary> &)",  "%s\n",  v31);
    }

    uint64_t v28 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  return v28;
}

void sub_1006AE968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1006AE9B8(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_1006AE5B8(a1 - 344, a2, a3, a4);
}

void sub_1006AE9C0(void *a1, uint64_t a2)
{
  int v15 = 0;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  int v4 = 0;
  if (sub_10029DF68(a1, (uint64_t)&v15))
  {
    if (*(double *)&v16 == *(double *)(a2 + 8))
    {
      int v4 = v15;
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101849268);
      }
      int v5 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 67240448;
        *(_DWORD *)__int128 v21 = v4;
        *(_WORD *)&v21[4] = 2050;
        *(void *)&v21[6] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Wrote boundary to db: id=%{public}d, startTime=%{public}.2f",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101849268);
        }
        uint64_t v7 = *(void *)(a2 + 8);
        int v18 = 67240448;
        *(_DWORD *)unint64_t v19 = v4;
        *(_WORD *)&_DWORD v19[4] = 2050;
        *(void *)&v19[6] = v7;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "Wrote boundary to db: id=%{public}d, startTime=%{public}.2f",  &v18,  18);
        uint64_t v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
      }
    }

    else
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101849268);
      }
      uint64_t v10 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        *(void *)__int128 v21 = v11;
        *(_WORD *)&v21[8] = 2050;
        *(void *)&v21[10] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Inserted boundary (startTime=%{public}f) is not the latest boundary (startTime=%{public}f)",  buf,  0x16u);
      }

      int v4 = 0;
      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101849268);
        }
        uint64_t v12 = *(void *)(a2 + 8);
        int v18 = 134349312;
        *(void *)unint64_t v19 = v12;
        *(_WORD *)&v19[8] = 2050;
        *(void *)&void v19[10] = v16;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "Inserted boundary (startTime=%{public}f) is not the latest boundary (startTime=%{public}f)",  &v18,  22);
        unint64_t v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
        int v4 = 0;
      }
    }
  }

  *(_DWORD *)a2 = v4;
}

void sub_1006AED44(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1006AED4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 72;
  uint64_t v23 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v24 = 256;
  if ((sub_100D8A92C(v8) & 1) == 0)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    uint64_t v10 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "MobilityWalkingBoutHistory not accessible",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_27;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    LOWORD(v20) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "MobilityWalkingBoutHistory not accessible",  &v20,  2);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v11);
    goto LABEL_34;
  }

  int v20 = 0;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  int v9 = sub_1006AF1FC(a1, (uint64_t)&v20);
  if (v9)
  {
    if (v9 == 1)
    {
      *a3 = 0LL;
      *a2 = 0LL;
LABEL_29:
      uint64_t v16 = 1LL;
      goto LABEL_30;
    }

    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    int v15 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "MobilityWalkingBoutHistory Encountered an error getting earliest record",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_27;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "MobilityWalkingBoutHistory Encountered an error getting earliest record",  v19,  2);
    uint64_t v12 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v18);
LABEL_34:
    if (v12 != buf) {
      free(v12);
    }
    goto LABEL_27;
  }

  *a2 = v21;
  if (!sub_1006AF294(a1, (uint64_t)&v20))
  {
    *a3 = *((void *)&v21 + 1);
    goto LABEL_29;
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101849268);
  }
  unint64_t v13 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "MobilityWalkingBoutHistory Encountered an error getting latest record",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101849268);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "MobilityWalkingBoutHistory Encountered an error getting latest record",  v19,  2);
    uint64_t v12 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v14);
    goto LABEL_34;
  }

void sub_1006AF1C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1006AF1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006AE1D4(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v4;
}

void sub_1006AF270( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AF294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006AE1D4(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v4;
}

void sub_1006AF308( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AF32C(uint64_t a1, void *a2, void *a3)
{
  return sub_1006AED4C(a1 - 344, a2, a3);
}

BOOL sub_1006AF338(uint64_t a1, uint64_t a2)
{
  return sub_10029DF68((void *)(a1 - 344), a2);
}

uint64_t sub_1006AF340(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_1006AF4A4((uint64_t)a1);
    sub_1003B59A0( a1[10],  "MobilityWalkingBoutHistory",  (const char **)&off_101849288,  (const std::string::value_type **)&off_101939B00,  0);
    a1[44] = sub_1003BF158(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE id = ?");
    a1[45] = v3;
    a1[46] = sub_1003BF158(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE startTime > ?");
    a1[47] = v4;
    a1[48] = sub_1003BF158(a1[10], "DELETE FROM MobilityWalkingBoutHistory");
    a1[49] = v5;
    a1[50] = sub_1003BF158(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE startTime < ?");
    a1[51] = v6;
    a1[52] = sub_1003BF158(a1[10], "SELECT * from MobilityWalkingBoutHistory ORDER BY startTime ASC");
    a1[53] = v7;
    a1[54] = sub_1003BF158(a1[10], "SELECT COUNT(*) FROM MobilityWalkingBoutHistory");
    a1[55] = v8;
    a1[56] = sub_1003BF158( a1[10],  "SELECT * FROM MobilityWalkingBoutHistory WHERE startTime >= ? and endTime > 0 and endTime <= ? ORDER BY startTime ASC");
    a1[57] = v9;
    a1[58] = sub_1003BF158(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY id DESC LIMIT 1");
    a1[59] = v10;
    a1[60] = sub_1003BF158(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY endTime DESC LIMIT 1");
    a1[61] = v11;
    a1[62] = sub_1003BF158(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY startTime ASC LIMIT 1");
    a1[63] = v12;
    a1[64] = sub_1003BF158( a1[10],  "INSERT INTO MobilityWalkingBoutHistory (startTime, endTime, stepCount, workoutType, terminationReason, bo undaryType) VALUES (?, ?, ?, ?, ?, ?)");
    a1[65] = v13;
    a1[66] = sub_1003BF158(a1[10], "UPDATE MobilityWalkingBoutHistory SET startTime = startTime + ?");
    a1[67] = v14;
    uint64_t result = sub_1003BF158( a1[10],  "UPDATE MobilityWalkingBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, workoutType = ?, termina tionReason = ?, boundaryType = ? WHERE id = ?");
    a1[68] = result;
    a1[69] = v15;
  }

  return result;
}

uint64_t sub_1006AF4A4(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "MobilityWalkingBoutHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "workoutType";
    do
    {
      int v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "MobilityWalkingBoutHistory", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        uint64_t v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE MobilityWalkingBoutHistory ADD COLUMN ", 50LL);
        size_t v10 = strlen(v8);
        uint64_t v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        uint64_t v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        uint64_t v13 = (const char *)sub_1003BCC40((int)(&off_101849288)[v3 + 25]);
        size_t v14 = strlen(v13);
        uint64_t v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v17 = &v31;
        }
        else {
          __int128 v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        int v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        __int128 v21 = sub_10000CF44(&v31.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE MobilityWalkingBoutHistory SET ", 38LL);
        size_t v22 = strlen(v8);
        uint64_t v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v25 = &v29;
        }
        else {
          __int128 v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - operator delete(*(void **)(v0 + 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - operator delete(*(void **)(v0 + 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      uint64_t v8 = (&off_101849288)[v3 + 30];
      v3 += 6LL;
    }

    while (v3 != 18);
    uint64_t result = sub_1006AFE5C( a1,  "MobilityWalkingBoutHistory",  (const char **)&off_101849288,  (const std::string::value_type **)&off_101939B00);
  }

  return result;
}

void sub_1006AF848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AF8E0(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 384), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_1003C1EC0(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AF964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AF988(uint64_t a1)
{
  return sub_1006AF8E0(a1 - 72);
}

uint64_t sub_1006AF990(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_100B14CF8(a1 + 46, &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v10);
    if (sub_1003B7480(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = a1[10];
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v10);
      sub_1003BB2BC(v6, v7);
    }

    uint64_t v8 = a1[10];
    else {
      uint64_t v9 = *(void *)(v8 + 88);
    }
    sub_1003C1EC0(v8, v9);
    uint64_t result = v10;
    uint64_t v10 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AFA48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AFA6C(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 528), &v8);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v8);
    if (sub_1003B7480(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v8);
      sub_1003BB2BC(v6, v7);
    }

    uint64_t result = v8;
    uint64_t v8 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AFAFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AFB20(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 512), &v17);
    if (v17)
    {
      uint64_t v5 = (sqlite3_stmt *)sub_100019240(v17);
      if (sub_1003B7480(v5, 1, *(double *)(a2 + 8)))
      {
        uint64_t v6 = (sqlite3_stmt *)sub_100019240(v17);
        if (sub_1003B7480(v6, 2, *(double *)(a2 + 16)))
        {
          uint64_t v7 = (sqlite3_stmt *)sub_100019240(v17);
          if (sub_1003C2AF0(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            uint64_t v8 = (sqlite3_stmt *)sub_100019240(v17);
            if (sub_1003C28BC(v8, 4, *(_DWORD *)(a2 + 28)))
            {
              uint64_t v9 = (sqlite3_stmt *)sub_100019240(v17);
              if (sub_1003C28BC(v9, 5, *(_DWORD *)(a2 + 32)))
              {
                uint64_t v10 = (sqlite3_stmt *)sub_100019240(v17);
                if (sub_1003C28BC(v10, 6, *(_DWORD *)(a2 + 36)))
                {
                  uint64_t v11 = *(void *)(a1 + 80);
                  uint64_t v12 = (sqlite3_stmt *)sub_100019240(v17);
                  sub_1003BB2BC(v11, v12);
                }
              }
            }
          }
        }
      }
    }

    else
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101849268);
      }
      uint64_t v13 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "BoutBoundaryRecorderDb: unable to prepare insert #InvalidPreparedSQLStatement",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101849268);
        }
        __int16 v16 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "BoutBoundaryRecorderDb: unable to prepare insert #InvalidPreparedSQLStatement",  &v16,  2);
        uint64_t v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMobility::BoutBoundaryRecorderDb::insertRecordUL(const BoutBoundary &, BOOL)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }
    }

    uint64_t result = v17;
    uint64_t v17 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006AFD8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AFDBC()
{
  return 0LL;
}

uint64_t sub_1006AFDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006AE1D4(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v4;
}

void sub_1006AFE38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AFE5C(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849500);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int128 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::migrateDbConstraints(const char *, const CLSqliteDatabase:: ColumnInfo *, const char **) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      __int16 v16 = v143;
    }
    else {
      __int16 v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      __int128 v21 = &__p;
    }
    else {
      __int128 v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v34 = &v139;
    }
    else {
      __int16 v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    int v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    float v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      float v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v47 = &__p;
      }
      else {
        double v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      float v48 = v143;
    }
    else {
      float v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    float v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    int v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v54 = buf;
    }
    else {
      float v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    float v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    float v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v60 = buf;
    }
    else {
      uint64_t v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v69 = &__p;
    }
    else {
      __int16 v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    int v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    int v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v75 = &__p;
      }
      else {
        __int16 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    BOOL v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      uint64_t v79 = &__p;
    }
    else {
      uint64_t v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    uuid_string_t v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v85 = &__p;
      }
      else {
        __int128 v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      __int128 v86 = v143;
    }
    else {
      __int128 v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int128 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    int v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v95 = &__p;
    }
    else {
      double v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    __int16 v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      double v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        double v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v103 = &__p;
        }
        else {
          __int16 v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        uint64_t v104 = v141;
      }
      else {
        uint64_t v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      double v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      double v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v114 = buf;
      }
      else {
        __int16 v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      __int16 v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v121 = &__p;
      }
      else {
        int v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int16 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      __int16 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        uint64_t v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::migrateDbConstraints(const char *, const CLSqliteDatabase ::ColumnInfo *, const char **) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataP rotectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      __int16 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int16 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::migrateDbConstraints(const char *, const CLSqliteDatabase ::ColumnInfo *, const char **) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataP rotectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_1006B0FF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1314(void *a1, void **a2, double a3, double a4)
{
  __int128 v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v43);
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if (HIBYTE(v44)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_1012429F4(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v43[1];
  operator delete(v43[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v43);
  uint64_t v11 = sub_10000CF44(&v44, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if (__p[23] >= 0) {
    __int128 v12 = __p;
  }
  else {
    __int128 v12 = *(_BYTE **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v13 = __p[23];
  }
  else {
    uint64_t v13 = *(void *)&__p[8];
  }
  size_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v45;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v45);
  if (__p[23] >= 0) {
    __int16 v16 = __p;
  }
  else {
    __int16 v16 = *(char **)__p;
  }
  sub_1003C0D54(v15, v16, &v41);
  uint64_t v5 = v41;
  uint64_t v41 = 0LL;
  uint64_t v42 = v5;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      *(_DWORD *)std::string __p = 0;
      memset(&__p[8], 0, 32);
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v42, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        signed __int8 v20 = (char *)a2[1];
        __int128 v21 = (char *)a2[2];
        if (v20 >= v21)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a2) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x666666666666666LL) {
            sub_100007008();
          }
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (_BYTE *)*a2) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x333333333333333LL) {
            unint64_t v28 = 0x666666666666666LL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            std::string::size_type v29 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v28);
          }
          else {
            std::string::size_type v29 = 0LL;
          }
          uint64_t v30 = &v29[40 * v25];
          __int128 v31 = *(_OWORD *)__p;
          __int128 v32 = *(_OWORD *)&__p[16];
          *((void *)v30 + 4) = *(void *)&__p[32];
          *(_OWORD *)uint64_t v30 = v31;
          *((_OWORD *)v30 + 1) = v32;
          __int16 v34 = (char *)*a2;
          __int128 v33 = (char *)a2[1];
          std::string::size_type v35 = v30;
          if (v33 != *a2)
          {
            do
            {
              __int128 v36 = *(_OWORD *)(v33 - 40);
              __int128 v37 = *(_OWORD *)(v33 - 24);
              *((void *)v35 - 1) = *((void *)v33 - 1);
              *(_OWORD *)(v35 - 24) = v37;
              *(_OWORD *)(v35 - 40) = v36;
              v35 -= 40;
              v33 -= 40;
            }

            while (v33 != v34);
            __int128 v33 = (char *)*a2;
          }

          std::string::size_type v24 = v30 + 40;
          *a2 = v35;
          a2[1] = v30 + 40;
          a2[2] = &v29[40 * v28];
          if (v33) {
            operator delete(v33);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = *(_OWORD *)&__p[16];
          *((void *)v20 + 4) = *(void *)&__p[32];
          *(_OWORD *)signed __int8 v20 = v22;
          *((_OWORD *)v20 + 1) = v23;
          std::string::size_type v24 = v20 + 40;
        }

        a2[1] = v24;
      }

      uint64_t v5 = v42;
      goto LABEL_43;
    }
  }

void sub_1006B166C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B16D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849500);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::stringbuf::string_type buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::setDatabaseAccessible() [T = CLMobility::BoutBoun dary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849500);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int16 v16 = (void *)(v14 + 8 * (v13 / 0x66));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 40 * (v13 % 0x66);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x66)) + 40 * (v22 % 0x66);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101849520);
      }
      std::string::size_type v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101849520);
        }
        LOWORD(v41) = 0;
        LODWORD(v3_Block_object_dispose(&STACK[0x7E0], 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::setDatabaseAccessible() [T = CLMobility::BoutBoun dary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 40LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849500);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
    }

    signed __int8 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 51LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 102LL;
  }

  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_1006B1E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_1006B1E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_1006B1E50(uint64_t a1, __int128 *a2, char a3)
{
  v36[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v36[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v36);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v33 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104LL))(a1, &v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        LOWORD(v37) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v37,  2);
        __int16 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CL Mobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = *(double *)&v34;
    double v9 = v7 - *(double *)&v34;
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101849500);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        double v42 = *(double *)&v34;
        __int16 v43 = 2050;
        uint64_t v44 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        uint64_t v24 = *((void *)a2 + 1);
        int v37 = 134349312;
        double v38 = *(double *)&v34;
        __int16 v39 = 2050;
        uint64_t v40 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v37,  22);
        unint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CL Mobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = *(double *)&v34;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          double v42 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101849500);
          }
          double v27 = *((double *)a2 + 1);
          int v37 = 134217984;
          double v38 = v27;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v37));
          uint64_t v29 = (uint8_t *)v28;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v28);
          if (v29 != buf) {
            free(v29);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101849500);
        double v18 = v32;
      }

      double v19 = v17 - v18;
      signed __int8 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        double v42 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101849500);
        }
        int v37 = 134217984;
        double v38 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v37));
        uint64_t v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CL Mobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
        if (v31 != buf) {
          free(v31);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, int *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, &v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_1006B25A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1006B25CC(uint64_t a1)
{
  return sub_1006B16D4(a1 - 72);
}

void sub_1006B25D4(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_1006B2600(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v37);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if (HIBYTE(v38)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_101242B60(v4);
LABEL_44:
    sub_100007008();
  }

  int v33 = v37[1];
  operator delete(v37[0]);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v37);
    int v6 = sub_10000CF44(&v38, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if (__p[23] >= 0) {
      double v7 = __p;
    }
    else {
      double v7 = *(_BYTE **)__p;
    }
    if (__p[23] >= 0) {
      uint64_t v8 = __p[23];
    }
    else {
      uint64_t v8 = *(void *)&__p[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v39);
    if (__p[23] >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(char **)__p;
    }
    sub_1003C0D54(v10, v11, &v35);
    uint64_t v12 = v35;
    uint64_t v35 = 0LL;
    uint64_t v36 = v12;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1003C0454(a1[10]);
    *(_DWORD *)std::string __p = 0;
    memset(&__p[8], 0, 32);
    while (!sub_1001BA11C((uint64_t)a1, &v36, (uint64_t)__p))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666LL) {
          goto LABEL_44;
        }
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x333333333333333LL) {
          unint64_t v21 = 0x666666666666666LL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          __int128 v22 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v21);
        }
        else {
          __int128 v22 = 0LL;
        }
        unint64_t v23 = &v22[40 * v18];
        __int128 v24 = *(_OWORD *)__p;
        __int128 v25 = *(_OWORD *)&__p[16];
        *((void *)v23 + 4) = *(void *)&__p[32];
        *(_OWORD *)unint64_t v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        double v27 = *a2;
        unint64_t v26 = a2[1];
        unint64_t v28 = v23;
        if (v26 != *a2)
        {
          do
          {
            __int128 v29 = *(_OWORD *)(v26 - 40);
            __int128 v30 = *(_OWORD *)(v26 - 24);
            *((void *)v28 - 1) = *((void *)v26 - 1);
            *(_OWORD *)(v28 - 24) = v30;
            *(_OWORD *)(v28 - 40) = v29;
            v28 -= 40;
            v26 -= 40;
          }

          while (v26 != v27);
          unint64_t v26 = *a2;
        }

        double v17 = v23 + 40;
        *a2 = v28;
        a2[1] = v23 + 40;
        a2[2] = &v22[40 * v21];
        if (v26) {
          operator delete(v26);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = *(_OWORD *)&__p[16];
        *(void *)(v13 + 32) = *(void *)&__p[32];
        *(_OWORD *)unint64_t v13 = v15;
        *(_OWORD *)(v13 + 16) = v16;
        double v17 = (char *)(v13 + 40);
      }

      a2[1] = v17;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v31 = v36;
    uint64_t v36 = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    *(void **)((char *)v37
    uint64_t v38 = v32;
    std::streambuf::~streambuf(&v39);
    return std::ios::~ios(&v40);
  }

  return result;
}

void sub_1006B2914( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B297C(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_101242CCC(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  uint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_1006B2BDC(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_101242E38(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_1006B2E14(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_101242FA4(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_1006B303C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1006B3068(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1006B3094()
{
  uint64_t result = (uint64_t)objc_msgSend( +[CLMicroLocationEnvironment shared](CLMicroLocationEnvironment, "shared"),  "isTestingEnvironment");
  if ((_DWORD)result)
  {
    sub_1002F0B04(&v8);
    CFStringRef v1 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingUwbRangeEnable",  0x8000100u,  kCFAllocatorNull);
    int v2 = sub_1002A6FD4(v8, (uint64_t)v1, &v7);
    CFRelease(v1);
    BOOL v3 = v7;
    __int128 v4 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    if (v3) {
      return 1LL;
    }
    else {
      return v2 ^ 1u;
    }
  }

  return result;
}

void sub_1006B3168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

id sub_1006B3280(__int128 *a1, void *a2)
{
  __int128 v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return [a2 onResultAvailable:&v3];
}

uint64_t sub_1006B3558(uint64_t a1, int a2, double a3)
{
  *(_DWORD *)a1 = a2;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101849540);
  }
  uint64_t v4 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SessionMetrics,Start", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101849540);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "SessionMetrics,Start",  v8,  2);
    BOOL v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStrideCalibrationSessionMetrics::CLStrideCalibrationSessionMetrics(CFTimeInterval, int32_t)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return a1;
}

void sub_1006B3B58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_1006B45EC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1006B4618(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849560);
    }
    BOOL v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      unint64_t v16 = a2;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849560);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v11 = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 1024;
      int v14 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQ ueue.h, line 233,i,%zu,capacity,%u.",  (size_t)&v11,  18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<double>::operator[](const size_t) const [T = double]",  "%s\n",  v10);
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

void sub_1006B4810(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006B4C58(id a1)
{
  qword_101934A58 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

id sub_1006B5574(uint64_t a1)
{
  return _[*(id *)(a1 + 32) timerFired:*(void *)(a1 + 40)];
}

uint64_t sub_1006B57B4(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101849618);
  }
  int v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    __int128 v3 = (void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    __int128 v15 = v3;
    __int16 v16 = 2048;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timerFired, fIdentifier, %s, f, %p", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101849618);
    }
    unint64_t v6 = (void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    int v10 = 136315394;
    int v11 = v6;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "timerFired, fIdentifier, %s, f, %p",  (const char *)&v10,  22);
    int v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPersistentTimer::timerFired()", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a1, *(void *)(a1 + 16));
}

void sub_1006B5C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006B5CBC(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101849618);
  }
  int v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    __int128 v3 = (void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    __int128 v15 = v3;
    __int16 v16 = 2048;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "invalidate, %s, %p", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101849618);
    }
    unint64_t v6 = (void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    int v10 = 136315394;
    int v11 = v6;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "invalidate, %s, %p",  (const char *)&v10,  22);
    int v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLPersistentTimerInternal invalidate]_block_invoke", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_1006B5ECC( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
    uint64_t v17 = *(void **)(a1 + 24);
  }

  else
  {
    __int128 v16 = *a2;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v16;
    uint64_t v17 = a5;
  }

  [v17 assertInside];
  int v18 = objc_alloc(&OBJC_CLASS___CLPersistentTimerInternal);
  else {
    uint64_t v19 = *(void **)a2;
  }
  *(void *)a1 = -[CLPersistentTimerInternal initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:]( v18,  "initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:",  v19,  a6,  a1,  a5,  a7,  a8,  a9);
  return a1;
}

void sub_1006B5FA0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1006B5FC0(uint64_t a1)
{
  *(void *)a1 = 0LL;
  return a1;
}

id sub_1006B6014(uint64_t a1, double a2)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101849618);
  }
  uint64_t v4 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = (void *)(a1 + 32);
    double v6 = -1.0;
    if (a2 != 1.79769313e308) {
      double v6 = a2;
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    double v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setNextFireDate, %s, %.1lf", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101849618);
    }
    int v8 = (void *)(a1 + 32);
    double v9 = -1.0;
    if (a2 != 1.79769313e308) {
      double v9 = a2;
    }
    int v12 = 136315394;
    uint64_t v13 = v8;
    __int16 v14 = 2048;
    double v15 = v9;
    LODWORD(v11) = 22;
    int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "setNextFireDate, %s, %.1lf",  (const char *)&v12,  v11);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPersistentTimer::setNextFireDate(CFAbsoluteTime)", "%s\n", v10);
  }

  return [*(id *)a1 setNextFireTime:a2];
}

id sub_1006B623C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = [*(id *)(a1 + 24) assertInside];
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 16) = *(void *)(a1 + 48);
  return result;
}

id sub_1006B6294(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101849618);
  }
  int v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    __int128 v3 = (void *)(a1 + 32);
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Invalidate, %s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101849618);
    }
    unint64_t v5 = (void *)(a1 + 32);
    int v7 = 136315138;
    int v8 = v5;
    double v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "Invalidate, %s",  (const char *)&v7);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPersistentTimer::invalidate()", "%s\n", v6);
  }

  return [*(id *)a1 invalidate];
}

void sub_1006B646C(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1006B6498(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_101849648;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = a2;
  *(void *)(a1 + 16) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 24) = v6;
  if (v6)
  {
    int v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(void *)(a1 + 32) = *a4;
  uint64_t v9 = a4[1];
  *(void *)(a1 + 40) = v9;
  if (v9)
  {
    int v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = *a5;
  uint64_t v12 = a5[1];
  *(void *)(a1 + 56) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(_DWORD *)(a1 + 64) = 0;
  double v15 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(_BYTE *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0xFFFF00000000LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 112) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = _Q1;
  *(_OWORD *)(a1 + 144) = _Q1;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0xBFF0000000000000LL;
  *(void *)(a1 + 196) = 0LL;
  *(void *)(a1 + 18_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 22_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 220) = 0LL;
  *(_BYTE *)(a1 + 244) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(result + 36) = 0LL;
  *(_BYTE *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 1;
  *(void *)(a1 + 256) = 0LL;
  sub_1002F0B04(buf);
  char v21 = sub_1002A6F64(*(uint64_t *)buf, "StationaryLocationHarvest", (BOOL *)(a1 + 64));
  char v22 = v21;
  uint64_t v23 = v42;
  if (!v42) {
    goto LABEL_14;
  }
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    unint64_t v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (v25)
  {
LABEL_14:
    if ((v21 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_26:
    *double v15 = 0;
    goto LABEL_27;
  }

  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if ((v22 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_15:
  if (*v15)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    uint64_t v26 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "StationaryLocationHarvest enabled", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      v40[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "StationaryLocationHarvest enabled",  v40,  2);
      unint64_t v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::share d_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }
  }

void sub_1006B6954(_Unwind_Exception *a1)
{
}

uint64_t sub_1006B69A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
}

uint64_t sub_1006B69B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101997C90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_101997C90))
  {
    sub_1004F2598();
    byte_101997C88 = (sub_1004F64FC() & 8) != 0;
    __cxa_guard_release(&qword_101997C90);
  }

  return byte_101997C88;
}

void sub_1006B6A10(_Unwind_Exception *a1)
{
}

uint64_t sub_1006B6A28(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  if ((_DWORD)result && *(unsigned __int8 *)(a1 + 66) != a2)
  {
    if (a2)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      unint64_t v5 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HARVEST: starting gps harvesting.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "HARVEST: starting gps harvesting.",  v16,  2);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), 4LL);
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), 4LL);
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      uint64_t v6 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HARVEST: stopping gps harvesting.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "HARVEST: stopping gps harvesting.",  v16,  2);
        double v15 = (uint8_t *)v14;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16), 4LL);
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16), 4LL);
      *(_DWORD *)(a1 + 92) = 0xFFFF;
      *(void *)(a1 + 96) = 0LL;
      *(void *)(a1 + 104) = 0LL;
      __asm { FMOV            V1.2D, #-1.0 }

      *(_OWORD *)(a1 + 112) = xmmword_1012E0070;
      *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = _Q1;
      *(_OWORD *)(a1 + 144) = _Q1;
      *(_OWORD *)(a1 + 160) = _Q1;
      *(_DWORD *)(a1 + 176) = 0;
      *(void *)(a1 + 180) = 0xBFF0000000000000LL;
      *(void *)(a1 + 196) = 0LL;
      *(void *)(a1 + 18_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
      *(_DWORD *)(a1 + 204) = 0;
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
      *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
      *(void *)(a1 + 220) = 0LL;
      *(void *)(a1 + 2++*(_DWORD *)(result + 36) = 0LL;
      *(void *)(a1 + 22_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
      *(_BYTE *)(a1 + 244) = 0;
    }

    *(_BYTE *)(a1 + 66) = a2;
  }

  return result;
}

uint64_t sub_1006B6DAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_1006B6DB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
}

uint64_t sub_1006B6DC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
}

BOOL sub_1006B6DD4(uint64_t a1, uint64_t a2)
{
  if (!sub_100869780(a2)
    || vabdd_f64( (*(double (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32)),  *(double *)(a2 + 76)) > 5.0)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    uint64_t v4 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      double v5 = vabdd_f64( (*(double (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32)),  *(double *)(a2 + 76));
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)uint64_t v26 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "invalid/stale location (age %.3fs) - ignoring",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    uint64_t v19 = qword_1019349B8;
    double v20 = vabdd_f64( (*(double (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32)),  *(double *)(a2 + 76));
    *(_DWORD *)std::stringbuf v24 = 134217984;
    *(double *)&v24[4] = v20;
    int v23 = 12;
    unint64_t v11 = "invalid/stale location (age %.3fs) - ignoring";
    uint64_t v9 = v19;
LABEL_32:
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  1LL,  v11,  v24,  v23,  *(_OWORD *)v24,  *(_OWORD *)&v24[16]);
    char v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMonitorGps::isGpsHarvestingEligible(const CLDaemonLocation &) const",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
    return 0LL;
  }

  if (*(int *)(a1 + 72) > 4)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    uint64_t v12 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v13 = *(_DWORD *)(a1 + 88);
      uint64_t v14 = *(void *)(a1 + 96);
      uint64_t v15 = *(void *)(a1 + 104);
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      *(_DWORD *)uint64_t v26 = v13;
      *(_WORD *)&v26[4] = 2048;
      *(void *)&v26[6] = v14;
      __int16 v27 = 2048;
      uint64_t v28 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%d consecutive clamps at <%+.8f,%+.8f> - not harvesting",  buf,  0x1Cu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      uint64_t v9 = qword_1019349B8;
      int v16 = *(_DWORD *)(a1 + 88);
      uint64_t v17 = *(void *)(a1 + 96);
      uint64_t v18 = *(void *)(a1 + 104);
      *(_DWORD *)std::stringbuf v24 = 67109632;
      *(_DWORD *)&v24[4] = v16;
      *(_WORD *)&v24[8] = 2048;
      *(void *)&v24[10] = v17;
      *(_WORD *)&v24[18] = 2048;
      *(void *)&v24[20] = v18;
      int v23 = 28;
      unint64_t v11 = "%d consecutive clamps at <%+.8f,%+.8f> - not harvesting";
      goto LABEL_32;
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    int v7 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      *(_DWORD *)uint64_t v26 = v8;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = 5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "not harvesting yet; GPS warming count is %d < %d",
        buf,
        0xEu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      uint64_t v9 = qword_1019349B8;
      int v10 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)std::stringbuf v24 = 67109376;
      *(_DWORD *)&v24[4] = v10;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = 5;
      int v23 = 14;
      unint64_t v11 = "not harvesting yet; GPS warming count is %d < %d";
      goto LABEL_32;
    }
  }

  return result;
}

uint64_t sub_1006B7260(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_1018496F0);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getting GPS notifications", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "getting GPS notifications",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMonitorGps::initHarvesting()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), 13LL);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), 47LL);
}

BOOL sub_1006B742C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 65) || *(_BYTE *)(a1 + 68) != 0;
}

uint64_t sub_1006B744C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 68) != a2)
  {
    uint64_t v2 = result;
    *(_BYTE *)(result + 6_Block_object_dispose(&STACK[0x7E0], 8) = a2;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    uint64_t v3 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v4 = *(unsigned __int8 *)(v2 + 68);
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 1025;
      int v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:vehicular speed achieved, vehicularSpeedAchieved:%{private}hhd}",  (uint8_t *)v5,  0x18u);
    }

    return (*(uint64_t (**)(void))(**(void **)(v2 + 32) + 40LL))(*(void *)(v2 + 32));
  }

  return result;
}

void sub_1006B7554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 1;
  if (v72)
  {
    *(_BYTE *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0;
    if ((_DWORD)a3 != 47)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      int v13 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Location is from test equipment, do not harvest",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        LOWORD(v80) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "Location is from test equipment, do not harvest",  &v80,  2);
        uint64_t v12 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v14);
        goto LABEL_35;
      }

      goto LABEL_42;
    }

    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    int v7 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Server side location can be harvested", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      LOWORD(v80) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "Server side location can be harvested",  &v80,  2);
      std::string::size_type v49 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationP rovider_Type::NotificationData &)",  "%s\n",  v48);
      if (v49 != buf) {
        free(v49);
      }
    }
  }

  if ((sub_100869780((uint64_t)v65) & 1) != 0)
  {
    if ((_DWORD)a3 == 13)
    {
      *(_BYTE *)(a1 + 67) = v75;
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      __int16 v8 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(a1 + 67)) {
          int v9 = "enabled";
        }
        else {
          int v9 = "disabled";
        }
        *(float *)std::stringbuf::string_type buf = 4.8149e-34;
        *(void *)__int128 v85 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Got GPS location simulation %s notification",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        if (*(_BYTE *)(a1 + 67)) {
          float v50 = "enabled";
        }
        else {
          float v50 = "disabled";
        }
        int v80 = 136315138;
        *(void *)int v81 = v50;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "Got GPS location simulation %s notification",  (const char *)&v80);
        int v52 = (uint8_t *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v51);
        if (v52 != buf) {
          free(v52);
        }
      }

      (*(void (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
      goto LABEL_42;
    }

    int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160LL))(*(void *)(a1 + 32));
    v16.n128_u64[0] = *(void *)&v65[20];
    else {
      int v17 = 0;
    }
    if (v17 != 1) {
      goto LABEL_42;
    }
    double v18 = (*(double (**)(void, __n128))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32), v16);
    if (*(_DWORD *)&v69[4] != 1 && *(_DWORD *)&v69[8] != 1)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      uint64_t v28 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        *(float *)std::stringbuf::string_type buf = 1.7163e-36;
        *(_DWORD *)__int128 v85 = 0;
        *(_WORD *)&v85[4] = 2082;
        *(void *)&v85[6] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:We have no WGS84, anywhere! Only Chinese Stark}",  buf,  0x12u);
      }

      goto LABEL_42;
    }

    double v29 = *(double *)&v65[28];
    if (v70 == 2)
    {
      *(float *)std::stringbuf::string_type buf = 0.0;
    }

    *(double *)&v65[28] = v29;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    char v30 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      *(float *)std::stringbuf::string_type buf = 1.7164e-36;
      *(_DWORD *)__int128 v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(void *)&v85[6] = "";
      *(_WORD *)&v85[14] = 1040;
      *(_DWORD *)&v85[16] = 156;
      *(_WORD *)&v85[20] = 2097;
      *(void *)&v85[22] = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onGps, location:%{private, location:CLDaemonLocation}.*P}",  buf,  0x22u);
    }

    if (a3 <= 0x2F && ((1LL << a3) & 0x800000000011LL) != 0)
    {
      v31.n128_u64[0] = *(void *)&v66[12];
      if (*(double *)&v66[12] - *(double *)(a1 + 168) > 180.0)
      {
        if (*(double *)&v66[12] - *(double *)(a1 + 80) > 180.0)
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_1018496F0);
          }
          uint64_t v32 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
          {
            double v33 = *(double *)&v66[12] - *(double *)(a1 + 80);
            int v34 = *(_DWORD *)(a1 + 72);
            *(float *)std::stringbuf::string_type buf = 3.8521e-34;
            *(double *)__int128 v85 = v33;
            *(_WORD *)&v85[8] = 1024;
            *(_DWORD *)&v85[10] = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "GPS dropped out for %.3fs while warming - resetting count (from %d)",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019349B0 != -1) {
              dispatch_once(&qword_1019349B0, &stru_1018496F0);
            }
            double v53 = *(double *)&v66[12] - *(double *)(a1 + 80);
            int v54 = *(_DWORD *)(a1 + 72);
            int v80 = 134218240;
            *(double *)int v81 = v53;
            *(_WORD *)&v81[8] = 1024;
            *(_DWORD *)&v81[10] = v54;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "GPS dropped out for %.3fs while warming - resetting count (from %d)",  COERCE_DOUBLE(&v80),  18);
            float v56 = (uint8_t *)v55;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLoc ationProvider_Type::NotificationData &)",  "%s\n",  v55);
            if (v56 != buf) {
              free(v56);
            }
          }

          *(_DWORD *)(a1 + 72) = 0;
          (*(void (**)(uint64_t, void))(*(void *)a1 + 112LL))(a1, 0LL);
          v31.n128_u64[0] = *(void *)&v66[12];
        }

        *(void *)(a1 + 80) = v31.n128_u64[0];
        ++*(_DWORD *)(a1 + 72);
      }

      if (*(double *)(a1 + 96) == *(double *)&v65[4]
        && *(double *)(a1 + 104) == *(double *)&v65[12]
        && ((double v35 = *(double *)(a1 + 112), v35 <= 50.0) || v35 <= *(double *)&v65[20]))
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        __int16 v43 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v44 = *(void *)(a1 + 96);
          uint64_t v45 = *(void *)(a1 + 104);
          uint64_t v46 = *(void *)(a1 + 112);
          int v47 = *(_DWORD *)(a1 + 88);
          *(float *)std::stringbuf::string_type buf = 3.8523e-34;
          *(void *)__int128 v85 = v44;
          *(_WORD *)&v85[8] = 2048;
          *(void *)&v85[10] = v45;
          *(_WORD *)&v85[18] = 2048;
          *(void *)&v85[20] = v46;
          *(_WORD *)&v85[28] = 1024;
          int v86 = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "location is clamped at <%+.8f,%+.8f> acc %.2f - count %d",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_1018496F0);
          }
          uint64_t v57 = *(void *)(a1 + 96);
          uint64_t v58 = *(void *)(a1 + 104);
          uint64_t v59 = *(void *)(a1 + 112);
          int v60 = *(_DWORD *)(a1 + 88);
          int v80 = 134218752;
          *(void *)int v81 = v57;
          *(_WORD *)&v81[8] = 2048;
          *(void *)&v81[10] = v58;
          *(_WORD *)&v81[18] = 2048;
          *(void *)&v81[20] = v59;
          __int16 v82 = 1024;
          int v83 = v60;
          LODWORD(v63) = 38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "location is clamped at <%+.8f,%+.8f> acc %.2f - count %d",  COERCE_DOUBLE(&v80),  v63,  v64,  *(_DWORD *)v65);
          __int16 v62 = (uint8_t *)v61;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocat ionProvider_Type::NotificationData &)",  "%s\n",  v61);
          if (v62 != buf) {
            free(v62);
          }
        }

        ++*(_DWORD *)(a1 + 88);
      }

      else
      {
        *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0;
      }

      v31.n128_u64[0] = *(void *)&v65[44];
      (*(void (**)(uint64_t, BOOL, __n128))(*(void *)a1 + 112LL))(a1, *(double *)&v65[44] >= 6.7, v31);
      (*(void (**)(void, _BYTE *))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v65);
      if (((*(uint64_t (**)(void, _BYTE *))(**(void **)(a1 + 32) + 184LL))(*(void *)(a1 + 32), v65) & 1) != 0)
      {
        __int128 v36 = *(_OWORD *)&v66[16];
        *(_OWORD *)(a1 + 156) = *(_OWORD *)v66;
        *(_OWORD *)(a1 + 172) = v36;
        __int128 v37 = *(_OWORD *)&v65[48];
        *(_OWORD *)(a1 + 124) = *(_OWORD *)&v65[32];
        *(_OWORD *)(a1 + 140) = v37;
        *(_OWORD *)(a1 + 232) = *(_OWORD *)&v69[12];
        __int128 v38 = *(_OWORD *)v69;
        __int128 v39 = v67;
        *(_OWORD *)(a1 + 204) = v68;
        *(_OWORD *)(a1 + 220) = v38;
        *(_OWORD *)(a1 + 18_Block_object_dispose(&STACK[0x7E0], 8) = v39;
        __int128 v40 = *(_OWORD *)&v65[16];
        *(_OWORD *)(a1 + 92) = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 10_Block_object_dispose(&STACK[0x7E0], 8) = v40;
        (*(void (**)(void, uint64_t, uint64_t, _BYTE *))(**(void **)(a1 + 48) + 24LL))( *(void *)(a1 + 48),  a2,  a3,  v65);
        goto LABEL_42;
      }

      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      int v41 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "on gps notification. Pos harvesting not eligible",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_1018496F0);
        }
        LOWORD(v80) = 0;
        LODWORD(v63) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "on gps notification. Pos harvesting not eligible",  &v80,  *(void *)&v63);
        uint64_t v12 = (uint8_t *)v42;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v42);
LABEL_35:
        if (v12 != buf) {
          free(v12);
        }
      }
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    int v10 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(float *)std::stringbuf::string_type buf = 1.5283e-36;
      *(_DWORD *)__int128 v85 = v67;
      *(_WORD *)&v85[4] = 2049;
      *(void *)&v85[6] = *(void *)&v65[4];
      *(_WORD *)&v85[14] = 2049;
      *(void *)&v85[16] = *(void *)&v65[12];
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "#Warning,invalid,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      int v80 = 67240705;
      *(_DWORD *)int v81 = v67;
      *(_WORD *)&v81[4] = 2049;
      *(void *)&v81[6] = *(void *)&v65[4];
      *(_WORD *)&v81[14] = 2049;
      *(void *)&v81[16] = *(void *)&v65[12];
      LODWORD(v63) = 28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#Warning,invalid,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f",  &v80,  *(void *)&v63);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationP rovider_Type::NotificationData &)",  "%s\n",  v11);
      goto LABEL_35;
    }
  }

void sub_1006B83C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1006B8410(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_1018496F0);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 248);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Client side harvesting eligibility,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    int v5 = *(unsigned __int8 *)(a1 + 248);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "Client side harvesting eligibility,%d",  v8);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMonitorGps::isGpsForClientHarvestingEligible() const",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return *(unsigned __int8 *)(a1 + 248);
}

id sub_1006B85C4(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(a1 + 256) = result;
  return result;
}

uint64_t sub_1006B85F4()
{
  return 0LL;
}

void *sub_1006B85FC(void *a1)
{
  *a1 = off_101849648;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_10000AE14((uint64_t)(a1 + 6));
  sub_10000AE14((uint64_t)(a1 + 4));
  sub_10000AE14(v2);
  return a1;
}

void sub_1006B8644(void *a1)
{
  *a1 = off_101849648;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_10000AE14((uint64_t)(a1 + 6));
  sub_10000AE14((uint64_t)(a1 + 4));
  sub_10000AE14(v2);
  operator delete(a1);
}

uint64_t sub_1006B868C(uint64_t a1)
{
  return a1 + 92;
}

void sub_1006B8694(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_1006B86C0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1006B8724()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1006B8798(_Unwind_Exception *a1)
{
}

uint64_t sub_1006B88FC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7LL && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          uint64_t v15 = 0LL;
        }

        *(void *)(a1 + _Block_object_dispose(&STACK[0x7E0], 8) = v15;
        continue;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0LL;
        break;
      case 3u:
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v24 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          int v24 = 0;
        }

        uint64_t v26 = 16LL;
        goto LABEL_46;
      case 4u:
        unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v24 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          int v24 = 0;
        }

        uint64_t v26 = 20LL;
LABEL_46:
        *(_DWORD *)(a1 + v26) = v24;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v21 = v20 + 1;
      if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0) {
        goto LABEL_37;
      }
      v17 += 7;
      BOOL v10 = v18++ >= 9;
      if (v10)
      {
        LODWORD(v19) = 0;
        goto LABEL_39;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_37:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v19) = 0;
    }
LABEL_39:
    *(_DWORD *)(a1 + 24) = v19;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1006B900C(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v9 = _Q0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  sub_100D2D9A4(a1 + 160);
  *(_BYTE *)(a1 + 200) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = 0x10000000000000LL;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = v9;
  *(void *)(a1 + 240) = 0xBFF0000000000000LL;
  *(void *)&__int128 v7 = -1LL;
  *((void *)&v7 + 1) = -1LL;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = v7;
  *(_OWORD *)(a1 + 264) = v7;
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 36) = v9;
  *(_OWORD *)(a1 + 52) = v9;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = v9;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  return a1;
}

void sub_1006B9120(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 9)
  {
    if (*a3) {
      return;
    }
    __int128 v6 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v6;
    __int128 v7 = *(_OWORD *)(a4 + 32);
    __int128 v8 = *(_OWORD *)(a4 + 48);
    __int128 v9 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = v8;
    __int128 v10 = *(_OWORD *)(a4 + 96);
    __int128 v11 = *(_OWORD *)(a4 + 112);
    __int128 v12 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v12;
    *(_OWORD *)(a1 + 96) = v10;
    uint64_t v13 = sub_10080E94C();
    *(_DWORD *)std::stringbuf::string_type buf = 0;
    *(double *)(a1 + 76) = sub_10080EB58(v13, buf);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a4 + 772);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    unint64_t v14 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 4);
      uint64_t v16 = *(void *)(a1 + 12);
      uint64_t v17 = *(void *)(a1 + 20);
      uint64_t v18 = *(void *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      uint64_t v20 = sub_10080E94C();
      double v21 = sub_10080EF30(v20);
      *(_DWORD *)std::stringbuf::string_type buf = 134284801;
      uint64_t v49 = v15;
      __int16 v50 = 2049;
      uint64_t v51 = v16;
      __int16 v52 = 2050;
      uint64_t v53 = v17;
      __int16 v54 = 2050;
      uint64_t v55 = v18;
      __int16 v56 = 1026;
      int v57 = v19;
      __int16 v58 = 2050;
      double v59 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#loiOverride received LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,timestamp,%{public}.3f, sourceAccuracy,%{public}d,propagation_us,%{public}.3f",  buf,  0x3Au);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v22 = qword_101934928;
    uint64_t v23 = *(void *)(a1 + 4);
    uint64_t v24 = *(void *)(a1 + 12);
    uint64_t v25 = *(void *)(a1 + 20);
    uint64_t v26 = *(void *)(a1 + 76);
    int v27 = *(_DWORD *)(a1 + 156);
    uint64_t v28 = sub_10080E94C();
    int v36 = 134284801;
    uint64_t v37 = v23;
    __int16 v38 = 2049;
    uint64_t v39 = v24;
    __int16 v40 = 2050;
    uint64_t v41 = v25;
    __int16 v42 = 2050;
    uint64_t v43 = v26;
    __int16 v44 = 1026;
    int v45 = v27;
    __int16 v46 = 2050;
    double v47 = sub_10080EF30(v28);
    double v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  2LL,  "#loiOverride received LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,timestamp,% {public}.3f,sourceAccuracy,%{public}d,propagation_us,%{public}.3f",  &v36,  58);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v29);
LABEL_21:
    free(v29);
    return;
  }

  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  double v35 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "#loiOverride LOI location is not valid anymore.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    LOWORD(v++*(_DWORD *)(result + 36) = 0;
    double v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride LOI location is not valid anymore.",  &v36,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v29);
  }

void sub_1006B9560(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 200) = a2;
  if (a2)
  {
    uint64_t v3 = sub_10080E94C();
    *(_DWORD *)std::stringbuf::string_type buf = 0;
    *(double *)(a1 + 20_Block_object_dispose(&STACK[0x7E0], 8) = sub_10080EB58(v3, buf);
  }

  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  char v4 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 200)) {
      unsigned int v5 = "YES";
    }
    else {
      unsigned int v5 = "NO";
    }
    uint64_t v6 = *(void *)(a1 + 208);
    uint64_t v7 = *(void *)(a1 + 76);
    uint64_t v8 = sub_10080E94C();
    double v9 = sub_10080EF30(v8);
    *(_DWORD *)std::stringbuf::string_type buf = 136446978;
    uint64_t v25 = v5;
    __int16 v26 = 2050;
    uint64_t v27 = v6;
    __int16 v28 = 2050;
    uint64_t v29 = v7;
    __int16 v30 = 2050;
    double v31 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#loiOverride update WiFi association state,isWiFiAssociated,%{public}s,last association time,%{public}.3f,LOI loca tion timestamp,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v10 = qword_101934928;
    if (*(_BYTE *)(a1 + 200)) {
      __int128 v11 = "YES";
    }
    else {
      __int128 v11 = "NO";
    }
    uint64_t v12 = *(void *)(a1 + 208);
    uint64_t v13 = *(void *)(a1 + 76);
    uint64_t v14 = sub_10080E94C();
    int v16 = 136446978;
    uint64_t v17 = v11;
    __int16 v18 = 2050;
    uint64_t v19 = v12;
    __int16 v20 = 2050;
    uint64_t v21 = v13;
    __int16 v22 = 2050;
    double v23 = sub_10080EF30(v14);
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  2LL,  "#loiOverride update WiFi association state,isWiFiAssociated,%{public}s,last association time,%{publi c}.3f,LOI location timestamp,%{public}.3f,propagation_us,%{public}.3f",  &v16,  42);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLoiLocationOverride::updateWiFiAssociationState(BOOL)", "%s\n", v15);
  }

__n128 sub_1006B97C0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 224) = *(void *)(a2 + 20);
  if (sub_1006B99F4(a1, a2))
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v6 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#loiOverride using Loi Location", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      v13[0] = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride using Loi Location",  v13,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "const CLDaemonLocation CLLoiLocationOverride::getBestLocation(const CLDaemonLocation &)",  "%s\n",  v12);
    }

    *(_DWORD *)(a1 + 276) = 1;
    sub_1006BA284(a1);
    sub_1006BA4A0(a1, a2, (uint64_t)a3);
  }

  else
  {
    *(_DWORD *)(a1 + 276) = 0;
    sub_1006BA284(a1);
    __int128 v8 = *(_OWORD *)(a2 + 112);
    a3[6] = *(_OWORD *)(a2 + 96);
    a3[7] = v8;
    a3[8] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)(a2 + 140);
    __int128 v9 = *(_OWORD *)(a2 + 48);
    a3[2] = *(_OWORD *)(a2 + 32);
    a3[3] = v9;
    __int128 v10 = *(_OWORD *)(a2 + 80);
    a3[4] = *(_OWORD *)(a2 + 64);
    a3[5] = v10;
    __n128 result = *(__n128 *)a2;
    __int128 v11 = *(_OWORD *)(a2 + 16);
    *a3 = *(_OWORD *)a2;
    a3[1] = v11;
  }

  return result;
}

BOOL sub_1006B99F4(uint64_t a1, uint64_t a2)
{
  if (!sub_100869780(a1)
    || ((double v4 = *(double *)(a1 + 20), *(uint64_t *)&v4 > -1)
      ? (BOOL v5 = ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 >= 0x3FF)
      : (BOOL v5 = 1),
        v5 ? (BOOL v6 = (unint64_t)(*(void *)&v4 - 1LL) >= 0xFFFFFFFFFFFFFLL) : (BOOL v6 = 0),
        v6))
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    __int128 v9 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#loiOverride no valid current location.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      v21[0] = 0;
      int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride no valid current location.",  v21,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v16);
    }

    BOOL result = 0LL;
    *(_DWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  }

  else
  {
    *(_DWORD *)(a1 + 24_Block_object_dispose(&STACK[0x7E0], 8) = 1;
    *(double *)(a1 + 232) = v4;
    unsigned int v7 = *(_DWORD *)(a2 + 96);
    if (v7 <= 8 && ((1 << v7) & 0x1D0) != 0)
    {
      *(_DWORD *)(a1 + 256) = 1;
      if (*(_DWORD *)(a1 + 156) == 2)
      {
        *(_DWORD *)(a1 + 252) = 1;
        if (*(double *)(a2 + 20) <= v4)
        {
          if (qword_101934920 != -1) {
            dispatch_once(&qword_101934920, &stru_101849710);
          }
          __int128 v11 = (os_log_s *)qword_101934928;
          if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#loiOverride the spread of the LOI is larger than the location fix.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934920 != -1) {
              dispatch_once(&qword_101934920, &stru_101849710);
            }
            v21[0] = 0;
            __int16 v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride the spread of the LOI is larger than the location fix.",  v21,  2);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v18);
          }

          BOOL result = 0LL;
          *(_DWORD *)(a1 + 260) = 0;
        }

        else
        {
          *(_DWORD *)(a1 + 260) = 1;
          if ((sub_1006BAC74(a1, a1, a2) & 1) != 0)
          {
            if (*(double *)(a1 + 208) + 600.0 <= *(double *)(a1 + 76) || *(_BYTE *)(a1 + 200))
            {
              BOOL result = 1LL;
              *(_DWORD *)(a1 + 272) = 1;
            }

            else
            {
              if (qword_101934920 != -1) {
                dispatch_once(&qword_101934920, &stru_101849710);
              }
              uint64_t v15 = (os_log_s *)qword_101934928;
              if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::stringbuf::string_type buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#loiOverride WiFi is not associated to overide Wifi1 locations.",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934920 != -1) {
                  dispatch_once(&qword_101934920, &stru_101849710);
                }
                v21[0] = 0;
                __int16 v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride WiFi is not associated to overide Wifi1 locations.",  v21,  2);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v20);
              }

              BOOL result = 0LL;
              *(_DWORD *)(a1 + 272) = 0;
            }
          }

          else
          {
            if (qword_101934920 != -1) {
              dispatch_once(&qword_101934920, &stru_101849710);
            }
            uint64_t v13 = (os_log_s *)qword_101934928;
            if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)std::stringbuf::string_type buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#loiOverride locations are not sufficiently proximate.",  buf,  2u);
            }

            BOOL result = sub_1002921D0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934920 != -1) {
                dispatch_once(&qword_101934920, &stru_101849710);
              }
              v21[0] = 0;
              uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride locations are not sufficiently proximate.",  v21,  2);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v14);
              return 0LL;
            }
          }
        }
      }

      else
      {
        if (qword_101934920 != -1) {
          dispatch_once(&qword_101934920, &stru_101849710);
        }
        __int128 v10 = (os_log_s *)qword_101934928;
        if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#loiOverride location source accuracy is not High to overide location.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934920 != -1) {
            dispatch_once(&qword_101934920, &stru_101849710);
          }
          v21[0] = 0;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride location source accuracy is not High to overide location.",  v21,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v17);
        }

        BOOL result = 0LL;
        *(_DWORD *)(a1 + 252) = 0;
      }
    }

    else
    {
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      uint64_t v12 = (os_log_s *)qword_101934928;
      if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#loiOverride location is not Wifi1 or Cell.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934920 != -1) {
          dispatch_once(&qword_101934920, &stru_101849710);
        }
        v21[0] = 0;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride location is not Wifi1 or Cell.",  v21,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)",  "%s\n",  v19);
      }

      BOOL result = 0LL;
      *(_DWORD *)(a1 + 256) = 0;
    }
  }

  return result;
}

__n128 sub_1006BA284(uint64_t a1)
{
  if (arc4random_uniform(0x64u) == 1)
  {
    v9[0] = @"incomingLocationType";
    v10[0] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 216));
    v9[1] = @"incomingLocationSignalEnvironmentType";
    v10[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 220));
    _BYTE v9[2] = @"incomingLocationHorizontalAccuracy";
    _BYTE v10[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 224));
    _OWORD v9[3] = @"loiLocationHorizontalAccuracy";
    v10[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 232));
    _DWORD v9[4] = @"incomingLocationDistanceToLoi";
    _DWORD v10[4] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 240));
    v9[5] = @"isValidLoi";
    v10[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 248));
    v9[6] = @"isLoiHighAccuracy";
    v10[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 252));
    v9[7] = @"isIncomingLocationValidLocationType";
    v10[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 256));
    _WORD v9[8] = @"isIncomingLocationGreaterUncertainty";
    _WORD v10[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 260));
    v9[9] = @"isDistanceLessThanThreshold";
    v10[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 264));
    v9[10] = @"isHorizontalAccuracyOverlapping";
    v10[10] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 268));
    v9[11] = @"isWifiAssociated";
    v10[11] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 272));
    v9[12] = @"isOverriding";
    v10[12] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 276));
    AnalyticsSendEvent( @"com.apple.locationd.CLLoiLocationOverride",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  13LL));
  }

  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  uint64_t v2 = a1 + 216;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x7E0], 8) = _Q0;
  *(void *)(v2 + 24) = 0xBFF0000000000000LL;
  result.n128_u64[0] = -1LL;
  result.n128_u64[1] = -1LL;
  *(__n128 *)(v2 + 32) = result;
  *(__n128 *)(v2 + 4_Block_object_dispose(&STACK[0x7E0], 8) = result;
  return result;
}

void sub_1006BA4A0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  BOOL v6 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 4);
    uint64_t v8 = *(void *)(a1 + 12);
    uint64_t v9 = *(void *)(a1 + 20);
    __int128 v10 = sub_100832C40(*(_DWORD *)(a1 + 96));
    int v11 = *(_DWORD *)(a1 + 84);
    uint64_t v12 = *(void *)(a1 + 76);
    uint64_t v13 = *(void *)(a1 + 88);
    int v14 = *(_DWORD *)(a1 + 128);
    uint64_t v15 = *(void *)(a1 + 36);
    uint64_t v16 = *(void *)(a1 + 28);
    *(_DWORD *)std::stringbuf::string_type buf = 134285827;
    uint64_t v95 = v7;
    __int16 v96 = 2049;
    uint64_t v97 = v8;
    __int16 v98 = 2050;
    uint64_t v99 = v9;
    __int16 v100 = 2082;
    size_t v101 = v10;
    __int16 v102 = 1026;
    int v103 = v11;
    __int16 v104 = 2050;
    uint64_t v105 = v12;
    __int16 v106 = 2050;
    uint64_t v107 = v13;
    __int16 v108 = 1026;
    int v109 = v14;
    __int16 v110 = 2050;
    uint64_t v111 = v15;
    __int16 v112 = 2049;
    uint64_t v113 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#loiOverride LOI location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d ,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf",  buf,  0x5Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v44 = qword_101934928;
    uint64_t v45 = *(void *)(a1 + 4);
    uint64_t v46 = *(void *)(a1 + 12);
    uint64_t v47 = *(void *)(a1 + 20);
    uint64_t v48 = sub_100832C40(*(_DWORD *)(a1 + 96));
    int v49 = *(_DWORD *)(a1 + 84);
    uint64_t v50 = *(void *)(a1 + 76);
    uint64_t v51 = *(void *)(a1 + 88);
    int v52 = *(_DWORD *)(a1 + 128);
    uint64_t v53 = *(void *)(a1 + 36);
    uint64_t v54 = *(void *)(a1 + 28);
    int v74 = 134285827;
    uint64_t v75 = v45;
    __int16 v76 = 2049;
    uint64_t v77 = v46;
    __int16 v78 = 2050;
    uint64_t v79 = v47;
    __int16 v80 = 2082;
    int v81 = v48;
    __int16 v82 = 1026;
    int v83 = v49;
    __int16 v84 = 2050;
    uint64_t v85 = v50;
    __int16 v86 = 2050;
    uint64_t v87 = v51;
    __int16 v88 = 1026;
    int v89 = v52;
    __int16 v90 = 2050;
    uint64_t v91 = v53;
    __int16 v92 = 2049;
    uint64_t v93 = v54;
    uint64_t v55 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v44,  2LL,  "#loiOverride LOI location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confide nce,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{publi c}.1lf,altitude,%{private}.1lf",  &v74,  94);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v55);
  }

  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  uint64_t v17 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a2 + 4);
    uint64_t v19 = *(void *)(a2 + 12);
    uint64_t v20 = *(void *)(a2 + 20);
    uint64_t v21 = sub_100832C40(*(_DWORD *)(a2 + 96));
    int v22 = *(_DWORD *)(a2 + 84);
    uint64_t v23 = *(void *)(a2 + 76);
    uint64_t v24 = *(void *)(a2 + 88);
    int v25 = *(_DWORD *)(a2 + 128);
    uint64_t v26 = *(void *)(a2 + 36);
    uint64_t v27 = *(void *)(a2 + 28);
    *(_DWORD *)std::stringbuf::string_type buf = 134285827;
    uint64_t v95 = v18;
    __int16 v96 = 2049;
    uint64_t v97 = v19;
    __int16 v98 = 2050;
    uint64_t v99 = v20;
    __int16 v100 = 2082;
    size_t v101 = v21;
    __int16 v102 = 1026;
    int v103 = v22;
    __int16 v104 = 2050;
    uint64_t v105 = v23;
    __int16 v106 = 2050;
    uint64_t v107 = v24;
    __int16 v108 = 1026;
    int v109 = v25;
    __int16 v110 = 2050;
    uint64_t v111 = v26;
    __int16 v112 = 2049;
    uint64_t v113 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#loiOverride filtered location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{pub lic}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf",  buf,  0x5Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v56 = qword_101934928;
    uint64_t v57 = *(void *)(a2 + 4);
    uint64_t v58 = *(void *)(a2 + 12);
    uint64_t v59 = *(void *)(a2 + 20);
    int v60 = sub_100832C40(*(_DWORD *)(a2 + 96));
    int v61 = *(_DWORD *)(a2 + 84);
    uint64_t v62 = *(void *)(a2 + 76);
    uint64_t v63 = *(void *)(a2 + 88);
    int v64 = *(_DWORD *)(a2 + 128);
    uint64_t v65 = *(void *)(a2 + 36);
    uint64_t v66 = *(void *)(a2 + 28);
    int v74 = 134285827;
    uint64_t v75 = v57;
    __int16 v76 = 2049;
    uint64_t v77 = v58;
    __int16 v78 = 2050;
    uint64_t v79 = v59;
    __int16 v80 = 2082;
    int v81 = v60;
    __int16 v82 = 1026;
    int v83 = v61;
    __int16 v84 = 2050;
    uint64_t v85 = v62;
    __int16 v86 = 2050;
    uint64_t v87 = v63;
    __int16 v88 = 1026;
    int v89 = v64;
    __int16 v90 = 2050;
    uint64_t v91 = v65;
    __int16 v92 = 2049;
    uint64_t v93 = v66;
    LODWORD(v73) = 94;
    __int128 v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  2LL,  "#loiOverride filtered location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Co nfidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{ public}.1lf,altitude,%{private}.1lf",  &v74,  v73);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v67);
  }

  *(_DWORD *)a3 = 0xFFFF;
  *(_BYTE *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  uint64_t v28 = *(void *)(a1 + 20);
  *(void *)(a3 + 20) = v28;
  *(_DWORD *)(a3 + 96) = 13;
  int v29 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a3 + 84) = v29;
  int v30 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  *(_DWORD *)(a3 + 12_Block_object_dispose(&STACK[0x7E0], 8) = v30;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a3 + 44) = _Q0;
  *(_OWORD *)(a3 + 60) = _Q0;
  *(void *)(a3 + 116) = 0xBFF0000000000000LL;
  uint64_t v36 = *(void *)(a2 + 76);
  *(void *)(a3 + 76) = v36;
  uint64_t v37 = *(void *)(a2 + 88);
  *(void *)(a3 + 8_Block_object_dispose(&STACK[0x7E0], 8) = v37;
  *(_DWORD *)(a3 + 140) = *(_DWORD *)(a2 + 140);
  *(_OWORD *)(a3 + 100) = *(_OWORD *)(a1 + 4);
  *(void *)(a3 + 132) = *(void *)(a2 + 132);
  uint64_t v38 = *(void *)(a2 + 36);
  *(void *)(a3 + ++*(_DWORD *)(result + 36) = v38;
  uint64_t v39 = *(void *)(a2 + 28);
  *(void *)(a3 + 2_Block_object_dispose(&STACK[0x7E0], 8) = v39;
  *(void *)(a3 + 144) = *(void *)(a2 + 144);
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  __int16 v40 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = *(void *)(a3 + 4);
    uint64_t v42 = *(void *)(a3 + 12);
    uint64_t v43 = sub_100832C40(0xDu);
    *(_DWORD *)std::stringbuf::string_type buf = 134285827;
    uint64_t v95 = v41;
    __int16 v96 = 2049;
    uint64_t v97 = v42;
    __int16 v98 = 2050;
    uint64_t v99 = v28;
    __int16 v100 = 2082;
    size_t v101 = v43;
    __int16 v102 = 1026;
    int v103 = v29;
    __int16 v104 = 2050;
    uint64_t v105 = v36;
    __int16 v106 = 2050;
    uint64_t v107 = v37;
    __int16 v108 = 1026;
    int v109 = v30;
    __int16 v110 = 2050;
    uint64_t v111 = v38;
    __int16 v112 = 2049;
    uint64_t v113 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "#loiOverride Fused location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public }d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf",  buf,  0x5Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    uint64_t v68 = qword_101934928;
    uint64_t v69 = *(void *)(a3 + 4);
    uint64_t v70 = *(void *)(a3 + 12);
    float v71 = sub_100832C40(0xDu);
    int v74 = 134285827;
    uint64_t v75 = v69;
    __int16 v76 = 2049;
    uint64_t v77 = v70;
    __int16 v78 = 2050;
    uint64_t v79 = v28;
    __int16 v80 = 2082;
    int v81 = v71;
    __int16 v82 = 1026;
    int v83 = v29;
    __int16 v84 = 2050;
    uint64_t v85 = v36;
    __int16 v86 = 2050;
    uint64_t v87 = v37;
    __int16 v88 = 1026;
    int v89 = v30;
    __int16 v90 = 2050;
    uint64_t v91 = v38;
    __int16 v92 = 2049;
    uint64_t v93 = v39;
    LODWORD(v73) = 94;
    char v72 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v68,  2LL,  "#loiOverride Fused location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confi dence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{pub lic}.1lf,altitude,%{private}.1lf",  &v74,  v73);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v72);
  }

uint64_t sub_1006BAC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = hypot(*(double *)(a2 + 20), *(double *)(a3 + 20));
  double v7 = sub_100D2DBDC( (double *)(a1 + 160),  *(double *)(a2 + 4),  *(double *)(a2 + 12),  *(double *)(a3 + 4),  *(double *)(a3 + 12),  0.0);
  *(double *)(a1 + 240) = v7;
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101849710);
  }
  uint64_t v8 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134349312;
    double v23 = v6;
    __int16 v24 = 2050;
    double v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#loiOverride totalUncertainty,%{public}.8lf,distanceBetweenLocations,%{public}.8lf",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    int v18 = 134349312;
    double v19 = v6;
    __int16 v20 = 2050;
    double v21 = v7;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride totalUncertainty,%{public}.8lf,distanceBetweenLocations,%{public}.8lf",  &v18,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v13);
  }

  if (v7 >= v6)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101849710);
    }
    int v11 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#loiOverride LOI location is not sufficiently proximate, uncertainty bubbles don't touch.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      LOWORD(v1_Block_object_dispose(&STACK[0x7E0], 8) = 0;
      LODWORD(v17) = 2;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride LOI location is not sufficiently proximate, uncertainty bubbles don't touch.",  &v18,  v17);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v14);
    }

    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 26_Block_object_dispose(&STACK[0x7E0], 8) = 0;
  }

  else
  {
    *(_DWORD *)(a1 + 26_Block_object_dispose(&STACK[0x7E0], 8) = 1;
    if (v7 <= 50.0)
    {
      *(_DWORD *)(a1 + 264) = 1;
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      uint64_t v12 = (os_log_s *)qword_101934928;
      if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#loiOverride LOI location is sufficiently proximate.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934920 != -1) {
          dispatch_once(&qword_101934920, &stru_101849710);
        }
        LOWORD(v1_Block_object_dispose(&STACK[0x7E0], 8) = 0;
        LODWORD(v17) = 2;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride LOI location is sufficiently proximate.",  &v18,  v17);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v16);
      }

      return 1LL;
    }

    else
    {
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101849710);
      }
      uint64_t v9 = (os_log_s *)qword_101934928;
      if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#loiOverride LOI location is not sufficiently proximate, does not meet distance threshold.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934920 != -1) {
          dispatch_once(&qword_101934920, &stru_101849710);
        }
        LOWORD(v1_Block_object_dispose(&STACK[0x7E0], 8) = 0;
        LODWORD(v17) = 2;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  2LL,  "#loiOverride LOI location is not sufficiently proximate, does not meet distance threshold.",  &v18,  v17);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v15);
      }

      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 264) = 0;
    }
  }

  return result;
}

__n128 sub_1006BB230(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a1 + ++*(_DWORD *)(result + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 6_Block_object_dispose(&STACK[0x7E0], 8) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x7E0], 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x7E0], 8) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

void sub_1006BB28C(id a1)
{
  qword_101934928 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

unint64_t sub_1006BB2B8(uint64_t a1, void *a2, unsigned int a3)
{
  int v30 = 0LL;
  double v31 = 0LL;
  uint64_t v32 = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  double v29 = 0.0;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  sub_1002A82BC(*(uint64_t *)buf, "ElevationGradeRecordId", &v29);
  uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v29 <= 0.0)
  {
    uint64_t v17 = sub_1002F8DDC();
    sub_1002A82BC(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v29);
  }

  else
  {
    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v29);
    uint64_t v12 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v12 + 944LL))(v12);
    uint64_t v13 = sub_1006E27E8();
    sub_100413284(v13, buf);
    sub_1002A667C(*(uint64_t *)buf, "ElevationGradeRecordId", 0xFFFFFFFFLL);
    int v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if (sub_100AFE9B4(a1, a3 / 0x18, &v30, v29, Current) != 100)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849730);
    }
    int v18 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      *(double *)&uint8_t buf[4] = v29;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLElevationGradeCompanionSyncManager: Failed to fetch database results for time range, startTime: %f, endTime: %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849730);
      }
      int v33 = 134218240;
      double v34 = v29;
      __int16 v35 = 2048;
      double v36 = Current;
      LODWORD(v2_Block_object_dispose(&STACK[0x7E0], 8) = 22;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "CLElevationGradeCompanionSyncManager: Failed to fetch database results for time range, startTime: %f, endTime: %f",  COERCE_DOUBLE(&v33),  v28);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "size_t CLElevationGradeCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)",  "%s\n",  v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

  *(void *)(a1 + 360) = 0xBFF0000000000000LL;
  double v19 = v30;
  if (v30 == v31)
  {
    double v25 = v30;
    if (!v30) {
      return 0xAAAAAAAAAAAAAAABLL * ((v19 - v25) >> 3);
    }
    goto LABEL_23;
  }

  *(void *)(a1 + 360) = *((void *)v31 - 2);
  id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v21 = v30;
  for (CFIndex i = v31; v21 != i; v21 += 24)
  {
    __int128 v23 = *(_OWORD *)v21;
    *(void *)&uint8_t buf[16] = *((void *)v21 + 2);
    *(_OWORD *)std::stringbuf::string_type buf = v23;
    __int16 v24 = -[CLElevationGradeData initWithElevationGradeEntry:]( objc_alloc(&OBJC_CLASS___CLElevationGradeData),  "initWithElevationGradeEntry:",  buf);
    [v20 addObject:v24];
  }

  [a2 setObject:v20 forKey:@"ElevationGradeKey"];
  double v25 = v30;
  double v19 = v31;
  if (v30)
  {
LABEL_23:
    double v31 = v25;
    operator delete(v25);
  }

  return 0xAAAAAAAAAAAAAAABLL * ((v19 - v25) >> 3);
}

void sub_1006BB69C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BB6E4(uint64_t result)
{
  if (*(double *)(result + 360) > 0.0)
  {
    uint64_t v1 = result;
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849730);
    }
    uint64_t v2 = (uint64_t *)(v1 + 360);
    uint64_t v3 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *v2;
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Saving last Cold Storage sync timestamp: %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849730);
      }
      uint64_t v7 = *v2;
      int v9 = 134217984;
      uint64_t v10 = v7;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Saving last Cold Storage sync timestamp: %f",  COERCE_DOUBLE(&v9));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLElevationGradeCompanionSyncManager::saveCurrentSyncProgress()",  "%s\n",  v8);
    }

    uint64_t v5 = sub_1002F8DDC();
    sub_1002AC7B8(v5, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", v2);
    uint64_t v6 = sub_1002F8DDC();
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 944LL))(v6);
  }

  return result;
}

void sub_1006BB8C8(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1006BB8F4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = (void *)sub_100C6AAF0(a1, a2, a3, a4, a5);
  *uint64_t v7 = off_101849760;
  v7[7] = 0LL;
  _WORD v7[8] = 0LL;
  v7[9] = 0LL;
  sub_100E18F18((uint64_t)sub_1006BB9E8, a1, a3, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0LL;
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = v12;
    uint64_t v12 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7E0], 8) = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", @"CLMotionStateMediator");
  return a1;
}

void sub_1006BB9B0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_10000AE14(v2);
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_1006BB9E8(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018497E8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNatalimetrySubscription::onNatalimetryUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018497E8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNatalimetrySubscription::onNatalimetryUpdate, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006BDCDC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006BBBA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BBBC4(uint64_t a1)
{
  *(void *)a1 = off_101849760;

  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  sub_10000AE14(a1 + 56);
  return sub_100C6AB50(a1);
}

void sub_1006BBC38(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1006BBBC4(a1);
  operator delete(v1);
}

void *sub_1006BBC4C@<X0>(uint64_t a1@<X8>)
{
  v36[0] = &off_101849858;
  v36[1] = sub_1006BC298;
  id v36[2] = 0LL;
  uint64_t v37 = v36;
  sub_1010DDBC0(v38, "kCLConnectionMessageNatalimetryUpdate");
  sub_1006BECE0((uint64_t)&v39, (uint64_t)v36);
  int v33 = &off_101849908;
  v34[0] = sub_1006BC56C;
  v34[1] = 0LL;
  __int16 v35 = &v33;
  sub_1010DDBC0(v40, "kCLConnectionMessageNatalimetryAvailable");
  sub_1006BECE0((uint64_t)&v41, (uint64_t)&v33);
  v31[0] = &off_101849908;
  v31[1] = sub_1006BC66C;
  void v31[2] = 0LL;
  uint64_t v32 = v31;
  sub_1010DDBC0(v42, "kCLConnectionMessageNatalimetryQuery");
  sub_1006BECE0((uint64_t)&v43, (uint64_t)v31);
  v29[0] = &off_101849908;
  v29[1] = sub_1006BCDE0;
  void v29[2] = 0LL;
  int v30 = v29;
  sub_1010DDBC0(v44, "kCLConnectionMessageNatalimetryGetUserProfile");
  sub_1006BECE0((uint64_t)&v45, (uint64_t)v29);
  v27[0] = &off_101849908;
  v27[1] = sub_1006BD0B0;
  v27[2] = 0LL;
  double v28 = v27;
  sub_1010DDBC0(v46, "kCLConnectionMessageNatalimetrySetUserProfile");
  sub_1006BECE0((uint64_t)&v47, (uint64_t)v27);
  v25[0] = &off_101849908;
  v25[1] = sub_1006BD374;
  v25[2] = 0LL;
  uint64_t v26 = v25;
  sub_1010DDBC0(v48, "kCLConnectionMessageNatalimetryCalibrationPromptsNeeded");
  sub_1006BECE0((uint64_t)&v49, (uint64_t)v25);
  v23[0] = &off_101849908;
  v23[1] = sub_1006BD658;
  void v23[2] = 0LL;
  __int16 v24 = v23;
  sub_1010DDBC0(v50, "kCLConnectionMessageNatalimetryResetCalibration");
  sub_1006BECE0((uint64_t)&v51, (uint64_t)v23);
  v21[0] = &off_101849908;
  v21[1] = sub_1006BD8D8;
  v21[2] = 0LL;
  int v22 = v21;
  sub_1010DDBC0(v52, "kCLConnectionMessageWorkoutMetsQuery");
  sub_1006BECE0((uint64_t)&v53, (uint64_t)v21);
  sub_1006BF29C(a1, (unsigned __int8 *)v38, 8LL);
  uint64_t v2 = 56LL;
  do
  {
    uint64_t v3 = (void *)v38[v2 - 1];
    if (&v36[v2] == v3)
    {
      uint64_t v3 = &v36[v2];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v35)[v2]) < 0) {
      operator delete((void *)v34[v2]);
    }
    v2 -= 7LL;
  }

  while (v2 * 8);
  uint64_t v5 = v22;
  if (v22 == v21)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v21;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v22)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t v7 = v24;
  if (v24 == v23)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v23;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v24)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  uint64_t v9 = v26;
  if (v26 == v25)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v25;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  else if (v26)
  {
    uint64_t v10 = 5LL;
    goto LABEL_24;
  }

  char v11 = v28;
  if (v28 == v27)
  {
    uint64_t v12 = 4LL;
    char v11 = v27;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  else if (v28)
  {
    uint64_t v12 = 5LL;
    goto LABEL_29;
  }

  int v13 = v30;
  if (v30 == v29)
  {
    uint64_t v14 = 4LL;
    int v13 = v29;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  else if (v30)
  {
    uint64_t v14 = 5LL;
    goto LABEL_34;
  }

  uint64_t v15 = v32;
  if (v32 == v31)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = v31;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

  else if (v32)
  {
    uint64_t v16 = 5LL;
    goto LABEL_39;
  }

  uint64_t v17 = v35;
  if (v35 == &v33)
  {
    uint64_t v18 = 4LL;
    uint64_t v17 = &v33;
LABEL_44:
    (*v17)[v18]();
  }

  else if (v35)
  {
    uint64_t v18 = 5LL;
    goto LABEL_44;
  }

  __n128 result = v37;
  if (v37 == v36)
  {
    uint64_t v20 = 4LL;
    __n128 result = v36;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }

  else if (v37)
  {
    uint64_t v20 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }

  return result;
}

void sub_1006BC064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21, char a22, uint64_t a23, uint64_t a24, char *a25, char a26, uint64_t a27, uint64_t a28, char *a29, char a30, uint64_t a31, uint64_t a32, char *a33, char a34, uint64_t a35, uint64_t a36, char *a37, char a38, uint64_t a39, uint64_t a40, char *a41)
{
  for (uint64_t i = 392LL; i != -56; i -= 56LL)
    sub_10026E430(v41 + i);
  uint64_t v44 = a13;
  if (a13 == &a10)
  {
    uint64_t v45 = 4LL;
    uint64_t v44 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v45 = 5LL;
  }

  (*(void (**)(void))(*(void *)v44 + 8 * v45))();
LABEL_8:
  uint64_t v46 = a17;
  if (a17 == &a14)
  {
    uint64_t v47 = 4LL;
    uint64_t v46 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v47 = 5LL;
  }

  (*(void (**)(void))(*(void *)v46 + 8 * v47))();
LABEL_13:
  uint64_t v48 = a21;
  if (a21 == &a18)
  {
    uint64_t v49 = 4LL;
    uint64_t v48 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_18;
    }
    uint64_t v49 = 5LL;
  }

  (*(void (**)(void))(*(void *)v48 + 8 * v49))();
LABEL_18:
  uint64_t v50 = a25;
  if (a25 == &a22)
  {
    uint64_t v51 = 4LL;
    uint64_t v50 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_23;
    }
    uint64_t v51 = 5LL;
  }

  (*(void (**)(void))(*(void *)v50 + 8 * v51))();
LABEL_23:
  int v52 = a29;
  if (a29 == &a26)
  {
    uint64_t v53 = 4LL;
    int v52 = &a26;
  }

  else
  {
    if (!a29) {
      goto LABEL_28;
    }
    uint64_t v53 = 5LL;
  }

  (*(void (**)(void))(*(void *)v52 + 8 * v53))();
LABEL_28:
  uint64_t v54 = a33;
  if (a33 == &a30)
  {
    uint64_t v55 = 4LL;
    uint64_t v54 = &a30;
  }

  else
  {
    if (!a33) {
      goto LABEL_33;
    }
    uint64_t v55 = 5LL;
  }

  (*(void (**)(void))(*(void *)v54 + 8 * v55))();
LABEL_33:
  uint64_t v56 = a37;
  if (a37 == &a34)
  {
    uint64_t v57 = 4LL;
    uint64_t v56 = &a34;
  }

  else
  {
    if (!a37) {
      goto LABEL_38;
    }
    uint64_t v57 = 5LL;
  }

  (*(void (**)(void))(*(void *)v56 + 8 * v57))();
LABEL_38:
  uint64_t v58 = a41;
  if (a41 == &a38)
  {
    uint64_t v59 = 4LL;
    uint64_t v58 = &a38;
  }

  else
  {
    if (!a41) {
      goto LABEL_43;
    }
    uint64_t v59 = 5LL;
  }

  (*(void (**)(void))(*(void *)v58 + 8 * v59))();
LABEL_43:
  _Unwind_Resume(a1);
}

void sub_1006BC270()
{
}

void sub_1006BC27C()
{
}

void sub_1006BC288()
{
}

void sub_1006BC298(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101849828);
  }
  uint64_t v5 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v21 = 2112;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Calorie subscription changed, %d, %@, %p",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101849828);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    v15[0] = 67109634;
    v15[1] = a2;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Calorie subscription changed, %d, %@, %p",  v15,  28);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleRequestNatalimetryUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  if ((sub_1006BE394(a1, v15) & 1) != 0)
  {
    sub_100C6AC8C(a1);
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:0 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:0];
    }
  }

  else
  {
    uint64_t v13 = CMErrorMessage;
    uint64_t v14 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v15[0]);
    *(void *)std::stringbuf::string_type buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
    sub_1006BE3F0(a1, buf);
  }
}

void sub_1006BC530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BC56C(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v6 = CMAvailable;
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v7 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
  CLConnectionMessage::sendReply(*a2);
}

void sub_1006BC644(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1006BC66C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_1006BE394(a1, (int *)&v41);
  uint64_t v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v8 = Dictionary;
    if (Dictionary
      && (uint64_t v9 = CMNatalimetryRecordId, [Dictionary objectForKeyedSubscript:CMNatalimetryRecordId]))
    {
      sub_100222B94(v40, (uint64_t)"CLDaemonClient.NatalimetryQuery", 0);
      std::stringbuf::string_type __p = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      unsigned int v47 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "integerValue");
      uint64_t v10 = CMNatalimetryNatalieDataStartDate;
      if ([v8 objectForKeyedSubscript:CMNatalimetryNatalieDataStartDate]) {
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v10), "doubleValue");
      }
      else {
        uint64_t v11 = 0LL;
      }
      uint64_t v49 = v11;
      uint64_t v14 = CMNatalimetrySessionId;
      if ([v8 objectForKeyedSubscript:CMNatalimetrySessionId]) {
        unsigned int v15 = +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:]( CMWorkout,  "CLMotionActivityTypeFromCMWorkoutType:",  objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v14), "integerValue"));
      }
      else {
        unsigned int v15 = 2;
      }
      unsigned int v50 = v15;
      uint64_t v16 = CMNatalimetryNatalieDataMets;
      if ([v8 objectForKeyedSubscript:CMNatalimetryNatalieDataMets]) {
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v16), "doubleValue");
      }
      else {
        uint64_t v17 = 0LL;
      }
      uint64_t v51 = v17;
      uint64_t v18 = CMNatalimetryNatalieDataBasalNatalies;
      if ([v8 objectForKeyedSubscript:CMNatalimetryNatalieDataBasalNatalies]) {
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v18), "doubleValue");
      }
      else {
        double v19 = 0.0;
      }
      uint64_t v53 = (uint64_t)v19;
      uint64_t v20 = CMNatalimetryNatalieDataNatalies;
      if ([v8 objectForKeyedSubscript:CMNatalimetryNatalieDataNatalies]) {
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v20), "doubleValue");
      }
      else {
        double v21 = 0.0;
      }
      uint64_t v52 = (uint64_t)v21;
      uint64_t v22 = CMNatalimetryNatalieDataSourceId;
      id v23 = [v8 objectForKeyedSubscript:CMNatalimetryNatalieDataSourceId];
      if (v23) {
        id v23 = [v8 objectForKeyedSubscript:v22];
      }
      id v48 = v23;
      id v24 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "syncgetQueryNatalieDataSince:records:",  &v47,  &__p);
      unsigned int v41 = v24;
      if ((_DWORD)v24 == 100)
      {
        double v36 = v4;
        double v25 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v26 = (int *)__p;
        uint64_t v27 = v38;
        if (__p != v38)
        {
          do
          {
            if (*((void *)v26 + 1)) {
              double v28 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *((void *)v26 + 1));
            }
            else {
              double v28 = 0LL;
            }
            id v29 = objc_msgSend( [CMNatalieData alloc],  "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:",  *v26,  +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:]( CMWorkout,  "CMWorkoutTypeFromCLMotionActivityType:",  v26[6]),  v28,  *((double *)v26 + 2),  *((double *)v26 + 4),  (double)*((uint64_t *)v26 + 6),  (double)*((uint64_t *)v26 + 7));
            -[NSMutableArray addObject:](v25, "addObject:", v29);

            v26 += 22;
          }

          while (v26 != v27);
        }

        uint64_t v42 = CMNatalimetryNatalieDataArray;
        uint64_t v43 = v25;
        uint64_t v4 = v36;
        +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v43,  &v42,  1LL);

        CLConnectionMessage::sendReply(*a2);
      }

      else
      {
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        int v30 = (os_log_s *)qword_1019344D8;
        if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67240192;
          int v57 = (int)v24;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Error querying calorie data, %{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344D0 != -1) {
            dispatch_once(&qword_1019344D0, &stru_101849808);
          }
          v46[0] = 67240192;
          v46[1] = (_DWORD)v24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Error querying calorie data, %{public}d",  v46,  8);
          __int16 v35 = (uint8_t *)v34;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v34);
          if (v35 != buf) {
            free(v35);
          }
        }

        double v31 = *a2;
        uint64_t v44 = CMErrorMessage;
        uint64_t v45 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v24);
        +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL);
        CLConnectionMessage::sendReply(v31);
      }

      if (__p)
      {
        uint64_t v38 = (int *)__p;
        operator delete(__p);
      }

      sub_1001BA1BC(v40);
    }

    else
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v12 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Error in query request.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        LOWORD(v47) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "Error in query request.",  &v47,  2);
        int v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      uint64_t v13 = *a2;
      uint64_t v54 = CMErrorMessage;
      uint64_t v55 = &off_1018D37E8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL);
      CLConnectionMessage::sendReply(v13);
    }
  }

  else
  {
    uint64_t v58 = CMErrorMessage;
    uint64_t v59 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v41);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v59,  &v58,  1LL);
    CLConnectionMessage::sendReply(v6);
  }
}

void sub_1006BCD70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, id a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a16);

  _Unwind_Resume(a1);
}

void sub_1006BCDE0(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = +[NSMutableDictionary dictionaryWithCapacity:](&OBJC_CLASS___NSMutableDictionary, "dictionaryWithCapacity:", 5LL);
  if ((sub_1006BE6BC(a1) & 1) != 0)
  {
    -[NSMutableDictionary addEntriesFromDictionary:]( v5,  "addEntriesFromDictionary:",  objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "syncgetUserProfile"));
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v6 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        *(_DWORD *)std::stringbuf::string_type buf = 138412802;
        double v19 = v5;
        __int16 v20 = 2112;
        uint64_t v21 = v7;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Getting user profile, %@, %@, %p", buf, 0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        uint64_t v9 = *(void *)(a1 + 24);
        int v12 = 138412802;
        uint64_t v13 = v5;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2048;
        uint64_t v17 = a1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Getting user profile, %@, %@, %p",  &v12,  32);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleMessageNatalimetryGetUserProfile(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }

    CLConnectionMessage::sendReply(*a2);
  }

  else
  {
    uint64_t v8 = *a2;
    uint64_t v24 = CMErrorMessage;
    double v25 = &off_1018D3800;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL);
    CLConnectionMessage::sendReply(v8);
  }
}

void sub_1006BD080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BD0B0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_1006BE6BC(a1);
  uint64_t v6 = *a2;
  if ((v5 & 1) != 0)
  {
    uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
    objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "setUserProfileFromCMNatalimeter:",  Dictionary);
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v8 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 24);
        *(_DWORD *)std::stringbuf::string_type buf = 138478339;
        uint64_t v20 = Dictionary;
        __int16 v21 = 2112;
        uint64_t v22 = v9;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Setting user profile, %{private}@, %@, %p",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        uint64_t v10 = *(void *)(a1 + 24);
        int v13 = 138478339;
        uint64_t v14 = Dictionary;
        __int16 v15 = 2112;
        uint64_t v16 = v10;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "Setting user profile, %{private}@, %@, %p",  &v13,  32);
        int v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleMessageNatalimetrySetUserProfile(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }
    }

    CLConnectionMessage::sendReply(*a2);
  }

  else
  {
    uint64_t v25 = CMErrorMessage;
    uint64_t v26 = &off_1018D3800;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL);
    CLConnectionMessage::sendReply(v6);
  }
}

void sub_1006BD344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BD374(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1006BE490(a1) & 1) != 0)
  {
    sub_1004F2598();
    if (sub_1001B9A1C() && !sub_100C6ADC0(a1))
    {
      int v6 = 0;
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = sub_1006BE1B4(a1) ^ 1;
      int v6 = 1;
    }

    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v8 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      v15[0] = 67109376;
      v15[1] = v6;
      __int16 v16 = 2048;
      uint64_t v17 = v5;
      LODWORD(v12) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.",  v15,  v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleMessageNatalimetryCalibrationPromptsNeeded(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t v9 = *a2;
    uint64_t v13 = CMReturnCode;
    uint64_t v14 = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
    CLConnectionMessage::sendReply(v9);
  }

  else
  {
    uint64_t v7 = *a2;
    uint64_t v22 = CMErrorMessage;
    __int16 v23 = &off_1018D3800;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL);
    CLConnectionMessage::sendReply(v7);
  }
}

void sub_1006BD624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BD658(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1006BE490(a1) & 1) != 0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v5 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resetting calibration.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "Resetting calibration.",  v9,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLMotionSyncStore"),  "resetStoredCalibrations");
    uint64_t v6 = *a2;
    uint64_t v10 = CMReturnCode;
    uint64_t v11 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL);
  }

  else
  {
    uint64_t v6 = *a2;
    uint64_t v13 = CMErrorMessage;
    uint64_t v14 = &off_1018D3800;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
  }

  CLConnectionMessage::sendReply(v6);
}

void sub_1006BD8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BD8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v29 = 0LL;
  int v30 = &v29;
  uint64_t v31 = 0x2020000000LL;
  if ((sub_1006BE394(a1, &v32) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___NSUUID);
    uint64_t v6 = v5;
    *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v6, v7, v8, 0LL));
    uint64_t v10 = CMWorkoutSessionIdKey;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMWorkoutSessionIdKey])
    {
      sub_100222B94(buf, (uint64_t)"CLDaemonClient.WorkoutMetsQueryForSessionId", 0);
      uint64_t v11 = *(void **)(*(void *)(a1 + 72) + 16LL);
      id v12 = [DictionaryOfClasses objectForKeyedSubscript:v10];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768LL;
      void v26[2] = sub_1006BE8D0;
      void v26[3] = &unk_101849788;
      uint64_t v14 = *(CLConnectionMessage **)a2;
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
      v26[4] = &v29;
      v26[5] = v14;
      uint64_t v27 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          unint64_t v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }

      [v11 queryWorkoutMets:v12 withReply:v26];
      uint64_t v17 = v27;
      if (v27)
      {
        uint64_t v18 = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      sub_1001BA1BC(buf);
    }

    else
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v21 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "WorkoutMets,query,empty request",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        v28[0] = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "WorkoutMets,query,empty request",  v28,  v25);
        uint64_t v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v23);
      }

      uint64_t v22 = *(CLConnectionMessage **)a2;
      uint64_t v33 = CMErrorMessage;
      double v34 = &off_1018D37E8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
      CLConnectionMessage::sendReply(v22);
    }
  }

  else
  {
    __int16 v20 = *(CLConnectionMessage **)a2;
    uint64_t v36 = CMErrorMessage;
    uint64_t v37 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v30 + 6));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL);
    CLConnectionMessage::sendReply(v20);
  }

  _Block_object_dispose(&v29, 8);
}

void sub_1006BDC78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

void sub_1006BDCDC(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (!*a3)
  {
    if (*((void *)a4 + 1)
      && (uint64_t v6 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *((void *)a4 + 1))) != 0LL)
    {
      double v7 = v6;
      id v8 = objc_msgSend( [CMNatalieData alloc],  "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:",  *(int *)a4,  +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:]( CMWorkout,  "CMWorkoutTypeFromCLMotionActivityType:",  *((unsigned int *)a4 + 6)),  v6,  a4[2],  a4[4],  (double)*((uint64_t *)a4 + 6),  (double)*((uint64_t *)a4 + 7));
      sub_1004F2598();
      if (sub_1004F8A40())
      {
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        uint64_t v9 = (os_log_s *)qword_1019344D8;
        if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(a1 + 24);
          *(_DWORD *)std::stringbuf::string_type buf = 138412802;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v28 = 2112;
          uint64_t v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = a1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@, %@, %p", buf, 0x20u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344D0 != -1) {
            dispatch_once(&qword_1019344D0, &stru_101849808);
          }
          uint64_t v16 = *(void *)(a1 + 24);
          int v21 = 138412802;
          id v22 = v8;
          __int16 v23 = 2112;
          uint64_t v24 = v16;
          __int16 v25 = 2048;
          uint64_t v26 = a1;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "%@, %@, %p",  &v21,  32);
          uint64_t v18 = (char *)v17;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, c onst CLNatalimetryNotifier_Type::NotificationData &)",  "%s\n",  v17);
          if (v18 != buf) {
            free(v18);
          }
        }
      }

      uint64_t v19 = CMNatalimetryNatalieData;
      id v20 = v8;
      *(void *)std::stringbuf::string_type buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL);

      sub_1006BE10C(a1, buf);
    }

    else
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v11 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        *(_DWORD *)std::stringbuf::string_type buf = 138412546;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v28 = 2048;
        uint64_t v29 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Error in calorie update, %@, %p", buf, 0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101849808);
        }
        uint64_t v13 = *(void **)(a1 + 24);
        int v21 = 138412546;
        id v22 = v13;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "Error in calorie update, %@, %p",  &v21,  22);
        __int16 v15 = (char *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, con st CLNatalimetryNotifier_Type::NotificationData &)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }
    }
  }

void sub_1006BE10C(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1006BE1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_1006BE1B4(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLClientAuthorizationCache");
  id v2 = objc_msgSend( objc_msgSend( v1,  "syncgetAuthorizationContextIfClientIsNonZonal:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")),  "isAuthorizedForServiceTypeMask:",  16);
  if ((v2 & 1) == 0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v3 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Motion calibration system service is disabled.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "Motion calibration system service is disabled.",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLNatalimetrySubscription::isNatalimetryCalibrationAuthorized()",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  return v2;
}

uint64_t sub_1006BE394(uint64_t a1, int *a2)
{
  if (sub_1006BE490(a1))
  {
    if (!sub_100E0DFC0(*(void *)(a1 + 8)))
    {
      int v5 = 104;
      goto LABEL_7;
    }

    if ((sub_100C6ADE0(a1) & 1) != 0) {
      return 1LL;
    }
  }

  int v5 = 105;
LABEL_7:
  uint64_t result = 0LL;
  *a2 = v5;
  return result;
}

void sub_1006BE3F0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(&off_101849978, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1006BE47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1006BE490(uint64_t a1)
{
  uint64_t v2 = sub_100C6AC9C(a1);
  uint64_t v3 = v2;
  if (v17 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101849808);
  }
  uint64_t v4 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type __p = 138412546;
    *(void *)&__p[4] = v5;
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client failed entitlement check for calorimetry, %@, %p",  __p,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    int v10 = 138412546;
    uint64_t v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "#Warning Client failed entitlement check for calorimetry, %@, %p",  &v10,  22);
    uint64_t v9 = (char *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLNatalimetrySubscription::isEntitledForNatalimetry()", "%s\n", v8);
    if (v9 != __p) {
      free(v9);
    }
  }

  return v3;
}

void sub_1006BE698( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BE6BC(uint64_t a1)
{
  uint64_t v2 = sub_100C6AC9C(a1);
  uint64_t v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101849808);
  }
  uint64_t v4 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)std::stringbuf::string_type __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access user info spi",  __p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access user info spi",  &v10,  12);
    uint64_t v9 = (char *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLNatalimetrySubscription::isEntitledForUserInfoAccess()", "%s\n", v8);
    if (v9 != __p) {
      free(v9);
    }
  }

  return v3;
}

void sub_1006BE8AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BE8D0(uint64_t a1, void *a2, uint64_t a3)
{
  if ((_DWORD)a3 == 100)
  {
    uint64_t v21 = CMWorkoutMetsDataKey;
    id v22 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v5 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [a2 description];
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Workout Mets Query Result: %@", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      uint64_t v13 = qword_1019344D8;
      int v19 = 138412290;
      id v20 = [a2 description];
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  0LL,  "Workout Mets Query Result: %@",  &v19,  12);
      __int16 v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    uint64_t v7 = *(void *)(a1 + 40);
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101849808);
    }
    uint64_t v9 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      LODWORD(v26) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Error querying workout mets, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101849808);
      }
      int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      int v19 = 67240192;
      LODWORD(v20) = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Error querying workout mets, %{public}d",  &v19,  8);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v23 = CMErrorMessage;
    uint64_t v24 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL);
    uint64_t v7 = v11;
  }

  return CLConnectionMessage::sendReply(v7);
}

uint64_t sub_1006BEC88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_1006BECAC(uint64_t a1)
{
  return sub_10000AE14(a1 + 40);
}

void sub_1006BECB4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1006BECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_1006BED44(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1006BED70(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_1006BED9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101849858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1006BEDD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101849858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1006BEDFC(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_1006BEE04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1006BEE40()
{
}

void sub_1006BEE4C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1006BEED0(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1006BEEB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BEED0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018498C8);
    }
    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018498C8);
      }
    }

    __int16 v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_1006BF0B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1006BF0D0(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1006BF0FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101849908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1006BF138(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101849908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1006BF15C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1006BF164(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1006BF1A0()
{
}

void sub_1006BF1AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  __int16 v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  int v10 = v17;
  if (v17)
  {
    uint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    uint64_t v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_1006BF280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1006BF29C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1006BF314(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_1006BF300(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_1006BF314(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_1006BF594(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  id v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *id v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_1006BF57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1006BF594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_1006BF608(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1006BF5F0(_Unwind_Exception *a1)
{
}

void *sub_1006BF608(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1006BF660(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1006BF67C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101997C98, (void *)&_mh_execute_header);
}

void sub_1006BF894(id a1)
{
  qword_101997CB0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLMotionAlarmNotifierSilo");
}

uint64_t sub_1006BF948(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1006C3C60;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101997CC0 != -1) {
    dispatch_once(&qword_101997CC0, block);
  }
  return qword_1019A14E0;
}

void sub_1006BFB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1006BFBA0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  if (!a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    unint64_t v14 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    LOWORD(v54) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid name.",  &v54,  2);
    float v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)",  "%s\n",  v15);
LABEL_65:
    if (v16 != buf) {
      free(v16);
    }
    return 0LL;
  }

  sub_1011F69B0((char *)__dst, a2);
  uint64_t v6 = sub_10066C73C((uint64_t)__dst);
  if (v52 < 0) {
    operator delete(__p);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(__dst[0]);
  }
  if (-[NSString length](v6, "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v7 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138477827;
      int v57 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Registering client: %{private}@.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v54 = 138477827;
      uint64_t v55 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Registering client: %{private}@.",  &v54,  12);
      unint64_t v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    unint64_t v8 = objc_alloc_init(&OBJC_CLASS___ClientRegistration);
    -[ClientRegistration setAdapter:](v8, "setAdapter:", a3);
    sub_1011F69B0((char *)v25, a2);
    -[ClientRegistration setName:](v8, "setName:", v25);
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    [*(id *)(a1 + 136) setObject:v8 forKey:v6];

    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    unint64_t v9 = sub_1007A8B28(*(void *)(a1 + 112), v6);
    id v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v21,  v53,  16LL);
    if (v10)
    {
      uint64_t v11 = *(void *)v22;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v11) {
            objc_enumerationMutation(v9);
          }
          sub_1006C5768(a1, *(void **)(*((void *)&v21 + 1) + 8LL * (void)i));
        }

        id v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v21,  v53,  16LL);
      }

      while (v10);
    }

    return 1LL;
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  float v17 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Unable to create client bundle identifier.",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    LOWORD(v54) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to create client bundle identifier.",  &v54,  2);
    float v16 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)",  "%s\n",  v20);
    goto LABEL_65;
  }

  return result;
}

void sub_1006C0194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1006C0278(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1006C028C(uint64_t a1, __int128 *a2)
{
  if (!a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid name.",  &v27,  2);
    unint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)",  "%s\n",  v7);
LABEL_44:
    if (v8 != buf) {
      free(v8);
    }
    return 0LL;
  }

  sub_1011F69B0((char *)__dst, a2);
  unint64_t v3 = sub_10066C73C((uint64_t)__dst);
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(__dst[0]);
  }
  if (-[NSString length](v3, "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    __int128 v4 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138477827;
      char v30 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Unregistering client: %{private}@.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v27 = 138477827;
      char v28 = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Unregistering client: %{private}@.",  &v27,  12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    [*(id *)(a1 + 136) removeObjectForKey:v3];
    return 1LL;
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  unint64_t v9 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Unable to create client bundle identifier.",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to create client bundle identifier.",  &v27,  2);
    unint64_t v8 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)",  "%s\n",  v12);
    goto LABEL_44;
  }

  return result;
}

void sub_1006C0738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1006C0780(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v6 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138478083;
    id v89 = [a2 bundleId];
    __int16 v90 = 2113;
    id v91 = [a2 name];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Registering alarm for client: %{private}@, name: %{private}@.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v45 = qword_101934618;
    int v84 = 138478083;
    id v85 = [a2 bundleId];
    __int16 v86 = 2113;
    id v87 = [a2 name];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  0LL,  "Registering alarm for client: %{private}@, name: %{private}@.",  &v84,  22);
    unsigned int v47 = (uint8_t *)v46;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v46);
    if (v47 != buf) {
      free(v47);
    }
  }

  if (!a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    char v22 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Invalid alarm to add!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v84) = 0;
      LODWORD(v82) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm to add!",  &v84,  v82);
      uint64_t v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v54);
      if (v55 != buf) {
        free(v55);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0LL, 107LL);
    }
    return 0LL;
  }

  id v7 = [a2 bundleId];
  if (!sub_1006C5D08((uint64_t)v7, v7))
  {
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 107LL);
    }
    return 0LL;
  }

  id v8 = sub_1007A7F74(*(void *)(a1 + 112), [a2 bundleId], objc_msgSend(a2, "name"));
  if (!v8) {
    goto LABEL_113;
  }
  unint64_t v9 = v8;
  unsigned int v10 = [v8 duration];
  if (v10 == [a2 duration])
  {
    unsigned int v11 = [v9 type];
    if (v11 == [a2 type])
    {
      unsigned int v12 = [v9 repeats];
      if (v12 == [a2 repeats])
      {
        if (a3) {
          (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v9, 100LL);
        }
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v31 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          id v32 = [a2 bundleId];
          id v33 = [a2 name];
          *(_DWORD *)std::stringbuf::string_type buf = 138478083;
          id v89 = v32;
          __int16 v90 = 2113;
          id v91 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Alarm already exists for client, firing: %{private}@, name: %{private}@.",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          uint64_t v66 = qword_101934618;
          id v67 = [a2 bundleId];
          id v68 = [a2 name];
          int v84 = 138478083;
          id v85 = v67;
          __int16 v86 = 2113;
          id v87 = v68;
          LODWORD(v82) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v66,  0LL,  "Alarm already exists for client, firing: %{private}@, name: %{private}@.",  &v84,  v82);
          uint64_t v70 = (uint8_t *)v69;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v69);
          if (v70 != buf) {
            free(v70);
          }
        }

        sub_1006C5768(a1, v9);
        return 1LL;
      }
    }
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v13 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [a2 bundleId];
    id v15 = [a2 name];
    *(_DWORD *)std::stringbuf::string_type buf = 138478083;
    id v89 = v14;
    __int16 v90 = 2113;
    id v91 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Updating alarm for client: %{private}@, name: %{private}@.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v56 = qword_101934618;
    id v57 = [a2 bundleId];
    id v58 = [a2 name];
    int v84 = 138478083;
    id v85 = v57;
    __int16 v86 = 2113;
    id v87 = v58;
    LODWORD(v82) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  0LL,  "Updating alarm for client: %{private}@, name: %{private}@.",  &v84,  v82);
    int v60 = (uint8_t *)v59;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v59);
    if (v60 != buf) {
      free(v60);
    }
  }

  v83[0] = _NSConcreteStackBlock;
  v83[1] = 3221225472LL;
  v83[2] = sub_1006C5EAC;
  v83[3] = &unk_101849A88;
  v83[4] = a3;
  uint64_t result = sub_1006C16E0(a1, v9, (uint64_t)v83);
  if ((_DWORD)result)
  {
LABEL_113:
    if (!sub_1007A7D1C(*(void *)(a1 + 112), a2) || ![a2 alarmId])
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      __int128 v23 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        id v24 = [a2 bundleId];
        id v25 = [a2 name];
        *(_DWORD *)std::stringbuf::string_type buf = 138478083;
        id v89 = v24;
        __int16 v90 = 2113;
        id v91 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to update or insert alarm for client: %{private}@ name: %{private}@.",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v61 = qword_101934618;
        id v62 = [a2 bundleId];
        id v63 = [a2 name];
        int v84 = 138478083;
        id v85 = v62;
        __int16 v86 = 2113;
        id v87 = v63;
        LODWORD(v82) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  16LL,  "Failed to update or insert alarm for client: %{private}@ name: %{private}@.",  &v84,  v82);
        uint64_t v65 = (uint8_t *)v64;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v64);
        if (v65 != buf) {
          free(v65);
        }
      }

      goto LABEL_38;
    }

    if ([a2 type] == 15)
    {
      id v17 = [a2 bundleId];
      [a2 name];
      id v18 = [a2 alarmId];
      unsigned int v19 = [a2 duration];
      int v20 = [a2 repeats];
      sub_1006C5ECC(a1, (unint64_t)v17, v21, (unint64_t)v18, v19, v20);
      goto LABEL_55;
    }

    if ([a2 type] == 19)
    {
      [a2 bundleId];
      [a2 name];
      id v26 = [a2 alarmId];
      unsigned int v27 = [a2 duration];
      unsigned __int8 v28 = [a2 repeats];
      sub_1006C6348(a1, v29, v30, (uint64_t)v26, v27, v28);
      goto LABEL_55;
    }

    if ([a2 type] == 22
      || [a2 type] == 23
      || [a2 type] == 24
      || [a2 type] == 25)
    {
      id v34 = [a2 bundleId];
      [a2 name];
      id v35 = [a2 alarmId];
      int v36 = [a2 duration];
      int v37 = [a2 type];
      goto LABEL_66;
    }

    unsigned int v39 = [a2 type];
    id v40 = [a2 bundleId];
    [a2 name];
    id v41 = [a2 alarmId];
    id v42 = [a2 type];
    unsigned int v44 = [a2 duration];
    if (v39 == 26)
    {
    }

    else if ((sub_1006C72F0(a1, v40, v43, (std::string::size_type)v41, (uint64_t)v42, v44) & 1) == 0)
    {
LABEL_66:
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      char v48 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Alarm construction failed!", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        LOWORD(v84) = 0;
        LODWORD(v82) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Alarm construction failed!",  &v84,  v82);
        char v72 = (uint8_t *)v71;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v71);
        if (v72 != buf) {
          free(v72);
        }
      }

      if (!sub_1007A8F54(*(void *)(a1 + 112), [a2 bundleId], objc_msgSend(a2, "name")))
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v49 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
        {
          id v50 = [a2 alarmId];
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          id v89 = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Failed to remove alarm entry for id: %llu.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          uint64_t v78 = qword_101934618;
          id v79 = [a2 alarmId];
          int v84 = 134217984;
          id v85 = v79;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v78,  16LL,  "Failed to remove alarm entry for id: %llu.",  &v84);
          int v81 = (uint8_t *)v80;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v80);
          if (v81 != buf) {
            free(v81);
          }
        }
      }

      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v51 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        id v52 = [a2 bundleId];
        id v53 = [a2 name];
        *(_DWORD *)std::stringbuf::string_type buf = 138478083;
        id v89 = v52;
        __int16 v90 = 2113;
        id v91 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "Construction of alarm failed for client: %{private}@ name: %{private}@.",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v73 = qword_101934618;
        id v74 = [a2 bundleId];
        id v75 = [a2 name];
        int v84 = 138478083;
        id v85 = v74;
        __int16 v86 = 2113;
        id v87 = v75;
        LODWORD(v82) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v73,  16LL,  "Construction of alarm failed for client: %{private}@ name: %{private}@.",  &v84,  v82);
        uint64_t v77 = (uint8_t *)v76;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v76);
        if (v77 != buf) {
          free(v77);
        }
      }

      [a2 setAlarmId:0];
LABEL_38:
      if (a3) {
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 103LL);
      }
      return 0LL;
    }

uint64_t sub_1006C16E0(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v6 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138478083;
    id v34 = [a2 bundleId];
    __int16 v35 = 2113;
    id v36 = [a2 name];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unregistering alarm for client: %{private}@, name: %{private}@.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v19 = qword_101934618;
    int v29 = 138478083;
    id v30 = [a2 bundleId];
    __int16 v31 = 2113;
    id v32 = [a2 name];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  0LL,  "Unregistering alarm for client: %{private}@, name: %{private}@.",  &v29,  22);
    int v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  if (!a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    unsigned int v11 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm to remove!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v29) = 0;
      LODWORD(v2_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm to remove!",  &v29,  v28);
      __int128 v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0LL, 107LL);
    }
    return 0LL;
  }

  id v7 = sub_1007A7F74(*(void *)(a1 + 112), [a2 bundleId], objc_msgSend(a2, "name"));
  if (!v7)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    unsigned int v12 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unable to find alarm to remove!", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v29) = 0;
      LODWORD(v2_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  1LL,  "Unable to find alarm to remove!",  &v29,  v28);
      id v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108LL);
    }
    return 0LL;
  }

  id v8 = v7;
  id v9 = [v7 alarmId];
  if ([v8 type] == 15)
  {
    int v10 = sub_1006C7BA0(a1, (unint64_t)v9);
  }

  else
  {
    id v14 = [v8 type];
    if ((_DWORD)v14 == 19)
    {
      sub_1006C4F34((uint64_t)v14, (uint64_t)v9);
      int v15 = 1;
      goto LABEL_33;
    }

    if ([v8 type] == 22
      || [v8 type] == 23
      || [v8 type] == 24
      || [v8 type] == 25)
    {
      int v10 = sub_1006C5100(a1, (uint64_t)v9);
    }

    else
    {
      int v10 = sub_1006C7F00(a1, (uint64_t)v9);
    }
  }

  int v15 = v10;
LABEL_33:
  sub_1006C8238(a1, (uint64_t)v9);
  if (sub_1007A8F54(*(void *)(a1 + 112), [v8 bundleId], objc_msgSend(v8, "name")))
  {
    if (v15)
    {
      [v8 setAlarmId:0];
      [v8 setState:12];
      uint64_t v13 = 1LL;
      if (!a3) {
        return v13;
      }
      goto LABEL_43;
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    char v16 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      id v34 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to remove activity alarm entry for id: %llu.",  buf,  0xCu);
    }

    uint64_t v13 = 0LL;
    if (!sub_1002921D0(115, 0))
    {
      if (!a3) {
        return v13;
      }
      goto LABEL_43;
    }

    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v29 = 134217984;
    id v30 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Failed to remove activity alarm entry for id: %llu.",  &v29);
    unsigned int v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  uint64_t v13 = 0LL;
  if (!a3) {
    return v13;
  }
LABEL_43:
  if ((_DWORD)v13) {
    uint64_t v17 = 100LL;
  }
  else {
    uint64_t v17 = 103LL;
  }
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v17);
  return v13;
}

uint64_t sub_1006C1E48(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v6 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138478083;
    id v56 = [a2 bundleId];
    __int16 v57 = 2113;
    id v58 = [a2 name];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Acknowledging alarm for client: %{private}@, name: %{private}@.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v26 = qword_101934618;
    int v47 = 138478083;
    id v48 = [a2 bundleId];
    __int16 v49 = 2113;
    id v50 = [a2 name];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "Acknowledging alarm for client: %{private}@, name: %{private}@.",  &v47,  22);
    uint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  if (!a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    char v16 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid alarm to acknowledge!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v47) = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm to acknowledge!",  &v47,  v46);
      id v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0LL, 107LL);
    }
    return 0LL;
  }

  id v7 = sub_1007A7F74(*(void *)(a1 + 112), [a2 bundleId], objc_msgSend(a2, "name"));
  if (!v7)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v17 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Unable to find alarm entry to acknowledge!",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v47) = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find alarm entry to acknowledge!",  &v47,  v46);
      id v32 = (uint8_t *)v31;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108LL);
    }
    return 0LL;
  }

  id v8 = v7;
  id v9 = [v7 alarmId];
  unsigned int v10 = [v8 state];
  if (v10 - 12 <= 0xFFFFFFF5)
  {
    unsigned int v11 = v10;
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    unsigned int v12 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = sub_101015B40(v11);
      id v14 = [v8 bundleId];
      id v15 = [v8 name];
      *(_DWORD *)std::stringbuf::string_type buf = 138413059;
      id v56 = (id)v13;
      __int16 v57 = 2113;
      id v58 = v14;
      __int16 v59 = 2113;
      id v60 = v15;
      __int16 v61 = 2048;
      id v62 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v33 = qword_101934618;
      uint64_t v34 = sub_101015B40(v11);
      id v35 = [v8 bundleId];
      id v36 = [v8 name];
      int v47 = 138413059;
      id v48 = (id)v34;
      __int16 v49 = 2113;
      id v50 = v35;
      __int16 v51 = 2113;
      id v52 = v36;
      __int16 v53 = 2048;
      id v54 = v9;
      LODWORD(v46) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  16LL,  "Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.",  &v47,  v46);
      uint64_t v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 108LL);
    }
    return 0LL;
  }

  if ([v8 repeats])
  {
    sub_1006C8238(a1, (uint64_t)v9);
    if ([v8 type] != 15 && objc_msgSend(v8, "type") != 19)
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      id v25 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "Preconditions have been violated and we have a repeating activity alarm!",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        LOWORD(v47) = 0;
        LODWORD(v46) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  17LL,  "Preconditions have been violated and we have a repeating activity alarm!",  &v47,  v46);
        uint64_t v45 = (uint8_t *)v44;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v44);
        if (v45 != buf) {
          free(v45);
        }
      }

      if (a3) {
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 103LL);
      }
      return 0LL;
    }

    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v20 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = sub_101015B40(1u);
      id v22 = [v8 bundleId];
      *(_DWORD *)std::stringbuf::string_type buf = 138412803;
      id v56 = (id)v21;
      __int16 v57 = 2113;
      id v58 = v22;
      __int16 v59 = 2048;
      id v60 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Setting alarm to %@ for client: %{private}@, id: %llu.",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v39 = qword_101934618;
      uint64_t v40 = sub_101015B40(1u);
      id v41 = [v8 bundleId];
      int v47 = 138412803;
      id v48 = (id)v40;
      __int16 v49 = 2113;
      id v50 = v41;
      __int16 v51 = 2048;
      id v52 = v9;
      LODWORD(v46) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  0LL,  "Setting alarm to %@ for client: %{private}@, id: %llu.",  &v47,  v46);
      uint64_t v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    uint64_t v18 = 1LL;
    [v8 setState:1];
    sub_1007A7D1C(*(void *)(a1 + 112), v8);
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 100LL);
    }
  }

  else
  {
    int v23 = sub_1006C16E0(a1, v8, 0LL);
    if (a3)
    {
      if (v23) {
        uint64_t v24 = 100LL;
      }
      else {
        uint64_t v24 = 103LL;
      }
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v24);
    }

    return 1LL;
  }

  return v18;
}

uint64_t sub_1006C28B4(uint64_t a1, void *a2, uint64_t a3)
{
  if (!sub_1006C5D08(a1, a2)) {
    return 0LL;
  }
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v6 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138477827;
    uint64_t v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Application %{private}@ sending remote app launch.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v15 = 138477827;
    char v16 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  1LL,  "Application %{private}@ sending remote app launch.",  &v15,  12);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::launchRemoteApplication(NSString *, CLMotionAlarmLaunchHandler)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  BOOL v7 = *(_BYTE *)(a1 + 110) != 0;
  if (*(_BYTE *)(a1 + 110))
  {
    id v8 = [a2 dataUsingEncoding:4];
    id v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1006CAF40;
    v14[3] = &unk_101840D20;
    _DWORD v14[4] = v8;
    [v9 doAsync:v14];
    if (!a3) {
      return 1LL;
    }
    uint64_t v10 = 100LL;
    goto LABEL_12;
  }

  if (!a3) {
    return 0LL;
  }
  uint64_t v10 = 109LL;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v10);
  return v7;
}

void sub_1006C2B44(uint64_t a1, xpc_activity_t activity, sqlite3_int64 a3)
{
  if (!activity)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    unsigned int v12 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid alarm activity.", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm activity.",  &v25,  2);
    id v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)",  "%s\n",  v13);
LABEL_45:
    if (v14 != buf) {
      free(v14);
    }
    return;
  }

  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 4 || (xpc_activity_state_t v7 = state, state == 2))
  {
    uint64_t v8 = *(void *)(a1 + 192);
    sub_1010DDBC0(__p, "none");
    sub_100AD5668(v8, (uint64_t *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (!objc_msgSend( *(id *)(a1 + 152),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3))) {
      objc_msgSend( *(id *)(a1 + 152),  "setObject:forKeyedSubscript:",  activity,  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3));
    }
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v9 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      sqlite3_int64 v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Class A timer fired id: %llu.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v25 = 134217984;
      sqlite3_int64 v26 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Class A timer fired id: %llu.",  &v25);
      uint64_t v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    sub_1006C9E28(a1, a3);
    if (!xpc_activity_set_state(activity, 5LL))
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v10 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v11 = xpc_activity_get_state(activity);
        *(_DWORD *)std::stringbuf::string_type buf = 134349056;
        sqlite3_int64 v28 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as done. Current state is %{public}ld",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v18 = qword_101934618;
        xpc_activity_state_t v19 = xpc_activity_get_state(activity);
        int v25 = 134349056;
        sqlite3_int64 v26 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  17LL,  "Failed to mark activity as done. Current state is %{public}ld",  &v25,  12);
        uint64_t v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }

    sub_100AD5D38(*(void *)(a1 + 192));
    return;
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  int v15 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    sqlite3_int64 v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unexpected activity state: %ld", buf, 0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v25 = 134217984;
    sqlite3_int64 v26 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unexpected activity state: %ld",  &v25);
    id v14 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)",  "%s\n",  v22);
    goto LABEL_45;
  }

void sub_1006C3174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006C31AC(uint64_t a1)
{
  if (qword_101934760 != -1) {
    dispatch_once(&qword_101934760, &stru_101849B18);
  }
  uint64_t v2 = (os_log_s *)qword_101934768;
  if (os_log_type_enabled((os_log_t)qword_101934768, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLMotionAlarmNotifier::onCardioChangeEvent triggered.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934760 != -1) {
      dispatch_once(&qword_101934760, &stru_101849B18);
    }
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934768,  2LL,  "CLMotionAlarmNotifier::onCardioChangeEvent triggered.",  &v26,  2);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  uint64_t v3 = *(void *)(a1 + 192);
  sub_1010DDBC0(__p, "none");
  sub_100AD5668(v3, (uint64_t *)__p);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v4 = *(void **)(a1 + 160);
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    do
    {
      xpc_activity_state_t v7 = 0LL;
      do
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = [*(id *)(*((void *)&v20 + 1) + 8 * (void)v7) unsignedLongLongValue];
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        id v9 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          id v30 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CardioChange alarm fired: %llu.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v26 = 134217984;
          id v27 = v8;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "CardioChange alarm fired: %llu.",  &v26);
          id v14 = (uint8_t *)v13;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v13);
          if (v14 != buf) {
            free(v14);
          }
        }

        if (objc_msgSend( *(id *)(a1 + 144),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8)))
        {
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          uint64_t v10 = (os_log_s *)qword_101934618;
          if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CardioChange alarm is pending acknowledgment. Not firing alarm.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934610 != -1) {
              dispatch_once(&qword_101934610, &stru_101849AF8);
            }
            LOWORD(v26) = 0;
            LODWORD(v19) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "CardioChange alarm is pending acknowledgment. Not firing alarm.",  &v26,  v19);
            unsigned int v12 = (uint8_t *)v11;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v11);
            if (v12 != buf) {
              free(v12);
            }
          }
        }

        else
        {
          sub_1006C9E28(a1, (sqlite3_int64)v8);
        }

        xpc_activity_state_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v15 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
      id v5 = v15;
    }

    while (v15);
  }

  return sub_100AD5D38(*(void *)(a1 + 192));
}

void sub_1006C36B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006C3700(uint64_t a1, int a2)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  __int128 v4 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    LODWORD(v33) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLMotionAlarmNotifier::fireEventAlarm triggered,type:%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v29 = 67109120;
    LODWORD(v30) = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "CLMotionAlarmNotifier::fireEventAlarm triggered,type:%d",  &v29);
    __int128 v21 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  uint64_t v5 = *(void *)(a1 + 192);
  sub_1010DDBC0(__p, "none");
  sub_100AD5668(v5, (uint64_t *)__p);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v6 = *(void **)(a1 + 120);
  id v7 = [v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v24;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v9);
        id v11 = [v10 unsignedLongLongValue];
        if (objc_msgSend(objc_msgSend(*(id *)(a1 + 120), "objectForKey:", v10), "trigger") == a2)
        {
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          unsigned int v12 = (os_log_s *)qword_101934618;
          if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 134217984;
            id v33 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Event alarm fired: %llu.", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934610 != -1) {
              dispatch_once(&qword_101934610, &stru_101849AF8);
            }
            int v29 = 134217984;
            id v30 = v11;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Event alarm fired: %llu.",  &v29);
            uint64_t v17 = (uint8_t *)v16;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)",  "%s\n",  v16);
            if (v17 != buf) {
              free(v17);
            }
          }

          if (objc_msgSend( *(id *)(a1 + 144),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11)))
          {
            if (qword_101934610 != -1) {
              dispatch_once(&qword_101934610, &stru_101849AF8);
            }
            uint64_t v13 = (os_log_s *)qword_101934618;
            if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::stringbuf::string_type buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Event alarm is pending acknowledgment. Not firing alarm.",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934610 != -1) {
                dispatch_once(&qword_101934610, &stru_101849AF8);
              }
              LOWORD(v29) = 0;
              LODWORD(v22) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Event alarm is pending acknowledgment. Not firing alarm.",  &v29,  v22);
              id v15 = (uint8_t *)v14;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)",  "%s\n",  v14);
              if (v15 != buf) {
                free(v15);
              }
            }
          }

          else
          {
            sub_1006C9E28(a1, (sqlite3_int64)v11);
          }
        }

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v18 = [v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
      id v7 = v18;
    }

    while (v18);
  }

  return sub_100AD5D38(*(void *)(a1 + 192));
}

void sub_1006C3C3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006C3C60(uint64_t a1)
{
  uint64_t v2 = operator new(0xE8uLL);
  uint64_t result = sub_1006C3CAC((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A14E0 = (uint64_t)v2;
  return result;
}

void sub_1006C3C98(_Unwind_Exception *a1)
{
}

uint64_t sub_1006C3CAC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1006C4058(a1, "CLMotionAlarmNotifier", a2);
  *(void *)uint64_t v4 = off_1018499B0;
  *(_WORD *)(v4 + 109) = 0;
  uint64_t v5 = operator new(0x38uLL);
  sub_1007A7B5C(v5, 0LL);
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 144) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = a1 + 176;
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 184) = 0LL;
  id v7 = operator new(0x30uLL);
  sub_100AD558C((uint64_t)v7, (uint64_t)"CLMotionAlarmNotifier", a1, 60.0);
  *(void *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  sub_100D96A2C((uint64_t)sub_1006C40F4, a1, *(void **)(a1 + 32), &v21);
  uint64_t v8 = v21;
  uint64_t v21 = 0LL;
  uint64_t v9 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = v21;
    uint64_t v21 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  [*(id *)(*(void *)(a1 + 200) + 16) register:*(void *)(*(void *)(a1 + 200) + 8) forNotification:8 registrationInfo:0];
  sub_100ACD980((uint64_t)sub_1006C42CC, a1, *(void **)(a1 + 32), &v21);
  uint64_t v11 = v21;
  uint64_t v21 = 0LL;
  uint64_t v12 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    uint64_t v13 = v21;
    uint64_t v21 = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
  }

  [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:1 registrationInfo:0];
  sub_1003A09BC((uint64_t)sub_1006C44A4, a1, *(void **)(a1 + 32), &v21);
  uint64_t v14 = v21;
  uint64_t v21 = 0LL;
  uint64_t v15 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    uint64_t v16 = v21;
    uint64_t v21 = 0LL;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
  }

  [*(id *)(*(void *)(a1 + 216) + 16) register:*(void *)(*(void *)(a1 + 216) + 8) forNotification:5 registrationInfo:0];
  sub_100468458((uint64_t)sub_1006C467C, a1, a2, &v21);
  uint64_t v17 = v21;
  uint64_t v21 = 0LL;
  uint64_t v18 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    uint64_t v19 = v21;
    uint64_t v21 = 0LL;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
  }

  [*(id *)(*(void *)(a1 + 224) + 16) register:*(void *)(*(void *)(a1 + 224) + 8) forNotification:2 registrationInfo:0];
  *(void *)(a1 + 152) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  return a1;
}

void sub_1006C3F54(_Unwind_Exception *a1)
{
  uint64_t v7 = v1[28];
  v1[28] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = v1[27];
  v1[27] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = v1[26];
  v1[26] = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *v4;
  uint64_t *v4 = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = v1[24];
  v1[24] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  sub_1006CD1FC(v3, *v5);
  uint64_t v12 = *v2;
  *uint64_t v2 = 0LL;
  if (v12) {
    sub_1006CD248((int)v2, v12);
  }
  sub_1006C4854((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C4058(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101849B48;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_1006C40D8(_Unwind_Exception *exception_object)
{
}

void sub_1006C40F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionAlarmNotifier::onAppMonitorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionAlarmNotifier::onAppMonitorNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006CAF88(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006C42AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006C42CC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionAlarmNotifier::onDataProtectionManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionAlarmNotifier::onDataProtectionManagerNotification, event:%{public, locatio n:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006CAFFC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006C4484( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006C44A4(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionAlarmNotifier::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionAlarmNotifier::onCompanionNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (*a2 == 5) {
    *(_BYTE *)(a4 + 110) = *a3;
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006C4660( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006C467C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionAlarmNotifier::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionAlarmNotifier::onMotionStateMediatorNotification, event:%{public, location: escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1006CB21C((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006C4834( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006C4854(uint64_t a1)
{
  *(void *)a1 = off_101849B48;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_1006C48C8(uint64_t a1)
{
  *(void *)a1 = off_1018499B0;
  sub_1006C49AC(a1);
  uint64_t v2 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_1006CD1FC(a1 + 168, *(void **)(a1 + 176));
  uint64_t v7 = *(char **)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v7) {
    sub_1006CD248(a1 + 112, v7);
  }
  return sub_1006C4854(a1);
}

void sub_1006C4998(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1006C48C8(a1);
  operator delete(v1);
}

void sub_1006C49AC(uint64_t a1)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v2 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Shutting down alarm notifier.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    v60[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Shutting down alarm notifier.",  v60,  2);
    uint64_t v39 = (uint8_t *)v38;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionAlarmNotifier::shutdown()", "%s\n", v38);
    if (v39 != buf) {
      free(v39);
    }
  }

  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  id v3 = [*(id *)(a1 + 144) allValues];
  id v4 = [v3 countByEnumeratingWithState:&v56 objects:v65 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v57;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v57 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v56 + 1) + 8 * (void)i) invalidate];
      }

      id v5 = [v3 countByEnumeratingWithState:&v56 objects:v65 count:16];
    }

    while (v5);
  }

  *(void *)(a1 + 144) = 0LL;
  uint64_t v8 = *(void **)(a1 + 168);
  uint64_t v9 = (void *)(a1 + 176);
  if (v8 != (void *)(a1 + 176))
  {
    do
    {
      sub_1006B6294(v8[5]);
      char v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          char v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          char v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }

        while (!v12);
      }

      uint64_t v8 = v11;
    }

    while (v11 != v9);
  }

  sub_1006CD1FC(a1 + 168, *(void **)(a1 + 176));
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v9;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  id v13 = [*(id *)(a1 + 152) allKeys];
  id v14 = [v13 countByEnumeratingWithState:&v52 objects:v64 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v53;
    do
    {
      for (int j = 0LL; j != v15; int j = (char *)j + 1)
      {
        if (*(void *)v53 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = [*(id *)(*((void *)&v52 + 1) + 8 * (void)j) unsignedIntegerValue];
        sub_1006C4F34((uint64_t)v18, (uint64_t)v18);
      }

      id v15 = [v13 countByEnumeratingWithState:&v52 objects:v64 count:16];
    }

    while (v15);
  }

  *(void *)(a1 + 152) = 0LL;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id v19 = [*(id *)(a1 + 120) allValues];
  id v20 = [v19 countByEnumeratingWithState:&v48 objects:v63 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v49;
    do
    {
      for (k = 0LL; k != v21; k = (char *)k + 1)
      {
        if (*(void *)v49 != v22) {
          objc_enumerationMutation(v19);
        }
        [*(id *)(*((void *)&v48 + 1) + 8 * (void)k) invalidate];
      }

      id v21 = [v19 countByEnumeratingWithState:&v48 objects:v63 count:16];
    }

    while (v21);
  }

  *(void *)(a1 + 120) = 0LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id v24 = [*(id *)(a1 + 128) allKeys];
  id v25 = [v24 countByEnumeratingWithState:&v44 objects:v62 count:16];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v45;
    do
    {
      for (m = 0LL; m != v26; m = (char *)m + 1)
      {
        if (*(void *)v45 != v27) {
          objc_enumerationMutation(v24);
        }
        sub_1006C5100( a1,  (uint64_t)[*(id *)(*((void *)&v44 + 1) + 8 * (void)m) unsignedLongLongValue]);
      }

      id v26 = [v24 countByEnumeratingWithState:&v44 objects:v62 count:16];
    }

    while (v26);
  }

  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v29 = [*(id *)(a1 + 160) allKeys];
  id v30 = [v29 countByEnumeratingWithState:&v40 objects:v61 count:16];
  if (v30)
  {
    id v31 = v30;
    uint64_t v32 = *(void *)v41;
    do
    {
      for (n = 0LL; n != v31; n = (char *)n + 1)
      {
        if (*(void *)v41 != v32) {
          objc_enumerationMutation(v29);
        }
        sub_1006C5430( a1,  (uint64_t)[*(id *)(*((void *)&v40 + 1) + 8 * (void)n) unsignedLongLongValue]);
      }

      id v31 = [v29 countByEnumeratingWithState:&v40 objects:v61 count:16];
    }

    while (v31);
  }

  *(void *)(a1 + 160) = 0LL;
  uint64_t v34 = *(int **)(a1 + 192);
  if (v34[2] <= 0)
  {
    *(void *)(a1 + 192) = 0LL;
    goto LABEL_52;
  }

  sub_100AD5D38((uint64_t)v34);
  uint64_t v34 = *(int **)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v34) {
LABEL_52:
  }
    (*(void (**)(int *))(*(void *)v34 + 8LL))(v34);

  *(void *)(a1 + 1++*(_DWORD *)(result + 36) = 0LL;
  uint64_t v35 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  uint64_t v36 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
  }
  int v37 = *(char **)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v37) {
    sub_1006CD248(a1 + 112, v37);
  }
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 1;
}

uint64_t sub_1006C4F34(uint64_t a1, uint64_t a2)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  id v3 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removing Class A timer alarm for id: %llu.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v7 = 134217984;
    uint64_t v8 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing Class A timer alarm for id: %llu.",  &v7);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::removeClassATimerAlarm(uint64_t)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  xpc_activity_unregister( -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.locationd.MotionAlarm_%llu",  a2),  "UTF8String"));
  return 1LL;
}

BOOL sub_1006C5100(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2);
  id v5 = [*(id *)(a1 + 128) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Removing workout event alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing workout event alarm for id: %llu.",  &v13);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    [*(id *)(a1 + 128) removeObjectForKey:v4];
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v7 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unable to find activity alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find activity alarm for id: %llu.",  &v13);
      BOOL v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return v5 != 0LL;
}

BOOL sub_1006C5430(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2);
  id v5 = [*(id *)(a1 + 160) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Removing CardioChange alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing CardioChange alarm for id: %llu.",  &v13);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    [v5 invalidate];
    [*(id *)(a1 + 160) removeObjectForKey:v4];
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v7 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unable to find CardioChange alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find CardioChange alarm for id: %llu.",  &v13);
      BOOL v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return v5 != 0LL;
}

void sub_1006C5768(uint64_t a1, void *a2)
{
  if ((int)[a2 state] <= 11 && (int)objc_msgSend(a2, "state") > 1)
  {
    uint64_t v8 = *(void *)(a1 + 192);
    sub_1010DDBC0(__p, "none");
    sub_100AD5668(v8, (uint64_t *)__p);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    id v9 = objc_msgSend(*(id *)(a1 + 136), "objectForKey:", objc_msgSend(a2, "bundleId"));
    if (v9)
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v10 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = [a2 bundleId];
        uint64_t v12 = sub_101015B40([a2 state]);
        *(_DWORD *)std::stringbuf::string_type buf = 138412546;
        uint64_t v33 = (uint64_t)v11;
        __int16 v34 = 2112;
        uint64_t v35 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Firing alarm on client: %@, current state: %@.",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v16 = qword_101934618;
        id v17 = [a2 bundleId];
        uint64_t v18 = sub_101015B40([a2 state]);
        int v28 = 138412546;
        uint64_t v29 = (uint64_t)v17;
        __int16 v30 = 2112;
        uint64_t v31 = v18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  0LL,  "Firing alarm on client: %@, current state: %@.",  &v28,  22);
        id v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      objc_msgSend(objc_msgSend(v9, "adapter"), "fireAlarm:error:", a2, 100);
    }

    else
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [a2 bundleId];
        uint64_t v15 = sub_101015B40([a2 state]);
        *(_DWORD *)std::stringbuf::string_type buf = 138412546;
        uint64_t v33 = (uint64_t)v14;
        __int16 v34 = 2112;
        uint64_t v35 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unable to fire alarm on client, client is not registered: %@, current state: %@.",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v21 = qword_101934618;
        id v22 = [a2 bundleId];
        uint64_t v23 = sub_101015B40([a2 state]);
        int v28 = 138412546;
        uint64_t v29 = (uint64_t)v22;
        __int16 v30 = 2112;
        uint64_t v31 = v23;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  0LL,  "Unable to fire alarm on client, client is not registered: %@, current state: %@.",  &v28,  22);
        id v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }
    }

    sub_100AD5D38(*(void *)(a1 + 192));
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v4 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      uint64_t v33 = sub_101015B40([a2 state]);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Will not fire due to invalid fire state, current state: %@.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v5 = qword_101934618;
      int v28 = 138412290;
      uint64_t v29 = sub_101015B40([a2 state]);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  1LL,  "Will not fire due to invalid fire state, current state: %@.",  &v28,  12);
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_1006C5CE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006C5D08(uint64_t a1, void *a2)
{
  id v2 = [a2 length];
  if (!v2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v3 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid alarm bundle identifier!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm bundle identifier!",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmNotifier::isBundleValid(NSString *)", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  return v2 != 0LL;
}

uint64_t sub_1006C5EAC(uint64_t result, uint64_t a2, int a3)
{
  if (a3 && a3 != 100)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  return result;
}

uint64_t sub_1006C5ECC( uint64_t a1, unint64_t a2, int a3, unint64_t __val, unsigned int a5, int a6)
{
  id v11 = *(void **)(a1 + 176);
  if (!v11)
  {
LABEL_6:
    std::to_string(&v27, __val);
    double Current = CFAbsoluteTimeGetCurrent();
    id v14 = operator new(0x38uLL);
    uint64_t v15 = v14;
    double v16 = Current + (double)a5;
    double v17 = 1.79769313e308;
    if (a6) {
      double v17 = (double)a5;
    }
    sub_1006B5FBC(v14, &v27, sub_1006C8510, a1, *(void *)(a1 + 40), 1LL, v16, v17, 0.9);
    *(void *)std::stringbuf::string_type buf = __val;
    *(void *)&uint8_t buf[8] = v15;
    sub_1006CD298((uint64_t **)(a1 + 168), (unint64_t *)buf, (uint64_t *)buf);
    uint64_t v18 = *(void *)&buf[8];
    *(void *)&uint8_t buf[8] = 0LL;
    if (v18)
    {
      id v19 = (void *)sub_1006B6010(v18);
      operator delete(v19);
    }

    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v20 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138478851;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = __val;
      __int16 v39 = 1024;
      unsigned int v40 = a5;
      __int16 v41 = 1024;
      int v42 = a6;
      __int16 v43 = 2048;
      double v44 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Saving persistent alarm for client: %{private}@, id: %llu, duration: %u, repeats: %d, fire: %f.",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v28 = 138478851;
      unint64_t v29 = a2;
      __int16 v30 = 2048;
      unint64_t v31 = __val;
      __int16 v32 = 1024;
      unsigned int v33 = a5;
      __int16 v34 = 1024;
      int v35 = a6;
      __int16 v36 = 2048;
      double v37 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Saving persistent alarm for client: %{private}@, id: %llu, duration: %u, repeats: %d, fire: %f.",  &v28,  44);
      id v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addTimeAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    return 1LL;
  }

  while (1)
  {
    unint64_t v12 = v11[4];
    if (v12 <= __val) {
      break;
    }
LABEL_5:
    id v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_6;
    }
  }

  if (v12 < __val)
  {
    ++v11;
    goto LABEL_5;
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v21 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    *(void *)&uint8_t buf[4] = __val;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Time alarm already exists for id: %llu.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v28 = 134217984;
    unint64_t v29 = __val;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Time alarm already exists for id: %llu.",  &v28);
    id v26 = (char *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addTimeAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  return 1LL;
}

void sub_1006C62F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006C6348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, BOOL a6)
{
  if (objc_msgSend( *(id *)(a1 + 152),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4)))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Class A timer alarm already exists for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v17 = 134217984;
      uint64_t v18 = a4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Class A timer alarm already exists for id: %llu.",  &v17);
      unint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    xpc_object_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REPEATING, a6);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_INTERVAL, a5);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_DELAY, a5);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionAlarmNotifier");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1006C86E0;
    handler[3] = &unk_1018268C8;
    handler[4] = v14;
    handler[5] = a4;
    xpc_activity_register( -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.locationd.MotionAlarm_%llu",  a4),  "UTF8String"),  v13,  handler);
    xpc_release(v13);
  }

  return 1LL;
}

uint64_t sub_1006C6644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  switch(a6)
  {
    case 22:
      goto LABEL_16;
    case 23:
      uint64_t v10 = 0LL;
      goto LABEL_15;
    case 24:
      uint64_t v11 = 0LL;
      uint64_t v10 = 1LL;
      goto LABEL_16;
    case 25:
      uint64_t v10 = 1LL;
LABEL_15:
      uint64_t v11 = 1LL;
LABEL_16:
      int v17 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4);
      if ([*(id *)(a1 + 128) objectForKeyedSubscript:v17])
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v18 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          uint64_t v33 = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Workout alarm already exists for id: %llu.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v24 = 134217984;
          uint64_t v25 = a4;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Workout alarm already exists for id: %llu.",  &v24);
          uint64_t v20 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)",  "%s\n",  v19);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      else
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v21 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 138478595;
          uint64_t v33 = a2;
          __int16 v34 = 2048;
          uint64_t v35 = a4;
          __int16 v36 = 2048;
          uint64_t v37 = v11;
          __int16 v38 = 1024;
          int v39 = a5;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Saving workout alarm for client: %{private}@, id: %llu, trigger: %ld duration: %u.",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v24 = 138478595;
          uint64_t v25 = a2;
          __int16 v26 = 2048;
          uint64_t v27 = a4;
          __int16 v28 = 2048;
          uint64_t v29 = v11;
          __int16 v30 = 1024;
          int v31 = a5;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Saving workout alarm for client: %{private}@, id: %llu, trigger: %ld duration: %u.",  &v24,  38);
          uint64_t v23 = (uint8_t *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        objc_msgSend( *(id *)(a1 + 128),  "setObject:forKeyedSubscript:",  -[CLWorkoutAlarm initWithType:dataCollection:]( [CLWorkoutAlarm alloc],  "initWithType:dataCollection:",  v11,  v10),  v17);
      }

      uint64_t result = 1LL;
      break;
    default:
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      unint64_t v12 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unsupported Alarm Type", buf, 2u);
      }

      BOOL v13 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        LOWORD(v24) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unsupported Alarm Type",  &v24,  2);
        double v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

uint64_t sub_1006C6B68( uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4);
  if (v11)
  {
    unint64_t v12 = v11;
    if ([*(id *)(a1 + 160) objectForKeyedSubscript:v11])
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      BOOL v13 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "CardioChange alarm already exists for id: %llu.",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        *(_DWORD *)int v39 = 134217984;
        *(void *)&v39[4] = a4;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "CardioChange alarm already exists for id: %llu.",  v39);
        uint64_t v23 = (std::string *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v22);
        if (v23 != &buf) {
          free(v23);
        }
      }

      return 1LL;
    }

    else
    {
      sub_1010DDBC0(&buf, (char *)[a2 UTF8String]);
      sub_100FE2D54(&buf, (uint64_t)v39);
      double v16 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
      id v17 = [*(id *)(a1 + 40) queue];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_1006C8EB0;
      void v30[3] = &unk_10182FA08;
      v30[4] = a1;
      uint64_t v18 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]( v16,  "initWithTrigger:duration:onQueue:forClient:withHandler:",  a5,  v17,  v39,  v30,  (double)a6);
      BOOL v14 = v18 != 0LL;
      if (v18)
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        id v19 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
          int v54 = a5;
          __int16 v55 = 1024;
          unsigned int v56 = a6;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Saving CardioChange alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.",  (uint8_t *)&buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v31 = 138478595;
          __int16 v32 = a2;
          __int16 v33 = 2048;
          std::string::size_type v34 = a4;
          __int16 v35 = 1024;
          int v36 = a5;
          __int16 v37 = 1024;
          unsigned int v38 = a6;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Saving CardioChange alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.",  &v31,  34);
          uint64_t v27 = (std::string *)v26;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v26);
          if (v27 != &buf) {
            free(v27);
          }
        }

        [*(id *)(a1 + 160) setObject:v18 forKeyedSubscript:v12];
      }

      else
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v20 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to create CardioChange alarm for client: %{private}@, id: %llu.",  (uint8_t *)&buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v31 = 138478083;
          __int16 v32 = a2;
          __int16 v33 = 2048;
          std::string::size_type v34 = a4;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Failed to create CardioChange alarm for client: %{private}@, id: %llu.",  &v31,  22);
          uint64_t v29 = (std::string *)v28;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v28);
          if (v29 != &buf) {
            free(v29);
          }
        }
      }

      if (v52 < 0) {
        operator delete(__p);
      }
      if (v50 < 0) {
        operator delete(v49);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      if (v46 < 0) {
        operator delete(v45);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
      if (v42 < 0) {
        operator delete(v41);
      }
      if (v40 < 0) {
        operator delete(*(void **)v39);
      }
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v15 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Unable to create CardioChange alarm key.",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      *(_WORD *)int v39 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to create CardioChange alarm key.",  v39,  2);
      uint64_t v25 = (std::string *)v24;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v24);
      if (v25 != &buf) {
        free(v25);
      }
    }

    return 0LL;
  }

  return v14;
}

void sub_1006C72B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
}

uint64_t sub_1006C72F0( uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  if (a5 >= 0x1C)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid trigger type!", (uint8_t *)&buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    *(_WORD *)__int16 v41 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid trigger type!",  v41,  2);
    uint64_t v8 = (std::string *)v7;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v7);
LABEL_60:
    if (v8 != &buf) {
      free(v8);
    }
    return 0LL;
  }

  BOOL v14 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4);
  if (!v14)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v18 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Unable to create activity alarm key.",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    *(_WORD *)__int16 v41 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to create activity alarm key.",  v41,  2);
    uint64_t v8 = (std::string *)v27;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v27);
    goto LABEL_60;
  }

  uint64_t v15 = v14;
  if ([*(id *)(a1 + 120) objectForKeyedSubscript:v14])
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    double v16 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Activity alarm already exists for id: %llu.",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      *(_DWORD *)__int16 v41 = 134217984;
      *(void *)&v41[4] = a4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Activity alarm already exists for id: %llu.",  v41);
      __int16 v26 = (std::string *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v25);
      if (v26 != &buf) {
        free(v26);
      }
    }

    return 1LL;
  }

  else
  {
    sub_1010DDBC0(&buf, (char *)[a2 UTF8String]);
    sub_100FE2D54(&buf, (uint64_t)v41);
    uint64_t v20 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
    id v21 = [*(id *)(a1 + 40) queue];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    void v32[2] = sub_1006C88CC;
    void v32[3] = &unk_10182FA08;
    uint64_t v32[4] = a1;
    id v22 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]( v20,  "initWithTrigger:duration:onQueue:forClient:withHandler:",  a5,  v21,  v41,  v32,  (double)a6);
    BOOL v17 = v22 != 0LL;
    if (v22)
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v23 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        int v56 = a5;
        __int16 v57 = 1024;
        unsigned int v58 = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.",  (uint8_t *)&buf,  0x22u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        int v33 = 138478595;
        std::string::size_type v34 = a2;
        __int16 v35 = 2048;
        std::string::size_type v36 = a4;
        __int16 v37 = 1024;
        int v38 = a5;
        __int16 v39 = 1024;
        unsigned int v40 = a6;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.",  &v33,  34);
        uint64_t v29 = (std::string *)v28;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v28);
        if (v29 != &buf) {
          free(v29);
        }
      }

      [*(id *)(a1 + 120) setObject:v22 forKeyedSubscript:v15];
    }

    else
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v24 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Failed to create activity alarm for client: %{private}@, id: %llu.",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        int v33 = 138478083;
        std::string::size_type v34 = a2;
        __int16 v35 = 2048;
        std::string::size_type v36 = a4;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Failed to create activity alarm for client: %{private}@, id: %llu.",  &v33,  22);
        int v31 = (std::string *)v30;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)",  "%s\n",  v30);
        if (v31 != &buf) {
          free(v31);
        }
      }
    }

    if (v54 < 0) {
      operator delete(__p);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
    if (v50 < 0) {
      operator delete(v49);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v42 < 0) {
      operator delete(*(void **)v41);
    }
  }

  return v17;
}

void sub_1006C7B64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
}

uint64_t sub_1006C7BA0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 176);
  id v3 = (uint64_t *)(a1 + 176);
  id v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (uint64_t **)(v3 - 1);
  int v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      int v7 = v4;
    }
    id v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v3 && v7[4] <= a2)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    BOOL v14 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v22 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Removing persistent alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v19 = 134217984;
      unint64_t v20 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing persistent alarm for id: %llu.",  &v19);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    sub_1006B6294(v7[5]);
    sub_1006CD354(v6, v7);
    return 1LL;
  }

  else
  {
LABEL_12:
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v11 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v22 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Unable to find persistent alarm for id: %llu.",  buf,  0xCu);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v19 = 134217984;
      unint64_t v20 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find persistent alarm for id: %llu.",  &v19);
      double v16 = (uint8_t *)v15;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v15);
      if (v16 != buf) {
        free(v16);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1006C7F00(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2);
  id v5 = [*(id *)(a1 + 120) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Removing activity alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing activity alarm for id: %llu.",  &v13);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    [v5 invalidate];
    [*(id *)(a1 + 120) removeObjectForKey:v4];
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v7 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unable to find activity alarm for id: %llu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v13 = 134217984;
      uint64_t v14 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find activity alarm for id: %llu.",  &v13);
      BOOL v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return v5 != 0LL;
}

BOOL sub_1006C8238(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2);
  id v4 = [*(id *)(a1 + 144) objectForKeyedSubscript:v3];
  id v5 = v4;
  if (v4)
  {
    [v4 invalidate];
    [*(id *)(a1 + 144) removeObjectForKey:v3];
  }

  return v5 != 0LL;
}

uint64_t sub_1006C82A0(uint64_t a1, void *a2)
{
  if (!sub_1006C5D08(a1, a2)) {
    return 0LL;
  }
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  id v4 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138477827;
    unint64_t v22 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing all alarms for client: %{private}@.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v19 = 138477827;
    unint64_t v20 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Removing all alarms for client: %{private}@.",  &v19,  12);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionAlarmNotifier::removeAllAlarmsForBundle(NSString *)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  id v5 = sub_1007A8B28(*(void *)(a1 + 112), a2);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  if (!v6) {
    return 1LL;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)v15;
  LODWORD(v9) = 1;
  do
  {
    for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v15 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v9 = v9 & sub_1006C16E0(a1, *(void **)(*((void *)&v14 + 1) + 8LL * (void)i), 0LL);
    }

    id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  }

  while (v7);
  return v9;
}

void sub_1006C8510(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionAlarmNotifier::onPersistentTimerFired",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    id v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionAlarmNotifier::onPersistentTimerFired, event:%{public, location:escape_only }s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_1006CA018(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006C86C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006C86E0(uint64_t a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v3 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v4 = qword_101934618;
      int v7 = 134349056;
      xpc_activity_state_t v8 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  &v7,  12);
      id v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

void sub_1006C88CC(uint64_t a1, uint64_t a2)
{
}

void sub_1006C88D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 120), "allKeysForObject:", a2), "firstObject");
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 192);
      sub_1010DDBC0(__p, "none");
      sub_100AD5668(v5, (uint64_t *)__p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      id v6 = [v4 unsignedLongLongValue];
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v7 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        id v23 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Activity alarm timer fired: %llu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        int v20 = 134217984;
        id v21 = v6;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Activity alarm timer fired: %llu.",  &v20);
        __int128 v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      if (objc_msgSend( *(id *)(a1 + 144),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6)))
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        xpc_activity_state_t v8 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Activity alarm is pending acknowledgment. Not firing alarm.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          LOWORD(v20) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Activity alarm is pending acknowledgment. Not firing alarm.",  &v20,  2);
          __int16 v10 = (uint8_t *)v9;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)",  "%s\n",  v9);
          if (v10 != buf) {
            free(v10);
          }
        }
      }

      else
      {
        sub_1006C9E28(a1, (sqlite3_int64)v6);
      }

      sub_100AD5D38(*(void *)(a1 + 192));
      return;
    }

    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    __int16 v14 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid alarm identifier.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm identifier.",  &v20,  2);
      int v13 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)",  "%s\n",  v15);
LABEL_36:
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v11 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm timer.",  &v20,  2);
      int v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)",  "%s\n",  v12);
      goto LABEL_36;
    }
  }

void sub_1006C8E8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006C8EB0(uint64_t a1)
{
  return sub_1006C31AC(*(void *)(a1 + 32));
}

uint64_t sub_1006C8EB8(uint64_t a1)
{
  uint64_t v2 = (uint64_t)operator new(0x38uLL);
  sub_1007A7B5C(v2, 0LL);
  uint64_t v4 = (uint64_t *)(a1 + 112);
  id v3 = *(char **)(a1 + 112);
  *(void *)(a1 + 112) = v2;
  if (v3)
  {
    sub_1006CD248(a1 + 112, v3);
    uint64_t v2 = *v4;
  }

  if (sub_1007A7B60(v2))
  {
    obint j = sub_1007A88AC(*v4);
    id v5 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    id v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      id v65 = -[NSMutableArray count](obj, "count");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restoring alarms: %lu.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v41 = qword_101934618;
      int v62 = 134217984;
      id v63 = -[NSMutableArray count](obj, "count");
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v41,  0LL,  "Restoring alarms: %lu.",  &v62);
      __int16 v43 = (uint8_t *)v42;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::restoreAlarms()", "%s\n", v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v56,  v61,  16LL);
    if (v7)
    {
      uint64_t v8 = *(void *)v57;
      char v9 = 1;
      do
      {
        __int16 v10 = 0LL;
        do
        {
          if (*(void *)v57 != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)v10);
          if ((int)[v11 state] < 12)
          {
            if ([v11 type] == 15)
            {
              id v12 = [v11 bundleId];
              [v11 name];
              id v13 = [v11 alarmId];
              unsigned int v14 = [v11 duration];
              int v15 = [v11 repeats];
              sub_1006C5ECC(a1, (unint64_t)v12, v16, (unint64_t)v13, v14, v15);
            }

            else if ([v11 type] == 19)
            {
              [v11 bundleId];
              [v11 name];
              id v17 = [v11 alarmId];
              unsigned int v18 = [v11 duration];
              unsigned __int8 v19 = [v11 repeats];
              sub_1006C6348(a1, v20, v21, (uint64_t)v17, v18, v19);
            }

            else if ([v11 type] == 22 {
                   || [v11 type] == 23
            }
                   || [v11 type] == 24
                   || [v11 type] == 25)
            {
              id v22 = [v11 bundleId];
              [v11 name];
              id v23 = [v11 alarmId];
              int v24 = [v11 duration];
              int v25 = [v11 type];
              char v9 = sub_1006C6644(a1, (uint64_t)v22, v26, (uint64_t)v23, v24, v25);
            }

            else
            {
              BOOL v27 = [v11 type] == 26;
              id v50 = [v11 bundleId];
              [v11 name];
              id v28 = [v11 alarmId];
              id v29 = [v11 type];
              unsigned int v31 = [v11 duration];
              if (v27) {
                char v32 = sub_1006C6B68(a1, v50, v30, (std::string::size_type)v28, (uint64_t)v29, v31);
              }
              else {
                char v32 = sub_1006C72F0(a1, v50, v30, (std::string::size_type)v28, (uint64_t)v29, v31);
              }
              v9 &= v32;
            }
          }

          else
          {
            [v5 addObject:v11];
          }

          __int16 v10 = (char *)v10 + 1;
        }

        while (v7 != v10);
        id v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v56,  v61,  16LL);
        id v7 = v33;
      }

      while (v33);
    }

    else
    {
      char v9 = 1;
    }

    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    __int16 v35 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      id v36 = [v5 count];
      *(_DWORD *)std::string buf = 134217984;
      id v65 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Removing expired alarms: %lu.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v46 = qword_101934618;
      id v47 = [v5 count];
      int v62 = 134217984;
      id v63 = v47;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v46,  0LL,  "Removing expired alarms: %lu.",  &v62);
      __int128 v49 = (uint8_t *)v48;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::restoreAlarms()", "%s\n", v48);
      if (v49 != buf) {
        free(v49);
      }
    }

    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    id v37 = [v5 countByEnumeratingWithState:&v52 objects:v60 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v53;
      do
      {
        for (uint64_t i = 0LL; i != v37; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v38) {
            objc_enumerationMutation(v5);
          }
          sub_1006C16E0(a1, *(void **)(*((void *)&v52 + 1) + 8LL * (void)i), 0LL);
        }

        id v37 = [v5 countByEnumeratingWithState:&v52 objects:v60 count:16];
      }

      while (v37);
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    std::string::size_type v34 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "Unable to access database after first unlock!",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(v62) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  17LL,  "Unable to access database after first unlock!",  &v62,  2);
      __int128 v45 = (uint8_t *)v44;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmNotifier::restoreAlarms()", "%s\n", v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    char v9 = 0;
  }

  return v9 & 1;
}

void sub_1006C96AC(_Unwind_Exception *a1)
{
}

void sub_1006C96C8(uint64_t a1, void *a2)
{
  id v4 = [a2 bundleId];
  if ((sub_1006CA830(a1, v4) & 1) != 0)
  {
    if ((int)[a2 state] > 11 || (int)objc_msgSend(a2, "state") <= 0)
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      id v12 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 138412290;
        uint64_t v37 = sub_101015B40([a2 state]);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid fire state: %@.", buf, 0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v15 = qword_101934618;
        int v32 = 138412290;
        uint64_t v33 = sub_101015B40([a2 state]);
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  16LL,  "Invalid fire state: %@.",  &v32,  12);
        id v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }
    }

    else
    {
      uint64_t v5 = *(void *)(a1 + 192);
      sub_1010DDBC0(__p, "none");
      sub_100AD5668(v5, (uint64_t *)__p);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      id v6 = [a2 state];
      unsigned int v7 = v6;
      sub_1006CA650((uint64_t)v6, a2);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v8 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = sub_101015B40(v7);
        uint64_t v10 = sub_101015B40([a2 state]);
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v37 = v9;
        __int16 v38 = 2112;
        uint64_t v39 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Previous alarm state: %@, current state: %@.",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v18 = qword_101934618;
        uint64_t v19 = sub_101015B40(v7);
        uint64_t v20 = sub_101015B40([a2 state]);
        int v32 = 138412546;
        uint64_t v33 = v19;
        __int16 v34 = 2112;
        uint64_t v35 = v20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "Previous alarm state: %@, current state: %@.",  &v32,  22);
        id v22 = (uint8_t *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)",  "%s\n",  v21);
        if (v22 != buf) {
          free(v22);
        }
      }

      if ((int)[a2 state] < 12)
      {
        if ((sub_1007A7D1C(*(void *)(a1 + 112), a2) & 1) == 0)
        {
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          id v13 = (os_log_s *)qword_101934618;
          if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
          {
            id v14 = [a2 alarmId];
            *(_DWORD *)std::string buf = 134217984;
            uint64_t v37 = (uint64_t)v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Failed to update state for the alarm: %llu!",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934610 != -1) {
              dispatch_once(&qword_101934610, &stru_101849AF8);
            }
            uint64_t v25 = qword_101934618;
            id v26 = [a2 alarmId];
            int v32 = 134217984;
            uint64_t v33 = (uint64_t)v26;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  17LL,  "Failed to update state for the alarm: %llu!",  &v32);
            id v28 = (uint8_t *)v27;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)",  "%s\n",  v27);
            if (v28 != buf) {
              free(v28);
            }
          }
        }

        sub_1006CAA60(a1, v4);
        sub_1006C5768(a1, a2);
        sub_100AD5D38(*(void *)(a1 + 192));
      }

      else
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        uint64_t v11 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138477827;
          uint64_t v37 = (uint64_t)v4;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Maximum launch attempts reached for: %{private}@.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          int v32 = 138477827;
          uint64_t v33 = (uint64_t)v4;
          LODWORD(v29) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Maximum launch attempts reached for: %{private}@.",  &v32,  v29);
          int v24 = (uint8_t *)v23;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)",  "%s\n",  v23);
          if (v24 != buf) {
            free(v24);
          }
        }

        sub_1006C16E0(a1, a2, 0LL);
        sub_100AD5D38(*(void *)(a1 + 192));
      }
    }
  }

  else
  {
    sub_1006C82A0(a1, v4);
  }

void sub_1006C9E04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006C9E28(uint64_t a1, sqlite3_int64 a2)
{
  id v4 = sub_1007A8E80(*(void *)(a1 + 112), a2);
  if (v4)
  {
    sub_1006C96C8(a1, v4);
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v5 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      sqlite3_int64 v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to find alarm for id: %llu.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      int v8 = 134217984;
      sqlite3_int64 v9 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to find alarm for id: %llu.",  &v8);
      unsigned int v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionAlarmNotifier::fireAlarmWithRetry(uint64_t)", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_1006CA018(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1006B623C(a2, (uint64_t)&__str);
    std::string::size_type size = __str.__r_.__value_.__s.__size_;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v4 = *(void *)(a1 + 192);
      sub_1010DDBC0(__p, "none");
      sub_100AD5668(v4, (uint64_t *)__p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      sqlite3_int64 v5 = std::stoull(&__str, 0LL, 10);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      id v6 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        sqlite3_int64 v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Persistent timer fired id: %llu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        int v21 = 134217984;
        sqlite3_int64 v22 = v5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Persistent timer fired id: %llu.",  &v21);
        id v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      if (objc_msgSend( *(id *)(a1 + 144),  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v5)))
      {
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        unsigned int v7 = (os_log_s *)qword_101934618;
        if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Persistent timer is pending acknowledgment. Not firing alarm.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934610 != -1) {
            dispatch_once(&qword_101934610, &stru_101849AF8);
          }
          LOWORD(v21) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Persistent timer is pending acknowledgment. Not firing alarm.",  &v21,  2);
          sqlite3_int64 v9 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)",  "%s\n",  v8);
          if (v9 != buf) {
            free(v9);
          }
        }
      }

      else
      {
        sub_1006C9E28(a1, v5);
      }

      sub_100AD5D38(*(void *)(a1 + 192));
    }

    else
    {
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      id v13 = (os_log_s *)qword_101934618;
      if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unexpected alarm identifier.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934610 != -1) {
          dispatch_once(&qword_101934610, &stru_101849AF8);
        }
        LOWORD(v21) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unexpected alarm identifier.",  &v21,  2);
        uint64_t v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Invalid alarm timer.",  &__str,  2);
      id v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_1006CA604( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006CA650(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 state];
  uint64_t v4 = v3 + 1;
  if (v3 == 12)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    sqlite3_int64 v5 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      id v14 = [a2 alarmId];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Alarm state is rolling over for alarm: %llu.",  buf,  0xCu);
    }

    BOOL v6 = sub_1002921D0(115, 0);
    uint64_t v4 = 0LL;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      uint64_t v8 = qword_101934618;
      int v11 = 134217984;
      id v12 = [a2 alarmId];
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  17LL,  "Alarm state is rolling over for alarm: %llu.",  &v11);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionAlarmNotifier::incrementState(CMMotionAlarm *)", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
      uint64_t v4 = 0LL;
    }
  }

  return [a2 setState:v4];
}

uint64_t sub_1006CA830(uint64_t a1, void *a2)
{
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLAppMonitor");
  unsigned int v6 = objc_msgSend(objc_msgSend(a2, "pathExtension"), "isEqualToString:", @"watchkitextension");
  id v7 = a2;
  if (v6) {
    id v7 = objc_msgSend(a2, "stringByDeletingPathExtension", a2);
  }
  id v4 = [v5 syncgetIsApplicationInstalledLocally:v7];
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  uint64_t v8 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138478083;
    id v17 = a2;
    __int16 v18 = 1024;
    int v19 = (int)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Application %{private}@ installed: %d.",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v12 = 138478083;
    id v13 = a2;
    __int16 v14 = 1024;
    int v15 = (int)v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Application %{private}@ installed: %d.",  &v12,  18);
    int v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::isApplicationInstalled(NSString *)", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return (uint64_t)v4;
}

uint64_t sub_1006CAA60(uint64_t a1, void *a2)
{
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  id v4 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138477827;
    __int16 v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Launching application: %{private}@.", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    int v11 = 138477827;
    int v12 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Launching application: %{private}@.",  &v11,  12);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmNotifier::launchApplication(NSString *)", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  id v5 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLApplicationLifecycleManager");
  unsigned int v6 = objc_msgSend(objc_msgSend(a2, "pathExtension"), "isEqualToString:", @"watchkitextension");
  id v7 = a2;
  if (v6) {
    id v7 = objc_msgSend(a2, "stringByDeletingPathExtension", a2);
  }
  [v5 launchApplication:v7 requiringAuthForServiceMask:0];
  [v5 launchDaemon:a2];
  return 1LL;
}

void sub_1006CAC68(uint64_t a1, void *a2)
{
  id v4 = [a2 alarmId];
  id v5 = +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [a2 alarmId]);
  id v6 = [*(id *)(a1 + 144) objectForKeyedSubscript:v5];
  if (!v6)
  {
    id v6 = [*(id *)(a1 + 40) newTimer];
    [*(id *)(a1 + 144) setObject:v6 forKeyedSubscript:v5];
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1006CAD80;
  void v8[3] = &unk_101830538;
  _DWORD v8[4] = a1;
  v8[5] = v4;
  [v6 setHandler:v8];
  else {
    unsigned int v7 = [a2 duration];
  }
  objc_msgSend(v6, "setNextFireDelay:", (double)((objc_msgSend(a2, "state") - 1) * v7));
}

uint64_t sub_1006CAD80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_101849AF8);
  }
  unsigned int v3 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-firing alarm: %llu.", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 134217984;
    uint64_t v10 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Re-firing alarm: %llu.",  &v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::setupRetryTimerForAlarm(CMMotionAlarm *)_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return sub_1006C9E28(v2, *(void *)(a1 + 40));
}

id sub_1006CAF40(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(120.0, a2, 19, *(void **)(a1 + 32), 300LL, 0LL, 0LL, 0LL, 0, 0LL);
}

id sub_1006CAF88(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) silo];
  if (*a3 == 8)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    uint64_t v9 = a4 + 8;
    uint64_t v8 = v10;
    else {
      uint64_t v11 = v8;
    }
    return (id)sub_1006C82A0( a1,  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  }

  return result;
}

void sub_1006CAFFC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    int v7 = *(unsigned __int8 *)(a4 + 4);
    *(_BYTE *)(a1 + 109) = v7;
    if (v7)
    {
      [*(id *)(*(void *)(a1 + 208) + 16) unregister:*(void *)(*(void *)(a1 + 208) + 8) forNotification:1];
      sub_1006C8EB8(a1);
    }

    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_101849AF8);
    }
    uint64_t v8 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 109)) {
        uint64_t v9 = "Yes";
      }
      else {
        uint64_t v9 = "No";
      }
      *(_DWORD *)std::string buf = 136380675;
      int v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device unlocked since boot: %{private}s.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_101849AF8);
      }
      if (*(_BYTE *)(a1 + 109)) {
        uint64_t v10 = "Yes";
      }
      else {
        uint64_t v10 = "No";
      }
      int v13 = 136380675;
      __int16 v14 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Device unlocked since boot: %{private}s.",  &v13,  12);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notific ation &, const CLDataProtectionManager_Type::NotificationData &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void *sub_1006CB21C(void *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    uint64_t v4 = (uint64_t)result;
    id v5 = *(id *)(a4 + 16);
    unint64_t v6 = *(void *)(a4 + 112);
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    int v7 = (void *)result[16];
    id result = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = *(void *)v26;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)v10);
          id v12 = [*(id *)(v4 + 128) objectForKey:v11];
          if ([v12 eventType] == v5)
          {
            unsigned __int8 v13 = [v12 eligibleForDataCollection];
            if (v6 <= 0x18 && ((1LL << v6) & 0x10F803E) != 0)
            {
              if ((v13 & 1) == 0) {
                goto LABEL_30;
              }
            }

            else if ((v13 & 1) != 0)
            {
              goto LABEL_30;
            }

            uint64_t v14 = *(void *)(v4 + 192);
            sub_1010DDBC0(__p, "none");
            sub_100AD5668(v14, (uint64_t *)__p);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
            if ([*(id *)(v4 + 144) objectForKeyedSubscript:v11])
            {
              if (qword_101934610 != -1) {
                dispatch_once(&qword_101934610, &stru_101849AF8);
              }
              int v15 = (os_log_s *)qword_101934618;
              if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Workout alarm is pending acknowledgment. Not firing alarm.",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934610 != -1) {
                  dispatch_once(&qword_101934610, &stru_101849AF8);
                }
                __int16 v22 = 0;
                LODWORD(v21) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  2LL,  "Workout alarm is pending acknowledgment. Not firing alarm.",  &v22,  v21);
                id v17 = (uint8_t *)v16;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::N otification &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v16);
                if (v17 != buf) {
                  free(v17);
                }
              }
            }

            else
            {
              if (qword_101934610 != -1) {
                dispatch_once(&qword_101934610, &stru_101849AF8);
              }
              __int16 v18 = (os_log_s *)qword_101934618;
              if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Firing workout alarm with with event type",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934610 != -1) {
                  dispatch_once(&qword_101934610, &stru_101849AF8);
                }
                __int16 v22 = 0;
                LODWORD(v21) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  0LL,  "Firing workout alarm with with event type",  &v22,  v21);
                uint64_t v20 = (uint8_t *)v19;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::N otification &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v19);
                if (v20 != buf) {
                  free(v20);
                }
              }

              sub_1006C9E28(v4, (sqlite3_int64)[v11 unsignedLongLongValue]);
            }

            sub_100AD5D38(*(void *)(v4 + 192));
          }

void sub_1006CB634( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1006CB658@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_1006CB6D0()
{
  return 1LL;
}

uint64_t sub_1006CB6D8()
{
  return 1LL;
}

void sub_1006CB6E0(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
      uint64_t v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101849AD8);
        }
        id v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        id v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        uint64_t v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::removeClient( int) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::Notification Data, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_1006CB954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101939B70);
}

uint64_t sub_1006CB968(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        unsigned __int8 v13 = (uint64_t *)v7;
      }
      else {
        unsigned __int8 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          char v24 = (uint64_t *)v18;
        }
        else {
          char v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          id v36 = sub_1006CD3BC(buf);
          sub_1006CD43C((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101939B71;
        HIDWORD(v40) = v17;
        *(void *)std::string buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        char v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        uint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v37 = (void *)(a1 + 8);
    *(_DWORD *)__int16 v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    uint64_t v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::registerForNotifi cation(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionAlarm_Type::Notification , NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_1006CBDC4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      char v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::clientRegistere d(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotion Alarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1006CC044(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        unsigned __int8 v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            unsigned __int8 v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101849AD8);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101849AD8);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::unreg isterForNotification(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_1006CC3CC(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(_BYTE **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  *a3 = *v11;
  return 1LL;
}

uint64_t sub_1006CC42C(uint64_t a1, int *a2, char *a3)
{
  int v6 = operator new(0x20uLL);
  v6[2] = 0LL;
  void *v6 = off_101849C48;
  v6[1] = 0LL;
  char v7 = *a3;
  *((void *)&v14 + 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v15 = &v13;
  int v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  BOOL v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_1006CC500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1006CC514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v5,  a3,  a4,  0LL);
}

void sub_1006CC54C(uint64_t a1, unsigned int *a2, _BYTE *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      id v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)float v71 = &v71[8];
      memset(&v71[8], 0, 24);
      char v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x20uLL);
      v27[2] = 0LL;
      *__int16 v27 = off_101849C48;
      v27[1] = 0LL;
      *((_BYTE *)v27 + 24) = *a3;
      *(void *)std::string buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_1006CDD88(a3);
    if (a5 == -1)
    {
      sub_1006CDE08((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          uint64_t v37 = (uint64_t *)v33;
        }
        else {
          uint64_t v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          __int16 v43 = (unint64_t *)v38;
        }
        else {
          __int16 v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        id v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101849AD8);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v46 = v71;
          }
          else {
            uint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101849AD8);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int128 v49 = __p;
          }
          else {
            __int128 v49 = (void **)__p[0];
          }
          *(_DWORD *)float v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int128 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::notifyClien tsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLMotionAl arm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char , RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      id v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      __int128 v52 = v40 + 3;
      __int128 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      __int128 v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          __int128 v59 = v53;
        }
        else {
          __int128 v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          __int128 v56 = v53;
        }
        __int128 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_1006CD43C((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_1006CCB84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1006CCBD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [ Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, No tificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101849AD8);
    }
    char v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [ Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, No tificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101849AD8);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101849AD8);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listCli ents() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_1006CD178(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006CD1A4(id a1)
{
  qword_101934618 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

void sub_1006CD1D0(id a1)
{
  qword_101934768 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_1006CD1FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006CD1FC(a1, *a2);
    sub_1006CD1FC(a1, a2[1]);
    sub_100416D9C(a2 + 5, 0LL);
    operator delete(a2);
  }

void sub_1006CD248(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v3 = *((void *)__p + 6);
    *((void *)__p + 6) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    if (__p[39] < 0) {
      operator delete(*((void **)__p + 2));
    }
    operator delete(__p);
  }

uint64_t *sub_1006CD298(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    a3[1] = 0LL;
    _DWORD v10[4] = v11;
    v10[5] = v12;
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t *sub_1006CD354(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000087E8(a1, a2);
  sub_100416D9C(a2 + 5, 0LL);
  operator delete(a2);
  return v3;
}

void sub_1006CD390(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_1006CD3BC(_BYTE *a1)
{
  uint64_t v2 = operator new(1uLL);
  *uint64_t v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_1006CD518;
  unint64_t v7 = &unk_10181D3D0;
  int v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_1006CD43C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    unint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_1006CD528(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    uint64_t v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_1006CD518(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_1006CD528(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppEncodableDataContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1006CD5A0(a1);
  }
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_1006CD928(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1006CD5A0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1006CDCD4((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010130E71ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010130E71ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  unint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_1006CD928(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130E71ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010130E71ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101849C18);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  unint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_1006CDCD4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D3818))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1) {
      sub_1012436DC();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_1006CDD48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101849C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006CDD5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101849C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

CLCppContainer *sub_1006CDD88(_BYTE *a1)
{
  id v2 = operator new(1uLL);
  *id v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_1006CE1DC;
  unint64_t v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_1006CDE08(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        id v13 = sub_1006CD528(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          unint64_t v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              id v50 = v19;
              sub_1006CD43C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              id v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101849AD8);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101849AD8);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int128 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::invokeClients WithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

void sub_1006CE1DC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_1006CE1EC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10130E680;
      v1[3] = unk_10130E690;
      v1[4] = xmmword_10130E6A0;
      v1[0] = xmmword_10130E660;
      v1[1] = unk_10130E670;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1006CE2C0(_Unwind_Exception *a1)
{
}

void sub_1006CE2D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1006CE33C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1006CE3B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1006CE3C8(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  double v12 = a4;
  sub_100400554(a1, a3, &v12);
  *(void *)a1 = off_101849C98;
  sub_1010DDBC0((void *)(a1 + 232), a2);
  sub_100B14CF0((void *)(a1 + 256), a1 + 64, 0LL);
  if (sub_1003C1048(a1 + 64))
  {
    int v6 = (char *)(a1 + 232);
    sub_1003B59A0(a1 + 64, v6, (const char **)&qword_101997CC8, 0LL, 0);
    sub_100400684(a1);
    sub_1006CE620();
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849CC8);
    }
    unint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849CC8);
      }
      __int16 v11 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Database is not valid; not initializing",
        &v11,
        2);
      int v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCdmaCellLocationDatabase::CLCdmaCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  return a1;
}

void sub_1006CE5E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1006CE620()
{
  *(void *)((char *)v2
  v2[2] = v0;
  if (v4 < 0) {
    operator delete((void *)v3[8]);
  }
  std::streambuf::~streambuf(v3);
  return std::ios::~ios(&v5);
}

uint64_t sub_1006CE6B4(uint64_t a1)
{
  *(void *)a1 = off_101849C98;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101849CC8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Delete CLCdmaCellLocationDatabase", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849CC8);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Delete CLCdmaCellLocationDatabase",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLCdmaCellLocationDatabase::~CLCdmaCellLocationDatabase()",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_10040063C(a1);
  return a1;
}

void sub_1006CE86C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_1006CE87C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1006CE6B4(a1);
  operator delete(v1);
}

char *sub_1006CE890@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 29), *((void *)result + 30));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(void *)(a2 + 16) = *((void *)result + 31);
  return result;
}

BOOL sub_1006CE8BC(uint64_t a1, int *a2, uint64_t a3)
{
  BOOL result = sub_1006CE930(a1, a2, &v8);
  if (result)
  {
    BOOL result = sub_100401610(a1, &v8, a3);
    if (result)
    {
      if (a2[11] == -1) {
        int v7 = 7;
      }
      else {
        int v7 = 6;
      }
      *(_DWORD *)(a3 + 96) = v7;
      *(_DWORD *)(a3 + 12_Block_object_dispose(va, 8) = 50;
      return 1LL;
    }
  }

  return result;
}

BOOL sub_1006CE930(uint64_t a1, int *a2, sqlite3_int64 *a3)
{
  int v6 = sub_10000CF44(&v70, (uint64_t)"SELECT ", 7LL);
  size_t v7 = strlen("ROWID");
  sqlite3_int64 v8 = sub_10000CF44(v6, (uint64_t)"ROWID", v7);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)" FROM ", 6LL);
  int v10 = (const char *)(a1 + 232);
  size_t v11 = strlen(v10);
  double v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  id v13 = sub_10000CF44(v12, (uint64_t)" WHERE ", 7LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)"MCC", 3LL);
  unint64_t v15 = sub_10000CF44(v14, (uint64_t)"=? AND ", 7LL);
  int v16 = sub_10000CF44(v15, (uint64_t)"SID", 3LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)"=? AND ", 7LL);
  int v18 = sub_10000CF44(v17, (uint64_t)"NID", 3LL);
  BOOL v19 = sub_10000CF44(v18, (uint64_t)"=? AND ", 7LL);
  int v20 = sub_10000CF44(v19, (uint64_t)"BSID", 4LL);
  BOOL v21 = sub_10000CF44(v20, (uint64_t)"=? AND ", 7LL);
  int v22 = sub_10000CF44(v21, (uint64_t)"ZONEID", 6LL);
  int v23 = sub_10000CF44(v22, (uint64_t)"=? AND ", 7LL);
  BOOL v24 = sub_10000CF44(v23, (uint64_t)"BANDCLASS", 9LL);
  int v25 = sub_10000CF44(v24, (uint64_t)"=? AND ", 7LL);
  int v26 = sub_10000CF44(v25, (uint64_t)"CHANNEL", 7LL);
  uint64_t v27 = sub_10000CF44(v26, (uint64_t)"=? AND ", 7LL);
  int v28 = sub_10000CF44(v27, (uint64_t)"PNOFFSET", 8LL);
  sub_10000CF44(v28, (uint64_t)"=?", 2LL);
  std::stringbuf::str((std::stringbuf::string_type *)v90, &v71);
  if (v90[23] >= 0) {
    uint64_t v29 = v90;
  }
  else {
    uint64_t v29 = *(char **)v90;
  }
  sub_1003C0D54(a1 + 64, v29, &v73);
  uint64_t v30 = v73;
  uint64_t v73 = 0LL;
  if ((v90[23] & 0x80000000) != 0) {
    operator delete(*(void **)v90);
  }
  BOOL v31 = (sqlite3_stmt *)sub_100019240(v30);
  if (sub_1003C28BC(v31, 1, *a2)
    && (int v32 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v32, 2, a2[8]))
    && (uint64_t v33 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v33, 3, a2[9]))
    && (uint64_t v34 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v34, 4, a2[11]))
    && (int v35 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v35, 5, a2[10]))
    && (uint64_t v36 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v36, 6, a2[12]))
    && (int v37 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v37, 7, a2[13]))
    && (BOOL v38 = (sqlite3_stmt *)sub_100019240(v30), sub_1003C28BC(v38, 8, a2[14])))
  {
    int v39 = (sqlite3_stmt *)sub_100019240(v30);
    int v40 = sqlite3_step(v39);
    BOOL v41 = v40 == 100;
    if (v40 == 100)
    {
      BOOL v42 = (sqlite3_stmt *)sub_100019240(v30);
      *a3 = sqlite3_column_int64(v42, 0);
    }

    __int16 v43 = (sqlite3_stmt *)sub_100019240(v30);
    sqlite3_reset(v43);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849CC8);
    }
    BOOL v44 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v45 = *a2;
      int v46 = a2[58];
      int v47 = a2[8];
      int v48 = a2[9];
      int v50 = a2[10];
      int v49 = a2[11];
      int v51 = a2[12];
      int v52 = a2[13];
      int v53 = a2[14];
      *(_DWORD *)__int16 v90 = 67111168;
      *(_DWORD *)&v90[4] = v45;
      *(_WORD *)&v90[8] = 1024;
      *(_DWORD *)&v90[10] = v46;
      *(_WORD *)&v90[14] = 1024;
      *(_DWORD *)&v90[16] = v47;
      *(_WORD *)&v90[20] = 1024;
      *(_DWORD *)&v90[22] = v48;
      __int16 v91 = 1024;
      int v92 = v49;
      __int16 v93 = 1024;
      int v94 = v50;
      __int16 v95 = 1024;
      int v96 = v51;
      __int16 v97 = 1024;
      int v98 = v52;
      __int16 v99 = 1024;
      int v100 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_FAULT,  "GET could not bind %d %d %d %d %d %d %d %d %d",  v90,  0x38u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(v90, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849CC8);
      }
      int v57 = *a2;
      int v58 = a2[58];
      int v59 = a2[8];
      int v60 = a2[9];
      int v62 = a2[10];
      int v61 = a2[11];
      int v63 = a2[12];
      int v64 = a2[13];
      int v65 = a2[14];
      LODWORD(v73) = 67111168;
      HIDWORD(v73) = v57;
      __int16 v74 = 1024;
      int v75 = v58;
      __int16 v76 = 1024;
      int v77 = v59;
      __int16 v78 = 1024;
      int v79 = v60;
      __int16 v80 = 1024;
      int v81 = v61;
      __int16 v82 = 1024;
      int v83 = v62;
      __int16 v84 = 1024;
      int v85 = v63;
      __int16 v86 = 1024;
      int v87 = v64;
      __int16 v88 = 1024;
      int v89 = v65;
      uint64_t v66 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v90,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "GET could not bind %d %d %d %d %d %d %d %d %d",  &v73,  56,  v67,  v68,  v69,  v70,  LODWORD(v71.__vftable),  LODWORD(v71.__loc_.__locale_),  LODWORD(v71.__binp_));
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCdmaCellLocationDatabase::getLocation(const CLTelephonyService_Type::CdmaCell &, sqlite3_int64 &)",  "%s\n",  v66);
      if (v66 != v90) {
        free(v66);
      }
    }

    __int16 v54 = (sqlite3_stmt *)sub_100019240(v30);
    sqlite3_reset(v54);
    BOOL v41 = 0LL;
  }

  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  *(uint64_t *)((char *)&v68
  uint64_t v70 = v55;
  std::streambuf::~streambuf(&v71);
  std::ios::~ios(&v72);
  return v41;
}

void sub_1006CEF04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1006CEF5C(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (uint64_t *)(a1 + 256);
  if (sub_100B14D64((void *)(a1 + 256)))
  {
LABEL_13:
    sub_100B14CF8(v6, &v65);
    uint64_t v30 = (sqlite3_stmt *)sub_100019240(v65);
    if (sub_1003C28BC(v30, 1, *a2)
      && (BOOL v31 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v31, 2, a2[8]))
      && (int v32 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v32, 3, a2[9]))
      && (uint64_t v33 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v33, 4, a2[11]))
      && (uint64_t v34 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v34, 5, a2[10]))
      && (int v35 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v35, 6, a2[12]))
      && (uint64_t v36 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v36, 7, a2[13]))
      && (int v37 = (sqlite3_stmt *)sub_100019240(v65), sub_1003C28BC(v37, 8, a2[14])))
    {
      BOOL v38 = (sqlite3_stmt *)sub_100019240(v65);
      sub_1003BB2BC(a1 + 64, v38);
      sqlite3_int64 v66 = sub_1003C1068(a1 + 64);
      uint64_t v39 = sub_100401CE8((uint64_t *)a1, &v66, a3);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849CC8);
      }
      int v40 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        int v41 = *a2;
        int v42 = a2[58];
        int v43 = a2[8];
        int v44 = a2[9];
        int v46 = a2[10];
        int v45 = a2[11];
        int v47 = a2[12];
        int v48 = a2[13];
        int v49 = a2[14];
        *(_DWORD *)int v67 = 67111168;
        *(_DWORD *)&v67[4] = v41;
        *(_WORD *)&v67[8] = 1024;
        *(_DWORD *)&v67[10] = v42;
        *(_WORD *)&v67[14] = 1024;
        *(_DWORD *)&v67[16] = v43;
        *(_WORD *)&v67[20] = 1024;
        *(_DWORD *)&v67[22] = v44;
        __int16 v68 = 1024;
        int v69 = v45;
        __int16 v70 = 1024;
        int v71 = v46;
        __int16 v72 = 1024;
        int v73 = v47;
        __int16 v74 = 1024;
        int v75 = v48;
        __int16 v76 = 1024;
        int v77 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "SET could not bind %d %d %d %d %d %d %d %d %d",  v67,  0x38u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(v67, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101849CC8);
        }
        int v54 = *a2;
        int v55 = a2[58];
        int v56 = a2[8];
        int v57 = a2[9];
        int v59 = a2[10];
        int v58 = a2[11];
        int v60 = a2[12];
        int v61 = a2[13];
        int v62 = a2[14];
        LODWORD(v7_Block_object_dispose(va, 8) = 67111168;
        HIDWORD(v7_Block_object_dispose(va, 8) = v54;
        __int16 v79 = 1024;
        int v80 = v55;
        __int16 v81 = 1024;
        LODWORD(v82) = v56;
        WORD2(v82) = 1024;
        *(_DWORD *)((char *)&v82 + 6) = v57;
        WORD5(v82) = 1024;
        HIDWORD(v82) = v58;
        __int16 v83 = 1024;
        int v84 = v59;
        __int16 v85 = 1024;
        int v86 = v60;
        __int16 v87 = 1024;
        int v88 = v61;
        __int16 v89 = 1024;
        int v90 = v62;
        int v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v67,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "SET could not bind %d %d %d %d %d %d %d %d %d",  &v78,  56,  v65,  v66);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)",  "%s\n",  v63);
        if (v63 != v67) {
          free(v63);
        }
      }

      uint64_t v39 = 0LL;
    }

    uint64_t v50 = v65;
    uint64_t v65 = 0LL;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
    }
    return v39;
  }

  sub_10000CE18((uint64_t)&v78);
  size_t v7 = sub_10000CF44(&v82, (uint64_t)"INSERT OR REPLACE INTO ", 23LL);
  sqlite3_int64 v8 = (const char *)(a1 + 232);
  size_t v9 = strlen(v8);
  int v10 = sub_10000CF44(v7, (uint64_t)v8, v9);
  size_t v11 = sub_10000CF44(v10, (uint64_t)" (", 2LL);
  double v12 = sub_10000CF44(v11, (uint64_t)"MCC", 3LL);
  id v13 = sub_10000CF44(v12, (uint64_t)", ", 2LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)"SID", 3LL);
  unint64_t v15 = sub_10000CF44(v14, (uint64_t)", ", 2LL);
  int v16 = sub_10000CF44(v15, (uint64_t)"NID", 3LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)", ", 2LL);
  int v18 = sub_10000CF44(v17, (uint64_t)"BSID", 4LL);
  BOOL v19 = sub_10000CF44(v18, (uint64_t)", ", 2LL);
  int v20 = sub_10000CF44(v19, (uint64_t)"ZONEID", 6LL);
  BOOL v21 = sub_10000CF44(v20, (uint64_t)", ", 2LL);
  int v22 = sub_10000CF44(v21, (uint64_t)"BANDCLASS", 9LL);
  int v23 = sub_10000CF44(v22, (uint64_t)", ", 2LL);
  BOOL v24 = sub_10000CF44(v23, (uint64_t)"CHANNEL", 7LL);
  int v25 = sub_10000CF44(v24, (uint64_t)", ", 2LL);
  int v26 = sub_10000CF44(v25, (uint64_t)"PNOFFSET", 8LL);
  sub_10000CF44(v26, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 33LL);
  std::stringbuf::str((std::stringbuf::string_type *)v67, (const std::stringbuf *)((char *)&v82 + 8));
  if (v67[23] >= 0) {
    uint64_t v27 = v67;
  }
  else {
    uint64_t v27 = *(char **)v67;
  }
  *(void *)(a1 + 256) = sub_1003BF158(a1 + 64, v27);
  *(void *)(a1 + 264) = v28;
  if ((v67[23] & 0x80000000) != 0) {
    operator delete(*(void **)v67);
  }
  if (sub_100B14D64(v6))
  {
    *(uint64_t *)((char *)&v78
    *(void *)&__int128 v82 = v29;
    if (v92 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf((char *)&v82 + 8);
    std::ios::~ios(v93);
    goto LABEL_13;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101849CC8);
  }
  int v51 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int v67 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_FAULT,  "Could not prepare cached insert statement",  v67,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(v67, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849CC8);
    }
    LOWORD(v65) = 0;
    int v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v67,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Could not prepare cached insert statement",  &v65,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)",  "%s\n",  v64);
    if (v64 != v67) {
      free(v64);
    }
  }

  *(uint64_t *)((char *)&v78
  *(void *)&__int128 v82 = v52;
  if (v92 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf((char *)&v82 + 8);
  std::ios::~ios(v93);
  return 0LL;
}

void sub_1006CF6AC(_Unwind_Exception *a1)
{
}

BOOL sub_1006CF70C(_BYTE *a1, int *a2)
{
  BOOL result = sub_1006CE930((uint64_t)a1, a2, &v4);
  if (result) {
    return sub_10040278C(a1, &v4);
  }
  return result;
}

BOOL sub_1006CF748(uint64_t a1, sqlite3_int64 a2, int *a3)
{
  int v6 = sub_10000CF44(&v56, (uint64_t)"SELECT ", 7LL);
  size_t v7 = sub_10000CF44(v6, (uint64_t)"MCC", 3LL);
  sqlite3_int64 v8 = sub_10000CF44(v7, (uint64_t)", ", 2LL);
  size_t v9 = sub_10000CF44(v8, (uint64_t)"SID", 3LL);
  int v10 = sub_10000CF44(v9, (uint64_t)", ", 2LL);
  size_t v11 = sub_10000CF44(v10, (uint64_t)"NID", 3LL);
  double v12 = sub_10000CF44(v11, (uint64_t)", ", 2LL);
  id v13 = sub_10000CF44(v12, (uint64_t)"BSID", 4LL);
  unint64_t v14 = sub_10000CF44(v13, (uint64_t)", ", 2LL);
  unint64_t v15 = sub_10000CF44(v14, (uint64_t)"ZONEID", 6LL);
  int v16 = sub_10000CF44(v15, (uint64_t)", ", 2LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)"BANDCLASS", 9LL);
  int v18 = sub_10000CF44(v17, (uint64_t)", ", 2LL);
  BOOL v19 = sub_10000CF44(v18, (uint64_t)"CHANNEL", 7LL);
  int v20 = sub_10000CF44(v19, (uint64_t)", ", 2LL);
  BOOL v21 = sub_10000CF44(v20, (uint64_t)"PNOFFSET", 8LL);
  int v22 = sub_10000CF44(v21, (uint64_t)" FROM ", 6LL);
  int v23 = (const char *)(a1 + 232);
  size_t v24 = strlen(v23);
  int v25 = sub_10000CF44(v22, (uint64_t)v23, v24);
  int v26 = sub_10000CF44(v25, (uint64_t)" WHERE ", 7LL);
  size_t v27 = strlen("ROWID");
  uint64_t v28 = sub_10000CF44(v26, (uint64_t)"ROWID", v27);
  sub_10000CF44(v28, (uint64_t)"=?", 2LL);
  std::stringbuf::str(&v62, &v57);
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v29 = &v62;
  }
  else {
    uint64_t v29 = (std::stringbuf::string_type *)v62.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1 + 64, (char *)v29, &v59);
  uint64_t v30 = v59;
  uint64_t v59 = 0LL;
  BOOL v31 = (sqlite3_stmt *)sub_100019240(v30);
  if (sub_1003C2D24(v31, 1, a2))
  {
    sub_1006CFE0C((uint64_t)a3);
    int v32 = (sqlite3_stmt *)sub_100019240(v30);
    int v33 = sqlite3_step(v32);
    BOOL v34 = v33 == 100;
    if (v33 == 100)
    {
      int v35 = (sqlite3_stmt *)sub_100019240(v30);
      *a3 = sqlite3_column_int(v35, 0);
      uint64_t v36 = (sqlite3_stmt *)sub_100019240(v30);
      a3[8] = sqlite3_column_int(v36, 1);
      int v37 = (sqlite3_stmt *)sub_100019240(v30);
      a3[9] = sqlite3_column_int(v37, 2);
      BOOL v38 = (sqlite3_stmt *)sub_100019240(v30);
      a3[11] = sqlite3_column_int(v38, 3);
      uint64_t v39 = (sqlite3_stmt *)sub_100019240(v30);
      a3[10] = sqlite3_column_int(v39, 4);
      int v40 = (sqlite3_stmt *)sub_100019240(v30);
      a3[12] = sqlite3_column_int(v40, 5);
      int v41 = (sqlite3_stmt *)sub_100019240(v30);
      a3[13] = sqlite3_column_int(v41, 6);
      int v42 = (sqlite3_stmt *)sub_100019240(v30);
      a3[14] = sqlite3_column_int(v42, 7);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849CC8);
      }
      int v43 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v44 = a3[8];
        int v45 = a3[9];
        LODWORD(v62.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(v62.__r_.__value_.__r.__words[0]) = v44;
        LOWORD(v62.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v62.__r_.__value_.__r.__words[1] + 2) = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "getCell SID %d NID %d",  (uint8_t *)&v62,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&v62, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101849CC8);
        }
        int v52 = a3[8];
        int v53 = a3[9];
        LODWORD(v59) = 67109376;
        HIDWORD(v59) = v52;
        __int16 v60 = 1024;
        int v61 = v53;
        int v54 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v62,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "getCell SID %d NID %d",  &v59,  14);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCdmaCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::CdmaCell &) const",  "%s\n",  (const char *)v54);
        if (v54 != &v62) {
          free(v54);
        }
      }
    }

    int v46 = (sqlite3_stmt *)sub_100019240(v30);
    sqlite3_reset(v46);
    if (v30) {
LABEL_16:
    }
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849CC8);
    }
    int v49 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v62.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "could not bind", (uint8_t *)&v62, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v62, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849CC8);
      }
      LOWORD(v59) = 0;
      int v51 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v62,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not bind",  &v59,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCdmaCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::CdmaCell &) const",  "%s\n",  (const char *)v51);
      if (v51 != &v62) {
        free(v51);
      }
    }

    uint64_t v50 = (sqlite3_stmt *)sub_100019240(v30);
    sqlite3_reset(v50);
    BOOL v34 = 0LL;
    if (v30) {
      goto LABEL_16;
    }
  }

  *(void *)((char *)v55
  uint64_t v56 = v47;
  std::streambuf::~streambuf(&v57);
  std::ios::~ios(&v58);
  return v34;
}

void sub_1006CFDAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1006CFE0C(uint64_t a1)
{
  *(_DWORD *)a1 = v13;
  __int128 v2 = v27[0];
  *(_OWORD *)(a1 + 192) = v26;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v2;
  *(_OWORD *)(a1 + 220) = *(_OWORD *)((char *)v27 + 12);
  __int128 v3 = v23;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v22;
  *(_OWORD *)(a1 + 144) = v3;
  __int128 v4 = v25;
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v4;
  __int128 v5 = v19;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v5;
  __int128 v6 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v6;
  __int128 v7 = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  std::string::operator=((std::string *)(a1 + 240), &__p);
  *(_DWORD *)(a1 + 424) = v39;
  __int128 v8 = v38;
  *(_OWORD *)(a1 + 392) = v37;
  *(_OWORD *)(a1 + 40_Block_object_dispose(va, 8) = v8;
  __int128 v9 = v34;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = v33;
  *(_OWORD *)(a1 + 344) = v9;
  __int128 v10 = v36;
  *(_OWORD *)(a1 + 360) = v35;
  *(_OWORD *)(a1 + 376) = v10;
  __int128 v11 = v30;
  *(_OWORD *)(a1 + 264) = v29;
  *(_OWORD *)(a1 + 280) = v11;
  __int128 v12 = v32;
  *(_OWORD *)(a1 + 296) = v31;
  *(_OWORD *)(a1 + 312) = v12;
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }

void sub_1006CFF08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1006CFF1C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006CFF48()
{
  qword_101997CC8 = (uint64_t)"MCC";
  dword_101997CD0 = 1;
  word_101997CD4 = 1;
  byte_101997CD8 = 0;
  byte_101997CF0 = 0;
  qword_101997CF8 = (uint64_t)"SID";
  dword_101997D00 = 1;
  word_101997D04 = 1;
  byte_101997D08 = 0;
  byte_101997D20 = 0;
  qword_101997D28 = (uint64_t)"NID";
  dword_101997D30 = 1;
  word_101997D34 = 1;
  byte_101997D38 = 0;
  byte_101997D50 = 0;
  qword_101997D58 = (uint64_t)"BSID";
  dword_101997D60 = 1;
  word_101997D64 = 1;
  byte_101997D68 = 0;
  byte_101997D80 = 0;
  qword_101997D88 = (uint64_t)"ZONEID";
  dword_101997D90 = 1;
  word_101997D94 = 1;
  byte_101997D98 = 0;
  byte_101997DB0 = 0;
  qword_101997DB8 = (uint64_t)"BANDCLASS";
  dword_101997DC0 = 1;
  word_101997DC4 = 1;
  byte_101997DC8 = 0;
  byte_101997DE0 = 0;
  qword_101997DE8 = (uint64_t)"CHANNEL";
  dword_101997DF0 = 1;
  word_101997DF4 = 1;
  byte_101997DF8 = 0;
  byte_101997E10 = 0;
  qword_101997E18 = (uint64_t)"PNOFFSET";
  dword_101997E20 = 1;
  word_101997E24 = 1;
  byte_101997E28 = 0;
  byte_101997E40 = 0;
  qword_101997E48 = (uint64_t)"Timestamp";
  dword_101997E50 = 2;
  word_101997E54 = 0;
  byte_101997E58 = 0;
  byte_101997E70 = 0;
  qword_101997E78 = (uint64_t)"Latitude";
  dword_101997E80 = 2;
  word_101997E84 = 0;
  byte_101997E88 = 0;
  byte_101997EA0 = 0;
  qword_101997EA8 = (uint64_t)"Longitude";
  dword_101997EB0 = 2;
  word_101997EB4 = 0;
  byte_101997EB8 = 0;
  byte_101997ED0 = 0;
  qword_101997ED8 = (uint64_t)"HorizontalAccuracy";
  dword_101997EE0 = 2;
  word_101997EE4 = 0;
  byte_101997EE8 = 0;
  byte_101997F00 = 0;
  qword_101997F08 = (uint64_t)"Altitude";
  dword_101997F10 = 2;
  word_101997F14 = 0;
  byte_101997F18 = 0;
  byte_101997F30 = 0;
  qword_101997F38 = (uint64_t)"VerticalAccuracy";
  dword_101997F40 = 2;
  word_101997F44 = 0;
  byte_101997F48 = 0;
  byte_101997F60 = 0;
  qword_101997F68 = (uint64_t)"Speed";
  dword_101997F70 = 2;
  word_101997F74 = 0;
  byte_101997F78 = 0;
  byte_101997F90 = 0;
  qword_101997F98 = (uint64_t)"Course";
  dword_101997FA0 = 2;
  word_101997FA4 = 0;
  byte_101997FA8 = 0;
  byte_101997FC0 = 0;
  qword_101997FC8 = (uint64_t)"Confidence";
  dword_101997FD0 = 1;
  word_101997FD4 = 0;
  byte_101997FD8 = 0;
  byte_101997FF0 = 0;
  qword_101997FF8 = 0LL;
  dword_101998000 = 5;
  word_101998004 = 0;
  byte_101998008 = 0;
  byte_101998020 = 0;
}

BOOL sub_1006D0174(unsigned int a1)
{
  if (a1 >= 0x2AC)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849D08);
    }
    __int128 v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "Bad index into kkDefenseMappingAgencyTenByTenGeoid.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849D08);
      }
      v5[0] = 0;
      __int128 v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Bad index into kkDefenseMappingAgencyTenByTenGeoid.",  v5,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLGeoidModel::_static_check_dma_index(int)", "%s\n", v4);
    }
  }

  return a1 < 0x2AC;
}

BOOL sub_1006D0314(float *a1, double a2, double a3)
{
  *a1 = 0.0;
  if (a2 < -90.0 || a2 > 90.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101849D08);
    }
    __int128 v16 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Input latitude = %.9lf is out of possible range",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849D08);
      }
      int v29 = 134217984;
      double v30 = a2;
      __int128 v21 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Input latitude = %.9lf is out of possible range",  COERCE_DOUBLE(&v29));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)",  "%s\n");
      goto LABEL_56;
    }
  }

  else
  {
    double v5 = a3;
    if (a3 < -180.0)
    {
      unsigned int v6 = 0;
      do
        double v5 = v5 + 360.0;
      while (v5 < -180.0 && v6++ < 3);
    }

    if (v5 >= 180.0)
    {
      unsigned int v8 = 0;
      do
        double v5 = v5 + -360.0;
      while (v5 >= 180.0 && v8++ < 3);
    }

    float v10 = (v5 + 180.0) / 10.0;
    int v11 = vcvtms_s32_f32(v10);
    if (v11 < 0x24)
    {
      float v17 = (90.0 - a2) / 10.0;
      int v18 = vcvtms_s32_f32(v17);
      if (v18 < 0x13)
      {
        if (v11 == 35) {
          uint64_t v22 = 0LL;
        }
        else {
          uint64_t v22 = (v11 + 1);
        }
        int v23 = v18 + 1;
        if (v18 == 18)
        {
          *a1 = -30.0;
        }

        else
        {
          uint64_t v24 = (36 * v18);
          BOOL result = sub_1006D0174(v24 + v11);
          if (!result) {
            return result;
          }
          char v25 = byte_10130E7C0[v24 + v11];
          uint64_t v26 = (36 * v23);
          BOOL result = sub_1006D0174(v26 + v11);
          if (!result) {
            return result;
          }
          char v28 = byte_10130E7C0[v26 + v11];
          BOOL result = sub_1006D0174(v22 + v24);
          if (!result) {
            return result;
          }
          char v27 = byte_10130E7C0[v22 + v24];
          BOOL result = sub_1006D0174(v22 + v26);
          if (!result) {
            return result;
          }
          *a1 = (float)((float)((float)((float)((float)((float)v23 - v17)
                                              * (float)((float)(v10 - (float)v11) * (float)v27))
                                      + (float)((float)((float)((float)(int)v22 - v10) * (float)v25)
                                              * (float)((float)v23 - v17)))
                              + (float)((float)((float)((float)(int)v22 - v10) * (float)v28) * (float)(v17 - (float)v18)))
                      + (float)((float)((float)(v10 - (float)v11) * (float)byte_10130E7C0[v22 + v26])
        }

        return 1LL;
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849D08);
      }
      __int128 v19 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v32 = a2;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "latitude %.9lf is not valid.", buf, 0xCu);
      }

      BOOL v20 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v20)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101849D08);
        }
        uint64_t v15 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "latitude %.9lf is not valid.");
        goto LABEL_41;
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101849D08);
      }
      __int128 v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v32 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "longitude %.9lf is not valid.", buf, 0xCu);
      }

      BOOL v13 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101849D08);
        }
        uint64_t v15 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "longitude %.9lf is not valid.");
LABEL_41:
        __int128 v21 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)",  "%s\n");
LABEL_56:
        if (v21 != buf) {
          free(v21);
        }
        return 0LL;
      }
    }
  }

  return result;
}

void sub_1006D08DC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1006D0AF8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v8 = v7 + 1;
        if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          uint64_t v11 = OBJC_IVAR___PBDataReader__error;
          int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v11 = OBJC_IVAR___PBDataReader__error;
      int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v12 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v14 = v6 >> 3;
      if ((v6 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v16 = 0;
        }

        __int128 v19 = &OBJC_IVAR___ALCLRowingModel__strokeFrequency;
        goto LABEL_37;
      }

      if ((_DWORD)v14 == 2) {
        break;
      }
      if ((_DWORD)v14 == 1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 <= 0xFFFFFFFFFFFFFFFBLL && v15 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          int v16 = 0;
        }

        __int128 v19 = &OBJC_IVAR___ALCLRowingModel__strokePower;
LABEL_37:
        *(_DWORD *)(a1 + *v19) = v16;
        goto LABEL_38;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_38:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    *(_BYTE *)(a1 + 20) |= 1u;
    unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
    }

    else
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      int v16 = 0;
    }

    __int128 v19 = &OBJC_IVAR___ALCLRowingModel__strokeAmp;
    goto LABEL_37;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1006D1220()
{
  if (qword_1019A14E8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A14E8 + 8LL))(qword_1019A14E8);
  }
  if (qword_1019A14F0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A14F0 + 8LL))(qword_1019A14F0);
  }
  if (qword_1019A14F8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A14F8 + 8LL))(qword_1019A14F8);
  }
  if (qword_1019A1500) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1500 + 8LL))(qword_1019A1500);
  }
  if (qword_1019A1508) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1508 + 8LL))(qword_1019A1508);
  }
  if (qword_1019A1510) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1510 + 8LL))(qword_1019A1510);
  }
  if (qword_1019A1518) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1518 + 8LL))(qword_1019A1518);
  }
  if (qword_1019A1520) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1520 + 8LL))(qword_1019A1520);
  }
  if (qword_1019A1528) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1528 + 8LL))(qword_1019A1528);
  }
  if (qword_1019A1530) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1530 + 8LL))(qword_1019A1530);
  }
  if (qword_1019A1538) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1538 + 8LL))(qword_1019A1538);
  }
  if (qword_1019A1540) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1540 + 8LL))(qword_1019A1540);
  }
  if (qword_1019A1548) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1548 + 8LL))(qword_1019A1548);
  }
  if (qword_1019A1550) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1550 + 8LL))(qword_1019A1550);
  }
  if (qword_1019A1558) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1558 + 8LL))(qword_1019A1558);
  }
  if (qword_1019A1560) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1560 + 8LL))(qword_1019A1560);
  }
  if (qword_1019A1568) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1568 + 8LL))(qword_1019A1568);
  }
  if (qword_1019A1570) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1570 + 8LL))(qword_1019A1570);
  }
  uint64_t result = qword_1019A1578;
  if (qword_1019A1578) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A1578 + 8LL))(qword_1019A1578);
  }
  return result;
}

void sub_1006D13FC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101998028 & 1) != 0) {
    return;
  }
  byte_101998028 = 1;
  uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  a4);
  sub_1001D0A48(v4, v5, v6, v7);
  unint64_t v8 = operator new(0x20uLL);
  *(void *)((char *)v8 + 20) = 0LL;
  *unint64_t v8 = off_101849D38;
  v8[1] = 0LL;
  *((_BYTE *)v8 + 16) = 0;
  qword_1019A14E8 = (uint64_t)v8;
  char v9 = (char *)operator new(0x58uLL);
  *(void *)char v9 = off_101849DB0;
  *((void *)v9 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v9 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(v9 + 76) = 0LL;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *((_WORD *)v9 + ++*(_DWORD *)(result + 36) = 0;
  qword_1019A14F0 = (uint64_t)v9;
  float v10 = (char *)operator new(0x20uLL);
  v10[16] = 0;
  *(void *)float v10 = &off_101849E28;
  *((void *)v10 + 1) = 0LL;
  *(void *)(v10 + 20) = 0LL;
  qword_1019A14F8 = (uint64_t)v10;
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &off_101849EA0;
  v11[1] = 0LL;
  _DWORD v11[2] = 0LL;
  void v11[3] = 0LL;
  *((_DWORD *)v11 + _Block_object_dispose(va, 8) = 0;
  qword_1019A1500 = (uint64_t)v11;
  int v12 = operator new(0x30uLL);
  v12[1] = 0LL;
  _DWORD v12[2] = 0LL;
  void *v12 = off_101849F18;
  *((_BYTE *)v12 + 24) = 0;
  *(void *)((char *)v12 + ++*(_DWORD *)(result + 36) = 0LL;
  *(void *)((char *)v12 + 2_Block_object_dispose(va, 8) = 0LL;
  *((_DWORD *)v12 + 11) = 0;
  qword_1019A1508 = (uint64_t)v12;
  BOOL v13 = operator new(0x20uLL);
  v13[1] = 0LL;
  void v13[2] = 0LL;
  *BOOL v13 = &off_101849F90;
  *((_DWORD *)v13 + 6) = 0;
  qword_1019A1510 = (uint64_t)v13;
  unint64_t v14 = operator new(0x20uLL);
  v14[1] = 0LL;
  void v14[2] = 0LL;
  void *v14 = &off_10184A008;
  *((_DWORD *)v14 + 6) = 0;
  qword_1019A1518 = (uint64_t)v14;
  unint64_t v15 = operator new(0x30uLL);
  *unint64_t v15 = off_10184A080;
  v15[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  double v15[5] = 0LL;
  void v15[3] = 0LL;
  unsigned int v15[4] = 0LL;
  _DWORD v15[2] = 0LL;
  qword_1019A1520 = (uint64_t)v15;
  int v16 = operator new(0x20uLL);
  *int v16 = off_10184A0F8;
  v16[1] = 0LL;
  void v16[2] = 0LL;
  v16[3] = 0LL;
  qword_1019A1528 = (uint64_t)v16;
  unint64_t v17 = operator new(0x20uLL);
  void v17[3] = 0LL;
  *unint64_t v17 = &off_10184A170;
  v17[1] = 0LL;
  *(void *)((char *)v17 + 14) = 0LL;
  qword_1019A1530 = (uint64_t)v17;
  unint64_t v18 = operator new(0x20uLL);
  *(void *)unint64_t v18 = off_10184A1E8;
  void v18[2] = 0;
  *((_WORD *)v18 + 6) = 0;
  *((void *)v18 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v18 + 3) = 0LL;
  qword_1019A1538 = (uint64_t)v18;
  __int128 v19 = (char *)operator new(0x18uLL);
  *(void *)__int128 v19 = off_10184A260;
  *((_WORD *)v19 + 4) = 0;
  *(void *)(v19 + 12) = 0LL;
  qword_1019A1540 = (uint64_t)v19;
  BOOL v20 = operator new(0x20uLL);
  void *v20 = &off_10184A2D8;
  v20[1] = 0LL;
  v20[2] = 0LL;
  v20[3] = 0LL;
  qword_1019A1548 = (uint64_t)v20;
  __int128 v21 = operator new(0x40uLL);
  v21[1] = 0LL;
  v21[2] = 0LL;
  *__int128 v21 = off_10184A350;
  *((_DWORD *)v21 + 6) = 0;
  v21[4] = 0LL;
  v21[5] = 0LL;
  *((_DWORD *)v21 + 12) = 0;
  v21[7] = 0LL;
  qword_1019A1550 = (uint64_t)v21;
  uint64_t v22 = (char *)operator new(0x20uLL);
  v22[16] = 0;
  *(void *)uint64_t v22 = off_10184A3C8;
  *((void *)v22 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(v22 + 20) = 0LL;
  qword_1019A1558 = (uint64_t)v22;
  int v23 = operator new(0x20uLL);
  *int v23 = off_10184A440;
  v23[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v23 + 4) = 0;
  *((_BYTE *)v23 + 20) = 0;
  void v23[3] = 0LL;
  qword_1019A1560 = (uint64_t)v23;
  uint64_t v24 = operator new(0x30uLL);
  v24[4] = 0LL;
  void *v24 = off_10184A4B8;
  v24[1] = 0LL;
  void v24[2] = 0LL;
  void v24[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v24 + 10) = 0;
  qword_1019A1568 = (uint64_t)v24;
  char v25 = operator new(0x28uLL);
  void *v25 = off_10184A530;
  v25[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v25[2] = 0LL;
  void v25[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v25[4] = 0LL;
  qword_1019A1570 = (uint64_t)v25;
  uint64_t v26 = operator new(0x20uLL);
  *uint64_t v26 = &off_10184A5A8;
  v26[1] = 0LL;
  void v26[2] = 0LL;
  void v26[3] = 0LL;
  qword_1019A1578 = (uint64_t)v26;
  uint64_t v28 = qword_1019A14F0;
  if (qword_1019A14E8)
  {
    *(void *)(qword_1019A14F0 + 56) = qword_1019A14E8;
    uint64_t v29 = qword_1019A14F8;
LABEL_6:
    __int128 v31 = &qword_1019A1000;
    *(void *)(v29 + _Block_object_dispose(va, 8) = v28;
    uint64_t v32 = qword_1019A1500;
    goto LABEL_7;
  }

  uint64_t v26 = (void *)((uint64_t (*)(void))sub_1006D13FC)();
  uint64_t v30 = qword_1019A14F0;
  *(void *)(v28 + 56) = qword_1019A14E8;
  uint64_t v29 = qword_1019A14F8;
  if (v30)
  {
    uint64_t v28 = v30;
    goto LABEL_6;
  }

  uint64_t v26 = (void *)sub_1006D13FC(v26);
  uint64_t v28 = qword_1019A14F0;
  *(void *)(v29 + _Block_object_dispose(va, 8) = qword_1019A14F0;
  uint64_t v32 = qword_1019A1500;
  if (!v28)
  {
    uint64_t v26 = (void *)sub_1006D13FC(v26);
    uint64_t v28 = qword_1019A14F0;
    *(void *)(v32 + _Block_object_dispose(va, 8) = qword_1019A14F0;
    uint64_t v40 = qword_1019A1510;
    if (v28)
    {
      *(void *)(qword_1019A1510 + _Block_object_dispose(va, 8) = v28;
      uint64_t v33 = qword_1019A1518;
      __int128 v31 = &qword_1019A1000;
    }

    else
    {
      uint64_t v26 = (void *)sub_1006D13FC(v26);
      uint64_t v28 = qword_1019A14F0;
      *(void *)(v40 + _Block_object_dispose(va, 8) = qword_1019A14F0;
      uint64_t v33 = qword_1019A1518;
      __int128 v31 = &qword_1019A1000;
      if (!v28)
      {
        uint64_t v26 = (void *)sub_1006D13FC(v26);
        uint64_t v28 = qword_1019A14F0;
      }
    }

    goto LABEL_8;
  }

  __int128 v31 = &qword_1019A1000;
LABEL_7:
  *(void *)(v32 + _Block_object_dispose(va, 8) = v28;
  *(void *)(qword_1019A1510 + _Block_object_dispose(va, 8) = v28;
  uint64_t v33 = qword_1019A1518;
LABEL_8:
  *(void *)(v33 + _Block_object_dispose(va, 8) = v28;
  uint64_t v34 = qword_1019A1528;
  uint64_t v35 = qword_1019A1520;
  if (!qword_1019A1520)
  {
    uint64_t v26 = (void *)sub_1006D13FC(v26);
    uint64_t v35 = qword_1019A1520;
    uint64_t v28 = qword_1019A14F0;
  }

  *(void *)(v34 + _Block_object_dispose(va, 8) = v35;
  if (v28)
  {
    *(void *)(v34 + 16) = v28;
    uint64_t v36 = v31[166];
  }

  else
  {
    uint64_t v26 = (void *)sub_1006D13FC(v26);
    uint64_t v28 = qword_1019A14F0;
    *(void *)(v34 + 16) = qword_1019A14F0;
    uint64_t v36 = v31[166];
    if (!v28)
    {
      uint64_t v26 = (void *)sub_1006D13FC(v26);
      uint64_t v28 = qword_1019A14F0;
    }
  }

  *(void *)(v36 + _Block_object_dispose(va, 8) = v28;
  uint64_t v37 = qword_1019A1548;
  uint64_t v38 = qword_1019A1540;
  if (!qword_1019A1540)
  {
    uint64_t v26 = (void *)sub_1006D13FC(v26);
    uint64_t v38 = qword_1019A1540;
    uint64_t v28 = qword_1019A14F0;
  }

  *(void *)(v37 + _Block_object_dispose(va, 8) = v38;
  uint64_t v39 = qword_1019A1578;
  if (!v28)
  {
    sub_1006D13FC(v26);
    uint64_t v28 = qword_1019A14F0;
  }

  *(void *)(v39 + 16) = v28;
  wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1006D1220,  v27);
}

uint64_t sub_1006D18E0(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  *(void *)uint64_t result = &off_101849E28;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1006D18F8(uint64_t result)
{
  *(void *)uint64_t result = &off_101849EA0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1006D1910(uint64_t result)
{
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = off_101849F18;
  *(_BYTE *)(result + 24) = 0;
  *(void *)(result + ++*(_DWORD *)(result + 36) = 0LL;
  *(void *)(result + 2_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1006D1934(uint64_t result)
{
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_101849F90;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1006D194C(uint64_t result)
{
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_10184A008;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_1006D1964(void *result)
{
  *uint64_t result = off_10184A0F8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_1006D1978(void *result)
{
  result[3] = 0LL;
  *uint64_t result = &off_10184A170;
  result[1] = 0LL;
  *(void *)((char *)result + 14) = 0LL;
  return result;
}

uint64_t sub_1006D1990(uint64_t result)
{
  *(void *)uint64_t result = off_10184A1E8;
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 0;
  *(_WORD *)(result + 12) = 0;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = 0LL;
  return result;
}

void *sub_1006D19B4(void *result)
{
  *uint64_t result = &off_10184A2D8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D19C8(uint64_t result)
{
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = off_10184A350;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(result + 56) = 0LL;
  return result;
}

uint64_t sub_1006D19EC(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  *(void *)uint64_t result = off_10184A3C8;
  *(void *)(result + _Block_object_dispose(va, 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1006D1A0C(uint64_t result)
{
  *(void *)uint64_t result = off_10184A440;
  *(void *)(result + _Block_object_dispose(va, 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(void *)(result + 24) = 0LL;
  return result;
}

uint64_t sub_1006D1A30(uint64_t result)
{
  *(void *)(result + 32) = 0LL;
  *(void *)uint64_t result = off_10184A4B8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void *sub_1006D1A54(void *result)
{
  *uint64_t result = off_10184A530;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  return result;
}

void *sub_1006D1A74(void *result)
{
  *uint64_t result = &off_10184A5A8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1006D1A88(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v16,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  655LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v16,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }

  int v5 = *(_DWORD *)(a2 + 24);
  if (!(_BYTE)v5) {
    goto LABEL_13;
  }
  if ((v5 & 1) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 1u;
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v8;
    int v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  char v9 = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 24) |= 2u;
  *(_BYTE *)(a1 + 9) = v9;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

void sub_1006D1C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D1C30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849D38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D1C40(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849D38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_DWORD *sub_1006D1C60()
{
  uint64_t result = operator new(0x20uLL);
  result[5] = 0;
  result[6] = 0;
  *(void *)uint64_t result = off_101849D38;
  *((void *)result + 1) = 0LL;
  *((_BYTE *)result + 16) = 0;
  return result;
}

uint64_t sub_1006D1C8C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  if ((_BYTE)v1) {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  }
  if ((v1 & 0xFF00) != 0) {
    *(_BYTE *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1006D1CB0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        char v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          unsigned int v10 = *v9;
          char v11 = v9 + 1;
          *((void *)this + 1) = v11;
LABEL_33:
          *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v10 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            char v12 = v11 + 1;
            *((void *)this + 1) = v12;
            goto LABEL_36;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
        if ((_DWORD)result)
        {
          unsigned int v10 = v37;
          char v11 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
          goto LABEL_33;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        char v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_36:
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v20 = v37;
          __int128 v21 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v20 = *v12;
          __int128 v21 = v12 + 1;
          *((void *)this + 1) = v21;
        }

        *(_BYTE *)(a1 + 9) = v20 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        char v13 = v21 + 1;
        *((void *)this + 1) = v13;
LABEL_44:
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v22 = v37;
          int v23 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v22 = *v13;
          int v23 = v13 + 1;
          *((void *)this + 1) = v23;
        }

        *(_BYTE *)(a1 + 10) = v22 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        char v14 = v23 + 1;
        *((void *)this + 1) = v14;
LABEL_52:
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v37;
          char v25 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v24 = *v14;
          char v25 = v14 + 1;
          *((void *)this + 1) = v25;
        }

        *(_BYTE *)(a1 + 11) = v24 != 0;
        *(_DWORD *)(a1 + 24) |= 8u;
        char v15 = v25 + 1;
        *((void *)this + 1) = v15;
LABEL_60:
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v26 = v37;
          char v27 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v26 = *v15;
          char v27 = v15 + 1;
          *((void *)this + 1) = v27;
        }

        *(_BYTE *)(a1 + 12) = v26 != 0;
        *(_DWORD *)(a1 + 24) |= 0x10u;
        int v16 = v27 + 1;
        *((void *)this + 1) = v16;
LABEL_68:
        if ((unint64_t)v16 >= v8 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v28 = v37;
          uint64_t v29 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v28 = *v16;
          uint64_t v29 = v16 + 1;
          *((void *)this + 1) = v29;
        }

        *(_BYTE *)(a1 + 13) = v28 != 0;
        *(_DWORD *)(a1 + 24) |= 0x20u;
        unint64_t v17 = v29 + 1;
        *((void *)this + 1) = v17;
LABEL_76:
        if ((unint64_t)v17 >= v8 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v30 = v37;
          __int128 v31 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v30 = *v17;
          __int128 v31 = v17 + 1;
          *((void *)this + 1) = v31;
        }

        *(_BYTE *)(a1 + 14) = v30 != 0;
        *(_DWORD *)(a1 + 24) |= 0x40u;
        unint64_t v18 = v31 + 1;
        *((void *)this + 1) = v18;
LABEL_84:
        if ((unint64_t)v18 >= v8 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v32 = v37;
          uint64_t v33 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v32 = *v18;
          uint64_t v33 = v18 + 1;
          *((void *)this + 1) = v33;
        }

        *(_BYTE *)(a1 + 15) = v32 != 0;
        *(_DWORD *)(a1 + 24) |= 0x80u;
        __int128 v19 = v33 + 1;
        *((void *)this + 1) = v19;
LABEL_92:
        if ((unint64_t)v19 >= v8 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v34 = v37;
          uint64_t v35 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v34 = *v19;
          uint64_t v35 = (unsigned __int8 *)(v19 + 1);
          *((void *)this + 1) = v35;
        }

        *(_BYTE *)(a1 + 16) = v34 != 0;
        *(_DWORD *)(a1 + 24) |= 0x100u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        char v13 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_44;
      case 4u:
        int v7 = TagFallback & 7;
        char v14 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_52;
      case 5u:
        int v7 = TagFallback & 7;
        char v15 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_60;
      case 6u:
        int v7 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_68;
      case 7u:
        int v7 = TagFallback & 7;
        unint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_76;
      case 8u:
        int v7 = TagFallback & 7;
        unint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_84;
      case 9u:
        int v7 = TagFallback & 7;
        __int128 v19 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_92;
      default:
        int v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1006D21E0( uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 9),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1006D2300(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v1)
  {
    unsigned int v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x20) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x40) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x80) != 0) {
      v2 += 2;
    }
  }

  else
  {
    unsigned int v2 = 0;
  }

  if ((v1 & 0x100) != 0) {
    uint64_t v3 = v2 + 2;
  }
  else {
    uint64_t v3 = v2;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1006D2384(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D23D0()
{
  return 1LL;
}

void *sub_1006D23D8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorOptions");
}

void sub_1006D23E8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v21,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  1184LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v21,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }

  int v5 = *(_DWORD *)(a2 + 80);
  if (!(_BYTE)v5) {
    goto LABEL_30;
  }
  if ((v5 & 1) != 0)
  {
    int v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 80) |= 1u;
    int v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v7 = (std::string *)operator new(0x18uLL);
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
    }

    std::string::operator=(v7, v6);
    int v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  unint64_t v8 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 80) |= 2u;
  char v9 = *(std::string **)(a1 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v9 = (std::string *)operator new(0x18uLL);
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v9;
  }

  std::string::operator=(v9, v8);
  int v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

void sub_1006D2660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D2678(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  if ((void *)qword_1019A14F0 != a1)
  {
    uint64_t v6 = a1[7];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

void sub_1006D2724(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849DB0;
  sub_1006D2678(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D2754(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849DB0;
  sub_1006D2678(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_1006D2788()
{
  uint64_t v0 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v0 = off_101849DB0;
  *((void *)v0 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v0 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 19) = 0;
  *((_DWORD *)v0 + 20) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *((_WORD *)v0 + ++*(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1006D27D0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 80);
  if ((_BYTE)v1)
  {
    if ((v1 & 1) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 80) & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    int v1 = *(_DWORD *)(result + 80);
    if ((v1 & 0x40) != 0)
    {
      uint64_t v4 = *(void *)(result + 56);
      if (v4)
      {
        int v5 = *(_DWORD *)(v4 + 24);
        if ((_BYTE)v5) {
          *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
        }
        if ((v5 & 0xFF00) != 0) {
          *(_BYTE *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 24) = 0;
        int v1 = *(_DWORD *)(result + 80);
      }
    }

    *(_DWORD *)(result + 64) = 0;
  }

  if ((v1 & 0xFF00) != 0)
  {
    *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
    *(_WORD *)(result + 72) = 0;
  }

  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_1006D28A4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
        *(_DWORD *)(a1 + 80) |= 1u;
        unint64_t v8 = *(void **)(a1 + 8);
        if (v8 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v8 = operator new(0x18uLL);
          v8[1] = 0LL;
          void v8[2] = 0LL;
          *unint64_t v8 = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v8);
        if ((_DWORD)result)
        {
          uint64_t v10 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 18)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_16;
          }

          continue;
        }

        return result;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
LABEL_16:
        *(_DWORD *)(a1 + 80) |= 2u;
        uint64_t v11 = *(void **)(a1 + 16);
        if (v11 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v11 = operator new(0x18uLL);
          v11[1] = 0LL;
          _DWORD v11[2] = 0LL;
          *uint64_t v11 = 0LL;
          *(void *)(a1 + 16) = v11;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
        if ((_DWORD)result)
        {
          uint64_t v12 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 25)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_23;
          }

          continue;
        }

        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_56;
        }
LABEL_23:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = *(void *)v43;
        *(_DWORD *)(a1 + 80) |= 4u;
        uint64_t v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
        goto LABEL_28;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_56;
        }
LABEL_28:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = *(void *)v43;
        *(_DWORD *)(a1 + 80) |= 8u;
        char v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_33:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = *(void *)v43;
        *(_DWORD *)(a1 + 80) |= 0x10u;
        uint64_t v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_38:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)v43;
        int v16 = *(_DWORD *)(a1 + 80) | 0x20;
        *(_DWORD *)(a1 + 80) = v16;
        unsigned int v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_44:
        *(_DWORD *)(a1 + 80) = v16 | 0x40;
        char v18 = *(_DWORD **)(a1 + 56);
        if (!v18)
        {
          char v18 = operator new(0x20uLL);
          v18[5] = 0;
          v18[6] = 0;
          *(void *)char v18 = off_101849D38;
          *((void *)v18 + 1) = 0LL;
          *((_BYTE *)v18 + 16) = 0;
          *(void *)(a1 + 56) = v18;
        }

        char v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v43)) {
            return 0LL;
          }
        }

        else
        {
          v43[0] = *v19;
          *((void *)this + 1) = v19 + 1;
        }

        int v27 = *((_DWORD *)this + 14);
        int v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 < v28)
        {
          int v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43[0]);
          if (sub_1006D1CB0((uint64_t)v18, this, v30))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
              int v31 = *((_DWORD *)this + 14);
              BOOL v32 = __OFSUB__(v31, 1);
              int v33 = v31 - 1;
              if (v33 < 0 == v32) {
                *((_DWORD *)this + 14) = v33;
              }
              unsigned int v34 = (_BYTE *)*((void *)this + 1);
              unint64_t v20 = *((void *)this + 2);
              if ((unint64_t)v34 < v20 && *v34 == 64)
              {
                __int128 v21 = v34 + 1;
                *((void *)this + 1) = v21;
LABEL_69:
                if ((unint64_t)v21 >= v20 || *v21 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v35 = v43[0];
                }

                else
                {
                  unsigned int v35 = *v21;
                  *((void *)this + 1) = v21 + 1;
                }

                if (v35 <= 2)
                {
                  *(_DWORD *)(a1 + 80) |= 0x80u;
                  *(_DWORD *)(a1 + 64) = v35;
                }

                uint64_t v36 = (_BYTE *)*((void *)this + 1);
                unint64_t v22 = *((void *)this + 2);
                if ((unint64_t)v36 < v22 && *v36 == 72)
                {
                  int v23 = v36 + 1;
                  *((void *)this + 1) = v23;
LABEL_79:
                  if ((unint64_t)v23 >= v22 || *v23 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v43);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v37 = v43[0];
                  }

                  else
                  {
                    unsigned int v37 = *v23;
                    *((void *)this + 1) = v23 + 1;
                  }

                  if (v37 <= 4)
                  {
                    *(_DWORD *)(a1 + 80) |= 0x100u;
                    *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = v37;
                  }

                  uint64_t v38 = (_BYTE *)*((void *)this + 1);
                  unint64_t v24 = *((void *)this + 2);
                  if ((unint64_t)v38 < v24 && *v38 == 80)
                  {
                    char v25 = v38 + 1;
                    *((void *)this + 1) = v25;
LABEL_89:
                    if ((unint64_t)v25 >= v24 || *v25 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v43);
                      if (!(_DWORD)result) {
                        return result;
                      }
                      unsigned int v39 = v43[0];
                      uint64_t v40 = (_BYTE *)*((void *)this + 1);
                      unint64_t v24 = *((void *)this + 2);
                    }

                    else
                    {
                      unsigned int v39 = *v25;
                      uint64_t v40 = v25 + 1;
                      *((void *)this + 1) = v40;
                    }

                    *(_BYTE *)(a1 + 72) = v39 != 0;
                    *(_DWORD *)(a1 + 80) |= 0x200u;
                    if ((unint64_t)v40 < v24 && *v40 == 88)
                    {
                      unsigned int v26 = v40 + 1;
                      *((void *)this + 1) = v26;
LABEL_97:
                      if ((unint64_t)v26 >= v24 || *v26 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v43);
                        if (!(_DWORD)result) {
                          return result;
                        }
                        unsigned int v41 = v43[0];
                        int v42 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v24 = *((void *)this + 2);
                      }

                      else
                      {
                        unsigned int v41 = *v26;
                        int v42 = (unsigned __int8 *)(v26 + 1);
                        *((void *)this + 1) = v42;
                      }

                      *(_BYTE *)(a1 + 73) = v41 != 0;
                      *(_DWORD *)(a1 + 80) |= 0x400u;
                      if (v42 == (unsigned __int8 *)v24
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
                        uint64_t result = 1LL;
                        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_33;
        }
        goto LABEL_56;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_38;
        }
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
        int v16 = *(_DWORD *)(a1 + 80);
        goto LABEL_44;
      case 8u:
        int v7 = TagFallback & 7;
        __int128 v21 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_69;
      case 9u:
        int v7 = TagFallback & 7;
        int v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_79;
      case 0xAu:
        int v7 = TagFallback & 7;
        char v25 = (char *)*((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        goto LABEL_89;
      case 0xBu:
        int v7 = TagFallback & 7;
        unsigned int v26 = (char *)*((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        goto LABEL_97;
      default:
        int v7 = TagFallback & 7;
LABEL_56:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1006D2EA0( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 80);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 1LL,  *(void *)(result + 8),  a2);
    int v6 = *(_DWORD *)(v5 + 80);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1006D3008(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_47;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v11 = v12 + 1;
      int v3 = *(_DWORD *)(a1 + 80);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 2;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    unsigned int v4 = v11 + v7;
    if ((v3 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }

  unsigned int v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 80);
      char v15 = *(_BYTE *)(v13 + 23);
    }

    else
    {
      int v18 = 1;
    }

    if (v15 < 0) {
      int v14 = v16;
    }
    v4 += v18 + v14 + 1;
  }

void sub_1006D3200(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D324C()
{
  return 1LL;
}

void *sub_1006D3254@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.Fence");
}

void sub_1006D3264(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  1430LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      char v6 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        int v7 = (char *)operator new(0x58uLL);
        *(void *)int v7 = off_101849DB0;
        *((void *)v7 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v7 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v7 + 19) = 0;
        *((_DWORD *)v7 + 20) = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *((_WORD *)v7 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A14F8 + 8);
      }
      sub_1006D23E8((uint64_t)v7, v8);
    }
  }

void sub_1006D3360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D3378(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101849E28;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A14F8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D33CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D33E0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A14F8;
  if (!qword_1019A14F8)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A14F8;
  }

  return result;
}

_BYTE *sub_1006D340C()
{
  uint64_t result = operator new(0x20uLL);
  result[16] = 0;
  *(void *)uint64_t result = &off_101849E28;
  *((void *)result + 1) = 0LL;
  *((_DWORD *)result + 5) = 0;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_1006D3438(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_BYTE *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1006D3474( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    do
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        if (TagFallback >> 3 == 2)
        {
          int v7 = TagFallback & 7;
          if (v7 == 2)
          {
            int v8 = *(_DWORD *)(a1 + 24);
            goto LABEL_23;
          }
        }

        else
        {
          int v7 = TagFallback & 7;
        }

uint64_t sub_1006D36C8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 16),  (BOOL)a2,  a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }

  else if ((v6 & 2) == 0)
  {
    return result;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A14F8 + 8);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
}

uint64_t sub_1006D3734(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    uint64_t v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_1019A14F8 + 8);
      }
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v5, a2);
      int v8 = (int)v6;
      else {
        int v9 = 1;
      }
      uint64_t v4 = (v4 | 1) + v8 + v9;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1006D37BC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D3808()
{
  return 1LL;
}

void *sub_1006D3810@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorUpdate");
}

void sub_1006D3820(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  1711LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 8) {
        sub_1012438EC();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      unsigned int v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        unsigned int v7 = (char *)operator new(0x58uLL);
        *(void *)unsigned int v7 = off_101849DB0;
        *((void *)v7 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v7 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v7 + 19) = 0;
        *((_DWORD *)v7 + 20) = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *((_WORD *)v7 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A1500 + 8);
      }
      sub_1006D23E8((uint64_t)v7, v8);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 5) {
        sub_1012438C4();
      }
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 8) != 0)
    {
      unsigned int v10 = *(_DWORD *)(a2 + 24);
      if (v10 >= 5) {
        sub_10124389C();
      }
      *(_DWORD *)(a1 + 32) |= 8u;
      *(_DWORD *)(a1 + 24) = v10;
    }
  }

void sub_1006D3978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D3990(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101849EA0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1500 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D39E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D39F8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1500;
  if (!qword_1019A1500)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1500;
  }

  return result;
}

void *sub_1006D3A24()
{
  uint64_t result = operator new(0x28uLL);
  *uint64_t result = &off_101849EA0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  *((_DWORD *)result + _Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D3A50(uint64_t result)
{
  uint64_t v1 = (_DWORD *)result;
  char v2 = *(_BYTE *)(result + 32);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }

    _OWORD v1[5] = 0;
    v1[6] = 0;
  }

  v1[8] = 0;
  return result;
}

uint64_t sub_1006D3A90( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v29;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 7)
        {
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        char v15 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_28;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
LABEL_28:
        *(_DWORD *)(a1 + 32) |= 2u;
        int v16 = *(char **)(a1 + 8);
        if (!v16)
        {
          int v16 = (char *)operator new(0x58uLL);
          *(void *)int v16 = off_101849DB0;
          *((void *)v16 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v16 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v16 + 19) = 0;
          *((_DWORD *)v16 + 20) = 0;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 56) = 0u;
          *((_WORD *)v16 + ++*(_DWORD *)(result + 36) = 0;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v16;
        }

        int v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v29)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v29 = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
          if (sub_1006D28A4((uint64_t)v16, this, v21))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              int v22 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v22, 1);
              int v24 = v22 - 1;
              if (v24 < 0 == v23) {
                *((_DWORD *)this + 14) = v24;
              }
              int v25 = (_BYTE *)*((void *)this + 1);
              unint64_t v10 = *((void *)this + 2);
              if ((unint64_t)v25 < v10 && *v25 == 24)
              {
                char v11 = v25 + 1;
                *((void *)this + 1) = v11;
LABEL_42:
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v29);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v26 = v29;
                }

                else
                {
                  unsigned int v26 = *v11;
                  *((void *)this + 1) = v11 + 1;
                }

                if (v26 <= 4)
                {
                  *(_DWORD *)(a1 + 32) |= 4u;
                  *(_DWORD *)(a1 + 20) = v26;
                }

                int v27 = (_BYTE *)*((void *)this + 1);
                unint64_t v12 = *((void *)this + 2);
                if ((unint64_t)v27 < v12 && *v27 == 32)
                {
                  uint64_t v13 = v27 + 1;
                  *((void *)this + 1) = v13;
LABEL_52:
                  if ((unint64_t)v13 >= v12 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v29);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v28 = v29;
                  }

                  else
                  {
                    unsigned int v28 = *v13;
                    *((void *)this + 1) = v13 + 1;
                  }

                  if (v28 <= 4)
                  {
                    *(_DWORD *)(a1 + 32) |= 8u;
                    *(_DWORD *)(a1 + 24) = v28;
                  }

                  if (*((void *)this + 1) == *((void *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
                    uint64_t result = 1LL;
                    *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
                    return result;
                  }
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_42;
      case 4u:
        int v7 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_52;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1006D3DFC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1500 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  }

uint64_t sub_1006D3EA0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_34;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_19;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_1019A1500 + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v6, a2);
  int v8 = (int)v7;
  else {
    int v9 = 1;
  }
  uint64_t v4 = (v4 + v8 + v9 + 1);
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v10 & 0x80000000) != 0)
  {
    int v11 = 11;
  }

  else if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 32);
  }

  else
  {
    int v11 = 2;
  }

  uint64_t v4 = (v11 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_28:
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 11;
    }

    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }

    else
    {
      int v13 = 2;
    }

    uint64_t v4 = (v13 + v4);
  }

void sub_1006D3FD4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D4020()
{
  return 1LL;
}

void *sub_1006D4028@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceNotificationEvent");
}

void sub_1006D4038(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  2039LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }

    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }

    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 16) = v8;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }

void sub_1006D4168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D4180(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849F18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D4190(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101849F18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

uint64_t sub_1006D41B0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1508;
  if (!qword_1019A1508)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1508;
  }

  return result;
}

void *sub_1006D41DC()
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101849F18;
  *((_BYTE *)result + 24) = 0;
  *(void *)((char *)result + ++*(_DWORD *)(result + 36) = 0LL;
  *(void *)((char *)result + 2_Block_object_dispose(va, 8) = 0LL;
  *((_DWORD *)result + 11) = 0;
  return result;
}

uint64_t sub_1006D4214(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(void *)(result + 32) = 0LL;
    *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1006D4234( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_28;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v24) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)v24;
        *(_DWORD *)(a1 + 44) |= 1u;
        uint64_t v8 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_28;
        }
LABEL_14:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v24) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v24;
        *(_DWORD *)(a1 + 44) |= 2u;
        int v10 = (_BYTE *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        int v11 = v10 + 1;
        *((void *)this + 1) = v11;
LABEL_20:
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v12 = v24[0];
          int v13 = (_BYTE *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v12 = *v11;
          int v13 = v11 + 1;
          *((void *)this + 1) = v13;
        }

        *(_BYTE *)(a1 + 24) = v12 != 0;
        *(_DWORD *)(a1 + 44) |= 4u;
        int v14 = v13 + 1;
        *((void *)this + 1) = v14;
LABEL_37:
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v18 = v24[0];
          int v19 = (_BYTE *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v18 = *v14;
          int v19 = v14 + 1;
          *((void *)this + 1) = v19;
        }

        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v18;
        *(_DWORD *)(a1 + 44) |= 8u;
        char v15 = v19 + 1;
        *((void *)this + 1) = v15;
LABEL_45:
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v20 = v24[0];
          unsigned int v21 = (_BYTE *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v20 = *v15;
          unsigned int v21 = v15 + 1;
          *((void *)this + 1) = v21;
        }

        *(_DWORD *)(a1 + 32) = v20;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        int v16 = v21 + 1;
        *((void *)this + 1) = v16;
LABEL_53:
        if ((unint64_t)v16 >= v9 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v22 = v24[0];
          BOOL v23 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v22 = *v16;
          BOOL v23 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v23;
        }

        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 36) = v22;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_37;
      case 5u:
        int v7 = TagFallback & 7;
        char v15 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_45;
      case 6u:
        int v7 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_53;
      default:
        int v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1006D4588( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_1006D4654(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  if (!*(_BYTE *)(a1 + 44))
  {
    uint64_t v5 = 0LL;
    goto LABEL_30;
  }

  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 2;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      int v7 = 2;
    }

    uint64_t v5 = (v7 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_9:
      if ((v3 & 0x20) == 0) {
        goto LABEL_30;
      }
      goto LABEL_24;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_9;
  }

  uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = 11;
  }

  else if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    int v9 = 2;
  }

  uint64_t v5 = (v9 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_24:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }

    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    }

    else
    {
      int v11 = 2;
    }

    uint64_t v5 = (v11 + v5);
  }

void sub_1006D4750(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D479C()
{
  return 1LL;
}

void *sub_1006D47A4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.MicroLocationEvent");
}

void sub_1006D47B4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  2268LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 5) {
        sub_101243914();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        int v7 = (char *)operator new(0x58uLL);
        *(void *)int v7 = off_101849DB0;
        *((void *)v7 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v7 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v7 + 19) = 0;
        *((_DWORD *)v7 + 20) = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *((_WORD *)v7 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A1510 + 8);
      }
      sub_1006D23E8((uint64_t)v7, v8);
    }
  }

void sub_1006D48BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D48D4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101849F90;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1510 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D4928(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D493C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1510;
  if (!qword_1019A1510)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1510;
  }

  return result;
}

void *sub_1006D4968()
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_101849F90;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_1006D4994(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1006D49D0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v21;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 4)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        int v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_15;
      }

      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_15:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_1006D4C24( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }

  else if ((v6 & 2) == 0)
  {
    return result;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1510 + 8);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
}

uint64_t sub_1006D4C90(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1510 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v6, a2);
    int v9 = (int)v7;
    else {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v9 + v10 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_1006D4D54(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D4DA0()
{
  return 1LL;
}

void *sub_1006D4DA8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLocationType");
}

void sub_1006D4DB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  2481LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 2) {
        sub_10124393C();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = (char *)operator new(0x58uLL);
        *(void *)uint64_t v7 = off_101849DB0;
        *((void *)v7 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v7 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v7 + 19) = 0;
        *((_DWORD *)v7 + 20) = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *((_WORD *)v7 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A1518 + 8);
      }
      sub_1006D23E8((uint64_t)v7, v8);
    }
  }

void sub_1006D4EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D4ED8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10184A008;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1518 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D4F2C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D4F40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1518;
  if (!qword_1019A1518)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1518;
  }

  return result;
}

void *sub_1006D4F6C()
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_10184A008;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_1006D4F98(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1006D4FD4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v21;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 1)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        int v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_15;
      }

      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_15:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_1006D5228( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }

  else if ((v6 & 2) == 0)
  {
    return result;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1518 + 8);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
}

uint64_t sub_1006D5294(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1518 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v6, a2);
    int v9 = (int)v7;
    else {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v9 + v10 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_1006D5358(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D53A4()
{
  return 1LL;
}

void *sub_1006D53AC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoiNotFound");
}

double sub_1006D53BC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  2745LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      unsigned int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unsigned int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }

    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }

    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    int v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }

void sub_1006D54E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D54F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A080;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D5528(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A080;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_1006D555C()
{
  double result = operator new(0x30uLL);
  *double result = off_10184A080;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D5590(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    if ((*(_BYTE *)(result + 44) & 1) != 0)
    {
      uint64_t v1 = *(void *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)uint64_t v1 = 0;
          *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }

    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 0LL;
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1006D55E0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        unsigned int v8 = *(void **)(a1 + 8);
        if (v8 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unsigned int v8 = operator new(0x18uLL);
          v8[1] = 0LL;
          void v8[2] = 0LL;
          *unsigned int v8 = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v8);
        if ((_DWORD)result)
        {
          int v10 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_16;
          }

          continue;
        }

        return result;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
LABEL_16:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 44) |= 2u;
        int v11 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v11 + 1;
        goto LABEL_21;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
LABEL_21:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = v13;
        *(_DWORD *)(a1 + 44) |= 4u;
        unsigned int v12 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v12 + 1;
LABEL_26:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = v13;
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        break;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_26;
        }
        goto LABEL_31;
      default:
        int v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }

    return result;
  }

uint64_t sub_1006D5824( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  int v3 = a2;
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 44);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 1LL,  *(void *)(result + 8),  a2);
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v3,  *(double *)(v4 + 16),  a3);
  int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v3,  *(double *)(v4 + 32),  a3);
  }

uint64_t sub_1006D58B8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v11 = v12 + 1;
        int v3 = *(_DWORD *)(a1 + 44);
        char v8 = *(_BYTE *)(v6 + 23);
      }

      else
      {
        int v11 = 2;
      }

      if (v8 < 0) {
        int v7 = v9;
      }
      unsigned int v4 = v11 + v7;
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      uint64_t result = v4 + 9;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 40) = result;
  return result;
}

double sub_1006D5968(uint64_t a1, void *lpsrc)
{
  return sub_1006D53BC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1006D59B4()
{
  return 1LL;
}

void *sub_1006D59BC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.LocationOfInterest");
}

void sub_1006D59CC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  2971LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void **)(a1 + 8);
      if (!v6)
      {
        uint64_t v6 = operator new(0x30uLL);
        void *v6 = off_10184A080;
        v6[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v6[4] = 0LL;
        void v6[5] = 0LL;
        v6[2] = 0LL;
        void v6[3] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A1528 + 8);
      }
      sub_1006D53BC((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      char v8 = *(char **)(a1 + 16);
      if (!v8)
      {
        char v8 = (char *)operator new(0x58uLL);
        *(void *)char v8 = off_101849DB0;
        *((void *)v8 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v8 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v8 + 19) = 0;
        *((_DWORD *)v8 + 20) = 0;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((_WORD *)v8 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1528 + 16);
      }
      sub_1006D23E8((uint64_t)v8, v9);
    }
  }

void sub_1006D5B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_1006D5B20(void *result)
{
  if ((void *)qword_1019A1528 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006D5B7C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A0F8;
  sub_1006D5B20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D5BAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A0F8;
  sub_1006D5B20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D5BE0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1528;
  if (!qword_1019A1528)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1528;
  }

  return result;
}

void *sub_1006D5C0C()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = off_10184A0F8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D5C34(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1006D5590(result);
        int v2 = *(_DWORD *)(v1 + 28);
      }
    }

    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D5C80( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        char v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          char v8 = operator new(0x30uLL);
          *char v8 = off_10184A080;
          v8[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          _DWORD v8[4] = 0LL;
          v8[5] = 0LL;
          void v8[2] = 0LL;
          void v8[3] = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v27)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0LL;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        unsigned int v17 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }

      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      int v18 = *(char **)(a1 + 16);
      if (!v18)
      {
        int v18 = (char *)operator new(0x58uLL);
        *(void *)int v18 = off_101849DB0;
        *((void *)v18 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v18 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v18 + 19) = 0;
        *((_DWORD *)v18 + 20) = 0;
        *(_OWORD *)(v18 + 24) = 0u;
        *(_OWORD *)(v18 + 40) = 0u;
        *(_OWORD *)(v18 + 56) = 0u;
        *((_WORD *)v18 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + 16) = v18;
      }

      BOOL v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v28)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }

      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0LL;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        return result;
      }
    }

    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1LL;
    }
  }

uint64_t sub_1006D5F58( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1528 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1528 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  }

  return result;
}

uint64_t sub_1006D5FD4(uint64_t a1, unsigned int a2)
{
  if (!*(_BYTE *)(a1 + 28))
  {
    uint64_t v3 = 0LL;
    goto LABEL_18;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    uint64_t v3 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_1019A1528 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D58B8(v4, a2);
  int v6 = (int)v5;
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1528 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v3 = (v3 + v11 + v12 + 1);
  }

void sub_1006D60A4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D60F0()
{
  return 1LL;
}

void *sub_1006D60F8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoi");
}

void sub_1006D6108(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  3242LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      int v6 = *(char **)(a1 + 8);
      if (!v6)
      {
        int v6 = (char *)operator new(0x58uLL);
        *(void *)int v6 = off_101849DB0;
        *((void *)v6 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v6 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v6 + 19) = 0;
        *((_DWORD *)v6 + 20) = 0;
        *(_OWORD *)(v6 + 24) = 0u;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_OWORD *)(v6 + 56) = 0u;
        *((_WORD *)v6 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A1530 + 8);
      }
      sub_1006D23E8((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 5) {
        sub_101243964();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      char v9 = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_BYTE *)(a1 + 20) = v9;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 8) != 0)
    {
      char v10 = *(_BYTE *)(a2 + 21);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(_BYTE *)(a1 + 21) = v10;
    }
  }

void sub_1006D6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D6260(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10184A170;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1530 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D62B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D62C8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1530;
  if (!qword_1019A1530)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1530;
  }

  return result;
}

void *sub_1006D62F4()
{
  uint64_t result = operator new(0x20uLL);
  result[3] = 0LL;
  *uint64_t result = &off_10184A170;
  result[1] = 0LL;
  *(void *)((char *)result + 14) = 0LL;
  return result;
}

uint64_t sub_1006D6320(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }

    *(_DWORD *)(v1 + 16) = 0;
    *(_WORD *)(v1 + 20) = 0;
  }

  *(_DWORD *)(v1 + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D6360( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        unsigned int v8 = *(char **)(a1 + 8);
        if (!v8)
        {
          unsigned int v8 = (char *)operator new(0x58uLL);
          *(void *)unsigned int v8 = off_101849DB0;
          *((void *)v8 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v8 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v8 + 19) = 0;
          *((_DWORD *)v8 + 20) = 0;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_OWORD *)(v8 + 56) = 0u;
          *((_WORD *)v8 + ++*(_DWORD *)(result + 36) = 0;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
        }

        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v30)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v30 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        int v22 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        char v11 = v22 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_32;
      case 2u:
        int v7 = TagFallback & 7;
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_32:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v23 = v30;
        }

        else
        {
          unsigned int v23 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v23 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 16) = v23;
        }

        int v25 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        unsigned int v13 = v25 + 1;
        *((void *)this + 1) = v13;
LABEL_42:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v26 = v30;
          unsigned int v27 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int v26 = *v13;
          unsigned int v27 = v13 + 1;
          *((void *)this + 1) = v27;
        }

        *(_BYTE *)(a1 + 20) = v26 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        int v14 = v27 + 1;
        *((void *)this + 1) = v14;
LABEL_50:
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v28 = v30;
          unsigned int v29 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int v28 = *v14;
          unsigned int v29 = (unsigned __int8 *)(v14 + 1);
          *((void *)this + 1) = v29;
        }

        *(_BYTE *)(a1 + 21) = v28 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_42;
      case 4u:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_50;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1006D66CC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1530 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 16),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 21),  (BOOL)a2,  a4);
  }

uint64_t sub_1006D6770(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0LL;
    goto LABEL_23;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1530 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v6, a2);
    int v8 = (int)v7;
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 28);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
  }

  else
  {
    int v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
  }

  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v10 & 0x80000000) != 0)
  {
    int v11 = 11;
  }

  else if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v11 = 2;
  }

  v4 += v11;
LABEL_18:
  unsigned int v12 = v4 + 2;
  if ((v3 & 4) == 0) {
    unsigned int v12 = v4;
  }
  if ((v3 & 8) != 0) {
    uint64_t result = v12 + 2;
  }
  else {
    uint64_t result = v12;
  }
LABEL_23:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1006D683C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D6888()
{
  return 1LL;
}

void *sub_1006D6890@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceUpdateStatusForHandoff");
}

void sub_1006D68A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  3519LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 6) {
        sub_10124398C();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      char v8 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_BYTE *)(a1 + 12) = v8;
      int v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }

    int v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    unint64_t v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v10;
    }

    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 28) & 8) != 0)
    {
LABEL_10:
      char v7 = *(_BYTE *)(a2 + 13);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(_BYTE *)(a1 + 13) = v7;
    }
  }

void sub_1006D69CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D69E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A1E8;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D6A14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A1E8;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D6A48(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1538;
  if (!qword_1019A1538)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1538;
  }

  return result;
}

_DWORD *sub_1006D6A74()
{
  uint64_t result = operator new(0x20uLL);
  *(void *)uint64_t result = off_10184A1E8;
  result[2] = 0;
  *((_WORD *)result + 6) = 0;
  *((void *)result + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 3) = 0LL;
  return result;
}

uint64_t sub_1006D6AAC(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = 0;
    *(_BYTE *)(result + 12) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(_BYTE *)(result + 13) = 0;
  }

  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D6B00( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
          goto LABEL_23;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          unsigned int v9 = v25;
LABEL_23:
          if (v9 <= 5)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v9;
          }

          int v15 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v15 < v10 && *v15 == 16)
          {
            char v11 = v15 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_28;
          }

          continue;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_28:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v16 = v24;
          int v17 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v16 = *v11;
          int v17 = v11 + 1;
          *((void *)this + 1) = v17;
        }

        *(_BYTE *)(a1 + 12) = v16 != 0;
        int v12 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v12;
        *((void *)this + 1) = v17 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v12 | 4;
        unsigned int v18 = *(void **)(a1 + 16);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unsigned int v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          void v18[2] = 0LL;
          *unsigned int v18 = 0LL;
          *(void *)(a1 + 16) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        int v19 = (_BYTE *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        int v14 = v19 + 1;
        *((void *)this + 1) = v14;
LABEL_42:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v20 = v23;
          int v21 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }

        else
        {
          unsigned int v20 = *v14;
          int v21 = (unsigned __int8 *)(v14 + 1);
          *((void *)this + 1) = v21;
        }

        *(_BYTE *)(a1 + 13) = v20 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        int v12 = *(_DWORD *)(a1 + 28);
        goto LABEL_36;
      case 4u:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_42;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1006D6DBC( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  }

uint64_t sub_1006D6E50(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 28);
      }

      else
      {
        int v4 = 2;
      }
    }

    else
    {
      int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      unsigned int v7 = v4 + 2;
    }
    else {
      unsigned int v7 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      char v10 = v9;
      uint64_t v11 = *(void *)(v8 + 8);
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
        int v9 = *(unsigned __int8 *)(v8 + 23);
        uint64_t v11 = *(void *)(v8 + 8);
        int v3 = *(_DWORD *)(a1 + 28);
        char v10 = *(_BYTE *)(v8 + 23);
      }

      else
      {
        int v13 = 1;
      }

      if (v10 < 0) {
        int v9 = v11;
      }
      v7 += v13 + v9 + 1;
    }

    if ((v3 & 8) != 0) {
      uint64_t result = v7 + 2;
    }
    else {
      uint64_t result = v7;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1006D6F30(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D6F7C()
{
  return 1LL;
}

void *sub_1006D6F84@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.LocationRequest");
}

void sub_1006D6F94(uint64_t a1, _BYTE *a2)
{
  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  3725LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      char v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v6;
      int v5 = *((_DWORD *)a2 + 4);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }

void sub_1006D703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D7054(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A260;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D7064(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A260;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_WORD *sub_1006D7084()
{
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = off_10184A260;
  result[4] = 0;
  *((_DWORD *)result + 3) = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_1006D70B0(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_WORD *)(result + _Block_object_dispose(va, 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1006D70C4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v17;
        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }

      else
      {
        unsigned int v11 = *v10;
        unint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        int v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v16;
          int v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v13 = *v9;
          int v14 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v14;
        }

        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_1006D7270( uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 16);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 9),  a2,  a4);
  }
  return result;
}

uint64_t sub_1006D72C8(uint64_t a1)
{
  unsigned int v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0) {
    v1 += 2;
  }
  else {
    uint64_t v2 = 0LL;
  }
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_1006D72F0(uint64_t a1, _BYTE *lpsrc)
{
}

uint64_t sub_1006D733C()
{
  return 1LL;
}

void *sub_1006D7344@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTriggerOptions");
}

void sub_1006D7354(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  3972LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 3) {
        sub_1012439DC();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      int v7 = *(_WORD **)(a1 + 8);
      if (!v7)
      {
        int v7 = operator new(0x18uLL);
        *(void *)int v7 = off_10184A260;
        _DWORD v7[4] = 0;
        *((_DWORD *)v7 + 3) = 0;
        *((_DWORD *)v7 + 4) = 0;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      unint64_t v8 = *(_BYTE **)(a2 + 8);
      if (!v8) {
        unint64_t v8 = *(_BYTE **)(qword_1019A1548 + 8);
      }
      sub_1006D6F94((uint64_t)v7, v8);
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 3) {
        sub_1012439B4();
      }
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
    }
  }

void sub_1006D7468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D7480(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10184A2D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1548 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D74D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D74E8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1548;
  if (!qword_1019A1548)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1548;
  }

  return result;
}

void *sub_1006D7514()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_10184A2D8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D753C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16)) {
          *(_WORD *)(v2 + _Block_object_dispose(va, 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }

    *(_DWORD *)(result + 20) = 0;
  }

  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D7570( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        unsigned int v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v12 = v27;
        }

        else
        {
          unsigned int v12 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v12 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 1u;
          *(_DWORD *)(a1 + 16) = v12;
        }

        int v14 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 18)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_28;
        }
      }

      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          goto LABEL_42;
        }
      }

      else
      {
        int v8 = TagFallback & 7;
      }

uint64_t sub_1006D782C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1548 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  }
  return result;
}

uint64_t sub_1006D78B4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_28;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_21;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1548 + 8);
    }
    int v7 = 2 * (*(_DWORD *)(v6 + 16) & 1);
    if ((*(_DWORD *)(v6 + 16) & 2) != 0) {
      v7 += 2;
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)(v6 + 12) = v8;
    uint64_t v4 = (v4 + v8 + 2);
    int v3 = *(_DWORD *)(a1 + 28);
    goto LABEL_21;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_1006D79A0(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D79EC()
{
  return 1LL;
}

void *sub_1006D79F4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTrigger");
}

void sub_1006D7A04(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v22,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  4175LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v22,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        int v10 = sub_1006DA1EC();
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        int v10 = *(void **)(v9 + 8 * v8);
      }

      sub_1001FADF0((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  *(_DWORD *)(a2 + 40) + a1[10]);
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 32) + 8 * v13);
      int v15 = a1[11];
      uint64_t v16 = (int)a1[10];
      if ((int)v16 >= v15)
      {
        if (v15 == a1[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  v15 + 1);
          int v15 = a1[11];
        }

        a1[11] = v15 + 1;
        int v18 = sub_1006DA1EC();
        uint64_t v19 = *((void *)a1 + 4);
        uint64_t v20 = (int)a1[10];
        a1[10] = v20 + 1;
        *(void *)(v19 + 8 * v20) = v18;
      }

      else
      {
        uint64_t v17 = *((void *)a1 + 4);
        a1[10] = v16 + 1;
        int v18 = *(void **)(v17 + 8 * v16);
      }

      sub_1001FADF0((uint64_t)v18, v14);
      ++v13;
    }

    while (v13 < *(int *)(a2 + 40));
  }

void sub_1006D7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D7BE8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A350;
  sub_10008D0EC((uint64_t)a1 + 32);
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D7C2C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D7C40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1550;
  if (!qword_1019A1550)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1550;
  }

  return result;
}

void *sub_1006D7C6C()
{
  uint64_t result = operator new(0x40uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_10184A350;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  result[5] = 0LL;
  *((_DWORD *)result + 12) = 0;
  result[7] = 0LL;
  return result;
}

uint64_t sub_1006D7CA4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 40) >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 32) + 8 * v4);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
      ++v4;
    }

    while (v4 < *(int *)(v1 + 40));
  }

  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

uint64_t sub_1006D7D34( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
        while (1)
        {
          int v10 = a1[5];
          uint64_t v11 = a1[4];
          if ((int)v11 >= v10)
          {
            if (v10 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v10 + 1);
              int v10 = a1[5];
            }

            a1[5] = v10 + 1;
            uint64_t v13 = sub_1006DA1EC();
            uint64_t v14 = *((void *)a1 + 1);
            uint64_t v15 = a1[4];
            a1[4] = v15 + 1;
            *(void *)(v14 + 8 * v15) = v13;
          }

          else
          {
            uint64_t v12 = *((void *)a1 + 1);
            a1[4] = v11 + 1;
            uint64_t v13 = *(void **)(v12 + 8 * v11);
          }

          uint64_t v16 = (char *)*((void *)this + 1);
          if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v41)) {
              return 0LL;
            }
          }

          else
          {
            unsigned int v41 = *v16;
            *((void *)this + 1) = v16 + 1;
          }

          int v17 = *((_DWORD *)this + 14);
          int v18 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v17 + 1;
          if (v17 >= v18) {
            return 0LL;
          }
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
          int v21 = *((_DWORD *)this + 14);
          BOOL v22 = __OFSUB__(v21, 1);
          int v23 = v21 - 1;
          if (v23 < 0 == v22) {
            *((_DWORD *)this + 14) = v23;
          }
          unsigned int v24 = (_BYTE *)*((void *)this + 1);
          int v25 = *v24;
          if (v25 != 10)
          {
            if (v25 != 18) {
              goto LABEL_2;
            }
            goto LABEL_34;
          }

          *((void *)this + 1) = v24 + 1;
        }
      }

      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_30;
      }
      while (1)
      {
        int v26 = a1[11];
        uint64_t v27 = a1[10];
        if ((int)v27 >= v26)
        {
          if (v26 == a1[12])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v26 + 1);
            int v26 = a1[11];
          }

          a1[11] = v26 + 1;
          unsigned int v29 = sub_1006DA1EC();
          uint64_t v30 = *((void *)a1 + 4);
          uint64_t v31 = a1[10];
          a1[10] = v31 + 1;
          *(void *)(v30 + 8 * v31) = v29;
        }

        else
        {
          uint64_t v28 = *((void *)a1 + 4);
          a1[10] = v27 + 1;
          unsigned int v29 = *(void **)(v28 + 8 * v27);
        }

        BOOL v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v42)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v42 = *v32;
          *((void *)this + 1) = v32 + 1;
        }

        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0LL;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v22 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v22) {
          *((_DWORD *)this + 14) = v38;
        }
        unsigned int v24 = (_BYTE *)*((void *)this + 1);
        unsigned int v39 = (_BYTE *)*((void *)this + 2);
        if (v24 >= v39 || *v24 != 18) {
          break;
        }
LABEL_34:
        *((void *)this + 1) = v24 + 1;
      }

      if (v24 == v39 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        return result;
      }
    }

    int v9 = TagFallback & 7;
LABEL_30:
    if (v9 == 4) {
      return 1LL;
    }
  }

uint64_t sub_1006D8070( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(*(void *)(v5 + 32) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 40));
  }

  return result;
}

uint64_t sub_1006D8100(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FB7A0( *(void *)(*(void *)(a1 + 8) + 8 * v4),  a2);
      int v6 = (int)v5;
      else {
        int v7 = 1;
      }
      v3 += v6 + v7;
      ++v4;
    }

    while (v4 < *(int *)(a1 + 16));
  }

  int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = (v8 + v3);
  if (v8 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FB7A0( *(void *)(*(void *)(a1 + 32) + 8 * v10),  a2);
      int v12 = (int)v11;
      else {
        int v13 = 1;
      }
      uint64_t v9 = (v12 + v9 + v13);
      ++v10;
    }

    while (v10 < *(int *)(a1 + 40));
  }

  *(_DWORD *)(a1 + 56) = v9;
  return v9;
}

void sub_1006D81D0(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_1006D821C()
{
  return 1LL;
}

void *sub_1006D8224@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.EntryExitScanNetworks");
}

void sub_1006D8234(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  4375LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      char v6 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_1006D8308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D8320(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A3C8;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D8350(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A3C8;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D8384(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1558;
  if (!qword_1019A1558)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1558;
  }

  return result;
}

_BYTE *sub_1006D83B0()
{
  uint64_t result = operator new(0x20uLL);
  result[16] = 0;
  *(void *)uint64_t result = off_10184A3C8;
  *((void *)result + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 5) = 0;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_1006D83E4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_BYTE *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1006D8430( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v11 = v15;
          int v12 = (_BYTE *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v11 = *v10;
          int v12 = v10 + 1;
          *((void *)this + 1) = v12;
        }

        *(_BYTE *)(a1 + 16) = v11 != 0;
        int v8 = *(_DWORD *)(a1 + 24) | 1;
        *(_DWORD *)(a1 + 24) = v8;
        if ((unint64_t)v12 < v9 && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_23;
        }
      }

      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_15;
      }
      int v8 = *(_DWORD *)(a1 + 24);
LABEL_23:
      *(_DWORD *)(a1 + 24) = v8 | 2;
      int v13 = *(void **)(a1 + 8);
      if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v13 = operator new(0x18uLL);
        v13[1] = 0LL;
        void v13[2] = 0LL;
        *int v13 = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
        return result;
      }
    }

    int v7 = TagFallback & 7;
LABEL_15:
    if (v7 == 4) {
      return 1LL;
    }
  }

uint64_t sub_1006D85DC( uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  }
  return result;
}

uint64_t sub_1006D8634(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    uint64_t v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      char v7 = v6;
      uint64_t v8 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9,  a2);
        int v6 = *(unsigned __int8 *)(v5 + 23);
        uint64_t v8 = *(void *)(v5 + 8);
        char v7 = *(_BYTE *)(v5 + 23);
      }

      else
      {
        int v10 = 1;
      }

      if (v7 < 0) {
        int v6 = v8;
      }
      uint64_t v4 = (v4 | 1) + v10 + v6;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1006D86CC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D8718()
{
  return 1LL;
}

void *sub_1006D8720@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.PowerAssertionEvent");
}

float sub_1006D8730(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  4610LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      uint64_t v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      unint64_t v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
      }

      std::string::operator=(v9, v8);
      int v6 = *(_DWORD *)(a2 + 28);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }

    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }

    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(float *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0) {
      return result;
    }
LABEL_7:
    char v7 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(_BYTE *)(a1 + 20) = v7;
  }

  return result;
}

void sub_1006D8834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D884C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A440;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D887C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A440;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D88B0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1560;
  if (!qword_1019A1560)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1560;
  }

  return result;
}

void *sub_1006D88DC()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = off_10184A440;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 4) = 0;
  *((_BYTE *)result + 20) = 0;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D8914(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t v1 = *(void *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)uint64_t v1 = 0;
          *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 20) = 0;
  }

  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D8964( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        unsigned int v11 = *(void **)(a1 + 8);
        if (v11 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unsigned int v11 = operator new(0x18uLL);
          v11[1] = 0LL;
          _DWORD v11[2] = 0LL;
          *unsigned int v11 = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
        if (!(_DWORD)result) {
          return result;
        }
        int v13 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 21)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_19;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 5) {
        goto LABEL_27;
      }
LABEL_19:
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v18) & 1) == 0) {
        return 0LL;
      }
      *(_DWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v14 = (_BYTE *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v14 < v9 && *v14 == 24)
      {
        char v10 = v14 + 1;
        *((void *)this + 1) = v10;
LABEL_23:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v17;
          uint64_t v16 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unsigned int v15 = *v10;
          uint64_t v16 = (unsigned __int8 *)(v10 + 1);
          *((void *)this + 1) = v16;
        }

        *(_BYTE *)(a1 + 20) = v15 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if (v16 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        char v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_23;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_1006D8B6C( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 1LL,  *(void *)(result + 8),  a2);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  v4,  a4);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v4,  *(float *)(v5 + 16),  a3);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  v4,  a4);
  }
  return result;
}

uint64_t sub_1006D8BE4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v11 = v12 + 1;
        int v3 = *(_DWORD *)(a1 + 28);
        char v8 = *(_BYTE *)(v6 + 23);
      }

      else
      {
        int v11 = 2;
      }

      if (v8 < 0) {
        int v7 = v9;
      }
      unsigned int v4 = v11 + v7;
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 5;
    }
    if ((v3 & 4) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 24) = result;
  return result;
}

float sub_1006D8C88(uint64_t a1, void *lpsrc)
{
  return sub_1006D8730(a1, (uint64_t)lpsrc);
}

uint64_t sub_1006D8CD4()
{
  return 1LL;
}

void *sub_1006D8CDC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.TriggerReceived");
}

void sub_1006D8CEC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  4883LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 32);
      if (v6 >= 0x13) {
        sub_101243A04();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0) {
          return;
        }
LABEL_13:
        uint64_t v9 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 40) |= 8u;
        unint64_t v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v10 = (std::string *)operator new(0x18uLL);
          v10->__r_.__value_.__l.__size_ = 0LL;
          v10->__r_.__value_.__l.__cap_ = 0LL;
          v10->__r_.__value_.__r.__words[0] = 0LL;
          *(void *)(a1 + 24) = v10;
        }

        std::string::operator=(v10, v9);
        return;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }

    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(void *)(a1 + 16) = v8;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0) {
      return;
    }
    goto LABEL_13;
  }

void sub_1006D8E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D8E28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A4B8;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D8E58(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A4B8;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D8E8C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1568;
  if (!qword_1019A1568)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1568;
  }

  return result;
}

void *sub_1006D8EB8()
{
  uint64_t result = operator new(0x30uLL);
  result[4] = 0LL;
  *uint64_t result = off_10184A4B8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 10) = 0;
  return result;
}

uint64_t sub_1006D8EF0(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1006D8F40( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v16[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 0x12)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }

        int v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_28;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_18;
        }
LABEL_28:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)v16;
        *(_DWORD *)(a1 + 40) |= 2u;
        int v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_32:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v16) & 1) != 0)
        {
          *(void *)(a1 + 16) = *(void *)v16;
          int v10 = *(_DWORD *)(a1 + 40) | 4;
          *(_DWORD *)(a1 + 40) = v10;
          uint64_t v14 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 34)
          {
            *((void *)this + 1) = v14 + 1;
LABEL_36:
            *(_DWORD *)(a1 + 40) = v10 | 8;
            unsigned int v15 = *(void **)(a1 + 24);
            if (v15 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              unsigned int v15 = operator new(0x18uLL);
              v15[1] = 0LL;
              _DWORD v15[2] = 0LL;
              *unsigned int v15 = 0LL;
              *(void *)(a1 + 24) = v15;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v15);
            if (!(_DWORD)result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
              uint64_t result = 1LL;
              *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
              return result;
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_32;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_36;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1006D91AC( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_1006D9240(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        char v9 = *(_BYTE *)(v7 + 23);
      }

      else
      {
        int v12 = 1;
      }

      if (v9 < 0) {
        int v8 = v10;
      }
      uint64_t v5 = (v5 + v12 + v8 + 1);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 36) = v5;
  return v5;
}

void sub_1006D9320(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D936C()
{
  return 1LL;
}

void *sub_1006D9374@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.MotionAlarmEvent");
}

void sub_1006D9384(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  5168LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 4) {
        sub_101243A2C();
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0) {
          return;
        }
LABEL_15:
        uint64_t v10 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 36) |= 8u;
        unint64_t v11 = *(std::string **)(a1 + 24);
        if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v11 = (std::string *)operator new(0x18uLL);
          v11->__r_.__value_.__l.__size_ = 0LL;
          v11->__r_.__value_.__l.__cap_ = 0LL;
          v11->__r_.__value_.__r.__words[0] = 0LL;
          *(void *)(a1 + 24) = v11;
        }

        std::string::operator=(v11, v10);
        return;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }

    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_15;
  }

void sub_1006D94DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D94F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A530;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006D9524(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184A530;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1006D9558(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1570;
  if (!qword_1019A1570)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1570;
  }

  return result;
}

void *sub_1006D9584()
{
  uint64_t result = operator new(0x28uLL);
  *uint64_t result = off_10184A530;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  return result;
}

uint64_t sub_1006D95B8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 20) = 0;
    if ((*(_BYTE *)(result + 36) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + ++*(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1006D963C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v17;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        char v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_28;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_28:
        *(_DWORD *)(a1 + 36) |= 2u;
        int v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          void v13[2] = 0LL;
          *int v13 = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_34:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v18) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v18;
          int v10 = *(_DWORD *)(a1 + 36) | 4;
          *(_DWORD *)(a1 + ++*(_DWORD *)(result + 36) = v10;
          unsigned int v15 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 34)
          {
            *((void *)this + 1) = v15 + 1;
LABEL_38:
            *(_DWORD *)(a1 + ++*(_DWORD *)(result + 36) = v10 | 8;
            uint64_t v16 = *(void **)(a1 + 24);
            if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              uint64_t v16 = operator new(0x18uLL);
              v16[1] = 0LL;
              unsigned int v16[2] = 0LL;
              *uint64_t v16 = 0LL;
              *(void *)(a1 + 24) = v16;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
            if (!(_DWORD)result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
              uint64_t result = 1LL;
              *((_BYTE *)this + ++*(_DWORD *)(result + 36) = 1;
              return result;
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_34;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v10 = *(_DWORD *)(a1 + 36);
        goto LABEL_38;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1006D98C0( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_1006D9954(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_35;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    LODWORD(v4) = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 36);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    LODWORD(v4) = v4 + v11 + v7 + 1;
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    LODWORD(v4) = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      LODWORD(v4) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 36);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    LODWORD(v4) = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_1006D9A8C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006D9AD8()
{
  return 1LL;
}

void *sub_1006D9AE0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorTimerEvent");
}

void sub_1006D9AF0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc",  5423LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 5) {
        sub_101243A7C();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 6) {
        sub_101243A54();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      char v8 = *(char **)(a1 + 16);
      if (!v8)
      {
        char v8 = (char *)operator new(0x58uLL);
        *(void *)char v8 = off_101849DB0;
        *((void *)v8 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v8 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v8 + 19) = 0;
        *((_DWORD *)v8 + 20) = 0;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((_WORD *)v8 + ++*(_DWORD *)(result + 36) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1578 + 16);
      }
      sub_1006D23E8((uint64_t)v8, v9);
    }
  }

void sub_1006D9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1006D9C38(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10184A5A8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1578 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1006D9C8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1006D9CA0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1578;
  if (!qword_1019A1578)
  {
    sub_1006D13FC(0LL, a2, a3, a4);
    return qword_1019A1578;
  }

  return result;
}

void *sub_1006D9CCC()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_10184A5A8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1006D9CF4(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_1006D27D0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1006D9D30( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          uint64_t v9 = (char *)*((void *)this + 1);
          if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v10 = v27;
          }

          else
          {
            unsigned int v10 = *v9;
            *((void *)this + 1) = v9 + 1;
          }

          if (v10 <= 4)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v10;
          }

          char v14 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v14 < v11 && *v14 == 16)
          {
            uint64_t v12 = v14 + 1;
            *((void *)this + 1) = v12;
            goto LABEL_28;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_28:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v26;
        }

        else
        {
          unsigned int v15 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unint64_t v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_1006DA008( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1578 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_1006DA090(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1578 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D3008(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_1006DA188(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1006DA1D4()
{
  return 1LL;
}

void *sub_1006DA1DC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.RegionMonitoring.ConvergingStateEvent");
}

void *sub_1006DA1EC()
{
  uint64_t v0 = operator new(0x40uLL);
  sub_1001D29D4((uint64_t)v0);
  return v0;
}

void sub_1006DA218(_Unwind_Exception *a1)
{
}

uint64_t sub_1006DA230(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  uint64_t v4 = (char *)operator new(0x80uLL);
  sub_10030ABE8((uint64_t)v4, (uint64_t)v3, "fenceEventCache", 1, 0, 1);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 16) = 0x4105180000000000LL;
  *(_DWORD *)(a1 + 24) = 100;
  sub_10030AC8C(v4, (uint64_t)__p);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10184A7D8);
  }
  uint64_t v5 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = __p;
    if (v12 < 0) {
      int v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#FenceMetrics created store at path %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184A7D8);
    }
    uint64_t v8 = __p;
    if (v12 < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    int v13 = 136315138;
    char v14 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#FenceMetrics created store at path %s",  (const char *)&v13);
    unsigned int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFencePersistentCache::CLFencePersistentCache(id<CLIntersiloUniverse>)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1006DA468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DA4A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1006DA4D4(uint64_t a1, int a2, double a3)
{
  double v13 = a3;
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10184A7D8);
  }
  int v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v19 = a2;
    __int16 v20 = 2048;
    double v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#FenceMetrics marking converging state session result, %d, time, %f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184A7D8);
    }
    int v14 = 67109376;
    int v15 = a2;
    __int16 v16 = 2048;
    double v17 = a3;
    LODWORD(v12) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#FenceMetrics marking converging state session result, %d, time, %f",  &v14,  v12);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFencePersistentCache::markConvergingStateSessionResult(CFAbsoluteTime, CLFenceConvergingStateSessionResult)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if ((a2 - 1) >= 7)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184A7D8);
    }
    int v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v19 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "#FenceMetrics unrecognized converging state session result %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184A7D8);
      }
      int v14 = 67109120;
      int v15 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "#FenceMetrics unrecognized converging state session result %d",  &v14);
      int v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFencePersistentCache::markConvergingStateSessionResult(CFAbsoluteTime, CLFenceConvergingStateSessionResult)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  else
  {
    sub_1002AE674( *(void *)(a1 + 8),  (const char *)-[__CFString UTF8String](*(&off_10184A7F8 + a2 - 1), "UTF8String"),  &v13);
    (*(void (**)(void))(**(void **)(a1 + 8) + 944LL))(*(void *)(a1 + 8));
  }

uint64_t sub_1006DA834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)a2 = sub_1006DA928(a1, @"CLFenceConvergingStateSessionStartedKey", a3, a4);
  *(_DWORD *)(a2 + 4) = sub_1006DA928(a1, @"CLFenceConvergingStateSessionSucceededEntryKey", a3, a4);
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = sub_1006DA928(a1, @"CLFenceConvergingStateSessionFailedTimeoutKey", a3, a4);
  *(_DWORD *)(a2 + 12) = sub_1006DA928(a1, @"CLFenceConvergingStateSessionFailedExitedAreaKey", a3, a4);
  *(_DWORD *)(a2 + 16) = sub_1006DA928(a1, @"CLFenceConvergingStateSessionNotStartedBudgetKey", a3, a4);
  *(_DWORD *)(a2 + 20) = sub_1006DA928(a1, @"CLFenceConvergingStateSessionNotStartedInsideKey", a3, a4);
  uint64_t result = sub_1006DA928(a1, @"CLFenceConvergingStateEnteredSignificantFenceKey", a3, a4);
  *(_DWORD *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1006DA928(uint64_t a1, void *a2, double a3, double a4)
{
  int v8 = sub_1002AF124(*(void *)(a1 + 8), (const char *)[a2 UTF8String]);
  if (v8 < 1) {
    return 0LL;
  }
  int v9 = v8;
  uint64_t v10 = 0LL;
  for (int i = 0; i != v9; ++i)
  {
    double v20 = 0.0;
    if (sub_1002A82BC(*(void *)(a1 + 8), (const char *)[a2 UTF8String], &v20))
    {
      BOOL v12 = v20 <= a4 && v20 >= a3;
      uint64_t v10 = (v10 + v12);
    }

    else
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184A7D8);
      }
      double v13 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
      {
        id v14 = [a2 UTF8String];
        *(_DWORD *)std::string buf = 136315394;
        id v26 = v14;
        __int16 v27 = 1024;
        int v28 = i;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "failed to retrieve value for key, %s, at index, %d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10184A7D8);
        }
        uint64_t v15 = qword_101934878;
        id v16 = [a2 UTF8String];
        int v21 = 136315394;
        id v22 = v16;
        __int16 v23 = 1024;
        int v24 = i;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  16LL,  "failed to retrieve value for key, %s, at index, %d",  (const char *)&v21,  18);
        unsigned int v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLFencePersistentCache::countEntriesForTimeWindow(NSString *, const CFAbsoluteTime, const CFAbsoluteTime) const",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }
    }
  }

  return v10;
}

uint64_t sub_1006DABB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6 = +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierGregorian);
  int v7 = -[NSCalendar startOfDayForDate:]( v6,  "startOfDayForDate:",  +[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:", a3));
  -[NSDate timeIntervalSince1970]( -[NSCalendar dateByAddingUnit:value:toDate:options:]( v6,  "dateByAddingUnit:value:toDate:options:",  16LL,  -1LL,  v7,  0LL),  "timeIntervalSince1970");
  double v9 = v8;
  -[NSDate timeIntervalSince1970](v7, "timeIntervalSince1970");
  return sub_1006DA834(a1, a2, v9, v10);
}

id sub_1006DAC58(uint64_t a1, double a2, double a3)
{
  v16[0] = @"CLFenceConvergingStateSessionStartedKey";
  v16[1] = @"CLFenceConvergingStateSessionSucceededEntryKey";
  unsigned int v16[2] = @"CLFenceConvergingStateSessionFailedTimeoutKey";
  v16[3] = @"CLFenceConvergingStateSessionFailedExitedAreaKey";
  _DWORD v16[4] = @"CLFenceConvergingStateSessionNotStartedBudgetKey";
  v16[5] = @"CLFenceConvergingStateSessionNotStartedInsideKey";
  v16[6] = @"CLFenceConvergingStateEnteredSignificantFenceKey";
  int v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 7LL);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id result = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
  if (result)
  {
    id v8 = result;
    uint64_t v9 = *(void *)v12;
    do
    {
      double v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        sub_1006DADB0(a1, *(void **)(*((void *)&v11 + 1) + 8LL * (void)v10), a2, a3);
        double v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id result = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
      id v8 = result;
    }

    while (result);
  }

  return result;
}

uint64_t sub_1006DADB0(uint64_t a1, void *a2, double a3, double a4)
{
  int v8 = sub_1002AF124(*(void *)(a1 + 8), (const char *)[a2 UTF8String]);
  if (v8 >= 1)
  {
    int v10 = v8;
    uint64_t v11 = 0LL;
    double v12 = a3 - a4;
    do
    {
      if (sub_1002A82BC(*(void *)(a1 + 8), (const char *)[a2 UTF8String], &v20))
      {
        v9.n128_f64[0] = v20;
        if (v20 <= v12)
        {
          sub_1002A667C(*(void *)(a1 + 8), (const char *)objc_msgSend(a2, "UTF8String", v20), v11);
          --v10;
        }

        else
        {
          uint64_t v11 = (v11 + 1);
        }
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10184A7D8);
        }
        __int128 v13 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
        {
          id v14 = [a2 UTF8String];
          *(_DWORD *)std::string buf = 136315394;
          id v26 = v14;
          __int16 v27 = 1024;
          int v28 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "failed retrieve value for key, %s, index, %d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_10184A7D8);
          }
          uint64_t v15 = qword_101934878;
          id v16 = [a2 UTF8String];
          int v21 = 136315394;
          id v22 = v16;
          __int16 v23 = 1024;
          int v24 = v11;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  17LL,  "failed retrieve value for key, %s, index, %d",  (const char *)&v21,  18);
          unsigned int v18 = (uint8_t *)v17;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFencePersistentCache::prune(NSString *, CFAbsoluteTime, CFTimeInterval)",  "%s\n",  v17);
          if (v18 != buf) {
            free(v18);
          }
        }
      }
    }

    while ((int)v11 < v10);
  }

  return (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 944LL))(*(void *)(a1 + 8), v9);
}

void sub_1006DB04C(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1006DB11C(id a1)
{
  qword_101998030 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSimulatedLocationProviderSilo");
}

uint64_t sub_1006DB1D0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1006DB398;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101998050 != -1) {
    dispatch_once(&qword_101998050, block);
  }
  return qword_1019A1580;
}

void sub_1006DB370(id a1)
{
  if ((sub_1004F64FC() & 0x2000) != 0) {
    byte_101998040 = 1;
  }
}

uint64_t sub_1006DB398(uint64_t a1)
{
  uint64_t v2 = operator new(0x78uLL);
  uint64_t result = sub_100479C24((uint64_t)v2, "simulated", *(void **)(a1 + 32));
  *uint64_t v2 = &off_10184A880;
  qword_1019A1580 = (uint64_t)v2;
  return result;
}

void sub_1006DB3E4(_Unwind_Exception *a1)
{
}

void sub_1006DB3FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10047A1C0(a1);
  operator delete(v1);
}

uint64_t sub_1006DB410(_BYTE *a1, _DWORD *a2)
{
  if (!*a2 && !a1[109])
  {
    int v5 = 9;
    (*(void (**)(_BYTE *, int *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, &v5, 1LL, 0xFFFFFFFFLL);
  }

  return 1LL;
}

uint64_t sub_1006DB478(char *a1, int a2)
{
  if (a2)
  {
    int v6 = 9;
    return (*(uint64_t (**)(char *, int *))(*(void *)a1 + 120LL))(a1, &v6);
  }

  else
  {
    int v5 = 9;
    return (*(uint64_t (**)(char *, int *, uint64_t, uint64_t))(*(void *)a1 + 144LL))( a1,  &v5,  1LL,  0xFFFFFFFFLL);
  }

void sub_1006DB4E8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLSimulatedLocationProvider");
  sub_10047D890((uint64_t)v8, (uint64_t *)__p, a3, a1, a2);
  *int v8 = &off_10184A9C8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006DB580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1006DB5AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v10 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLSimulatedLocationProvider");
  sub_10047D8C8((uint64_t)v10, a1, (uint64_t *)__p, a4, a2, a3);
  *char v10 = &off_10184A9C8;
  *a5 = v10;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006DB64C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

id sub_1006DB678(uint64_t a1)
{
  return objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLSimulatedLocationProvider"),  "syncgetDoSync:",  a1);
}

void sub_1006DB6B0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id sub_1006DB6DC(uint64_t a1)
{
  if (!objc_opt_class(&OBJC_CLASS___BMLocationMicroLocationVisit)) {
    return 0LL;
  }
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  id v3 = v2;
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = (void *)(a1 + 16);
  if (v4 != (void *)(a1 + 16))
  {
    uint64_t v6 = byte_1019A0A07;
    uint64_t v7 = *((void *)&xmmword_1019A09F0 + 1);
    unsigned int v41 = v5;
    unsigned int v42 = v2;
    while (1)
    {
      int v8 = (const void **)(v4 + 4);
      uint64_t v9 = *((unsigned __int8 *)v4 + 55);
      size_t v10 = v4[5];
      if ((v9 & 0x80u) == 0LL) {
        uint64_t v11 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v11 = v4[5];
      }
      if ((v6 & 0x80u) == 0LL) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v7;
      }
      if (v11 == v12)
      {
        if ((v6 & 0x80u) == 0LL) {
          __int128 v13 = &xmmword_1019A09F0;
        }
        else {
          __int128 v13 = (__int128 *)xmmword_1019A09F0;
        }
        if ((v9 & 0x80) != 0)
        {
          int v16 = memcmp(*v8, v13, v10);
          int v8 = (const void **)(v4 + 4);
          if (!v16) {
            goto LABEL_34;
          }
        }

        else
        {
          if (!*((_BYTE *)v4 + 55)) {
            goto LABEL_34;
          }
          id v14 = (unsigned __int8 *)(v4 + 4);
          uint64_t v15 = *((unsigned __int8 *)v4 + 55);
          while (*v14 == *(unsigned __int8 *)v13)
          {
            ++v14;
            __int128 v13 = (__int128 *)((char *)v13 + 1);
            if (!--v15) {
              goto LABEL_34;
            }
          }
        }
      }

      uint64_t v17 = byte_1019A0A37;
      if (byte_1019A0A37 < 0) {
        uint64_t v17 = qword_1019A0A28;
      }
      if (v11 != v17) {
        goto LABEL_47;
      }
      unsigned int v18 = byte_1019A0A37 >= 0 ? &qword_1019A0A20 : (uint64_t *)qword_1019A0A20;
      if ((v9 & 0x80) == 0) {
        break;
      }
      double v20 = v8;
      int v21 = memcmp(*v8, v18, v10);
      int v8 = v20;
      if (!v21) {
        goto LABEL_34;
      }
LABEL_47:
      int v37 = (void *)v4[1];
      if (v37)
      {
        do
        {
          int v38 = v37;
          int v37 = (void *)*v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          int v38 = (void *)v4[2];
          BOOL v39 = *v38 == (void)v4;
          uint64_t v4 = v38;
        }

        while (!v39);
      }

      uint64_t v4 = v38;
      if (v38 == v5) {
        return v3;
      }
    }

    if ((_DWORD)v9)
    {
      int v19 = v8;
      while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
      {
        int v19 = (const void **)((char *)v19 + 1);
        unsigned int v18 = (uint64_t *)((char *)v18 + 1);
        if (!--v9) {
          goto LABEL_34;
        }
      }

      goto LABEL_47;
    }

id sub_1006DBB28(double *a1)
{
  id result = (id)objc_opt_class(&OBJC_CLASS___BMMicroLocationRestrictedLocalizationEvent);
  if (result)
  {
    id result = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    id v3 = (double *)*((void *)a1 + 1);
    if (v3 != a1 + 2)
    {
      double v28 = result;
      double v4 = *a1;
      while (1)
      {
        uint64_t v5 = *((unsigned __int8 *)v3 + 55);
        if ((v5 & 0x80u) == 0LL) {
          uint64_t v6 = *((unsigned __int8 *)v3 + 55);
        }
        else {
          uint64_t v6 = *((void *)v3 + 5);
        }
        uint64_t v7 = byte_1019A0A1F;
        if (byte_1019A0A1F < 0) {
          uint64_t v7 = *((void *)&xmmword_1019A0A08 + 1);
        }
        if (v6 != v7) {
          goto LABEL_34;
        }
        int v8 = (const void **)(v3 + 4);
        if (byte_1019A0A1F >= 0) {
          uint64_t v9 = &xmmword_1019A0A08;
        }
        else {
          uint64_t v9 = (__int128 *)xmmword_1019A0A08;
        }
        if ((v5 & 0x80) != 0)
        {
          if (memcmp(*v8, v9, *((void *)v3 + 5))) {
            goto LABEL_34;
          }
        }

        else if (*((_BYTE *)v3 + 55))
        {
          while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v9)
          {
            int v8 = (const void **)((char *)v8 + 1);
            uint64_t v9 = (__int128 *)((char *)v9 + 1);
            if (!--v5) {
              goto LABEL_19;
            }
          }

          goto LABEL_34;
        }

void sub_1006DBE78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006DBEC8(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t **sub_1006DBEF4@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  id v3 = *result;
  double v4 = result[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    id result = (uint64_t **)sub_1002DFB20(a2, &v5, &v5);
    v3 += 11;
  }

  return result;
}

void sub_1006DBF5C(_Unwind_Exception *a1)
{
}

void sub_1006DBF70()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1006DC00C(_Unwind_Exception *a1)
{
}

void sub_1006DC024()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1006DC0B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1006DC0C8(uint64_t a1)
{
  uint64_t v2 = 0LL;
  uint64_t result = 0LL;
  int v4 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(a1 + 12);
    }

    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)a1)++;
      unsigned int v5 = *v6;
      *(_BYTE *)(a1 + 12) = v5;
      int v4 = 7;
    }

    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
    result |= (unint64_t)((v5 >> v4) & 1) << v2++;
  }

  while (v2 != 64);
  return result;
}

uint64_t sub_1006DC124(uint64_t result, int a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = result;
  int v3 = 0;
  LODWORD(result) = 0;
  int v4 = *(_DWORD *)(v2 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(v2 + 12);
    }

    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)v2)++;
      unsigned int v5 = *v6;
      *(_BYTE *)(v2 + 12) = v5;
      int v4 = 7;
    }

    *(_DWORD *)(v2 + _Block_object_dispose(va, 8) = v4;
    uint64_t result = (((v5 >> v4) & 1) << v3++) | result;
  }

  while (a2 != v3);
  return result;
}

uint64_t sub_1006DC18C(uint64_t a1)
{
  int v2 = sub_1006DC124(a1, 4);
  int v3 = ((v2 << 28 >> 31) & 0xFFFFFFF0) + v2;
  if (v3 == -8)
  {
    uint64_t result = sub_1006DC0C8(a1);
    uint64_t v5 = *(void *)(a1 + 16);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t result = v5 + v3 + *(void *)(a1 + 24);
  }

  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = result - v5;
  return result;
}

float sub_1006DC1E8@<S0>(int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = sub_1006DC18C((uint64_t)a1);
  sub_1006DC2A8((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  *(float32x2_t *)a3 = vmul_f32(vcvt_f32_s32(v9), (float32x2_t)vdup_n_s32(0x39800000u));
  float result = (float)v10 * 0.00024414;
  *(float *)(a3 + _Block_object_dispose(va, 8) = result;
  *(void *)(a3 + 12) = v7;
  return result;
}

uint64_t sub_1006DC2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  int v7 = byte_10130EEFA[(int)sub_1006DC124(a1, 3)];
  do
  {
    uint64_t result = sub_1006DC124(a1, v7);
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4LL;
  }

  while (v6 != 12);
  return result;
}

uint64_t sub_1006DC344(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 0;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

float32x4_t sub_1006DC35C@<Q0>(int *a1@<X0>, _DWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = sub_1006DC18C((uint64_t)a1);
  sub_1006DC408((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  float32x4_t result = vmulq_f32(vcvtq_f32_s32(v9), (float32x4_t)vdupq_n_s32(0x3D800000u));
  *a3 = result;
  a3[1].i64[0] = v7;
  return result;
}

uint64_t sub_1006DC408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  int v7 = byte_10130EF02[(int)sub_1006DC124(a1, 3)];
  do
  {
    uint64_t result = sub_1006DC124(a1, v7);
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4LL;
  }

  while (v6 != 16);
  return result;
}

double sub_1006DC4A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sub_1006DC4B8(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 760))
  {
    *(double *)(a1 + 76_Block_object_dispose(va, 8) = *(double *)(a1 + 768) + a2 - *(double *)(a1 + 752);
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184AA50);
    }
    int v3 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "converging state, tried to mark gnss ended, but never started",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184AA50);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "converging state, tried to mark gnss ended, but never started",  v6,  2);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLFenceConvergenceAttempt::markGnssEnded(CFAbsoluteTime)", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

  if (*(_BYTE *)(a1 + 760)) {
    *(_BYTE *)(a1 + 760) = 0;
  }
}

double sub_1006DC674(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

BOOL sub_1006DC69C(int *a1)
{
  return *((void *)a1 + 8) < (unint64_t)*a1;
}

void *sub_1006DC6B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[8];
  if (v2
    && (unint64_t v3 = v2 + result[7] - 1,
        uint64_t v4 = *(void *)(result[4] + ((v3 >> 5) & 0x7FFFFFFFFFFFFF8LL)),
        uint64_t v5 = *(void *)(v4 + 16LL * v3),
        !*(_BYTE *)(v5 + 24)))
  {
    uint64_t v6 = *(void *)(v4 + 16LL * v3 + 8);
    *a2 = v5;
    a2[1] = v6;
    if (v6)
    {
      int v7 = (unint64_t *)(v6 + 8);
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

BOOL sub_1006DC718(void *a1)
{
  uint64_t v1 = a1[8];
  return v1
      && *(_BYTE *)(*(void *)(*(void *)(a1[4] + (((unint64_t)(v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL))
}

void sub_1006DC760(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1006DC7DC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10130EF2C;
      v1[3] = unk_10130EF3C;
      v1[4] = xmmword_10130EF4C;
      v1[0] = xmmword_10130EF0C;
      v1[1] = unk_10130EF1C;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1006DC8B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1006DC8C8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101998058, (void *)&_mh_execute_header);
}

void sub_1006DC90C(dispatch_queue_s *a1, uint64_t a2, const void *a3, int a4, int a5)
{
  size_t v9 = (a5 * a4);
  int v10 = operator new[](v9);
  memcpy(v10, a3, v9);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1006DC9A8;
  block[3] = &unk_10184AA78;
  block[4] = a2;
  void block[5] = v10;
  int v12 = a4;
  dispatch_async(a1, block);
}

void sub_1006DC9A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1006DC9EC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_10184AAA8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = a3;
  uint64_t v5 = a3;
  BOOL v6 = !is_mul_ok(a3, 0x50uLL);
  uint64_t v7 = 80LL * a3;
  BOOL v8 = __CFADD__(v7, 16LL);
  size_t v9 = v7 + 16;
  if (v8) {
    BOOL v6 = 1;
  }
  if (v6) {
    size_t v10 = -1LL;
  }
  else {
    size_t v10 = v9;
  }
  uint64_t v11 = operator new[](v10);
  *uint64_t v11 = 80LL;
  v11[1] = v5;
  if (a3)
  {
    int v12 = v11 + 11;
    uint64_t v13 = 80 * v5;
    do
    {
      *(v12 - 4) = 0LL;
      *(v12 - _Block_object_dispose(va, 8) = 0LL;
      *(v12 - 7) = 0LL;
      *(v12 - 9) = 0LL;
      *(v12 - 5) = v12 - 4;
      *(v12 - 3) = 0LL;
      *(v12 - 2) = v12 - 2;
      *(v12 - 1) = v12 - 2;
      void *v12 = 0LL;
      v12 += 10;
      v13 -= 80LL;
    }

    while (v13);
  }

  *(void *)(a1 + 16) = v11 + 2;
  return a1;
}

void *sub_1006DCAA8(void *a1)
{
  *a1 = off_10184AAA8;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 80 * v3;
      do
      {
        sub_1001B4C40((void *)(v2 + v4 - 24));
        sub_100008390(v2 + v4 - 48, *(void **)(v2 + v4 - 40));
        v4 -= 80LL;
      }

      while (v4);
    }

    operator delete[]((void *)(v2 - 16));
  }

  return a1;
}

void sub_1006DCB2C(void *a1)
{
  uint64_t v1 = sub_1006DCAA8(a1);
  operator delete(v1);
}

uint64_t sub_1006DCB40(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v13 = 0LL;
  double v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  uint64_t v8 = sub_1006E27E8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1006DCC0C;
  void v11[3] = &unk_10184AAE0;
  v11[4] = &v13;
  v11[5] = a1;
  int v12 = a2;
  v11[6] = a3;
  *(double *)&v11[7] = a4;
  sub_1006E28B8(v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1006DCBF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_1006DCC0C(uint64_t a1)
{
  BOOL result = sub_1006DCC48(*(void **)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), (double *)(a1 + 56));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

BOOL sub_1006DCC48(void *a1, uint64_t a2, uint64_t a3, double *a4)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
  double v9 = *a4;
  double v10 = *a4 * (double)v8;
  double v38 = v10;
  if (v9 != 0.0)
  {
    if (v9 >= 0.0)
    {
      uint64_t v16 = a1[2];
      if (v10 > 0.0
        && ((uint64_t v17 = v16 + 80LL * (int)a2, v19 = *(double *)(v17 + 8), v18 = (double *)(v17 + 8), v20 = v19, v10 < v19)
         || v20 <= 0.0))
      {
        *id v18 = v10;
        double v22 = (*(double (**)(void *, uint64_t, double *))(*a1 + 24LL))(a1, a2, &v38);
        uint64_t v16 = a1[2];
        *(double *)(v16 + 80LL * (int)a2 + 24) = v22;
        double v21 = *a4;
        double v10 = v38;
      }

      else
      {
        double v21 = v9;
      }

      uint64_t v23 = (double *)(v16 + 80LL * (int)a2);
      if (v21 < *v23 || *v23 <= 0.0)
      {
        *uint64_t v23 = v21;
        double v27 = (*(double (**)(void *, uint64_t, double *))(*a1 + 16LL))(a1, a2, a4);
        uint64_t v28 = a1[2] + 80LL * (int)a2;
        *(double *)(v28 + 16) = v27;
        *(void *)std::string buf = a3;
        *(void *)int v45 = &_mh_execute_header;
        *(double *)&v45[8] = v21;
        *(double *)&v45[16] = v10;
        sub_1006DE124((uint64_t **)(v28 + 32), (unint64_t *)buf, (uint64_t)buf);
        sub_1006DDD0C((uint64_t)a1, a2);
      }

      else
      {
        if (*(double *)(v16 + 80LL * (int)a2 + 16) <= 0.0)
        {
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184AB10);
          }
          id v24 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10184AB10);
            }
            LOWORD(v39[0]) = 0;
            int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!",  v39,  2);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)",  "%s\n",  v35);
          }
        }

        uint64_t v25 = a1[2] + 80LL * (int)a2;
        unsigned int v26 = llround(*a4 / *(double *)(v25 + 16));
        *(void *)std::string buf = a3;
        *(_DWORD *)int v45 = 0;
        *(_DWORD *)&v45[4] = v26;
        *(double *)&v45[8] = v21;
        *(double *)&v45[16] = v10;
        sub_1006DE124((uint64_t **)(v25 + 32), (unint64_t *)buf, (uint64_t)buf);
      }

      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 40LL))( a1,  a2,  *(void *)(a1[2] + 80LL * (int)a2 + 48) - 1LL);
    }

    else
    {
      uint64_t v11 = (void *)(a1[2] + 80LL * (int)a2);
      int v12 = operator new(0x18uLL);
      _DWORD v12[2] = a3;
      uint64_t v13 = v11[7];
      v11 += 7;
      void *v12 = v13;
      v12[1] = v11;
      *(void *)(v13 + _Block_object_dispose(va, 8) = v12;
      *uint64_t v11 = v12;
      ++v11[2];
      (*(void (**)(void *, uint64_t))(*a1 + 32LL))(a1, a2);
    }

    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    id v29 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      double v30 = *a4;
      double v31 = 0.0;
      if (*a4 > 0.0) {
        double v31 = 1.0 / v30;
      }
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)int v45 = 2048;
      *(double *)&v45[2] = v30;
      *(_WORD *)&v45[10] = 2048;
      *(double *)&v45[12] = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)",  buf,  0x1Cu);
    }

    if (!sub_1002921D0(115, 2)) {
      return v9 != 0.0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    double v33 = *a4;
    double v34 = 0.0;
    if (*a4 > 0.0) {
      double v34 = 1.0 / v33;
    }
    v39[0] = 67109632;
    v39[1] = a2;
    __int16 v40 = 2048;
    double v41 = v33;
    __int16 v42 = 2048;
    double v43 = v34;
    LODWORD(v++*(_DWORD *)(result + 36) = 28;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)",  v39,  v36,  v37);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)",  "%s\n",  v15);
LABEL_41:
    return v9 != 0.0;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AB10);
  }
  double v14 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    LOWORD(v39[0]) = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.",  v39,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)",  "%s\n",  v15);
    goto LABEL_41;
  }

  return v9 != 0.0;
}

void sub_1006DD2A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_1006E27E8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  __int128 v7[2] = sub_1006DD314;
  void v7[3] = &unk_101835F28;
  int v8 = a2;
  _DWORD v7[4] = a1;
  double v7[5] = a3;
  sub_1006E28B8(v6, (uint64_t)v7);
}

uint64_t *sub_1006DD314(uint64_t a1)
{
  return sub_1006DD324(*(void **)(a1 + 32), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

uint64_t *sub_1006DD324(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1[2];
  int v6 = a2;
  uint64_t v7 = v5 + 80LL * (int)a2;
  double v10 = *(void **)(v7 + 40);
  int v8 = (uint64_t *)(v7 + 40);
  double v9 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v8;
  do
  {
    unint64_t v12 = v9[4];
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      double v14 = v9;
    }
    else {
      double v14 = v9 + 1;
    }
    if (v13) {
      uint64_t v11 = v9;
    }
    double v9 = (void *)*v14;
  }

  while (*v14);
  if (v11 != v8 && v11[4] <= a3)
  {
    sub_1000087E8((uint64_t **)v8 - 1, v11);
    operator delete(v11);
    double v19 = sub_1006DDFD0((uint64_t)a1, a2);
    double v28 = v19;
    double v20 = sub_1006DE064((uint64_t)a1, a2);
    double v27 = v20;
    uint64_t v21 = a1[2];
    double v22 = (double *)(v21 + 80LL * v6);
    if (v19 != *v22)
    {
      *double v22 = v19;
      *(double *)(a1[2] + 80LL * v6 + 16) = (*(double (**)(void *, uint64_t, double *))(*a1 + 16LL))( a1,  a2,  &v28);
      sub_1006DDD0C((uint64_t)a1, a2);
      uint64_t v21 = a1[2];
    }

    uint64_t v23 = v21 + 80LL * v6;
    double v25 = *(double *)(v23 + 8);
    id v24 = (double *)(v23 + 8);
    if (v20 != v25)
    {
      double *v24 = v20;
      double v26 = (*(double (**)(void *, uint64_t, double *))(*a1 + 24LL))(a1, a2, &v27);
      uint64_t v21 = a1[2];
      *(double *)(v21 + 80LL * v6 + 24) = v26;
    }

    return (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40LL))( a1,  a2,  *(void *)(v21 + 80LL * v6 + 48) + 1LL);
  }

  else
  {
LABEL_12:
    uint64_t v15 = (void *)(v5 + 80LL * (int)a2);
    uint64_t v16 = v15 + 7;
    for (BOOL result = (uint64_t *)v15[8]; result != v16; BOOL result = (uint64_t *)result[1])
    {
      if (result[2] == a3)
      {
        if (result != v16)
        {
          uint64_t v18 = *result;
          *(void *)(v18 + _Block_object_dispose(va, 8) = result[1];
          *(void *)result[1] = v18;
          --v15[9];
          operator delete(result);
          return (uint64_t *)(*(uint64_t (**)(void *, uint64_t, void))(*a1 + 32LL))( a1,  a2,  *(void *)(a1[2] + 80LL * v6 + 72));
        }

        return result;
      }
    }
  }

  return result;
}

uint64_t sub_1006DD528(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = a2;
  uint64_t v10 = v8 + 80LL * (int)a2;
  uint64_t v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 40))
  {
    do
    {
      int v12 = *((_DWORD *)v11 + 10);
      if (!v12)
      {
        BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v11[4] + 16LL))( v11[4],  a2,  a3,  a4);
        int v12 = *((_DWORD *)v11 + 10);
      }

      *((_DWORD *)v11 + 10) = (v12 + 1) % *((_DWORD *)v11 + 11);
      BOOL v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          double v14 = v13;
          BOOL v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          double v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          uint64_t v11 = v14;
        }

        while (!v15);
      }

      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v11 = v14;
    }

    while (v14 != (void *)(v8 + 80LL * v9 + 40));
  }

  uint64_t v16 = v8 + 80LL * v9;
  uint64_t v17 = *(void *)(v16 + 64);
  if (v17 != v16 + 56)
  {
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v17 + 16) + 16LL))( *(void *)(v17 + 16),  a2,  a3,  a4);
      uint64_t v17 = *(void *)(v17 + 8);
    }

    while (v17 != *(void *)(v7 + 16) + 80LL * v9 + 56);
  }

  return result;
}

uint64_t sub_1006DD65C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = a2;
  uint64_t v10 = v8 + 80LL * (int)a2;
  uint64_t v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 40))
  {
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v11[4] + 16LL))( v11[4],  a2,  a3,  a4);
      *((_DWORD *)v11 + 10) = (*((_DWORD *)v11 + 10) + 1) % *((_DWORD *)v11 + 11);
      int v12 = (void *)v11[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          int v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          BOOL v13 = (void *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }

        while (!v14);
      }

      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v11 = v13;
    }

    while (v13 != (void *)(v8 + 80LL * v9 + 40));
  }

  uint64_t v15 = v8 + 80LL * v9;
  uint64_t v16 = *(void *)(v15 + 64);
  if (v16 != v15 + 56)
  {
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v16 + 16) + 16LL))( *(void *)(v16 + 16),  a2,  a3,  a4);
      uint64_t v16 = *(void *)(v16 + 8);
    }

    while (v16 != *(void *)(v7 + 16) + 80LL * v9 + 56);
  }

  return result;
}

uint64_t sub_1006DD784(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(void *)(*(void *)(a1 + 16) + 80LL * a2 + 48);
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AB10);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Unknown notification %d",  v7);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 0LL, "ssize_t CLMotionNotifier::numberOfClients(int)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  return -1LL;
}

uint64_t sub_1006DD950(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(void *)(*(void *)(a1 + 16) + 80LL * a2 + 72);
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AB10);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    v6[0] = 67109120;
    v6[1] = a2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Unknown notification %d",  v6);
    sub_10029211C("Generic", 1LL, 0, 0LL, "ssize_t CLMotionNotifier::numberOfSpectators(int)", "%s\n", v5);
  }

  return -1LL;
}

double sub_1006DDB1C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(double *)(*(void *)(a1 + 16) + 80LL * a2);
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AB10);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }

  double v3 = -1.0;
  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AB10);
    }
    v7[0] = 67109120;
    v7[1] = a2;
    int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Unknown notification %d",  v7);
    sub_10029211C("Generic", 1LL, 0, 0LL, "CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)", "%s\n", v6);
  }

  return v3;
}

uint64_t sub_1006DDCF4(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 80LL * a2 + 32);
}

void sub_1006DDD0C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v2 + 80LL * a2;
  int v6 = *(void **)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v5 = v6;
  double v7 = *(double *)(v4 - 16);
  if (v7 <= 0.0)
  {
    if (v5 != (void *)(v4 + 8))
    {
      do
      {
        *((_DWORD *)v5 + 11) = 1;
        uint64_t v18 = (void *)v5[1];
        if (v18)
        {
          do
          {
            double v19 = v18;
            uint64_t v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            double v19 = (void *)v5[2];
            BOOL v15 = *v19 == (void)v5;
            uint64_t v5 = v19;
          }

          while (!v15);
        }

        uint64_t v5 = v19;
      }

      while (v19 != (void *)(v4 + 8));
    }
  }

  else if (v5 != (void *)(v2 + 80LL * a2 + 40))
  {
    do
    {
      if (v7 <= 0.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AB10);
        }
        uint64_t v10 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 80LL * a2 + 16);
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v23 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184AB10);
          }
          uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 80LL * a2 + 16);
          int v20 = 134217984;
          uint64_t v21 = v16;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f",  COERCE_DOUBLE(&v20));
          sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionNotifier::updateSamplePeriods(int)", "%s\n", v17);
        }
      }

      uint64_t v12 = *(void *)(a1 + 16);
      double v7 = *(double *)(v12 + 80LL * a2 + 16);
      *((_DWORD *)v5 + 11) = llround(*((double *)v5 + 6) / v7);
      BOOL v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          BOOL v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          BOOL v14 = (void *)v5[2];
          BOOL v15 = *v14 == (void)v5;
          uint64_t v5 = v14;
        }

        while (!v15);
      }

      uint64_t v5 = v14;
    }

    while (v14 != (void *)(v12 + 80LL * a2 + 40));
  }

double sub_1006DDFD0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + 80LL * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }

  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[6];
      if (v6 < result && v6 > 0.0) {
        double result = v3[6];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = *(double **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }

        while (!v10);
      }

      uint64_t v3 = v9;
    }

    while (v9 != v4);
  }

  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

double sub_1006DE064(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + 80LL * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }

  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[7];
      if (v6 < result && v6 > 0.0) {
        double result = v3[7];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = *(double **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }

        while (!v10);
      }

      uint64_t v3 = v9;
    }

    while (v9 != v4);
  }

  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

void sub_1006DE0F8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t **sub_1006DE124(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  double v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        double v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        double v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_10:
    BOOL v10 = operator new(0x40uLL);
    _DWORD v10[4] = *(void *)a3;
    v10[5] = *(void *)(a3 + 8);
    *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 16);
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

void sub_1006DE290(id a1)
{
  qword_101998070 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLAuthSyncManagerSilo");
}

void sub_1006DE300(id a1)
{
  if (objc_opt_class(&OBJC_CLASS___IDSService))
  {
    sub_1004F2598();
    if (sub_1004F7500() || (sub_1004F2598(), sub_1001B9A1C()))
    {
      if (qword_101998090 != -1) {
        dispatch_once(&qword_101998090, &stru_10184AB70);
      }
      if (qword_101998098) {
        byte_101998080 = 1;
      }
    }
  }

void sub_1006DE3BC(id a1)
{
  qword_101998098 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync", 2);
}

__n128 sub_1006DE3E4(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a1 + _Block_object_dispose(va, 8) = result;
  *(_BYTE *)a1 = 0;
  return result;
}

void sub_1006DE3F4(uint64_t a1, double a2, double a3)
{
  if (a2 > a3 && a2 > 0.0 && a3 > 0.0)
  {
    *(double *)(a1 + _Block_object_dispose(va, 8) = a2;
    *(double *)(a1 + 16) = a3;
    *(_BYTE *)a1 = 1;
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_10184AB90);
    }
    uint64_t v5 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134284033;
      double v14 = a2;
      __int16 v15 = 2049;
      double v16 = a3;
      __int16 v17 = 2049;
      double v18 = a2 - a3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#VDR, CLGPSMachContConversion update with timestamp_gps_s, %{private}.3f, mach_continuous_s, %{private}.3f, GPSM achContDelta, %{private}.3f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_10184AB90);
      }
      int v7 = 134284033;
      double v8 = a2;
      __int16 v9 = 2049;
      double v10 = a3;
      __int16 v11 = 2049;
      double v12 = a2 - a3;
      double v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR, CLGPSMachContConversion update with timestamp_gps_s, %{private}.3f, mach_continuous_s, %{priv ate}.3f, GPSMachContDelta, %{private}.3f",  &v7,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGPSMachContConversion::Update(const double, const double)",  "%s\n",  v6);
    }
  }

BOOL sub_1006DE5F4(uint64_t a1, double *a2, double a3)
{
  *a2 = *(double *)(a1 + 8) - *(double *)(a1 + 16) + a3;
  return *(_BYTE *)a1 && vabdd_f64(a3, *(double *)(a1 + 16)) < 20000.0;
}

void sub_1006DE630(id a1)
{
  qword_101934958 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_1006DE65C(uint64_t a1, int a2, uint64_t a3, char a4)
{
  double v6 = (void *)sub_1006DE74C(a1, "CLWalkingSpeedCalRecorderDb", a2, a3, 1, 2.56);
  void *v6 = off_10184ABC0;
  v6[9] = off_10184AC80;
  v6[44] = off_10184ACD0;
  sub_100B14CF0(v6 + 45, 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 376), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 392), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 408), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 424), 0LL, 0LL);
  *(_BYTE *)(a1 + 440) = a4;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  *(void *)(a1 + 160) = -[CLWalkingSpeedCalCloudKitDelegate initWithWalkingSpeedCalRecorderDb:]( objc_alloc(&OBJC_CLASS___CLWalkingSpeedCalCloudKitDelegate),  "initWithWalkingSpeedCalRecorderDb:",  a1);
  return a1;
}

void sub_1006DE738(_Unwind_Exception *a1)
{
}

uint64_t sub_1006DE74C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  double v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_101826EF8;
  *(void *)a1 = off_10184ADA0;
  *(void *)(a1 + 72) = off_10184AE48;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10184ADA0;
  *(void *)(a1 + 72) = off_10184AE48;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 12000;
  *(void *)(a1 + 280) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 288));
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = &off_101826EF8;
  uint64_t v14 = a1 + 112;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v30 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v32 = 256;
  if (a3)
  {
    *(void *)(a1 + 224) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v29 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  double v16 = (int *)(a1 + 272);
  char v17 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 272));
  double v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if ((v17 & 1) == 0) {
    *double v16 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AE88);
  }
  uint64_t v21 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *v16;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AE88);
    }
    int v25 = *v16;
    v33[0] = 67109120;
    v33[1] = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v33);
    double v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = WalkingSpeedStri deCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  int v23 = HIBYTE(v32);
  *(void *)(a1 + 224) = 0xBFF0000000000000LL;
  if (v23)
  {
    if ((_BYTE)v32)
    {
      pthread_mutex_unlock(v31);
      return a1;
    }

    uint64_t v14 = v30;
    goto LABEL_3;
  }

  return a1;
}

void sub_1006DEB08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[35] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1005A8D88(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_1006DEBAC()
{
}

void *sub_1006DEBB4(void *a1)
{
  a1[9] = off_10184AE48;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10184ADA0;
  a1[35] = off_101826EC8;
  sub_1001B9C98(a1 + 36);
  sub_1005A8D88(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_1006DEC30(void *a1)
{
  *a1 = off_10184ABC0;
  a1[9] = off_10184AC80;
  a1[44] = off_10184ACD0;
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0LL;
  }

  return sub_1006DEBB4(a1);
}

void *sub_1006DEC84(uint64_t a1)
{
  return sub_1006DEC30((void *)(a1 - 72));
}

void *sub_1006DEC8C(uint64_t a1)
{
  return sub_1006DEC30((void *)(a1 - 352));
}

void sub_1006DEC94(void *a1)
{
  uint64_t v1 = sub_1006DEC30(a1);
  operator delete(v1);
}

void sub_1006DECA8(uint64_t a1)
{
  uint64_t v1 = sub_1006DEC30((void *)(a1 - 72));
  operator delete(v1);
}

void sub_1006DECC0(uint64_t a1)
{
  uint64_t v1 = sub_1006DEC30((void *)(a1 - 352));
  operator delete(v1);
}

uint64_t sub_1006DECD8(uint64_t a1)
{
  uint64_t v3 = (sqlite3_stmt *)sub_100019240(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }

  uint64_t v6 = v8;
  uint64_t v8 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1006DED68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DED90(uint64_t a1)
{
  return sub_1006DECD8(a1 - 72);
}

uint64_t sub_1006DED98(_DWORD *a1)
{
  LODWORD(result) = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152LL))(a1);
  a1[33] = result;
  return (int)result;
}

uint64_t sub_1006DEDC8(uint64_t a1)
{
  uint64_t v1 = a1 - 72;
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 72) + 152LL))(a1 - 72);
  *(_DWORD *)(v1 + 132) = result;
  return (int)result;
}

void *sub_1006DEDFC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "WalkingSpeedStrideCal");
}

void *sub_1006DEE0C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "WalkingSpeedStrideCal");
}

uint64_t sub_1006DEE1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120LL))(a1, a2, 0LL);
}

uint64_t sub_1006DEE2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 - 352) + 120LL))(a1 - 352, a2, 0LL);
}

uint64_t sub_1006DEE40(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 112;
  uint64_t v10 = v8 - 40;
  uint64_t v36 = v8;
  (*(void (**)(void))(v9 + 16))();
  __int16 v38 = 256;
  if ((sub_100D8A92C(v10) & 1) == 0)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_10184AD70);
    }
    uint64_t v29 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Database not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_10184AD70);
      }
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "Database not accessible",  &v35,  2);
      double v34 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLWalkingSpeedCalRecorderDb::queryCalsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<Wa lkingSpeedStrideCal> &) const",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    uint64_t v30 = 109LL;
    goto LABEL_32;
  }

  sub_100B14CF8((uint64_t *)(a1 + 424), &v35);
  *(_DWORD *)std::string buf = 0;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  if (a4 >= a3)
  {
    __int16 v11 = (sqlite3_stmt *)sub_100019240(v35);
    if (sub_1003B7480(v11, 1, a3))
    {
      double v12 = (sqlite3_stmt *)sub_100019240(v35);
      if (sub_1003B7480(v12, 2, a4))
      {
        while (!sub_1006DF244(&v35, (uint64_t)buf))
        {
          __int128 v13 = v40;
          __int128 v14 = v41;
          __int128 v15 = v42;
          char v17 = *(_OWORD **)(a2 + 8);
          unint64_t v16 = *(void *)(a2 + 16);
          if ((unint64_t)v17 >= v16)
          {
            double v19 = *(_OWORD **)a2;
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(void *)a2) >> 4);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x555555555555555LL) {
              sub_100007008();
            }
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v19) >> 4);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v23 = 0x555555555555555LL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              id v24 = (char *)sub_1000BB1F4(a2 + 16, v23);
              double v19 = *(_OWORD **)a2;
              char v17 = *(_OWORD **)(a2 + 8);
            }

            else
            {
              id v24 = 0LL;
            }

            int v25 = &v24[48 * v20];
            *(_OWORD *)int v25 = v13;
            *((_OWORD *)v25 + 1) = v14;
            *((_OWORD *)v25 + 2) = v15;
            double v26 = v25;
            if (v17 != v19)
            {
              do
              {
                __int128 v27 = *(v17 - 3);
                __int128 v28 = *(v17 - 1);
                *((_OWORD *)v26 - 2) = *(v17 - 2);
                *((_OWORD *)v26 - 1) = v28;
                *((_OWORD *)v26 - 3) = v27;
                v26 -= 48;
                v17 -= 3;
              }

              while (v17 != v19);
              double v19 = *(_OWORD **)a2;
            }

            double v18 = v25 + 48;
            *(void *)a2 = v26;
            *(void *)(a2 + _Block_object_dispose(va, 8) = v25 + 48;
            *(void *)(a2 + 16) = &v24[48 * v23];
            if (v19) {
              operator delete(v19);
            }
          }

          else
          {
            *char v17 = v40;
            v17[1] = v14;
            double v18 = v17 + 3;
            void v17[2] = v15;
          }

          *(void *)(a2 + _Block_object_dispose(va, 8) = v18;
        }
      }
    }
  }

  uint64_t v31 = v35;
  uint64_t v35 = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  uint64_t v30 = 100LL;
  if (HIBYTE(v38))
  {
LABEL_32:
    if ((_BYTE)v38) {
      pthread_mutex_unlock(v37);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v36 + 24LL))(v36);
    }
  }

  return v30;
}

void sub_1006DF1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1006DF244(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  sub_1006DFC7C(a1, a2);
  return 0LL;
}

uint64_t sub_1006DF2A0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1006DEE40(a1 - 352, a2, a3, a4);
}

BOOL sub_1006DF2A8(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  memset(v17, 0, sizeof(v17));
  int v7 = sub_1001BA11C(a1, a2, (uint64_t)v17);
  if (!v7)
  {
    do
    {
      uint64_t v16 = 0LL;
      uint64_t v8 = -[CLSerializableWalkingSpeedStrideCal initWithWalkingSpeedStrideCal:]( objc_alloc(&OBJC_CLASS___CLSerializableWalkingSpeedStrideCal),  "initWithWalkingSpeedStrideCal:",  v17);
      uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v8,  1LL,  &v16);
      if (v16)
      {
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_10184AD70);
        }
        uint64_t v10 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v21 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Unable to serialize walking speed stride cal: %@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346C0 != -1) {
            dispatch_once(&qword_1019346C0, &stru_10184AD70);
          }
          int v18 = 138412290;
          uint64_t v19 = v16;
          LODWORD(v15) = 12;
          __int16 v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "Unable to serialize walking speed stride cal: %@",  &v18,  v15);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWalkingSpeedCalRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)",  "%s\n",  v11);
        }
      }

      else
      {
        -[NSMutableArray addObject:](v6, "addObject:", v9);
      }

      int v12 = sub_1001BA11C(a1, a2, (uint64_t)v17);
    }

    while (!v12);
    int v7 = v12;
  }

  __int128 v14 = (NSArray *)-[NSMutableArray count](v6, "count");
  if (v14) {
    __int128 v14 = +[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v6);
  }
  *a3 = v14;

  return v7 == 1;
}

BOOL sub_1006DF548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___CLSerializableWalkingSpeedStrideCal),  a2,  &v9);
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_10184AD70);
    }
    uint64_t v6 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to deserialize walking speed stride cal: %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_10184AD70);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "Unable to deserialize walking speed stride cal: %@",  &v10,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWalkingSpeedCalRecorderDb::dataBlobToEntry(NSData *, WalkingSpeedStrideCal &)",  "%s\n",  v7);
    }
  }

  else
  {
    [v4 getWalkingSpeedStrideCal:a3];
  }

  return v5 == 0;
}

void sub_1006DF740(uint64_t a1)
{
  if (sub_1003C1048(*(void *)(a1 + 80)))
  {
    sub_1003B59A0( *(void *)(a1 + 80),  "WalkingSpeedStrideCal",  (const char **)&qword_1019980A0,  (const std::string::value_type **)&qword_101998220,  0);
    *(void *)(a1 + 360) = sub_1003BF158( *(void *)(a1 + 80),  "INSERT INTO WalkingSpeedStrideCal (startTime, endTime, cadenceWatch, cadenceGaitCycle, mea nWalkingSpeed, gaitCycleYield) VALUES (?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 36_Block_object_dispose(va, 8) = v2;
    *(void *)(a1 + 376) = sub_1003BF158(*(void *)(a1 + 80), "DELETE FROM WalkingSpeedStrideCal WHERE id <= ?");
    *(void *)(a1 + 384) = v3;
    *(void *)(a1 + 392) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * FROM WalkingSpeedStrideCal ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 400) = v4;
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = sub_1003BF158(*(void *)(a1 + 80), "SELECT COUNT(*) FROM WalkingSpeedStrideCal");
    *(void *)(a1 + 416) = v5;
    *(void *)(a1 + 424) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * FROM WalkingSpeedStrideCal WHERE startTime BETWEEN ? and ? ORDER BY startTime DESC");
    *(void *)(a1 + 432) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  }

  else
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_10184AD70);
    }
    int v7 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Device is locked and we are unable to open the database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_10184AD70);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "Device is locked and we are unable to open the database",  v10,  2);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWalkingSpeedCalRecorderDb::prepareSQLStatements()",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

uint64_t sub_1006DF974(uint64_t a1, double *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0454(*(void *)(a1 + 80));
    sub_100B14CF8((uint64_t *)(a1 + 360), &v21);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v21);
    if (sub_1003B7480(v5, 1, *a2))
    {
      uint64_t v6 = (sqlite3_stmt *)sub_100019240(v21);
      if (sub_1003B7480(v6, 2, a2[1]))
      {
        int v7 = (sqlite3_stmt *)sub_100019240(v21);
        if (sub_1003B7480(v7, 3, a2[2]))
        {
          uint64_t v8 = (sqlite3_stmt *)sub_100019240(v21);
          if (sub_1003B7480(v8, 4, a2[3]))
          {
            uint64_t v9 = (sqlite3_stmt *)sub_100019240(v21);
            if (sub_1003B7480(v9, 5, a2[4]))
            {
              int v10 = (sqlite3_stmt *)sub_100019240(v21);
              if (sub_1003B7480(v10, 6, a2[5]))
              {
                uint64_t v11 = *(void *)(a1 + 80);
                int v12 = (sqlite3_stmt *)sub_100019240(v21);
                sub_1003BB2BC(v11, v12);
                ++*(_DWORD *)(a1 + 132);
              }
            }
          }
        }
      }
    }

    if (!*(_BYTE *)(a1 + 440))
    {
      int v13 = sub_1003C1068(*(void *)(a1 + 80));
      sub_100B14CF8((uint64_t *)(a1 + 376), &v20);
      __int128 v14 = (sqlite3_stmt *)sub_100019240(v20);
      if (sub_1003C28BC(v14, 1, v13 - 100))
      {
        uint64_t v15 = *(void *)(a1 + 80);
        uint64_t v16 = (sqlite3_stmt *)sub_100019240(v20);
        sub_1003BB2BC(v15, v16);
        *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
      }

      uint64_t v17 = v20;
      uint64_t v20 = 0LL;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      }
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v18 = *(void *)(a1 + 80);
    else {
      uint64_t v19 = *(void *)(v18 + 88);
    }
    sub_1003C1EC0(v18, v19);
    uint64_t result = v21;
    uint64_t v21 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1006DFB24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DFB70(uint64_t a1, _OWORD *a2)
{
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  __int128 v9 = 0u;
  uint64_t v4 = sub_1006DF244(&v12, (uint64_t)&v8);
  if (!(_DWORD)v4)
  {
    __int128 v5 = v10;
    *a2 = v9;
    a2[1] = v5;
    a2[2] = v11;
  }

  uint64_t v6 = v12;
  uint64_t v12 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v4;
}

void sub_1006DFC0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1006DFC30(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v7 = 0u;
  sub_1006DFC7C(a2, (uint64_t)v6);
  __int128 v4 = v8;
  *a3 = v7;
  a3[1] = v4;
  double result = *(double *)&v9;
  a3[2] = v9;
  return result;
}

void sub_1006DFC7C(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  __int128 v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + _Block_object_dispose(va, 8) = sqlite3_column_double(v5, 1);
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  __int128 v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
  __int128 v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  __int128 v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 4_Block_object_dispose(va, 8) = sqlite3_column_double(v10, 6);
}

uint64_t sub_1006DFD28(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v39);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if (HIBYTE(v40)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_101243F80(v4);
LABEL_44:
    sub_100007008();
  }

  double v33 = v39[1];
  operator delete(v39[0]);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v39);
    uint64_t v6 = sub_10000CF44(&v40, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      __int128 v7 = __p;
    }
    else {
      __int128 v7 = (void **)__p[0];
    }
    if ((SBYTE7(v35) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v35);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    __int128 v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v41);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      __int128 v11 = (char *)__p;
    }
    else {
      __int128 v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v37);
    uint64_t v12 = v37;
    uint64_t v37 = 0LL;
    uint64_t v38 = v12;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    *(_OWORD *)std::string __p = 0u;
    while (!sub_1001BA11C((uint64_t)a1, &v38, (uint64_t)__p))
    {
      int v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 4);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x555555555555555LL) {
          goto LABEL_44;
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 4);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v21 = 0x555555555555555LL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          unint64_t v22 = (char *)sub_1000BB1F4((uint64_t)(a2 + 2), v21);
        }
        else {
          unint64_t v22 = 0LL;
        }
        unint64_t v23 = &v22[48 * v18];
        __int128 v24 = *(_OWORD *)__p;
        __int128 v25 = v36;
        *((_OWORD *)v23 + 1) = v35;
        *((_OWORD *)v23 + 2) = v25;
        *(_OWORD *)unint64_t v23 = v24;
        __int128 v27 = *a2;
        double v26 = a2[1];
        __int128 v28 = v23;
        if (v26 != *a2)
        {
          do
          {
            __int128 v29 = *((_OWORD *)v26 - 3);
            __int128 v30 = *((_OWORD *)v26 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
            *((_OWORD *)v28 - 1) = v30;
            *((_OWORD *)v28 - 3) = v29;
            v28 -= 48;
            v26 -= 48;
          }

          while (v26 != v27);
          double v26 = *a2;
        }

        uint64_t v17 = v23 + 48;
        *a2 = v28;
        a2[1] = v23 + 48;
        a2[2] = &v22[48 * v21];
        if (v26) {
          operator delete(v26);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = v36;
        *((_OWORD *)v13 + 1) = v35;
        *((_OWORD *)v13 + 2) = v16;
        *(_OWORD *)int v13 = v15;
        uint64_t v17 = v13 + 48;
      }

      a2[1] = v17;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v31 = v38;
    uint64_t v38 = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    *(void **)((char *)v39
    uint64_t v40 = v32;
    std::streambuf::~streambuf(&v41);
    return std::ios::~ios(&v42);
  }

  return result;
}

void sub_1006E0030( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  sub_1011F8850((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E0098(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v45);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_1012440EC(v10);
    goto LABEL_41;
  }

  __int128 v4 = (std::stringbuf *)v45[1];
  operator delete(v45[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v45);
  __int128 v11 = sub_10000CF44(&v46, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v41) & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((SBYTE7(v41) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v41);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  __int128 v4 = &v47;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v47);
  if ((SBYTE7(v41) & 0x80u) == 0) {
    __int128 v16 = (char *)__p;
  }
  else {
    __int128 v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v43);
  uint64_t v5 = v43;
  uint64_t v43 = 0LL;
  uint64_t v44 = v5;
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    unint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      *(_OWORD *)std::string __p = 0u;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v44, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v20 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v21)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (_BYTE *)*a2) >> 4);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x555555555555555LL) {
            sub_100007008();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)*a2) >> 4);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v28 = 0x555555555555555LL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            __int128 v29 = (char *)sub_1000BB1F4((uint64_t)(a2 + 2), v28);
          }
          else {
            __int128 v29 = 0LL;
          }
          __int128 v30 = &v29[48 * v25];
          __int128 v31 = *(_OWORD *)__p;
          __int128 v32 = v42;
          *((_OWORD *)v30 + 1) = v41;
          *((_OWORD *)v30 + 2) = v32;
          *(_OWORD *)__int128 v30 = v31;
          double v34 = (char *)*a2;
          double v33 = (char *)a2[1];
          __int128 v35 = v30;
          if (v33 != *a2)
          {
            do
            {
              __int128 v36 = *((_OWORD *)v33 - 3);
              __int128 v37 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
              *((_OWORD *)v35 - 1) = v37;
              *((_OWORD *)v35 - 3) = v36;
              v35 -= 48;
              v33 -= 48;
            }

            while (v33 != v34);
            double v33 = (char *)*a2;
          }

          __int128 v24 = v30 + 48;
          *a2 = v35;
          a2[1] = v30 + 48;
          a2[2] = &v29[48 * v28];
          if (v33) {
            operator delete(v33);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = v42;
          v20[1] = v41;
          v20[2] = v23;
          _OWORD *v20 = v22;
          __int128 v24 = v20 + 3;
        }

        a2[1] = v24;
      }

      uint64_t v5 = v44;
      goto LABEL_43;
    }
  }

void sub_1006E03E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E044C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AE88);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AE88);
      }
      __int128 v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AE88);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::setDatabas eAccessible() [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AE88);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int128 v16 = (void *)(v14 + 8 * (v13 / 0x55));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 48 * (v13 % 0x55);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x55)) + 48 * (v22 % 0x55);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10184AEA8);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10184AEA8);
        }
        LOWORD(v41) = 0;
        LODWORD(v3_Block_object_dispose(va, 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::setDatabas eAccessible() [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 48LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AE88);
    }
    unint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AE88);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 42LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 85LL;
  }

  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v32;
LABEL_61:
  double v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_1006E0B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_1006E0BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_1006E0BC0(uint64_t a1, __int128 *a2, char a3)
{
  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0LL;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v34);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  memset(v33, 0, sizeof(v33));
  int v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 104LL))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AE88);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AE88);
        }
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v35,  2);
        __int128 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)a2;
    double v8 = *(double *)v33;
    double v9 = *(double *)a2 - *(double *)v33;
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AE88);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(double *)a2;
        *(_DWORD *)std::string buf = 134349312;
        double v40 = *(double *)v33;
        __int16 v41 = 2050;
        double v42 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AE88);
        }
        double v24 = *(double *)a2;
        int v35 = 134349312;
        double v36 = *(double *)v33;
        __int16 v37 = 2050;
        double v38 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v35,  22);
        unint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)a2;
      double v8 = *(double *)v33;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AE88);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)a2;
          *(_DWORD *)std::string buf = 134217984;
          double v40 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184AE88);
          }
          double v27 = *(double *)a2;
          int v35 = 134217984;
          double v36 = v27;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v35));
          uint64_t v29 = (uint8_t *)v28;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v28);
          if (v29 != buf) {
            free(v29);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10184AE88);
        double v18 = v32;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v40 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184AE88);
        }
        int v35 = 134217984;
        double v36 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v35));
        uint64_t v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
        if (v31 != buf) {
          free(v31);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, _OWORD *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_1006E1310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1006E133C(void *a1, double *a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_101244258(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, double *, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v11 = &__p;
    }
    else {
      double v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_1006E159C(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_1012443C4(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v11 = &__p;
    }
    else {
      double v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_1006E17D4(uint64_t a1)
{
  return sub_1006E044C(a1 - 72);
}

void sub_1006E17DC(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_1006E1808(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_101244530(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_1006E1A30(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1006E1A5C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1006E1A88()
{
  qword_1019980A0 = (uint64_t)"id";
  dword_1019980A8 = 1;
  word_1019980AC = 257;
  byte_1019980B0 = 0;
  byte_1019980C8 = 0;
  qword_1019980D0 = (uint64_t)"startTime";
  dword_1019980D8 = 2;
  word_1019980DC = 0;
  byte_1019980E0 = 0;
  byte_1019980F8 = 0;
  qword_101998100 = (uint64_t)"endTime";
  dword_101998108 = 2;
  word_10199810C = 0;
  byte_101998110 = 0;
  byte_101998128 = 0;
  qword_101998130 = (uint64_t)"cadenceWatch";
  dword_101998138 = 2;
  word_10199813C = 0;
  byte_101998140 = 0;
  byte_101998158 = 0;
  qword_101998160 = (uint64_t)"cadenceGaitCycle";
  dword_101998168 = 2;
  word_10199816C = 0;
  byte_101998170 = 0;
  byte_101998188 = 0;
  qword_101998190 = (uint64_t)"meanWalkingSpeed";
  dword_101998198 = 2;
  word_10199819C = 0;
  byte_1019981A0 = 0;
  byte_1019981B8 = 0;
  qword_1019981C0 = (uint64_t)"gaitCycleYield";
  dword_1019981C8 = 2;
  word_1019981CC = 0;
  byte_1019981D0 = 0;
  byte_1019981E8 = 0;
  qword_1019981F0 = 0LL;
  dword_1019981F8 = 5;
  word_1019981FC = 0;
  byte_101998200 = 0;
  byte_101998218 = 0;
  qword_101998220 = (uint64_t)"startTime";
  *(void *)algn_101998228 = 0LL;
}

void sub_1006E1B88()
{
  unsigned __int8 v0 = operator new(0x38uLL);
  v0[3] = 0LL;
  v0[4] = 0LL;
  *((_DWORD *)v0 + 12) = 0;
  qword_1019A1588 = (uint64_t)v0;
  pthread_attr_init(&v15);
  uint64_t v1 = pthread_self();
  if (pthread_getschedparam(v1, &v12, &v13))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184AFD8);
    }
    uint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "Could not get parent thread parameters",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184AFD8);
      }
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Could not get parent thread parameters",  v10,  2);
      __int128 v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 0LL, "static void CLMotionCore::create()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

  else
  {
    pthread_attr_setschedparam(&v15, &v13);
  }

  v10[0] = 0LL;
  v10[1] = 0LL;
  _BYTE v10[2] = qword_1019A1588 + 8;
  v10[3] = &unk_101998230;
  char v11 = 0;
  pthread_create((pthread_t *)(qword_1019A1588 + 8), &v15, (void *(__cdecl *)(void *))sub_1006E1ED4, v10);
  sub_1006E3124((uint64_t)v10);
  pthread_dependency_wait_np(v10);
  if (!*(void *)qword_1019A1588)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184AFD8);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Motion runloop ref still not set!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184AFD8);
      }
      v9[0] = 0;
      LODWORD(v_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Motion runloop ref still not set!",  v9,  v8);
      double v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "static void CLMotionCore::create()", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

uint64_t sub_1006E1ED4(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (const char **)_CFGetProgname();
  BOOL v4 = strcmp(*v3, "locationd") == 0;
  *(_BYTE *)(qword_1019A1588 + 16) = v4;
  pthread_setname_np("com.apple.CoreMotion.MotionThread");
  if (*(_BYTE *)(qword_1019A1588 + 16))
  {
    sub_1002F0B04(buf);
    sub_10005F550(qword_1019A1588 + 24, (__int128 *)&buf[0].version);
    info = (std::__shared_weak_count *)buf[0].info;
    if (!buf[0].info) {
      goto LABEL_11;
    }
    int v6 = (unint64_t *)((char *)buf[0].info + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }

  else
  {
    uint64_t v8 = operator new(0x88uLL);
    sub_1007B737C((uint64_t)v8, @"com.apple.CoreMotion", 0);
    sub_1006E31E4(buf, (uint64_t)v8);
    sub_10005F550(qword_1019A1588 + 24, (__int128 *)&buf[0].version);
    info = (std::__shared_weak_count *)buf[0].info;
    if (!buf[0].info) {
      goto LABEL_11;
    }
    uint64_t v9 = (unint64_t *)((char *)buf[0].info + 8);
    do
      unint64_t v7 = __ldaxr(v9);
    while (__stlxr(v7 - 1, v9));
  }

  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
    std::__shared_weak_count::__release_weak(info);
  }

void sub_1006E27CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1006E27E8()
{
  if (qword_101998238 != -1) {
    dispatch_once(&qword_101998238, &stru_10184AEC8);
  }
  return qword_1019A1588;
}

id sub_1006E282C()
{
  return +[CLSilo main](&OBJC_CLASS___CLSilo, "main");
}

uint64_t sub_1006E2838()
{
  if (qword_101998248 != -1) {
    dispatch_once(&qword_101998248, &stru_10184AEE8);
  }
  return qword_101998240;
}

void sub_1006E2878(id a1)
{
  qword_101998240 = (uint64_t)+[CLIntersiloUniverse newSharedVendorUniverseWithSilo:]( &OBJC_CLASS___CLIntersiloUniverse,  "newSharedVendorUniverseWithSilo:",  +[CLSilo main](&OBJC_CLASS___CLSilo, "main"));
}

void sub_1006E28B8(uint64_t a1, uint64_t a2)
{
  if (CFRunLoopGetCurrent() == *(CFRunLoopRef *)qword_1019A1588)
  {
    BOOL v4 = objc_autoreleasePoolPush();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    objc_autoreleasePoolPop(v4);
  }

  else
  {
    uint64_t inited = pthread_dependency_init_np(v6, *(void *)(qword_1019A1588 + 8), 0LL);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1006E29F0;
    v5[3] = &unk_10184AF10;
    v5[4] = a2;
    v5[5] = v6;
    sub_1006E2970(inited, (uint64_t)v5);
    pthread_dependency_wait_np(v6);
  }

void sub_1006E2970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__CFRunLoop **)qword_1019A1588;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1006E2A20;
  block[3] = &unk_10184AF38;
  block[4] = a2;
  CFRunLoopPerformBlock(v2, kCFRunLoopDefaultMode, block);
  CFRunLoopWakeUp(*(CFRunLoopRef *)qword_1019A1588);
}

uint64_t sub_1006E29F0(uint64_t a1)
{
  return pthread_dependency_fulfill_np(*(void *)(a1 + 40), 0LL);
}

void sub_1006E2A20(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_1006E2A54()
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  if (qword_101998238 != -1) {
    dispatch_once(&qword_101998238, &stru_10184AEC8);
  }
  if (Current != *(CFRunLoopRef *)qword_1019A1588) {
    sub_10124469C();
  }
}

uint64_t sub_1006E2AB4()
{
  return *(void *)qword_1019A1588;
}

uint64_t sub_1006E2AC4()
{
  return *(unsigned __int8 *)(qword_1019A1588 + 16);
}

void sub_1006E2AD4(int a1, uint64_t a2, CFArrayRef theArray)
{
  if (a2 == 1) {
    goto LABEL_6;
  }
  if (a2 == 128 || a2 == 32)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count <= 0) {
      sub_101244868();
    }
    CFIndex v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool(ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      uint64_t v8 = (const void *)NSPushAutoreleasePool(0LL);
      CFArrayAppendValue(theArray, v8);
    }
  }

void sub_1006E2B70(id a1, __CFRunLoopTimer *a2)
{
}

void sub_1006E2B84(id a1)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AFF8);
  }
  uint64_t v1 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Ping timer fired, resetting watchdog", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AFF8);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Ping timer fired, resetting watchdog",  v12,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  uint64_t v2 = qword_1019A1588;
  uint64_t v3 = *(dispatch_source_s **)(qword_1019A1588 + 40);
  if (v3
    || (BOOL v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, &_dispatch_main_q),
        *(void *)(qword_1019A1588 + 40) = v4,
        dispatch_source_set_event_handler(v4, &stru_10184AFB8),
        dispatch_resume(*(dispatch_object_t *)(qword_1019A1588 + 40)),
        uint64_t v2 = qword_1019A1588,
        (uint64_t v3 = *(dispatch_source_s **)(qword_1019A1588 + 40)) != 0LL))
  {
    ++*(_DWORD *)(v2 + 48);
    dispatch_time_t v5 = dispatch_time(0LL, 60000000000LL);
    dispatch_source_set_timer(v3, v5, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AFF8);
    }
    CFIndex v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create watchdog timer", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AFF8);
      }
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Failed to create watchdog timer",  v12,  v11);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void *CLMotionCore::runMotionThread(void *)_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_1006E2EC8(id a1)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AFF8);
  }
  uint64_t v1 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = *(_DWORD *)(qword_1019A1588 + 48);
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Motion thread deadlock watchdog after %d petting",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AFF8);
    }
    int v4 = *(_DWORD *)(qword_1019A1588 + 48);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Motion thread deadlock watchdog after %d petting",  v7);
    CFIndex v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (&_ADClientAddValueForScalarKey)
  {
    ADClientAddValueForScalarKey(@"com.apple.CoreMotion.ThreadDeadlockCount", 1LL);
    uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"com.apple.CoreMotion.ThreadDeadlockCount",  -[NSProcessInfo processName]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "processName"));
    ADClientAddValueForScalarKey(v3, 1LL);
  }

uint64_t sub_1006E30E0()
{
  return *(void *)_CFGetProgname();
}

void sub_1006E30F8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006E3124(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 32))
  {
    int v2 = *(dispatch_once_t **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1006E31A4;
    block[3] = &unk_10181D3D0;
    block[4] = a1;
    if (*v2 != -1) {
      dispatch_once(v2, block);
    }
    *(_BYTE *)(a1 + 32) = 1;
  }

uint64_t sub_1006E31A4()
{
  return pthread_dependency_init_np();
}

void sub_1006E31B8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_1006E31E4(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  void *v4 = &off_10184B028;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1006E322C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006E324C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1006E3264(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1006E32E4(id a1)
{
  qword_101998258 = objc_alloc_init(&OBJC_CLASS___CLLocationPushRegistrar);
}

void sub_1006E3430(uint64_t a1)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10184B100);
  }
  int v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Location Push Registrar XPC invalidation handler",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10184B100);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "Location Push Registrar XPC invalidation handler",  v5,  2);
    int v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
}

void sub_1006E35D4(uint64_t a1)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10184B100);
  }
  int v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Location Push Registrar XPC interruption handler",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10184B100);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  16LL,  "Location Push Registrar XPC interruption handler",  v5,  2);
    int v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
}

uint64_t sub_1006E3800(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1006E389C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1006E38B8(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

unint64_t sub_1006E38E4()
{
  unint64_t result = sub_100CD5928();
  if ((_DWORD)result)
  {
    uint64_t v1 = operator new(0x40uLL);
    unint64_t result = sub_1006E3974((uint64_t)v1);
    qword_1019A1590 = (uint64_t)v1;
  }

  return result;
}

void sub_1006E391C(_Unwind_Exception *a1)
{
}

uint64_t sub_1006E3930()
{
  if (qword_101998260 != -1) {
    dispatch_once(&qword_101998260, &stru_10184B120);
  }
  return qword_1019A1590;
}

uint64_t sub_1006E3974(uint64_t a1)
{
  uint64_t v2 = sub_100CD554C(a1);
  *(void *)uint64_t v2 = off_10184B150;
  *(_BYTE *)(v2 + 4_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v3 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1006E3A08;
  v5[3] = &unk_10181D3D0;
  v5[4] = a1;
  sub_1006E28B8(v3, (uint64_t)v5);
  return a1;
}

void sub_1006E39F4(_Unwind_Exception *a1)
{
}

BOOL sub_1006E3A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100CD5604(v1);
  return sub_100CD59E8(v1);
}

void *sub_1006E3A30(void *a1)
{
  *a1 = &off_10184B1E8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_10029D2EC(a1 + 3, 0LL);
  sub_10000AE14(v2);
  return a1;
}

uint64_t sub_1006E3A78(uint64_t a1, char a2)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  char v12 = 1;
  uint64_t v4 = sub_1006E27E8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  __int128 v7[2] = sub_1006E3B34;
  void v7[3] = &unk_10184B178;
  char v8 = a2;
  _DWORD v7[4] = &v9;
  double v7[5] = a1;
  sub_1006E28B8(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1006E3B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}