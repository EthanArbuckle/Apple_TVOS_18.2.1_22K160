void sub_10077DC94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  NSMutableSet *v7;
  void *v8;
  uint64_t v9;
  NSError *v10;
  os_log_s *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  void *v15;
  __int16 v16;
  NSError *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  NSError *v21;
  NSErrorUserInfoKey v22;
  CFStringRef v23;
  v6 = *(void *)(a1 + 32);
  v7 = +[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", a2);
  v8 = sub_10077DF64(v6, a3, (uint64_t)v7);
  v9 = *(void *)(v6 + 2040);
  if (v9) {
    sub_100778F74(v9, v7);
  }
  if (v8)
  {
    sub_10077E4AC(v6, v7, v8, (void (**)(void))a4);
    sub_10076BCF8(v6);
    sub_1007745E0(v6);
  }

  else
  {
    v22 = NSLocalizedDescriptionKey;
    v23 = @"No matching requestID and upload request";
    v10 =  -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  6LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v11 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      v19 = a3;
      v20 = 2114;
      v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "#EED2,uploadListCB,request:%{public}@,no matching upload request,return error:%{public}@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v14 = 138543618;
      v15 = a3;
      v16 = 2114;
      v17 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,uploadListCB,request:%{public}@,no matching upload request,return error:%{public}@",  &v14,  22);
      v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    (*(void (**)(uint64_t, NSError *))(a4 + 16))(a4, v10);
  }

void *sub_10077DF64(uint64_t a1, void *a2, uint64_t a3)
{
  v6 = *(void **)(a1 + 1912);
  if (v6 && objc_msgSend(a2, "isEqual:", objc_msgSend(v6, "ID")))
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v7 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      id v34 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ matches fCurrentUploadRequest",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v31 = 138543362;
      id v32 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  1LL,  "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ matches fCurrentUploadRequest",  &v31,  12);
      v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    [*(id *)(a1 + 1912) updateRequestWithMediaItemList:a3];
    return *(void **)(a1 + 1912);
  }

  else
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    v9 = *(void **)(a1 + 1896);
    id v10 = [v9 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v27;
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          v8 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
          if (objc_msgSend(a2, "isEqual:", objc_msgSend(v8, "ID")))
          {
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_10184E040);
            }
            v15 = (os_log_s *)qword_101934898;
            if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
            {
              id v16 = [v8 ID];
              *(_DWORD *)buf = 138543362;
              id v34 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#EED2,getUpdatedRequestForMediaItemUpload,return the request:%{public}@ found in fRequestsHandled queue",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_10184E040);
              }
              uint64_t v18 = qword_101934898;
              id v19 = [v8 ID];
              int v31 = 138543362;
              id v32 = v19;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "#EED2,getUpdatedRequestForMediaItemUpload,return the request:%{public}@ found in fRequestsHandled queue",  &v31,  12);
              v21 = (uint8_t *)v20;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)",  "%s\n",  v20);
              if (v21 != buf) {
                free(v21);
              }
            }

            [v8 updateRequestWithMediaItemList:a3];
            return v8;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v14 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      id v34 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ was not found",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v31 = 138543362;
      id v32 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  1LL,  "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ was not found",  &v31,  12);
      v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }

    return 0LL;
  }

void sub_10077E4AC(uint64_t a1, void *a2, void *a3, void (**a4)(void))
{
  uint64_t v46 = 0LL;
  v47 = &v46;
  uint64_t v48 = 0x3052000000LL;
  v49 = sub_100780970;
  v50 = sub_100780980;
  uint64_t v51 = 0LL;
  if (!a2 || ![a2 count])
  {
    id v11 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v62 = NSLocalizedDescriptionKey;
    v63 = @"MediaList is empty, count 0";
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v63,  &v62,  1LL);
    uint64_t v13 = 10LL;
LABEL_8:
    v14 =  -[NSError initWithDomain:code:userInfo:]( v11,  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  v13,  v12);
    v47[5] = (uint64_t)v14;
    a4[2](a4);
    goto LABEL_9;
  }

  if (!a3)
  {
    id v11 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v60 = NSLocalizedDescriptionKey;
    v61 = @"No matching upload request";
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v61,  &v60,  1LL);
    uint64_t v13 = 6LL;
    goto LABEL_8;
  }

  memset(&v45, 0, sizeof(v45));
  v8 = sub_100756E48((int *)(a1 + 1448));
  sub_100781FD0((uint64_t)v44, (uint64_t)(v8 + 20));
  sub_1010DDBC0(__p, (char *)objc_msgSend(objc_msgSend(a3, "partnerID"), "UTF8String"));
  v9 = sub_10023BD04(v44, (unsigned __int8 *)__p);
  id v10 = v9;
  if (v59 < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (v9) {
LABEL_12:
  }
    std::string::operator=(&v45, (const std::string *)(v10 + 64));
LABEL_13:
  if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v15 = &v45;
  }
  else {
    v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  id v16 = +[CLEEDCryptoUtilities copyAdrPublicKeyData:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "copyAdrPublicKeyData:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
  id v17 = v16;
  if (!v16)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    __int128 v27 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "#EED2,handleMediaUploadRequest,nil partnerAdrPublicKeyData,early return",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v43[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,handleMediaUploadRequest,nil partnerAdrPublicKeyData,early return",  v43,  2);
      v37 = (void **)v36;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)",  "%s\n",  v36);
      if (v37 != __p) {
        free(v37);
      }
    }

    __int128 v28 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
    v57 = @"Unable to generate partnerAdrPublicKey data";
    __int128 v29 =  -[NSError initWithDomain:code:userInfo:]( v28,  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
    v47[5] = (uint64_t)v29;
    a4[2](a4);
    goto LABEL_34;
  }

  id v18 = +[CLEEDRequest getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:]( CLEEDRequest,  "getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:",  [a3 sessionID],  objc_msgSend(a3, "partnerID"),  v16,  *(void *)(a1 + 1928));
  if (v18)
  {
    if (*(void *)(a1 + 1944) || (sub_100780010(a1), *(void *)(a1 + 1944)))
    {
      id v19 = _Block_copy(a4);
      v20 = *(void **)(a1 + 1944);
      id v21 = [a3 ID];
      uint64_t v22 = *(void *)(a1 + 1864);
      id v23 = [a3 uploadURL];
      id v24 = [a3 combinedSecret];
      id v25 = [a3 token];
      uint64_t v26 = *(void *)(a1 + 1960);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_10078098C;
      v42[3] = &unk_10184DFE0;
      v42[6] = &v46;
      v42[7] = a1;
      v42[4] = a3;
      v42[5] = v19;
      [v20 processMediaForRequestID:v21 callUUID:v22 uploadURL:v23 sharedInfoPrefix:v18 combinedSecret:v24 token:v25 mediaList:a2 mitigation:v26 completion:v42];
      goto LABEL_34;
    }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v35 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "#EED2,handleMediaUploadRequest,EEDMediaService initialization failed",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v43[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,handleMediaUploadRequest,EEDMediaService initialization failed",  v43,  2);
      v41 = (void **)v40;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)",  "%s\n",  v40);
      if (v41 != __p) {
        free(v41);
      }
    }

    int v31 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
    v53 = @"EED Media Service initialization failed";
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v53,  &v52,  1LL);
    uint64_t v32 = 7LL;
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v30 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#EED2,handleMediaUploadRequest,nil sharedInfoPrefix,early return",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v43[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,handleMediaUploadRequest,nil sharedInfoPrefix,early return",  v43,  2);
      v39 = (void **)v38;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)",  "%s\n",  v38);
      if (v39 != __p) {
        free(v39);
      }
    }

    int v31 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
    v55 = @"Unable to generate shared info prefix";
    uint64_t v32 = 1LL;
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL);
  }

  id v34 =  -[NSError initWithDomain:code:userInfo:]( v31,  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  v32,  v33);
  v47[5] = (uint64_t)v34;
  a4[2](a4);
LABEL_34:
  sub_100782514((uint64_t)v44);
LABEL_9:
  _Block_object_dispose(&v46, 8);
}

void sub_10077ECC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_10077ED3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v8 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240450;
    int v21 = a2;
    __int16 v22 = 2114;
    id v23 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#EED2,userResponseCB,received response:%{public}u for the request:%{public}@",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v17[0] = 67240450;
    v17[1] = a2;
    __int16 v18 = 2114;
    id v19 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,userResponseCB,received response:%{public}u for the request:%{public}@",  v17,  18);
    id v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  if (a3 && a4)
  {
    sub_10077F0D4(v7, a2, a3, a4);
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v9 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "#EED2,userResponseCB,requestID or statusCompletion nil, early return",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      LOWORD(v17[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,userResponseCB,requestID or statusCompletion nil, early return",  v17,  v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    if (a4)
    {
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      id v16 = @"Request ID not received";
      (*(void (**)(uint64_t, void, NSError *))(a4 + 16))( a4,  0LL,   -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  4LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL)));
    }
  }

void sub_10077F0D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSErrorUserInfoKey v56 = 0LL;
  v8 = *(void **)(a1 + 1904);
  if (v8 && objc_msgSend(a3, "isEqual:", objc_msgSend(v8, "ID")))
  {
    [*(id *)(a1 + 1904) updateDurationInformationForCA:a2];
    v9 = *(void **)(a1 + 1960);
    if (v9 && [v9 dropStreaming] && (a2 & 1) != 0)
    {
      uint64_t v10 = 17LL;
    }

    else
    {
      if ([*(id *)(a1 + 1904) state] == (id)17)
      {
LABEL_31:
        if (![*(id *)(a1 + 1904) requestStatusAtFirstUserResponse]) {
          objc_msgSend( *(id *)(a1 + 1904),  "setRequestStatusAtFirstUserResponse:",  objc_msgSend(*(id *)(a1 + 1904), "state"));
        }
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        v20 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = [*(id *)(a1 + 1904) ID];
          id v22 = [*(id *)(a1 + 1904) state];
          *(_DWORD *)buf = 138543618;
          id v62 = v21;
          __int16 v63 = 2050;
          id v64 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,updated streaming request:%{public}@ to state:%{public}ld",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10184E040);
          }
          uint64_t v41 = qword_101934898;
          id v42 = [*(id *)(a1 + 1904) ID];
          id v43 = [*(id *)(a1 + 1904) state];
          *(_DWORD *)char v59 = 138543618;
          *(void *)&v59[4] = v42;
          *(_WORD *)&v59[12] = 2050;
          *(void *)&v59[14] = v43;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v41,  0LL,  "#EED2,handleUserResponse,updated streaming request:%{public}@ to state:%{public}ld",  v59,  22);
          std::string v45 = (uint8_t *)v44;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v44);
          if (v45 != buf) {
            free(v45);
          }
        }

        id v19 = *(id *)(a1 + 1904);
        goto LABEL_60;
      }

      if ((_DWORD)a2) {
        uint64_t v10 = 1LL;
      }
      else {
        uint64_t v10 = 4LL;
      }
    }

    [*(id *)(a1 + 1904) setState:v10];
    goto LABEL_31;
  }

  id v11 = *(void **)(a1 + 1912);
  if (v11 && objc_msgSend(a3, "isEqual:", objc_msgSend(v11, "ID")))
  {
    [*(id *)(a1 + 1912) updateDurationInformationForCA:a2];
    uint64_t v12 = *(void **)(a1 + 1960);
    if (v12 && [v12 uploadMigitation] == (id)1 && (a2 & 1) != 0)
    {
      uint64_t v13 = 18LL;
    }

    else
    {
      if ([*(id *)(a1 + 1912) state] == (id)18)
      {
LABEL_50:
        if (![*(id *)(a1 + 1912) requestStatusAtFirstUserResponse]) {
          objc_msgSend( *(id *)(a1 + 1912),  "setRequestStatusAtFirstUserResponse:",  objc_msgSend(*(id *)(a1 + 1912), "state"));
        }
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        id v25 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = [*(id *)(a1 + 1912) state];
          *(_DWORD *)buf = 138543618;
          id v62 = a3;
          __int16 v63 = 2050;
          id v64 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,updated upload request:%{public}@ to state:%{public}ld",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10184E040);
          }
          uint64_t v46 = qword_101934898;
          id v47 = [*(id *)(a1 + 1912) state];
          *(_DWORD *)char v59 = 138543618;
          *(void *)&v59[4] = a3;
          *(_WORD *)&v59[12] = 2050;
          *(void *)&v59[14] = v47;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v46,  0LL,  "#EED2,handleUserResponse,updated upload request:%{public}@ to state:%{public}ld",  v59,  22);
          v49 = (uint8_t *)v48;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v48);
          if (v49 != buf) {
            free(v49);
          }
        }

        id v19 = *(id *)(a1 + 1912);
        goto LABEL_60;
      }

      if ((_DWORD)a2) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = 4LL;
      }
    }

    [*(id *)(a1 + 1912) setState:v13];
    goto LABEL_50;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v14 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,no matching current streaming or upload request found. Search in other queues",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    *(_WORD *)char v59 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,handleUserResponse,no matching current streaming or upload request found. Search in other queues",  v59,  2);
    v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  NSErrorUserInfoKey v15 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = [*(id *)(a1 + 1888) count];
    *(_DWORD *)buf = 134349056;
    id v62 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,there are %{public}ld pending requests in fRequestsPending queue",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v37 = qword_101934898;
    id v38 = [*(id *)(a1 + 1888) count];
    *(_DWORD *)char v59 = 134349056;
    *(void *)&v59[4] = v38;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v37,  0LL,  "#EED2,handleUserResponse,there are %{public}ld pending requests in fRequestsPending queue",  v59,  v54);
    v40 = (uint8_t *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v39);
    if (v40 != buf) {
      free(v40);
    }
  }

  *(void *)char v59 = 0LL;
  *(void *)&v59[8] = v59;
  *(void *)&v59[16] = 0x2020000000LL;
  int v60 = -1;
  id v17 = *(void **)(a1 + 1888);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472LL;
  v55[2] = sub_10077FE00;
  v55[3] = &unk_10184DE98;
  v55[4] = a3;
  v55[5] = v59;
  [v17 enumerateObjectsUsingBlock:v55];
  if ((*(_DWORD *)(*(void *)&v59[8] + 24LL) & 0x80000000) != 0)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    id v23 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 1896) count];
      *(_DWORD *)buf = 134349056;
      id v62 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,there are %{public}ld handled requests in fRequestsHandled queue",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v50 = qword_101934898;
      id v51 = [*(id *)(a1 + 1896) count];
      int v57 = 134349056;
      id v58 = v51;
      LODWORD(v54) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v50,  0LL,  "#EED2,handleUserResponse,there are %{public}ld handled requests in fRequestsHandled queue",  &v57,  v54);
      v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    id v19 = sub_10077C178((id *)a1, a2, a3, &v56);
  }

  else
  {
    id v18 = objc_msgSend(*(id *)(a1 + 1888), "objectAtIndex:");
    if (v18)
    {
      id v19 = sub_10077CAFC((id *)a1, v18, a2, &v56);
      [*(id *)(a1 + 1888) removeObjectAtIndex:*(int *)(*(void *)&v59[8] + 24)];
    }

    else
    {
      id v19 = 0LL;
    }
  }

  _Block_object_dispose(v59, 8);
LABEL_60:
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  __int128 v27 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = [v19 ID];
    id v29 = [v19 state];
    *(_DWORD *)buf = 138543618;
    id v62 = v28;
    __int16 v63 = 2050;
    id v64 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,returning back to phone app, the updatedRequest:%{public}@ in state:%{public}ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v30 = qword_101934898;
    id v31 = [v19 ID];
    id v32 = [v19 state];
    *(_DWORD *)char v59 = 138543618;
    *(void *)&v59[4] = v31;
    *(_WORD *)&v59[12] = 2050;
    *(void *)&v59[14] = v32;
    LODWORD(v54) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  0LL,  "#EED2,handleUserResponse,returning back to phone app, the updatedRequest:%{public}@ in state:%{public}ld",  v59,  v54);
    id v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  (*(void (**)(uint64_t, id, NSError *))(a4 + 16))(a4, v19, v56);
  sub_10076ACC0(a1);
  sub_10076BCF8(a1);
  sub_1007745E0(a1);
}

void sub_10077FBBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10077FBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,mitigationsCB", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v11[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,mitigationsCB",  v11,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  uint64_t v5 = *(void *)(v3 + 1960);
  if (v5)
  {
    v6 = 0LL;
  }

  else
  {
    uint64_t v7 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    uint64_t v13 = @"Mitigations not available";
    v6 =  -[NSError initWithDomain:code:userInfo:]( v7,  "initWithDomain:code:userInfo:",  @"com.apple.CoreLocation.CLEEDHelperService",  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
    uint64_t v5 = *(void *)(v3 + 1960);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, NSError *))(a2 + 16))(a2, v5, v6);
}

void sub_10077FE00(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", objc_msgSend(a2, "ID")))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v7 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v19 = v8;
      __int16 v20 = 1026;
      int v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleUserResponse,found matching pending request for request ID:%{public}@ at index:%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      int v14 = 138543618;
      uint64_t v15 = v10;
      __int16 v16 = 1026;
      int v17 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,handleUserResponse,found matching pending request for request ID:%{public}@ at index:%{public}d",  &v14,  18);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    *a4 = 1;
  }

void sub_100780010(uint64_t a1)
{
  if (!*(void *)(a1 + 1944))
  {
    v9[4] = a1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100780250;
    v10[3] = &unk_10181F6F8;
    v10[4] = a1;
    v8[4] = a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100780418;
    v9[3] = &unk_10181D3D0;
    v7[4] = a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1007805DC;
    v8[3] = &unk_10184DF98;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100780790;
    v7[3] = &unk_10184DFB8;
    v2 = -[CLEEDMediaServiceHandler initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:]( objc_alloc(&OBJC_CLASS___CLEEDMediaServiceHandler),  "initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:",  *(void *)(a1 + 8),  v9,  v8,  v7,  v10);
    *(void *)(a1 + 1944) = v2;
    if (!v2)
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v3 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "#EED2,initializeMediaService,EEDMediaService initialization failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        v6[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,initializeMediaService,EEDMediaService initialization failed",  v6,  2);
        uint64_t v5 = (uint8_t *)v4;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::initializeMediaService()", "%s\n", v4);
        if (v5 != buf) {
          free(v5);
        }
      }
    }
  }

void sub_100780250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#EED2,initializeMediaService,received mediaServiceErrorCB,error:%{public}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v7 = 138543362;
    uint64_t v8 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,initializeMediaService,received mediaServiceErrorCB,error:%{public}@",  &v7,  12);
    v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  [*(id *)(v3 + 1944) cleanup];

  *(void *)(v3 + 1944) = 0LL;
  sub_100766A44(v3);
}

void sub_100780418(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v2 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#EED2,initializeMediaService,received mediaServiceCompletionCB",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  1LL,  "#EED2,initializeMediaService,received mediaServiceCompletionCB",  v5,  2);
    v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  *(_DWORD *)(v1 + 1952) = 0;
  if (!-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  @"/private/var/mobile/Library/CLEEDMediaService/CLEEDMSCache"))
  {
    [*(id *)(v1 + 1944) cleanup];

    *(void *)(v1 + 1944) = 0LL;
  }

uint64_t sub_1007805DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v2 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(v1 + 1960);
    *(_DWORD *)buf = 138543362;
    uint64_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#EED2,initializeMediaService,received getMitigationCB, mitigation:%{public}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v5 = *(void *)(v1 + 1960);
    int v8 = 138543362;
    uint64_t v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  1LL,  "#EED2,initializeMediaService,received getMitigationCB, mitigation:%{public}@",  &v8,  12);
    int v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return *(void *)(v1 + 1960);
}

id sub_100780790(uint64_t a1)
{
  uint64_t v1 = sub_100756E48((int *)(*(void *)(a1 + 32) + 1448LL));
  id v2 = [[CLEEDUploadServiceConfig alloc] initWithNumInflightUploads:(int)v1[48] maxUploadFileSizeMB:v1[48] >> 32 maxUploadQuotaMB:*((int *)v1 + 98)];
  id v3 = v2;
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    id v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#EED2,initializeMediaService,received getUploadConfigCB, uploadConfig:%{public}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v8 = 138543362;
    id v9 = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  1LL,  "#EED2,initializeMediaService,received getUploadConfigCB, uploadConfig:%{public}@",  &v8,  12);
    int v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return v2;
}

void sub_100780970(uint64_t a1, uint64_t a2)
{
}

void sub_100780980(uint64_t a1)
{
}

void sub_10078098C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v5 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) ID];
    *(_DWORD *)buf = 138543618;
    id v19 = v6;
    __int16 v20 = 2114;
    uint64_t v21 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleMediaUploadRequest,processMedia request for ID:%{public}@ returned :%{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v9 = qword_101934898;
    id v10 = [*(id *)(a1 + 32) ID];
    int v14 = 138543618;
    id v15 = v10;
    __int16 v16 = 2114;
    uint64_t v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  0LL,  "#EED2,handleMediaUploadRequest,processMedia request for ID:%{public}@ returned :%{public}@",  &v14,  22);
    NSErrorUserInfoKey v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusComplet ion)_block_invoke",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = a2;
  int v7 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(v4 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100780BC4;
  block[3] = &unk_10182C230;
  uint64_t v8 = *(void *)(a1 + 40);
  block[4] = a2;
  block[5] = v8;
  dispatch_async(v7, block);
}

void sub_100780BC4(uint64_t a1)
{
}

void sub_100780BF4(uint64_t a1, void *a2)
{
  id v4 = [a2 getRequestDict];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v5 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      id v17 = [a2 type];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#EED2,storeEEDDataToCache,Added pending request of type:%{public}ld to pending array of cacheDataDict",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v6 = qword_101934898;
      int v14 = 134349056;
      id v15 = [a2 type];
      double v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  0LL,  "#EED2,storeEEDDataToCache,Added pending request of type:%{public}ld to pending array of cacheDataDict",  &v14,  12);
      uint64_t v9 = v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    id v10 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      id v17 = [a2 type];
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#EED2,storeEEDDataToCache,fRequestsPending,nil dict for request type:%{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v11 = qword_101934898;
      int v14 = 134349056;
      id v15 = [a2 type];
      double v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  16LL,  "#EED2,storeEEDDataToCache,fRequestsPending,nil dict for request type:%{public}ld",  &v14,  12);
      uint64_t v9 = v13;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v12);
      goto LABEL_19;
    }
  }

void sub_100780F14(uint64_t a1, void *a2)
{
  id v4 = [a2 getRequestDict];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v5 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      id v17 = [a2 type];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#EED2,storeEEDDataToCache,Added handled request of type:%{public}ld to handled array of cacheDataDict",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v6 = qword_101934898;
      int v14 = 134349056;
      id v15 = [a2 type];
      double v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  0LL,  "#EED2,storeEEDDataToCache,Added handled request of type:%{public}ld to handled array of cacheDataDict",  &v14,  12);
      uint64_t v9 = v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    id v10 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      id v17 = [a2 type];
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#EED2,storeEEDDataToCache,fRequestsHandled,ignoring request type:%{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v11 = qword_101934898;
      int v14 = 134349056;
      id v15 = [a2 type];
      double v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  16LL,  "#EED2,storeEEDDataToCache,fRequestsHandled,ignoring request type:%{public}ld",  &v14,  12);
      uint64_t v9 = v13;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v12);
      goto LABEL_19;
    }
  }

BOOL sub_100781234(uint64_t a1)
{
  uint64_t v2 = sub_1002F8DDC();
  if ((sub_1002A6F20(v2, (uint64_t)@"EEDCacheMetricData", (CFTypeRef *)&v47) & 1) != 0)
  {
    if (*(void *)(a1 + 2040))
    {
      id v3 = v47;
      if (byte_10199847F >= 0) {
        id v4 = &qword_101998468;
      }
      else {
        id v4 = (uint64_t *)qword_101998468;
      }
      if (objc_msgSend( objc_msgSend( v47,  "valueForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)),  "intValue") == 4 && sub_100764AF4(a1) == 3)
      {
        sub_100767780();
        sub_100767A6C();
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        uint64_t v5 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#EED2,readEEDMetricDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10184E040);
          }
          LOWORD(v46) = 0;
          double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,readEEDMetricDataFromCache,ignore cached data and clear it as new session has started in the inte rim. Early Return",  &v46,  2,  v46);
LABEL_24:
          id v10 = v7;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v8);
LABEL_122:
          if (v10 != buf) {
            free(v10);
          }
          return 0LL;
        }
      }

      else
      {
        if (byte_10199853F >= 0) {
          uint64_t v11 = &qword_101998528;
        }
        else {
          uint64_t v11 = (uint64_t *)qword_101998528;
        }
        **(_DWORD **)(a1 + 2040) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v11)),  "intValue");
        if (byte_101998557 >= 0) {
          double v12 = &qword_101998540;
        }
        else {
          double v12 = (uint64_t *)qword_101998540;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 4) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v12)),  "intValue");
        if (byte_10199856F >= 0) {
          uint64_t v13 = &qword_101998558;
        }
        else {
          uint64_t v13 = (uint64_t *)qword_101998558;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 8) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v13)),  "intValue");
        if (byte_101998587 >= 0) {
          int v14 = &qword_101998570;
        }
        else {
          int v14 = (uint64_t *)qword_101998570;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 12) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v14)),  "intValue");
        if (byte_10199859F >= 0) {
          id v15 = &qword_101998588;
        }
        else {
          id v15 = (uint64_t *)qword_101998588;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 16) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v15)),  "intValue");
        if (byte_1019985B7 >= 0) {
          __int16 v16 = &qword_1019985A0;
        }
        else {
          __int16 v16 = (uint64_t *)qword_1019985A0;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 20) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v16)),  "intValue");
        if (byte_1019985CF >= 0) {
          id v17 = &qword_1019985B8;
        }
        else {
          id v17 = (uint64_t *)qword_1019985B8;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 24) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v17)),  "intValue");
        if (byte_1019985E7 >= 0) {
          id v18 = &qword_1019985D0;
        }
        else {
          id v18 = (uint64_t *)qword_1019985D0;
        }
        objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18)),  "floatValue");
        *(_DWORD *)(*(void *)(a1 + 2040) + 28LL) = v19;
        if (byte_1019985FF >= 0) {
          __int16 v20 = &qword_1019985E8;
        }
        else {
          __int16 v20 = (uint64_t *)qword_1019985E8;
        }
        objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)),  "floatValue");
        *(_DWORD *)(*(void *)(a1 + 2040) + 32LL) = v21;
        if (byte_101998617 >= 0) {
          id v22 = &qword_101998600;
        }
        else {
          id v22 = (uint64_t *)qword_101998600;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 36) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v22)),  "intValue");
        if (byte_10199862F >= 0) {
          id v23 = &qword_101998618;
        }
        else {
          id v23 = (uint64_t *)qword_101998618;
        }
        *(_BYTE *)(*(void *)(a1 + 2040) + 40) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v23)),  "BOOLValue");
        if (byte_101998647 >= 0) {
          id v24 = &qword_101998630;
        }
        else {
          id v24 = (uint64_t *)qword_101998630;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 44) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v24)),  "intValue");
        if (byte_10199865F >= 0) {
          id v25 = &qword_101998648;
        }
        else {
          id v25 = (uint64_t *)qword_101998648;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 52) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v25)),  "intValue");
        if (byte_101998677 >= 0) {
          id v26 = &qword_101998660;
        }
        else {
          id v26 = (uint64_t *)qword_101998660;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 56) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v26)),  "intValue");
        if (byte_10199868F >= 0) {
          __int128 v27 = &qword_101998678;
        }
        else {
          __int128 v27 = (uint64_t *)qword_101998678;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 60) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v27)),  "intValue");
        if (byte_1019986A7 >= 0) {
          id v28 = &qword_101998690;
        }
        else {
          id v28 = (uint64_t *)qword_101998690;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 64) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v28)),  "intValue");
        if (byte_1019986BF >= 0) {
          id v29 = &qword_1019986A8;
        }
        else {
          id v29 = (uint64_t *)qword_1019986A8;
        }
        *(void *)(*(void *)(a1 + 2040) + 72) = (int)objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v29)),  "intValue");
        if (byte_1019986D7 >= 0) {
          uint64_t v30 = &qword_1019986C0;
        }
        else {
          uint64_t v30 = (uint64_t *)qword_1019986C0;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 80) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v30)),  "intValue");
        if (byte_1019986EF >= 0) {
          id v31 = &qword_1019986D8;
        }
        else {
          id v31 = (uint64_t *)qword_1019986D8;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 84) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v31)),  "intValue");
        if (byte_101998707 >= 0) {
          id v32 = &qword_1019986F0;
        }
        else {
          id v32 = (uint64_t *)qword_1019986F0;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 88) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v32)),  "intValue");
        if (byte_10199871F >= 0) {
          v33 = &qword_101998708;
        }
        else {
          v33 = (uint64_t *)qword_101998708;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 92) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v33)),  "intValue");
        if (byte_101998737 >= 0) {
          id v34 = &qword_101998720;
        }
        else {
          id v34 = (uint64_t *)qword_101998720;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 96) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v34)),  "intValue");
        if (byte_10199874F >= 0) {
          v35 = &qword_101998738;
        }
        else {
          v35 = (uint64_t *)qword_101998738;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 100) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v35)),  "intValue");
        if (byte_101998767 >= 0) {
          v36 = &qword_101998750;
        }
        else {
          v36 = (uint64_t *)qword_101998750;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 104) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v36)),  "intValue");
        if (byte_10199877F >= 0) {
          uint64_t v37 = &qword_101998768;
        }
        else {
          uint64_t v37 = (uint64_t *)qword_101998768;
        }
        *(_DWORD *)(*(void *)(a1 + 2040) + 108) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v37)),  "intValue");
        if (byte_101998797 >= 0) {
          id v38 = &qword_101998780;
        }
        else {
          id v38 = (uint64_t *)qword_101998780;
        }
        *(_BYTE *)(*(void *)(a1 + 2040) + 112) = objc_msgSend( objc_msgSend( v3,  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  v38)),  "BOOLValue");
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        v39 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "#EED2,readEEDMetricDataFromCache,EED metric data successfully read from cache",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10184E040);
          }
          LOWORD(v46) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,readEEDMetricDataFromCache,EED metric data successfully read from cache",  &v46,  2);
          id v43 = (uint8_t *)v42;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v42);
          if (v43 != buf) {
            free(v43);
          }
        }

        return 1LL;
      }
    }

    else
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v40 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "#EED2,readEEDMetricDataFromCache,nil fEED2Report,early return",  buf,  2u);
      }

      BOOL v41 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v41)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        LOWORD(v46) = 0;
        double v44 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,readEEDMetricDataFromCache,nil fEED2Report,early return",  &v46,  2);
        id v10 = v45;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v44);
        goto LABEL_122;
      }
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v9 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#EED2,readEEDMetricDataFromCache,EED metric data not cached,early Return",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      LOWORD(v46) = 0;
      double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,readEEDMetricDataFromCache,EED metric data not cached,early Return",  &v46,  2,  v46);
      goto LABEL_24;
    }
  }

  return result;
}

BOOL sub_100781D20(uint64_t a1)
{
  return sub_100756190(a1 + 1448);
}

void sub_100781D28(id a1)
{
  qword_101934898 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100781D54(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = *(_DWORD *)a3;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  __int128 v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v7 = *(_OWORD *)(a3 + 32);
  *(void *)(a1 + 56) = *(void *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  int v8 = *(_DWORD *)(a3 + 56);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(a3 + 60);
  *(_DWORD *)(a1 + 64) = v8;
  __int128 v9 = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a3 + 80);
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = 0LL;
  *(void *)(a3 + 80) = 0LL;
  __int128 v10 = *(_OWORD *)(a3 + 88);
  *(void *)(a1 + 112) = *(void *)(a3 + 104);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 96) = 0LL;
  *(void *)(a3 + 104) = 0LL;
  __int128 v11 = *(_OWORD *)(a3 + 112);
  *(void *)(a1 + 136) = *(void *)(a3 + 128);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a3 + 112) = 0LL;
  *(void *)(a3 + 120) = 0LL;
  *(void *)(a3 + 12_Block_object_dispose(va, 8) = 0LL;
  __int128 v12 = *(_OWORD *)(a3 + 136);
  *(void *)(a1 + 160) = *(void *)(a3 + 152);
  *(_OWORD *)(a1 + 144) = v12;
  sub_10001B9CC(a1 + 168, (uint64_t *)(a3 + 160));
  __int128 v13 = *(_OWORD *)(a3 + 200);
  *(void *)(a1 + 224) = *(void *)(a3 + 216);
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v13;
  *(void *)(a3 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 216) = 0LL;
  *(void *)(a3 + 200) = 0LL;
  __int128 v14 = *(_OWORD *)(a3 + 272);
  __int128 v15 = *(_OWORD *)(a3 + 288);
  __int128 v16 = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 240);
  v5[17] = v14;
  v5[18] = v15;
  v5[16] = v16;
  __int128 v17 = *(_OWORD *)(a3 + 352);
  __int128 v19 = *(_OWORD *)(a3 + 304);
  __int128 v18 = *(_OWORD *)(a3 + 320);
  v5[21] = *(_OWORD *)(a3 + 336);
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a3 + 224);
  __int128 v21 = *(_OWORD *)(a3 + 384);
  __int128 v20 = *(_OWORD *)(a3 + 400);
  __int128 v22 = *(_OWORD *)(a3 + 368);
  *(void *)(a1 + 424) = *(void *)(a3 + 416);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  return a1;
}

uint64_t sub_100781E94(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100781F1C(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  __int128 v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100781FD0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10078202C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100782044(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    __int128 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_1007822C4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  __int128 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_10078246C((uint64_t)v25, 0LL);
  return i;
}

void sub_1007822AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_1007822C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  BOOL result = sub_100782338((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100782320(_Unwind_Exception *a1)
{
}

char *sub_100782338(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_1010DD48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + _Block_object_dispose(va, 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  __dst[72] = *((_BYTE *)a2 + 72);
  uint64_t v7 = __dst + 80;
  if (*((char *)a2 + 103) < 0)
  {
    sub_1010DD48C(v7, *((void **)a2 + 10), *((void *)a2 + 11));
  }

  else
  {
    __int128 v8 = a2[5];
    *((void *)__dst + 12) = *((void *)a2 + 12);
    *(_OWORD *)uint64_t v7 = v8;
  }

  return __dst;
}

void sub_100782420(_Unwind_Exception *exception_object)
{
}

void sub_10078246C(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1007824B0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_1007824B0(uint64_t a1)
{
}

uint64_t sub_100782514(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10078254C(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_1007824B0((uint64_t)(v2 + 2));
      operator delete(v2);
      int8x8_t v2 = v3;
    }

    while (v3);
  }

void sub_100782588(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10078254C(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

uint64_t sub_1007825DC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100782614(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_100100BFC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

unsigned __int8 *sub_100782650(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  __int128 v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    __int128 v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_1007828E8(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_100782988((uint64_t)v26, 0LL);
  return i;
}

void sub_1007828D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_BYTE *sub_1007828E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __int128 v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  BOOL result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    BOOL result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)BOOL result = v11;
  }

  void v8[5] = 0LL;
  v8[6] = 0LL;
  v8[7] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100782970(_Unwind_Exception *a1)
{
}

void sub_100782988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100100BFC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_1007829CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  __int128 v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    __int128 v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100782C64(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_10078246C((uint64_t)v26, 0LL);
  return i;
}

void sub_100782C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

double sub_100782C64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __int128 v8 = (char *)operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)__int128 v8 = 0LL;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_1010DD48C(v9, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v9 = v11;
  }

  double result = 0.0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100782CFC(_Unwind_Exception *a1)
{
}

void sub_100782D14(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100782614(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

uint64_t sub_100782D68(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100782DA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_100781E94((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t *sub_100782DDC(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v12 = a1 + 16;
  unint64_t v13 = operator new(0x1C0uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *unint64_t v13 = 0LL;
  v13[1] = v6;
  sub_100783030((uint64_t)(v13 + 2), a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1LL;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100019E10(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }

  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }

      else
      {
        v21 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }

  uint64_t i = (uint64_t *)v23[0];
  v23[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100783178((uint64_t)v23, 0LL);
  return i;
}

void sub_100783018(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100783030(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = (_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 8);
  __int128 v5 = (_OWORD *)(a1 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  __int128 v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  int v8 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  __int128 v10 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 112) = 0LL;
  __int128 v11 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 136) = 0LL;
  __int128 v12 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v12;
  sub_10001B9CC(a1 + 168, (uint64_t *)(a2 + 168));
  __int128 v13 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v13;
  *(void *)(a2 + 216) = 0LL;
  *(void *)(a2 + 224) = 0LL;
  *(void *)(a2 + 20_Block_object_dispose(va, 8) = 0LL;
  __int128 v14 = v4[16];
  __int128 v15 = v4[17];
  __int128 v16 = v4[18];
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 248);
  v5[17] = v15;
  v5[18] = v16;
  v5[16] = v14;
  __int128 v17 = v4[22];
  __int128 v19 = v4[19];
  __int128 v18 = v4[20];
  v5[21] = v4[21];
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  __int128 v21 = v4[24];
  __int128 v20 = v4[25];
  __int128 v22 = v4[23];
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  return a1;
}

void sub_100783178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100781E94((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

void sub_1007831C0(std::__shared_weak_count *a1)
{
}

uint64_t sub_1007831D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100783218(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    __int128 v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 96) = 0LL;
  int v8 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_6;
    }
LABEL_21:
    sub_10124A62C();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h",  60,  "CLStateMachine");
    __break(1u);
    return;
  }

  if (!*((_BYTE *)a2 + 23)) {
    goto LABEL_21;
  }
LABEL_6:
  else {
    size_t v9 = (size_t)a2[1];
  }
  sub_1000392EC((uint64_t)&v12, v9 + 1);
  if (v13 >= 0) {
    __int128 v10 = &v12;
  }
  else {
    __int128 v10 = (__int128 *)v12;
  }
  if (v9)
  {
    else {
      __int128 v11 = *a2;
    }
    memmove(v10, v11, v9);
  }

  *(_WORD *)((char *)v10 + v9) = 44;
  *(_OWORD *)int v8 = v12;
  *(void *)(a1 + 112) = v13;
}

void sub_10078339C(_Unwind_Exception *a1)
{
}

void sub_1007833DC(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100783408(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_100783470(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  sub_100008390(v2, *(void **)(a1 + 64));
  sub_10000AE14(a1 + 32);
  sub_100008390(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100783470(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_10076452C(a3, *((_DWORD *)v5 + 8));
      __int128 v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          __int128 v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != a2);
  }

  return a3;
}

void sub_1007834EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100EED3EC();
    operator delete(v4);
  }

void sub_100783518(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100CC7BFC();
    operator delete(v4);
  }

uint64_t **sub_100783544(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  __int128 v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        __int128 v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      __int128 v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    __int128 v11 = operator new(0x38uLL);
    _WORD v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    *((void *)v11 + 6) = 0LL;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void *sub_10078360C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E0F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100783640(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E0F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10078365C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1448LL;
}

uint64_t sub_100783668(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007836A4()
{
}

void *sub_1007836B8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E180;
  result[1] = v3;
  return result;
}

uint64_t sub_1007836EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E180;
  a2[1] = v2;
  return result;
}

void sub_100783708(uint64_t a1, void **a2, id **a3)
{
}

uint64_t sub_100783718(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100783754()
{
}

void sub_100783760(uint64_t a1, uint64_t a2)
{
}

void *sub_1007837B4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      __int128 v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          __int128 v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  __int128 v11 = operator new(0x18uLL);
  *__int128 v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_BYTE *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100019E10(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  __int128 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *__int128 v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }

  *__int128 v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    __int128 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_1007839C0(_Unwind_Exception *a1)
{
}

void *sub_1007839D4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      __int128 v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          __int128 v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  __int128 v11 = operator new(0x18uLL);
  *__int128 v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100019E10(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  __int128 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *__int128 v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }

  *__int128 v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    __int128 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_100783BDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100783BF0(uint64_t a1)
{
  return sub_1007615DC(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *sub_100783C08(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E210;
  result[1] = v3;
  return result;
}

uint64_t sub_100783C3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E210;
  a2[1] = v2;
  return result;
}

uint64_t sub_100783C58(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1448LL;
}

uint64_t sub_100783C64(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100783CA0()
{
}

void *sub_100783CB4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E290;
  result[1] = v3;
  return result;
}

uint64_t sub_100783CE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E290;
  a2[1] = v2;
  return result;
}

void sub_100783D04(uint64_t a1, void **a2, id **a3)
{
}

uint64_t sub_100783D14(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100783D50()
{
}

uint64_t sub_100783D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      sub_10043BD50(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 40LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_100783DC0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      sub_10043AFF4(v4 + v2);
      v2 -= 40LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100783DEC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E310;
  result[1] = v3;
  return result;
}

uint64_t sub_100783E20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E310;
  a2[1] = v2;
  return result;
}

void sub_100783E3C(uint64_t a1, int *a2, void **a3, void **a4)
{
}

uint64_t sub_100783E50(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100783E8C()
{
}

char *sub_100783E98@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 4), *((void *)result + 5));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(void *)(a2 + 16) = *((void *)result + 6);
  return result;
}

void *sub_100783EC4(uint64_t a1, uint64_t a2)
{
  double result = (void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)double result = v3;
  return result;
}

void sub_100783EF4(uint64_t a1)
{
}

void *sub_100783F10(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10184E3D0;
  result[1] = v3;
  return result;
}

uint64_t sub_100783F44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10184E3D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100783F60(uint64_t a1, int *a2, void **a3, void **a4)
{
  int v4 = *a2;
  uint64_t v5 = *a3;
  __int128 v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_BYTE *)(v7 + 1936) = 0;
  return sub_100779470(v7, v4, v5, v6);
}

uint64_t sub_100783F78(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100783FB4()
{
}

BOOL sub_100783FC0()
{
  return os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_FAULT);
}

BOOL sub_100783FD4()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2184), OS_LOG_TYPE_INFO);
}

BOOL sub_100783FE4()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2184));
}

BOOL sub_100783FF0()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2184));
}

uint64_t sub_100783FFC()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101998798, (void *)&_mh_execute_header);
}

float sub_100784668(uint64_t a1, int a2)
{
  int v2 = 0;
  while (1)
  {
    uint64_t v3 = v2;
    uint64_t v4 = dword_10193A040[63 * a2 + v2];
    if ((_DWORD)v4 == 10000) {
      break;
    }
    double v5 = *(float *)(a1 + 4 * v4);
    int v2 = 2 * v3 + 2;
    if (dbl_101955B38[63 * a2 + v3] >= v5) {
      int v2 = (2 * v3) | 1;
    }
    if (v2 >= 63) {
      return 0.0;
    }
  }

  return dbl_101955B38[63 * a2 + v3];
}

uint64_t sub_1007846EC(uint64_t a1)
{
  uint64_t v2 = 0LL;
  int v3 = -6;
  do
  {
    float v4 = 0.0;
    unsigned int v5 = v3;
    do
    {
      v5 += 6;
      float v4 = v4 + sub_100784668(a1, v5);
    }

    while (v5 < 0x1BC);
    *(float *)&v13[4 * v2++ + 24] = v4;
    ++v3;
  }

  while (v2 != 6);
  uint64_t v6 = 0LL;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + expf(*(float *)&v13[v6 + 24]);
    v6 += 4LL;
  }

  while (v6 != 24);
  for (uint64_t i = 0LL; i != 24; i += 4LL)
    *(float *)&v13[i] = expf(*(float *)&v13[i + 24]) / v7;
  uint64_t v9 = 0LL;
  float v10 = 0.0;
  float v11 = -1.0;
  do
  {
    if (*(float *)&v13[4 * v9] >= v10)
    {
      float v10 = *(float *)&v13[4 * v9];
      float v11 = (float)(int)v9;
    }

    ++v9;
  }

  while (v9 != 6);
  return (int)v11;
}

uint64_t sub_100784818(uint64_t a1, uint64_t a2)
{
  return sub_1007846EC(a1 + 8);
}

float sub_10078483C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 356);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 380);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 26_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 30_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 436);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 444);
  float result = *(float *)(a2 + 448);
  *(float *)(a1 + 32_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100784D9C(uint64_t a1, mach_error_t a2)
{
  if (a2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184E648);
    }
    float v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134218242;
      uint64_t v13 = v5;
      __int16 v14 = 2080;
      BOOL v15 = mach_error_string(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[CLHidManager] setReport: id=0x%lx, failed=%s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184E648);
      }
      uint64_t v6 = qword_1019344B8;
      mach_error_string(a2);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  1LL,  "[CLHidManager] setReport: id=0x%lx, failed=%s",  v11,  22);
LABEL_19:
      float v10 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLHidDevice setReport:payload:length:]_block_invoke", "%s\n", v7);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184E648);
    }
    unint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134218240;
      uint64_t v13 = v9;
      __int16 v14 = 1024;
      LODWORD(v15) = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[CLHidManager] setReport: id=0x%lx, success=%d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184E648);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[CLHidManager] setReport: id=0x%lx, success=%d",  v11,  18);
      goto LABEL_19;
    }
  }

id sub_100785334(id result, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)*((void *)result + 4);
  if (v3)
  {
    float result = objc_msgSend(objc_msgSend(*((id *)result + 4), "clientDevices"), "count");
    if (result) {
      return _[v3 updateClientDeviceWithHidDevice:a2 added:a3];
    }
  }

  return result;
}

uint64_t sub_10078546C(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    float result = objc_opt_respondsToSelector( [*(id *)(result + 32) delegate],  "monitorUpdateForDevice:added:");
    if ((result & 1) != 0) {
      return (uint64_t)_objc_msgSend( objc_msgSend(v1, "delegate"),  "monitorUpdateForDevice:added:",  *(void *)(v2 + 40),  *(unsigned __int8 *)(v2 + 48));
    }
  }

  return result;
}

void sub_100785690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6
    && [*(id *)(a1 + 40) hidDevice]
    && (objc_opt_respondsToSelector([*(id *)(a1 + 48) delegate], "inputReportForDevice:report:length:") & 1) != 0)
  {
    if ([*(id *)(a1 + 48) delegateQueue])
    {
      uint64_t v9 = (dispatch_queue_s *)[*(id *)(a1 + 48) delegateQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100785740;
      block[3] = &unk_10181A2D8;
      block[4] = a6;
      block[5] = v6;
      void block[6] = *(void *)(a1 + 40);
      dispatch_async(v9, block);
    }
  }

void sub_100785740(uint64_t a1)
{
  if ((unint64_t)[*(id *)(a1 + 32) length] < 0x81)
  {
    objc_msgSend(*(id *)(a1 + 32), "getBytes:length:", v16, objc_msgSend(*(id *)(a1 + 32), "length"));
    objc_msgSend( objc_msgSend(*(id *)(a1 + 40), "delegate"),  "inputReportForDevice:report:length:",  *(void *)(a1 + 48),  v16,  objc_msgSend(*(id *)(a1 + 32), "length"));
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184E648);
    }
    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      id v3 = [*(id *)(a1 + 32) length];
      *(_DWORD *)buf = 134218240;
      id v13 = v3;
      __int16 v14 = 2048;
      uint64_t v15 = 128LL;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "[CLHidManager], HID report length %lu exceeds %zu byte maximum",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184E648);
      }
      uint64_t v4 = qword_1019344B8;
      id v5 = [*(id *)(a1 + 32) length];
      int v8 = 134218240;
      id v9 = v5;
      __int16 v10 = 2048;
      uint64_t v11 = 128LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  17LL,  "[CLHidManager], HID report length %lu exceeds %zu byte maximum",  &v8,  22);
      float v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLHidManager activateClientDevice:]_block_invoke", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_1007860F0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10078611C(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_100786198((uint64_t **)a1);
  return a1;
}

void sub_100786174(_Unwind_Exception *a1)
{
}

void sub_100786198(uint64_t **a1)
{
  id v5 = __p;
  *((void *)sub_1000C042C(a1, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "Cdma");
  id v5 = __p;
  *((void *)sub_1000C042C(a1, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "Lte");
  id v5 = __p;
  *((void *)sub_1000C042C(a1, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "NR5G");
  id v5 = __p;
  *((void *)sub_1000C042C(a1, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = a1 + 5;
  sub_1010DDBC0(__p, "Gsm");
  id v5 = __p;
  *((void *)sub_1000C042C(v2, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "Cdma");
  id v5 = __p;
  *((void *)sub_1000C042C(v2, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "Lte");
  id v5 = __p;
  *((void *)sub_1000C042C(v2, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "NR5G");
  id v5 = __p;
  *((void *)sub_1000C042C(v2, (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v5) + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100786400( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10078643C(uint64_t a1)
{
  return a1;
}

void sub_100786474(uint64_t **a1)
{
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[8] = 0LL;
  a1[9] = 0LL;
  sub_100786198(a1);
}

uint64_t sub_100786480(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    char v3 = 1;
    do
    {
      if (*((char *)v2 + 55) < 0)
      {
        sub_1010DD48C(buf, (void *)v2[4], v2[5]);
      }

      else
      {
        *(_OWORD *)buf = *((_OWORD *)v2 + 2);
        *(void *)&buf[16] = v2[6];
      }

      *(void *)&buf[24] = v2[7];
      if ((v3 & 1) == 0) {
        sub_10000CF44(&v41, (uint64_t)", ", 2LL);
      }
      char v4 = sub_10000CF44(&v41, (uint64_t)"rat, ", 5LL);
      if (buf[23] >= 0) {
        id v5 = buf;
      }
      else {
        id v5 = *(_BYTE **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v6 = buf[23];
      }
      else {
        uint64_t v6 = *(void *)&buf[8];
      }
      float v7 = sub_10000CF44(v4, (uint64_t)v5, v6);
      int v8 = sub_10000CF44(v7, (uint64_t)", numAlsRequests, ", 18LL);
      std::ostream::operator<<(v8, *(void *)&buf[24]);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      id v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          __int16 v10 = v9;
          id v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          __int16 v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }

        while (!v11);
      }

      char v3 = 0;
      uint64_t v2 = v10;
    }

    while (v10 != a1 + 1);
  }

  unint64_t v12 = (void *)a1[5];
  if (v12 != a1 + 6)
  {
    do
    {
      if (*((char *)v12 + 55) < 0)
      {
        sub_1010DD48C(buf, (void *)v12[4], v12[5]);
      }

      else
      {
        *(_OWORD *)buf = *((_OWORD *)v12 + 2);
        *(void *)&buf[16] = v12[6];
      }

      *(void *)&buf[24] = v12[7];
      sub_10000CF44(&v37, (uint64_t)", ", 2LL);
      id v13 = sub_10000CF44(&v37, (uint64_t)"rat, ", 5LL);
      if (buf[23] >= 0) {
        __int16 v14 = buf;
      }
      else {
        __int16 v14 = *(_BYTE **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v15 = buf[23];
      }
      else {
        uint64_t v15 = *(void *)&buf[8];
      }
      unint64_t v16 = sub_10000CF44(v13, (uint64_t)v14, v15);
      unint64_t v17 = sub_10000CF44(v16, (uint64_t)", numCellsRequested, ", 21LL);
      std::ostream::operator<<(v17, *(void *)&buf[24]);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      size_t v18 = (void *)v12[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          size_t v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          uint64_t v19 = (void *)v12[2];
          BOOL v11 = *v19 == (void)v12;
          unint64_t v12 = v19;
        }

        while (!v11);
      }

      unint64_t v12 = v19;
    }

    while (v19 != a1 + 6);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10184E688);
  }
  __int128 v20 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = a1[4];
    uint64_t v23 = a1[8];
    uint64_t v22 = a1[9];
    std::stringbuf::str(&v35, &v42);
    int size = (char)v35.__r_.__value_.__s.__size_;
    std::string::size_type v25 = v35.__r_.__value_.__r.__words[0];
    std::stringbuf::str(&v34, &v38);
    id v26 = &v35;
    if (size < 0) {
      id v26 = (std::stringbuf::string_type *)v25;
    }
    if ((v34.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v27 = &v34;
    }
    else {
      __int128 v27 = (std::stringbuf::string_type *)v34.__r_.__value_.__r.__words[0];
    }
    uint64_t v28 = a1[3];
    *(void *)buf = 68290562LL;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v21;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = v23;
    __int16 v45 = 2050;
    uint64_t v46 = v22;
    __int16 v47 = 2082;
    uint64_t v48 = v26;
    __int16 v49 = 2082;
    uint64_t v50 = v27;
    __int16 v51 = 2050;
    uint64_t v52 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:AlsNetworkRequestMetric, number of ALS requests triggered by WiFi:%{public}lu, numb er of APs requested:%{public}lu, number of surrounding APs requested:%{public}lu, number of ALS requests p er Rat:%{public, location:escape_only}s, number of Als Cells requested per Rat:%{public, location:escape_onl y}s, number of ALS cell requests with different rats:%{public}lu}",  buf,  0x4Eu);
  }

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_100786990;
  v33[3] = &unk_10184E668;
  v33[4] = a1;
  AnalyticsSendEventLazy(@"com.apple.clx.alsrequests", v33);
  *(void *)((char *)v36
  uint64_t v37 = v30;
  std::streambuf::~streambuf(&v38);
  std::ios::~ios(&v39);
  v40[0] = v29;
  *(void *)((char *)v40 + *(void *)(v29 - 24)) = v31;
  uint64_t v41 = v30;
  std::streambuf::~streambuf(&v42);
  return std::ios::~ios(&v43);
}

void sub_100786928( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a24);
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

id sub_100786990(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v30 = v1;
  id v5 = (void *)*v1;
  char v3 = v1 + 1;
  char v4 = v5;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_1010DD48C(__dst, (void *)v4[4], v4[5]);
      }

      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v4 + 2);
        uint64_t v34 = v4[6];
      }

      uint64_t v35 = v4[7];
      uint64_t v6 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v30);
      if (v34 >= 0) {
        size_t v7 = HIBYTE(v34);
      }
      else {
        size_t v7 = (size_t)__dst[1];
      }
      sub_1000392EC((uint64_t)__p, v7 + 11);
      if (v32 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (v34 >= 0) {
          id v9 = __dst;
        }
        else {
          id v9 = (void **)__dst[0];
        }
        memmove(v8, v9, v7);
      }

      strcpy((char *)v8 + v7, "NumRequests");
      if (v32 >= 0) {
        __int16 v10 = __p;
      }
      else {
        __int16 v10 = (void **)__p[0];
      }
      objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v6,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      BOOL v11 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v35);
      if (v34 >= 0) {
        size_t v12 = HIBYTE(v34);
      }
      else {
        size_t v12 = (size_t)__dst[1];
      }
      sub_1000392EC((uint64_t)__p, v12 + 18);
      if (v32 >= 0) {
        id v13 = __p;
      }
      else {
        id v13 = (void **)__p[0];
      }
      if (v12)
      {
        if (v34 >= 0) {
          __int16 v14 = __dst;
        }
        else {
          __int16 v14 = (void **)__dst[0];
        }
        memmove(v13, v14, v12);
      }

      strcpy((char *)v13 + v12, "NumRequestsBounded");
      if (v32 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v11,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__dst[0]);
      }
      unint64_t v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          unint64_t v17 = (void *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          char v4 = v17;
        }

        while (!v18);
      }

      char v4 = v17;
    }

    while (v17 != v3);
  }

  uint64_t v19 = (void *)v30[5];
  __int128 v20 = v30 + 6;
  if (v19 != v30 + 6)
  {
    do
    {
      if (*((char *)v19 + 55) < 0)
      {
        sub_1010DD48C(__dst, (void *)v19[4], v19[5]);
      }

      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v19 + 2);
        uint64_t v34 = v19[6];
      }

      uint64_t v35 = v19[7];
      uint64_t v21 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v30);
      if (v34 >= 0) {
        size_t v22 = HIBYTE(v34);
      }
      else {
        size_t v22 = (size_t)__dst[1];
      }
      sub_1000392EC((uint64_t)__p, v22 + 8);
      if (v32 >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if (v22)
      {
        if (v34 >= 0) {
          char v24 = __dst;
        }
        else {
          char v24 = (void **)__dst[0];
        }
        memmove(v23, v24, v22);
      }

      strcpy((char *)v23 + v22, "NumTower");
      if (v32 >= 0) {
        std::string::size_type v25 = __p;
      }
      else {
        std::string::size_type v25 = (void **)__p[0];
      }
      objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v21,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__dst[0]);
      }
      id v26 = (void *)v19[1];
      if (v26)
      {
        do
        {
          __int128 v27 = v26;
          id v26 = (void *)*v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          __int128 v27 = (void *)v19[2];
          BOOL v18 = *v27 == (void)v19;
          uint64_t v19 = v27;
        }

        while (!v18);
      }

      uint64_t v19 = v27;
    }

    while (v27 != v20);
  }

  uint64_t v28 = v30;
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v30[3], v30),  @"CellRequestsWithDifferentRats");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[3]),  @"CellRequestsWithDifferentRatsBounded");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]),  @"WifiRequests");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]),  @"WifiRequestsBounded");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[8]),  @"WifiNumAps");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[9]),  @"WifiNumSurroundingAps");
  return v2;
}

void sub_100786E28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100786E74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2 + 1;
  id v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_1010DD48C(buf, (void *)v5[4], v5[5]);
      }

      else
      {
        *(_OWORD *)buf = *((_OWORD *)v5 + 2);
        *(void *)&buf[16] = v5[6];
      }

      *(void *)&buf[24] = v5[7];
      sub_10000CF44(&v29, (uint64_t)", ", 2LL);
      size_t v7 = sub_10000CF44(&v29, (uint64_t)"rat, ", 5LL);
      if ((buf[23] & 0x80u) == 0) {
        int v8 = buf;
      }
      else {
        int v8 = *(uint8_t **)buf;
      }
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v9 = buf[23];
      }
      else {
        uint64_t v9 = *(void *)&buf[8];
      }
      __int16 v10 = sub_10000CF44(v7, (uint64_t)v8, v9);
      BOOL v11 = sub_10000CF44(v10, (uint64_t)", numCellsRequested, ", 21LL);
      std::ostream::operator<<(v11, *(void *)&buf[24]);
      size_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          id v13 = v12;
          size_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          id v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          id v5 = v13;
        }

        while (!v14);
      }

      id v5 = v13;
    }

    while (v13 != v6);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10184E688);
  }
  uint64_t v15 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(&v27, &v30);
    unint64_t v16 = (v27.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &v27
        : (std::stringbuf::string_type *)v27.__r_.__value_.__r.__words[0];
    *(void *)buf = 68289282LL;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:LogCellAlsMetric, number of Als Cells requested per Rat:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  unint64_t v17 = (void *)*a2;
  if ((void *)*a2 != v6)
  {
    int v18 = 0;
    do
    {
      if (*((char *)v17 + 55) < 0)
      {
        sub_1010DD48C(buf, (void *)v17[4], v17[5]);
      }

      else
      {
        *(_OWORD *)buf = *((_OWORD *)v17 + 2);
        *(void *)&buf[16] = v17[6];
      }

      *(void *)&buf[24] = v17[7];
      if (*(void *)&buf[24])
      {
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        uint64_t v19 = sub_10023BFA4((uint64_t **)a1, (const void **)buf, (uint64_t)&unk_1012CF090, (__int128 **)&v27);
        ++v19[7];
        uint64_t v20 = *(void *)&buf[24];
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        uint64_t v21 = sub_10023BFA4((uint64_t **)(a1 + 40), (const void **)buf, (uint64_t)&unk_1012CF090, (__int128 **)&v27);
        ++v18;
        v21[7] += v20;
      }

      size_t v22 = (void *)v17[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          size_t v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          uint64_t v23 = (void *)v17[2];
          BOOL v14 = *v23 == (void)v17;
          unint64_t v17 = v23;
        }

        while (!v14);
      }

      unint64_t v17 = v23;
    }

    while (v23 != v6);
    if (v18 > 1) {
      ++*(void *)(a1 + 24);
    }
  }

  *(void *)(a1 + 72) += a3;
  *(void *)((char *)v28
  uint64_t v29 = v24;
  std::streambuf::~streambuf(&v30);
  return std::ios::~ios(&v31);
}

void sub_100787238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100787278(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10184E688);
  }
  uint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = a2;
    __int16 v13 = 2050;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:LogWifiAlsMetric, number of APs requested:%{public}lu, number of surrounding APs re quested:%{public}lu}",  (uint8_t *)v8,  0x26u);
  }

  ++a1[4];
  uint64_t v7 = a1[9] + a3;
  a1[8] += a2;
  a1[9] = v7;
}

void *sub_100787390@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "Gsm");
}

void *sub_1007873A0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "Cdma");
}

void *sub_1007873B0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "Lte");
}

void *sub_1007873C0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "NR5G");
}

void sub_1007873D0(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1007873FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10078742C(uint64_t a1)
{
  id v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  return a1;
}

_DWORD *sub_10078745C(_DWORD *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  __int128 v11 = xmmword_1019987B0;
  __int16 v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v12 = 0LL;
  sub_10001B72C(&v12, (const void *)qword_1019987C0, qword_1019987C8[0], (qword_1019987C8[0] - qword_1019987C0) >> 2);
  __int128 v15 = *(_OWORD *)&qword_1019987C8[2];
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  sub_10001B72C( &v6,  (const void *)qword_1019987E8,  *(uint64_t *)algn_1019987F0,  (*(void *)algn_1019987F0 - qword_1019987E8) >> 2);
  uint64_t v9 = qword_101998800;
  char v10 = 1;
  sub_100707A44((uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6);
  sub_100708390(v4, a2, &v16);
  if (v21 && __p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }

  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }

  if (v10 && v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }

  if (v12)
  {
    __int16 v13 = v12;
    operator delete(v12);
  }

  sub_100D9AC14(a1 + 38, a2, 10LL);
  return a1;
}

void sub_100787590( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_1007875F0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  sub_100708424(a1 + 8);
  sub_100D9AC68(a1 + 152);
  sub_100D9AE1C(a1 + 152);
  sub_100708650(v2);
  return a1;
}

BOOL sub_100787648(int *a1, int a2)
{
  if (*a1 == a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184E6A8);
    }
    char v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *a1;
      *(_DWORD *)buf = 67109120;
      int v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Already correct power mode, %d", buf, 8u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184E6A8);
      }
      int v6 = *a1;
      int v15 = 67109120;
      int v16 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Already correct power mode, %d",  &v15);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184E6A8);
    }
    char v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *a1;
      *(_DWORD *)buf = 67109376;
      int v20 = v11;
      __int16 v21 = 1024;
      int v22 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Changing cached location power mode from %d to %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184E6A8);
      }
      int v12 = *a1;
      int v15 = 67109376;
      int v16 = v12;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Changing cached location power mode from %d to %d",  &v15,  14);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    *a1 = a2;
    if (a2 == 1)
    {
      sub_100708654((uint64_t)(a1 + 2));
      sub_100D9AE20((uint64_t)(a1 + 38));
    }

    else
    {
      if (a2) {
        return 0LL;
      }
      sub_100708424((uint64_t)(a1 + 2));
      sub_100D9AC68((uint64_t)(a1 + 38));
    }

    return 1LL;
  }

  return result;
}

void sub_1007879A8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1007879D4()
{
  uint64_t v0 = operator new(4uLL);
  __p = v0;
  *uint64_t v0 = 3;
  int v4 = v0 + 1;
  id v5 = v0 + 1;
  sub_10070798C((uint64_t)&xmmword_1019987B0, 10, 0, 1, (uint64_t)&__p, 10.0, 1.0, 1.0);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }

  __cxa_atexit((void (*)(void *))sub_1007873FC, &xmmword_1019987B0, (void *)&_mh_execute_header);
  uint64_t v1 = operator new(8uLL);
  __p = v1;
  *uint64_t v1 = 0x900000001LL;
  int v4 = v1 + 1;
  id v5 = v1 + 1;
  sub_100707990((uint64_t)&qword_1019987E8, (uint64_t)&__p, 30.0);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }

  return __cxa_atexit((void (*)(void *))sub_10078742C, &qword_1019987E8, (void *)&_mh_execute_header);
}

void sub_100787ABC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100787ADC(int a1)
{
  uint64_t v1 = "2.4GHz";
  if (a1 == 1) {
    uint64_t v1 = "stage1+5GHz";
  }
  if (a1 == 2) {
    return "stage2+5GHz";
  }
  else {
    return v1;
  }
}

uint64_t sub_100787B08()
{
  return 0x90800000000LL;
}

uint64_t sub_100787B14(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (a1[6] || a1[4] != a2)
  {
    if (a1[7] || a1[5] != a2)
    {
      return 0LL;
    }

    else
    {
      uint64_t v2 = 1LL;
      a1[7] = 1;
    }
  }

  else
  {
    uint64_t v2 = 1LL;
    a1[6] = 1;
  }

  return v2;
}

uint64_t sub_100787B64(int *a1)
{
  uint64_t v1 = *a1;
  else {
    return qword_101329D90[v1] | qword_101329DA8[v1] | 0xC0000000000LL;
  }
}

uint64_t sub_100787BA0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    unsigned int v2 = 0;
  }

  else
  {
    if (v1 > 2)
    {
      BOOL v4 = 0;
    }

    else if (*(_BYTE *)(a1 + 6))
    {
      BOOL v4 = (v1 & 7) == 0 || *(_BYTE *)(a1 + 7) == 0;
    }

    else
    {
      BOOL v4 = 1;
    }

    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4;
    unsigned int v2 = !v4;
  }

  if (v1 == 2)
  {
    uint64_t v12 = 0x90000000000LL;
    if (v2) {
      uint64_t v12 = 0xC0000000000LL;
    }
    uint64_t v14 = v2;
    uint64_t v13 = 0x800000000LL;
  }

  else
  {
    uint64_t v5 = 0x800000000LL;
    uint64_t v6 = 0x90000000000LL;
    if (v2) {
      uint64_t v7 = 0xC0000000000LL;
    }
    else {
      uint64_t v7 = 0x90000000000LL;
    }
    if (v2)
    {
      uint64_t v5 = 0x900000000LL;
      uint64_t v8 = 2LL;
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    if (v2) {
      uint64_t v6 = 0xC0000000000LL;
    }
    uint64_t v9 = 0x800000000LL;
    if (v1)
    {
      uint64_t v6 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
    }

    else
    {
      uint64_t v10 = v2;
    }

    BOOL v11 = v1 == 1;
    if (v1 == 1) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = v6;
    }
    if (v11) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v11) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v10;
    }
  }

  return v13 | v12 | v14;
}

uint64_t sub_100787C74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  *(_DWORD *)a1 = -1082130432;
  *(_BYTE *)(a1 + 4) = 0;
  *(float *)(a1 + _Block_object_dispose(va, 8) = a5;
  *(float *)(a1 + 12) = a6;
  *(_DWORD *)(a1 + 16) = 5;
  *(void *)(a1 + 24) = off_10184DB98;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = off_10184E718;
  *(void *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 184) = off_10184DB98;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 256) = a4;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184E6E8);
  }
  uint64_t v10 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *(float *)(a1 + 8);
    double v12 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134219008;
    double v30 = v11;
    __int16 v31 = 2048;
    double v32 = v12;
    __int16 v33 = 2048;
    uint64_t v34 = a2;
    __int16 v35 = 2048;
    uint64_t v36 = a3;
    __int16 v37 = 1024;
    int v38 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)",  buf,  0x30u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184E6E8);
    }
    double v14 = *(float *)(a1 + 8);
    double v15 = *(float *)(a1 + 12);
    int v19 = 134219008;
    double v20 = v14;
    __int16 v21 = 2048;
    double v22 = v15;
    __int16 v23 = 2048;
    uint64_t v24 = a2;
    __int16 v25 = 2048;
    uint64_t v26 = a3;
    __int16 v27 = 1024;
    int v28 = a4;
    LODWORD(v1_Block_object_dispose(va, 8) = 48;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)",  COERCE_DOUBLE(&v19),  v18);
    __int16 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCompassAccuracy::CLCompassAccuracy(const float, const float, const size_t, const size_t, const BOOL)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return a1;
}

void sub_100787F24(_Unwind_Exception *a1)
{
  v1[23] = v3 + 16;
  sub_10046E180(v1 + 26);
  v1[12] = v4 + 16;
  sub_10046E180(v2);
  v1[3] = v3 + 16;
  sub_10046E180(v1 + 6);
  _Unwind_Resume(a1);
}

void *sub_100787F60(void *a1)
{
  *a1 = off_10184E718;
  sub_10046E180(a1 + 5);
  return a1;
}

void *sub_100787F98(void *a1)
{
  a1[23] = off_10184DB98;
  sub_10046E180(a1 + 26);
  a1[12] = off_10184E718;
  sub_10046E180(a1 + 17);
  a1[3] = off_10184DB98;
  sub_10046E180(a1 + 6);
  return a1;
}

void sub_100787FF8(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  *(_DWORD *)a1 = -1082130432;
  *(float *)(a1 + _Block_object_dispose(va, 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(void *)(a1 + 32) = a2;
  sub_10074DFF8((void *)(a1 + 24));
  *(void *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184E6E8);
  }
  uint64_t v8 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *(float *)(a1 + 8);
    double v10 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134218752;
    double v24 = v9;
    __int16 v25 = 2048;
    double v26 = v10;
    __int16 v27 = 2048;
    uint64_t v28 = a2;
    __int16 v29 = 2048;
    uint64_t v30 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184E6E8);
    }
    double v11 = *(float *)(a1 + 8);
    double v12 = *(float *)(a1 + 12);
    int v15 = 134218752;
    double v16 = v11;
    __int16 v17 = 2048;
    double v18 = v12;
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    __int16 v21 = 2048;
    uint64_t v22 = a3;
    LODWORD(v14) = 42;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)",  COERCE_DOUBLE(&v15),  v14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompassAccuracy::init(const float, const float, const size_t, const size_t)",  "%s\n",  v13);
  }

float sub_100788228(uint64_t a1, float a2, float a3)
{
  float v9 = a3;
  if (*(_BYTE *)(a1 + 4))
  {
    float v8 = (float)(a2 - *(float *)(a1 + 8)) * (float)(a2 - *(float *)(a1 + 8));
    sub_10074DC40(a1 + 24, &v8);
    unint64_t v4 = *(void *)(a1 + 88);
    if (v4) {
      float v5 = *(float *)(a1 + 40) / (float)v4;
    }
    else {
      float v5 = 0.0;
    }
    float v7 = v5;
    sub_1007882AC(a1 + 96, &v7);
  }

  return sub_10074DC40(a1 + 184, &v9);
}

void sub_1007882AC(uint64_t a1, float *a2)
{
  uint64_t v4 = a1 + 40;
  sub_10047109C((void *)(a1 + 40), a2);
  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 > *(void *)(a1 + 8))
  {
    ++*(void *)(a1 + 72);
    *(void *)(a1 + 80) = v5 - 1;
    sub_10074E0DC(v4, 1);
  }

  if (*a2 <= *(float *)(a1 + 16))
  {
    unint64_t v6 = *(void *)(a1 + 24) + 1LL;
    *(void *)(a1 + 24) = v6;
    if (v6 >= *(void *)(a1 + 8)) {
      sub_1007886BC(a1);
    }
  }

  else
  {
    *(float *)(a1 + 16) = *a2;
    *(void *)(a1 + 24) = 0LL;
  }

float sub_100788354(uint64_t a1)
{
  return sub_10078837C(a1 + 96);
}

float sub_10078837C(uint64_t a1)
{
  unsigned int v2 = *(void ***)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 80) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 56);
      unsigned int v2 = (void **)(*(void *)(a1 + 48) + 8LL);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512LL;
    goto LABEL_7;
  }

  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 1024LL;
LABEL_7:
    *(void *)(a1 + 72) = v6;
  }

  float result = *(float *)(a1 + 32);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

float sub_1007883FC(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return *(float *)a1;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 16) - a2;
  if (v3 > 4) {
    float v4 = 40.0;
  }
  else {
    float v4 = flt_101329E08[v3];
  }
  if (*(_BYTE *)(a1 + 4))
  {
    float v5 = sub_100788504(a1);
    else {
      float v6 = v4;
    }
    if (v5 < v6) {
      float v4 = v6;
    }
    else {
      float v4 = v5;
    }
  }

  if (*(_BYTE *)(a1 + 256))
  {
    float v7 = v4 + sub_1007885B8(a1);
    float v4 = -1.0;
    if (v7 > 0.0)
    {
      float v4 = 10.0;
      if (v7 > 10.0)
      {
        float v4 = 15.0;
        if (v7 > 15.0)
        {
          float v4 = 20.0;
          if (v7 > 20.0)
          {
            float v4 = 25.0;
            if (v7 > 25.0)
            {
              float v4 = 30.0;
              if (v7 > 30.0)
              {
                if (v7 <= 35.0) {
                  return 35.0;
                }
                else {
                  return 40.0;
                }
              }
            }
          }
        }
      }
    }
  }

  return v4;
}

float sub_100788504(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    float v2 = sqrtf(*(float *)(a1 + 112)) / sqrt((double)v1);
  }
  else {
    float v2 = 0.0;
  }
  float v3 = v2 * *(float *)(a1 + 12);
  float result = 10.0;
  if (v3 >= 15.0)
  {
    float result = 15.0;
    if (v3 >= 30.0)
    {
      float result = 20.0;
      if (v3 >= 45.0)
      {
        float result = 25.0;
        if (v3 >= 60.0)
        {
          float result = 30.0;
          if (v3 >= 75.0)
          {
            if (v3 >= 90.0) {
              return 40.0;
            }
            else {
              return 35.0;
            }
          }
        }
      }
    }
  }

  return result;
}

float sub_1007885B8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 192);
  if (v1 && (unint64_t v2 = *(void *)(a1 + 248), v2 >= v1)) {
    return sub_1007885E8(*(float *)(a1 + 200) / (float)v2, 5.0);
  }
  else {
    return 0.0;
  }
}

float sub_1007885E8(float a1, float a2)
{
  if (a2 > a1) {
    return 180.0;
  }
  float v5 = (float)-a2 / a1;
  float v6 = acosf(v5);
  float v7 = sinf(v6);
  return fabsf(atan2f(v7 * a2, a1 + (float)(a2 * v5))) * 57.2957795;
}

void sub_10078865C(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100788688(void *a1)
{
  *a1 = off_10184E718;
  sub_10046E180(a1 + 5);
  operator delete(a1);
}

uint64_t sub_1007886BC(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 72);
  uint64_t v2 = *(void *)(result + 48);
  uint64_t v3 = *(void *)(result + 56);
  float v4 = (char *)(v2 + 8 * (v1 >> 10));
  if (v3 == v2)
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = *(void *)(result + 72) & 0x3FFLL;
  }

  else
  {
    uint64_t v5 = *(void *)(result + 72) & 0x3FFLL;
    uint64_t v6 = *(void *)v4 + 4 * v5;
  }

  float v7 = *(float *)(result + 32);
  *(float *)(result + 16) = v7;
  uint64_t v8 = *(void *)(result + 80);
  *(void *)(result + 24) = v8 - 1;
  unint64_t v9 = v8 + v1;
  double v10 = (char *)(v2 + 8 * (v9 >> 10));
  uint64_t v11 = v9 & 0x3FF;
  double v12 = v4;
LABEL_5:
  uint64_t v13 = (float *)v6;
  while (1)
  {
    unint64_t v14 = v3 == v2 ? 0LL : *(void *)v10 + 4 * v11;
    BOOL v15 = (unint64_t)v13 < v14 && v12 == v10;
    if (v12 >= v10 && !v15) {
      return result;
    }
    float v16 = *v13;
    if (*v13 > v7)
    {
      *(float *)(result + 16) = v16;
      if (v3 == v2) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = *(void *)v4 + 4 * v5;
      }
      else {
        uint64_t v18 = ((v12 - v4) << 7) + ((v6 - *(void *)v12) >> 2) - ((v17 - *(void *)v4) >> 2);
      }
      *(void *)(result + 24) = v18;
      float v7 = v16;
    }

    ++v13;
    v6 += 4LL;
    if (*(void *)v12 + 4096LL == v6)
    {
      uint64_t v19 = *((void *)v12 + 1);
      v12 += 8;
      uint64_t v6 = v19;
      goto LABEL_5;
    }
  }

double sub_1007887D0(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = off_10184DB98;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = off_10184DB98;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(void *)(a1 + 176) = off_10184DB98;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 256) = off_10184DB98;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  return result;
}

void *sub_10078883C(void *a1)
{
  a1[32] = off_10184DB98;
  sub_10046E180(a1 + 35);
  a1[22] = off_10184DB98;
  sub_10046E180(a1 + 25);
  a1[11] = off_10184DB98;
  sub_10046E180(a1 + 14);
  a1[2] = off_10184DB98;
  sub_10046E180(a1 + 5);
  return a1;
}

void sub_10078889C( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8, char a9)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *a3;
  *(_DWORD *)(a1 + 12) = *a4;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 24) = a5;
  sub_10074DFF8((void *)(a1 + 16));
  *(void *)(a1 + 96) = a6;
  sub_10074DFF8((void *)(a1 + 88));
  *(void *)(a1 + 160) = a7 / a5;
  *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *a8;
  *(void *)(a1 + 184) = a6;
  sub_10074DFF8((void *)(a1 + 176));
  *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = a9;
  if (a9) {
    unint64_t v14 = vcvtad_u64_f64(*(float *)a1 * 0.25);
  }
  else {
    unint64_t v14 = 1LL;
  }
  *(void *)(a1 + 264) = v14;
  sub_10074DFF8((void *)(a1 + 256));
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184E758);
  }
  BOOL v15 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    double v16 = *(float *)a1;
    double v17 = *(float *)(a1 + 4);
    double v18 = *(float *)(a1 + 12);
    int v19 = *(_DWORD *)(a1 + 160);
    double v20 = *(float *)(a1 + 168);
    *(_DWORD *)buf = 134219008;
    double v40 = v16;
    __int16 v41 = 2048;
    double v42 = v17;
    __int16 v43 = 2048;
    double v44 = v18;
    __int16 v45 = 1024;
    int v46 = v19;
    __int16 v47 = 2048;
    double v48 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard de viation threshold (%.3f)",  buf,  0x30u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184E758);
    }
    double v21 = *(float *)a1;
    double v22 = *(float *)(a1 + 4);
    double v23 = *(float *)(a1 + 12);
    int v24 = *(_DWORD *)(a1 + 160);
    double v25 = *(float *)(a1 + 168);
    int v29 = 134219008;
    double v30 = v21;
    __int16 v31 = 2048;
    double v32 = v22;
    __int16 v33 = 2048;
    double v34 = v23;
    __int16 v35 = 1024;
    int v36 = v24;
    __int16 v37 = 2048;
    double v38 = v25;
    LODWORD(v2_Block_object_dispose(va, 8) = 48;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard de viation threshold (%.3f)",  COERCE_DOUBLE(&v29),  v28);
    __int16 v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLThreshold::init(const float &, const float &, const float &, const unsigned int, const unsigned int, const unsigned int, const float &, const BOOL)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

BOOL sub_100788B78(uint64_t a1, float *a2)
{
  if (*(_BYTE *)(a1 + 248) && *(void *)(a1 + 320) < *(void *)(a1 + 264)) {
    sub_10074DC40(a1 + 256, a2);
  }
  sub_10074DC40(a1 + 16, a2);
  unint64_t v4 = *(void *)(a1 + 80);
  float v5 = 0.0;
  float v6 = 0.0;
  if (v4) {
    float v6 = *(float *)(a1 + 32) / (float)v4;
  }
  *(float *)buf = v6;
  sub_10074DC40(a1 + 88, (float *)buf);
  unint64_t v7 = *(void *)(a1 + 152);
  if (v7) {
    float v5 = *(float *)(a1 + 104) / (float)v7;
  }
  *((float *)&v25 + 1) = (float)(*a2 - v5) * (float)(*a2 - v5);
  sub_10074DC40(a1 + 176, (float *)&v25 + 1);
  BOOL result = sub_100788F14(a1);
  if (result)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184E758);
    }
    unint64_t v9 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v10 = *(void *)(a1 + 320);
      if (v10) {
        double v11 = (float)(*(float *)(a1 + 272) / (float)v10);
      }
      else {
        double v11 = 0.0;
      }
      double v12 = *(float *)(a1 + 12);
      double v13 = *a2;
      unint64_t v14 = *(void *)(a1 + 240);
      if (v14) {
        float v15 = *(float *)(a1 + 192) / (float)v14;
      }
      else {
        float v15 = 0.0;
      }
      int v16 = *(_DWORD *)(a1 + 164);
      *(_DWORD *)buf = 134219008;
      double v37 = v12;
      __int16 v38 = 2048;
      double v39 = v13;
      __int16 v40 = 2048;
      double v41 = v11;
      __int16 v42 = 2048;
      double v43 = sqrtf(fabsf(v15));
      __int16 v44 = 1024;
      int v45 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)",  buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184E758);
      }
      unint64_t v17 = *(void *)(a1 + 320);
      if (v17) {
        double v18 = (float)(*(float *)(a1 + 272) / (float)v17);
      }
      else {
        double v18 = 0.0;
      }
      double v19 = *(float *)(a1 + 12);
      double v20 = *a2;
      unint64_t v21 = *(void *)(a1 + 240);
      if (v21) {
        float v22 = *(float *)(a1 + 192) / (float)v21;
      }
      else {
        float v22 = 0.0;
      }
      int v23 = *(_DWORD *)(a1 + 164);
      int v26 = 134219008;
      double v27 = v19;
      __int16 v28 = 2048;
      double v29 = v20;
      __int16 v30 = 2048;
      double v31 = v18;
      __int16 v32 = 2048;
      double v33 = sqrtf(fabsf(v22));
      __int16 v34 = 1024;
      int v35 = v23;
      LODWORD(v25) = 48;
      int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (% f) and count of (%d)",  COERCE_DOUBLE(&v26),  v25);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLThreshold::update(const float &)", "%s\n", v24);
    }

    return 1LL;
  }

  return result;
}

BOOL sub_100788F14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 152);
  float v2 = 0.0;
  float v3 = 0.0;
  if (v1) {
    float v3 = *(float *)(a1 + 104) / (float)v1;
  }
  unint64_t v4 = *(void *)(a1 + 320);
  if (v4) {
    float v2 = *(float *)(a1 + 272) / (float)v4;
  }
  float v5 = vabds_f32(v3, v2);
  unint64_t v6 = *(void *)(a1 + 240);
  if (v6) {
    float v7 = *(float *)(a1 + 192) / (float)v6;
  }
  else {
    float v7 = 0.0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 164);
  if (v5 <= *(float *)(a1 + 12))
  {
    if (!v8) {
      return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
    }
    int v9 = -1;
  }

  else
  {
    int v9 = 1;
  }

  v8 += v9;
  *(_DWORD *)(a1 + 164) = v8;
  return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
}

float sub_100788FA4(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = *(void *)(a1 + 320);
    if (v3) {
      float v4 = *(float *)(a1 + 272) / (float)v3;
    }
    else {
      float v4 = 0.0;
    }
    float v6 = v4;
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
    sub_10074DFF8((void *)(a1 + 16));
    sub_10074DFF8((void *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_10074DFF8((void *)(a1 + 176));
    return sub_10078904C((void *)a1, &v6);
  }

  else
  {
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
    sub_10074DFF8((void *)(a1 + 16));
    sub_10074DFF8((void *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_10074DFF8((void *)(a1 + 176));
    sub_10074DFF8((void *)(a1 + 256));
  }

  return result;
}

float sub_10078904C(void *a1, float *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 32);
  sub_10074DFF8(a1 + 32);
  while (a1[40] < a1[33])
    float result = sub_10074DC40(v4, a2);
  return result;
}

float sub_1007890A0(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

float sub_1007890A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 152);
  if (v1) {
    return *(float *)(a1 + 104) / (float)v1;
  }
  else {
    return 0.0;
  }
}

float sub_1007890C8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 320);
  if (v1) {
    return *(float *)(a1 + 272) / (float)v1;
  }
  else {
    return 0.0;
  }
}

void sub_1007890E8(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100789114(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208]) {
      return sub_100253308(*(void *)(a3 + 8));
    }
  }

  return result;
}

uint64_t sub_1007891AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5 = *(float *)(a3 + 1372);
  int v6 = sub_1003DBFB4(a3);
  if (!*(_BYTE *)(a3 + 352)) {
    return a2;
  }
  if (!v6) {
    return a2;
  }
  float v7 = *(double *)(a3 + 560);
  double v8 = 1.0
     - (v5 * -0.699999988 + 208.0 - v7)
     / (v5 * -0.699999988 + 208.0 - fmax(fmin(v5 * -3.20000005 + 117.900002, 100.0), 65.0));
  if (v8 <= 0.324999988) {
    return a2;
  }
  uint64_t v9 = sub_1005186D4(2LL, a2);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10184E7C0);
  }
  unint64_t v10 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a3 + 120);
    *(_DWORD *)buf = 134218752;
    uint64_t v25 = v11;
    __int16 v26 = 1026;
    int v27 = a2;
    __int16 v28 = 1026;
    int v29 = v9;
    __int16 v30 = 2050;
    double v31 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Overriding youth type for heart rate, beginTime, %f, before, %{public}d, after, %{public}d, fhr,%{public}f",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10184E7C0);
    }
    uint64_t v12 = *(void *)(a3 + 120);
    int v16 = 134218752;
    uint64_t v17 = v12;
    __int16 v18 = 1026;
    int v19 = a2;
    __int16 v20 = 1026;
    int v21 = v9;
    __int16 v22 = 2050;
    double v23 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Overriding youth type for heart rate, beginTime, %f, before, %{public}d, after, %{public}d, fhr,%{public}f",  &v16,  34);
    unint64_t v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMotionActivity::TypeYouth CLFitnessYouthHeartRateOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  return v9;
}

void sub_100789464(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100789490(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100789EC8(v2, a2);
}

double sub_1007894A0(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  double result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_1007894B8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) < 5;
}

double sub_1007894C8(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  double result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_1007894E0(uint64_t a1, uint64_t a2)
{
  return *(int *)(a2 + 20) >= 8 && *(double *)a2 < 5.0;
}

uint64_t sub_100789508(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100789F70(v2, a2);
}

uint64_t sub_100789518(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_10078A010(v2, a2);
}

uint64_t sub_100789528(uint64_t a1, int a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = &unk_10184E7E0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 10LL;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_10184E8E0;
  *(void *)(a1 + 32) = 0x400000000LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = off_101848F08;
  *(_OWORD *)(a1 + 176) = xmmword_1012E1E80;
  *(void *)(a1 + 192) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 252) = 75;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(int64x2_t *)(a1 + 576) = vdupq_n_s64(0xC08F380000000000LL);
  *(_BYTE *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0LL;
  *(_BYTE *)(a1 + 60_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 616) = 1;
  *(void *)(a1 + 632) = 0xA00000000LL;
  *(_DWORD *)(a1 + 62_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 680) = 1;
  *(void *)(a1 + 696) = 0xC00000000LL;
  *(_DWORD *)(a1 + 692) = 1031798784;
  *(_OWORD *)(a1 + 752) = 0u;
  if (a2 == 1) {
    sub_100CCCC8C(v3, 1, (uint64_t)&v5);
  }
  return a1;
}

void sub_100789628(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  v1[21] = v3 + 16;
  char v5 = (void *)v1[26];
  if (v5)
  {
    v1[27] = v5;
    operator delete(v5);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100789658(uint64_t a1, double *a2)
{
  uint64_t v4 = operator new(0xCuLL);
  __int16 v42 = v4 + 3;
  double v43 = (char *)(v4 + 3);
  *(void *)uint64_t v4 = 7LL;
  v4[2] = 5;
  __p = v4;
  uint64_t v5 = sub_1006A7E04(a1 + 168, (uint64_t)a2);
  if ((_DWORD)v5 && ((v6 = *(unsigned __int8 *)(a1 + 24), v6 != 3) ? (BOOL v7 = v6 == 0) : (BOOL v7 = 1), v7))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10184E938);
    }
    double v8 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "HRStop detect in rowing model during state,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10184E938);
      }
      int v10 = *(unsigned __int8 *)(a1 + 24);
      LODWORD(v61[0]) = 67240192;
      HIDWORD(v61[0]) = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "HRStop detect in rowing model during state,%{public}d",  v61,  8);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    __int16 v62 = 0;
    *(_OWORD *)v61 = xmmword_1012E1E90;
    memset(&v61[2], 0, 135);
    __int128 v63 = xmmword_1012E1E90;
    uint64_t v64 = 0LL;
    int v65 = 0;
    uint64_t v66 = 0LL;
    v67[0] = 0LL;
    *(void *)((char *)v67 + 5) = 0LL;
    *(void *)((char *)&v67[1] + 6) = 0LL;
    char v68 = 0;
    memset(&v67[3], 0, 24);
    __int128 v69 = xmmword_1012E1E90;
    uint64_t v70 = 0LL;
    int v71 = 0;
    unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
    int v83 = 0;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    int v78 = 0;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    memset(v82, 0, sizeof(v82));
    uint64_t v84 = 0LL;
    uint64_t v85 = 0LL;
    unint64_t v86 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v87 = 0LL;
    int v88 = 0;
    uint64_t v94 = 0LL;
    __int16 v95 = 0;
    int v100 = 0;
    int v93 = 0;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v97 = 0u;
    __int128 v96 = 0u;
    char v98 = 0;
    memset(v99, 0, sizeof(v99));
    unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v120 = 0u;
    __int128 v119 = 0u;
    __int128 v118 = 0u;
    __int128 v117 = 0u;
    __int128 v116 = 0u;
    __int128 v115 = 0u;
    __int128 v114 = 0u;
    __int128 v113 = 0u;
    __int128 v112 = 0u;
    __int128 v111 = 0u;
    __int128 v110 = 0u;
    __int128 v109 = 0u;
    __int128 v108 = 0u;
    __int128 v107 = 0u;
    __int128 v106 = 0u;
    __int128 v105 = 0u;
    __int128 v104 = 0u;
    __int128 v103 = 0u;
    __int128 v102 = 0u;
    uint64_t v121 = 0LL;
    unint64_t v122 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v123 = 0u;
    __int128 v124 = 0u;
    __int128 v125 = 0u;
    __int128 v126 = 0u;
    unint64_t v127 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v128 = 0LL;
    int v129 = 0;
    uint64_t v130 = 0LL;
    char v131 = 0;
    unint64_t v132 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v134 = 0LL;
    uint64_t v133 = 0LL;
    uint64_t v135 = 0x80000000800000LL;
    uint64_t v137 = 0LL;
    uint64_t v136 = 0LL;
    __int128 v138 = xmmword_1012E1EA0;
    uint64_t v139 = 0x80000000800000LL;
    __int128 v140 = 0u;
    __int128 v141 = 0u;
    uint64_t v142 = 0LL;
    unint64_t v143 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v144 = 0u;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    __int128 v147 = 0u;
    __int128 v148 = 0u;
    __int128 v149 = 0u;
    int v150 = 0;
    unint64_t v151 = 0xFFEFFFFFFFFFFFFFLL;
    __int16 v152 = 0;
    int v153 = 0;
    unint64_t v154 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v155 = 7LL;
    unint64_t v156 = 0xFFEFFFFFFFFFFFFFLL;
    char v157 = 0;
    uint64_t v159 = 0LL;
    uint64_t v158 = 0LL;
    uint64_t v160 = 0LL;
    if ((sub_100CDB578(a2, &__p, (uint64_t)v61) & 1) != 0)
    {
      sub_10078A054((unsigned __int16 *)(a1 + 32), (uint64_t)v61, v123);
      unsigned __int16 v13 = sub_10078A0D0((unsigned __int16 *)(a1 + 32));
      *(_DWORD *)buf = v13 & 1;
      sub_10032E068((unsigned __int16 *)(a1 + 632), buf);
      *(_BYTE *)(a1 + 616) = 1;
      uint64_t v14 = *(unsigned __int16 *)(a1 + 698);
      unint64_t v15 = *(unsigned int *)(a1 + 700);
      uint64_t v16 = *(unsigned __int16 *)(a1 + 696);
      if (v16 + v14 >= v15) {
        uint64_t v17 = *(unsigned int *)(a1 + 700);
      }
      else {
        uint64_t v17 = 0LL;
      }
      *(float *)(a1 + 696 + 4 * (v16 + v14 - v17) + _Block_object_dispose(va, 8) = *((float *)&v133 + 1) * 57.296;
      if (v15 <= v14)
      {
        unint64_t v18 = v16 + 1;
        if (v18 >= v15) {
          __int16 v19 = v15;
        }
        else {
          __int16 v19 = 0;
        }
        *(_WORD *)(a1 + 696) = v18 - v19;
      }

      else
      {
        LOWORD(v14) = v14 + 1;
        *(_WORD *)(a1 + 69_Block_object_dispose(va, 8) = v14;
      }

      uint64_t v5 = 0LL;
      *(_BYTE *)(a1 + 680) = 1;
      sub_100208C68(a1 + 680);
      float v20 = *(float *)(a1 + 688);
      double v21 = sqrt(v20);
      BOOL v22 = v20 <= 0.0;
      double v23 = 0.0;
      if (!v22) {
        double v23 = v21;
      }
      double v38 = (float)(*(float *)&v133 * 57.296);
      double v39 = v23;
      LOBYTE(v40) = v13 & 1;
      BYTE1(v40) = v13 > 0xFFu;
      uint64_t v24 = *(unsigned __int16 *)(a1 + 634);
      if (*(_WORD *)(a1 + 634))
      {
        unint64_t v25 = 0LL;
        int v26 = 0;
        do
          v26 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 632), v25++);
        while (v24 != v25);
      }

      else
      {
        int v26 = 0;
      }

      HIDWORD(v40) = v26;
      sub_100CCCC8C(a1 + 8, 0, (uint64_t)&v38);
      int v27 = *(unsigned __int8 *)(a1 + 24);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10184E938);
      }
      __int16 v28 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
      {
        int v29 = *(_DWORD *)(a1 + 752);
        int v30 = *(_DWORD *)(a1 + 756);
        int v31 = *(_DWORD *)(a1 + 760);
        *(_DWORD *)buf = 67111168;
        *(_DWORD *)&uint8_t buf[4] = v27;
        __int16 v162 = 1024;
        int v163 = v29;
        __int16 v164 = 1024;
        int v165 = v30;
        __int16 v166 = 1024;
        int v167 = v31;
        __int16 v168 = 2048;
        double v169 = v39;
        __int16 v170 = 2048;
        double v171 = v38;
        __int16 v172 = 1024;
        int v173 = LOBYTE(v40);
        __int16 v174 = 1024;
        int v175 = HIDWORD(v40);
        __int16 v176 = 1024;
        int v177 = BYTE1(v40);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "RowStop,state,%d,rowCounter,%d,headingCounter,%d,epochsInExit,%d,longStd,%f,shortStd,%f,isRow,%d,isRowHistory,%d,isRowUnf,%d",  buf,  0x40u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10184E938);
        }
        int v33 = *(_DWORD *)(a1 + 752);
        int v34 = *(_DWORD *)(a1 + 756);
        int v35 = *(_DWORD *)(a1 + 760);
        __int16 v45 = 1024;
        int v46 = v33;
        __int16 v47 = 1024;
        int v48 = v34;
        __int16 v49 = 1024;
        int v50 = v35;
        __int16 v51 = 2048;
        double v52 = v39;
        __int16 v53 = 2048;
        double v54 = v38;
        __int16 v55 = 1024;
        int v56 = LOBYTE(v40);
        __int16 v57 = 1024;
        int v58 = HIDWORD(v40);
        __int16 v59 = 1024;
        int v60 = BYTE1(v40);
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "RowStop,state,%d,rowCounter,%d,headingCounter,%d,epochsInExit,%d,longStd,%f,shortStd,%f,isRow,%d,isRowHistory,%d,isRowUnf,%d",  &v44,  64,  LODWORD(v38),  LODWORD(v39),  v40,  *(double *)&__p,  (_DWORD)v42,  (_DWORD)v43,  67111168);
        double v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }

      if (*(_BYTE *)(a1 + 24) == 4)
      {
        uint64_t v5 = 1LL;
        goto LABEL_45;
      }
    }

    else
    {
      sub_1010DDBC0(buf, "RowStop");
      sub_100CDC2CC(a2, (uint64_t *)buf, (uint64_t)&__p);
      if (SBYTE1(v167) < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v5 = 0LL;
  }

void sub_100789E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100789EC8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(int *)(a2 + 20) <= 7)
  {
    *(_DWORD *)(result + 752) = 0;
    int v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
  }

  else
  {
    int v4 = *(_DWORD *)(result + 752);
    *(_DWORD *)(result + 752) = v4 + 1;
    int v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
    if (v4 >= 15)
    {
      double result = sub_100CCCC8C(result + 8, 1, (uint64_t)&v7);
      int v5 = *(_DWORD *)(v3 + 760);
    }
  }

  if (v5 >= 118 && !*(_DWORD *)(a2 + 20) && !*(_BYTE *)(a2 + 17))
  {
    *(_DWORD *)(v3 + 764) = v5;
    return sub_100CCCC8C(v3 + 8, 4, (uint64_t)&v6);
  }

  return result;
}

uint64_t sub_100789F70(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  double v3 = *(double *)(a2 + 8);
  if (v3 > 30.0)
  {
    int v4 = *(_DWORD *)(result + 756) + 1;
LABEL_3:
    *(_DWORD *)(result + 756) = v4;
    goto LABEL_9;
  }

  if (v3 < 15.0)
  {
    int v5 = *(_DWORD *)(result + 756);
    if (v5 <= 14)
    {
      if (v5 <= 1) {
        int v5 = 1;
      }
      int v4 = v5 - 1;
      goto LABEL_3;
    }
  }

uint64_t sub_10078A010(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  if (v2 >= 58 && !*(_BYTE *)(a2 + 17)) {
    return sub_100CCCC8C(result + 8, 4, (uint64_t)&v3);
  }
  return result;
}

unsigned __int16 *sub_10078A054(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  if (!result[1])
  {
    double v5 = *(double *)(a2 + 8);
LABEL_7:
    int v7 = *(_DWORD *)(a2 + 124);
    int v6 = *(_DWORD *)(a2 + 128);
    LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 112);
    DWORD1(v_Block_object_dispose(va, 8) = v6;
    DWORD2(v_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 136);
    HIDWORD(v_Block_object_dispose(va, 8) = v7;
    uint64_t v9 = a3;
    double v10 = v5;
    return sub_10078A3A0(result, &v8);
  }

  unint64_t v3 = result[1] + (unint64_t)*result - 1;
  unint64_t v4 = *((unsigned int *)result + 1);
  if (v3 < v4) {
    unint64_t v4 = 0LL;
  }
  double v5 = *(double *)(a2 + 8);
  return result;
}

uint64_t sub_10078A0D0(unsigned __int16 *a1)
{
  int v1 = a1[1];
  if (*((_DWORD *)a1 + 1) != v1)
  {
    int v1 = 0;
    int v23 = 0;
    return v1 | (v23 << 8);
  }

  if (a1[1])
  {
    int v3 = 0;
    unint64_t v4 = 0LL;
    float v5 = 0.0;
    LOBYTE(v6) = 1;
    float v7 = 1.1755e-38;
    float v8 = 3.4028e38;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    float v11 = 3.4028e38;
    float v12 = 1.1755e-38;
    float v13 = 0.0;
    do
    {
      int v9 = v9 & (*(float *)(sub_10078A4F4(a1, v4) + 8) > 8.0);
      int v6 = v6 & (*(float *)(sub_10078A4F4(a1, v4) + 4) > 0.1);
      uint64_t v14 = sub_10078A4F4(a1, v4);
      float v15 = *(float *)(v14 + 4);
      if (v8 > v15) {
        float v8 = *(float *)(v14 + 4);
      }
      if (v7 < v15) {
        float v7 = *(float *)(v14 + 4);
      }
      float v13 = v13 + *(float *)sub_10078A4F4(a1, v4);
      unint64_t v16 = v4 + 1;
      uint64_t v17 = sub_10078A4F4(a1, v4);
      float v18 = *(float *)(v17 + 12);
      if (v11 > v18) {
        float v11 = *(float *)(v17 + 12);
      }
      if (v12 < v18) {
        float v12 = *(float *)(v17 + 12);
      }
      float v5 = v5 + *(float *)(sub_10078A4F4(a1, v4) + 12);
      v3 |= *(void *)(sub_10078A4F4(a1, v4) + 16) == 12LL;
      int v10 = v10 & (*(void *)(sub_10078A4F4(a1, v4) + 16) == 1LL);
      unint64_t v19 = a1[1];
      ++v4;
    }

    while (v16 < v19);
    BOOL v20 = 0;
    int v1 = v10 ^ 1;
    float v21 = v5 / (float)v16;
    if (v21 > 1.25 && v21 < 1.85) {
      BOOL v20 = (float)(v12 - v11) < 0.2;
    }
    BOOL v22 = fabsf(v13 / (float)v16) < 0.5;
    if (!v6) {
      goto LABEL_23;
    }
  }

  else
  {
    unint64_t v19 = 0LL;
    int v3 = 0;
    BOOL v20 = 0;
    BOOL v22 = 1;
    float v7 = 1.1755e-38;
    float v8 = 3.4028e38;
    int v9 = 1;
  }

  if ((float)(v7 - v8) < 0.2)
  {
    if (((v9 & v22 | v3) & 1) != 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

unsigned __int16 *sub_10078A3A0(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0LL;
  }
  unint64_t v4 = &result[16 * (v3 - v2)];
  __int128 v5 = *a2;
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1LL;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *double result = v8 - v7;
  }

  else
  {
    result[1] = v6 + 1;
  }

  return result;
}

void *sub_10078A404(void *a1)
{
  *a1 = off_10184E8E0;
  a1[21] = off_101848F08;
  unint64_t v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10078A450(void *__p)
{
  void *__p = off_10184E8E0;
  __p[21] = off_101848F08;
  unint64_t v2 = (void *)__p[26];
  if (v2)
  {
    __p[27] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_10078A49C(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10078A4C8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10078A4F4(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184E958);
    }
    unint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184E958);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      float v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLRowingWorkoutStopModel::RowMotionDetector::Features>::operator[](const size_t) const [T = CLR owingWorkoutStopModel::RowMotionDetector::Features]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[16 * (v4 - v5) + 4];
}

uint64_t sub_10078A6EC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1002DC708((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10078A738(_Unwind_Exception *a1)
{
}

_DWORD *sub_10078A74C(_DWORD *a1, uint64_t a2)
{
  unint64_t v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10078A794(_Unwind_Exception *a1)
{
}

_DWORD *sub_10078A7A8(_DWORD *a1, uint64_t a2)
{
  unint64_t v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10078A7F0(_Unwind_Exception *a1)
{
}

double sub_10078A804@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376) && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) >= 1))
  {
    sub_10078A8A8(a1, (uint64_t)v6);
    __int128 v5 = v6[1];
    *(_OWORD *)(a2 + 1872) = v6[0];
    *(_OWORD *)(a2 + 188_Block_object_dispose(va, 8) = v5;
    *(_OWORD *)(a2 + 1904) = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

void sub_10078A894(_Unwind_Exception *a1)
{
}

void sub_10078A8A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 1428;
  double v5 = *(double *)(a1 + 3404);
  double v6 = *(double *)(a1 + 6384);
  unint64_t v7 = (_DWORD *)(a1 + 5968);
  if (!sub_100495E54((_DWORD *)(a1 + 5968)) && !sub_100495EA8(v7))
  {
LABEL_13:
    char v18 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_14;
  }

  int v8 = (_BYTE *)(a1 + 6377);
  double v9 = v6 - v5;
  BOOL v10 = 0;
  int v19 = *(_DWORD *)(a1 + 6372);
  if (v19 != 1 && v19 != 6)
  {
    if (*(void *)(a1 + 1128) < 5uLL)
    {
LABEL_5:
      BOOL v10 = 0;
      goto LABEL_6;
    }

    double v20 = *(double *)(v4 + 1920);
    BOOL v21 = v20 >= 0.0;
    if (v20 >= 600.0) {
      BOOL v21 = 0;
    }
    BOOL v10 = v9 < 12.0 && v21;
  }

double sub_10078AC08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376))
  {
    if (*(_BYTE *)(a1 + 809))
    {
      sub_10078A8A8(a1, (uint64_t)v6);
      __int128 v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 188_Block_object_dispose(va, 8) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      double result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }

  return result;
}

void sub_10078AC7C(_Unwind_Exception *a1)
{
}

double sub_10078AC90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376) && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) >= 1))
  {
    if (*(_BYTE *)(a1 + 808))
    {
      sub_10078A8A8(a1, (uint64_t)v6);
      __int128 v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 188_Block_object_dispose(va, 8) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      double result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }

  return result;
}

void sub_10078AD28(_Unwind_Exception *a1)
{
}

void sub_10078AD3C(int *a1@<X1>, _DWORD *a2@<X8>)
{
}

void sub_10078ADE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10078AE00(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

double sub_10078AE2C@<D0>(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_10078A74C(a3, a2);
      break;
    case 7:
      double result = sub_10078AC90(a2, (uint64_t)a3);
      break;
    case 0x14:
      double result = sub_10078A804(a2, (uint64_t)a3);
      break;
    case 0x18:
      double result = sub_10078AC08(a2, (uint64_t)a3);
      break;
    default:
      sub_1002DDAB0();
  }

  return result;
}

void sub_10078AE90()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_10078AF2C(_Unwind_Exception *a1)
{
}

void sub_10078AF44()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10078AFD0(_Unwind_Exception *a1)
{
}

void sub_10078B390(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  *((void *)a5 + 1) = 0LL;
  *((void *)a5 + 2) = 0LL;
  *(void *)a5 = 0LL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v6 >= 0x42) {
    sub_10124A7B4();
  }
  int v8 = a1;
  __p = 0LL;
  __int16 v51 = 0LL;
  uint64_t v52 = 0LL;
  unint64_t v9 = (v6 - 1) * v6;
  if (v9 <= 1) {
    unint64_t v10 = 1LL;
  }
  else {
    unint64_t v10 = v9;
  }
  sub_100139A60(&__p, v10);
  unint64_t v46 = v10;
  if (a2 == v8)
  {
    BOOL v48 = 0;
  }

  else
  {
    char v55 = 0;
    BOOL v12 = sub_10078B814(v8, a2);
    float v11 = *v13 - *v12;
    BOOL v48 = v11 >= 3.0;
  }

  unint64_t v14 = 0LL;
  uint64_t v15 = v8 + 6;
  __int16 v47 = v8;
  __int16 v49 = v8 + 6;
  do
  {
    if (BYTE4(v54))
    {
      float v11 = *(float *)sub_1002BA24C((uint64_t)&v53, v14);
LABEL_11:
      a5[v14] = v11;
      goto LABEL_39;
    }

    if (v48)
    {
      uint64_t v16 = (float *)__p;
      __int16 v51 = (float *)__p;
      if (v8 == a2)
      {
        __int16 v51 = (float *)__p;
        goto LABEL_60;
      }

      if (v15 != a2)
      {
        unint64_t v17 = v15;
        char v18 = v8;
        do
        {
          int v19 = v18;
          char v18 = v17;
          double v20 = v17;
          do
          {
            float v21 = *v19;
            float v22 = *v20;
            float v11 = vabds_f32(*v19, *v20);
            if (v11 > 0.25)
            {
              float v23 = sub_1002B8AF0((uint64_t)(v19 + 1), v14);
              float v11 = v23 - sub_1002B8AF0((uint64_t)(v20 + 1), v14);
              int v24 = v51;
              float v25 = v11 / (float)(v21 - v22);
              if (v51 >= (float *)v52)
              {
                uint64_t v26 = (float *)__p;
                uint64_t v27 = ((char *)v51 - (_BYTE *)__p) >> 2;
                unint64_t v28 = v27 + 1;
                uint64_t v29 = v52 - (_BYTE *)__p;
                if ((v52 - (_BYTE *)__p) >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  __int16 v31 = (char *)sub_10000956C((uint64_t)&v52, v30);
                  uint64_t v26 = (float *)__p;
                  int v24 = v51;
                }

                else
                {
                  __int16 v31 = 0LL;
                }

                int v32 = (float *)&v31[4 * v27];
                *int v32 = v25;
                uint64_t v16 = v32 + 1;
                while (v24 != v26)
                {
                  float v33 = *--v24;
                  float v11 = v33;
                  *--int v32 = v33;
                }

                __p = v32;
                __int16 v51 = v16;
                uint64_t v52 = &v31[4 * v30];
                if (v26) {
                  operator delete(v26);
                }
              }

              else
              {
                *__int16 v51 = v25;
                uint64_t v16 = v24 + 1;
              }

              __int16 v51 = v16;
            }

            v20 += 6;
          }

          while (v20 != a2);
          unint64_t v17 = v18 + 6;
        }

        while (v18 + 6 != a2);
      }

      uint64_t v15 = v49;
      int v8 = v47;
      if (v16 != __p)
      {
        float v11 = sub_1002C3BB8((float *)__p, v16, v11);
        goto LABEL_11;
      }
    }

void sub_10078B788( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10078B7C0(uint64_t result, uint64_t a2, float a3)
{
  for (uint64_t i = 0LL; i != 12; i += 4LL)
    *(float *)(result + i) = *(float *)(a2 + i + 12) + (float)(a3 * *(float *)(a2 + i));
  return result;
}

void sub_10078B7E8(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

float *sub_10078B814(float *result, float *a2)
{
  unint64_t v2 = result;
  if (result != a2 && result + 6 != a2)
  {
    float v4 = result[6];
    float v5 = *result;
    if (v4 < *result) {
      result += 6;
    }
    unint64_t v6 = v4 >= *v2 ? v2 + 6 : v2;
    unint64_t v7 = v2 + 12;
    if (v7 != a2)
    {
      if (v4 >= v5) {
        float v4 = v5;
      }
      while (v7 + 6 != a2)
      {
        float v8 = v7[6];
        float v9 = *v7;
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            float v4 = *v7;
            double result = v7;
          }

          if (v8 >= *v6) {
            unint64_t v6 = v7 + 6;
          }
        }

        else
        {
          float v4 = *result;
          if (v8 < *result)
          {
            float v4 = v7[6];
            double result = v7 + 6;
          }

          if (v9 >= *v6) {
            unint64_t v6 = v7;
          }
        }

        v7 += 12;
        if (v7 == a2) {
          return result;
        }
      }

      if (*v7 < *result) {
        return v7;
      }
    }
  }

  return result;
}

BOOL sub_10078B8F0()
{
  return os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT);
}

BOOL sub_10078B904()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 1432), OS_LOG_TYPE_INFO);
}

BOOL sub_10078B914()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 1432));
}

uint64_t sub_10078B920(double **a1, double a2, double a3, int a4)
{
  if (a4) {
    return sub_10078B92C(a1, a2, a3);
  }
  else {
    return sub_10078BD40((uint64_t)a1, a2, a3);
  }
}

BOOL sub_10078B92C(double **a1, double a2, double a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_101998860);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_101998860))
  {
    sub_100D2D9A4((uint64_t)dbl_101998838);
    __cxa_guard_release(&qword_101998860);
  }

  if (*((_DWORD *)sub_100F4BF14() + 20))
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    double v9 = 0.0;
    double v10 = 0.0;
    while (1)
    {
      BOOL v12 = *a1;
      float v11 = a1[1];
      int v13 = *a1;
      unint64_t v14 = a1[1];
      if (*a1 == v14)
      {
        double v18 = 360.0;
        double v17 = -360.0;
        double v15 = 360.0;
        double v16 = -360.0;
      }

      else
      {
        double v15 = 360.0;
        double v16 = -360.0;
        double v17 = -360.0;
        double v18 = 360.0;
        do
        {
          double v19 = *v13;
          double v20 = v13[1];
          v13 += 12;
          double v9 = v9 + v19;
          double v10 = v10 + v20;
          ++v7;
          if (v19 > v17) {
            double v17 = v19;
          }
          if (v19 < v18) {
            double v18 = v19;
          }
          if (v20 > v16) {
            double v16 = v20;
          }
          if (v20 < v15) {
            double v15 = v20;
          }
        }

        while (v13 != v14);
      }

      double v21 = sub_100D2DBDC(dbl_101998838, v18, v15, v17, v16, a2);
      BOOL v22 = v21 <= a3;
      if (v21 > a3)
      {
        float v25 = *a1;
        int v24 = a1[1];
        if (*a1 == v24)
        {
          float v25 = a1[1];
        }

        else
        {
          double v26 = -1.0;
          do
          {
            double v27 = sub_100D2DBDC(dbl_101998838, v9 / (double)v7, v10 / (double)v7, *v25, v25[1], a2);
            if (v27 > v26)
            {
              int v24 = v25;
              double v26 = v27;
            }

            v25 += 12;
          }

          while (v25 != a1[1]);
        }

        unint64_t v28 = (char *)((char *)v25 - (char *)(v24 + 12));
        if (v28) {
          memmove(v24, v24 + 12, (size_t)(v28 - 7));
        }
        a1[1] = (double *)&v28[(void)v24];
        int v23 = 1;
      }

      else
      {
        int v23 = 0;
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10184E9D8);
      }
      uint64_t v29 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240704;
        unsigned int v41 = v8 + 1;
        __int16 v42 = 1026;
        int v43 = v23;
        __int16 v44 = 1026;
        BOOL v45 = v21 <= a3;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "WifiCalc, outlieriter, %{public}d, dropped, %{public}d, verified, %{public}d",  buf,  0x14u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10184E9D8);
        }
        ++v8;
        v35[0] = 67240704;
        v35[1] = v8;
        __int16 v36 = 1026;
        int v37 = v23;
        __int16 v38 = 1026;
        BOOL v39 = v21 <= a3;
        LODWORD(v34) = 20;
        int v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, outlieriter, %{public}d, dropped, %{public}d, verified, %{public}d",  v35,  v34);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLWifiLocationCalculatorLatLonOutlierRejection::rejectOutlierLatLonIteratively(std::vector<CLWifiA ccessPoint> &, const double, const double)",  "%s\n",  v32);
      }

      else
      {
        ++v8;
      }

      unint64_t v30 = sub_100F4BF14();
      BOOL v31 = v21 > a3;
      if (v8 >= *((_DWORD *)v30 + 20)) {
        BOOL v31 = 0;
      }
      if (!v31) {
        return v22;
      }
    }
  }

  return 0LL;
}

void sub_10078BD20(_Unwind_Exception *a1)
{
}

uint64_t sub_10078BD40(uint64_t a1, double a2, double a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
  uint64_t v121 = 0LL;
  unint64_t v122 = 0LL;
  uint64_t v123 = 0LL;
  sub_10078C8EC( &v121,  *(const void **)a1,  *(void *)(a1 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5));
  BOOL v8 = sub_10078C52C(&v121, a2, a3);
  if (v121)
  {
    unint64_t v122 = v121;
    operator delete(v121);
  }

  if (!v8) {
    return 1LL;
  }
  double v10 = *(float **)a1;
  double v9 = *(float **)(a1 + 8);
  if ((float *)((char *)v9 - *(void *)a1) == (float *)192)
  {
    if (v10 != v9)
    {
      for (uint64_t i = v10 + 24; i != v9; i += 24)
      {
        if (i[20] < v10[20]) {
          double v10 = i;
        }
      }
    }

    int64_t v94 = (char *)v9 - (char *)(v10 + 24);
    if (v9 != v10 + 24) {
      memmove(v10, v10 + 24, v94 - 7);
    }
    BOOL v7 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = (char *)v10 + v94;
  }

  else
  {
    __int128 v118 = 0LL;
    __int128 v119 = 0LL;
    uint64_t v120 = 0LL;
    unint64_t v12 = 4LL;
    double v97 = -1.0;
    do
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
      if (v13 >= v12)
      {
        unint64_t v96 = v12;
        sub_10078C6AC(v13, v12, &v116);
        uint64_t v15 = v116;
        uint64_t v14 = v117;
        uint64_t v98 = v117;
        while (v15 != v14)
        {
          __int128 v113 = 0LL;
          __int128 v114 = 0LL;
          uint64_t v115 = 0LL;
          sub_10001B72C( &v113,  *(const void **)v15,  *(void *)(v15 + 8),  (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 2);
          __p = 0LL;
          __int128 v111 = 0LL;
          __int128 v112 = 0LL;
          double v16 = (int *)v113;
          double v17 = v114;
          if (v113 == v114)
          {
            double v18 = 0LL;
            unint64_t v40 = 0LL;
          }

          else
          {
            double v18 = 0LL;
            do
            {
              double v19 = (_OWORD *)(*(void *)a1 + 96LL * *v16);
              if (v18 >= v112)
              {
                int v24 = (char *)__p;
                unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)__p) >> 5);
                unint64_t v26 = v25 + 1;
                if (v25 + 1 > 0x2AAAAAAAAAAAAAALL) {
                  sub_100007008();
                }
                if (0x5555555555555556LL * ((v112 - (_BYTE *)__p) >> 5) > v26) {
                  unint64_t v26 = 0x5555555555555556LL * ((v112 - (_BYTE *)__p) >> 5);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)__p) >> 5) >= 0x155555555555555LL) {
                  unint64_t v27 = 0x2AAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27)
                {
                  unint64_t v28 = (char *)sub_1003F6AEC((uint64_t)&v112, v27);
                  int v24 = (char *)__p;
                  double v18 = v111;
                }

                else
                {
                  unint64_t v28 = 0LL;
                }

                uint64_t v29 = &v28[96 * v25];
                __int128 v30 = v19[1];
                *(_OWORD *)uint64_t v29 = *v19;
                *((_OWORD *)v29 + 1) = v30;
                __int128 v31 = v19[2];
                __int128 v32 = v19[3];
                __int128 v33 = v19[5];
                *((_OWORD *)v29 + 4) = v19[4];
                *((_OWORD *)v29 + 5) = v33;
                *((_OWORD *)v29 + 2) = v31;
                *((_OWORD *)v29 + 3) = v32;
                if (v18 == v24)
                {
                  BOOL v39 = &v28[96 * v25];
                }

                else
                {
                  uint64_t v34 = &v28[96 * v25];
                  do
                  {
                    __int128 v35 = *((_OWORD *)v18 - 5);
                    *((_OWORD *)v34 - 6) = *((_OWORD *)v18 - 6);
                    *((_OWORD *)v34 - 5) = v35;
                    __int128 v36 = *((_OWORD *)v18 - 4);
                    __int128 v37 = *((_OWORD *)v18 - 3);
                    __int128 v38 = *((_OWORD *)v18 - 2);
                    BOOL v39 = v34 - 96;
                    *(_OWORD *)(v34 - 23) = *(_OWORD *)(v18 - 23);
                    *((_OWORD *)v34 - 3) = v37;
                    *((_OWORD *)v34 - 2) = v38;
                    *((_OWORD *)v34 - 4) = v36;
                    v18 -= 96;
                    v34 -= 96;
                  }

                  while (v18 != v24);
                }

                double v18 = v29 + 96;
                __p = v39;
                __int128 v111 = v29 + 96;
                __int128 v112 = &v28[96 * v27];
                if (v24) {
                  operator delete(v24);
                }
              }

              else
              {
                __int128 v20 = v19[1];
                *(_OWORD *)double v18 = *v19;
                *((_OWORD *)v18 + 1) = v20;
                __int128 v21 = v19[2];
                __int128 v22 = v19[3];
                __int128 v23 = v19[5];
                *((_OWORD *)v18 + 4) = v19[4];
                *((_OWORD *)v18 + 5) = v23;
                *((_OWORD *)v18 + 2) = v21;
                *((_OWORD *)v18 + 3) = v22;
                v18 += 96;
              }

              __int128 v111 = v18;
              ++v16;
            }

            while (v16 != v17);
            unint64_t v40 = __p;
          }

          __int128 v107 = 0LL;
          __int128 v108 = 0LL;
          uint64_t v109 = 0LL;
          sub_10078C8EC(&v107, v40, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v40) >> 5));
          BOOL v41 = sub_10078C52C((double **)&v107, a2, a3);
          if (v107)
          {
            __int128 v108 = v107;
            operator delete(v107);
          }

          if (!v41)
          {
            __int16 v42 = (double *)__p;
            int v43 = (double *)((char *)__p + 96);
            double v44 = *(double *)__p;
            if (__p == v111 || v43 == (double *)v111)
            {
              double v60 = *((double *)__p + 1);
              double v57 = *(double *)__p;
            }

            else
            {
              double v45 = *(double *)__p;
              unint64_t v46 = (double *)((char *)__p + 96);
              __int16 v47 = (double *)__p;
              BOOL v48 = (double *)((char *)__p + 96);
              do
              {
                double v49 = *v48;
                v48 += 12;
                double v50 = v49;
                if (v45 < v49)
                {
                  double v45 = v50;
                  __int16 v47 = v46;
                }

                unint64_t v46 = v48;
              }

              while (v48 != (double *)v111);
              double v51 = *v47;
              uint64_t v52 = (double *)((char *)__p + 96);
              uint64_t v53 = (double *)__p;
              uint64_t v54 = (double *)((char *)__p + 96);
              do
              {
                double v55 = *v54;
                v54 += 12;
                double v56 = v55;
                if (v55 < v44)
                {
                  double v44 = v56;
                  uint64_t v53 = v52;
                }

                uint64_t v52 = v54;
              }

              while (v54 != (double *)v111);
              double v57 = *v53;
              int v58 = (double *)((char *)__p + 96);
              __int16 v59 = (double *)__p;
              do
              {
                if (v59[1] < v58[1]) {
                  __int16 v59 = v58;
                }
                v58 += 12;
              }

              while (v58 != (double *)v111);
              double v60 = v59[1];
              do
              {
                if (v43[1] < v42[1]) {
                  __int16 v42 = v43;
                }
                v43 += 12;
              }

              while (v43 != (double *)v111);
              double v44 = v51;
            }

            double v61 = v42[1];
            __src = 0LL;
            __int128 v105 = 0LL;
            __int128 v106 = 0LL;
            __int128 v63 = *(double **)a1;
            __int16 v62 = *(double **)(a1 + 8);
            if (*(double **)a1 == v62)
            {
              int v88 = 0LL;
              uint64_t v64 = 0LL;
              uint64_t v87 = *(_BYTE **)a1;
            }

            else
            {
              uint64_t v64 = 0LL;
              do
              {
                double v65 = *v63;
                double v66 = v63[1];
                __int128 v67 = *((_OWORD *)v63 + 3);
                __int128 v100 = *((_OWORD *)v63 + 2);
                __int128 v101 = v67;
                __int128 v68 = *((_OWORD *)v63 + 5);
                __int128 v102 = *((_OWORD *)v63 + 4);
                __int128 v103 = v68;
                __int128 v99 = *((_OWORD *)v63 + 1);
                BOOL v69 = v65 > v44 || v65 < v57;
                if (!v69 && v66 <= v60 && v66 >= v61)
                {
                  if (v64 >= v106)
                  {
                    __int128 v75 = (char *)__src;
                    unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v64 - (_BYTE *)__src) >> 5);
                    unint64_t v77 = v76 + 1;
                    if (v76 + 1 > 0x2AAAAAAAAAAAAAALL) {
                      sub_100007008();
                    }
                    if (0x5555555555555556LL * ((v106 - (_BYTE *)__src) >> 5) > v77) {
                      unint64_t v77 = 0x5555555555555556LL * ((v106 - (_BYTE *)__src) >> 5);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v106 - (_BYTE *)__src) >> 5) >= 0x155555555555555LL) {
                      unint64_t v78 = 0x2AAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v78 = v77;
                    }
                    if (v78)
                    {
                      __int128 v79 = (char *)sub_1003F6AEC((uint64_t)&v106, v78);
                      __int128 v75 = (char *)__src;
                      uint64_t v64 = v105;
                    }

                    else
                    {
                      __int128 v79 = 0LL;
                    }

                    __int128 v80 = &v79[96 * v76];
                    *(double *)__int128 v80 = v65;
                    *((double *)v80 + 1) = v66;
                    *((_OWORD *)v80 + 2) = v100;
                    *((_OWORD *)v80 + 3) = v101;
                    *((_OWORD *)v80 + 4) = v102;
                    *((_OWORD *)v80 + 5) = v103;
                    *((_OWORD *)v80 + 1) = v99;
                    if (v64 == v75)
                    {
                      unint64_t v86 = &v79[96 * v76];
                    }

                    else
                    {
                      __int128 v81 = &v79[96 * v76];
                      do
                      {
                        __int128 v82 = *((_OWORD *)v64 - 5);
                        *((_OWORD *)v81 - 6) = *((_OWORD *)v64 - 6);
                        *((_OWORD *)v81 - 5) = v82;
                        __int128 v83 = *((_OWORD *)v64 - 4);
                        __int128 v84 = *((_OWORD *)v64 - 3);
                        __int128 v85 = *((_OWORD *)v64 - 2);
                        unint64_t v86 = v81 - 96;
                        *(_OWORD *)(v81 - 23) = *(_OWORD *)(v64 - 23);
                        *((_OWORD *)v81 - 3) = v84;
                        *((_OWORD *)v81 - 2) = v85;
                        *((_OWORD *)v81 - 4) = v83;
                        v64 -= 96;
                        v81 -= 96;
                      }

                      while (v64 != v75);
                    }

                    uint64_t v64 = v80 + 96;
                    __src = v86;
                    __int128 v105 = v80 + 96;
                    __int128 v106 = &v79[96 * v78];
                    if (v75) {
                      operator delete(v75);
                    }
                  }

                  else
                  {
                    *(double *)uint64_t v64 = v65;
                    *((double *)v64 + 1) = v66;
                    __int128 v73 = v102;
                    __int128 v72 = v103;
                    *((_OWORD *)v64 + 3) = v101;
                    *((_OWORD *)v64 + 4) = v73;
                    *((_OWORD *)v64 + 5) = v72;
                    __int128 v74 = v100;
                    *((_OWORD *)v64 + 1) = v99;
                    *((_OWORD *)v64 + 2) = v74;
                    v64 += 96;
                  }

                  __int128 v105 = v64;
                }

                v63 += 12;
              }

              while (v63 != v62);
              __int128 v63 = *(double **)a1;
              uint64_t v87 = *(_BYTE **)(a1 + 8);
              int v88 = __src;
            }

            __int128 v89 = sub_100F4BF14();
            __int128 v90 = (char *)__src;
            if (-1431655765 * ((unint64_t)(v87 - (_BYTE *)v63) >> 5)
               + 1431655765 * ((unint64_t)(v64 - v88) >> 5) <= *((_DWORD *)v89 + 20))
            {
              double v91 = 0.0;
              if (__src != v105)
              {
                __int128 v92 = (float *)__src;
                do
                {
                  double v91 = v91 + v92[20];
                  v92 += 24;
                }

                while (v92 != (float *)v105);
              }

              if (v91 > v97)
              {
                sub_1003F9BA8( (char *)&v118,  (char *)__src,  (uint64_t)v105,  0xAAAAAAAAAAAAAAABLL * ((v105 - (_BYTE *)__src) >> 5));
                __int128 v90 = (char *)__src;
                double v97 = v91;
              }
            }

            if (v90)
            {
              __int128 v105 = v90;
              operator delete(v90);
            }
          }

          if (__p)
          {
            __int128 v111 = (char *)__p;
            operator delete(__p);
          }

          if (v113)
          {
            __int128 v114 = (int *)v113;
            operator delete(v113);
          }

          v15 += 24LL;
          uint64_t v14 = v98;
        }

        *(void *)&__int128 v99 = &v116;
        sub_100006BC8((void ***)&v99);
        unint64_t v12 = v96;
      }

      BOOL v69 = v12-- > 2;
    }

    while (v69);
    int v93 = v118;
    BOOL v7 = v118 != v119;
    if (&v118 != (char **)a1 && v118 != v119)
    {
      sub_1003F9BA8((char *)a1, v118, (uint64_t)v119, 0xAAAAAAAAAAAAAAABLL * ((v119 - v118) >> 5));
      int v93 = v118;
    }

    if (v93)
    {
      __int128 v119 = v93;
      operator delete(v93);
    }
  }

  return v7;
}

void sub_10078C478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, char a37)
{
  BOOL v39 = *(void **)(v37 - 200);
  if (v39)
  {
    *(void *)(v37 - 192) = v39;
    operator delete(v39);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10078C52C(double **a1, double a2, double a3)
{
  float v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)(*a1 + 12);
  double v8 = **a1;
  if (*a1 == v6 || v7 == (void)v6)
  {
    double v10 = v5[1];
    double v11 = **a1;
  }

  else
  {
    double v12 = **a1;
    uint64_t v13 = (uint64_t)(*a1 + 12);
    uint64_t v14 = *a1;
    uint64_t v15 = (double *)v13;
    do
    {
      double v16 = *v15;
      v15 += 12;
      double v17 = v16;
      if (v12 < v16)
      {
        double v12 = v17;
        uint64_t v14 = (double *)v13;
      }

      uint64_t v13 = (uint64_t)v15;
    }

    while (v15 != v6);
    double v18 = *v14;
    uint64_t v19 = (uint64_t)(*a1 + 12);
    __int128 v20 = *a1;
    __int128 v21 = (double *)v19;
    do
    {
      double v22 = *v21;
      v21 += 12;
      double v23 = v22;
      if (v22 < v8)
      {
        double v8 = v23;
        __int128 v20 = (double *)v19;
      }

      uint64_t v19 = (uint64_t)v21;
    }

    while (v21 != v6);
    double v11 = *v20;
    uint64_t v24 = (uint64_t)(*a1 + 12);
    unint64_t v25 = *a1;
    do
    {
      v24 += 96LL;
    }

    while ((double *)v24 != v6);
    double v10 = v25[1];
    do
    {
      v7 += 96LL;
    }

    while ((double *)v7 != v6);
    double v8 = v18;
  }

  double v26 = v5[1];
  unsigned __int8 v27 = atomic_load((unsigned __int8 *)&qword_101998830);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_101998830))
  {
    sub_100D2D9A4((uint64_t)dbl_101998808);
    __cxa_guard_release(&qword_101998830);
  }

  return sub_100D2DBDC(dbl_101998808, v11, v26, v8, v10, a2) > a3;
}

void sub_10078C694(_Unwind_Exception *a1)
{
}

void sub_10078C6AC(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  sub_10078C964(&__b, a1);
  if (a2 >= 1) {
    memset_pattern16(__b, &unk_101329EB0, 4LL * a2);
  }
  do
  {
    __p = 0LL;
    __int128 v21 = 0LL;
    double v22 = 0LL;
    if (a1 >= 1)
    {
      unint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
      do
      {
        if (*((_DWORD *)__b + v7))
        {
          if (v6 >= v22)
          {
            double v9 = (char *)__p;
            uint64_t v10 = (v6 - (_BYTE *)__p) >> 2;
            unint64_t v11 = v10 + 1;
            uint64_t v12 = v22 - (_BYTE *)__p;
            if ((v22 - (_BYTE *)__p) >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              uint64_t v14 = (char *)sub_10000956C((uint64_t)&v22, v13);
              double v9 = (char *)__p;
              unint64_t v6 = v21;
            }

            else
            {
              uint64_t v14 = 0LL;
            }

            uint64_t v15 = &v14[4 * v10];
            *(_DWORD *)uint64_t v15 = v7;
            double v8 = v15 + 4;
            while (v6 != v9)
            {
              int v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }

            __p = v15;
            __int128 v21 = v8;
            double v22 = &v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v6 = v7;
            double v8 = v6 + 4;
          }

          __int128 v21 = v8;
          unint64_t v6 = v8;
        }

        ++v7;
      }

      while (v7 != a1);
    }

    unint64_t v17 = a3[1];
    if (v17 >= a3[2])
    {
      uint64_t v18 = sub_10078CA28(a3, (uint64_t)&__p);
    }

    else
    {
      sub_10078C9D8((uint64_t)a3, (uint64_t)&__p);
      uint64_t v18 = v17 + 24;
    }

    a3[1] = v18;
    if (__p)
    {
      __int128 v21 = (char *)__p;
      operator delete(__p);
    }

    sub_10078CC84((unint64_t)__b, v24);
  }

  while ((v19 & 1) != 0);
  if (__b)
  {
    uint64_t v24 = __b;
    operator delete(__b);
  }

void sub_10078C870( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
}

void sub_10078C8C0(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void *sub_10078C8EC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_1003F9CE8(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10078C948(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10078C964(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001B7A4(a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }

  return a1;
}

void sub_10078C9BC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10078C9D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  double result = sub_10001B72C( v3,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3 + 3;
  return result;
}

void sub_10078CA20(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10078CA28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_10001B72C(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_10078CB3C(a1, v14);
  uint64_t v12 = a1[1];
  sub_100007504((uint64_t)v14);
  return v12;
}

void sub_10078CB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10078CB3C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10078CBB0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10078CBB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - _Block_object_dispose(va, 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(va, 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_10078CC50((uint64_t)v11);
  return v9;
}

uint64_t sub_10078CC50(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000074C0(a1);
  }
  return a1;
}

_DWORD *sub_10078CC84(unint64_t a1, _DWORD *a2)
{
  if (a2 != (_DWORD *)a1)
  {
    uint64_t v2 = a2 - 1;
    if (a2 - 1 != (_DWORD *)a1)
    {
      uint64_t v3 = 0LL;
      int v4 = *v2;
      uint64_t v5 = a2 - 1;
      while (1)
      {
        int v6 = v4;
        int v4 = *(v5 - 1);
        if (v6 < v4) {
          break;
        }
        --v5;
        ++v3;
        if (v5 == (_DWORD *)a1)
        {
          if ((unint64_t)v2 > a1)
          {
            unint64_t v7 = a1 + 4;
            do
            {
              int v8 = *(_DWORD *)(v7 - 4);
              *(_DWORD *)(v7 - 4) = *v2;
              *v2-- = v8;
              BOOL v9 = v7 >= (unint64_t)v2;
              v7 += 4LL;
            }

            while (!v9);
          }

          return a2;
        }
      }

      unint64_t v11 = (unint64_t)(v5 + 1);
      char v12 = a2;
      do
      {
        int v14 = *--v12;
        int v13 = v14;
      }

      while (v14 >= v4);
      *(v5 - 1) = v13;
      *char v12 = v4;
      if (v3)
      {
        do
        {
          int v15 = *(_DWORD *)(v11 - 4);
          *(_DWORD *)(v11 - 4) = *v2;
          *v2-- = v15;
          BOOL v9 = v11 >= (unint64_t)v2;
          v11 += 4LL;
        }

        while (!v9);
      }
    }
  }

  return a2;
}

void sub_10078CD48()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_10078CDE4(_Unwind_Exception *a1)
{
}

void sub_10078CDFC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_10078CE88(_Unwind_Exception *a1)
{
}

uint64_t sub_10078CEA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_10078D18C(_Unwind_Exception *a1)
{
}

BOOL sub_10078D1A4(BOOL result)
{
  if (*(int *)(*(void *)(*(void *)(result + 32) + 48LL) + 8LL) >= 1)
  {
    uint64_t v1 = result;
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    uint64_t v2 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "power assertion for submersion state change,timestamp,%{public}f,assertionState,0,reason,timeout",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10184EA80);
      }
      uint64_t v3 = qword_1019346A8;
      int v6 = 134349056;
      CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v3,  0LL,  "power assertion for submersion state change,timestamp,%{public}f,assertionState,0,reason,timeout",  &v6,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLContextManagerWaterSubmersionBase initWithUniverse:delegate:withBuffer:withSourceAggregator:]_block_invoke",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    return sub_100AD5D38(*(void *)(*(void *)(v1 + 32) + 48LL));
  }

  return result;
}

void sub_10078D6AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10078E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10078F4BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10078FBD4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_100246C40((uint64_t)v15, a3);
  [a4 onForcedLocationNotificationSub:v5 data:v15];

  int v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (v19 < 0) {
    operator delete(__p);
  }
  BOOL v9 = v17;
  if (v17)
  {
    uint64_t v10 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  char v12 = v16;
  if (v16)
  {
    int v13 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_10078FCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_10078FF9C(int a1, void *a2, CFStringRef theString1)
{
  if (CFStringCompare(theString1, @"com.apple.locationd.WaterSubmersion.EnableEasySubmersion", 0LL) == kCFCompareEqualTo) {
    [a2 onEnableEasySubmersion:1];
  }
  id result = (id)CFStringCompare(theString1, @"com.apple.locationd.WaterSubmersion.DisableEasySubmersion", 0LL);
  if (!result) {
    return [a2 onEnableEasySubmersion:0];
  }
  return result;
}

void sub_10079022C(_Unwind_Exception *a1)
{
}

BOOL sub_100790240(uint64_t a1)
{
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10184EA80);
  }
  uint64_t v2 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "unsubscribing from Surface Cal GPS notifications",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "unsubscribing from Surface Cal GPS notifications",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLContextManagerWaterSubmersion setUpGPSSubscriptionForSurfaceCal]_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 192) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 192) + 8) forNotification:0];
  BOOL result = sub_100AD5D38(*(void *)(*(void *)(a1 + 32) + 184LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 20sub_100783178((uint64_t)va, 0LL) = 0;
  return result;
}

void sub_100790AC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
}

void sub_1007913D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29)
{
}

void sub_100792204( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, uint64_t a33, char a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

float sub_10079239C(uint64_t a1, int a2)
{
  __p = 0LL;
  unint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_10001B72C(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  int v5 = (int)((((*(void *)(a1 + 8) - *(void *)a1) >> 2) - 1) * a2) / 100;
  int v6 = (float *)__p;
  CFAbsoluteTime v7 = (float *)((char *)__p + 4 * v5);
  if (v7 != v11)
  {
    sub_1002C3C90((float *)__p, v7, v11, v4);
    int v6 = (float *)__p;
  }

  float v8 = v6[v5];
  unint64_t v11 = v6;
  operator delete(v6);
  return v8;
}

void sub_100792444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007929D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27)
{
}

void sub_10079307C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1007931C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100793B80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
}

void sub_100793C40(uint64_t a1, void *a2, const __CFString *a3)
{
  int v5 = operator new(0x28uLL);
  v5[1] = 0LL;
  int v6 = v5 + 1;
  v5[2] = 0LL;
  *int v5 = off_10184EAB0;
  v5[3] = 0x7FEFFFFFFFFFFFFFLL;
  v5[4] = 0LL;
  unint64_t v25 = (double *)(v5 + 3);
  double v26 = (std::__shared_weak_count *)v5;
  if (CFStringCompare(a3, @"com.apple.locationd.WaterSubmersion.SimulateSubmerged", 0LL) == kCFCompareEqualTo)
  {
    *((CFAbsoluteTime *)v5 + 3) = CFAbsoluteTimeGetCurrent();
    *((_BYTE *)v5 + 32) = 2;
    double v23 = v5 + 3;
    uint64_t v24 = (std::__shared_weak_count *)v5;
    do
      unint64_t v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    objc_msgSend(a2, "updateEvent_bounce:", &v23);
    unint64_t v11 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  if (CFStringCompare(a3, @"com.apple.locationd.WaterSubmersion.SimulateNotSubmerged", 0LL) == kCFCompareEqualTo)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v15 = v25;
    double *v25 = Current;
    *((_BYTE *)v15 + _Block_object_dispose(va, 8) = 1;
    id v21 = v15;
    double v22 = v26;
    if (v26)
    {
      int v16 = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }

    objc_msgSend(a2, "updateEvent_bounce:", &v21);
    uint64_t v18 = v22;
    if (v22)
    {
      char v19 = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  if (CFStringCompare(a3, @"com.apple.locationd.WaterSubmersion.PauseDemo", 0LL) == kCFCompareEqualTo) {
    objc_msgSend(a2, "pauseEvent_bounce");
  }
  if (CFStringCompare(a3, @"com.apple.locationd.WaterSubmersion.ResumeDemo", 0LL) == kCFCompareEqualTo) {
    objc_msgSend(a2, "resumeEvent_bounce");
  }
  if (CFStringCompare(a3, @"com.apple.locationd.WaterSubmersion.DemoDepthUpdate", 0LL) == kCFCompareEqualTo) {
    objc_msgSend(a2, "demoDepthUpdate_bounce");
  }
  CFAbsoluteTime v7 = v26;
  if (v26)
  {
    float v8 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_100793E64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100793E94(uint64_t a1)
{
  if ([*(id *)(a1 + 32) externalSubmersionState] == (id)2)
  {
    int v2 = *(unsigned __int8 *)(a1 + 128);
    *(void *)&double v3 = objc_opt_class(*(void *)(a1 + 32)).n128_u64[0];
    int v5 = v4;
    objc_msgSend(*(id *)(a1 + 32), "targetPressure", v3);
    CFAbsoluteTime v7 = (double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v2) {
      [v5 boundedIncrementBetweenStart:v7 andStop:101.325 withCurrent:v6 withIncrement:*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
    }
    else {
      [v5 incrementTowardsTarget:v6 andCurrent:*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) withIncrement:*v7];
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v8;
    objc_opt_class(*(void *)(a1 + 32));
    [v11 settleToTemperatureFromStart:*(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) toStop:*(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) withCurrent:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) withDecrement:*(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v12;
    objc_opt_class(*(void *)(a1 + 32));
    [v13 settleToTemperatureFromStart:*(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) toStop:*(double *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) withCurrent:*(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) withDecrement:*(double *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)];
    uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8LL);
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL)
                                                                            + 24LL);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  *(void *)(v10 + 24) = v9;
  int v16 = objc_alloc_init(&OBJC_CLASS___CLWaterSubmersionMeasurement);
  -[CLWaterSubmersionMeasurement setStartAt:](v16, "setStartAt:", CFAbsoluteTimeGetCurrent());
  -[CLWaterSubmersionMeasurement setPressure:]( v16,  "setPressure:",  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  -[CLWaterSubmersionMeasurement setSurfacePressure:](v16, "setSurfacePressure:", 101.325);
  -[CLWaterSubmersionMeasurement setTemperature:]( v16,  "setTemperature:",  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  -[CLWaterSubmersionMeasurement setTemperatureUncertainty:]( v16,  "setTemperatureUncertainty:",  *(double *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL));
  double v14 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  -[CLWaterSubmersionMeasurement surfacePressure](v16, "surfacePressure");
  +[CLContextManagerWaterSubmersion calculateDepthFromPressure:withSurfacePressure:]( &OBJC_CLASS___CLContextManagerWaterSubmersion,  "calculateDepthFromPressure:withSurfacePressure:",  v14,  v15);
  -[CLWaterSubmersionMeasurement setDepth:](v16, "setDepth:");
  -[CLWaterSubmersionMeasurement setState:](v16, "setState:", [*(id *)(a1 + 32) submersionState]);
  [*(id *)(a1 + 32) updateSubmersionStateFromMeasurement:v16];
  [*(id *)(a1 + 32) updateClientsSubmersionMeasurement:v16];
}

void sub_100794218(_Unwind_Exception *a1)
{
}

void sub_10079422C(void *a1)
{
  int v2 = (void *)a1[4];
  uint64_t v4 = a1[5];
  double v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v10 = v4;
  id v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  [v2 updateSubmersionStateFromAOPState:&v10];
  CFAbsoluteTime v7 = v11;
  if (v11)
  {
    uint64_t v8 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_1007942B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007942C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    double v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_1007942EC(uint64_t a1)
{
  return sub_10000AE14(a1 + 40);
}

id sub_100794364(uint64_t a1)
{
  return _[*(id *)(a1 + 32) stopUpdates];
}

id sub_1007943DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) startUpdates];
}

id sub_100794454(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateTargetDemoDepth];
}

void sub_1007944F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100794620(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_10079464C(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      sub_1007946C0(a1, a2, a2);
      a2 += 4;
      v5 -= 16LL;
    }

    while (v5);
  }

  return a1;
}

void sub_1007946AC(_Unwind_Exception *a1)
{
}

void *sub_1007946C0(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  unint64_t v8 = 0xC6A4A7935BD1E995LL
     * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v6) ^ ((0xC6A4A7935BD1E995LL * v6) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v7) ^ ((0xC6A4A7935BD1E995LL * v7) >> 47)) + 3864292196u))
     + 3864292196u;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0xC6A4A7935BD1E995LL
         * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v6) ^ ((0xC6A4A7935BD1E995LL * v6) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v7) ^ ((0xC6A4A7935BD1E995LL * v7) >> 47)) + 3864292196u))
         + 3864292196u;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    id v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7 && *((_DWORD *)v12 + 5) == (_DWORD)v6) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v3) {
              break;
            }
          }

          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0LL;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v12 = *v22;
LABEL_42:
    void *v22 = v12;
    goto LABEL_43;
  }

  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }

void sub_100794914(_Unwind_Exception *a1)
{
}

void sub_100794928(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10184EAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10079493C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10184EAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100794968(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10184EB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10079497C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10184EB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1007949A8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10132A69C;
      v1[3] = unk_10132A6AC;
      v1[4] = xmmword_10132A6BC;
      v1[0] = xmmword_10132A67C;
      v1[1] = unk_10132A68C;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100794A7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100794A94()
{
  qword_101998888 = 0LL;
  qword_101998890 = 0LL;
  qword_101998880 = 0LL;
  qword_101998880 = (uint64_t)operator new(0x284uLL);
  uint64_t v0 = qword_101998880 + 644;
  qword_101998890 = qword_101998880 + 644;
  memcpy((void *)qword_101998880, &unk_101329EF0, 0x284uLL);
  qword_101998888 = v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998880, (void *)&_mh_execute_header);
  qword_1019988A0 = 0LL;
  qword_1019988A8 = 0LL;
  qword_101998898 = 0LL;
  qword_101998898 = (uint64_t)operator new(0x284uLL);
  uint64_t v1 = qword_101998898 + 644;
  qword_1019988A8 = qword_101998898 + 644;
  memcpy((void *)qword_101998898, &unk_10132A174, 0x284uLL);
  qword_1019988A0 = v1;
  qword_1019988B8 = 0LL;
  qword_1019988C0 = 0LL;
  qword_1019988B0 = 0LL;
  qword_1019988B0 = (uint64_t)operator new(0x284uLL);
  uint64_t v2 = qword_1019988B0 + 644;
  qword_1019988C0 = qword_1019988B0 + 644;
  memcpy((void *)qword_1019988B0, &unk_10132A3F8, 0x284uLL);
  qword_1019988B8 = v2;
  __cxa_atexit((void (*)(void *))sub_10078CEA0, &qword_101998898, (void *)&_mh_execute_header);
  qword_1019988D0 = 0LL;
  qword_1019988D8 = 0LL;
  qword_1019988C8 = 0LL;
  qword_1019988C8 = (uint64_t)operator new(0x284uLL);
  uint64_t v3 = qword_1019988C8 + 644;
  qword_1019988D8 = qword_1019988C8 + 644;
  memcpy((void *)qword_1019988C8, &unk_10132A174, 0x284uLL);
  qword_1019988D0 = v3;
  qword_1019988E8 = 0LL;
  qword_1019988F0 = 0LL;
  qword_1019988E0 = 0LL;
  qword_1019988E0 = (uint64_t)operator new(0x284uLL);
  uint64_t v4 = qword_1019988E0 + 644;
  qword_1019988F0 = qword_1019988E0 + 644;
  memcpy((void *)qword_1019988E0, &unk_10132A3F8, 0x284uLL);
  qword_1019988E8 = v4;
  __cxa_atexit((void (*)(void *))sub_10078CEA0, &qword_1019988C8, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001LL;
  v6[1] = &qword_1019988C8;
  _OWORD v6[2] = 0x7A00000001LL;
  v6[3] = &qword_1019988C8;
  v6[4] = 0x7900000001LL;
  v6[5] = &qword_1019988C8;
  v6[6] = 0x7B00000001LL;
  v6[7] = &qword_1019988C8;
  _WORD v6[8] = 0x7800000004LL;
  v6[9] = &qword_1019988C8;
  v6[10] = 0x7A00000004LL;
  v6[11] = &qword_1019988C8;
  v6[12] = 0x7900000004LL;
  v6[13] = &qword_1019988C8;
  v6[14] = 0x7B00000004LL;
  v6[15] = &qword_1019988C8;
  v6[16] = 0x7300000004LL;
  v6[17] = &qword_101998898;
  v6[18] = 0x7C00000004LL;
  v6[19] = &qword_101998898;
  v6[20] = 0x7300000000LL;
  v6[21] = &qword_101998898;
  v6[22] = 0x7C00000000LL;
  v6[23] = &qword_101998898;
  sub_10079464C((uint64_t)&unk_1019988F8, (int *)v6, 12LL);
  return __cxa_atexit((void (*)(void *))sub_10078CEE0, &unk_1019988F8, (void *)&_mh_execute_header);
}

void sub_100794D20(_Unwind_Exception *exception_object)
{
}

void sub_100794DF8(id a1)
{
  qword_101998920 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLDuetMonitorSilo");
}

void sub_100794E70(id a1)
{
  if (!v1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10184EB80);
    }
    uint64_t v2 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLDuetMonitor: not supported on this platform because CoreDuet.framework is not present",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10184EB80);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "CLDuetMonitor: not supported on this platform because CoreDuet.framework is not present",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "+[CLDuetMonitor isSupported]_block_invoke", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    byte_101998930 = 1;
  }

void sub_100795150(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

BOOL sub_10079517C()
{
  return os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT);
}

BOOL sub_100795190()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2632), OS_LOG_TYPE_INFO);
}

BOOL sub_1007951A0()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2632));
}

void *sub_1007951AC(uint64_t *a1, uint64_t a2)
{
  int v4 = *((unsigned __int8 *)a1 + 8);
  if ((~v4 & 3) == 0)
  {
    uint64_t v5 = *a1;
    int32x2_t v6 = *(int32x2_t *)((char *)a1 + 12);
    float32x2_t v7 = (float32x2_t)vrev64_s32(v6);
    v6.i32[1] = *((_DWORD *)a1 + 5);
    float32x2_t v8 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
    float32x2_t v11 = vsub_f32( vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *(float *)v6.i32), *(float32x2_t *)(a2 + 12)), v8),  vmul_f32(vadd_f32(vmul_f32(v7, (float32x2_t)v6), *(float32x2_t *)((char *)a1 + 28)), v8));
    float v12 = v9;
    (*(void (**)(uint64_t, float32x2_t *))(*(void *)v5 + 32LL))(v5, &v11);
    LOBYTE(v4) = *((_BYTE *)a1 + 8);
  }

  *((_BYTE *)a1 + _Block_object_dispose(va, 8) = v4 | 1;
  *((_DWORD *)a1 + 4) = *(_DWORD *)a2;
  *((_DWORD *)a1 + 5) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)a1 + 7) = *(_DWORD *)(a2 + 12);
  *((_DWORD *)a1 + _Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 20);
  *((_BYTE *)a1 + 40) = *(_BYTE *)(a2 + 24);
  return sub_1007952C0(a1);
}

void *sub_1007952C0(void *result)
{
  if ((~*((unsigned __int8 *)result + 8) & 3) == 0)
  {
    float32x2_t v1 = *(float32x2_t *)((char *)result + 12);
    float32x2_t v2 = (float32x2_t)vrev64_s32((int32x2_t)v1);
    v1.i32[1] = *((_DWORD *)result + 5);
    float v3 = (float)(*((float *)result + 6) * v1.f32[0]) + *((float *)result + 9);
    float32x2_t v6 = vmul_f32( vadd_f32(vmul_f32(v2, v1), *(float32x2_t *)((char *)result + 28)),  (float32x2_t)vdup_n_s32(0x3C8EFA35u));
    float v7 = v3 * 0.017453;
    BOOL v5 = v1.f32[0] < 20.0 || *((unsigned __int8 *)result + 40) > 0x60u;
    return (void *)(*(uint64_t (**)(void, float32x2_t *, BOOL))(*(void *)*result + 16LL))( *result,  &v6,  v5);
  }

  return result;
}

void *sub_100795364(uint64_t a1, float a2)
{
  if (a2 == 3.4028e38)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184EBC0);
    }
    BOOL v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = 0x47EFFFFFE0000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/ CMLinearTemperatureFit.cpp, line 45,temperature,%f.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184EBC0);
      }
      int v8 = 134217984;
      uint64_t v9 = 0x47EFFFFFE0000000LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/ CMLinearTemperatureFit.cpp, line 45,temperature,%f.",  COERCE_DOUBLE(&v8));
      float v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CMLinearTemperatureFit::feedGyroTemperature(float)", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  *(_BYTE *)(a1 + 8) |= 2u;
  *(float *)(a1 + 12) = a2;
  return sub_1007952C0((void *)a1);
}

void sub_100795550(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10079557C(void *__dst, uint64_t a2, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }

  __dst[3] = a2;
  __dst[4] = 0xBFF0000000000000LL;
  sub_1007955F4((uint64_t)__dst);
  return __dst;
}

void sub_1007955D8(_Unwind_Exception *exception_object)
{
}

void *sub_1007955F4(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  float v3 = operator new(0x20uLL);
  *float v3 = &off_10184EC30;
  v3[1] = sub_100799288;
  v3[2] = 0LL;
  v3[3] = a1;
  double v61 = v3;
  sub_10079ED30((void *)(v2 + 256), (uint64_t)v60);
  int v4 = v61;
  if (v61 == v60)
  {
    uint64_t v5 = 4LL;
    int v4 = v60;
  }

  else
  {
    if (!v61) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104LL))(*(void *)(a1 + 24));
  float v7 = operator new(0x20uLL);
  void *v7 = &off_10184ECF0;
  v7[1] = sub_1007995A0;
  _OWORD v7[2] = 0LL;
  v7[3] = a1;
  __int16 v59 = v7;
  sub_10079F010((void *)(v6 + 112), (uint64_t)v58);
  int v8 = v59;
  if (v59 == v58)
  {
    uint64_t v9 = 4LL;
    int v8 = v58;
  }

  else
  {
    if (!v59) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24));
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = &off_10184EDB0;
  v11[1] = sub_1007997A8;
  v11[2] = 0LL;
  void v11[3] = a1;
  double v57 = v11;
  sub_10079F2F0((void *)(v10 + 416), (uint64_t)v56);
  float v12 = v57;
  if (v57 == v56)
  {
    uint64_t v13 = 4LL;
    float v12 = v56;
  }

  else
  {
    if (!v57) {
      goto LABEL_16;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128LL))(*(void *)(a1 + 24));
  float v15 = operator new(0x20uLL);
  void *v15 = &off_10184EE70;
  v15[1] = sub_100799A24;
  v15[2] = 0LL;
  v15[3] = a1;
  double v55 = v15;
  sub_10079F5D0((void *)(v14 + 112), (uint64_t)v54);
  float v16 = v55;
  if (v55 == v54)
  {
    uint64_t v17 = 4LL;
    float v16 = v54;
  }

  else
  {
    if (!v55) {
      goto LABEL_21;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  unint64_t v19 = operator new(0x20uLL);
  *unint64_t v19 = &off_10184EF30;
  v19[1] = sub_100799C44;
  v19[2] = 0LL;
  v19[3] = a1;
  uint64_t v53 = v19;
  sub_10079F8B0((void *)(v18 + 288), (uint64_t)v52);
  size_t v20 = v53;
  if (v53 == v52)
  {
    uint64_t v21 = 4LL;
    size_t v20 = v52;
  }

  else
  {
    if (!v53) {
      goto LABEL_26;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_26:
  uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136LL))(*(void *)(a1 + 24));
  unint64_t v23 = operator new(0x20uLL);
  void *v23 = &off_10184EFE0;
  v23[1] = sub_100799E7C;
  void v23[2] = 0LL;
  v23[3] = a1;
  double v51 = v23;
  sub_10079FB90((void *)(v22 + 168), (uint64_t)v50);
  uint64_t v24 = v51;
  if (v51 == v50)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = v50;
  }

  else
  {
    if (!v51) {
      goto LABEL_31;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_31:
  uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 144LL))(*(void *)(a1 + 24));
  unsigned __int8 v27 = operator new(0x20uLL);
  *unsigned __int8 v27 = &off_10184F0A0;
  v27[1] = sub_10079A0BC;
  v27[2] = 0LL;
  v27[3] = a1;
  double v49 = v27;
  sub_10079FE70((void *)(v26 + 128), (uint64_t)v48);
  unint64_t v28 = v49;
  if (v49 == v48)
  {
    uint64_t v29 = 4LL;
    unint64_t v28 = v48;
  }

  else
  {
    if (!v49) {
      goto LABEL_36;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_36:
  uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160LL))(*(void *)(a1 + 24));
  __int128 v31 = operator new(0x20uLL);
  *__int128 v31 = &off_10184F160;
  v31[1] = sub_10079A2F4;
  v31[2] = 0LL;
  v31[3] = a1;
  __int16 v47 = v31;
  sub_1007A0150((void *)(v30 + 144), (uint64_t)v46);
  __int128 v32 = v47;
  if (v47 == v46)
  {
    uint64_t v33 = 4LL;
    __int128 v32 = v46;
  }

  else
  {
    if (!v47) {
      goto LABEL_41;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_41:
  uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152LL))(*(void *)(a1 + 24));
  __int128 v35 = operator new(0x20uLL);
  void *v35 = &off_10184F220;
  v35[1] = sub_10079A4D4;
  _DWORD v35[2] = 0LL;
  v35[3] = a1;
  double v45 = v35;
  sub_1007A0430((void *)(v34 + 128), (uint64_t)v44);
  __int128 v36 = v45;
  if (v45 == v44)
  {
    uint64_t v37 = 4LL;
    __int128 v36 = v44;
  }

  else
  {
    if (!v45) {
      goto LABEL_46;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_46:
  uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 168LL))(*(void *)(a1 + 24));
  BOOL v39 = operator new(0x20uLL);
  void *v39 = &off_10184F2E0;
  v39[1] = sub_10079A6EC;
  v39[2] = 0LL;
  v39[3] = a1;
  int v43 = v39;
  sub_1007A0710((void *)(v38 + 152), (uint64_t)v42);
  BOOL result = v43;
  if (v43 == v42)
  {
    uint64_t v41 = 4LL;
    BOOL result = v42;
  }

  else
  {
    if (!v43) {
      return result;
    }
    uint64_t v41 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_100795B20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  __int128 v35 = a13;
  if (a13 == v33)
  {
    uint64_t v36 = 4LL;
    __int128 v35 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*(void *)v35 + 8 * v36))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100795C60(uint64_t a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  sub_100795D7C(v4, a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104LL))(*(void *)(a1 + 24));
  sub_100796168(v5, a2);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24));
  sub_1007964E8(v6, a2);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128LL))(*(void *)(a1 + 24));
  sub_10079687C(v7, a2);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  sub_100796BFC(v8, a2);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136LL))(*(void *)(a1 + 24));
  sub_100796FE8(v9, a2);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 144LL))(*(void *)(a1 + 24));
  sub_1007973B4(v10, a2);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160LL))(*(void *)(a1 + 24));
  sub_10079780C(v11, a2);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152LL))(*(void *)(a1 + 24));
  sub_100797CA8(v12, a2);
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 168LL))(*(void *)(a1 + 24));
  sub_100798034(v13, a2);
  *(double *)(a1 + 32) = a2;
}

void sub_100795D7C(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 12LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 104) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLMotionCoprocessorInterface::MotionState>::update(CFAbsoluteTime) [T = CLMotionCoproces sorInterface::MotionState]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 25LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 104) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x19));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      float v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x19));
    }

    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x19)) + 160 * (v10 % 0x19);
      float v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x19));
      uint64_t v18 = *v17 + 160 * (v16 % 0x19);
    }

    uint64_t v24 = sub_10079ABC0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    unsigned __int8 v27 = (void *)(v26 + 8 * (v25 / 0x19));
    unint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 160 * (v25 % 0x19));
    sub_10079A928((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 104) = 0xBFF0000000000000LL;
    }
  }

void sub_100796168(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v36 = a2;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v31 = 134218240;
          double v32 = a2;
          __int16 v33 = 2048;
          uint64_t v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v31),  v30);
          unint64_t v23 = (uint8_t *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::update(CFAbsoluteTime) [T = CLAmbientLightSe nsor_Type::CLALSLuxResult]",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        return;
      }

      uint64_t v9 = 256LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      float v15 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }

    else
    {
      uint64_t v14 = (void *)(a1 + 56);
      float v15 = (double *)(*v13 + 16LL * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16LL * v16);
    }

    unint64_t v25 = (char *)sub_10079B170(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v26 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v28 = (char *)(v27 + 8 * (v26 >> 8));
    uint64_t v29 = *(void *)(a1 + 32) == v27 ? 0LL : *(void *)v28 + 16LL * v26;
    sub_10025A918((void *)(a1 + 16), v25, v24, v28, v29);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_1007964E8(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 8LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [T = CLExtendedStepCountEntry]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 16LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 4));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      float v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 4));
    }

    else
    {
      uint64_t v14 = (double *)(*v13 + 320 * (*(void *)(a1 + 48) & 0xFLL));
      float v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 4));
      uint64_t v18 = (double *)(*v17 + 320 * (v16 & 0xF));
    }

    uint64_t v24 = (char *)sub_10079B448(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = (char *)(v26 + 8 * (v25 >> 4));
    unint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*(void *)v27 + 320 * (v25 & 0xF));
    sub_10079B220((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_10079687C(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v36 = a2;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v31 = 134218240;
          double v32 = a2;
          __int16 v33 = 2048;
          uint64_t v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v31),  v30);
          unint64_t v23 = (uint8_t *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorLocationCoordinate>::update(CFAbsoluteTime) [T = CLOutdoorLocationCoordinate]",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        return;
      }

      uint64_t v9 = 256LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      float v15 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }

    else
    {
      uint64_t v14 = (void *)(a1 + 56);
      float v15 = (double *)(*v13 + 16LL * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16LL * v16);
    }

    unint64_t v25 = (char *)sub_10079B170(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v26 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v28 = (char *)(v27 + 8 * (v26 >> 8));
    uint64_t v29 = *(void *)(a1 + 32) == v27 ? 0LL : *(void *)v28 + 16LL * v26;
    sub_10025A918((void *)(a1 + 16), v25, v24, v28, v29);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100796BFC(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 10LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOdometerEntry>::update(CFAbsoluteTime) [T = CLOdometerEntry]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 21LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x15));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      float v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x15));
    }

    else
    {
      uint64_t v14 = (double *)(*(void *)(v11 + 8 * (v10 / 0x15)) + 192 * (v10 % 0x15));
      float v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x15));
      uint64_t v18 = (double *)(*v17 + 192 * (v16 % 0x15));
    }

    uint64_t v24 = sub_10079BCAC(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = (void *)(v26 + 8 * (v25 / 0x15));
    unint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 192 * (v25 % 0x15));
    sub_10079BA14((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100796FE8(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 28LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutPredictorTurnDetector::Turn>::update(CFAbsoluteTime) [T = CLWorkoutPredictorTur nDetector::Turn]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 56LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x38));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      float v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x38));
    }

    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x38)) + 72 * (v10 % 0x38);
      float v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x38));
      uint64_t v18 = *v17 + 72 * (v16 % 0x38);
    }

    uint64_t v24 = sub_10079C4E0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = (void *)(v26 + 8 * (v25 / 0x38));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : *v27 + 72 * (v25 % 0x38);
    sub_10079C238((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_1007973B4(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      uint64_t v6 = *(void ***)(a1 + 24);
    }

    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 >> 7];
      uint64_t v10 = (uint64_t)*v9 + 32 * (v8 & 0x7F);
      if (v10 != v11)
      {
        do
        {
          *(void *)buf = v10 + 8;
          sub_100023498((void ***)buf);
          v10 += 32LL;
          if (v10 - (void)*v9 == 4096)
          {
            uint64_t v12 = (uint64_t)v9[1];
            ++v9;
            uint64_t v10 = v12;
          }
        }

        while (v10 != v11);
        uint64_t v5 = *(void ***)(a1 + 24);
        uint64_t v6 = *(void ***)(a1 + 32);
      }
    }

    void *v7 = 0LL;
    unint64_t v21 = (char *)v6 - (char *)v5;
    if (v21 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v21 = v22 - (void)v5;
      }

      while (v21 > 0x10);
    }

    if (v21 >> 3 == 1)
    {
      uint64_t v23 = 64LL;
    }

    else
    {
      if (v21 >> 3 != 2)
      {
LABEL_22:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        uint64_t v24 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v26 = *(void *)(a1 + 64);
          *(_DWORD *)__int16 v36 = 134218240;
          *(double *)&v36[4] = a2;
          __int16 v37 = 2048;
          uint64_t v38 = v26;
          LODWORD(v35) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(v36),  v35);
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorWifiScan>::update(CFAbsoluteTime) [T = CLOutdoorWifiScan]",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        return;
      }

      uint64_t v23 = 128LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v23;
    goto LABEL_22;
  }

  memset(buf, 0, 32);
  if (sub_10079C8A8(a1, (uint64_t)buf))
  {
    unint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 24);
    float v15 = (void *)(v14 + 8 * (v13 >> 7));
    if (*(void *)(a1 + 32) == v14)
    {
      uint64_t v16 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v17 = (void *)(a1 + 56);
      unint64_t v19 = (void *)(v14 + 8 * ((*(void *)(a1 + 56) + v13) >> 7));
    }

    else
    {
      uint64_t v16 = *v15 + 32 * (*(void *)(a1 + 48) & 0x7FLL);
      uint64_t v17 = (void *)(a1 + 56);
      unint64_t v18 = *(void *)(a1 + 56) + v13;
      unint64_t v19 = (void *)(v14 + 8 * (v18 >> 7));
      uint64_t v20 = *v19 + 32 * (v18 & 0x7F);
    }

    int v30 = (char *)sub_10079CBC4(v15, v16, (uint64_t)v19, v20, *(uint64_t *)&a2, a1);
    unint64_t v31 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 24);
    uint64_t v33 = (char *)(v32 + 8 * (v31 >> 7));
    uint64_t v34 = *(void *)(a1 + 32) == v32 ? 0LL : *(void *)v33 + 32 * (v31 & 0x7F);
    sub_10079C914((void *)(a1 + 16), v30, v29, v33, v34);
    if (!*v17) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

  *(void *)__int16 v36 = &buf[8];
  sub_100023498((void ***)v36);
}

void sub_1007977DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a11 = (void **)&a16;
  sub_100023498(&a11);
  _Unwind_Resume(a1);
}

void sub_10079780C(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      uint64_t v6 = *(void ***)(a1 + 24);
    }

    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 / 0x55];
      unint64_t v10 = (unint64_t)*v9;
      unint64_t v11 = (unint64_t)*v9 + 48 * (v8 % 0x55);
      unint64_t v12 = (unint64_t)v5[(*(void *)(a1 + 56) + v8) / 0x55] + 48 * ((*(void *)(a1 + 56) + v8) % 0x55);
      if (v11 != v12)
      {
        do
        {
          unint64_t v13 = *(void **)(v11 + 24);
          if (v13)
          {
            *(void *)(v11 + 32) = v13;
            operator delete(v13);
            unint64_t v10 = (unint64_t)*v9;
          }

          v11 += 48LL;
          if (v11 - v10 == 4080)
          {
            unint64_t v14 = (unint64_t)v9[1];
            ++v9;
            unint64_t v10 = v14;
            unint64_t v11 = v14;
          }
        }

        while (v11 != v12);
        uint64_t v5 = *(void ***)(a1 + 24);
        uint64_t v6 = *(void ***)(a1 + 32);
      }
    }

    void *v7 = 0LL;
    unint64_t v23 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v23 = v24 - (void)v5;
      }

      while (v23 > 0x10);
    }

    if (v23 >> 3 == 1)
    {
      uint64_t v25 = 42LL;
    }

    else
    {
      if (v23 >> 3 != 2)
      {
LABEL_24:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        uint64_t v26 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v28 = *(void *)(a1 + 64);
          int v38 = 134218240;
          double v39 = a2;
          __int16 v40 = 2048;
          uint64_t v41 = v28;
          LODWORD(v37) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v38),  v37);
          int v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::update(CFAbsoluteTime) [T = CLOutdoorGnssLeechLocation]",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        return;
      }

      uint64_t v25 = 85LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v25;
    goto LABEL_24;
  }

  __int128 v43 = 0u;
  memset(buf, 0, sizeof(buf));
  if (sub_10079D1EC(a1, (uint64_t)buf))
  {
    unint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = (void *)(v16 + 8 * (v15 / 0x55));
    if (*(void *)(a1 + 32) == v16)
    {
      unint64_t v18 = 0LL;
      uint64_t v22 = 0LL;
      unint64_t v19 = (void *)(a1 + 56);
      unint64_t v21 = (void *)(v16 + 8 * ((*(void *)(a1 + 56) + v15) / 0x55));
    }

    else
    {
      unint64_t v18 = (__int128 *)(*(void *)(v16 + 8 * (v15 / 0x55)) + 48 * (v15 % 0x55));
      unint64_t v19 = (void *)(a1 + 56);
      unint64_t v20 = *(void *)(a1 + 56) + v15;
      unint64_t v21 = (void *)(v16 + 8 * (v20 / 0x55));
      uint64_t v22 = (__int128 *)(*v21 + 48 * (v20 % 0x55));
    }

    uint64_t v32 = sub_10079D584(v17, v18, (uint64_t)v21, v22, *(uint64_t *)&a2, a1);
    unint64_t v33 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v34 = *(void *)(a1 + 24);
    double v35 = (void *)(v34 + 8 * (v33 / 0x55));
    uint64_t v36 = *(void *)(a1 + 32) == v34 ? 0LL : *v35 + 48 * (v33 % 0x55);
    sub_10079D264((void *)(a1 + 16), v32, v31, v35, v36);
    if (!*v19) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

  if (*(void *)&buf[24])
  {
    *(void *)&__int128 v43 = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }

void sub_100797C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100797CA8(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 64LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        unint64_t v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v36 = a2;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v31 = 134218240;
          double v32 = a2;
          __int16 v33 = 2048;
          uint64_t v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v31),  v30);
          unint64_t v23 = (uint8_t *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::update(CFAbsoluteTime) [T = CLOutdoorGnssAvailabilityPredictor]",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        return;
      }

      uint64_t v9 = 128LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = (void *)(v11 + 8 * (v10 >> 7));
    if (v12 == v11)
    {
      unint64_t v14 = 0LL;
      unint64_t v18 = 0LL;
      unint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 7));
    }

    else
    {
      unint64_t v14 = (_OWORD *)(*v13 + 32 * (v10 & 0x7F));
      unint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 7));
      unint64_t v18 = (_OWORD *)(*v17 + 32 * (v16 & 0x7F));
    }

    uint64_t v25 = (char *)sub_10079DFA8(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v26 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 24);
    uint64_t v28 = (char *)(v27 + 8 * (v26 >> 7));
    uint64_t v29 = *(void *)(a1 + 32) == v27 ? 0LL : *(void *)v28 + 32 * (v26 & 0x7F);
    sub_10079DD74((void *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100798034(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      uint64_t v6 = *(void ***)(a1 + 24);
    }

    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 / 0x49];
      unint64_t v10 = (unint64_t)*v9;
      unint64_t v11 = (unint64_t)*v9 + 56 * (v8 % 0x49);
      unint64_t v12 = (unint64_t)v5[(*(void *)(a1 + 56) + v8) / 0x49] + 56 * ((*(void *)(a1 + 56) + v8) % 0x49);
      if (v11 != v12)
      {
        do
        {
          unint64_t v13 = *(void **)(v11 + 16);
          if (v13)
          {
            *(void *)(v11 + 24) = v13;
            operator delete(v13);
            unint64_t v10 = (unint64_t)*v9;
          }

          v11 += 56LL;
          if (v11 - v10 == 4088)
          {
            unint64_t v14 = (unint64_t)v9[1];
            ++v9;
            unint64_t v10 = v14;
            unint64_t v11 = v14;
          }
        }

        while (v11 != v12);
        uint64_t v5 = *(void ***)(a1 + 24);
        uint64_t v6 = *(void ***)(a1 + 32);
      }
    }

    void *v7 = 0LL;
    unint64_t v28 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v28 = v29 - (void)v5;
      }

      while (v28 > 0x10);
    }

    if (v28 >> 3 == 1)
    {
      uint64_t v30 = 36LL;
    }

    else
    {
      if (v28 >> 3 != 2)
      {
LABEL_24:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184EC00);
        }
        int v31 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184EC00);
          }
          uint64_t v33 = *(void *)(a1 + 64);
          int v43 = 134218240;
          double v44 = a2;
          __int16 v45 = 2048;
          uint64_t v46 = v33;
          LODWORD(v42) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v43),  v42);
          double v35 = (char *)v34;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorMapsRouteHint>::update(CFAbsoluteTime) [T = CLOutdoorMapsRouteHint]",  "%s\n",  v34);
          if (v35 != buf) {
            free(v35);
          }
        }

        return;
      }

      uint64_t v30 = 73LL;
    }

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v30;
    goto LABEL_24;
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0x600000006LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  *(void *)&buf[16] = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v50 = _Q0;
  if (sub_10079E364(a1, (uint64_t)buf))
  {
    unint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v22 = (void *)(v21 + 8 * (v20 / 0x49));
    if (*(void *)(a1 + 32) == v21)
    {
      uint64_t v23 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v24 = (void *)(a1 + 56);
      unint64_t v26 = (void *)(v21
                     + (((unint64_t)(((*(void *)(a1 + 56) + v20) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8LL));
    }

    else
    {
      uint64_t v23 = *(void *)(v21 + 8 * (v20 / 0x49)) + 56 * (v20 % 0x49);
      uint64_t v24 = (void *)(a1 + 56);
      unint64_t v25 = *(void *)(a1 + 56) + v20;
      unint64_t v26 = (void *)(v21 + 8 * (v25 / 0x49));
      uint64_t v27 = *v26 + 56 * (v25 % 0x49);
    }

    __int16 v37 = sub_10079E74C(v22, v23, (uint64_t)v26, v27, *(uint64_t *)&a2, a1);
    unint64_t v38 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 24);
    __int16 v40 = (void *)(v39 + 8 * (v38 / 0x49));
    uint64_t v41 = *(void *)(a1 + 32) == v39 ? 0LL : *v40 + 56 * (v38 % 0x49);
    sub_10079E3E4((void *)(a1 + 16), v37, v36, v40, v41);
    if (!*v24) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

  if (*(void *)&buf[16])
  {
    uint64_t v48 = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }

void sub_1007984D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007984FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 904);
  if (v2)
  {
    *(void *)(a1 + 912) = v2;
    operator delete(v2);
  }

  float v3 = *(void **)(a1 + 864);
  if (v3)
  {
    *(void *)(a1 + 872) = v3;
    operator delete(v3);
  }

  uint64_t v5 = (void **)(a1 + 784);
  sub_100023498(&v5);
  return a1;
}

uint64_t sub_100798554(uint64_t a1, uint64_t a2, char *__dst, double a4)
{
  *(_WORD *)&__src[152] = 0;
  *(_OWORD *)__src = xmmword_1012EA5D0;
  memset(&__src[16], 0, 135);
  *(void *)&__src[160] = 0xBFF0000000000000LL;
  *(_DWORD *)&__src[168] = 0;
  memset(&__src[184], 0, 312);
  *(void *)&__src[176] = 0xBFF0000000000000LL;
  *(void *)&__src[496] = 0xBFF0000000000000LL;
  *(void *)&__src[504] = 0LL;
  *(void *)&__src[512] = 0xBFF0000000000000LL;
  *(_DWORD *)&__src[688] = 0;
  *(void *)&__src[696] = 0LL;
  memset(&__src[520], 0, 84);
  memset(&__src[608], 0, 73);
  *(void *)&__src[704] = 0xBFF0000000000000LL;
  *(void *)&__src[720] = 0LL;
  *(void *)&__src[712] = 0LL;
  *(void *)&__src[728] = 0x80000000800000LL;
  *(void *)&__src[744] = 0LL;
  *(void *)&__src[736] = 0LL;
  *(_OWORD *)&__src[752] = xmmword_1012E1EA0;
  *(void *)&__src[768] = 0x80000000800000LL;
  unint64_t v32 = 0xBFF0000000000000LL;
  __int128 v34 = 0xBFF0000000000000LL;
  __int128 v35 = 0uLL;
  *(void *)uint64_t v36 = 0xBFF0000000000000LL;
  *(_OWORD *)&v36[8] = 0u;
  __int128 v37 = 0u;
  uint64_t v38 = 0LL;
  unint64_t v39 = 0xBFF0000000000000LL;
  uint64_t v40 = 0x600000006LL;
  uint64_t v42 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v43 = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v44 = _Q0;
  memcpy(__dst, __src, 0x308uLL);
  *((void *)__dst + 97) = 0xBFF0000000000000LL;
  sub_1002DD898((uint64_t *)__dst + 98);
  *((void *)__dst + 99) = 0LL;
  *((void *)__dst + 9_Block_object_dispose(va, 8) = 0LL;
  *((void *)__dst + 100) = 0LL;
  memset(v33, 0, sizeof(v33));
  __int128 v12 = v35;
  *(_OWORD *)(__dst + 80_Block_object_dispose(va, 8) = v34;
  *(_OWORD *)(__dst + 824) = v12;
  *(_OWORD *)(__dst + 840) = *(_OWORD *)v36;
  *((void *)__dst + 107) = *(void *)&v36[16];
  unint64_t v13 = (void *)*((void *)__dst + 108);
  if (v13)
  {
    *((void *)__dst + 109) = v13;
    operator delete(v13);
  }

  *((void *)__dst + 10_Block_object_dispose(va, 8) = 0LL;
  *((void *)__dst + 109) = 0LL;
  *((void *)__dst + 110) = 0LL;
  uint64_t v38 = 0LL;
  __int128 v37 = 0uLL;
  *((void *)__dst + 111) = 0xBFF0000000000000LL;
  *((void *)__dst + 112) = v40;
  unint64_t v14 = (void *)*((void *)__dst + 113);
  if (v14)
  {
    *((void *)__dst + 114) = v14;
    operator delete(v14);
  }

  *((void *)__dst + 113) = 0LL;
  *((void *)__dst + 114) = 0LL;
  *((void *)__dst + 115) = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v41 = 0LL;
  *((_OWORD *)__dst + 5_Block_object_dispose(va, 8) = v44;
  __int16 v45 = (void **)v33;
  sub_100023498(&v45);
  unint64_t v15 = *(_DWORD **)a2;
  unint64_t v16 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v16)
  {
    char v17 = 1;
  }

  else
  {
    char v17 = 1;
    do
    {
      switch(*v15)
      {
        case 0:
          uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
          char v19 = sub_10079897C(v18, __dst, a4);
          goto LABEL_18;
        case 1:
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104LL))(*(void *)(a1 + 24));
          char v19 = sub_10045DF68(v20, (_OWORD *)__dst + 10, a4);
          goto LABEL_18;
        case 2:
          uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24));
          char v19 = sub_100798AA4(v21, __dst + 176, a4);
          goto LABEL_18;
        case 3:
          uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128LL))(*(void *)(a1 + 24));
          char v19 = sub_10045DF68(v22, (_OWORD *)__dst + 31, a4);
          goto LABEL_18;
        case 4:
          uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
          char v19 = sub_100798BA4(v23, (_OWORD *)__dst + 32, a4);
          goto LABEL_18;
        case 5:
          uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136LL))(*(void *)(a1 + 24));
          char v19 = sub_100798CD4(v24, (uint64_t)(__dst + 704), a4);
          goto LABEL_18;
        case 6:
          uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 144LL))(*(void *)(a1 + 24));
          char v19 = sub_100798E1C(v25, (void *)__dst + 97, a4);
          goto LABEL_18;
        case 7:
          uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152LL))(*(void *)(a1 + 24));
          char v19 = sub_100799068(v26, __dst + 808, a4);
          goto LABEL_18;
        case 8:
          uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160LL))(*(void *)(a1 + 24));
          char v19 = sub_100798F30(v27, (uint64_t)(__dst + 840), a4);
          goto LABEL_18;
        case 9:
          uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 168LL))(*(void *)(a1 + 24));
          char v19 = sub_10079913C(v28, (uint64_t)(__dst + 888), a4);
LABEL_18:
          v17 &= v19;
          break;
        default:
          break;
      }

      ++v15;
    }

    while (v15 != v16);
  }

  return v17 & 1;
}

uint64_t sub_10079897C(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x19));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 160 * (v6 % 0x19);
  unint64_t v10 = v5 / 0x19;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x19));
  unint64_t v12 = v5 % 0x19;
  uint64_t v13 = v11 + 160 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4000;
      }
      double v15 = *(double *)(v14 - 152);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4000;
      }

      v9 -= 160LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 160 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 160 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4000;
  }
  __int128 v17 = *(_OWORD *)(v9 - 144);
  *a2 = *(_OWORD *)(v9 - 160);
  a2[1] = v17;
  __int128 v18 = *(_OWORD *)(v9 - 128);
  __int128 v19 = *(_OWORD *)(v9 - 112);
  __int128 v20 = *(_OWORD *)(v9 - 80);
  a2[4] = *(_OWORD *)(v9 - 96);
  a2[5] = v20;
  a2[2] = v18;
  a2[3] = v19;
  __int128 v21 = *(_OWORD *)(v9 - 64);
  __int128 v22 = *(_OWORD *)(v9 - 48);
  __int128 v23 = *(_OWORD *)(v9 - 16);
  a2[8] = *(_OWORD *)(v9 - 32);
  a2[9] = v23;
  a2[6] = v21;
  a2[7] = v22;
  return 1LL;
}

uint64_t sub_100798AA4(uint64_t a1, void *__dst, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  char v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 4));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 320LL * (v6 & 0xF);
  unint64_t v10 = v5 >> 4;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 4));
  unsigned int v12 = v5 & 0xF;
  uint64_t v13 = v11 + 320LL * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 5120;
      }
      double v15 = *(double *)(v14 - 320);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 5120;
      }

      v9 -= 320LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 320LL * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 320LL * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 5120;
  }
  memcpy(__dst, (const void *)(v9 - 320), 0x140uLL);
  return 1LL;
}

uint64_t sub_100798BA4(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x15));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 192 * (v6 % 0x15);
  unint64_t v10 = v5 / 0x15;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x15));
  unint64_t v12 = v5 % 0x15;
  uint64_t v13 = v11 + 192 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4032;
      }
      double v15 = *(double *)(v14 - 192);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4032;
      }

      v9 -= 192LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 192 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 192 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4032;
  }
  __int128 v17 = *(_OWORD *)(v9 - 192);
  __int128 v18 = *(_OWORD *)(v9 - 176);
  __int128 v19 = *(_OWORD *)(v9 - 144);
  a2[2] = *(_OWORD *)(v9 - 160);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  __int128 v20 = *(_OWORD *)(v9 - 128);
  __int128 v21 = *(_OWORD *)(v9 - 112);
  __int128 v22 = *(_OWORD *)(v9 - 80);
  a2[6] = *(_OWORD *)(v9 - 96);
  a2[7] = v22;
  a2[4] = v20;
  a2[5] = v21;
  __int128 v23 = *(_OWORD *)(v9 - 64);
  __int128 v24 = *(_OWORD *)(v9 - 48);
  __int128 v25 = *(_OWORD *)(v9 - 16);
  a2[10] = *(_OWORD *)(v9 - 32);
  a2[11] = v25;
  a2[8] = v23;
  a2[9] = v24;
  return 1LL;
}

uint64_t sub_100798CD4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x38));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 72 * (v6 % 0x38);
  unint64_t v10 = v5 / 0x38;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x38));
  unint64_t v12 = v5 % 0x38;
  uint64_t v13 = v11 + 72 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4032;
      }
      double v15 = *(double *)(v14 - 72);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4032;
      }

      v9 -= 72LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 72 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 72 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4032;
  }
  *(void *)a2 = *(void *)(v9 - 72);
  *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = *(_OWORD *)(v9 - 64);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v9 - 48);
  *(_DWORD *)(a2 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v9 - 44);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v9 - 40);
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v9 - 20);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(v9 - 16);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(v9 - 12);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v9 - 8);
  *(_DWORD *)(a2 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v9 - 4);
  return 1LL;
}

uint64_t sub_100798E1C(uint64_t a1, void *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 >> 7));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 32 * (v6 & 0x7F);
  unint64_t v10 = v5 >> 7;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 7));
  uint64_t v12 = v5 & 0x7F;
  uint64_t v13 = v11 + 32 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 32);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }

      v9 -= 32LL;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 32 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  *a2 = *(void *)(v9 - 32);
  if ((void *)(v9 - 32) != a2) {
    sub_1002DD704( a2 + 1,  *(void *)(v9 - 24),  *(void *)(v9 - 16),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(v9 - 16) - *(void *)(v9 - 24)) >> 3));
  }
  return 1LL;
}

uint64_t sub_100798F30(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x55));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 48 * (v6 % 0x55);
  unint64_t v10 = v5 / 0x55;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x55));
  unint64_t v12 = v5 % 0x55;
  uint64_t v13 = v11 + 48 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4080;
      }
      double v15 = *(double *)(v14 - 48);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4080;
      }

      v9 -= 48LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 48 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 48 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4080;
  }
  __int128 v17 = *(_OWORD *)(v9 - 48);
  *(void *)(a2 + 16) = *(void *)(v9 - 32);
  *(_OWORD *)a2 = v17;
  if (v9 - 48 != a2) {
    sub_10079D690( (char *)(a2 + 24),  *(char **)(v9 - 24),  *(void *)(v9 - 16),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(v9 - 16) - *(void *)(v9 - 24)) >> 2));
  }
  return 1LL;
}

uint64_t sub_100799068(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  char v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 7));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 32LL * (v6 & 0x7F);
  unint64_t v10 = v5 >> 7;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 7));
  uint64_t v12 = v5 & 0x7F;
  uint64_t v13 = v11 + 32 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 32);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }

      v9 -= 32LL;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 32 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  __int128 v17 = *(_OWORD *)(v9 - 16);
  *a2 = *(_OWORD *)(v9 - 32);
  a2[1] = v17;
  return 1LL;
}

uint64_t sub_10079913C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = v6 + v3;
  uint64_t v8 = (uint64_t *)(v4 + 8 * ((v6 + v3) / 0x49));
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + 56 * (v7 % 0x49);
  unint64_t v11 = v6 / 0x49;
  uint64_t v12 = *(void *)(v4 + 8 * (v6 / 0x49));
  unint64_t v13 = v6 % 0x49;
  uint64_t v14 = v12 + 56 * v13;
  if (v10 != v14)
  {
    while (1)
    {
      uint64_t v15 = v10;
      if (v10 == v9) {
        uint64_t v15 = *(v8 - 1) + 4088;
      }
      double v16 = *(double *)(v15 - 56);
      if (v10 == v9)
      {
        uint64_t v17 = *--v8;
        uint64_t v9 = v17;
        uint64_t v10 = v17 + 4088;
      }

      v10 -= 56LL;
      if (v10 == v14)
      {
        uint64_t v10 = v14;
        break;
      }
    }
  }

  if (v10 == *(void *)(v4 + 8 * v11) + 56 * v13) {
    return 0LL;
  }
  if (v10 == *v8) {
    uint64_t v10 = *(v8 - 1) + 4088;
  }
  *(void *)a2 = *(void *)(v10 - 56);
  *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(v10 - 48);
  if (v10 - 56 != a2) {
    sub_1005F6B84( (char *)(a2 + 16),  *(char **)(v10 - 40),  *(void *)(v10 - 32),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v10 - 32) - *(void *)(v10 - 40)) >> 3));
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v10 - 16);
  return 1LL;
}

void sub_100799288(uint64_t *a1, uint64_t a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *(void *)(a2 + 8);
    int v7 = *(unsigned __int8 *)(a2 + 144);
    double v8 = *(float *)(a2 + 112);
    double v9 = *(float *)(a2 + 116);
    double v10 = *(float *)(a2 + 132);
    double v11 = *(float *)(a2 + 136);
    double v12 = *(float *)(a2 + 128);
    double v13 = *(float *)(a2 + 124);
    double v14 = *(float *)(a2 + 120);
    int v15 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)buf = 136317954;
    uint64_t v64 = v5;
    __int16 v65 = 2048;
    uint64_t v66 = v6;
    __int16 v67 = 1024;
    int v68 = v30;
    __int16 v69 = 1024;
    int v70 = v7;
    __int16 v71 = 2048;
    double v72 = v8;
    __int16 v73 = 2048;
    double v74 = v9;
    __int16 v75 = 2048;
    double v76 = v10;
    __int16 v77 = 2048;
    double v78 = v11;
    __int16 v79 = 2048;
    double v80 = v12;
    __int16 v81 = 2048;
    double v82 = v13;
    __int16 v83 = 2048;
    double v84 = v14;
    __int16 v85 = 1024;
    int v86 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Activity,context,%s,startTime,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f ,machineFreq,%f,pushVectorMag,%f,epochType,%d",  buf,  0x6Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v16 = *(void *)(a2 + 8);
    int v17 = *(unsigned __int8 *)(a2 + 144);
    double v18 = *(float *)(a2 + 112);
    double v19 = *(float *)(a2 + 116);
    double v20 = *(float *)(a2 + 132);
    double v21 = *(float *)(a2 + 136);
    double v22 = *(float *)(a2 + 128);
    double v23 = *(float *)(a2 + 124);
    double v24 = *(float *)(a2 + 120);
    int v25 = *(_DWORD *)(a2 + 140);
    int v39 = 136317954;
    uint64_t v40 = a1;
    __int16 v41 = 2048;
    uint64_t v42 = v16;
    __int16 v43 = 1024;
    int v44 = v30;
    __int16 v45 = 1024;
    int v46 = v17;
    __int16 v47 = 2048;
    double v48 = v18;
    __int16 v49 = 2048;
    double v50 = v19;
    __int16 v51 = 2048;
    double v52 = v20;
    __int16 v53 = 2048;
    double v54 = v21;
    __int16 v55 = 2048;
    double v56 = v22;
    __int16 v57 = 2048;
    double v58 = v23;
    __int16 v59 = 2048;
    double v60 = v24;
    __int16 v61 = 1024;
    int v62 = v25;
    LODWORD(v2_Block_object_dispose(va, 8) = 110;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Activity,context,%s,startTime,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f ,machineFreq,%f,pushVectorMag,%f,epochType,%d",  (const char *)&v39,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38);
    uint64_t v27 = (uint8_t *)v26;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorInputs::logActivity(const CLOutdoorActivity &)", "%s\n", v26);
    if (v27 != buf) {
      free(v27);
    }
  }

void sub_1007995A0(uint64_t *a1, float *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    *(_DWORD *)buf = 136315650;
    double v20 = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    double v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "AmbientLight,context,%s,startTime,%f,lux,%f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v8 = *(void *)a2;
    double v9 = a2[2];
    int v13 = 136315650;
    double v14 = a1;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    double v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "AmbientLight,context,%s,startTime,%f,lux,%f",  (const char *)&v13,  v12);
    double v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logAmbientLight(const CLOutdoorAmbientLight &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_1007997A8(uint64_t *a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *a2;
    uint64_t v7 = a2[39];
    uint64_t v8 = a2[26];
    int v9 = *((_DWORD *)a2 + 54);
    uint64_t v11 = a2[29];
    uint64_t v10 = a2[30];
    uint64_t v12 = a2[28];
    *(_DWORD *)buf = 136316930;
    uint64_t v40 = v5;
    __int16 v41 = 2048;
    uint64_t v42 = v6;
    __int16 v43 = 2048;
    uint64_t v44 = v7;
    __int16 v45 = 2048;
    uint64_t v46 = v11;
    __int16 v47 = 2048;
    uint64_t v48 = v8;
    __int16 v49 = 1024;
    int v50 = v9;
    __int16 v51 = 2048;
    uint64_t v52 = v10;
    __int16 v53 = 2048;
    uint64_t v54 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "ExtendedStep,context,%s,startTime,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed ,%f,incrementalActiveTime,%f",  buf,  0x4Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v13 = *a2;
    uint64_t v14 = a2[39];
    uint64_t v15 = a2[26];
    int v16 = *((_DWORD *)a2 + 54);
    uint64_t v18 = a2[29];
    uint64_t v17 = a2[30];
    uint64_t v19 = a2[28];
    int v23 = 136316930;
    double v24 = a1;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    __int16 v27 = 2048;
    uint64_t v28 = v14;
    __int16 v29 = 2048;
    uint64_t v30 = v18;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    __int16 v33 = 1024;
    int v34 = v16;
    __int16 v35 = 2048;
    uint64_t v36 = v17;
    __int16 v37 = 2048;
    uint64_t v38 = v19;
    LODWORD(v22) = 78;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "ExtendedStep,context,%s,startTime,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed ,%f,incrementalActiveTime,%f",  (const char *)&v23,  v22);
    __int16 v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logExtendedStep(const CLOutdoorExtendedStep &)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

void sub_100799A24(uint64_t *a1, float *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    double v8 = a2[3];
    *(_DWORD *)buf = 136315906;
    double v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v6;
    __int16 v27 = 2048;
    double v28 = v7;
    __int16 v29 = 2048;
    double v30 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "LocationCoordinate,context,%s,startTime,%f,latitude,%f,longitude,%f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v9 = *(void *)a2;
    double v10 = a2[2];
    double v11 = a2[3];
    int v15 = 136315906;
    int v16 = a1;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    double v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    LODWORD(v14) = 42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "LocationCoordinate,context,%s,startTime,%f,latitude,%f,longitude,%f",  (const char *)&v15,  v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logLocationCoordinate(const CLOutdoorLocationCoordinate &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

void sub_100799C44(uint64_t *a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *a2;
    uint64_t v8 = a2[4];
    uint64_t v7 = a2[5];
    uint64_t v9 = a2[7];
    *(_DWORD *)buf = 136316418;
    double v30 = v5;
    __int16 v31 = 2048;
    uint64_t v32 = v6;
    __int16 v33 = 2048;
    uint64_t v34 = v7;
    __int16 v35 = 2048;
    uint64_t v36 = v8;
    __int16 v37 = 2048;
    uint64_t v38 = v9;
    __int16 v39 = 2048;
    uint64_t v40 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Odometer,context,%s,startTime,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v10 = *a2;
    uint64_t v12 = a2[4];
    uint64_t v11 = a2[5];
    uint64_t v13 = a2[7];
    int v17 = 136316418;
    uint64_t v18 = a1;
    __int16 v19 = 2048;
    uint64_t v20 = v10;
    __int16 v21 = 2048;
    uint64_t v22 = v11;
    __int16 v23 = 2048;
    uint64_t v24 = v12;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    __int16 v27 = 2048;
    uint64_t v28 = v10;
    LODWORD(v16) = 62;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Odometer,context,%s,startTime,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f",  (const char *)&v17,  v16);
    int v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorInputs::logGps(const CLOutdoorGps &)", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

void sub_100799E7C(uint64_t *a1, float *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    double v8 = a2[6];
    double v9 = a2[7];
    *(_DWORD *)buf = 136316162;
    uint64_t v28 = v5;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    __int16 v31 = 2048;
    double v32 = v7;
    __int16 v33 = 2048;
    double v34 = v8;
    __int16 v35 = 2048;
    double v36 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Turn,context,%s,startTime,%f,%f,%f,%f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v10 = *(void *)a2;
    double v11 = a2[2];
    double v12 = a2[6];
    double v13 = a2[7];
    int v17 = 136316162;
    uint64_t v18 = a1;
    __int16 v19 = 2048;
    uint64_t v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 2048;
    double v24 = v12;
    __int16 v25 = 2048;
    double v26 = v13;
    LODWORD(v16) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Turn,context,%s,startTime,%f,%f,%f,%f",  (const char *)&v17,  v16);
    int v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorInputs::logTurn(const CLOutdoorTurn &)", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

void sub_10079A0BC(uint64_t *a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = a1;
    uint64_t v6 = *a2;
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3LL * ((a2[2] - a2[1]) >> 3);
    *(_DWORD *)buf = 136315650;
    uint64_t v20 = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "WifiScan,context,%s,startTime,%f,accessPointCount,%lu",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v8 = *a2;
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3LL * ((a2[2] - a2[1]) >> 3);
    int v13 = 136315650;
    double v14 = a1;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "WifiScan,context,%s,startTime,%f,accessPointCount,%lu",  (const char *)&v13,  v12);
    double v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorInputs::logWifiScan(const CLOutdoorWifiScan &)", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_10079A2F4(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v3 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    *(_DWORD *)buf = 134218496;
    uint64_t v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "GnssLeechLocation,startTime,%f,machTime,%f,lifespan,%f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    int v13 = 134218496;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "GnssLeechLocation,startTime,%f,machTime,%f,lifespan,%f",  COERCE_DOUBLE(&v13),  v12);
    double v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logGnssLeechLocation(const CLOutdoorGnssLeechLocation &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_10079A4D4(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v3 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    int v5 = *((_DWORD *)a2 + 2);
    int v6 = *((_DWORD *)a2 + 3);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    *(_DWORD *)buf = 134219009;
    uint64_t v27 = v4;
    __int16 v28 = 2048;
    uint64_t v29 = v7;
    __int16 v30 = 1025;
    int v31 = v5;
    __int16 v32 = 1025;
    int v33 = v6;
    __int16 v34 = 2049;
    uint64_t v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "GnssAvailabilityPredictor,startTime,%f,mctTime,%f,measSource,%{private}d,state,%{private}d,stateProbability,%{private}f",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 2);
    int v11 = *((_DWORD *)a2 + 3);
    uint64_t v13 = a2[2];
    uint64_t v12 = a2[3];
    int v16 = 134219009;
    uint64_t v17 = v9;
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    __int16 v20 = 1025;
    int v21 = v10;
    __int16 v22 = 1025;
    int v23 = v11;
    __int16 v24 = 2049;
    uint64_t v25 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "GnssAvailabilityPredictor,startTime,%f,mctTime,%f,measSource,%{private}d,state,%{private}d,stateProbability,%{private}f",  &v16,  44);
    __int16 v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logGnssAvailabilityPredictor(const CLOutdoorGnssAvailabilityPredictor &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

void sub_10079A6EC(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10184EBE0);
  }
  uint64_t v3 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[5];
    uint64_t v6 = a2[6];
    int v7 = *((_DWORD *)a2 + 2);
    int v8 = *((_DWORD *)a2 + 3);
    *(_DWORD *)buf = 134219009;
    uint64_t v27 = v4;
    __int16 v28 = 2048;
    uint64_t v29 = v5;
    __int16 v30 = 2048;
    uint64_t v31 = v6;
    __int16 v32 = 1025;
    int v33 = v7;
    __int16 v34 = 1025;
    int v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "MapsRouteHint,startTime,%f,iosTime,%f,machTime,%f,routingType,%{private}d,stepType,%{private}d",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10184EBE0);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    int v12 = *((_DWORD *)a2 + 2);
    int v13 = *((_DWORD *)a2 + 3);
    int v16 = 134219009;
    uint64_t v17 = v9;
    __int16 v18 = 2048;
    uint64_t v19 = v10;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    __int16 v22 = 1025;
    int v23 = v12;
    __int16 v24 = 1025;
    int v25 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "MapsRouteHint,startTime,%f,iosTime,%f,machTime,%f,routingType,%{private}d,stepType,%{private}d",  &v16,  44);
    __int16 v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorInputs::logMapsRouteHint(const CLOutdoorMapsRouteHint &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

void sub_10079A8FC(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

unint64_t sub_10079A928(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 25 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x19));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[160 * (v7 % 0x19)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 25 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x19);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10079AD90(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10079AD90(v24, v6);
      sub_10079AE4C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10079AD90(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      int v16 = (_BYTE **)(v15 + 8 * (v14 / 0x19));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[160 * (v14 % 0x19)];
      }
      v24[0] = v12;
      sub_10079AFF8(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10079AD1C(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x19));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 160 * (v19 % 0x19);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10079AD90(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_10079ABC0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 8) <= *(double *)(a6 + 88))
    {
      a2 += 160LL;
      if (a2 - *result == 4000)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 160LL;
      if (v7 - *v8 == 4000)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)(v7 + 8) <= *(double *)(a6 + 88))
      {
        __int128 v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        __int128 v11 = *(_OWORD *)(v7 + 32);
        __int128 v12 = *(_OWORD *)(v7 + 48);
        __int128 v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v12;
        __int128 v14 = *(_OWORD *)(v7 + 96);
        __int128 v15 = *(_OWORD *)(v7 + 112);
        __int128 v16 = *(_OWORD *)(v7 + 144);
        *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v7 + 128);
        *(_OWORD *)(a2 + 144) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        *(_OWORD *)(a2 + 112) = v15;
        a2 += 160LL;
        if (a2 - *result == 4000)
        {
          uint64_t v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }

  return result;
}

void sub_10079AC94(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10079ACC0(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x19) {
    a2 = 1;
  }
  if (v2 < 0x32) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 25LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10079AD1C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 25 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19) {
    a2 = 1;
  }
  if (v5 < 0x32) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void *sub_10079AD90(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x3333333333333333LL * ((uint64_t)(result[1] - *(void *)*result) >> 5);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 24 - v3;
      uint64_t v6 = &v2[-(v5 / 0x19)];
      *BOOL result = v6;
      unint64_t v4 = *v6 + 160 * (25 * (v5 / 0x19) - v5) + 3840;
    }

    else
    {
      *BOOL result = &v2[v3 / 0x19];
      unint64_t v4 = v2[v3 / 0x19] + 160 * (v3 % 0x19);
    }

    result[1] = v4;
  }

  return result;
}

__n128 sub_10079AE4C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __int128 v13 = a3 - 1;
    __int128 v12 = *a3;
    __int128 v14 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_10079AF18(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      __int128 v12 = v17;
      __int128 v14 = v17 + 4000;
    }

    uint64_t v18 = *a1 + 4000;
    unint64_t v19 = a2;
  }

  sub_10079AF18(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10079AF18@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 5);
      v11 -= 160 * v12;
      a4 -= 160 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 160 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4000);
    }

    if ((char *)(*v6 + 4000LL) == a4)
    {
      __int128 v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10079AFF8(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4000LL); ; uint64_t i = v12 + 4000)
    {
      sub_10079B088(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079B088(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10079B088@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4000) >> 5);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5);
      if (v12) {
        double result = memmove(__dst, v7, 160 * v12);
      }
      v7 += 160 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 160 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_10079B170(void *result, double *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *a2 <= *(double *)(a6 + 88))
    {
      a2 += 2;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    int v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 2;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        int v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *v7 <= *(double *)(a6 + 88))
      {
        *(_OWORD *)a2 = *(_OWORD *)v7;
        a2 += 2;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          uint64_t v10 = (double *)result[1];
          ++result;
          a2 = v10;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10079B220(void *a1, char *a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a5[-*(void *)a4] >> 6)
  }
       + 2 * (a4 - a2)
       + 0x3333333333333333LL * ((uint64_t)&a3[-*(void *)a2] >> 6);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 >> 4));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[320 * (a1[4] & 0xFLL)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a3[-*(void *)a2] >> 6)
  }
  v22[0].n128_u64[0] = v8 + 8 * (v7 >> 4);
  v22[0].n128_u64[1] = (unint64_t)v10;
  sub_10079B620((uint64_t **)v22, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v22[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10079B620((uint64_t **)v22, v6);
      sub_10079B694( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v22[0].n128_u64[0],  (char *)v22[0].n128_u64[1],  v22);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10079B620((uint64_t **)v22, v6);
      __n128 v13 = v22[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (_BYTE **)(v15 + 8 * (v14 >> 4));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[320 * (v14 & 0xF)];
      }
      v22[0] = v12;
      sub_10079B864(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v22);
      a1[5] -= v6;
      while ((sub_10079B5B4(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v19 = a1[1];
  if (a1[2] == v19) {
    uint64_t v20 = 0LL;
  }
  else {
    uint64_t v20 = *(void *)(v19 + 8LL * (a1[4] >> 4)) + 320 * (a1[4] & 0xFLL);
  }
  v22[0].n128_u64[0] = v19 + 8LL * (a1[4] >> 4);
  v22[0].n128_u64[1] = v20;
  sub_10079B620((uint64_t **)v22, v11);
  return v22[0].n128_u64[0];
}

void *sub_10079B448(void *a1, double *__dst, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = __dst;
  if (__dst != a4)
  {
    while (*(double *)&a5 - *v8 <= *(double *)(a6 + 88))
    {
      v8 += 40;
      if ((double *)((char *)v8 - *a1) == (double *)5120)
      {
        unint64_t v11 = (double *)a1[1];
        ++a1;
        uint64_t v8 = v11;
      }

      if (v8 == a4) {
        return a1;
      }
    }
  }

  if (v8 != a4)
  {
    __n128 v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 40;
      if ((double *)((char *)v12 - *v13) == (double *)5120)
      {
        unint64_t v14 = (double *)v13[1];
        ++v13;
        __n128 v12 = v14;
      }

      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *v12 <= *(double *)(a6 + 88))
      {
        memcpy(v8, v12, 0x140uLL);
        v8 += 40;
        if ((double *)((char *)v8 - *a1) == (double *)5120)
        {
          uint64_t v15 = (double *)a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }

  return a1;
}

uint64_t sub_10079B558(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x10) {
    a2 = 1;
  }
  if (v2 < 0x20) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 16LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10079B5B4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 2 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x10) {
    a2 = 1;
  }
  if (v5 < 0x20) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

uint64_t **sub_10079B620(uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = a2 - 0x3333333333333333LL * (((uint64_t)result[1] - **result) >> 6);
    if (v3 < 1)
    {
      unint64_t v7 = 15 - v3;
      uint64_t v8 = &v2[-(v7 >> 4)];
      *double result = v8;
      uint64_t v5 = *v8;
      unsigned int v6 = ~(_DWORD)v7 & 0xF;
    }

    else
    {
      uint64_t v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8LL));
      *double result = v4;
      uint64_t v5 = *v4;
      unsigned int v6 = v3 & 0xF;
    }

    result[1] = (uint64_t *)(v5 + 320LL * v6);
  }

  return result;
}

__n128 sub_10079B694@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v17 = a2;
    __int128 v16 = a4;
    uint64_t i = a5;
    unint64_t v14 = a6;
  }

  else
  {
    __n128 v12 = a3 - 1;
    sub_10079B77C(*a3, a4, a5, a6, &v19);
    unint64_t v14 = (char *)v20.n128_u64[1];
    for (uint64_t i = (void *)v20.n128_u64[0]; v12 != a1; uint64_t i = (void *)v20.n128_u64[0])
    {
      uint64_t v15 = *v12--;
      sub_10079B77C(v15, v15 + 5120, i, v14, &v19);
      unint64_t v14 = (char *)v20.n128_u64[1];
    }

    __int128 v16 = *a1 + 5120;
    uint64_t v17 = a2;
  }

  sub_10079B77C(v17, v16, i, v14, &v19);
  __n128 result = v20;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10079B77C@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unsigned int v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 6);
      v11 -= 320 * v12;
      a4 -= 320 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 320 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 5120);
    }

    if ((char *)(*v6 + 5120LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10079B864(_BYTE **a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    sub_10079B91C(a2, v8, *a1 + 5120, v7, &v13);
    uint64_t v8 = (char *)*((void *)&v14 + 1);
    unint64_t v7 = (void **)v14;
    *(void *)a5 = v14;
    for (*(void *)(a5 + _Block_object_dispose(va, 8) = v8; v10 != a3; *(void *)(a5 + _Block_object_dispose(va, 8) = v8)
    {
      unint64_t v11 = *v10++;
      sub_10079B91C(v11, v8, v11 + 5120, v7, &v13);
      uint64_t v8 = (char *)*((void *)&v14 + 1);
      unint64_t v7 = (void **)v14;
      *(void *)a5 = v14;
    }

    a2 = *a3;
  }

  sub_10079B91C(a2, v8, a4, v7, &v13);
  double result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  return result;
}

void *sub_10079B91C@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  unsigned int v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    unsigned int v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 5120) >> 6);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6);
      if (v12) {
        double result = memmove(__dst, v7, 320 * v12);
      }
      v7 += 320 * v12;
      if (v7 == v9) {
        break;
      }
      __int128 v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 320 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_10079BA14(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 21 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x15));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[192 * (v7 % 0x15)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 21 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x15);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10079BE58(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10079BE58(v24, v6);
      sub_10079BF14( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10079BE58(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (_BYTE **)(v15 + 8 * (v14 / 0x15));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[192 * (v14 % 0x15)];
      }
      v24[0] = v12;
      sub_10079C0C0(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10079BDE4(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x15));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 192 * (v19 % 0x15);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10079BE58(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_10079BCAC(void *result, double *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *a2 <= *(double *)(a6 + 88))
    {
      a2 += 24;
      if ((double *)((char *)a2 - *result) == (double *)4032)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 24;
      if ((double *)((char *)v7 - *v8) == (double *)4032)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *v7 <= *(double *)(a6 + 88))
      {
        __int128 v10 = *(_OWORD *)v7;
        __int128 v11 = *((_OWORD *)v7 + 1);
        __int128 v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        __int128 v13 = *((_OWORD *)v7 + 4);
        __int128 v14 = *((_OWORD *)v7 + 5);
        __int128 v15 = *((_OWORD *)v7 + 7);
        *((_OWORD *)a2 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 4) = v13;
        *((_OWORD *)a2 + 5) = v14;
        __int128 v16 = *((_OWORD *)v7 + 8);
        __int128 v17 = *((_OWORD *)v7 + 9);
        __int128 v18 = *((_OWORD *)v7 + 11);
        *((_OWORD *)a2 + 10) = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 11) = v18;
        *((_OWORD *)a2 + _Block_object_dispose(va, 8) = v16;
        *((_OWORD *)a2 + 9) = v17;
        a2 += 24;
        if ((double *)((char *)a2 - *result) == (double *)4032)
        {
          unint64_t v19 = (double *)result[1];
          ++result;
          a2 = v19;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10079BD88(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x15) {
    a2 = 1;
  }
  if (v2 < 0x2A) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 21LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10079BDE4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 21 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x15) {
    a2 = 1;
  }
  if (v5 < 0x2A) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void *sub_10079BE58(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555LL * ((uint64_t)(result[1] - *(void *)*result) >> 6);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 20 - v3;
      uint64_t v6 = &v2[-(v5 / 0x15)];
      *double result = v6;
      unint64_t v4 = *v6 + 192 * (21 * (v5 / 0x15) - v5) + 3840;
    }

    else
    {
      *double result = &v2[v3 / 0x15];
      unint64_t v4 = v2[v3 / 0x15] + 192 * (v3 % 0x15);
    }

    result[1] = v4;
  }

  return result;
}

__n128 sub_10079BF14@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    __int128 v18 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __int128 v13 = a3 - 1;
    __int128 v12 = *a3;
    __int128 v14 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_10079BFE0(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      __int128 v17 = *v13--;
      __int128 v12 = v17;
      __int128 v14 = v17 + 4032;
    }

    __int128 v18 = *a1 + 4032;
    unint64_t v19 = a2;
  }

  sub_10079BFE0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10079BFE0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 6);
      v11 -= 192 * v12;
      a4 -= 192 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 192 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }

    if ((char *)(*v6 + 4032LL) == a4)
    {
      __int128 v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10079C0C0(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4032LL); ; uint64_t i = v12 + 4032)
    {
      sub_10079C150(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079C150(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10079C150@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4032) >> 6);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6);
      if (v12) {
        double result = memmove(__dst, v7, 192 * v12);
      }
      v7 += 192 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 192 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_10079C238(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2) - 0x71C71C71C71C71C7LL * ((a5 - *a4) >> 3) + 0x71C71C71C71C71C7LL * ((a3 - *a2) >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *v9 + 72 * (v7 % 0x38);
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 56 * (a2 - v9) - 0x71C71C71C71C71C7LL * ((a3 - *a2) >> 3) + 0x71C71C71C71C71C7LL * ((v10 - *v9) >> 3);
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = v10;
  sub_100368144(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100368144(v24, v6);
      sub_10079C5AC( v9,  v10,  (uint64_t *)v12.n128_u64[0],  v12.n128_i64[1],  (uint64_t *)v24[0].n128_u64[0],  v24[0].n128_i64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_100368144(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (uint64_t *)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = *v16 + 72 * (v14 % 0x38);
      }
      v24[0] = v12;
      sub_10079C754((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1003681F8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100368144(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_10079C4E0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 += 72LL;
      if (a2 - *result == 4032)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 72LL;
      if (v7 - *v8 == 4032)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        *(_OWORD *)a2 = *(_OWORD *)v7;
        __int128 v10 = *(_OWORD *)(v7 + 16);
        __int128 v11 = *(_OWORD *)(v7 + 32);
        __int128 v12 = *(_OWORD *)(v7 + 48);
        *(void *)(a2 + 64) = *(void *)(v7 + 64);
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v12;
        *(_OWORD *)(a2 + 16) = v10;
        a2 += 72LL;
        if (a2 - *result == 4032)
        {
          uint64_t v13 = result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }

  return result;
}

__n128 sub_10079C5AC@<Q0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10079C678(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4032;
    }

    uint64_t v18 = *a1 + 4032;
    uint64_t v19 = a2;
  }

  sub_10079C678(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_10079C678(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }

  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a4;
    uint64_t v7 = a2;
    while (1)
    {
      int64_t v8 = 0x8E38E38E38E38E39LL * ((v6 - v5) >> 3);
      if (v8)
      {
        uint64_t v9 = -72 * v8;
        uint64_t v10 = v7 - 72;
        do
        {
          a4 = v6 - 72;
          *(_OWORD *)(v6 - 72) = *(_OWORD *)v10;
          __int128 v11 = *(_OWORD *)(v10 + 16);
          __int128 v12 = *(_OWORD *)(v10 + 32);
          __int128 v13 = *(_OWORD *)(v10 + 48);
          *(void *)(v6 - _Block_object_dispose(va, 8) = *(void *)(v10 + 64);
          *(_OWORD *)(v6 - 24) = v13;
          *(_OWORD *)(v6 - 40) = v12;
          *(_OWORD *)(v6 - 56) = v11;
          v10 -= 72LL;
          v6 -= 72LL;
          v9 += 72LL;
        }

        while (v9);
      }

      else
      {
        a4 = v6;
      }

      v7 -= 72 * v8;
      if (v7 == a1) {
        break;
      }
      uint64_t v14 = *--a3;
      uint64_t v5 = v14;
      uint64_t v6 = v14 + 4032;
    }

    if (*a3 + 4032 == a4)
    {
      uint64_t v15 = a3[1];
      ++a3;
      a4 = v15;
    }
  }

  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_10079C754(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4032; ; uint64_t i = v12 + 4032)
    {
      sub_10079C7E4(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079C7E4(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10079C7E4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }

  else
  {
    uint64_t v5 = *a3;
    while (1)
    {
      int64_t v6 = 0x8E38E38E38E38E39LL * ((v5 - a4 + 4032) >> 3);
      int64_t v7 = 0x8E38E38E38E38E39LL * ((a2 - a1) >> 3);
      if (v7 >= v6) {
        int64_t v7 = v6;
      }
      if (v7)
      {
        uint64_t v8 = a1 + 72 * v7;
        uint64_t v9 = 72 * v7;
        do
        {
          *(_OWORD *)a4 = *(_OWORD *)a1;
          __int128 v10 = *(_OWORD *)(a1 + 16);
          __int128 v11 = *(_OWORD *)(a1 + 32);
          __int128 v12 = *(_OWORD *)(a1 + 48);
          *(void *)(a4 + 64) = *(void *)(a1 + 64);
          *(_OWORD *)(a4 + 32) = v11;
          *(_OWORD *)(a4 + 4_Block_object_dispose(va, 8) = v12;
          *(_OWORD *)(a4 + 16) = v10;
          a1 += 72LL;
          a4 += 72LL;
          v9 -= 72LL;
        }

        while (v9);
        a1 = v8;
      }

      if (a1 == a2) {
        break;
      }
      uint64_t v13 = a3[1];
      ++a3;
      uint64_t v5 = v13;
      a4 = v13;
    }

    if (*a3 + 4032 == a4)
    {
      uint64_t v14 = a3[1];
      ++a3;
      a4 = v14;
    }
  }

  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

BOOL sub_10079C8A8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    if (a1 + 96 != a2) {
      sub_1002DD704( (uint64_t *)(a2 + 8),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3));
    }
  }

  return v2 != -1.0;
}

void *sub_10079C914(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(void *)a2) >> 5);
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = (char *)(v7 + 8LL * (a1[4] >> 7));
  if (a1[2] == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 32 * (a1[4] & 0x7FLL);
  }
  uint64_t v38 = (uint64_t *)(v7 + 8LL * (a1[4] >> 7));
  uint64_t v39 = v9;
  if (v9 == a3) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(void *)v8) >> 5);
  }
  __int128 v11 = sub_10079CCD8((uint64_t)&v38, v10);
  v37.n128_u64[0] = (unint64_t)v11;
  v37.n128_u64[1] = v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      uint64_t v21 = v38;
      uint64_t v22 = v39;
      int v23 = sub_10079CCD8((uint64_t)&v37, v6);
      sub_10079CDA8(v21, v22, v19, v20, v23, v24, &v40);
      uint64_t v25 = v41;
      uint64_t v26 = v39;
      while (v26 != v25)
      {
        v40.n128_u64[0] = v26 + 8;
        sub_100023498((void ***)&v40);
        uint64_t v26 = v39 + 32;
        uint64_t v39 = v26;
        if (v26 - *v38 == 4096)
        {
          uint64_t v26 = v38[1];
          ++v38;
          uint64_t v39 = v26;
        }
      }

      uint64_t v27 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v27;
    }

    else
    {
      uint64_t v13 = sub_10079CCD8((uint64_t)&v37, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      uint64_t v17 = (uint64_t *)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = *v17 + 32 * (v15 & 0x7F);
      }
      __n128 v40 = v37;
      sub_10079CFF8(v13, v14, v17, v18, (uint64_t)&v40);
      unint64_t v28 = v40.n128_u64[1];
      uint64_t v29 = a1[1];
      if (a1[2] == v29)
      {
        uint64_t v31 = 0LL;
      }

      else
      {
        unint64_t v30 = a1[5] + a1[4];
        uint64_t v31 = *(void *)(v29 + ((v30 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v30 & 0x7F);
      }

      if (v31 != v40.n128_u64[1])
      {
        __int16 v32 = (void *)v40.n128_u64[0];
        do
        {
          v40.n128_u64[0] = v28 + 8;
          sub_100023498((void ***)&v40);
          v28 += 32LL;
          if (v28 - *v32 == 4096)
          {
            unint64_t v33 = v32[1];
            ++v32;
            unint64_t v28 = v33;
          }
        }

        while (v28 != v31);
      }

      a1[5] -= v6;
      while ((sub_10079CD3C(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v34 = a1[1];
  if (a1[2] == v34) {
    uint64_t v35 = 0LL;
  }
  else {
    uint64_t v35 = *(void *)(v34 + 8LL * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  }
  v40.n128_u64[0] = v34 + 8LL * (a1[4] >> 7);
  v40.n128_u64[1] = v35;
  return sub_10079CCD8((uint64_t)&v40, v10);
}

void *sub_10079CBC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 32LL;
      if (v8 - *a1 == 4096)
      {
        uint64_t v11 = a1[1];
        ++a1;
        uint64_t v8 = v11;
      }

      if (v8 == a4) {
        return a1;
      }
    }
  }

  if (v8 != a4)
  {
    uint64_t v12 = v8;
    uint64_t v13 = a1;
    while (1)
    {
      v12 += 32LL;
      if (v12 - *v13 == 4096)
      {
        uint64_t v14 = v13[1];
        ++v13;
        uint64_t v12 = v14;
      }

      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(void *)uint64_t v8 = *(void *)v12;
        sub_1002DD898((uint64_t *)(v8 + 8));
        *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = *(_OWORD *)(v12 + 8);
        *(void *)(v8 + 24) = *(void *)(v12 + 24);
        *(void *)(v12 + _Block_object_dispose(va, 8) = 0LL;
        *(void *)(v12 + 16) = 0LL;
        *(void *)(v12 + 24) = 0LL;
        v8 += 32LL;
        if (v8 - *a1 == 4096)
        {
          uint64_t v15 = a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }

  return a1;
}

void *sub_10079CCD8(uint64_t a1, uint64_t a2)
{
  double result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 5);
    if (v4 < 1) {
      result -= (unint64_t)(127 - v4) >> 7;
    }
    else {
      result += (unint64_t)v4 >> 7;
    }
  }

  return result;
}

uint64_t sub_10079CD3C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 16 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80) {
    a2 = 1;
  }
  if (v5 < 0x100) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_10079CDA8@<Q0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10079CE74(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }

    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }

  sub_10079CE74(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_10079CE74@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = a4 - *a3;
    if ((a2 - a1) >> 5 >= v10 >> 5) {
      uint64_t v11 = v10 >> 5;
    }
    else {
      uint64_t v11 = (a2 - a1) >> 5;
    }
    uint64_t v12 = a2 - 32 * v11;
    uint64_t result = sub_10079CF6C((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        uint64_t v15 = *--v6;
        uint64_t v16 = v15 + 4096;
        uint64_t v17 = (v12 - a1) >> 5;
        if (v17 >= 128) {
          uint64_t v17 = 128LL;
        }
        uint64_t v18 = v12 - 32 * v17;
        uint64_t result = sub_10079CF6C((uint64_t)&v20, v18, v12, v16);
        uint64_t v12 = v18;
      }

      while (v18 != a1);
    }

    uint64_t v5 = v14;
    if (*v6 + 4096LL == v14)
    {
      uint64_t v19 = v6[1];
      ++v6;
      uint64_t v5 = v19;
    }
  }

  *a5 = v9;
  a5[1] = (uint64_t)v6;
  a5[2] = v5;
  return result;
}

uint64_t sub_10079CF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)(a4 + v7 - 32) = *(void *)(a3 + v7 - 32);
      sub_1002DD898((uint64_t *)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - _Block_object_dispose(va, 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0LL;
      *(void *)(v8 - 16) = 0LL;
      *(void *)(v8 - _Block_object_dispose(va, 8) = 0LL;
      v7 -= 32LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

double sub_10079CFF8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a5;
  uint64_t v8 = *(void **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      sub_10079D088(a2, i, v7, v8, &v14);
      uint64_t v8 = (void *)*((void *)&v15 + 1);
      uint64_t v7 = (void *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079D088(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10079D088(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3 - (void)a4 + 4096LL;
    if ((a2 - a1) >> 5 >= v9 >> 5) {
      uint64_t v10 = v9 >> 5;
    }
    else {
      uint64_t v10 = (a2 - a1) >> 5;
    }
    uint64_t v11 = sub_10079D170((uint64_t)&v18, a1, a1 + 32 * v10, a4);
    if (v11 != v8)
    {
      uint64_t v13 = v11;
      do
      {
        __int128 v15 = (void *)v6[1];
        ++v6;
        uint64_t v14 = v15;
        uint64_t v16 = (v8 - v13) >> 5;
        if (v16 >= 128) {
          uint64_t v16 = 128LL;
        }
        uint64_t v13 = sub_10079D170((uint64_t)&v18, v13, v13 + 32 * v16, v14);
      }

      while (v13 != v8);
    }

    uint64_t v5 = v12;
    if ((void *)(*v6 + 4096LL) == v12)
    {
      uint64_t v17 = (void *)v6[1];
      ++v6;
      uint64_t v5 = v17;
    }
  }

  *a5 = v8;
  a5[1] = (uint64_t)v6;
  a5[2] = (uint64_t)v5;
}

uint64_t sub_10079D170(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *a4 = *(void *)v5;
    sub_1002DD898(a4 + 1);
    *(_OWORD *)(a4 + 1) = *(_OWORD *)(v5 + 8);
    a4[3] = *(void *)(v5 + 24);
    *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    a4 += 4;
    v5 += 32LL;
  }

  while (v5 != v6);
  return v6;
}

BOOL sub_10079D1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (__int128 *)(a1 + 96);
  double v3 = *(double *)(a1 + 96);
  if (v3 != -1.0)
  {
    __int128 v4 = *v2;
    *(void *)(a2 + 16) = *(void *)(a1 + 112);
    *(_OWORD *)a2 = v4;
    if (v2 != (__int128 *)a2) {
      sub_10079D690( (char *)(a2 + 24),  *(char **)(a1 + 120),  *(void *)(a1 + 128),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2));
    }
  }

  return v3 != -1.0;
}

unint64_t sub_10079D264(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 85 * (a4 - a2) - 0x5555555555555555LL * ((a5 - *a4) >> 4) + 0x5555555555555555LL * ((a3 - *a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = v8 + 8 * (v7 / 0x55);
  if (a1[2] == v8) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *(void *)v9 + 48 * (v7 % 0x55);
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 85 * (((uint64_t)a2 - v9) >> 3)
  }
        - 0x5555555555555555LL * ((a3 - *a2) >> 4)
        + 0x5555555555555555LL * ((uint64_t)(v10 - *(void *)v9) >> 4);
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x55);
  v34.n128_u64[1] = v10;
  sub_10079D8F8(&v34, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10079D8F8(&v34, v6);
      sub_10079D994( (char **)v9,  (char *)v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  (char *)v34.n128_u64[0],  v34.n128_i64[1],  &v34);
      uint64_t v18 = v35;
      while (v10 != v18)
      {
        uint64_t v19 = *(void **)(v10 + 24);
        if (v19)
        {
          *(void *)(v10 + 32) = v19;
          operator delete(v19);
        }

        v10 += 48LL;
        if (v10 - *(void *)v9 == 4080)
        {
          unint64_t v20 = *(void *)(v9 + 8);
          v9 += 8LL;
          unint64_t v10 = v20;
        }
      }

      uint64_t v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
    }

    else
    {
      sub_10079D8F8(&v34, v6);
      __n128 v13 = v34;
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (__int128 **)(v15 + 8 * (v14 / 0x55));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[3 * (v14 % 0x55)];
      }
      __n128 v34 = v12;
      sub_10079DBAC((__int128 **)v13.n128_u64[0], (__int128 *)v13.n128_u64[1], v16, v17, (uint64_t)&v34);
      unint64_t v22 = v34.n128_u64[1];
      uint64_t v23 = a1[1];
      if (a1[2] == v23)
      {
        unint64_t v25 = 0LL;
      }

      else
      {
        unint64_t v24 = a1[5] + a1[4];
        unint64_t v25 = *(void *)(v23 + 8 * (v24 / 0x55)) + 48 * (v24 % 0x55);
      }

      if (v25 != v34.n128_u64[1])
      {
        uint64_t v26 = (void *)v34.n128_u64[0];
        do
        {
          uint64_t v27 = *(void **)(v22 + 24);
          if (v27)
          {
            *(void *)(v22 + 32) = v27;
            operator delete(v27);
          }

          v22 += 48LL;
          if (v22 - *v26 == 4080)
          {
            unint64_t v28 = v26[1];
            ++v26;
            unint64_t v22 = v28;
          }
        }

        while (v22 != v25);
      }

      a1[5] -= v6;
      while ((sub_10079D884(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v29 = a1[4];
  uint64_t v30 = a1[1];
  uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x55));
  if (a1[2] == v30) {
    unint64_t v32 = 0LL;
  }
  else {
    unint64_t v32 = *v31 + 48 * (v29 % 0x55);
  }
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_10079D8F8(&v34, v11);
  return v34.n128_u64[0];
}

void *sub_10079D584(void *a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 3;
      if ((__int128 *)((char *)v8 - *a1) == (__int128 *)4080)
      {
        unint64_t v11 = (__int128 *)a1[1];
        ++a1;
        uint64_t v8 = v11;
      }

      if (v8 == a4) {
        return a1;
      }
    }
  }

  if (v8 != a4)
  {
    __n128 v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 3;
      if ((__int128 *)((char *)v12 - *v13) == (__int128 *)4080)
      {
        unint64_t v14 = (__int128 *)v13[1];
        ++v13;
        __n128 v12 = v14;
      }

      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        __int128 v15 = *v12;
        *((void *)v8 + 2) = *((void *)v12 + 2);
        __int128 *v8 = v15;
        sub_100007664((uint64_t)v8 + 24, (__n128 *)((char *)v12 + 24));
        v8 += 3;
        if ((__int128 *)((char *)v8 - *a1) == (__int128 *)4080)
        {
          uint64_t v16 = (__int128 *)a1[1];
          ++a1;
          uint64_t v8 = v16;
        }
      }
    }
  }

  return a1;
}

char *sub_10079D690(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      _OWORD v7[2] = 0LL;
    }

    if (a4 > 0x924924924924924LL) {
      sub_100007008();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x492492492492492LL) {
      unint64_t v12 = 0x924924924924924LL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_10079D7E8(v7, v12);
    unint64_t v14 = (char *)v7[1];
    __n128 v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  __n128 v13 = (void **)(result + 8);
  __int128 v15 = (_BYTE *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7LL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }

char *sub_10079D7E8(void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925LL) {
    sub_100007008();
  }
  double result = (char *)sub_10079D83C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void *sub_10079D83C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925LL) {
    sub_1000070D4();
  }
  return operator new(28 * a2);
}

uint64_t sub_10079D884(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55) {
    a2 = 1;
  }
  if (v5 < 0xAA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void *sub_10079D8F8(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555LL * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 84 - v3;
      uint64_t v6 = &v2[-(v5 / 0x55)];
      *double result = v6;
      unint64_t v4 = *v6 + 48 * (85 * (v5 / 0x55) - v5) + 4032;
    }

    else
    {
      *double result = &v2[v3 / 0x55];
      unint64_t v4 = v2[v3 / 0x55] + 48 * (v3 % 0x55);
    }

    result[1] = v4;
  }

  return result;
}

__n128 sub_10079D994@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    unint64_t v12 = *a3;
    unint64_t v14 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10079DA60(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      __int128 v15 = (char *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      size_t v17 = *v13--;
      unint64_t v12 = v17;
      unint64_t v14 = v17 + 4080;
    }

    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }

  sub_10079DA60(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

char *sub_10079DA60@<X0>(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  unint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *(void *)a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v9) >> 4);
      unint64_t v12 = &i[-48 * v11];
      __n128 result = sub_10079DB30(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *((void *)v5 - 1);
      v5 -= 8;
      uint64_t v9 = v15;
      a4 = v15 + 4080;
    }

    a4 = v14;
    if (*(void *)v5 + 4080LL == v14)
    {
      uint64_t v16 = *((void *)v5 + 1);
      v5 += 8;
      a4 = v16;
    }
  }

  *a5 = v8;
  a5[1] = v5;
  a5[2] = (char *)a4;
  return result;
}

char *sub_10079DB30(char *a1, char *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a3 - 24;
    uint64_t v6 = (__n128 *)(a2 - 24);
    do
    {
      int v7 = &v6[-2].n128_i8[8];
      __int128 v8 = *(__int128 *)((char *)&v6[-2] + 8);
      *(void *)(v5 - _Block_object_dispose(va, 8) = v6[-1].n128_u64[1];
      *(_OWORD *)(v5 - 24) = v8;
      sub_100007664(v5, v6);
      v5 -= 48LL;
      v6 -= 3;
    }

    while (v7 != a1);
  }

  return a2;
}

double sub_10079DBAC(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, uint64_t a5)
{
  int v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    unint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 255; ; uint64_t i = v12 + 255)
    {
      sub_10079DC3C(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      int v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      unint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079DC3C(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

__int128 *sub_10079DC3C@<X0>( __int128 *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, __int128 **a5@<X8>)
{
  uint64_t v5 = a3;
  double result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      int64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - a4 + 4080) >> 4);
      double result = sub_10079DD04(result, &result[3 * v10], a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }

    a4 = v11;
    if (*(v5 - 1) + 4080 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }

  *a5 = v8;
  a5[1] = (__int128 *)v5;
  a5[2] = (__int128 *)a4;
  return result;
}

__int128 *sub_10079DD04(__int128 *a1, __int128 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    __int128 v6 = *v4;
    *(void *)(a3 + 16) = *((void *)v4 + 2);
    *(_OWORD *)a3 = v6;
    sub_100007664(a3 + 24, (__n128 *)((char *)v4 + 24));
    a3 += 48LL;
    v4 += 3;
  }

  while (v4 != v5);
  return v5;
}

void *sub_10079DD74(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(void *)a2) >> 5);
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = (char *)(v7 + 8LL * (a1[4] >> 7));
  if (a1[2] == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 32 * (a1[4] & 0x7FLL);
  }
  unint64_t v33 = (char **)(v7 + 8LL * (a1[4] >> 7));
  __n128 v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(void *)v8) >> 5);
  }
  uint64_t v11 = (char **)sub_10079CCD8((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v12;
      uint64_t v21 = v33;
      __n128 v22 = v34;
      uint64_t v23 = sub_10079CCD8((uint64_t)&v32, v6);
      sub_10079E058(v21, v22, v19, v20, v23, v24, &v35);
      unint64_t v25 = v34;
      if (v34 != v36)
      {
        uint64_t v26 = v33;
        do
        {
          v25 += 32;
          __n128 v34 = v25;
          if (v25 - *v26 == 4096)
          {
            uint64_t v27 = v26[1];
            ++v26;
            unint64_t v25 = v27;
            unint64_t v33 = v26;
            __n128 v34 = v27;
          }
        }

        while (v25 != v36);
      }

      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
    }

    else
    {
      __n128 v13 = (char **)sub_10079CCD8((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      size_t v17 = (char **)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = &(*v17)[32 * (v15 & 0x7F)];
      }
      __n128 v35 = v32;
      sub_10079E1DC(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_10079CD3C(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8LL * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  }
  v35.n128_u64[0] = v29 + 8LL * (a1[4] >> 7);
  v35.n128_u64[1] = v30;
  return sub_10079CCD8((uint64_t)&v35, v10);
}

void *sub_10079DFA8(void *result, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 += 2;
      if ((_OWORD *)((char *)a2 - *result) == (_OWORD *)4096)
      {
        uint64_t v6 = (_OWORD *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 2;
      if ((_OWORD *)((char *)v7 - *v8) == (_OWORD *)4096)
      {
        uint64_t v9 = (_OWORD *)v8[1];
        ++v8;
        uint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        __int128 v10 = v7[1];
        *a2 = *v7;
        a2[1] = v10;
        a2 += 2;
        if ((_OWORD *)((char *)a2 - *result) == (_OWORD *)4096)
        {
          uint64_t v11 = (_OWORD *)result[1];
          ++result;
          a2 = v11;
        }
      }
    }
  }

  return result;
}

__n128 sub_10079E058@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10079E124(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      unint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      size_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }

    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }

  sub_10079E124(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10079E124@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5) {
        uint64_t v13 = v12 >> 5;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 5;
      }
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 32 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10079E1DC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    uint64_t v8 = a1 + 1;
    sub_10079E2A8(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_10079E2A8(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_10079E2A8(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10079E2A8@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 5 >= v11 >> 5 ? v11 >> 5 : (a3 - v9) >> 5;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 32 * v12);
      }
      v9 += 32 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 32 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

BOOL sub_10079E364(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(a1 + 104);
    if (a1 + 96 != a2) {
      sub_1005F6B84( (char *)(a2 + 16),  *(char **)(a1 + 112),  *(void *)(a1 + 120),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3));
    }
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 136);
  }

  return v2 != -1.0;
}

unint64_t sub_10079E3E4(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 73 * (a4 - a2) + 0x6DB6DB6DB6DB6DB7LL * ((a5 - *a4) >> 3) - 0x6DB6DB6DB6DB6DB7LL * ((a3 - *a2) >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *v9 + 56 * (v7 % 0x49);
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 73 * (a2 - v9) + 0x6DB6DB6DB6DB6DB7LL * ((a3 - *a2) >> 3) - 0x6DB6DB6DB6DB6DB7LL * ((v10 - *v9) >> 3);
  }
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v34.n128_u64[1] = v10;
  sub_1005A9130(&v34, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005A9130(&v34, v6);
      sub_10079E92C(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], v34.n128_u64[0], v34.n128_i64[1], &v34);
      uint64_t v18 = v35;
      while (v10 != v18)
      {
        uint64_t v19 = *(void **)(v10 + 16);
        if (v19)
        {
          *(void *)(v10 + 24) = v19;
          operator delete(v19);
        }

        v10 += 56LL;
        if (v10 - *v9 == 4088)
        {
          uint64_t v20 = v9[1];
          ++v9;
          uint64_t v10 = v20;
        }
      }

      uint64_t v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
    }

    else
    {
      sub_1005A9130(&v34, v6);
      __n128 v13 = v34;
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (uint64_t *)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = *v16 + 56 * (v14 % 0x49);
      }
      __n128 v34 = v12;
      sub_10079EB58((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)&v34);
      unint64_t v22 = v34.n128_u64[1];
      uint64_t v23 = a1[1];
      if (a1[2] == v23)
      {
        unint64_t v25 = 0LL;
      }

      else
      {
        unint64_t v24 = a1[5] + a1[4];
        unint64_t v25 = *(void *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49);
      }

      if (v25 != v34.n128_u64[1])
      {
        uint64_t v26 = (void *)v34.n128_u64[0];
        do
        {
          uint64_t v27 = *(void **)(v22 + 16);
          if (v27)
          {
            *(void *)(v22 + 24) = v27;
            operator delete(v27);
          }

          v22 += 56LL;
          if (v22 - *v26 == 4088)
          {
            unint64_t v28 = v26[1];
            ++v26;
            unint64_t v22 = v28;
          }
        }

        while (v22 != v25);
      }

      a1[5] -= v6;
      while ((sub_10079E8B8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v29 = a1[4];
  uint64_t v30 = a1[1];
  uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x49));
  if (a1[2] == v30) {
    unint64_t v32 = 0LL;
  }
  else {
    unint64_t v32 = *v31 + 56 * (v29 % 0x49);
  }
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_1005A9130(&v34, v11);
  return v34.n128_u64[0];
}

void *sub_10079E74C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 56LL;
      if (v8 - *a1 == 4088)
      {
        uint64_t v11 = a1[1];
        ++a1;
        uint64_t v8 = v11;
      }

      if (v8 == a4) {
        return a1;
      }
    }
  }

  if (v8 != a4)
  {
    uint64_t v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 56LL;
      if (v12 - *v13 == 4088)
      {
        uint64_t v14 = v13[1];
        ++v13;
        uint64_t v12 = v14;
      }

      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(void *)uint64_t v8 = *(void *)v12;
        *(void *)(v8 + _Block_object_dispose(va, 8) = *(void *)(v12 + 8);
        sub_100007664(v8 + 16, (__n128 *)(v12 + 16));
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v12 + 40);
        v8 += 56LL;
        if (v8 - *a1 == 4088)
        {
          uint64_t v15 = a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }

  return a1;
}

uint64_t sub_10079E85C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x49) {
    a2 = 1;
  }
  if (v2 < 0x92) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 73LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10079E8B8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 73 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x49) {
    a2 = 1;
  }
  if (v5 < 0x92) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_10079E92C@<Q0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10079E9F8(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4088;
    }

    uint64_t v18 = *a1 + 4088;
    uint64_t v19 = a2;
  }

  sub_10079E9F8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_10079E9F8@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((a4 - v9) >> 3);
      if (0x6DB6DB6DB6DB6DB7LL * ((i - a1) >> 3) < v11) {
        uint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((i - a1) >> 3);
      }
      uint64_t v12 = i - 56 * v11;
      uint64_t result = sub_10079EAD0(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *--v5;
      uint64_t v9 = v15;
      a4 = v15 + 4088;
    }

    a4 = v14;
    if (*v5 + 4088LL == v14)
    {
      uint64_t v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }

  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10079EAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)(v7 - 56) = *(void *)(a2 + v6 - 56);
      *(void *)(v7 - 4_Block_object_dispose(va, 8) = *(void *)(a2 + v6 - 48);
      sub_100007664(a3 + v6 - 40, (__n128 *)(a2 + v6 - 40));
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a2 + v6 - 16);
      v6 -= 56LL;
    }

    while (a2 + v6 != a1);
  }

  return a2;
}

double sub_10079EB58(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4088; ; uint64_t i = v12 + 4088)
    {
      sub_10079EBE8(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10079EBE8(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_10079EBE8@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((v9 - a4 + 4088) >> 3);
      if (0x6DB6DB6DB6DB6DB7LL * ((v8 - result) >> 3) < v10) {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((v8 - result) >> 3);
      }
      uint64_t result = sub_10079ECB8(result, result + 56 * v10, a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }

    a4 = v11;
    if (*(v5 - 1) + 4088 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }

  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10079ECB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    *(void *)(a3 + _Block_object_dispose(va, 8) = *(void *)(v4 + 8);
    sub_100007664(a3 + 16, (__n128 *)(v4 + 16));
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v4 + 40);
    a3 += 56LL;
    v4 += 56LL;
  }

  while (v4 != v5);
  return v5;
}

void *sub_10079ED30(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079EDC8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079EF30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079EF3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184EC30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079EF80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184EC30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079EFAC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079EFC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079F004()
{
}

void *sub_10079F010(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079F0A8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079F210(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079F21C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184ECF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079F260(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184ECF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079F28C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079F2A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079F2E4()
{
}

void *sub_10079F2F0(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079F388(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079F4F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079F4FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184EDB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079F540(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184EDB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079F56C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079F588(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079F5C4()
{
}

void *sub_10079F5D0(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079F668(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079F7D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079F7DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184EE70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079F820(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184EE70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079F84C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079F868(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079F8A4()
{
}

void *sub_10079F8B0(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079F948(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079FAB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079FABC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184EF30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079FB00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184EF30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079FB2C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079FB48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079FB84()
{
}

void *sub_10079FB90(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079FC28(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10079FD90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10079FD9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184EFE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10079FDE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184EFE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10079FE0C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10079FE28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10079FE64()
{
}

void *sub_10079FE70(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10079FF08(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1007A0070(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_1007A007C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184F0A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1007A00C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184F0A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1007A00EC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_1007A0108(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007A0144()
{
}

void *sub_1007A0150(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_1007A01E8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1007A0350(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_1007A035C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184F160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1007A03A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184F160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1007A03CC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_1007A03E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007A0424()
{
}

void *sub_1007A0430(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_1007A04C8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1007A0630(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_1007A063C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184F220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1007A0680(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184F220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1007A06AC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_1007A06C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007A0704()
{
}

void *sub_1007A0710(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_1007A07A8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1007A0910(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_1007A091C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10184F2E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1007A0960(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10184F2E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1007A098C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_1007A09A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007A09E4()
{
}

id sub_1007A09F0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  __int128 v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  __int128 v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  __int128 v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  __int128 v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  __int128 v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return [a4 onOdometerNotification:v4 data:v12];
}

id sub_1007A0A4C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  int v8 = *(_DWORD *)(a3 + 32);
  return [a4 onMotionStateObserverNotification:v4 data:v7];
}

id sub_1007A0AB4(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  return [a4 onMotionStateMediatorNotification:v5 data:__dst];
}

id sub_1007A0B30(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v4 data:&v6];
}

void sub_1007A0C10(id a1)
{
  qword_1019989A0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLBarometerCalibrationSilo");
}

void sub_1007A0CC4(id a1)
{
  byte_1019989B0 = +[CLBarometerCalibration isNotificationSupported:]( &OBJC_CLASS___CLBarometerCalibration,  "isNotificationSupported:",  0LL);
  if ((byte_1019989B0 & 1) != 0) {
    unsigned __int8 v1 = 1;
  }
  else {
    unsigned __int8 v1 = +[CLBarometerCalibration isNotificationSupported:]( &OBJC_CLASS___CLBarometerCalibration,  "isNotificationSupported:",  1LL);
  }
  byte_1019989B0 = v1;
}

void sub_1007A26E0(_Unwind_Exception *a1)
{
  for (uint64_t i = 432LL; i != -48; i -= 48LL)
    sub_10049108C((void *)(v1 + i));
  _Unwind_Resume(a1);
}

id sub_1007A270C(uint64_t a1)
{
  uint64_t v2 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768LL;
  _OWORD v6[2] = sub_1007A7448;
  void v6[3] = &unk_10184F488;
  do
  {
    sub_1004908E0((uint64_t)&v6[v2 + 4], (void *)(a1 + v2 * 8));
    v2 += 6LL;
  }

  while (v2 != 60);
  id v3 = [v6 copy];
  for (uint64_t i = 58LL; i != -2; i -= 6LL)
    sub_10049108C(&v6[i]);
  return v3;
}

void sub_1007A27BC(_Unwind_Exception *a1)
{
  for (uint64_t i = 464LL; i != -16; i -= 48LL)
    sub_10049108C((void *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_1007A33D8(_Unwind_Exception *a1)
{
}

void sub_1007A3978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1007A3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_1007A468C(uint64_t a1)
{
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10184F448);
  }
  uint64_t v2 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "destructing Altimeter context", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184F448);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "destructing Altimeter context",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration setupAltimeterReleaseTimer]_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(a1 + 32) releaseAndClearManager:*(void *)(a1 + 32) + 528];
}

void sub_1007A4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_1007A4D6C(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  v21[0] = @"deviceWet";
  v22[0] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 672LL));
  v21[1] = @"inVisit";
  v22[1] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 728LL));
  v21[2] = @"isCompanionConnected";
  __n128 v22[2] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 704LL));
  v21[3] = @"uncertainty_binned";
  double v3 = *(double *)(a1 + 40);
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v16 = 0LL;
  sub_10001B72C(&v16, (const void *)qword_101998958, qword_101998960, (qword_101998960 - qword_101998958) >> 2);
  float v4 = v3;
  sub_1001B4760((uint64_t)&v16, v19, v4);
  if (v20 >= 0) {
    uint64_t v5 = v19;
  }
  else {
    uint64_t v5 = (void **)v19[0];
  }
  v22[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
  v21[4] = @"timeElapsedSinceLastClientRegistered_binned";
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(*(void *)(a1 + 32) + 736LL);
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v11 = 0LL;
  sub_10001B72C(&v11, (const void *)qword_101998970, qword_101998978, (qword_101998978 - qword_101998970) >> 2);
  float v8 = v6 - v7;
  sub_1001B4760((uint64_t)&v11, __p, v8 / 60.0);
  if (v15 >= 0) {
    __int128 v9 = __p;
  }
  else {
    __int128 v9 = (void **)__p[0];
  }
  v22[4] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9);
  objc_msgSend( v2,  "setDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  5));
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }

  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }

  if ([*(id *)(a1 + 32) isIHAAuthorized]) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  objc_msgSend(*(id *)(a1 + 32), "isInOutdoorWorkout")),  @"inOutdoorWorkout");
  }
  return v2;
}

void sub_1007A4FFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A51A8(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___RTStoredVisitFetchOptions);
  id v3 = objc_msgSend( v2,  "initWithAscending:confidence:dateInterval:limit:",  1,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh),  0,  0);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 720);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_1007A5260;
  void v6[3] = &unk_10181A2B0;
  v6[4] = v4;
  [v5 fetchStoredVisitsWithOptions:v3 withReply:v6];
}

id sub_1007A5260(uint64_t a1, void *a2, uint64_t a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184F448);
    }
    double v7 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "error fetching visits", (uint8_t *)&buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10184F448);
      }
      LOWORD(v62[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  16LL,  "error fetching visits",  v62,  2);
      __n128 v37 = (char *)v36;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke",  "%s\n",  v36);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 728LL) = 0;
    double v8 = 0.0;
  }

  else
  {
    id v9 = [a2 lastObject];
    BOOL v10 = [v9 type] == (id)1 || objc_msgSend(v9, "type") == (id)2;
    *(_BYTE *)(*(void *)(a1 + 32) + 728LL) = v10;
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184F448);
    }
    uint64_t v11 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 728LL);
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      uint64_t v14 = v13;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      uint64_t v16 = v15;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      uint64_t v18 = v17;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v12;
      __int16 v51 = 2048;
      uint64_t v52 = v14;
      __int16 v53 = 2048;
      uint64_t v54 = v16;
      __int16 v55 = 2048;
      uint64_t v56 = v18;
      __int16 v57 = 2048;
      uint64_t v58 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "retrieved visits,inVisit,%d,lat,%f,lon,%f,arrivalTime,%f,departureTime,%f",  (uint8_t *)&buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10184F448);
      }
      uint64_t v38 = qword_1019346A8;
      int v39 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 728LL);
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      uint64_t v41 = v40;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      uint64_t v43 = v42;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      uint64_t v45 = v44;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      v62[0] = 67110144;
      v62[1] = v39;
      __int16 v63 = 2048;
      uint64_t v64 = v41;
      __int16 v65 = 2048;
      uint64_t v66 = v43;
      __int16 v67 = 2048;
      uint64_t v68 = v45;
      __int16 v69 = 2048;
      uint64_t v70 = v46;
      LODWORD(v49) = 48;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v38,  0LL,  "retrieved visits,inVisit,%d,lat,%f,lon,%f,arrivalTime,%f,departureTime,%f",  v62,  v49);
      uint64_t v48 = (char *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke",  "%s\n",  v47);
    }

    objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
    double v8 = v20;
    objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
    double v22 = v21;
    if (*(_BYTE *)(*(void *)(a1 + 32) + 729LL))
    {
      sub_101125260(&buf);
      sub_10113B0B8(&buf);
      v61 |= 1u;
      double v59 = Current;
      uint64_t v23 = v60;
      objc_msgSend(objc_msgSend(v9, "location"), "longitude");
      *(_WORD *)(v23 + 92) |= 0x40u;
      *(void *)(v23 + 56) = v24;
      uint64_t v25 = v60;
      objc_msgSend(objc_msgSend(v9, "location"), "latitude");
      *(_WORD *)(v25 + 92) |= 0x20u;
      *(void *)(v25 + 4_Block_object_dispose(va, 8) = v26;
      uint64_t v27 = v60;
      objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate");
      *(_WORD *)(v27 + 92) |= 4u;
      *(void *)(v27 + 24) = v28;
      uint64_t v29 = v60;
      objc_msgSend(objc_msgSend(v9, "entry"), "timeIntervalSinceReferenceDate");
      *(_WORD *)(v29 + 92) |= 1u;
      *(void *)(v29 + _Block_object_dispose(va, 8) = v30;
      uint64_t v31 = v60;
      *(_WORD *)(v60 + 92) |= 0x10u;
      *(void *)(v31 + 40) = 0xBFF0000000000000LL;
      uint64_t v32 = v60;
      *(_WORD *)(v60 + 92) |= 0x200u;
      *(_DWORD *)(v32 + 80) = 2;
      uint64_t v33 = v60;
      unsigned int v34 = [v9 type];
      *(_WORD *)(v33 + 92) |= 0x400u;
      *(_DWORD *)(v33 + 84) = v34;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10184F468);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)&buf);
      }
      sub_101127D00((PB::Base *)&buf);
    }

    double Current = v22;
  }

  [*(id *)(*(void *)(a1 + 32) + 624) updateVisitState:*(unsigned __int8 *)(*(void *)(a1 + 32) + 728) arrivalTime:v8 departureTime:Current];
  return [*(id *)(a1 + 32) sendInVisit:*(unsigned __int8 *)(*(void *)(a1 + 32) + 728)];
}

void sub_1007A5830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_1007A5A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1007A5AEC;
  v10[3] = &unk_10184F428;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v10[4] = a3;
  void v10[5] = v7;
  v10[8] = *(void *)(a1 + 48);
  v10[6] = a2;
  v10[7] = v8;
  return [v6 async:v10];
}

void sub_1007A5AEC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184F448);
    }
    id v2 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      *(_DWORD *)uint64_t buf = 138412290;
      double v147 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received error when fetching LOI from visit, LOI id %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10184F448);
      }
      uint64_t v4 = qword_1019346A8;
      double v5 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      int v134 = 138412290;
      double v135 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  0LL,  "Received error when fetching LOI from visit, LOI id %@",  &v134,  12);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    __p = 0LL;
    unint64_t v132 = 0LL;
    uint64_t v133 = 0LL;
    objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
    if (v9 > 0.0)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      uint64_t v11 = v10;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      double v13 = v12;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      double v15 = v13 * v14;
      uint64_t v16 = (v132 - (_BYTE *)__p) >> 4;
      unint64_t v17 = v16 + 1;
      uint64_t v18 = v133 - (_BYTE *)__p;
      if ((v133 - (_BYTE *)__p) >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        double v20 = (char *)sub_100037038((uint64_t)&v133, v19);
      }
      else {
        double v20 = 0LL;
      }
      double v21 = (double *)&v20[16 * v16];
      *(void *)double v21 = v11;
      v21[1] = v15;
      __p = v21;
      uint64_t v133 = &v20[16 * v19];
      unint64_t v132 = v21 + 2;
    }

    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184F448);
    }
    double v22 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      double v23 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      double v25 = v24;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      uint64_t v26 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 138413314;
      double v147 = v23;
      __int16 v148 = 2048;
      double v149 = v25;
      __int16 v150 = 2048;
      uint64_t v151 = v27;
      __int16 v152 = 2048;
      uint64_t v153 = v26;
      __int16 v154 = 2048;
      double v155 = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "LOI id,%@,elevation,%f,uncertainty,%f,visitEntryTime,%f,currentTimestamp,%f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10184F448);
      }
      uint64_t v96 = qword_1019346A8;
      double v97 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
      double v99 = v98;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
      uint64_t v100 = *(void *)(a1 + 64);
      int v134 = 138413314;
      double v135 = v97;
      __int16 v136 = 2048;
      double v137 = v99;
      __int16 v138 = 2048;
      uint64_t v139 = v101;
      __int16 v140 = 2048;
      uint64_t v141 = v100;
      __int16 v142 = 2048;
      double v143 = Current;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v96,  0LL,  "LOI id,%@,elevation,%f,uncertainty,%f,visitEntryTime,%f,currentTimestamp,%f",  &v134,  52);
      __int128 v103 = (uint8_t *)v102;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke",  "%s\n",  v102);
      if (v103 != buf) {
        free(v103);
      }
    }

    [*(id *)(*(void *)(a1 + 56) + 624) updateLoiInfo:&__p];
    uint64_t v29 = *(void *)(a1 + 56);
    if (*(_BYTE *)(v29 + 730))
    {
      uint64_t v128 = 0LL;
      int v129 = 0LL;
      unint64_t v130 = 0LL;
      __int128 v125 = 0LL;
      __int128 v126 = 0LL;
      unint64_t v127 = 0LL;
      if (v132 == __p)
      {
        __int16 v65 = sub_1000071BC((uint64_t)&v130, 1uLL);
        *__int16 v65 = 0LL;
        uint64_t v128 = v65;
        unint64_t v130 = (unint64_t)&v65[v66];
        int v129 = v65 + 1;
        __int16 v67 = v126;
        if ((unint64_t)v126 >= v127)
        {
          __int16 v69 = v125;
          uint64_t v70 = ((char *)v126 - (_BYTE *)v125) >> 3;
          unint64_t v71 = v70 + 1;
          uint64_t v72 = v127 - (void)v125;
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            double v74 = (char *)sub_1000071BC((uint64_t)&v127, v73);
            __int16 v69 = v125;
            __int16 v67 = v126;
          }

          else
          {
            double v74 = 0LL;
          }

          __int16 v75 = &v74[8 * v70];
          double v76 = &v74[8 * v73];
          *(void *)__int16 v75 = 0xBFF0000000000000LL;
          uint64_t v68 = v75 + 8;
          while (v67 != v69)
          {
            uint64_t v77 = *--v67;
            *((void *)v75 - 1) = v77;
            v75 -= 8;
          }

          __int128 v125 = v75;
          __int128 v126 = v68;
          unint64_t v127 = (unint64_t)v76;
          if (v69) {
            operator delete(v69);
          }
        }

        else
        {
          *__int128 v126 = 0xBFF0000000000000LL;
          uint64_t v68 = v67 + 1;
        }

        __int128 v126 = v68;
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10184F448);
        }
        double v78 = (os_log_s *)qword_1019346A8;
        if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "received zero loi visit so write negative uncertainty to msl.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10184F448);
          }
          LOWORD(v134) = 0;
          LODWORD(v117) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "received zero loi visit so write negative uncertainty to msl.",  &v134,  *(void *)&v117);
          __int128 v105 = (uint8_t *)v104;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke",  "%s\n",  v104);
          if (v105 != buf) {
            free(v105);
          }
        }
      }

      else
      {
        uint64_t v30 = 0LL;
        else {
          uint64_t v31 = (v132 - (_BYTE *)__p) >> 4;
        }
        *(void *)&__int128 v28 = 134218496LL;
        __int128 v118 = v28;
        do
        {
          uint64_t v32 = (char *)__p + 16 * v30;
          uint64_t v33 = v129;
          if ((unint64_t)v129 >= v130)
          {
            uint64_t v35 = v128;
            uint64_t v36 = ((char *)v129 - (_BYTE *)v128) >> 3;
            unint64_t v37 = v36 + 1;
            uint64_t v38 = v130 - (void)v128;
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              uint64_t v40 = (char *)sub_1000071BC((uint64_t)&v130, v39);
              uint64_t v35 = v128;
              uint64_t v33 = v129;
            }

            else
            {
              uint64_t v40 = 0LL;
            }

            uint64_t v41 = &v40[8 * v36];
            *(void *)uint64_t v41 = *v32;
            unsigned int v34 = v41 + 8;
            while (v33 != v35)
            {
              uint64_t v42 = *--v33;
              *((void *)v41 - 1) = v42;
              v41 -= 8;
            }

            uint64_t v128 = v41;
            int v129 = v34;
            unint64_t v130 = (unint64_t)&v40[8 * v39];
            if (v35) {
              operator delete(v35);
            }
          }

          else
          {
            *int v129 = *v32;
            unsigned int v34 = v33 + 1;
          }

          int v129 = v34;
          double v43 = sqrt(*((double *)__p + 2 * v30 + 1));
          uint64_t v44 = v126;
          if ((unint64_t)v126 >= v127)
          {
            uint64_t v46 = v125;
            uint64_t v47 = ((char *)v126 - (_BYTE *)v125) >> 3;
            unint64_t v48 = v47 + 1;
            uint64_t v49 = v127 - (void)v125;
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              __int16 v51 = (char *)sub_1000071BC((uint64_t)&v127, v50);
              uint64_t v46 = v125;
              uint64_t v44 = v126;
            }

            else
            {
              __int16 v51 = 0LL;
            }

            uint64_t v52 = (double *)&v51[8 * v47];
            *uint64_t v52 = v43;
            uint64_t v45 = v52 + 1;
            while (v44 != v46)
            {
              uint64_t v53 = *--v44;
              *((void *)v52-- - 1) = v53;
            }

            __int128 v125 = v52;
            __int128 v126 = v45;
            unint64_t v127 = (unint64_t)&v51[8 * v50];
            if (v46) {
              operator delete(v46);
            }
          }

          else
          {
            *(double *)__int128 v126 = v43;
            uint64_t v45 = v44 + 1;
          }

          __int128 v126 = v45;
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10184F448);
          }
          uint64_t v54 = (os_log_s *)qword_1019346A8;
          if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v55 = (double *)((char *)__p + 16 * v30);
            double v56 = *v55;
            double v57 = v55[1];
            uint64_t v58 = *(void *)(a1 + 64);
            *(_DWORD *)uint64_t buf = v118;
            double v147 = v56;
            __int16 v148 = 2048;
            double v149 = sqrt(v57);
            __int16 v150 = 2048;
            uint64_t v151 = v58;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "writing loi visit to msl,altitude,%f,verticalUncertainty,%f,timestamp,%f",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346A0 != -1) {
              dispatch_once(&qword_1019346A0, &stru_10184F448);
            }
            double v59 = (double *)((char *)__p + 16 * v30);
            double v60 = *v59;
            double v61 = v59[1];
            uint64_t v62 = *(void *)(a1 + 64);
            int v134 = v118;
            double v135 = v60;
            __int16 v136 = 2048;
            double v137 = sqrt(v61);
            __int16 v138 = 2048;
            uint64_t v139 = v62;
            LODWORD(v117) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "writing loi visit to msl,altitude,%f,verticalUncertainty,%f,timestamp,%f",  COERCE_DOUBLE(&v134),  v117,  *(double *)&v118);
            uint64_t v64 = (uint8_t *)v63;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke",  "%s\n",  v63);
            if (v64 != buf) {
              free(v64);
            }
          }

          ++v30;
        }

        while (v30 != v31);
      }

      sub_101125260(buf);
      sub_10113A344(buf);
      CFAbsoluteTime v79 = CFAbsoluteTimeGetCurrent();
      v160 |= 1u;
      CFAbsoluteTime v158 = v79;
      uint64_t v80 = v159;
      if ((void **)(v159 + 8) != &v128)
      {
        sub_1000F9040((char *)(v159 + 8), (char *)v128, (uint64_t)v129, ((char *)v129 - (_BYTE *)v128) >> 3);
        uint64_t v80 = v159;
      }

      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10184F468);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
      }
      sub_101127D00((PB::Base *)buf);
      if (v125)
      {
        __int128 v126 = v125;
        operator delete(v125);
      }

      if (v128)
      {
        int v129 = v128;
        operator delete(v128);
      }

      uint64_t v29 = *(void *)(a1 + 56);
    }

    [*(id *)(v29 + 640) timestamp];
    if (v81 != 1.79769313e308)
    {
      [*(id *)(*(void *)(a1 + 56) + 640) timestamp];
      if (vabdd_f64(v82, Current) < 10.0)
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
        if (v83 > 0.0)
        {
          [*(id *)(*(void *)(a1 + 56) + 640) altitude];
          double v85 = v84;
          objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
          __int128 v119 = _NSConcreteStackBlock;
          uint64_t v120 = 3221225472LL;
          uint64_t v121 = sub_1007A6A40;
          unint64_t v122 = &unk_10184F400;
          double v124 = v85 - v86;
          __int128 v123 = *(_OWORD *)(a1 + 48);
          AnalyticsSendEventLazy(@"com.apple.Motion.Altimeter.VisitEntry", &v119);
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10184F448);
          }
          uint64_t v87 = (os_log_s *)qword_1019346A8;
          if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
          {
            double v88 = *(double *)(a1 + 64);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
            uint64_t v90 = v89;
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
            uint64_t v92 = v91;
            [*(id *)(*(void *)(a1 + 56) + 640) altitude];
            double v94 = v93;
            [*(id *)(*(void *)(a1 + 56) + 640) accuracy];
            *(_DWORD *)uint64_t buf = 134219264;
            double v147 = v88;
            __int16 v148 = 2048;
            double v149 = Current;
            __int16 v150 = 2048;
            uint64_t v151 = v90;
            __int16 v152 = 2048;
            uint64_t v153 = v92;
            __int16 v154 = 2048;
            double v155 = v94;
            __int16 v156 = 2048;
            uint64_t v157 = v95;
            _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "LOI visit entry,timestamp,%f,currentTimestamp,%f,loiAltitude,%f,loiVerticalUncertainty,%f,altimeter,%f,alt imeterUncertainty,%f",  buf,  0x3Eu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346A0 != -1) {
              dispatch_once(&qword_1019346A0, &stru_10184F448);
            }
            uint64_t v106 = qword_1019346A8;
            double v107 = *(double *)(a1 + 64);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "altitude");
            uint64_t v109 = v108;
            objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "location"), "verticalUncertainty");
            uint64_t v111 = v110;
            [*(id *)(*(void *)(a1 + 56) + 640) altitude];
            double v113 = v112;
            [*(id *)(*(void *)(a1 + 56) + 640) accuracy];
            int v134 = 134219264;
            double v135 = v107;
            __int16 v136 = 2048;
            double v137 = Current;
            __int16 v138 = 2048;
            uint64_t v139 = v109;
            __int16 v140 = 2048;
            uint64_t v141 = v111;
            __int16 v142 = 2048;
            double v143 = v113;
            __int16 v144 = 2048;
            uint64_t v145 = v114;
            LODWORD(v117) = 62;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v106,  0LL,  "LOI visit entry,timestamp,%f,currentTimestamp,%f,loiAltitude,%f,loiVerticalUncertainty,%f,altimeter,%f,alt imeterUncertainty,%f",  COERCE_DOUBLE(&v134),  v117,  *(double *)&v118,  *((double *)&v118 + 1),  *(double *)&v119,  *(double *)&v120);
            uint64_t v116 = (uint8_t *)v115;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke",  "%s\n",  v115);
            if (v116 != buf) {
              free(v116);
            }
          }
        }
      }
    }

    if (__p)
    {
      unint64_t v132 = __p;
      operator delete(__p);
    }
  }

void sub_1007A69A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1007A6A40(uint64_t a1)
{
  v30[0] = @"loiAltitudeError_binned";
  double v2 = *(double *)(a1 + 48);
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  double v25 = 0LL;
  sub_10001B72C(&v25, (const void *)qword_101998988, qword_101998990, (qword_101998990 - qword_101998988) >> 2);
  float v3 = v2;
  sub_1001B4760((uint64_t)&v25, v28, v3);
  if (v29 >= 0) {
    uint64_t v4 = v28;
  }
  else {
    uint64_t v4 = (void **)v28[0];
  }
  v31[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  v30[1] = @"loiAltitudeUncertainty_binned";
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "location"), "verticalUncertainty");
  double v6 = v5;
  double v20 = 0LL;
  double v21 = 0LL;
  uint64_t v22 = 0LL;
  sub_10001B72C(&v20, (const void *)qword_101998958, qword_101998960, (qword_101998960 - qword_101998958) >> 2);
  float v7 = v6;
  sub_1001B4760((uint64_t)&v20, v23, v7);
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  v31[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8);
  v30[2] = @"altitudeUncertainty_binned";
  [*(id *)(*(void *)(a1 + 40) + 640) accuracy];
  double v10 = v9;
  double v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_10001B72C(&v15, (const void *)qword_101998958, qword_101998960, (qword_101998960 - qword_101998958) >> 2);
  float v11 = v10;
  sub_1001B4760((uint64_t)&v15, __p, v11);
  if (v19 >= 0) {
    double v12 = __p;
  }
  else {
    double v12 = (void **)__p[0];
  }
  v31[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12);
  double v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  3LL);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }

  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v20)
  {
    double v21 = v20;
    operator delete(v20);
  }

  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }

  return v13;
}

void sub_1007A6C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A6FC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_1007A71A4(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
}

__n128 sub_1007A71E8(uint64_t a1, __n128 *a2)
{
  float v3 = *(void ***)(a1 + 8);
  if (!v3)
  {
    float v3 = (void **)operator new(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *float v3 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  }

  __n128 result = *a2;
  v3[2] = (void *)a2[1].n128_u64[0];
  *(__n128 *)float v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_1007A7418(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_1007A7448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t result = sub_1004908E0(a2 + v3, (void *)(v4 + v3));
    v3 += 48LL;
  }

  while (v3 != 480);
  return result;
}

void sub_1007A748C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      sub_10049108C((void *)(v4 + v2));
      v2 -= 48LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A74B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = a2 + 32;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t result = sub_1004908E0(v4 + v2, (void *)(v3 + v2));
    v2 += 48LL;
  }

  while (v2 != 480);
  return result;
}

void sub_1007A74F8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_10049108C((void *)(v4 + v2));
      v2 -= 48LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A751C(uint64_t a1)
{
  for (uint64_t i = 464LL; i != -16; i -= 48LL)
    uint64_t result = sub_10049108C((void *)(a1 + i));
  return result;
}

uint64_t sub_1007A7550()
{
  qword_101998960 = 0LL;
  unk_101998968 = 0LL;
  qword_101998958 = 0LL;
  uint64_t v0 = operator new(0x30uLL);
  qword_101998960 = (uint64_t)(v0 + 3);
  unk_101998968 = v0 + 3;
  *uint64_t v0 = xmmword_10132BBA8;
  v0[1] = unk_10132BBB8;
  v0[2] = xmmword_10132BBC8;
  qword_101998958 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998958, (void *)&_mh_execute_header);
  qword_101998978 = 0LL;
  unk_101998980 = 0LL;
  qword_101998970 = 0LL;
  uint64_t v1 = operator new(0x20uLL);
  qword_101998978 = (uint64_t)(v1 + 2);
  unk_101998980 = v1 + 2;
  *uint64_t v1 = xmmword_10132BBD8;
  v1[1] = unk_10132BBE8;
  qword_101998970 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998970, (void *)&_mh_execute_header);
  qword_101998990 = 0LL;
  unk_101998998 = 0LL;
  qword_101998988 = 0LL;
  uint64_t v2 = operator new(0x5CuLL);
  qword_101998990 = (uint64_t)v2 + 92;
  unk_101998998 = (char *)v2 + 92;
  v2[2] = xmmword_10132BC18;
  v2[3] = unk_10132BC28;
  v2[4] = xmmword_10132BC38;
  *(_OWORD *)((char *)v2 + 76) = *(__int128 *)((char *)&xmmword_10132BC38 + 12);
  _OWORD *v2 = xmmword_10132BBF8;
  v2[1] = unk_10132BC08;
  qword_101998988 = (uint64_t)v2;
  return __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998988, (void *)&_mh_execute_header);
}

uint64_t sub_1007A7694(uint64_t a1)
{
  return a1;
}

uint64_t sub_1007A76C4(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v4 = &qword_1019989F0;
  }
  else {
    uint64_t v4 = &qword_1019989C0;
  }
  uint64_t v5 = *v4;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = *((_WORD *)v4 + 4);
  *(void *)a1 = v5;
  double v6 = &xmmword_1019989D0;
  if (a2) {
    double v6 = &xmmword_101998A00;
  }
  float v7 = (char *)&qword_101998A10 + 7;
  if (!a2) {
    float v7 = (char *)&qword_1019989E0 + 7;
  }
  if (*v7 < 0)
  {
    double v9 = (void *)v4[2];
    if (a2) {
      double v10 = &qword_1019989F0;
    }
    else {
      double v10 = &qword_1019989C0;
    }
    sub_1010DD48C((_BYTE *)(a1 + 16), v9, v10[3]);
  }

  else
  {
    __int128 v8 = *v6;
    *(void *)(a1 + 32) = *((void *)v6 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }

  if (a2) {
    float v11 = &qword_1019989F0;
  }
  else {
    float v11 = &qword_1019989C0;
  }
  *(void *)(a1 + 40) = v11[5];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  sub_1007A77BC(a1);
  return a1;
}

void sub_1007A7788(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A77BC(uint64_t a1)
{
  uint64_t v2 = operator new(0x88uLL);
  sub_1003B35F4(v2, a1);
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    uint64_t v2 = *(void **)(a1 + 48);
  }

  if (sub_1003C1048((uint64_t)v2))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v4 = (uint64_t *)(a1 + 48);
    sub_1003B59A0(v5, "MotionAlarm", (const char **)&off_10184F4D8, 0LL, 0);
    sub_1003C0D54( *v4,  "CREATE UNIQUE INDEX IF NOT EXISTS ix_MotionAlarm_bundeId_name ON MotionAlarm(bundleId, name)",  buf);
    uint64_t v6 = *(void *)buf;
    uint64_t v7 = *v4;
    __int128 v8 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    sub_1003BB2BC(v7, v8);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    double v9 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Successfully created database", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  1LL,  "Successfully created database",  v15,  2);
      double v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionAlarmDatabase::prepareDatabase()", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  else
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    double v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Unable to prepare due to invalid database.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to prepare due to invalid database.",  v15,  2);
      double v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionAlarmDatabase::prepareDatabase()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_1007A7B20(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007A7B60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    return sub_1003C1048(v1);
  }
  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_10184F4B8);
  }
  uint64_t v3 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Database is not accessible.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  1LL,  "Database is not accessible.",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMotionAlarmDatabase::isDbAccessible() const", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return 0LL;
}

uint64_t sub_1007A7D1C(uint64_t a1, void *a2)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (!objc_msgSend(objc_msgSend(a2, "bundleId"), "length") || !objc_msgSend(objc_msgSend(a2, "name"), "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    uint64_t v6 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to update alarm because bundleId, executable or name is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to update alarm because bundleId, executable or name is empty.",  v9,  2);
      __int128 v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmDatabase::upsertAlarm(CMMotionAlarm *)", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    return 0LL;
  }

  id v4 = sub_1007A7F74(a1, [a2 bundleId], objc_msgSend(a2, "name"));
  if (!v4) {
    return sub_1007A8560(a1, a2);
  }
  objc_msgSend(a2, "setAlarmId:", objc_msgSend(v4, "alarmId"));
  return sub_1007A8204(a1, a2);
}

id sub_1007A7F74(uint64_t a1, void *a2, void *a3)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (![a2 length] || !objc_msgSend(a3, "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    double v13 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Unable to get alarm because bundleId, executable or name is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to get alarm because bundleId, executable or name is empty.",  v17,  2);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMMotionAlarm *CLMotionAlarmDatabase::getAlarm(NSString *, NSString *)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    return 0LL;
  }

  sub_1003C0D54( *(void *)(a1 + 48),  "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?",  buf);
  uint64_t v6 = *(void *)buf;
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  BOOL v8 = sub_1003BC1F0(v7, 1, (char *)[a2 UTF8String]);
  double v9 = (char *)[a3 UTF8String];
  if (v8 && sub_1003BC1F0(v7, 2, v9) && (double v10 = (sqlite3_stmt *)sub_100019240(v6), sqlite3_step(v10) == 100))
  {
    float v11 = (sqlite3_stmt *)sub_100019240(v6);
    id v12 = sub_1007A8D7C((uint64_t)v11, v11);
  }

  else
  {
    id v12 = 0LL;
  }

  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v12;
}

void sub_1007A81DC(_Unwind_Exception *exception_object)
{
}

BOOL sub_1007A8204(uint64_t a1, void *a2)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (!objc_msgSend(objc_msgSend(a2, "bundleId"), "length") || !objc_msgSend(objc_msgSend(a2, "name"), "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    double v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Unable to update alarm because bundleId or name is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v22[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to update alarm because bundleId or name is empty.",  v22,  2);
      double v21 = (uint8_t *)v20;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmDatabase::updateAlarm(CMMotionAlarm *)", "%s\n", v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    return 0LL;
  }

  sub_1003C0D54( *(void *)(a1 + 48),  "UPDATE MotionAlarm SET state = ?, duration = ?, type = ?, repeats = ? WHERE 1 = 1 AND id = ? AND bundleId = ? AND name = ?",  buf);
  uint64_t v4 = *(void *)buf;
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  BOOL v6 = sub_1003C28BC(v5, 1, (int)[a2 state]);
  int v7 = [a2 duration];
  if (v6)
  {
    BOOL v8 = sub_1003C28BC(v5, 2, v7);
    int v9 = 3;
  }

  else
  {
    BOOL v8 = 0;
    int v9 = 2;
  }

  int v13 = [a2 type];
  if (v8) {
    BOOL v8 = sub_1003C2AF0(v5, v9++, v13);
  }
  int v14 = [a2 repeats];
  if (v8) {
    BOOL v8 = sub_1003C28BC(v5, v9++, v14);
  }
  id v15 = [a2 alarmId];
  if (v8) {
    BOOL v8 = sub_1003C2D24(v5, v9++, (sqlite3_int64)v15);
  }
  uint64_t v16 = (char *)objc_msgSend(objc_msgSend(a2, "bundleId"), "UTF8String");
  if (v8) {
    BOOL v8 = sub_1003BC1F0(v5, v9++, v16);
  }
  uint64_t v17 = (char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  BOOL v11 = 0;
  if (v8 && sub_1003BC1F0(v5, v9, v17))
  {
    uint64_t v18 = *(void *)(a1 + 48);
    char v19 = (sqlite3_stmt *)sub_100019240(v4);
    if (sub_1003BB2BC(v18, v19)) {
      BOOL v11 = 1;
    }
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v11;
}

void sub_1007A8538(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1007A8560(uint64_t a1, void *a2)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (!objc_msgSend(objc_msgSend(a2, "bundleId"), "length") || !objc_msgSend(objc_msgSend(a2, "name"), "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    double v10 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Unable to insert alarm because bundleId or name is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v21[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to insert alarm because bundleId or name is empty.",  v21,  2);
      double v20 = (uint8_t *)v19;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMotionAlarmDatabase::insertAlarm(CMMotionAlarm *)", "%s\n", v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return 0LL;
  }

  sub_1003C0D54( *(void *)(a1 + 48),  "INSERT INTO MotionAlarm (state, duration, type, repeats, bundleId, name) VALUES (?, ?, ?, ?, ?, ?)",  buf);
  uint64_t v4 = *(void *)buf;
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  BOOL v6 = sub_1003C28BC(v5, 1, (int)[a2 state]);
  int v7 = [a2 duration];
  if (v6)
  {
    BOOL v8 = sub_1003C28BC(v5, 2, v7);
    int v9 = 3;
  }

  else
  {
    BOOL v8 = 0;
    int v9 = 2;
  }

  int v13 = [a2 type];
  if (v8) {
    BOOL v8 = sub_1003C2AF0(v5, v9++, v13);
  }
  int v14 = [a2 repeats];
  if (v8) {
    BOOL v8 = sub_1003C28BC(v5, v9++, v14);
  }
  id v15 = (char *)objc_msgSend(objc_msgSend(a2, "bundleId"), "UTF8String");
  if (v8) {
    BOOL v8 = sub_1003BC1F0(v5, v9++, v15);
  }
  uint64_t v16 = (char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  if (v8
    && sub_1003BC1F0(v5, v9, v16)
    && (v17 = *(void *)(a1 + 48), uint64_t v18 = (sqlite3_stmt *)sub_100019240(v4), sub_1003BB2BC(v17, v18)))
  {
    [a2 setAlarmId:sub_1003C1068(*(void *)(a1 + 48))];
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v11;
}

void sub_1007A8884(_Unwind_Exception *exception_object)
{
}

NSMutableArray *sub_1007A88AC(uint64_t a1)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  sub_1003C0D54(*(void *)(a1 + 48), "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm", &v6);
  uint64_t v2 = v6;
  uint64_t v3 = (sqlite3_stmt *)sub_100019240(v6);
  uint64_t v4 = sub_1007A8948(a1, v3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return v4;
}

void sub_1007A8928(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_1007A8948(uint64_t a1, sqlite3_stmt *a2)
{
  for (uint64_t i = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 5LL);
        ;
        -[NSMutableArray addObject:](i, "addObject:", sub_1007A8D7C(v4, a2)))
  {
    uint64_t v4 = sqlite3_step(a2);
    if ((_DWORD)v4 != 100) {
      break;
    }
  }

  if ((_DWORD)v4 != 16 && (_DWORD)v4 != 101)
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    uint64_t v5 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unable to iterate through all rows for getAllAlarms!",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to iterate through all rows for getAllAlarms!",  v9,  2);
      BOOL v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::alarmsFromStatement(sqlite3_stmt *) const",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  return i;
}

NSMutableArray *sub_1007A8B28(uint64_t a1, void *a2)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (![a2 length])
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    BOOL v8 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Unable to get alarms because bundleId or executable is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v12[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to get alarms because bundleId or executable is empty.",  v12,  2);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::getAlarms(NSString *) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    return 0LL;
  }

  sub_1003C0D54( *(void *)(a1 + 48),  "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE bundleId = ?",  buf);
  uint64_t v4 = *(void *)buf;
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003BC1F0(v5, 1, (char *)[a2 UTF8String]))
  {
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v4);
    int v7 = sub_1007A8948(a1, v6);
    if (!v4) {
      return v7;
    }
    goto LABEL_13;
  }

  int v7 = 0LL;
  if (v4) {
LABEL_13:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  return v7;
}

void sub_1007A8D54(_Unwind_Exception *exception_object)
{
}

id sub_1007A8D7C(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = objc_alloc(&OBJC_CLASS___CMMotionAlarm);
  uint64_t v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_column_text(a2, 6));
  uint64_t v5 = sqlite3_column_int(a2, 3);
  uint64_t v6 = sqlite3_column_int(a2, 2);
  BOOL v7 = sqlite3_column_int(a2, 4) != 0;
  sqlite3_int64 v8 = sqlite3_column_int64(a2, 0);
  int v9 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_column_text(a2, 5));
  LODWORD(v11) = sqlite3_column_int(a2, 1);
  return [v3 initWithName:v4 type:v5 duration:v6 repeats:v7 alarmId:v8 bundleId:v9 state:v11];
}

id sub_1007A8E80(uint64_t a1, sqlite3_int64 a2)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  sub_1003C0D54( *(void *)(a1 + 48),  "SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE id = ?",  &v10);
  uint64_t v4 = v10;
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(v10);
  if (sub_1003C2D24(v5, 1, a2))
  {
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v4);
    if (sqlite3_step(v6) == 100)
    {
      BOOL v7 = (sqlite3_stmt *)sub_100019240(v4);
      id v8 = sub_1007A8D7C((uint64_t)v7, v7);
      if (!v4) {
        return v8;
      }
      goto LABEL_8;
    }
  }

  id v8 = 0LL;
  if (v4) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  return v8;
}

void sub_1007A8F34(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007A8F54(uint64_t a1, void *a2, void *a3)
{
  if (!sub_1007A7B60(a1)) {
    return 0LL;
  }
  if (![a2 length] || !objc_msgSend(a3, "length"))
  {
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_10184F4B8);
    }
    int v13 = (os_log_s *)qword_101934618;
    if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Unable to delete alarm because bundleId, executable or name is empty.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934610 != -1) {
        dispatch_once(&qword_101934610, &stru_10184F4B8);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934618,  16LL,  "Unable to delete alarm because bundleId, executable or name is empty.",  v17,  2);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionAlarmDatabase::deleteAlarm(NSString *, NSString *)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    return 0LL;
  }

  sub_1003C0D54(*(void *)(a1 + 48), "DELETE FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?", buf);
  uint64_t v6 = *(void *)buf;
  BOOL v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  BOOL v8 = sub_1003BC1F0(v7, 1, (char *)[a2 UTF8String]);
  int v9 = (char *)[a3 UTF8String];
  BOOL v12 = 0;
  if (v8 && sub_1003BC1F0(v7, 2, v9))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v6);
    if (sub_1003BB2BC(v10, v11)) {
      BOOL v12 = 1;
    }
  }

  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v12;
}

void sub_1007A91B4(_Unwind_Exception *exception_object)
{
}

void sub_1007A91DC(id a1)
{
  qword_101934618 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

uint64_t sub_1007A9208()
{
  qword_1019989C0 = 0x100000003LL;
  word_1019989C8 = 0;
  if (SHIBYTE(v2) < 0)
  {
    sub_1010DD48C(&xmmword_1019989D0, __p[0], (unint64_t)__p[1]);
    qword_1019989E8 = 0LL;
    if (SHIBYTE(v2) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    xmmword_1019989D0 = *(_OWORD *)__p;
    qword_1019989E0 = v2;
    qword_1019989E8 = 0LL;
  }

  __cxa_atexit((void (*)(void *))sub_1007A7694, &qword_1019989C0, (void *)&_mh_execute_header);
  sub_1010DDBC0(__p, "");
  word_1019989F8 = 0;
  qword_1019989F0 = 0LL;
  if (SHIBYTE(v2) < 0)
  {
    sub_1010DD48C(&xmmword_101998A00, __p[0], (unint64_t)__p[1]);
    qword_101998A18 = 0LL;
    if (SHIBYTE(v2) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    xmmword_101998A00 = *(_OWORD *)__p;
    qword_101998A10 = v2;
    qword_101998A18 = 0LL;
  }

  return __cxa_atexit((void (*)(void *))sub_1007A7694, &qword_1019989F0, (void *)&_mh_execute_header);
}

void sub_1007A9340( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A9360(uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = *a2;
  float v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 32) = &off_10184D7B0;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_10184F668;
  *(_DWORD *)(a1 + 56) = 256;
  *(_BYTE *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = &off_10184D7B0;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = &off_10184D7B0;
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = &off_10184D7B0;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 136) = &off_10184D7B0;
  *(void *)(a1 + 144) = 0LL;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = &off_10184F748;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &off_10184D7B0;
  *(void *)(a1 + 200) = 0LL;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(void *)(a1 + 22_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 244) = 0;
  *(void *)(a1 + 256) = &off_10184D7B0;
  *(void *)(a1 + 264) = 0LL;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = &off_10184D7B0;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0LL;
  *(_DWORD *)(a1 + 320) = 3;
  *(_WORD *)(a1 + 332) = 0;
  *(void *)(a1 + 324) = 0LL;
  *(void *)(a1 + 336) = &off_10184D780;
  *(void *)(a1 + 344) = &off_10184D7B0;
  *(void *)(a1 + 352) = 1065353216LL;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = &off_10184D7B0;
  *(void *)(a1 + 376) = 0x3F80000000000000LL;
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = &off_10184D7B0;
  *(void *)(a1 + 400) = 0LL;
  *(_DWORD *)(a1 + 40_Block_object_dispose(va, 8) = 1065353216;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(void *)(a1 + 440) = 0x3FF0000000000000LL;
  *(void *)(a1 + 44_Block_object_dispose(va, 8) = &off_10184D7B0;
  *(void *)(a1 + 456) = 0LL;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &off_10184D7B0;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = &off_10184D7B0;
  *(void *)(a1 + 520) = 0LL;
  *(_DWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  double v4 = v3;
  unint64_t v5 = vcvtad_u64_f64(v4 * 0.125);
  *(void *)(a1 + 536) = off_10184DB68;
  *(void *)(a1 + 544) = v5;
  *(void *)(a1 + 552) = off_10184DB98;
  *(void *)(a1 + 560) = v5;
  *(void *)(a1 + 616) = 0LL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 624) = off_10184DB98;
  *(void *)(a1 + 632) = v5;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 696) = off_10184DB98;
  *(void *)(a1 + 704) = v5;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 72_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 760) = 0LL;
  unint64_t v6 = vcvtad_u64_f64(v4 * 0.625);
  *(void *)(a1 + 76_Block_object_dispose(va, 8) = off_10184DB68;
  *(void *)(a1 + 776) = v6;
  *(void *)(a1 + 784) = off_10184DB98;
  *(void *)(a1 + 792) = v6;
  *(void *)(a1 + 84_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 856) = off_10184DB98;
  *(void *)(a1 + 864) = v6;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 920) = 0LL;
  *(void *)(a1 + 92_Block_object_dispose(va, 8) = off_10184DB98;
  *(void *)(a1 + 936) = v6;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  unint64_t v7 = vcvtad_u64_f64(*(float *)(a1 + 16) * 0.75);
  *(void *)(a1 + 100_Block_object_dispose(va, 8) = off_10184DB98;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1072) = 0LL;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1080) = off_10184DB98;
  *(void *)(a1 + 108_Block_object_dispose(va, 8) = v7;
  *(void *)(a1 + 1144) = 0LL;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 112_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(void *)(a1 + 1152) = off_10184DB98;
  *(void *)(a1 + 1160) = v7;
  *(_OWORD *)(a1 + 1212) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 116_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 1232) = off_10184DB68;
  *(void *)(a1 + 1240) = 2LL;
  *(void *)(a1 + 124_Block_object_dispose(va, 8) = off_10184DB98;
  *(void *)(a1 + 1256) = 2LL;
  *(void *)(a1 + 1312) = 0LL;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1320) = off_10184DB98;
  *(void *)(a1 + 132_Block_object_dispose(va, 8) = 2LL;
  *(void *)(a1 + 1384) = 0LL;
  *(_OWORD *)(a1 + 136_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1392) = off_10184DB98;
  *(void *)(a1 + 1400) = 2LL;
  *(_OWORD *)(a1 + 1452) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 140_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  BOOL v8 = (char *)operator new[](0xB4uLL);
  *(void *)(a1 + 1560) = v8;
  *(void *)(a1 + 1552) = v8;
  *(void *)(a1 + 1544) = v8 + 36;
  *(void *)(a1 + 156_Block_object_dispose(va, 8) = operator new[](0x144uLL);
  *(void *)(a1 + 1576) = operator new[](0x6CuLL);
  *(void *)(a1 + 1584) = operator new[](0x144uLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  return a1;
}

void sub_1007A96D4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_10074DF98(v4);
  v1[144] = v6;
  sub_10046E180(v1 + 147);
  v1[135] = v6;
  sub_10046E180(v1 + 138);
  v1[126] = v6;
  sub_10046E180(v1 + 129);
  sub_10074DF98(v3);
  sub_10074DF98(v2);
  _Unwind_Resume(a1);
}

void *sub_1007A9724(void *a1)
{
  *a1 = off_10184F668;
  uint64_t v2 = (void *)a1[195];
  if (v2) {
    operator delete[](v2);
  }
  float v3 = (void *)a1[196];
  if (v3) {
    operator delete[](v3);
  }
  double v4 = (void *)a1[197];
  if (v4) {
    operator delete[](v4);
  }
  uint64_t v5 = (void *)a1[198];
  if (v5) {
    operator delete[](v5);
  }
  sub_10074DF98(a1 + 154);
  a1[144] = off_10184DB98;
  sub_10046E180(a1 + 147);
  a1[135] = off_10184DB98;
  sub_10046E180(a1 + 138);
  a1[126] = off_10184DB98;
  sub_10046E180(a1 + 129);
  sub_10074DF98(a1 + 96);
  sub_10074DF98(a1 + 67);
  return a1;
}

void sub_1007A97CC(void *a1)
{
  uint64_t v1 = sub_1007A9724(a1);
  operator delete(v1);
}

float sub_1007A97E0(uint64_t a1)
{
  if (!*(void *)(a1 + 1000))
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    uint64_t v2 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "RotationStability buffer not set.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "RotationStability buffer not set.",  v6,  2);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAttitudeDependentKFCalibrator::init()", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = 0;
  if (!*(_BYTE *)(a1 + 333))
  {
    *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    *(_WORD *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 220) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 160_Block_object_dispose(va, 8) = 0;
    sub_10074DFF8((void *)(a1 + 1080));
    sub_10074DFF8((void *)(a1 + 1008));
    sub_10074DFF8((void *)(a1 + 1152));
    sub_10074DFF8((void *)(a1 + 1248));
    sub_10074DFF8((void *)(a1 + 1320));
    sub_10074DFF8((void *)(a1 + 1392));
    *(_DWORD *)(a1 + 1224) = 0;
    *(void *)(a1 + 264) = 0LL;
    *(_DWORD *)(a1 + 272) = 0;
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0LL;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0;
  }

  *(_BYTE *)(a1 + 244) = 0;
  sub_10074DFF8((void *)(a1 + 552));
  sub_10074DFF8((void *)(a1 + 624));
  sub_10074DFF8((void *)(a1 + 696));
  sub_10074DFF8((void *)(a1 + 784));
  sub_10074DFF8((void *)(a1 + 856));
  sub_10074DFF8((void *)(a1 + 928));
  float result = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 152) = result;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 59) = 0;
  return result;
}

void sub_1007A9A54(void *a1)
{
}

float sub_1007A9A84(float64x2_t *a1, float *a2, int *a3, float *a4, double *a5)
{
  if (a5 && *a3 > 0)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    uint64_t v10 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      double v11 = a2[2];
      double v12 = a2[3];
      double v13 = a2[4];
      int v14 = *a3;
      *(_DWORD *)uint64_t buf = 134218752;
      double v46 = v11;
      __int16 v47 = 2048;
      double v48 = v12;
      __int16 v49 = 2048;
      double v50 = v13;
      __int16 v51 = 1024;
      int v52 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "setting bias (%.3f/%.3f/%.3f) level (%d)",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      double v30 = a2[2];
      double v31 = a2[3];
      double v32 = a2[4];
      int v33 = *a3;
      int v37 = 134218752;
      double v38 = v30;
      __int16 v39 = 2048;
      double v40 = v31;
      __int16 v41 = 2048;
      double v42 = v32;
      __int16 v43 = 1024;
      int v44 = v33;
      LODWORD(v36) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "setting bias (%.3f/%.3f/%.3f) level (%d)",  COERCE_DOUBLE(&v37),  v36);
      uint64_t v35 = (uint8_t *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibr ationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
    }

    BYTE5(a1[20].f64[1]) = 0;
    BYTE1(a1[3].f64[1]) = 0;
    LOBYTE(a1[1].f64[1]) = 1;
    BYTE4(a1[15].f64[1]) = 0;
    sub_1007A9F9C((float32x2_t *)&a1[21], a5);
    if (&a1[4] == (float64x2_t *)a2)
    {
      float v16 = *((float *)&a1[4].f64[1] + 1);
      float v17 = *(float *)a1[5].f64;
      float v15 = *(float *)&a1[4].f64[1];
    }

    else
    {
      float v15 = a2[2];
      *(float *)&a1[4].f64[1] = v15;
      float v16 = a2[3];
      *((float *)&a1[4].f64[1] + 1) = v16;
      float v17 = a2[4];
      *(float *)a1[5].f64 = v17;
    }

    int v22 = *a3;
    HIDWORD(a1[1].f64[0]) = *a3;
    a1[6].f64[0] = 0.0;
    LODWORD(a1[6].f64[1]) = 0;
    float v23 = a4[4] - v17;
    float v24 = a4[2] - v15;
    float v25 = a4[3] - v16;
    *(float32x2_t *)&a1[7].f64[1] = vmla_n_f32( vmla_n_f32( vmul_n_f32(*(float32x2_t *)&a1[23].f64[1], v25),  *(float32x2_t *)&a1[22].f64[0],  v24),  *(float32x2_t *)&a1[25].f64[0],  v23);
    *(float *)a1[8].f64 = v26;
    *(void *)&a1[10].f64[1] = 0x100000001LL;
    LODWORD(a1[11].f64[0]) = 1;
    HIDWORD(a1[1].f64[1]) = v22;
    *(float *)&a1[32].f64[1] = v15;
    *((float *)&a1[32].f64[1] + 1) = v16;
    *(float *)a1[33].f64 = v17;
    HIDWORD(a1[20].f64[0]) = 0;
    bzero(&a1[92], 0x48uLL);
    float v27 = *(float *)a1[5].f64;
    a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
    a1[93].f64[0] = v27;
    a1[95] = vcvtq_f64_f32(*(float32x2_t *)&a1[7].f64[1]);
    a1[96].f64[0] = *(float *)a1[8].f64;
    bzero(*(void **)&a1[98].f64[0], 0x144uLL);
    float v28 = 9.0 / (float)*a3;
    float64_t v29 = a1[98].f64[0];
    **(float **)&float64_t v29 = v28;
    *(float *)(*(void *)&v29 + 4sub_100783178((uint64_t)va, 0LL) = v28;
    *(float *)(*(void *)&v29 + 8sub_100783178((uint64_t)va, 0LL) = v28;
    *(_DWORD *)(*(void *)&v29 + 12sub_100783178((uint64_t)va, 0LL) = 869711765;
    *(_DWORD *)(*(void *)&v29 + 16sub_100783178((uint64_t)va, 0LL) = 869711765;
    *(_DWORD *)(*(void *)&v29 + 20sub_100783178((uint64_t)va, 0LL) = 869711765;
    *(float *)(*(void *)&v29 + 24sub_100783178((uint64_t)va, 0LL) = v28;
    *(float *)(*(void *)&v29 + 28sub_100783178((uint64_t)va, 0LL) = v28;
    *(float *)(*(void *)&v29 + 32sub_100783178((uint64_t)va, 0LL) = v28;
    if (LOBYTE(a1[3].f64[1]))
    {
      LOBYTE(a1[3].f64[1]) = 0;
      BYTE4(a1[20].f64[1]) = 0;
    }

    sub_1007A97E0((uint64_t)a1);
    sub_1007AA040((uint64_t)a1, 0);
    sub_10074DC40((uint64_t)&a1[78], (float *)&a1[4].f64[1]);
    sub_10074DC40((uint64_t)&a1[82].f64[1], (float *)&a1[4].f64[1] + 1);
    return sub_10074DC40((uint64_t)&a1[87], (float *)&a1[5]);
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    uint64_t v18 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Could not set bias retrieved from database",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      LOWORD(v37) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "Could not set bias retrieved from database",  &v37,  2);
      double v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibr ationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  return result;
}

float32_t sub_1007A9F9C(float32x2_t *a1, double *a2)
{
  float32_t result = v11;
  float32_t v4 = v9;
  float32_t v5 = v7;
  a1[2] = vcvt_f32_f64(v6);
  a1[3].f32[0] = v5;
  a1[5] = vcvt_f32_f64(v8);
  a1[6].f32[0] = v4;
  a1[8] = vcvt_f32_f64(v10);
  a1[9].f32[0] = result;
  return result;
}

void sub_1007AA040(uint64_t a1, int a2)
{
  float v4 = *(float *)(a1 + 120);
  float v5 = *(float *)(a1 + 124);
  *(float *)(a1 + 200) = v4;
  *(float *)(a1 + 204) = v5;
  float v6 = *(float *)(a1 + 128);
  *(float *)(a1 + 20_Block_object_dispose(va, 8) = v6;
  *(float *)(a1 + 216) = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  double v7 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(float *)(a1 + 200);
    double v9 = *(float *)(a1 + 204);
    double v10 = *(float *)(a1 + 208);
    int v11 = *(_DWORD *)(a1 + 20);
    int v12 = *(_DWORD *)(a1 + 224);
    int v13 = *(_DWORD *)(a1 + 168);
    int v14 = *(_DWORD *)(a1 + 172);
    int v15 = *(_DWORD *)(a1 + 176);
    int v16 = *(_DWORD *)(a1 + 236);
    int v17 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)uint64_t buf = 134220544;
    double v55 = v8;
    __int16 v56 = 2048;
    double v57 = v9;
    __int16 v58 = 2048;
    double v59 = v10;
    __int16 v60 = 1024;
    int v61 = v11;
    __int16 v62 = 1024;
    int v63 = v12;
    __int16 v64 = 1024;
    int v65 = v13;
    __int16 v66 = 1024;
    int v67 = v14;
    __int16 v68 = 1024;
    int v69 = v15;
    __int16 v70 = 1024;
    int v71 = v16;
    __int16 v72 = 1024;
    int v73 = v17;
    __int16 v74 = 1024;
    int v75 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)",  buf,  0x50u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    double v19 = *(float *)(a1 + 200);
    double v20 = *(float *)(a1 + 204);
    double v21 = *(float *)(a1 + 208);
    int v22 = *(_DWORD *)(a1 + 20);
    int v23 = *(_DWORD *)(a1 + 224);
    int v24 = *(_DWORD *)(a1 + 168);
    int v25 = *(_DWORD *)(a1 + 172);
    int v26 = *(_DWORD *)(a1 + 176);
    int v27 = *(_DWORD *)(a1 + 236);
    int v28 = *(_DWORD *)(a1 + 240);
    int v32 = 134220544;
    double v33 = v19;
    __int16 v34 = 2048;
    double v35 = v20;
    __int16 v36 = 2048;
    double v37 = v21;
    __int16 v38 = 1024;
    int v39 = v22;
    __int16 v40 = 1024;
    int v41 = v23;
    __int16 v42 = 1024;
    int v43 = v24;
    __int16 v44 = 1024;
    int v45 = v25;
    __int16 v46 = 1024;
    int v47 = v26;
    __int16 v48 = 1024;
    int v49 = v27;
    __int16 v50 = 1024;
    int v51 = v28;
    __int16 v52 = 1024;
    int v53 = a2;
    LODWORD(v31) = 80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)",  COERCE_DOUBLE(&v32),  v31);
    double v30 = (uint8_t *)v29;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAttitudeDependentKFCalibrator::setCoastingVector(BOOL)", "%s\n", v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  *(_DWORD *)(a1 + 240) = 0;
  int v18 = *(_DWORD *)(a1 + 20);
  if ((a2 & 1) != 0)
  {
    *(_DWORD *)(a1 + 224) = v18;
    sub_10074DFF8((void *)(a1 + 1080));
    sub_10074DFF8((void *)(a1 + 1008));
    sub_10074DFF8((void *)(a1 + 1152));
    *(_BYTE *)(a1 + 59) = 1;
  }

  else
  {
    if (v18 > *(_DWORD *)(a1 + 224))
    {
      *(_DWORD *)(a1 + 236) = 0;
      *(_DWORD *)(a1 + 160_Block_object_dispose(va, 8) = 0;
    }

    *(void *)(a1 + 264) = 0LL;
    *(_DWORD *)(a1 + 272) = 0;
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0LL;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 224) = v18;
    sub_10074DFF8((void *)(a1 + 1080));
    sub_10074DFF8((void *)(a1 + 1008));
    sub_10074DFF8((void *)(a1 + 1152));
  }

float sub_1007AA394(uint64_t a1, float *a2, float *a3, float *a4)
{
  return sub_10074DC40(a1 + 160, a4);
}

void sub_1007AA3DC(float64x2_t *a1, float *a2, float32x2_t *a3, int a4)
{
  BYTE5(a1[20].f64[1]) = 1;
  BYTE1(a1[3].f64[1]) = 0;
  LODWORD(a1[91].f64[1]) = a4;
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = a2[4];
  float v9 = (float)((float)(a3[6].f32[0] * v7) + (float)(v6 * a3[3].f32[0])) + (float)(v8 * a3[9].f32[0]);
  double v10 = a1 + 92;
  float32x2_t v11 = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v7), a3[2], v6), a3[8], v8);
  bzero(&a1[92], 0x48uLL);
  a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
  a1[93].f64[0] = *(float *)a1[5].f64;
  *(float64x2_t *)((char *)v10 + 24) = vcvtq_f64_f32(*(float32x2_t *)&a1[6].f64[0]);
  a1[94].f64[1] = *(float *)&a1[6].f64[1];
  a1[95] = vcvtq_f64_f32(v11);
  a1[96].f64[0] = v9;
  bzero(*(void **)&a1[98].f64[0], 0x144uLL);
  float v12 = 9.0;
  if ((*(unsigned int (**)(float64x2_t *))(*(void *)&a1->f64[0] + 72LL))(a1))
  {
    int v13 = HIDWORD(a1[1].f64[0]);
    if (!LOBYTE(a1[1].f64[1])) {
      v13 *= v13;
    }
    float v12 = 9.0 / (float)v13;
  }

  float64_t v14 = a1[98].f64[0];
  **(float **)&float64_t v14 = v12;
  *(float *)(*(void *)&v14 + 4sub_100783178((uint64_t)va, 0LL) = v12;
  *(float *)(*(void *)&v14 + 8sub_100783178((uint64_t)va, 0LL) = v12;
  *(_DWORD *)(*(void *)&v14 + 12sub_100783178((uint64_t)va, 0LL) = 869711765;
  *(_DWORD *)(*(void *)&v14 + 16sub_100783178((uint64_t)va, 0LL) = 869711765;
  *(_DWORD *)(*(void *)&v14 + 20sub_100783178((uint64_t)va, 0LL) = 869711765;
  *(float *)(*(void *)&v14 + 24sub_100783178((uint64_t)va, 0LL) = v12;
  *(float *)(*(void *)&v14 + 28sub_100783178((uint64_t)va, 0LL) = v12;
  *(float *)(*(void *)&v14 + 32sub_100783178((uint64_t)va, 0LL) = v12;
  a1[32].f64[1] = a1[4].f64[1];
  LODWORD(a1[33].f64[0]) = LODWORD(a1[5].f64[0]);
  sub_1007A97E0((uint64_t)a1);
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  int v15 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    int v16 = HIDWORD(a1[1].f64[0]);
    int v17 = LOBYTE(a1[1].f64[1]);
    *(_DWORD *)uint64_t buf = 67109888;
    int v27 = v16;
    __int16 v28 = 1024;
    int v29 = a4;
    __int16 v30 = 1024;
    int v31 = v17;
    __int16 v32 = 2048;
    double v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "reset internal. levels-data(%d %d %d), pScale=%.3f ",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    int v18 = LOBYTE(a1[1].f64[1]);
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a4;
    HIWORD(v22) = 1024;
    int v23 = v18;
    __int16 v24 = 2048;
    double v25 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "reset internal. levels-data(%d %d %d), pScale=%.3f ",  &v21,  30,  67109888,  v22);
    double v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotion TypeCompassCalibrationLevel)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

void sub_1007AA704(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  bzero(*(void **)(a1 + 1576), 0x6CuLL);
  uint64_t v2 = *(_DWORD **)(a1 + 1576);
  _DWORD *v2 = 1065353216;
  v2[4] = 1065353216;
  v2[8] = 1065353216;
  *(_BYTE *)(a1 + 25) = 0;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v3 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "compass calibrator reset", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "compass calibrator reset",  v6,  2);
    float v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLAttitudeDependentKFCalibrator::reset()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

float sub_1007AA8D8(uint64_t a1, float *a2, float32x2_t *a3)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v6 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Resetting calibrator states.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    v15[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Resetting calibrator states.",  v15,  2);
    float64_t v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  *(_WORD *)(a1 + 332) = 1;
  *(_BYTE *)(a1 + 57) = 1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 320) = 3LL;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 200) = 0LL;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 520) = 0LL;
  *(_DWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  float v8 = a2[3];
  float v7 = a2[4];
  float v9 = a2[2];
  float v10 = (float)((float)(a3[6].f32[0] * v8) + (float)(v9 * a3[3].f32[0])) + (float)(v7 * a3[9].f32[0]);
  *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v8), a3[2], v9), a3[8], v7);
  *(float *)(a1 + 12_Block_object_dispose(va, 8) = v10;
  bzero((void *)(a1 + 1472), 0x48uLL);
  *(float64x2_t *)(a1 + 1520) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 120));
  *(double *)(a1 + 1536) = *(float *)(a1 + 128);
  bzero(*(void **)(a1 + 1568), 0x144uLL);
  float32x2_t v11 = *(_DWORD **)(a1 + 1568);
  *float32x2_t v11 = 1091567616;
  v11[10] = 1091567616;
  v11[20] = 1091567616;
  v11[30] = 869711765;
  v11[40] = 869711765;
  v11[50] = 869711765;
  v11[60] = 1091567616;
  v11[70] = 1091567616;
  v11[80] = 1091567616;
  return sub_1007A97E0(a1);
}

BOOL sub_1007AAB78( uint64_t a1, int a2, int a3, int a4, float *a5, float *a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  *((float *)&v180 + 1) = a12;
  int v19 = *(_DWORD *)(a1 + 240);
  float v20 = (float)v19;
  float v21 = *(float *)(a1 + 16);
  double v22 = 0.0;
  unint64_t v23 = *(void *)(a1 + 1072);
  float v24 = 0.0;
  float v25 = 0.0;
  if (v23) {
    float v25 = *(float *)(a1 + 1024) / (float)v23;
  }
  double v26 = a7;
  unint64_t v27 = *(void *)(a1 + 1216);
  if (v27) {
    float v24 = *(float *)(a1 + 1168) / (float)v27;
  }
  double v28 = v22 * 0.1 + v26 * 0.16;
  unint64_t v29 = *(void *)(a1 + 1144);
  if (v29) {
    float v30 = *(float *)(a1 + 1096) / (float)v29;
  }
  else {
    float v30 = 0.0;
  }
  double v31 = (double)*(int *)(a1 + 232);
  float v32 = v28;
  double v33 = v21;
  if (round(v21 * 20.0) < v31)
  {
    float v34 = 0.1875;
    if (v32 >= 0.1875) {
      float v34 = v32;
    }
    if (v30 > v34 && *(float *)(a1 + 1224) < 13.75 && v25 < 27.5 && a2 && a4 && a3 && a11 < 78.0 && v25 * 0.9 < v24)
    {
      float v35 = a13;
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      __int16 v36 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        int v37 = *(_DWORD *)(a1 + 232);
        int v38 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)uint64_t buf = 134219776;
        *(double *)v191 = v30;
        *(_WORD *)&v191[8] = 2048;
        *(double *)&v191[10] = v24;
        *(_WORD *)&v191[18] = 2048;
        *(double *)&v191[20] = a9;
        *(_WORD *)&v191[28] = 2048;
        *(double *)&v191[30] = v35;
        *(_WORD *)&v191[38] = 2048;
        *(double *)&v191[40] = *((float *)&v180 + 1);
        *(_WORD *)&v191[48] = 2048;
        *(double *)&v191[50] = a11;
        *(_WORD *)&v191[58] = 1024;
        *(_DWORD *)&v191[60] = v37;
        *(_WORD *)&v191[64] = 1024;
        *(_DWORD *)&v191[66] = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)",  buf,  0x4Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v174 = *(_DWORD *)(a1 + 232);
        int v175 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)v181 = 134219776;
        *(double *)&v181[4] = v30;
        *(_WORD *)&v181[12] = 2048;
        *(double *)&v181[14] = v24;
        *(_WORD *)&v181[22] = 2048;
        *(double *)&v181[24] = a9;
        *(_WORD *)&v181[32] = 2048;
        *(double *)&v181[34] = v35;
        *(_WORD *)&v181[42] = 2048;
        *(double *)&v181[44] = *((float *)&v180 + 1);
        *(_WORD *)&v181[52] = 2048;
        *(double *)&v181[54] = a11;
        *(_WORD *)&v181[62] = 1024;
        *(_DWORD *)&v181[64] = v174;
        *(_WORD *)&v181[68] = 1024;
        *(_DWORD *)&v181[70] = v175;
        LODWORD(v17_Block_object_dispose(va, 8) = 74;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)",  COERCE_DOUBLE(v181),  v178,  v179,  v180);
        int v177 = (uint8_t *)v176;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<fl oat> &, float, float, float, const CLVector3d<float> &)",  "%s\n",  v176);
        if (v177 != buf) {
          free(v177);
        }
      }

      *(_BYTE *)(a1 + 185) = 1;
      if (!*(_BYTE *)(a1 + 333)) {
        sub_1007AA3DC((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      }
      return 0LL;
    }
  }

  if (v25 <= 4.0 || !a3) {
    goto LABEL_89;
  }
  BOOL v39 = v30 >= v32 || a4 == 0;
  if (v39 || a2 == 0) {
    goto LABEL_89;
  }
  float v41 = v26 * 2.0 + 4.0;
  if (v41 < a10 || v24 > v41)
  {
    float v43 = v21 + v21;
    BOOL v47 = v30 < 0.1 && v43 < v20 || (float)(v21 * 10.0) < v20 || *(_BYTE *)(a1 + 184) != 0;
    float v46 = *(float *)(a1 + 1224);
    BOOL v48 = v46 >= 27.5;
    if (vabds_f32(v46, a9) < 5.0) {
      BOOL v48 = 0;
    }
    if (v47 && !v48 || v25 * 0.9 < v24 && (v43 < v20 || v21 < v20 && a9 * 0.95 < a10) && v25 > v46 && v46 < 27.5) {
      goto LABEL_57;
    }
LABEL_89:
    float v76 = a13;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    uint64_t v77 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v78 = *(void *)(a1 + 1072);
      double v79 = 0.0;
      double v80 = 0.0;
      if (v78 >= 2)
      {
        float v81 = (float)((float)v78 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v80 = 0.0;
        if (v81 >= 0.0) {
          double v80 = (float)(v81 / (float)((v78 - 1) * v78));
        }
      }

      unint64_t v82 = *(void *)(a1 + 1144);
      if (v82 >= 2)
      {
        float v83 = (float)((float)v82 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v83 >= 0.0) {
          double v79 = (float)(v83 / (float)((v82 - 1) * v82));
        }
      }

      int v84 = *(_DWORD *)(a1 + 248);
      double v85 = *(float *)(a1 + 200);
      double v86 = *(float *)(a1 + 204);
      double v87 = *(float *)(a1 + 208);
      double v88 = a6[2];
      double v89 = a6[3];
      double v90 = a6[4];
      double v91 = a5[2];
      double v92 = a5[3];
      double v93 = a5[4];
      unint64_t v94 = *(void *)(a1 + 1216);
      double v95 = 0.0;
      if (v94 >= 2)
      {
        float v96 = (float)((float)v94 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v96 >= 0.0) {
          double v95 = (float)(v96 / (float)((v94 - 1) * v94));
        }
      }

      int v98 = *(_DWORD *)(a1 + 236);
      int v97 = *(_DWORD *)(a1 + 240);
      double v99 = *(float *)(a1 + 216);
      int v100 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)uint64_t buf = 67115008;
      *(_DWORD *)v191 = v84;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = a8;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = v85;
      *(_WORD *)&v191[24] = 2048;
      *(double *)&v191[26] = v86;
      *(_WORD *)&v191[34] = 2048;
      *(double *)&v191[36] = v87;
      *(_WORD *)&v191[44] = 2048;
      *(double *)&v191[46] = v88;
      *(_WORD *)&v191[54] = 2048;
      *(double *)&v191[56] = v89;
      *(_WORD *)&v191[64] = 2048;
      *(double *)&v191[66] = v90;
      *(_WORD *)&v191[74] = 2048;
      *(double *)&v191[76] = v91;
      *(_WORD *)&v191[84] = 2048;
      *(double *)&v191[86] = v92;
      *(_WORD *)&v191[94] = 2048;
      *(double *)&v191[96] = v93;
      *(_WORD *)&v191[104] = 2048;
      *(double *)&v191[106] = v25;
      *(_WORD *)&v191[114] = 2048;
      *(double *)&v191[116] = v80;
      *(_WORD *)&v191[124] = 2048;
      *(double *)&v191[126] = v30;
      *(_WORD *)&v191[134] = 2048;
      *(double *)&v191[136] = v79;
      *(_WORD *)&v191[144] = 2048;
      *(double *)&v191[146] = v24;
      *(_WORD *)&v191[154] = 2048;
      *(double *)&v191[156] = v95;
      *(_WORD *)&v191[164] = 2048;
      *(double *)&v191[166] = a9;
      *(_WORD *)&v191[174] = 2048;
      *(double *)&v191[176] = v76;
      *(_WORD *)&v191[184] = 2048;
      *(double *)&v191[186] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v191[194] = 2048;
      *(double *)&v191[196] = v99;
      *(_WORD *)&v191[204] = 1024;
      *(_DWORD *)&v191[206] = v98;
      __int16 v192 = 1024;
      int v193 = v97;
      __int16 v194 = 1024;
      int v195 = v100;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angle Diff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)",  buf,  0xE2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      unint64_t v101 = *(void *)(a1 + 1072);
      double v102 = 0.0;
      double v103 = 0.0;
      if (v101 >= 2)
      {
        float v104 = (float)((float)v101 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v103 = 0.0;
        if (v104 >= 0.0) {
          double v103 = (float)(v104 / (float)((v101 - 1) * v101));
        }
      }

      unint64_t v105 = *(void *)(a1 + 1144);
      if (v105 >= 2)
      {
        float v106 = (float)((float)v105 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v106 >= 0.0) {
          double v102 = (float)(v106 / (float)((v105 - 1) * v105));
        }
      }

      int v107 = *(_DWORD *)(a1 + 248);
      double v108 = *(float *)(a1 + 200);
      double v109 = *(float *)(a1 + 204);
      double v110 = *(float *)(a1 + 208);
      double v111 = a6[2];
      double v112 = a6[3];
      double v113 = a6[4];
      double v114 = a5[2];
      double v115 = a5[3];
      double v116 = a5[4];
      unint64_t v117 = *(void *)(a1 + 1216);
      double v118 = 0.0;
      if (v117 >= 2)
      {
        float v119 = (float)((float)v117 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v119 >= 0.0) {
          double v118 = (float)(v119 / (float)((v117 - 1) * v117));
        }
      }

      int v121 = *(_DWORD *)(a1 + 236);
      int v120 = *(_DWORD *)(a1 + 240);
      double v122 = *(float *)(a1 + 216);
      int v123 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)v181 = 67115008;
      *(_DWORD *)&v181[4] = v107;
      *(_WORD *)&v181[8] = 2048;
      *(double *)&v181[10] = a8;
      *(_WORD *)&v181[18] = 2048;
      *(double *)&v181[20] = v108;
      *(_WORD *)&v181[28] = 2048;
      *(double *)&v181[30] = v109;
      *(_WORD *)&v181[38] = 2048;
      *(double *)&v181[40] = v110;
      *(_WORD *)&v181[48] = 2048;
      *(double *)&v181[50] = v111;
      *(_WORD *)&v181[58] = 2048;
      *(double *)&v181[60] = v112;
      *(_WORD *)&v181[68] = 2048;
      *(double *)&v181[70] = v113;
      *(_WORD *)&v181[78] = 2048;
      *(double *)&v181[80] = v114;
      *(_WORD *)&v181[88] = 2048;
      *(double *)&v181[90] = v115;
      *(_WORD *)&v181[98] = 2048;
      *(double *)&v181[100] = v116;
      *(_WORD *)&v181[108] = 2048;
      *(double *)&v181[110] = v25;
      *(_WORD *)&v181[118] = 2048;
      *(double *)&v181[120] = v103;
      *(_WORD *)&v181[128] = 2048;
      *(double *)&v181[130] = v30;
      *(_WORD *)&v181[138] = 2048;
      *(double *)&v181[140] = v102;
      *(_WORD *)&v181[148] = 2048;
      *(double *)&v181[150] = v24;
      *(_WORD *)&v181[158] = 2048;
      *(double *)&v181[160] = v118;
      *(_WORD *)&v181[168] = 2048;
      *(double *)&v181[170] = a9;
      *(_WORD *)&v181[178] = 2048;
      *(double *)&v181[180] = v76;
      *(_WORD *)&v181[188] = 2048;
      *(double *)&v181[190] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v181[198] = 2048;
      *(double *)&v181[200] = v122;
      *(_WORD *)&v181[208] = 1024;
      *(_DWORD *)&v181[210] = v121;
      __int16 v182 = 1024;
      int v183 = v120;
      __int16 v184 = 1024;
      int v185 = v123;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angle Diff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)",  v181,  226);
      goto LABEL_163;
    }

    return result;
  }

  float v46 = *(float *)(a1 + 1224);
LABEL_57:
  if (v46 < 27.5 || v46 < a9) {
    goto LABEL_63;
  }
  double v49 = 0.0;
  if (v33 * 3.0 < v31) {
    double v49 = 1.0;
  }
  if (v46 < (float)(a9 * 4.0) && v49 * 10.0 + 80.0 > v46)
  {
LABEL_63:
    *(_BYTE *)(a1 + 185) = 1;
    if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && v25 < 27.5 && v30 < 0.15 && v24 < 5.0)
    {
      float v125 = a13;
      sub_1007AA3DC((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      a13 = v125;
      int v19 = *(_DWORD *)(a1 + 240);
      double v33 = *(float *)(a1 + 16);
    }

    if (v33 * 1.5 >= (double)v19 && ((int v50 = *(_DWORD *)(a1 + 304)) != 0 || *(_BYTE *)(a1 + 312)))
    {
      float v51 = *(float *)(a1 + 308);
      float v52 = fabsf(v51);
      float v53 = v51 + a8;
      *(float *)(a1 + 30_Block_object_dispose(va, 8) = v53;
      float v54 = fabsf(v53);
      if (v54 > (float)(v52 + 5.0))
      {
        *(_DWORD *)(a1 + 304) = v50 + 1;
        if (v50 >= 1 && v54 < (float)((float)(v50 + 1) * 5.0))
        {
          *(void *)(a1 + 264) = 0LL;
          *(_DWORD *)(a1 + 272) = 0;
          *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
          *(_DWORD *)(a1 + 296) = 0;
          *(void *)(a1 + 304) = 0LL;
          *(_WORD *)(a1 + 312) = 0;
        }
      }
    }

    else
    {
      *(void *)(a1 + 264) = *(void *)(a1 + 72);
      *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 80);
      *(void *)(a1 + 28_Block_object_dispose(va, 8) = *(void *)(a1 + 200);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 208);
      *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 324);
      *(_DWORD *)(a1 + 304) = 0;
      *(_WORD *)(a1 + 312) = 1;
      *(float *)(a1 + 30_Block_object_dispose(va, 8) = a8;
    }

    float v55 = a13;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    __int16 v56 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v57 = *(void *)(a1 + 1072);
      double v58 = 0.0;
      double v59 = 0.0;
      if (v57 >= 2)
      {
        float v60 = (float)((float)v57 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v59 = 0.0;
        if (v60 >= 0.0) {
          double v59 = (float)(v60 / (float)((v57 - 1) * v57));
        }
      }

      unint64_t v61 = *(void *)(a1 + 1144);
      if (v61 >= 2)
      {
        float v62 = (float)((float)v61 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v62 >= 0.0) {
          double v58 = (float)(v62 / (float)((v61 - 1) * v61));
        }
      }

      int v63 = *(_DWORD *)(a1 + 248);
      int v64 = *(_DWORD *)(a1 + 304);
      double v65 = *(float *)(a1 + 308);
      double v66 = a6[2];
      double v67 = a6[3];
      double v68 = a6[4];
      double v69 = a5[2];
      double v70 = a5[3];
      double v71 = a5[4];
      unint64_t v72 = *(void *)(a1 + 1216);
      double v73 = 0.0;
      if (v72 >= 2)
      {
        float v134 = (float)((float)v72 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        float v74 = v55;
        if (v134 >= 0.0) {
          double v73 = (float)(v134 / (float)((v72 - 1) * v72));
        }
      }

      else
      {
        float v74 = v55;
      }

      double v135 = *(float *)(a1 + 216);
      float v136 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
      int v138 = *(_DWORD *)(a1 + 236);
      int v137 = *(_DWORD *)(a1 + 240);
      int v139 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)uint64_t buf = 67115520;
      float v140 = *(float *)(a1 + 16);
      *(_DWORD *)v191 = v63;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = v26;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = a8;
      *(_WORD *)&v191[24] = 1024;
      *(_DWORD *)&v191[26] = v64;
      *(_WORD *)&v191[30] = 2048;
      *(double *)&v191[32] = v65;
      *(_WORD *)&v191[40] = 2048;
      *(double *)&v191[42] = v66;
      *(_WORD *)&v191[50] = 2048;
      *(double *)&v191[52] = v67;
      *(_WORD *)&v191[60] = 2048;
      *(double *)&v191[62] = v68;
      *(_WORD *)&v191[70] = 2048;
      *(double *)&v191[72] = v69;
      *(_WORD *)&v191[80] = 2048;
      *(double *)&v191[82] = v70;
      *(_WORD *)&v191[90] = 2048;
      *(double *)&v191[92] = v71;
      *(_WORD *)&v191[100] = 2048;
      *(double *)&v191[102] = v25;
      *(_WORD *)&v191[110] = 2048;
      *(double *)&v191[112] = v59;
      *(_WORD *)&v191[120] = 2048;
      *(double *)&v191[122] = v30;
      *(_WORD *)&v191[130] = 2048;
      *(double *)&v191[132] = v58;
      *(_WORD *)&v191[140] = 2048;
      *(double *)&v191[142] = v24;
      *(_WORD *)&v191[150] = 2048;
      *(double *)&v191[152] = v73;
      *(_WORD *)&v191[160] = 2048;
      *(double *)&v191[162] = a9;
      *(_WORD *)&v191[170] = 2048;
      *(double *)&v191[172] = v74;
      *(_WORD *)&v191[180] = 2048;
      *(double *)&v191[182] = (float)(a11 - *((float *)&v180 + 1));
      *(_WORD *)&v191[190] = 2048;
      *(double *)&v191[192] = *((float *)&v180 + 1);
      *(_WORD *)&v191[200] = 2048;
      *(double *)&v191[202] = v135;
      __int16 v192 = 1024;
      int v193 = v138;
      __int16 v194 = 1024;
      int v195 = v137;
      __int16 v196 = 1024;
      int v197 = v139;
      __int16 v198 = 2048;
      double v199 = (float)(v136 / v140);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), a ngleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)",  buf,  0xF2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    unint64_t v141 = *(void *)(a1 + 1072);
    double v142 = 0.0;
    double v143 = 0.0;
    if (v141 >= 2)
    {
      float v144 = (float)((float)v141 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      double v143 = 0.0;
      if (v144 >= 0.0) {
        double v143 = (float)(v144 / (float)((v141 - 1) * v141));
      }
    }

    unint64_t v145 = *(void *)(a1 + 1144);
    if (v145 >= 2)
    {
      float v146 = (float)((float)v145 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v146 >= 0.0) {
        double v142 = (float)(v146 / (float)((v145 - 1) * v145));
      }
    }

    int v147 = *(_DWORD *)(a1 + 248);
    int v148 = *(_DWORD *)(a1 + 304);
    double v149 = *(float *)(a1 + 308);
    double v150 = a6[2];
    double v151 = a6[3];
    double v152 = a6[4];
    double v153 = a5[2];
    double v154 = a5[3];
    double v155 = a5[4];
    unint64_t v156 = *(void *)(a1 + 1216);
    double v157 = 0.0;
    if (v156 >= 2)
    {
      float v158 = (float)((float)v156 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      if (v158 >= 0.0) {
        double v157 = (float)(v158 / (float)((v156 - 1) * v156));
      }
    }

    double v159 = *(float *)(a1 + 216);
    float v160 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
    int v162 = *(_DWORD *)(a1 + 236);
    int v161 = *(_DWORD *)(a1 + 240);
    int v163 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)v181 = 67115520;
    float v164 = *(float *)(a1 + 16);
    *(_DWORD *)&v181[4] = v147;
    *(_WORD *)&v181[8] = 2048;
    *(double *)&v181[10] = v26;
    *(_WORD *)&v181[18] = 2048;
    *(double *)&v181[20] = a8;
    *(_WORD *)&v181[28] = 1024;
    *(_DWORD *)&v181[30] = v148;
    *(_WORD *)&v181[34] = 2048;
    *(double *)&v181[36] = v149;
    *(_WORD *)&v181[44] = 2048;
    *(double *)&v181[46] = v150;
    *(_WORD *)&v181[54] = 2048;
    *(double *)&v181[56] = v151;
    *(_WORD *)&v181[64] = 2048;
    *(double *)&v181[66] = v152;
    *(_WORD *)&v181[74] = 2048;
    *(double *)&v181[76] = v153;
    *(_WORD *)&v181[84] = 2048;
    *(double *)&v181[86] = v154;
    *(_WORD *)&v181[94] = 2048;
    *(double *)&v181[96] = v155;
    *(_WORD *)&v181[104] = 2048;
    *(double *)&v181[106] = v25;
    *(_WORD *)&v181[114] = 2048;
    *(double *)&v181[116] = v143;
    *(_WORD *)&v181[124] = 2048;
    *(double *)&v181[126] = v30;
    *(_WORD *)&v181[134] = 2048;
    *(double *)&v181[136] = v142;
    *(_WORD *)&v181[144] = 2048;
    *(double *)&v181[146] = v24;
    *(_WORD *)&v181[154] = 2048;
    *(double *)&v181[156] = v157;
    *(_WORD *)&v181[164] = 2048;
    *(double *)&v181[166] = a9;
    *(_WORD *)&v181[174] = 2048;
    *(double *)&v181[176] = v55;
    *(_WORD *)&v181[184] = 2048;
    *(double *)&v181[186] = (float)(a11 - *((float *)&v180 + 1));
    *(_WORD *)&v181[194] = 2048;
    *(double *)&v181[196] = *((float *)&v180 + 1);
    *(_WORD *)&v181[204] = 2048;
    *(double *)&v181[206] = v159;
    __int16 v182 = 1024;
    int v183 = v162;
    __int16 v184 = 1024;
    int v185 = v161;
    __int16 v186 = 1024;
    int v187 = v163;
    __int16 v188 = 2048;
    double v189 = (float)(v160 / v164);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), ang leDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coa stingCount(%d),deltaTime(%.3f)",  v181,  242);
LABEL_163:
    int v165 = (uint8_t *)v124;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)",  "%s\n",  v124);
    if (v165 != buf) {
      free(v165);
    }
    return 0LL;
  }

  float v126 = a13;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  unint64_t v127 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    int v128 = *(unsigned __int8 *)(a1 + 312);
    int v129 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)v191 = v128;
    *(_WORD *)&v191[4] = 1024;
    *(_DWORD *)&v191[6] = v129;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "fBackupInfoSet(%d), syncAge(%d)", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    int v166 = *(unsigned __int8 *)(a1 + 312);
    int v167 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)v181 = 67109376;
    *(_DWORD *)&v181[4] = v166;
    *(_WORD *)&v181[8] = 1024;
    *(_DWORD *)&v181[10] = v167;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "fBackupInfoSet(%d), syncAge(%d)",  v181,  14);
    double v169 = (uint8_t *)v168;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)",  "%s\n",  v168);
    if (v169 != buf) {
      free(v169);
    }
  }

  if (*(_BYTE *)(a1 + 312)
    && *(float *)(a1 + 16) * 1.5 > (double)*(int *)(a1 + 240)
    && *(float *)(a1 + 1224) > 80.0
    && *((float *)&v180 + 1) > 78.0
    && *(int *)(a1 + 248) >= 5)
  {
    *(_BYTE *)(a1 + 185) = 1;
    *(_BYTE *)(a1 + 313) = 1;
    *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    unint64_t v130 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "Likely bad resync. Backup.", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      *(_WORD *)v181 = 0;
      LODWORD(v17_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Likely bad resync. Backup.",  v181,  *(void *)&v178);
      goto LABEL_163;
    }
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    char v131 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      int v132 = *(_DWORD *)(a1 + 248);
      int v133 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)uint64_t buf = 67110912;
      *(_DWORD *)v191 = v132;
      *(_WORD *)&v191[4] = 2048;
      *(double *)&v191[6] = v30;
      *(_WORD *)&v191[14] = 2048;
      *(double *)&v191[16] = v24;
      *(_WORD *)&v191[24] = 2048;
      *(double *)&v191[26] = a9;
      *(_WORD *)&v191[34] = 2048;
      *(double *)&v191[36] = v126;
      *(_WORD *)&v191[44] = 2048;
      *(double *)&v191[46] = *((float *)&v180 + 1);
      *(_WORD *)&v191[54] = 2048;
      *(double *)&v191[56] = a11;
      *(_WORD *)&v191[64] = 1024;
      *(_DWORD *)&v191[66] = v133;
      _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEBUG,  "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)",  buf,  0x4Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v170 = *(_DWORD *)(a1 + 248);
      int v171 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)v181 = 67110912;
      *(_DWORD *)&v181[4] = v170;
      *(_WORD *)&v181[8] = 2048;
      *(double *)&v181[10] = v30;
      *(_WORD *)&v181[18] = 2048;
      *(double *)&v181[20] = v24;
      *(double *)&v181[30] = a9;
      *(_WORD *)&v181[38] = 2048;
      *(double *)&v181[40] = v126;
      *(_WORD *)&v181[48] = 2048;
      *(double *)&v181[50] = *((float *)&v180 + 1);
      *(_WORD *)&v181[58] = 2048;
      *(double *)&v181[60] = a11;
      *(_WORD *)&v181[68] = 1024;
      *(_DWORD *)&v181[70] = v171;
      LODWORD(v17_Block_object_dispose(va, 8) = 74;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)",  v181,  v178,  v179,  v180,  *(double *)v181,  *(double *)&v181[8],  *(double *)&v181[16],  HIDWORD(COERCE_UNSIGNED_INT64(v24)));
      int v173 = (uint8_t *)v172;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<floa t> &, float, float, float, const CLVector3d<float> &)",  "%s\n",  v172);
      if (v173 != buf) {
        free(v173);
      }
    }

    return 1LL;
  }

  return result;
}

BOOL sub_1007AC18C(uint64_t a1, float *a2, float *a3, int a4, int a5)
{
  float v5 = (int *)(a1 + 20);
  else {
    int v6 = *(_DWORD *)(a1 + 20);
  }
  float v7 = *(float *)(a1 + 216);
  if (v7 > 0.0)
  {
    *((float *)&v151 + 1) = vabds_f32( v7,  sqrtf((float)((float)(a2[3] * a2[3]) + (float)(a2[2] * a2[2])) + (float)(a2[4] * a2[4])))
                          / v7;
    sub_10074DC40(a1 + 1080, (float *)&v151 + 1);
    float v13 = (double)(5 - v6) * 0.25 + 1.5;
    if (*((float *)&v151 + 1) > (float)((float)(v13 * 10.0) * 0.1875))
    {
      if (*(_BYTE *)(a1 + 184)) {
        ++*(_DWORD *)(a1 + 232);
      }
      else {
        sub_1007ADADC(a1);
      }
      unint64_t v43 = *(void *)(a1 + 1144);
      if (v43)
      {
        if ((float v44 = *(float *)(a1 + 1096) / (float)v43, v44 > 5.0)
          && roundf(*(float *)(a1 + 16) * 30.0) < (float)*(int *)(a1 + 232)
          || v44 > 10.0 && roundf(*(float *)(a1 + 16) * 10.0) < (float)*(int *)(a1 + 232))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10184F718);
          }
          int v45 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "Prolonged high magDiff. Likely bad calibration. Resetting.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_10184F718);
            }
            LOWORD(v152) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Prolonged high magDiff. Likely bad calibration. Resetting.",  &v152,  2);
            float v126 = (uint8_t *)v125;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float > &, BOOL, BOOL)",  "%s\n",  v125);
            if (v126 != buf) {
              free(v126);
            }
          }
        }
      }

      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      float v46 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        float v47 = a2[2];
        float v48 = a2[3];
        float v49 = a2[4];
        double v50 = sqrtf((float)((float)(v48 * v48) + (float)(v47 * v47)) + (float)(v49 * v49));
        double v51 = v47;
        double v52 = v48;
        double v53 = v49;
        double v54 = *(float *)(a1 + 200);
        double v55 = *(float *)(a1 + 204);
        double v56 = *(float *)(a1 + 208);
        double v57 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        unint64_t v58 = *(void *)(a1 + 1144);
        double v59 = 0.0;
        if (v58 >= 2)
        {
          float v60 = (float)((float)v58 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          uint64_t v61 = (v58 - 1) * v58;
          if (v60 >= 0.0) {
            double v59 = (float)(v60 / (float)(unint64_t)v61);
          }
          else {
            double v59 = 0.0;
          }
        }

        int v62 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)uint64_t buf = 134220544;
        double v167 = *((float *)&v151 + 1);
        __int16 v168 = 2048;
        *(double *)double v169 = v50;
        *(_WORD *)&v169[8] = 2048;
        *(double *)&v169[10] = v51;
        *(_WORD *)&v169[18] = 2048;
        *(double *)&v169[20] = v52;
        *(_WORD *)&v169[28] = 2048;
        *(double *)&v169[30] = v53;
        *(_WORD *)&v169[38] = 2048;
        *(double *)int v170 = v54;
        *(_WORD *)&v170[8] = 2048;
        double v171 = v55;
        __int16 v172 = 2048;
        double v173 = v56;
        __int16 v174 = 2048;
        double v175 = v57;
        __int16 v176 = 2048;
        double v177 = v59;
        __int16 v178 = 1024;
        int v179 = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%. 3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d",  buf,  0x6Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        float v107 = a2[2];
        float v108 = a2[3];
        float v109 = a2[4];
        double v110 = sqrtf((float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109));
        double v111 = v107;
        double v112 = v108;
        double v113 = v109;
        double v114 = *(float *)(a1 + 200);
        double v115 = *(float *)(a1 + 204);
        double v116 = *(float *)(a1 + 208);
        double v117 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        unint64_t v118 = *(void *)(a1 + 1144);
        double v119 = 0.0;
        if (v118 >= 2)
        {
          float v120 = (float)((float)v118 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          uint64_t v121 = (v118 - 1) * v118;
          if (v120 >= 0.0) {
            double v119 = (float)(v120 / (float)(unint64_t)v121);
          }
          else {
            double v119 = 0.0;
          }
        }

        int v122 = *(unsigned __int8 *)(a1 + 333);
        int v152 = 134220544;
        double v153 = *((float *)&v151 + 1);
        __int16 v154 = 2048;
        *(double *)double v155 = v110;
        *(_WORD *)&v155[8] = 2048;
        *(double *)&v155[10] = v111;
        *(_WORD *)&v155[18] = 2048;
        *(double *)&v155[20] = v112;
        *(_WORD *)&v155[28] = 2048;
        *(double *)&v155[30] = v113;
        *(_WORD *)&v155[38] = 2048;
        *(double *)unint64_t v156 = v114;
        *(_WORD *)&v156[8] = 2048;
        double v157 = v115;
        __int16 v158 = 2048;
        double v159 = v116;
        __int16 v160 = 2048;
        double v161 = v117;
        __int16 v162 = 2048;
        double v163 = v119;
        __int16 v164 = 1024;
        int v165 = v122;
        LODWORD(v141) = 108;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%. 3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d",  COERCE_DOUBLE(&v152),  v141,  v142,  v144,  v146,  v147,  *(double *)&v148,  *(double *)&v149,  v150,  v151);
        double v124 = (uint8_t *)v123;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)",  "%s\n",  v123);
        if (v124 != buf) {
          free(v124);
        }
      }

      return 1LL;
    }

    float v18 = *(float *)(a1 + 200);
    float v19 = *(float *)(a1 + 204);
    float v20 = *(float *)(a1 + 208);
    int v148 = &off_10184D7B0;
    unint64_t v149 = __PAIR64__(v22, v21);
    *(float *)&double v150 = v23;
    *((float *)&v147 + 1) = sub_10074E070(a2, (float *)&v148) * 57.296;
    float v24 = 90.0 - sub_10074E070(a2, a3) * 57.2957795;
    float v25 = 90.0 - sub_10074E070((float *)&v148, a3) * 57.2957795;
    LODWORD(v147) = vabds_f32(v24, v25);
    sub_10074DC40(a1 + 1008, (float *)&v147 + 1);
    sub_10074DC40(a1 + 1152, (float *)&v147);
    *(_DWORD *)(a1 + 1224) = 0;
    float v26 = 0.0;
    if (sub_10074456C((float *)&v148, a3, (float *)&v146) && sub_10074456C(a2, a3, (float *)&v146 + 1))
    {
      float v26 = *((float *)&v146 + 1) - *(float *)&v146;
      float v27 = vabds_f32(*((float *)&v146 + 1), *(float *)&v146);
      *(float *)(a1 + 1224) = v27;
      if (v27 > 180.0)
      {
        float v28 = 360.0 - v27;
        *(float *)(a1 + 1224) = v28;
        if (v26 < 0.0) {
          float v26 = -v28;
        }
        else {
          float v26 = v28;
        }
      }
    }

    if (*v5 < 2 || (a5 & 1) == 0 && ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80LL))(a1) & a4) != 1) {
      return !*(_BYTE *)(a1 + 333)
    }
          && *(_BYTE *)(a1 + 184)
          && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
    *(_BYTE *)(a1 + 185) = 0;
    unint64_t v29 = *(void *)(a1 + 1216);
    float v30 = 0.0;
    float v31 = 0.0;
    if (v29 >= 2)
    {
      float v32 = (float)((float)v29 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      uint64_t v33 = (v29 - 1) * v29;
      if (v32 >= 0.0) {
        float v31 = v32 / (float)(unint64_t)v33;
      }
      else {
        float v31 = 0.0;
      }
    }

    unint64_t v34 = *(void *)(a1 + 1072);
    if (v34 >= 2)
    {
      float v35 = (float)((float)v34 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      uint64_t v36 = (v34 - 1) * v34;
      if (v35 >= 0.0) {
        float v30 = v35 / (float)(unint64_t)v36;
      }
      else {
        float v30 = 0.0;
      }
    }

    unint64_t v37 = *(void *)(a1 + 1144);
    float v38 = 0.0;
    if (v37 >= 2)
    {
      float v39 = (float)((float)v37 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v39 >= 0.0) {
        float v38 = v39 / (float)((v37 - 1) * v37);
      }
    }

    float v40 = v13 * 0.0032;
    float v41 = *(float *)(a1 + 1224);
    if (*(_BYTE *)(a1 + 252)
      && v41 > 27.5
      && v38 <= v40
      && (!v37 || (float)(*(float *)(a1 + 1096) / (float)v37) < 0.45))
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      __int16 v42 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "Likely bad database lookup. Resetting. ",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        LOWORD(v152) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Likely bad database lookup. Resetting. ",  &v152,  2);
        int v132 = (uint8_t *)v131;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)",  "%s\n",  v131);
        if (v132 != buf) {
          free(v132);
        }
      }

      (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
      return 1LL;
    }

    int v63 = *(_DWORD *)(a1 + 248);
    if (v41 <= 80.0)
    {
      if (v63 < 1) {
        goto LABEL_74;
      }
      int v64 = -1;
    }

    else
    {
      int v64 = 1;
    }

    *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = v63 + v64;
LABEL_74:
    *(float *)&double v145 = v31;
    double v143 = v13;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    *((float *)&v145 + 1) = v13 * 13.0;
    double v65 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      int v66 = *(_DWORD *)(a1 + 236);
      int v67 = *(_DWORD *)(a1 + 248);
      *(_DWORD *)uint64_t buf = 134219776;
      double v167 = v13;
      __int16 v168 = 1024;
      *(_DWORD *)double v169 = v66;
      *(_WORD *)&v169[4] = 2048;
      *(double *)&v169[6] = *((float *)&v151 + 1);
      *(_WORD *)&v169[14] = 2048;
      *(double *)&v169[16] = v26;
      *(_WORD *)&v169[24] = 2048;
      *(double *)&v169[26] = *((float *)&v147 + 1);
      *(_WORD *)&v169[34] = 1024;
      *(_DWORD *)&v169[36] = v67;
      *(_WORD *)int v170 = 2048;
      *(double *)&v170[2] = v24;
      LOWORD(v171) = 1024;
      *(_DWORD *)((char *)&v171 + 2) = *(float *)&v145 < *((float *)&v145 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)",  buf,  0x46u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v127 = *(_DWORD *)(a1 + 236);
      int v128 = *(_DWORD *)(a1 + 248);
      int v152 = 134219776;
      double v153 = v13;
      __int16 v154 = 1024;
      *(_DWORD *)double v155 = v127;
      *(_WORD *)&v155[4] = 2048;
      *(double *)&v155[6] = *((float *)&v151 + 1);
      *(_WORD *)&v155[14] = 2048;
      *(double *)&v155[16] = v26;
      *(_WORD *)&v155[24] = 2048;
      *(double *)&v155[26] = *((float *)&v147 + 1);
      *(_WORD *)&v155[34] = 1024;
      *(_DWORD *)&v155[36] = v128;
      *(_WORD *)unint64_t v156 = 2048;
      *(double *)&v156[2] = v24;
      LOWORD(v157) = 1024;
      *(_DWORD *)((char *)&v157 + 2) = *(float *)&v145 < *((float *)&v145 + 1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)",  COERCE_DOUBLE(&v152),  70,  v143,  v145,  v146,  LODWORD(v147),  *(double *)&v148,  v149);
      unint64_t v130 = (uint8_t *)v129;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)",  "%s\n",  v129);
      if (v130 != buf) {
        free(v130);
      }
    }

    double v68 = *((float *)&v145 + 1);
    double v69 = v30;
    double v70 = *((float *)&v145 + 1) * 1.5;
    if (a5)
    {
      if (*(float *)(a1 + 16) < (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)))
      {
        LODWORD(v6_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 1216);
        if (round((double)*(unint64_t *)(a1 + 1160) * 0.5) < (double)*(unint64_t *)&v68)
        {
          double v71 = v69;
          *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0;
          sub_1007AAB78( a1,  *(float *)&v145 < *((float *)&v145 + 1),  v70 > v69,  v38 <= v40,  a2,  (float *)&v148,  v13,  v26,  *((float *)&v147 + 1),  *(float *)&v147,  v24,  v25,  *((float *)&v151 + 1));
          double v69 = v71;
          if (*(_BYTE *)(a1 + 313)) {
            return 0LL;
          }
        }
      }
    }

    float v72 = *(float *)(a1 + 16);
    unint64_t v73 = *(void *)(a1 + 1072);
    float v74 = 0.0;
    float v75 = 0.0;
    if (v73) {
      float v75 = *(float *)(a1 + 1024) / (float)v73;
    }
    double v76 = v72;
    unint64_t v77 = *(void *)(a1 + 1144);
    if (v77) {
      float v74 = *(float *)(a1 + 1096) / (float)v77;
    }
    double v78 = (double)*(int *)(a1 + 236);
    double v79 = v76 * 2.0 + 40.0;
    if (*(_BYTE *)(a1 + 185))
    {
      if (!*(_BYTE *)(a1 + 184)) {
        return !*(_BYTE *)(a1 + 333)
      }
            && *(_BYTE *)(a1 + 184)
            && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
      float v80 = v13 * 13.75;
      float v81 = v13 * 0.1875;
LABEL_98:
      int v83 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v83;
      if (v74 <= v81 && v38 <= v40)
      {
        if (v75 <= v80)
        {
          if (v70 > v69)
          {
LABEL_107:
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_10184F718);
            }
            double v86 = (os_log_s *)qword_101934588;
            if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "Interference is gone.", buf, 2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934580 != -1) {
                dispatch_once(&qword_101934580, &stru_10184F718);
              }
              LOWORD(v152) = 0;
              LODWORD(v141) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Interference is gone.",  &v152,  *(void *)&v141);
              float v134 = (uint8_t *)v133;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<flo at> &, BOOL, BOOL)",  "%s\n",  v133);
              if (v134 != buf) {
                free(v134);
              }
            }

            sub_1007ADCA0(a1);
            if (*(_BYTE *)(a1 + 333) && *(int *)(a1 + 1592) <= 2)
            {
              int v87 = 0;
              float v5 = (int *)(a1 + 1464);
LABEL_126:
              sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *v5);
              goto LABEL_131;
            }

            int v87 = 0;
            goto LABEL_131;
          }
        }

        else if (*(float *)(a1 + 1224) < v80 && v70 > v69)
        {
          goto LABEL_107;
        }
      }

      if (*(_BYTE *)(a1 + 333))
      {
        int v87 = 1;
        goto LABEL_131;
      }

      if (roundf(v72 * 10.0) < (float)v83
        || v79 >= v78
        || (int v87 = 1, v24 < 78.0)
        && *(float *)&v145 < *((float *)&v145 + 1)
        && v74 < 0.45
        && v75 > v80
        && *(float *)(a1 + 1224) > 80.0)
      {
        sub_1007A9A54((void *)(a1 + 1232));
        int v87 = 1;
        goto LABEL_126;
      }

void sub_1007ADADC(uint64_t a1)
{
  *(_BYTE *)(a1 + 184) = 1;
  if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 57))
  {
    float v1 = *(float *)(a1 + 200);
    float v2 = *(float *)(a1 + 204);
    *(float *)(a1 + 120) = v1;
    *(float *)(a1 + 124) = v2;
    float v3 = *(float *)(a1 + 208);
    *(float *)(a1 + 12_Block_object_dispose(va, 8) = v3;
    *(double *)(a1 + 1520) = v1;
    *(double *)(a1 + 152_Block_object_dispose(va, 8) = v2;
    *(double *)(a1 + 1536) = v3;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v4 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "enters coasting", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "enters coasting",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAttitudeDependentKFCalibrator::enterCoasting()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_1007ADCA0(uint64_t a1)
{
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v1 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "exits coasting", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "exits coasting",  v4,  2);
    float v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAttitudeDependentKFCalibrator::exitCoasting()", "%s\n", v2);
    if (v3 != buf) {
      free(v3);
    }
  }

void sub_1007ADE2C(uint64_t a1, double a2)
{
  uint64_t v2 = 0LL;
  *(float64x2_t *)(a1 + 1520) = vmlaq_n_f64( vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 144)), 1.0 - a2),  *(float64x2_t *)(a1 + 1520),  a2);
  *(double *)(a1 + 1536) = (1.0 - a2) * *(float *)(a1 + 152) + a2 * *(double *)(a1 + 1536);
  double v3 = a2 * a2;
  uint64_t v4 = *(void *)(a1 + 1568);
  uint64_t v5 = v4 + 240;
  for (uint64_t i = 6LL; i != 9; ++i)
  {
    for (uint64_t j = 0LL; j != 108; j += 36LL)
    {
      float v8 = v3 * *(float *)(v5 + j);
      if (v2 == j)
      {
        float v9 = (1.0 - v3) * 6.25 + v8;
        float v8 = v9;
      }

      *(float *)(v5 + j) = v8;
    }

    v2 += 36LL;
    v5 += 4LL;
  }

  sub_1007C1298((void **)(a1 + 1544), v4, 9);
}

float sub_1007ADEDC(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1576);
  *(float *)(v3 + 36) = -a2[2];
  *(float *)(v3 + 52) = -a2[3];
  *(float *)(v3 + 6_Block_object_dispose(va, 8) = -a2[4];
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v3 + 84) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(v3 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(a3 + 68);
  float result = *(float *)(a3 + 72);
  *(float *)(v3 + 104) = result;
  return result;
}

void sub_1007ADF50(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4, float a5)
{
  uint64_t v9 = 0LL;
  *(float *)float v31 = a5;
  *(float *)&v31[1] = a5;
  *(float *)&v31[2] = a5;
  float v30 = 0.0;
  float32x2_t v29 = 0LL;
  uint64_t v10 = *(void *)(a1 + 1576);
  float32x2_t v11 = (float *)v10;
  do
  {
    float v12 = v29.f32[v9];
    uint64_t v13 = 1472LL;
    float64_t v14 = v11;
    do
    {
      float v15 = *v14;
      v14 += 3;
      float v12 = v12 + v15 * *(double *)(a1 + v13);
      v13 += 8LL;
    }

    while (v13 != 1544);
    v29.f32[v9++] = v12;
    ++v11;
  }

  while (v9 != 3);
  float32x2_t v27 = vsub_f32(a2[1], v29);
  float v28 = a2[2].f32[0] - v30;
  sub_1007C07AC(v26, (uint64_t *)(a1 + 1544), v10, (uint64_t)v31, (uint64_t)&v27, 9, 3, (uint64_t)&v25);
  sub_1007AE128(a1, *(void **)(a1 + 1568), (uint64_t *)(a1 + 1544), 9);
  for (uint64_t i = 0LL; i != 72; i += 8LL)
    *(double *)(a1 + 1472 + i) = *(double *)&v26[i] + *(double *)(a1 + 1472 + i);
  float v17 = *(double *)(a1 + 1520);
  float v18 = *(double *)(a1 + 1528);
  float v19 = *(double *)(a1 + 1536);
  *(float *)(a1 + 144) = v17;
  *(float *)(a1 + 14_Block_object_dispose(va, 8) = v18;
  *(float *)(a1 + 152) = v19;
  if ((a4 & 1) != 0)
  {
    int v20 = *(_DWORD *)(a1 + 504) + 1;
    *(_DWORD *)(a1 + 504) = v20;
    float v21 = *(float *)(a1 + 488) + v17;
    *(float *)(a1 + 48_Block_object_dispose(va, 8) = v21;
    float v22 = *(float *)(a1 + 492) + v18;
    *(float *)(a1 + 492) = v22;
    float v23 = *(float *)(a1 + 496) + v19;
    *(float *)(a1 + 496) = v23;
    float v24 = 1.0 / (double)v20;
    *(float *)(a1 + 144) = v21 * v24;
    *(float *)(a1 + 14_Block_object_dispose(va, 8) = v22 * v24;
    *(float *)(a1 + 152) = v23 * v24;
  }

void sub_1007AE128(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  size_t v8 = 4 * a4 * (uint64_t)a4;
  bzero(*(void **)(a1 + 1584), v8);
  bzero(a2, v8);
  if (a4 >= 1)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = *(float **)(a1 + 1584);
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v13 = 4LL * a4;
    float64_t v14 = v10;
    do
    {
      v10[(a4 + 1) * (int)v9] = *(float *)(v11 + 4 * v9);
      if (v9)
      {
        uint64_t v15 = 0LL;
        int v16 = v14;
        do
        {
          *int v16 = *(float *)(v11 + 4 * v9) * *(float *)(v12 + 4LL * (((int)v9 - 1) * (int)v9 / 2) + 4 * v15++);
          int v16 = (float *)((char *)v16 + v13);
        }

        while (v9 != v15);
      }

      ++v9;
      ++v14;
    }

    while (v9 != a4);
    unint64_t v17 = 0LL;
    do
    {
      uint64_t v18 = 0LL;
      unint64_t v19 = 0LL;
      uint64_t v20 = *a3;
      do
      {
        else {
          LODWORD(v21) = v17;
        }
        if (v17 >= v19)
        {
          float v22 = *(float *)(*(void *)(a1 + 1584) + 4 * (v19 * a4 + (int)v21)) + 0.0;
          LODWORD(v21) = v21 + 1;
        }

        else
        {
          float v22 = 0.0;
        }

        if ((int)v21 >= a4)
        {
          uint64_t v23 = v19 * a4;
        }

        else
        {
          uint64_t v23 = v19 * a4;
          uint64_t v21 = v21;
          do
          {
            float v22 = v22
            ++v21;
          }

          while (a4 != v21);
        }

        *((float *)a2 + v23 + v17) = v22;
        ++v19;
        v18 += v13;
      }

      while (v19 != a4);
      ++v17;
    }

    while (v17 != a4);
  }

uint64_t sub_1007AE2C0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 1312);
  double v2 = 0.0;
  double v3 = 0.0;
  if (v1) {
    double v3 = (float)(*(float *)(result + 1264) / (float)v1);
  }
  unint64_t v4 = *(void *)(result + 1384);
  unint64_t v5 = *(void *)(result + 1456);
  *(double *)(result + 1472) = v3;
  if (v4) {
    double v2 = (float)(*(float *)(result + 1336) / (float)v4);
  }
  *(double *)(result + 1480) = v2;
  if (v5) {
    double v6 = (float)(*(float *)(result + 1408) / (float)v5);
  }
  else {
    double v6 = 0.0;
  }
  *(double *)(result + 148_Block_object_dispose(va, 8) = v6;
  *(_DWORD *)(result + 236) = 0;
  *(_BYTE *)(result + 244) = 1;
  return result;
}

void sub_1007AE334(uint64_t a1, float *a2)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  unint64_t v4 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Divergence!!! Resetting.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Divergence!!! Resetting.",  v7,  2);
    double v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_10074DFF8((void *)(a1 + 1248));
  sub_10074DFF8((void *)(a1 + 1320));
  sub_10074DFF8((void *)(a1 + 1392));
  if (*(_BYTE *)(a1 + 24))
  {
    sub_10074DC40(a1 + 1248, (float *)(a1 + 72));
    sub_10074DC40(a1 + 1320, (float *)(a1 + 76));
    sub_10074DC40(a1 + 1392, (float *)(a1 + 80));
  }

  sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 20));
}

uint64_t sub_1007AE53C(uint64_t a1, float *a2)
{
  unint64_t v4 = (_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 1592) = 0u;
  float v5 = *(double *)(a1 + 1472);
  *(float *)uint64_t buf = v5;
  float v6 = *(double *)(a1 + 1480);
  *(float *)double v161 = v6;
  float v7 = *(double *)(a1 + 1488);
  v190[0] = v7;
  sub_10074DC40(a1 + 784, (float *)buf);
  sub_10074DC40(a1 + 856, (float *)v161);
  sub_10074DC40(a1 + 928, v190);
  uint64_t v8 = 0LL;
  uint64_t v9 = *(float **)(a1 + 1568);
  float v10 = 0.0;
  do
  {
    float v11 = *v9;
    v9 += 10;
    v190[v8] = v11;
    float v10 = v10 + v11;
    ++v8;
  }

  while (v8 != 3);
  unint64_t v12 = *(void *)(a1 + 848);
  float v13 = 0.0;
  float v14 = 0.0;
  if (v12 >= 2)
  {
    float v15 = (float)((float)v12 * *(float *)(a1 + 804)) - (float)(*(float *)(a1 + 800) * *(float *)(a1 + 800));
    float v14 = 0.0;
    if (v15 >= 0.0) {
      float v14 = v15 / (float)((v12 - 1) * v12);
    }
  }

  float v16 = sqrtf(v14);
  *(float *)__int16 v188 = v16;
  unint64_t v17 = *(void *)(a1 + 920);
  if (v17 >= 2)
  {
    float v18 = (float)((float)v17 * *(float *)(a1 + 876)) - (float)(*(float *)(a1 + 872) * *(float *)(a1 + 872));
    if (v18 >= 0.0) {
      float v13 = v18 / (float)((v17 - 1) * v17);
    }
  }

  float v19 = sqrtf(v13);
  *(float *)&v188[1] = v19;
  unint64_t v20 = *(void *)(a1 + 992);
  float v21 = 0.0;
  if (v20 >= 2)
  {
    float v22 = (float)((float)v20 * *(float *)(a1 + 948)) - (float)(*(float *)(a1 + 944) * *(float *)(a1 + 944));
    if (v22 >= 0.0) {
      float v21 = v22 / (float)((v20 - 1) * v20);
    }
  }

  float v189 = sqrtf(v21);
  float v23 = (float)(v16 + v19) + v189;
  if (v23 > 1000.0)
  {
LABEL_13:
    sub_1007AE334(a1, a2);
    return 0LL;
  }

  else {
    float v24 = 0.04;
  }
  uint64_t v25 = 0LL;
  int v26 = 0;
  float v27 = 0.0;
  do
  {
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
    float v29 = v190[v25];
    if (v29 <= 0.02) {
      int v30 = v28;
    }
    else {
      int v30 = 0;
    }
    if (v29 > v27) {
      float v27 = v190[v25];
    }
    if (v29 <= v24 && *(float *)&v188[v25] <= 1.0)
    {
      *(_DWORD *)(a1 + v25 * 4 + 1596) = 1;
      ++v26;
    }

    ++v25;
  }

  while (v25 != 3);
  if (v10 <= 0.125
    && (v26 == 3
     || (int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1), v23 < 15.0) && v31 != 1 && v27 <= 0.08))
  {
    _OWORD *v4 = xmmword_10132BCB0;
    *(_DWORD *)(a1 + 320) = -1;
    if (v10 <= 0.06) {
      *(_DWORD *)unint64_t v4 = 5;
    }
  }

  else if (v23 <= 1.0 && v26 >= 1)
  {
    if (v10 <= 0.6)
    {
      *(_DWORD *)unint64_t v4 = 3;
      if (v26 <= 1)
      {
        uint64_t v32 = 0LL;
        int v33 = -1;
        float v34 = 9.0;
        do
        {
          if (!*(_DWORD *)(a1 + 1596 + 4 * v32) && v190[v32] < v34)
          {
            int v33 = v32;
            float v34 = v190[v32];
          }

          ++v32;
        }

        while (v32 != 3);
        *(_DWORD *)(a1 + 4LL * v33 + 1596) = 1;
      }
    }

    else if (v26 >= 2)
    {
      *(_DWORD *)unint64_t v4 = v26;
    }

    if (*(_DWORD *)(a1 + 1596))
    {
      *(_DWORD *)(a1 + 320) = 0;
    }

    else
    {
      if (*(_DWORD *)(a1 + 1600)) {
        int v35 = 1;
      }
      else {
        int v35 = 2;
      }
      *(_DWORD *)(a1 + 320) = v35;
    }
  }

  HIDWORD(v15_Block_object_dispose(va, 8) = 0;
  if (!*(_BYTE *)(a1 + 57))
  {
    if (!*(_BYTE *)(a1 + 333) || *(_DWORD *)(a1 + 1592) < *(_DWORD *)(a1 + 1464))
    {
      if (!*(_BYTE *)(a1 + 24) || (int v56 = *(_DWORD *)(a1 + 1592), v56 < *(_DWORD *)(a1 + 20)) && (v26 < 2 || v56 <= 2))
      {
        if (!*(_BYTE *)(a1 + 184)) {
          return 0LL;
        }
        BOOL v57 = roundf(*(float *)(a1 + 16) * 20.0) >= (float)*(int *)(a1 + 232) || v26 < 2;
      }
    }

    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    unint64_t v58 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v59 = *(void *)(a1 + 1472);
      uint64_t v60 = *(void *)(a1 + 1480);
      uint64_t v61 = *(void *)(a1 + 1488);
      *(_DWORD *)uint64_t buf = 134218496;
      *(void *)double v175 = v59;
      *(_WORD *)&v175[8] = 2048;
      *(void *)__int16 v176 = v60;
      *(_WORD *)&v176[8] = 2048;
      uint64_t v177 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "new internal estimates (%.3f %.3f %.3f)",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      uint64_t v120 = *(void *)(a1 + 1472);
      uint64_t v121 = *(void *)(a1 + 1480);
      uint64_t v122 = *(void *)(a1 + 1488);
      *(_DWORD *)double v161 = 134218496;
      *(void *)&v161[4] = v120;
      *(_WORD *)&v161[12] = 2048;
      *(void *)__int16 v162 = v121;
      *(_WORD *)&v162[8] = 2048;
      uint64_t v163 = v122;
      LODWORD(v15_Block_object_dispose(va, 8) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new internal estimates (%.3f %.3f %.3f)",  COERCE_DOUBLE(v161),  v158,  v159);
      double v124 = (uint8_t *)v123;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v123);
      if (v124 != buf) {
        free(v124);
      }
    }

    *(_BYTE *)(a1 + 57) = 1;
    if (*(_BYTE *)(a1 + 333))
    {
      float v62 = *(double *)(a1 + 1472);
      *(float *)uint64_t buf = v62;
      float v63 = *(double *)(a1 + 1480);
      *(float *)double v161 = v63;
      float v64 = *(double *)(a1 + 1488);
      *(float *)&double v159 = v64;
      sub_10074DC40(a1 + 1248, (float *)buf);
      sub_10074DC40(a1 + 1320, (float *)v161);
      sub_10074DC40(a1 + 1392, (float *)&v159);
      if (*(void *)(a1 + 1312) < *(void *)(a1 + 1256))
      {
        sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1464));
        return 0LL;
      }

      if (sub_1007AFE50(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1464), (float *)&v158 + 1))
      {
        sub_1007AE2C0(a1);
        float v84 = *(double *)(a1 + 1472);
        float v85 = *(double *)(a1 + 1480);
        float v86 = *(double *)(a1 + 1488);
        sub_1007B01F8(a1, v84, v85, v86);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v87 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          int v88 = *(unsigned __int8 *)(a1 + 184);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)double v175 = v88;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "taking new estimates, Internal. fIsCoasting (%d)",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v89 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)double v161 = 67109120;
        *(_DWORD *)&v161[4] = v89;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "taking new estimates, Internal. fIsCoasting (%d)",  v161);
        float v91 = (uint8_t *)v90;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v90);
      }

      else
      {
        sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        double v112 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          int v113 = *(unsigned __int8 *)(a1 + 184);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)double v175 = v113;
          _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEBUG,  "new estimates denied, fIsCoasting (%d)",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v114 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)double v161 = 67109120;
        *(_DWORD *)&v161[4] = v114;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new estimates denied, fIsCoasting (%d)",  v161);
        float v91 = (uint8_t *)v115;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v115);
      }
    }

    else
    {
      float v81 = *(double *)(a1 + 1472);
      *(float *)uint64_t buf = v81;
      float v82 = *(double *)(a1 + 1480);
      *(float *)double v161 = v82;
      float v83 = *(double *)(a1 + 1488);
      *(float *)&double v159 = v83;
      sub_10074DC40(a1 + 1248, (float *)buf);
      sub_10074DC40(a1 + 1320, (float *)v161);
      sub_10074DC40(a1 + 1392, (float *)&v159);
      if (sub_1007AFE50(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1592), (float *)&v158 + 1))
      {
        if (*(_DWORD *)v4 == 3 && *(int *)(a1 + 20) >= 4)
        {
          sub_1007AA394(a1 + 1232, (float *)(a1 + 72), (float *)(a1 + 76), (float *)(a1 + 80));
          return 0LL;
        }

        sub_1007AE2C0(a1);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        double v116 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          int v117 = *(_DWORD *)v4;
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)double v175 = v117;
          _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEBUG,  "taking new estimates, reached database. (%d)",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v118 = *(_DWORD *)v4;
        *(_DWORD *)double v161 = 67109120;
        *(_DWORD *)&v161[4] = v118;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "taking new estimates, reached database. (%d)",  v161);
        float v91 = (uint8_t *)v119;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v119);
      }

      else
      {
        sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
        float v105 = *((float *)&v158 + 1);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v106 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          int v107 = *(_DWORD *)(a1 + 1592);
          int v108 = *(unsigned __int8 *)(a1 + 252);
          *(_DWORD *)uint64_t buf = 67109632;
          *(_DWORD *)double v175 = v107;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v108;
          *(_WORD *)__int16 v176 = 2048;
          *(double *)&v176[2] = v105;
          _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEBUG,  "new esitmates disagree with database. (%d,%d,%.3f)",  buf,  0x18u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v109 = *(_DWORD *)(a1 + 1592);
        int v110 = *(unsigned __int8 *)(a1 + 252);
        *(_DWORD *)double v161 = 67109632;
        *(_DWORD *)&v161[4] = v109;
        *(_WORD *)&v161[8] = 1024;
        *(_DWORD *)&v161[10] = v110;
        *(_WORD *)__int16 v162 = 2048;
        *(double *)&v162[2] = v105;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new esitmates disagree with database. (%d,%d,%.3f)",  v161,  24,  v159);
        float v91 = (uint8_t *)v111;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v111);
      }
    }

    if (v91 != buf) {
      free(v91);
    }
    return 0LL;
  }

  int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  int v37 = *(_DWORD *)(a1 + 1592);
  int v38 = *(_DWORD *)(a1 + 20);
  if (v37 >= v38) {
    int v39 = v36;
  }
  else {
    int v39 = 0;
  }
  if (v39 != 1)
  {
    if (v37 <= v38) {
      return 0LL;
    }
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    double v65 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v66 = *(void *)(a1 + 1472);
      uint64_t v67 = *(void *)(a1 + 1480);
      uint64_t v68 = *(void *)(a1 + 1488);
      int v69 = *(_DWORD *)(a1 + 1596);
      int v70 = *(_DWORD *)(a1 + 1600);
      int v71 = *(_DWORD *)(a1 + 1604);
      int v72 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)uint64_t buf = 134219776;
      *(void *)double v175 = v66;
      *(_WORD *)&v175[8] = 2048;
      *(void *)__int16 v176 = v67;
      *(_WORD *)&v176[8] = 2048;
      uint64_t v177 = v68;
      __int16 v178 = 2048;
      double v179 = v10;
      __int16 v180 = 1024;
      int v181 = v69;
      __int16 v182 = 1024;
      int v183 = v70;
      __int16 v184 = 1024;
      int v185 = v71;
      __int16 v186 = 1024;
      int v187 = v72;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)",  buf,  0x42u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      uint64_t v134 = *(void *)(a1 + 1472);
      uint64_t v135 = *(void *)(a1 + 1480);
      uint64_t v136 = *(void *)(a1 + 1488);
      int v137 = *(_DWORD *)(a1 + 1596);
      int v138 = *(_DWORD *)(a1 + 1600);
      int v139 = *(_DWORD *)(a1 + 1604);
      int v140 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)double v161 = 134219776;
      *(void *)&v161[4] = v134;
      *(_WORD *)&v161[12] = 2048;
      *(void *)__int16 v162 = v135;
      *(_WORD *)&v162[8] = 2048;
      uint64_t v163 = v136;
      __int16 v164 = 2048;
      double v165 = v10;
      __int16 v166 = 1024;
      int v167 = v137;
      __int16 v168 = 1024;
      int v169 = v138;
      __int16 v170 = 1024;
      int v171 = v139;
      __int16 v172 = 1024;
      int v173 = v140;
      LODWORD(v15_Block_object_dispose(va, 8) = 66;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)",  COERCE_DOUBLE(v161),  v158,  v159,  v160);
      double v142 = (uint8_t *)v141;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v141);
      if (v142 != buf) {
        free(v142);
      }
    }

    sub_10074DFF8((void *)(a1 + 1248));
    sub_10074DFF8((void *)(a1 + 1320));
    sub_10074DFF8((void *)(a1 + 1392));
    float v73 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v73;
    float v74 = *(double *)(a1 + 1480);
    *(float *)double v161 = v74;
    float v75 = *(double *)(a1 + 1488);
    *(float *)&double v159 = v75;
    sub_10074DC40(a1 + 1248, (float *)buf);
    sub_10074DC40(a1 + 1320, (float *)v161);
    sub_10074DC40(a1 + 1392, (float *)&v159);
    goto LABEL_112;
  }

  if (v37 <= v38
    && (float v40 = *(float *)(a1 + 72) - *(double *)(a1 + 1472),
        float v41 = *(float *)(a1 + 76) - *(double *)(a1 + 1480),
        float v42 = *(float *)(a1 + 80) - *(double *)(a1 + 1488),
        float v43 = (float)(fabsf(v40) + fabsf(v41)) + fabsf(v42),
        10.0 / (double)v38 >= v43))
  {
    if (v43 <= 1.0) {
      return 0LL;
    }
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    int v92 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v93 = *(void *)(a1 + 1472);
      uint64_t v94 = *(void *)(a1 + 1480);
      uint64_t v95 = *(void *)(a1 + 1488);
      int v96 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)uint64_t buf = 134218752;
      *(void *)double v175 = v93;
      *(_WORD *)&v175[8] = 2048;
      *(void *)__int16 v176 = v94;
      *(_WORD *)&v176[8] = 2048;
      uint64_t v177 = v95;
      __int16 v178 = 1024;
      LODWORD(v179) = v96;
      _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEBUG,  "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      uint64_t v149 = *(void *)(a1 + 1472);
      uint64_t v150 = *(void *)(a1 + 1480);
      uint64_t v151 = *(void *)(a1 + 1488);
      int v152 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)double v161 = 134218752;
      *(void *)&v161[4] = v149;
      *(_WORD *)&v161[12] = 2048;
      *(void *)__int16 v162 = v150;
      *(_WORD *)&v162[8] = 2048;
      uint64_t v163 = v151;
      __int16 v164 = 1024;
      LODWORD(v165) = v152;
      LODWORD(v15_Block_object_dispose(va, 8) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ",  COERCE_DOUBLE(v161),  v158,  v159,  LODWORD(v160));
      __int16 v154 = (uint8_t *)v153;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v153);
      if (v154 != buf) {
        free(v154);
      }
    }

    float v97 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v97;
    float v98 = *(double *)(a1 + 1480);
    *(float *)double v161 = v98;
    float v99 = *(double *)(a1 + 1488);
    *(float *)&double v159 = v99;
    sub_1007AA394(a1 + 1232, (float *)buf, (float *)v161, (float *)&v159);
    uint64_t v100 = 0LL;
    float v101 = 0.0;
    do
    {
      float v101 = v101 + (float)((float)*(unsigned int *)(a1 + v100 * 4 + 1596) * v190[v100]);
      ++v100;
    }

    while (v100 != 3);
    if (v101 >= 0.03 || (v102 = *(_DWORD *)(a1 + 1608) + 1, *(_DWORD *)(a1 + 160_Block_object_dispose(va, 8) = v102, v102 < 2))
    {
LABEL_112:
      *(_BYTE *)(a1 + 244) = 1;
      return 0LL;
    }

    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    float v103 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      int v104 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)double v175 = v104;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEBUG,  "new estimates needed, fIsCoasting (%d)",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v155 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)double v161 = 67109120;
      *(_DWORD *)&v161[4] = v155;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new estimates needed, fIsCoasting (%d)",  v161);
      double v157 = (uint8_t *)v156;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v156);
      if (v157 != buf) {
        free(v157);
      }
    }

    sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
    *(_DWORD *)(a1 + 160_Block_object_dispose(va, 8) = 0;
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    float v44 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v45 = *(void *)(a1 + 1472);
      uint64_t v46 = *(void *)(a1 + 1480);
      uint64_t v47 = *(void *)(a1 + 1488);
      int v48 = *(_DWORD *)(a1 + 1596);
      int v49 = *(_DWORD *)(a1 + 1600);
      int v50 = *(_DWORD *)(a1 + 1604);
      int v51 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)uint64_t buf = 134219776;
      *(void *)double v175 = v45;
      *(_WORD *)&v175[8] = 2048;
      *(void *)__int16 v176 = v46;
      *(_WORD *)&v176[8] = 2048;
      uint64_t v177 = v47;
      __int16 v178 = 2048;
      double v179 = v10;
      __int16 v180 = 1024;
      int v181 = v48;
      __int16 v182 = 1024;
      int v183 = v49;
      __int16 v184 = 1024;
      int v185 = v50;
      __int16 v186 = 1024;
      int v187 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)",  buf,  0x42u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      uint64_t v125 = *(void *)(a1 + 1472);
      uint64_t v126 = *(void *)(a1 + 1480);
      uint64_t v127 = *(void *)(a1 + 1488);
      int v128 = *(_DWORD *)(a1 + 1596);
      int v129 = *(_DWORD *)(a1 + 1600);
      int v130 = *(_DWORD *)(a1 + 1604);
      int v131 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)double v161 = 134219776;
      *(void *)&v161[4] = v125;
      *(_WORD *)&v161[12] = 2048;
      *(void *)__int16 v162 = v126;
      *(_WORD *)&v162[8] = 2048;
      uint64_t v163 = v127;
      __int16 v164 = 2048;
      double v165 = v10;
      __int16 v166 = 1024;
      int v167 = v128;
      __int16 v168 = 1024;
      int v169 = v129;
      __int16 v170 = 1024;
      int v171 = v130;
      __int16 v172 = 1024;
      int v173 = v131;
      LODWORD(v15_Block_object_dispose(va, 8) = 66;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)",  COERCE_DOUBLE(v161),  v158,  v159,  v160);
      int v133 = (uint8_t *)v132;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v132);
      if (v133 != buf) {
        free(v133);
      }
    }

    float v52 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v52;
    float v53 = *(double *)(a1 + 1480);
    *(float *)double v161 = v53;
    float v54 = *(double *)(a1 + 1488);
    *(float *)&double v159 = v54;
    sub_10074DC40(a1 + 1248, (float *)buf);
    sub_10074DC40(a1 + 1320, (float *)v161);
    sub_10074DC40(a1 + 1392, (float *)&v159);
    *(void *)double v161 = *(void *)(a1 + 168);
    *(_DWORD *)&v161[8] = *(_DWORD *)(a1 + 176);
    if (sub_1007AFE50(a1, (unsigned int *)v161, *(_DWORD *)(a1 + 1592), (float *)&v158 + 1))
    {
      if ((*(_DWORD *)(a1 + 172) + *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176)) <= 2
        && (float)(*(float *)(a1 + 16) * 180.0) < (float)*(int *)(a1 + 236))
      {
        int v55 = *(_DWORD *)(a1 + 1592);
        if (v55 >= 4 && v55 > *(_DWORD *)(a1 + 20))
        {
          sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), v55);
          return 0LL;
        }
      }

      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      double v78 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        int v79 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)double v175 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEBUG,  "taking new estimates, fIsCoasting (%d)",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        int v146 = *(unsigned __int8 *)(a1 + 184);
        LODWORD(v159) = 67109120;
        HIDWORD(v159) = v146;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "taking new estimates, fIsCoasting (%d)",  &v159);
        int v148 = (uint8_t *)v147;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v147);
        if (v148 != buf) {
          free(v148);
        }
      }

      goto LABEL_112;
    }

    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    double v76 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      int v77 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)double v175 = v77;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "new estimates denied, fIsCoasting (%d)",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v143 = *(unsigned __int8 *)(a1 + 184);
      LODWORD(v159) = 67109120;
      HIDWORD(v159) = v143;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new estimates denied, fIsCoasting (%d)",  &v159);
      double v145 = (uint8_t *)v144;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)",  "%s\n",  v144);
      if (v145 != buf) {
        free(v145);
      }
    }

    sub_1007AA3DC((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
  }

  return 0LL;
}

BOOL sub_1007AFE50(uint64_t a1, unsigned int *a2, int a3, float *a4)
{
  *a4 = 0.0;
  unint64_t v8 = *(void *)(a1 + 1312);
  float v9 = 0.0;
  float v10 = 0.0;
  if (v8 >= 2)
  {
    float v11 = (float)((float)v8 * *(float *)(a1 + 1268)) - (float)(*(float *)(a1 + 1264) * *(float *)(a1 + 1264));
    if (v11 >= 0.0) {
      float v10 = v11 / (float)((v8 - 1) * v8);
    }
  }

  unint64_t v12 = *(void *)(a1 + 1384);
  if (v12 >= 2)
  {
    float v13 = (float)((float)v12 * *(float *)(a1 + 1340)) - (float)(*(float *)(a1 + 1336) * *(float *)(a1 + 1336));
    if (v13 >= 0.0) {
      float v9 = v13 / (float)((v12 - 1) * v12);
    }
  }

  unint64_t v14 = *(void *)(a1 + 1456);
  float v15 = 0.0;
  if (v14 >= 2)
  {
    float v16 = (float)((float)v14 * *(float *)(a1 + 1412)) - (float)(*(float *)(a1 + 1408) * *(float *)(a1 + 1408));
    if (v16 >= 0.0) {
      float v15 = v16 / (float)((v14 - 1) * v14);
    }
  }

  float v17 = (float)(v9 * (float)a2[1]) + (float)((float)*a2 * v10);
  float v18 = (float)a2[2];
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v19 = v17 + (float)(v18 * v15);
  unint64_t v20 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v21 = *a2;
    unsigned int v22 = a2[1];
    unsigned int v23 = a2[2];
    uint64_t v24 = *(void *)(a1 + 1312);
    *(_DWORD *)uint64_t buf = 67111168;
    unsigned int v42 = v21;
    __int16 v43 = 1024;
    unsigned int v44 = v22;
    __int16 v45 = 1024;
    unsigned int v46 = v23;
    __int16 v47 = 2048;
    double v48 = v10;
    __int16 v49 = 2048;
    double v50 = v9;
    __int16 v51 = 2048;
    double v52 = v15;
    __int16 v53 = 2048;
    double v54 = v19;
    __int16 v55 = 1024;
    int v56 = a3;
    __int16 v57 = 1024;
    int v58 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    unsigned int v27 = a2[1];
    unsigned int v28 = a2[2];
    uint64_t v29 = *(void *)(a1 + 1312);
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = v27;
    HIWORD(v33) = 1024;
    LODWORD(v34) = v28;
    WORD2(v34) = 2048;
    *(double *)((char *)&v34 + 6) = v10;
    HIWORD(v34) = 2048;
    *(_WORD *)int v35 = 2048;
    *(double *)&_DWORD v35[2] = v15;
    *(_WORD *)&v35[10] = 2048;
    double v36 = v19;
    __int16 v37 = 1024;
    int v38 = a3;
    __int16 v39 = 1024;
    int v40 = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ",  &v32,  72,  67111168,  v33,  *(double *)&v34,  *((double *)&v34 + 1),  v9,  *(_DWORD *)v35,  *(_DWORD *)&v35[8]);
    int v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  float v25 = 100.0 / (float)a3;
  if (v19 > v25) {
    *a4 = (float)(v19 - v25) / v25;
  }
  return v19 <= v25;
}

float sub_1007B01F8(uint64_t a1, float a2, float a3, float a4)
{
  float v10 = a3;
  float v11 = a2;
  float v9 = a4;
  if (!*(_BYTE *)(a1 + 24)) {
    *(_BYTE *)(a1 + 57) = 1;
  }
  *(_BYTE *)(a1 + 333) = 0;
  uint64_t v5 = a1 + 1248;
  sub_10074DFF8((void *)(a1 + 1248));
  uint64_t v6 = a1 + 1320;
  sub_10074DFF8((void *)(a1 + 1320));
  float v7 = (void *)(a1 + 1392);
  sub_10074DFF8(v7);
  sub_10074DC40(v5, &v11);
  sub_10074DC40(v6, &v10);
  return sub_10074DC40((uint64_t)v7, &v9);
}

void sub_1007B0288(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 184)) {
    return;
  }
  float v1 = *(float *)(a1 + 16);
  double v2 = v1;
  unint64_t v3 = *(void *)(a1 + 1144);
  if (v1 * 8.0 < (double)*(int *)(a1 + 248))
  {
    float v4 = 0.0;
    if (v3 >= 2)
    {
      float v5 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v5 >= 0.0) {
        float v4 = v5 / (float)((v3 - 1) * v3);
      }
    }

    if (v4 < 0.01)
    {
      unint64_t v6 = *(void *)(a1 + 1072);
      if (v6 < 2
        || (float v7 = (float)((float)v6 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024)),
            v7 < 0.0)
        || (float)(v7 / (float)((v6 - 1) * v6)) < 20.0)
      {
        unint64_t v8 = *(void *)(a1 + 1216);
        if (v8 < 2
          || (float v9 = (float)((float)v8 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168)),
              v9 < 0.0)
          || (float)(v9 / (float)((v8 - 1) * v8)) < 10.0)
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10184F718);
          }
          float v10 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Bad heading divergence for too long. Prompt user to re-calibrate.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_10184F718);
            }
            LOWORD(v29[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Bad heading divergence for too long. Prompt user to re-calibrate.",  v29,  2,  v29[0]);
LABEL_74:
            unsigned int v28 = (uint8_t *)v11;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAttitudeDependentKFCalibrator::resetAfterCoasting()",  "%s\n",  v11);
            if (v28 != buf) {
              free(v28);
            }
            return;
          }

          return;
        }
      }
    }
  }

  if (v3)
  {
    float v12 = *(float *)(a1 + 1096);
    if ((float)(v12 / (float)v3) >= 1.0)
    {
      int v20 = *(_DWORD *)(a1 + 232);
      if (roundf(v1 * 120.0) >= (float)v20
        || v3 >= 2
        && (float v21 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(v12 * v12), v21 >= 0.0)
        && (float)(v21 / (float)((v3 - 1) * v3)) >= 0.04)
      {
        if (round(v2 * 360.0) < (double)v20)
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10184F718);
          }
          unsigned int v23 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Coasting for too long. Exit coasting.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_10184F718);
            }
            LOWORD(v29[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Coasting for too long. Exit coasting.",  v29,  2,  v29[0]);
            goto LABEL_74;
          }
        }
      }

      else
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        unsigned int v22 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "Waiting too long for high magnitude interference to go away. Exit coasting.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10184F718);
          }
          LOWORD(v29[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Waiting too long for high magnitude interference to go away. Exit coasting.",  v29,  2,  v29[0]);
          goto LABEL_74;
        }
      }

      return;
    }
  }

  int v13 = *(_DWORD *)(a1 + 232);
  if (roundf(v1 * 120.0) > (float)v13)
  {
    if (!*(_BYTE *)(a1 + 333)) {
      return;
    }
    if (v3 >= 2)
    {
      float v14 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    }

    unint64_t v15 = *(void *)(a1 + 1072);
    if (v15 >= 2)
    {
      float v16 = (float)((float)v15 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
    }

    unint64_t v17 = *(void *)(a1 + 1216);
    if (v17 >= 2)
    {
      float v19 = (float)v17;
      float v18 = *(float *)(a1 + 1168);
      float v24 = (float)((float)v17 * *(float *)(a1 + 1172)) - (float)(v18 * v18);
    }

    else
    {
      if (!v17)
      {
        double v25 = 0.0;
LABEL_61:
        if (v15) {
          double v26 = (float)(*(float *)(a1 + 1024) / (float)v15) * 0.9;
        }
        else {
          double v26 = 0.0;
        }
        if (v26 <= v25) {
          return;
        }
        goto LABEL_65;
      }

      float v18 = *(float *)(a1 + 1168);
      float v19 = (float)v17;
    }

    double v25 = (float)(v18 / v19);
    goto LABEL_61;
  }

void sub_1007B09C8(uint64_t a1, int a2, int *a3)
{
  *(_BYTE *)(a1 + 60) = a2;
  if (a2)
  {
    int v4 = *a3;
    *(_DWORD *)(a1 + 120) = *a3;
    int v5 = a3[1];
    *(_DWORD *)(a1 + 124) = v5;
    int v6 = a3[2];
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v6;
    *(_DWORD *)(a1 + 200) = v4;
    *(_DWORD *)(a1 + 204) = v5;
    *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = v6;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    float v7 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(float *)(a1 + 200);
      double v9 = *(float *)(a1 + 204);
      double v10 = *(float *)(a1 + 208);
      double v11 = *(float *)(a1 + 120);
      double v12 = *(float *)(a1 + 124);
      double v13 = *(float *)(a1 + 128);
      *(_DWORD *)uint64_t buf = 134219264;
      double v36 = v8;
      __int16 v37 = 2048;
      double v38 = v9;
      __int16 v39 = 2048;
      double v40 = v10;
      __int16 v41 = 2048;
      double v42 = v11;
      __int16 v43 = 2048;
      double v44 = v12;
      __int16 v45 = 2048;
      double v46 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      double v14 = *(float *)(a1 + 200);
      double v15 = *(float *)(a1 + 204);
      double v16 = *(float *)(a1 + 208);
      double v17 = *(float *)(a1 + 120);
      double v18 = *(float *)(a1 + 124);
      double v19 = *(float *)(a1 + 128);
      int v23 = 134219264;
      double v24 = v14;
      __int16 v25 = 2048;
      double v26 = v15;
      __int16 v27 = 2048;
      double v28 = v16;
      __int16 v29 = 2048;
      double v30 = v17;
      __int16 v31 = 2048;
      double v32 = v18;
      __int16 v33 = 2048;
      double v34 = v19;
      LODWORD(v22) = 62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f",  COERCE_DOUBLE(&v23),  v22);
      float v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(BOOL, const CLMotionTypeMagneticField &)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

void sub_1007B0C40(uint64_t a1, float *a2, uint64_t a3)
{
  if (!a3)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    double v10 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Attitude data not set.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      LOWORD(v113) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "Attitude data not set.",  &v113,  2);
      double v12 = (char *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, c onst CFTimeInterval &)",  "%s\n",  v11);
      goto LABEL_102;
    }

    return;
  }

  ++*(_DWORD *)(a1 + 324);
  sub_1007B0288(a1);
  *(_BYTE *)(a1 + 59) = 0;
  *(_BYTE *)(a1 + 25) = 0;
  sub_1007A9F9C((float32x2_t *)(a1 + 336), (double *)a3);
  float v6 = sub_10070D0E8((double *)a3);
  float v7 = sub_10070D104((double *)a3);
  *(float *)&__int128 v8 = sub_10070D120((double *)a3);
  int v109 = &off_10184D7B0;
  float v110 = v6;
  float v111 = v7;
  int v112 = v8;
  if (*(_BYTE *)(a1 + 56))
  {
    sub_1007AA8D8(a1, a2, (float32x2_t *)(a1 + 336));
    __int128 v9 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 432) = v9;
    if ((float *)(a1 + 448) != a2)
    {
      *(void *)(a1 + 456) = *((void *)a2 + 1);
      *(float *)(a1 + 464) = a2[4];
    }

    *(_BYTE *)(a1 + 332) = 1;
    *(_BYTE *)(a1 + 56) = 0;
  }

  else if (!*(_BYTE *)(a1 + 332))
  {
    goto LABEL_17;
  }

float32_t sub_1007B1EDC(float32x2_t *a1, float32x2_t *a2)
{
  if ((*(unsigned int (**)(float32x2_t *))(*(void *)a1 + 72LL))(a1))
  {
    float32_t v5 = (a1[13].f32[0] + 1.0) * a2[2].f32[0];
    a2[2].f32[0] = v5;
    float32_t result = v5 - a1[10].f32[0];
    __asm { FMOV            V2.2D, #1.0 }

    float32x2_t v11 = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a1[12]), _Q2), vcvtq_f64_f32(a2[1])));
    a2[1] = v11;
    a2[1] = vsub_f32(v11, a1[9]);
    a2[2].f32[0] = result;
  }

  return result;
}

void sub_1007B1F6C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 1592);
  if (v2 >= 2)
  {
    if (v2 != v3) {
      goto LABEL_4;
    }
    double v4 = *(double *)(a1 + 1472);
    double v5 = vabdd_f64(*(float *)(a1 + 520), v4);
    LODWORD(v4) = *(_DWORD *)(a1 + 1596);
    double v6 = *(double *)(a1 + 1480);
    double v7 = vabdd_f64(*(float *)(a1 + 524), v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 1600);
    double v8 = v7 * (double)*(unint64_t *)&v6 + v5 * (double)*(unint64_t *)&v4;
    double v9 = *(double *)(a1 + 1488);
    double v10 = vabdd_f64(*(float *)(a1 + 528), v9);
    LODWORD(v9) = *(_DWORD *)(a1 + 1604);
    *(float *)&double v8 = v8 + v10 * (double)*(unint64_t *)&v9;
    int v3 = *(_DWORD *)(a1 + 20);
    if (*(float *)&v8 > 2.5) {
LABEL_4:
    }
      *(_BYTE *)(a1 + 25) = 1;
  }

  float v11 = *(double *)(a1 + 1472);
  float v12 = *(double *)(a1 + 1480);
  float v13 = *(double *)(a1 + 1488);
  *(float *)(a1 + 72) = v11;
  *(float *)(a1 + 76) = v12;
  *(float *)(a1 + 80) = v13;
  float v14 = *(double *)(a1 + 1512);
  *(float32x2_t *)(a1 + 96) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1496));
  *(float *)(a1 + 104) = v14;
  float v15 = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 120) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 12_Block_object_dispose(va, 8) = v15;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = *(void *)(a1 + 1596);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 1604);
  if (*(_BYTE *)(a1 + 25))
  {
    *(float *)(a1 + 520) = v11;
    *(float *)(a1 + 524) = v12;
    *(float *)(a1 + 52_Block_object_dispose(va, 8) = v13;
  }

  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  float v16 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a1 + 1472);
    uint64_t v18 = *(void *)(a1 + 1480);
    uint64_t v19 = *(void *)(a1 + 1488);
    uint64_t v20 = *(void *)(a1 + 1496);
    uint64_t v21 = *(void *)(a1 + 1504);
    uint64_t v22 = *(void *)(a1 + 1512);
    uint64_t v23 = *(void *)(a1 + 1520);
    uint64_t v24 = *(void *)(a1 + 1528);
    uint64_t v25 = *(void *)(a1 + 1536);
    *(_DWORD *)uint64_t buf = 134220032;
    uint64_t v57 = v17;
    __int16 v58 = 2048;
    uint64_t v59 = v18;
    __int16 v60 = 2048;
    uint64_t v61 = v19;
    __int16 v62 = 2048;
    uint64_t v63 = v20;
    __int16 v64 = 2048;
    uint64_t v65 = v21;
    __int16 v66 = 2048;
    uint64_t v67 = v22;
    __int16 v68 = 2048;
    uint64_t v69 = v23;
    __int16 v70 = 2048;
    uint64_t v71 = v24;
    __int16 v72 = 2048;
    uint64_t v73 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f",  buf,  0x5Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    uint64_t v26 = *(void *)(a1 + 1472);
    uint64_t v27 = *(void *)(a1 + 1480);
    uint64_t v28 = *(void *)(a1 + 1488);
    uint64_t v29 = *(void *)(a1 + 1496);
    uint64_t v30 = *(void *)(a1 + 1504);
    uint64_t v31 = *(void *)(a1 + 1512);
    uint64_t v32 = *(void *)(a1 + 1520);
    uint64_t v33 = *(void *)(a1 + 1528);
    uint64_t v34 = *(void *)(a1 + 1536);
    int v38 = 134220032;
    uint64_t v39 = v26;
    __int16 v40 = 2048;
    uint64_t v41 = v27;
    __int16 v42 = 2048;
    uint64_t v43 = v28;
    __int16 v44 = 2048;
    uint64_t v45 = v29;
    __int16 v46 = 2048;
    uint64_t v47 = v30;
    __int16 v48 = 2048;
    uint64_t v49 = v31;
    __int16 v50 = 2048;
    uint64_t v51 = v32;
    __int16 v52 = 2048;
    uint64_t v53 = v33;
    __int16 v54 = 2048;
    uint64_t v55 = v34;
    LODWORD(v37) = 92;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f",  COERCE_DOUBLE(&v38),  v37);
    int v36 = (uint8_t *)v35;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAttitudeDependentKFCalibrator::setCalibrationValues()", "%s\n", v35);
    if (v36 != buf) {
      free(v36);
    }
  }

float32_t sub_1007B22F4(float32x2_t *a1, float *a2, float32x2_t *a3, double *a4)
{
  float v7 = a1[48].f32[0];
  float v8 = a1[47].f32[0];
  float v9 = a1[47].f32[1];
  uint64_t v10 = 51LL;
  if (!a1[23].i8[0]) {
    uint64_t v10 = 31LL;
  }
  uint64_t v11 = 25LL;
  if (!a1[23].i8[0]) {
    uint64_t v11 = 15LL;
  }
  uint64_t v12 = 26LL;
  if (!a1[23].i8[0]) {
    uint64_t v12 = 16LL;
  }
  float v13 = a1[v12].f32[0];
  float v14 = a1[v11].f32[0];
  float v15 = a1->f32[v10];
  float v16 = (float)((float)(v15 * a1[50].f32[1]) + (float)(v14 * a1[50].f32[0])) + (float)(v13 * a1[51].f32[0]);
  a2[2] = (float)((float)(v15 * a1[44].f32[1]) + (float)(v14 * a1[44].f32[0])) + (float)(v13 * a1[45].f32[0]);
  a2[3] = (float)((float)(v15 * v9) + (float)(v14 * v8)) + (float)(v13 * v7);
  a2[4] = v16;
  return sub_1007B1EDC(a1, a3);
}

float32_t sub_1007B23BC(float32x2_t *a1, float32x2_t *a2, double *a3)
{
  if (!a1[23].i8[0]) {
    return sub_1007B1EDC(a1, a2);
  }
  sub_1007A9F9C(a1 + 42, a3);
  float v6 = a1[25].f32[1];
  float v5 = a1[26].f32[0];
  float v7 = a1[25].f32[0];
  float32_t v8 = (float)((float)(v6 * a1[50].f32[1]) + (float)(v7 * a1[50].f32[0])) + (float)(v5 * a1[51].f32[0]);
  float32_t v9 = (float)((float)(v6 * a1[47].f32[1]) + (float)(v7 * a1[47].f32[0])) + (float)(v5 * a1[48].f32[0]);
  float32_t result = (float)((float)(v6 * a1[44].f32[1]) + (float)(v7 * a1[44].f32[0])) + (float)(v5 * a1[45].f32[0]);
  a2[1].f32[0] = result;
  a2[1].f32[1] = v9;
  a2[2].f32[0] = v8;
  return result;
}

float sub_1007B245C(uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = *a2;
  float result = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  return result;
}

float sub_1007B2490(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a2 = *(void *)(a1 + 72);
  float result = *(float *)(a1 + 80);
  *(float *)(a2 + _Block_object_dispose(va, 8) = result;
  *a3 = *(_DWORD *)(a1 + 20);
  return result;
}

BOOL sub_1007B24AC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 0;
}

BOOL sub_1007B24BC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 3;
}

uint64_t sub_1007B24CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_1007B24D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1007B24DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 332);
}

uint64_t sub_1007B24E4()
{
  return 5LL;
}

uint64_t sub_1007B24EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 59);
}

void sub_1007B24F4(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_1007B2520()
{
  if (qword_1019A1628) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1628 + 8LL))(qword_1019A1628);
  }
  if (qword_1019A1630) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1630 + 8LL))(qword_1019A1630);
  }
  uint64_t result = qword_1019A1638;
  if (qword_1019A1638) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A1638 + 8LL))(qword_1019A1638);
  }
  return result;
}

void sub_1007B257C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101998A20 & 1) == 0)
  {
    byte_101998A20 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc",  a4);
    double v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    v4[2] = 0LL;
    void *v4 = &off_10184F778;
    qword_1019A1628 = (uint64_t)v4;
    float v5 = (char *)operator new(0x28uLL);
    *(void *)float v5 = off_10184F7F0;
    *(_OWORD *)(v5 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    qword_1019A1630 = (uint64_t)v5;
    float v6 = operator new(0x28uLL);
    void v6[3] = 0LL;
    v6[4] = 0LL;
    qword_1019A1638 = (uint64_t)v6;
    v4[1] = v6;
    void *v6 = off_10184F868;
    v6[1] = v5;
    _OWORD v6[2] = v5;
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1007B2520,  v7);
  }

void *sub_1007B2654(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_10184F778;
  return result;
}

void sub_1007B2668(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc",  204LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    float v5 = *(char **)(a1 + 8);
    if (!v5)
    {
      float v5 = (char *)operator new(0x28uLL);
      *(void *)float v5 = off_10184F868;
      *(_OWORD *)(v5 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1628 + 8);
    }
    sub_1007B2B14((uint64_t)v5, v6);
  }

void sub_1007B272C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1007B2744(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10184F778;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1628 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1007B2798(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1007B27AC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1628;
  if (!qword_1019A1628)
  {
    sub_1007B257C(0LL, a2, a3, a4);
    return qword_1019A1628;
  }

  return result;
}

void *sub_1007B27D8()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_10184F778;
  return result;
}

uint64_t sub_1007B2800(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1007B2834(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_1007B2834(uint64_t result)
{
  LOBYTE(v1) = *(_BYTE *)(result + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v2 + 16) = 0LL;
          *(void *)(v2 + 24) = 0LL;
        }

        *(_DWORD *)(v2 + 36) = 0;
        int v1 = *(_DWORD *)(result + 36);
      }
    }

    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
        }

        *(_DWORD *)(v3 + 36) = 0;
      }
    }

    *(void *)(result + 24) = 0LL;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1007B288C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      float v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        char v7 = (char *)operator new(0x28uLL);
        *(void *)char v7 = off_10184F868;
        *(_OWORD *)(v7 + _Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      float32_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_1007B2A30( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1628 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_1007B2A5C(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1628 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1007B364C(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_1007B2AC8(uint64_t a1, void *lpsrc)
{
}

void sub_1007B2B14(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc",  733LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      unsigned int v6 = *(char **)(a1 + 8);
      if (!v6)
      {
        unsigned int v6 = (char *)operator new(0x28uLL);
        *(void *)unsigned int v6 = off_10184F7F0;
        *(_OWORD *)(v6 + _Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A1638 + 8);
      }
      sub_1007B2CB8((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }

    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }

    *(_DWORD *)(a1 + 36) |= 2u;
    int v8 = *(char **)(a1 + 16);
    if (!v8)
    {
      int v8 = (char *)operator new(0x28uLL);
      *(void *)int v8 = off_10184F7F0;
      *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(void *)(a1 + 16) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1638 + 16);
    }
    sub_1007B2CB8((uint64_t)v8, v9);
    int v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return;
      }
LABEL_20:
      unsigned int v11 = *(_DWORD *)(a2 + 28);
      if (v11 >= 3) {
        sub_10124AE00();
      }
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v11;
      return;
    }

void sub_1007B2C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1007B2CA0()
{
  return 1LL;
}

void *sub_1007B2CA8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.TropicalSavanna.LogEntry");
}

double sub_1007B2CB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc",  427LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + _Block_object_dispose(va, 8) = result;
      int v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }

    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }

    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }

  return result;
}

void sub_1007B2D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1007B2DA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184F7F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1007B2DB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184F7F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_1007B2DD0()
{
  uint64_t v0 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v0 = off_10184F7F0;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_1007B2E00(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1007B2E18( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0LL;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          int v10 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }

      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }

      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_1007B2FD0( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v4 + 16),  a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  }
  return result;
}

uint64_t sub_1007B3048(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    unsigned int v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }

  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_1007B3080(uint64_t a1, void *lpsrc)
{
  return sub_1007B2CB8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1007B30CC()
{
  return 1LL;
}

void *sub_1007B30D4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.TropicalSavanna.TimeStamp");
}

void *sub_1007B30E4(void *result)
{
  if ((void *)qword_1019A1638 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1007B3140(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184F868;
  sub_1007B30E4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1007B3170(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10184F868;
  sub_1007B30E4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_1007B31A4()
{
  uint64_t v0 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v0 = off_10184F868;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_1007B31D4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 24);
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = *(char **)(a1 + 8);
        if (!v9)
        {
          uint64_t v9 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v9 = off_10184F7F0;
          *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v9 + 24) = 0u;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
        }

        int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v35)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v35 = *v10;
          *((void *)this + 1) = v10 + 1;
        }

        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0LL;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        uint64_t v21 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v21 + 1;
        goto LABEL_33;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
LABEL_33:
        *(_DWORD *)(a1 + 36) |= 2u;
        uint64_t v22 = *(char **)(a1 + 16);
        if (!v22)
        {
          uint64_t v22 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v22 = off_10184F7F0;
          *(_OWORD *)(v22 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(void *)(a1 + 16) = v22;
        }

        uint64_t v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v36)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v36 = *v23;
          *((void *)this + 1) = v23 + 1;
        }

        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 < v25)
        {
          int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
          if (sub_1007B2E18((uint64_t)v22, this, v27))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
              int v28 = *((_DWORD *)this + 14);
              BOOL v19 = __OFSUB__(v28, 1);
              int v29 = v28 - 1;
              if (v29 < 0 == v19) {
                *((_DWORD *)this + 14) = v29;
              }
              uint64_t v30 = (_BYTE *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
              if ((unint64_t)v30 < v11 && *v30 == 24)
              {
                unint64_t v12 = v30 + 1;
                *((void *)this + 1) = v12;
LABEL_47:
                if ((unint64_t)v12 >= v11 || *v12 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  uint64_t v31 = (_BYTE *)*((void *)this + 1);
                  unint64_t v11 = *((void *)this + 2);
                }

                else
                {
                  *uint64_t v5 = *v12;
                  uint64_t v31 = v12 + 1;
                  *((void *)this + 1) = v31;
                }

                *(_DWORD *)(a1 + 36) |= 4u;
                if ((unint64_t)v31 < v11 && *v31 == 32)
                {
                  int v13 = v31 + 1;
                  *((void *)this + 1) = v13;
LABEL_55:
                  if ((unint64_t)v13 >= v11 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v34);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v33 = v34;
                  }

                  else
                  {
                    unsigned int v33 = *v13;
                    *((void *)this + 1) = v13 + 1;
                  }

                  if (v33 <= 2)
                  {
                    *(_DWORD *)(a1 + 36) |= 8u;
                    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v33;
                  }

                  if (*((void *)this + 1) == *((void *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
                    uint64_t result = 1LL;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v8 = TagFallback & 7;
        unint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      case 4u:
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_55;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1007B3598( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1638 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1638 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  }

uint64_t sub_1007B364C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_37;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_1019A1638 + 8);
  }
  int v6 = *(unsigned __int8 *)(v5 + 36);
  if (*(_BYTE *)(v5 + 36))
  {
    int v7 = (v6 << 31 >> 31) & 9;
    if ((v6 & 2) != 0) {
      v7 += 9;
    }
    if ((v6 & 4) != 0) {
      int v6 = v7 + 9;
    }
    else {
      int v6 = v7;
    }
  }

  *(_DWORD *)(v5 + 32) = v6;
  uint64_t v4 = (v6 + 2);
  int v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1638 + 16);
    }
    int v9 = *(unsigned __int8 *)(v8 + 36);
    if (*(_BYTE *)(v8 + 36))
    {
      int v10 = (v9 << 31 >> 31) & 9;
      if ((v9 & 2) != 0) {
        v10 += 9;
      }
      if ((v9 & 4) != 0) {
        int v9 = v10 + 9;
      }
      else {
        int v9 = v10;
      }
    }

    *(_DWORD *)(v8 + 32) = v9;
    uint64_t v4 = (v4 + v9 + 2);
    int v3 = *(_DWORD *)(a1 + 36);
  }

void sub_1007B3790(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1007B37DC()
{
  return 1LL;
}

void *sub_1007B37E4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.TropicalSavanna.TropicalSavannaHint");
}

void sub_1007B3838(id a1)
{
  if ((sub_1004F7000() & 1) != 0 || (sub_1004F75F8() & 1) != 0 || (sub_1004F2598(), (sub_1004F77BC() & 1) != 0))
  {
    byte_101998A28 = 1;
  }

  else
  {
    if (qword_101934A10 != -1) {
      dispatch_once(&qword_101934A10, &stru_10184F958);
    }
    uint64_t v1 = (os_log_s *)qword_101934A18;
    if (os_log_type_enabled((os_log_t)qword_101934A18, OS_LOG_TYPE_INFO))
    {
      objc_opt_class(&OBJC_CLASS___CLSuggestedActionManager);
      *(_DWORD *)uint64_t buf = 136446210;
      int v10 = -[NSString UTF8String](NSStringFromClass(v2), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%{public}s not supported on this device type",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A10 != -1) {
        dispatch_once(&qword_101934A10, &stru_10184F958);
      }
      uint64_t v3 = qword_101934A18;
      objc_opt_class(&OBJC_CLASS___CLSuggestedActionManager);
      int v7 = 136446210;
      uint64_t v8 = -[NSString UTF8String](NSStringFromClass(v4), "UTF8String");
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v3,  1LL,  "%{public}s not supported on this device type",  &v7,  12);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "+[CLSuggestedActionManager(IsSupported) isSupported]_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

void sub_1007B3AD0(id a1)
{
  qword_101998A38 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSuggestedActionManagerSilo");
}

void sub_1007B3BA0(id a1)
{
  qword_101934A18 = (uint64_t)os_log_create("com.apple.locationd.Core", "SAM");
}

BOOL sub_1007B3BCC(int a1)
{
  return (a1 - 32112928) < 0x2C0DA0;
}

uint64_t sub_1007B3BEC()
{
  uint64_t v0 = operator new(0xF0uLL);
  uint64_t result = sub_1007B3C74((uint64_t)v0);
  qword_1019A1640 = (uint64_t)v0;
  return result;
}

void sub_1007B3C1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1007B3C30()
{
  if (qword_101998A48 != -1) {
    dispatch_once(&qword_101998A48, &stru_10184F9F8);
  }
  return qword_1019A1640;
}

uint64_t sub_1007B3C74(uint64_t a1)
{
  Class v2 = sub_100E65440((char *)a1);
  *(void *)Class v2 = off_10184FA28;
  *((_DWORD *)v2 + 40) = 0;
  *((_WORD *)v2 + 82) = 0;
  *(_OWORD *)(v2 + 16_Block_object_dispose(va, 8) = xmmword_1012E0BB0;
  *((_DWORD *)v2 + 46) = 0;
  *((void *)v2 + 24) = 0LL;
  *((void *)v2 + 25) = 0LL;
  *((void *)v2 + 26) = __stderrp;
  *((void *)v2 + 2_Block_object_dispose(va, 8) = 0LL;
  *((void *)v2 + 29) = 0LL;
  std::string::assign((std::string *)(v2 + 112), ".log");
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.locationd.log.compression", 0LL);
  *(void *)(a1 + 216) = v3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(-32768LL, 0LL);
  dispatch_set_target_queue(v3, global_queue);
  return a1;
}

void sub_1007B3D24(_Unwind_Exception *a1)
{
}

void *sub_1007B3D40(uint64_t a1)
{
  *(void *)a1 = off_10184FA28;
  sub_1007B3D8C(a1, 0LL, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 216));
  sub_10000AE14(a1 + 224);
  return sub_100E6557C((void *)a1);
}

uint64_t sub_1007B3D8C(uint64_t a1, FILE *a2, char a3)
{
  int v6 = (void *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  int v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(void *)(a1 + 192) = a2;
    if (v7 && *(_BYTE *)(a1 + 164)) {
      fclose(v7);
    }
    *(_BYTE *)(a1 + 164) = a3;
  }

  return (*(uint64_t (**)(void *))(*v6 + 24LL))(v6);
}

void sub_1007B3E08(uint64_t a1)
{
  uint64_t v1 = sub_1007B3D40(a1);
  operator delete(v1);
}

uint64_t sub_1007B3E1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  sub_1007B3EDC(a1, a2, a3, a4, a5, a6, &a9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
}

void sub_1007B3EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1007B3EDC( uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7)
{
  va_list v21 = a7;
  uint64_t v13 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  unsigned int v14 = vsnprintf(__str, 0x1FFuLL, a6, v21);
  if ((v14 & 0x80000000) == 0)
  {
    unsigned int v15 = v14;
    if (v14 < 0x1FF)
    {
      int v16 = 0LL;
      unsigned int v17 = __str;
    }

    else
    {
      int v16 = (char *)operator new[](v14 + 2);
      unsigned int v17 = v16;
    }

    uint64_t v18 = (int)v15 - 1LL;
    if (v17[v18] != 10) {
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    }
    if (v15 >= 2)
    {
      uint64_t v18 = v18;
      BOOL v19 = v17;
      do
      {
        if (*v19 == 10) {
          *BOOL v19 = 32;
        }
        ++v19;
        --v18;
      }

      while (v18);
    }

    sub_1007B40EC(a1, a2, a3, a4, a5, v17);
    if (v16) {
      operator delete[](v16);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
}

void sub_1007B40AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1007B40EC(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 160))
  {
    uint64_t v13 = *(FILE **)(a1 + 208);
    unsigned int v14 = sub_1002920B8(a4);
    fprintf(v13, "%s,%s,Time,%08.3f,Function,%s,", v14, a2, Current, a5);
    fputs(a6, *(FILE **)(a1 + 208));
  }

  else
  {
    unsigned int v15 = *(FILE **)(a1 + 192);
    if (v15 && *(_DWORD *)(a1 + 168) >= a4)
    {
      int v16 = sub_1002920B8(a4);
      fprintf(v15, "%s,%s,Time,%08.3f,Function,%s,", v16, a2, Current, a5);
      fputs(a6, *(FILE **)(a1 + 192));
      if (*(_DWORD *)(a1 + 180) >= a4) {
        sub_1007B44FC(a1, 3, *(FILE **)(a1 + 192));
      }
      sub_1007B46D8(a1);
    }

    unsigned int v17 = *(FILE **)(a1 + 200);
    if (v17 && *(_DWORD *)(a1 + 172) >= a4)
    {
      uint64_t v18 = sub_1002920B8(a4);
      fprintf(v17, "%s,%s,Time,%08.3f,", v18, a2, Current);
      fputs(a6, *(FILE **)(a1 + 200));
    }

    if ((!a3 || *(_DWORD *)(a1 + 184)) && *(_DWORD *)(a1 + 176) >= a4)
    {
      if (a4) {
        int v19 = 5;
      }
      else {
        int v19 = 3;
      }
      syslog(v19, "%s", a6);
    }
  }

uint64_t sub_1007B4284( uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  int v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_1007B4338(v13, __dst);
  return sub_1007B3EDC(a1, a2, a3, a4, a5, __dst, a7);
}

BOOL sub_1007B4338(int a1, char *__s)
{
  int64_t v3 = strlen(__s);
  if (v3 < 1) {
    return 1LL;
  }
  Class v4 = &__s[v3];
  uint64_t v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      int v6 = v5;
      goto LABEL_18;
    }

    int v6 = v5 + 1;
    int v7 = v5[1];
    if (v7 == 123) {
      break;
    }
LABEL_11:
    int v6 = v5 + 1;
    int v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46) {
        goto LABEL_18;
      }
      if (v5[2] != 42) {
        goto LABEL_18;
      }
      int v12 = v5 + 3;
      if (v5[3] != 80) {
        goto LABEL_18;
      }
      *(_WORD *)(v5 + 1) = 9572;
    }

    *int v12 = 112;
LABEL_18:
    uint64_t v5 = v6 + 1;
    if (v6 + 1 >= v4) {
      return 1LL;
    }
  }

  if (v6 != v4)
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      int v9 = &v5[v8 + 2];
      if (v9 == v4) {
        break;
      }
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1) {
          goto LABEL_18;
        }
        int v10 = &v5[v8];
        uint64_t v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        int v7 = v10[2];
        uint64_t v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10184FB00);
  }
  unsigned int v14 = (os_log_s *)qword_101934988;
  BOOL result = os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10124AE28((uint64_t)__s, v14);
    return 0LL;
  }

  return result;
}

BOOL sub_1007B44A8(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
  {
    if (*(void *)(a1 + 144)) {
      goto LABEL_5;
    }
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 159)) {
    return 0LL;
  }
LABEL_5:
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 87);
  }
  return v1 != 0;
}

uint64_t sub_1007B44FC(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v6 = a1 + 48;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v12 = a1 + 48;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 48);
  __int16 v13 = 256;
  CFAbsoluteTimeGetCurrent();
  int v7 = backtrace(v14, 128);
  int v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    int v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }

        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }

      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }

      ++v9;
      ++v8;
    }

    while (v7 != v8);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

void sub_1007B46AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007B46D8(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  v5[1] = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v6 = 256;
  if (sub_1007B44A8(a1))
  {
    fgetpos(*(FILE **)(a1 + 192), v5);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_1007B475C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1007B4774(uint64_t a1)
{
  int v42 = 0;
  sub_1002A7CB0(*(void *)(a1 + 24), "LogBufferSize", &v42);
  v44[0] = @"Level";
  uint64_t v2 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 168));
  v44[1] = @"RotationEnabled";
  v45[0] = v2;
  v45[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1007B44A8(a1));
  sub_100E575BC( (uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v45,  v44,  2LL),  (uint64_t)"LogLevel");
  if ((*(_DWORD *)(a1 + 168) & 0x80000000) != 0)
  {
    sub_1007B3D8C(a1, 0LL, 0);
    goto LABEL_75;
  }

  uint64_t v3 = *(void *)(a1 + 192);
  memset(&__p, 0, sizeof(__p));
  if (!sub_1002A8560(*(void *)(a1 + 24), "LogFile", &__p)) {
    goto LABEL_6;
  }
  std::string::size_type size = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_6:
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(void *)(a1 + 72)) {
        goto LABEL_43;
      }
    }

    else if (!*(_BYTE *)(a1 + 87))
    {
      goto LABEL_43;
    }

    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(void *)(a1 + 96)) {
        goto LABEL_43;
      }
    }

    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_43;
    }

    else {
      size_t v5 = *(void *)(a1 + 72);
    }
    __int16 v6 = &v39;
    sub_1000392EC((uint64_t)&v39, v5 + 1);
    if ((v39.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v6 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      else {
        int v7 = *(const void **)(a1 + 64);
      }
      memmove(v6, v7, v5);
    }

    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + sub_1012279C0(0LL, v4, v5) = 47;
    int v8 = *(char *)(a1 + 111);
    if (v8 >= 0) {
      int v9 = (const std::string::value_type *)(a1 + 88);
    }
    else {
      int v9 = *(const std::string::value_type **)(a1 + 88);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 96);
    }
    Dl_info v11 = std::string::append(&v39, v9, v10);
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    int v13 = *(char *)(a1 + 135);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)(a1 + 112);
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)(a1 + 112);
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      std::string::size_type v15 = *(void *)(a1 + 120);
    }
    int v16 = std::string::append(&v40, v14, v15);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    v43[0] = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v18 = v16->__r_.__value_.__s.__size_;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v17;
    __p.__r_.__value_.__l.__size_ = v43[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v43 + 7);
    __p.__r_.__value_.__s.__size_ = v18;
  }

void sub_1007B4D80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007B4DF4(uint64_t a1, char *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  if (a2)
  {
    uid_t v5 = getuid();
    gid_t v6 = getgid();
    sub_100292C04(a2, v5, v6);
    int v7 = fopen(a2, "a");
    if (v7)
    {
      std::string::assign((std::string *)(a1 + 136), a2);
      sub_1007B3D8C(a1, v7, 1);
      sub_1007B4F08(a1, *(unsigned __int8 *)(a1 + 165));
      sub_1007B5B04(a1);
    }

    else
    {
      int v8 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v8);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1007B4EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1007B4F08(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  *(_BYTE *)(v3 + 117) = a2 != 0;
  uint64_t v4 = *(FILE **)(v3 + 144);
  if (v4) {
    setvbuf(v4, 0LL, a2 != 0, 0LL);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

uint64_t sub_1007B4F74(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v44 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v45 = 256;
  sub_1010DDBC0(v34, ".log");
  uint64_t v4 = sub_100E66410();
  sub_100E6601C((const void **)(v3 + 16), v3 + 40, (uint64_t)v34, (uint64_t)v4, &v43);
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = v43.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = v43.__r_.__value_.__l.__size_;
  }
  gid_t v6 = &v41;
  sub_1000392EC((uint64_t)&v41, size + 4);
  if (v42 < 0) {
    gid_t v6 = (__int128 *)v41;
  }
  if (size)
  {
    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v7 = &v43;
    }
    else {
      int v7 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }

  strcpy((char *)v6 + size, ".bz2");
  sub_1007B54BC(a1);
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v8 = &v43;
  }
  else {
    int v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  uid_t v9 = getuid();
  gid_t v10 = getgid();
  sub_100292C04(v8, v9, v10);
  Dl_info v11 = (char *)(a1 + 136);
  __int128 v12 = (const char *)(a1 + 136);
  if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v13 = &v43;
  }
  else {
    int v13 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if (!sub_100292D88(v12, (const char *)v13))
  {
    int v14 = SHIBYTE(v42);
    std::string::size_type v15 = (const char *)v41;
    int v16 = __error();
    std::string::size_type v17 = (const char *)&v41;
    if (v14 < 0) {
      std::string::size_type v17 = v15;
    }
    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v17, *v16);
  }

  sub_1007B4DF4(a1, v11);
  if (*(char *)(a1 + 111) < 0)
  {
    sub_1010DD48C(&__dst, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }

  else
  {
    __int128 __dst = *(_OWORD *)(v3 + 40);
    uint64_t v40 = *(void *)(v3 + 56);
  }

  if (*(char *)(a1 + 87) < 0)
  {
    sub_1010DD48C(&v37, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }

  else
  {
    __int128 v37 = *(_OWORD *)(v3 + 16);
    uint64_t v38 = *(void *)(v3 + 32);
  }

  int v18 = *(_DWORD *)(a1 + 16);
  v34[0] = 0LL;
  v34[1] = v34;
  uint64_t v35 = 0x2020000000LL;
  int v36 = 0;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768LL;
  _DWORD v28[2] = sub_1007B5508;
  v28[3] = &unk_10184FA50;
  v28[5] = a1;
  if (SHIBYTE(v40) < 0)
  {
    sub_1010DD48C(&v29, (void *)__dst, *((unint64_t *)&__dst + 1));
  }

  else
  {
    __int128 v29 = __dst;
    uint64_t v30 = v40;
  }

  v28[4] = v34;
  int v33 = v18;
  if (SHIBYTE(v38) < 0)
  {
    sub_1010DD48C(&v31, (void *)v37, *((unint64_t *)&v37 + 1));
  }

  else
  {
    __int128 v31 = v37;
    uint64_t v32 = v38;
  }

  std::string::size_type v19 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1007B58F8;
  block[3] = &unk_10184FA88;
  int v27 = v18;
  else {
    std::string v22 = v43;
  }
  if (SHIBYTE(v42) < 0)
  {
    sub_1010DD48C(&v23, (void *)v41, *((unint64_t *)&v41 + 1));
  }

  else
  {
    __int128 v23 = v41;
    uint64_t v24 = v42;
  }

  if (SHIBYTE(v38) < 0)
  {
    sub_1010DD48C(&__p, (void *)v37, *((unint64_t *)&v37 + 1));
  }

  else
  {
    __int128 __p = v37;
    uint64_t v26 = v38;
  }

  block[4] = v28;
  dispatch_async(v19, block);
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  _Block_object_dispose(v34, 8);
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_1007B53C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Block_object_dispose((const void *)(v51 - 240), 8);
  sub_1011C52D0(v51 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B54BC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v2 = (FILE *)v1[18];
  if (v2) {
    fflush(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24LL))(v1);
}

uint64_t sub_1007B5508(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  sub_1010DDBC0(v21, a2);
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  gid_t v6 = v19;
  sub_1000392EC((uint64_t)v19, v5 + 1);
  if (v20 < 0) {
    gid_t v6 = (void **)v19[0];
  }
  if (v5)
  {
    else {
      int v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }

  *(_WORD *)((char *)v6 + sub_1012279C0(0LL, v4, v5) = 95;
  if (sub_100E6641C(v4, (char **)v21, (char *)v19))
  {
    sub_1010DDBC0(v17, a2);
    sub_1010DDBC0(v15, ".log.bz2");
    if ((sub_100E664F0(v4, v17, (char *)v15) & 1) != 0)
    {
      int v8 = 1;
    }

    else
    {
      sub_1010DDBC0(v13, a2);
      sub_1010DDBC0(__p, ".log");
      int v8 = sub_100E664F0(v4, v13, (char *)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }

    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  else
  {
    int v8 = 0;
  }

  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8) {
      return 1LL;
    }
  }

  else if (!v8)
  {
    return 1LL;
  }

  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    uid_t v9 = (const char *)(a1 + 72);
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }

    else if (!sub_100292D50((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }

  return 1LL;
}

void sub_1007B5770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1007B5814(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  }

  BOOL result = (_BYTE *)(a1 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a2 + 88);
  *(_OWORD *)BOOL result = v6;
  return result;
}

void sub_1007B5898(_Unwind_Exception *exception_object)
{
}

void sub_1007B58B4(uint64_t a1)
{
}

void sub_1007B58F8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_7;
  }
  uint64_t v2 = (const char *)(a1 + 40);
  uint64_t v3 = (const char *)(a1 + 64);
  __int128 v4 = (const char *)(a1 + 64);
  if (!sub_100294D20(v2, v4))
  {
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v3);
  }

  else
  {
LABEL_7:
    size_t v5 = (const char *)(a1 + 40);
    sub_100292D50(v5);
  }

  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    __int128 v6 = (void *)(a1 + 88);
    sub_1007BD82C((uint64_t)v6, *(void *)(a1 + 32));
  }

_BYTE *sub_1007B59C8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }

  if (*(char *)(a2 + 87) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }

  BOOL result = (_BYTE *)(a1 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)BOOL result = v7;
  return result;
}

void sub_1007B5A7C(_Unwind_Exception *exception_object)
{
}

void sub_1007B5AB0(uint64_t a1)
{
}

void sub_1007B5B04(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 192);
  if (v2) {
    sub_1002961E4(v2);
  }
  sub_1004F2598();
  sub_1004F5DC4((uint64_t)__p);
  if (__p[23] >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = *(char **)__p;
  }
  sub_1010DDBC0(&v31, v3);
  if (__p[23] < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type size = v31.__r_.__value_.__s.__size_;
  signed __int8 v5 = v31.__r_.__value_.__s.__size_;
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&v31, "Unplugged!");
    signed __int8 v5 = v31.__r_.__value_.__s.__size_;
  }

  bzero(__p, 0x65CuLL);
  __int128 v6 = &v31;
  if (v5 < 0) {
    __int128 v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v6);
  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v7,  v8,  (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Nov 21 2024", "21:16:27");
  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v9,  v10,  (uint64_t)__p);
  bufstd::string::size_type size = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    bzero(__p, 0x65CuLL);
    uint64_t v11 = sub_1004F2598();
    char v12 = v28;
    sub_1004F58C8(v11, (uint64_t)v28);
    if (v29 < 0) {
      char v12 = (void **)v28[0];
    }
    sub_1004F2598();
    sub_1004F54FC((uint64_t)v26);
    if (v27 >= 0) {
      int v13 = v26;
    }
    else {
      int v13 = (void **)v26[0];
    }
    snprintf( __p,  0x65CuLL,  "/usr/libexec/locationd @ system model %s / version %s\n",  (const char *)v12,  (const char *)v13);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }

  else
  {
    bzero(__p, 0x65CuLL);
    uint64_t v16 = sub_1004F2598();
    std::string::size_type v17 = v28;
    sub_1004F58C8(v16, (uint64_t)v28);
    if (v29 < 0) {
      std::string::size_type v17 = (void **)v28[0];
    }
    sub_1004F2598();
    sub_1004F54FC((uint64_t)v26);
    if (v27 >= 0) {
      char v18 = v26;
    }
    else {
      char v18 = (void **)v26[0];
    }
    snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v17, (const char *)v18);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }

  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v14,  v15,  (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  sub_1004F2598();
  sub_1004F6004((uint64_t)v28);
  if (v29 >= 0) {
    std::string::size_type v19 = v28;
  }
  else {
    std::string::size_type v19 = (void **)v28[0];
  }
  snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v19);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v20,  v21,  (uint64_t)__p);
  bzero(v34, 0x5EAuLL);
  strcpy( __p,  "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v22,  v23,  (uint64_t)__p);
  (*(void (**)(void))(**(void **)(a1 + 24) + 792LL))(*(void *)(a1 + 24));
  bzero(&__p[19], 0x649uLL);
  strcpy(__p, "End settings dump\n");
  sub_1007B3E1C( a1,  (uint64_t)"Generic",  0LL,  2LL,  (uint64_t)"void CLLog::logHeader()",  (uint64_t)"%s\n",  v24,  v25,  (uint64_t)__p);
}

void sub_1007B5F98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007B6018(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  v3[34] = a2;
  return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 24LL))(v3);
}

BOOL sub_1007B6060(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  int v2 = v1[34];
  (*(void (**)(_DWORD *))(*(void *)v1 + 24LL))(v1);
  return v2 != 0;
}

uint64_t sub_1007B60AC(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v2 = v1[115];
  (*(void (**)(unsigned __int8 *))(*(void *)v1 + 24LL))(v1);
  return v2;
}

void sub_1007B60F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v82 = a1 + 48;
  (*(void (**)(void))(v2 + 16))();
  __int16 v84 = 256;
  uint64_t v3 = sub_100E66410();
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1010DD48C(&__dst, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }

  else
  {
    __int128 __dst = *(_OWORD *)(a1 + 64);
    uint64_t v81 = *(void *)(a1 + 80);
  }

  if (*(char *)(a1 + 111) < 0)
  {
    sub_1010DD48C(&v78, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }

  else
  {
    __int128 v78 = *(_OWORD *)(a1 + 88);
    uint64_t v79 = *(void *)(a1 + 104);
  }

  if (*(void *)(a1 + 224))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_100E66344(a1, __p);
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v4 = __p;
    }
    else {
      __int128 v4 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    signed __int8 v5 = fopen((const char *)v4, "a");
    __int128 v6 = v5;
    if ((char)__p[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v6) {
        goto LABEL_13;
      }
    }

    else if (v5)
    {
LABEL_13:
      sub_1007BC288(*(void *)(a1 + 224), v6);
      fclose(v6);
      char v7 = 1;
      goto LABEL_16;
    }
  }

  char v7 = 0;
LABEL_16:
  if (v81 >= 0) {
    p_dst = (const char *)&__dst;
  }
  else {
    p_dst = (const char *)__dst;
  }
  if (sub_100292D28(p_dst))
  {
    char v9 = HIBYTE(v81);
    if (v81 >= 0) {
      uint64_t v10 = &__dst;
    }
    else {
      uint64_t v10 = (__int128 *)__dst;
    }
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3321888768LL;
    v73[2] = sub_1007B6DFC;
    v73[3] = &unk_10184FAB8;
    v73[4] = a1;
    if (SHIBYTE(v79) < 0)
    {
      sub_1010DD48C(&v74, (void *)v78, *((unint64_t *)&v78 + 1));
      char v9 = HIBYTE(v81);
    }

    else
    {
      __int128 v74 = v78;
      uint64_t v75 = v79;
    }

    if (v9 < 0)
    {
      sub_1010DD48C(&v76, (void *)__dst, *((unint64_t *)&__dst + 1));
    }

    else
    {
      __int128 v76 = __dst;
      uint64_t v77 = v81;
    }

    sub_1007BD82C((uint64_t)v10, (uint64_t)v73);
    if (SHIBYTE(v77) < 0) {
      operator delete((void *)v76);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete((void *)v74);
    }
  }

  sub_1007B54BC(a1);
  uint64_t v11 = (char *)(a1 + 136);
  char v12 = (const char *)(a1 + 136);
  if (sub_100292D28(v12))
  {
    sub_100E66344(a1, __p);
    int v13 = (const char *)(a1 + 136);
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    sub_100292D88(v13, (const char *)v14);
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    sub_100292BC4((const char *)v15);
    sub_1007B4DF4(a1, v11);
    char v7 = 1;
  }

  BOOL v72 = 0;
  sub_1002F0B04(__p);
  if ((sub_1002A6F64((uint64_t)__p[0].__r_.__value_.__l.__data_, "LogNatalimetry", &v72) & 1) != 0)
  {
    char v16 = 1;
  }

  else
  {
    sub_1002F0B04(&v68);
    char v16 = sub_1002A6F64(v68, "LogCalorimetry", &v72);
    std::string::size_type v17 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1))
    {
      char v18 = (unint64_t *)(*((void *)&v68 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

  std::string::size_type size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (!__p[0].__r_.__value_.__l.__size_) {
    goto LABEL_60;
  }
  uint64_t v21 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
  do
    unint64_t v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_60:
    if ((v16 & 1) != 0) {
      goto LABEL_61;
    }
LABEL_65:
    BOOL v72 = 0;
    goto LABEL_135;
  }

  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if ((v16 & 1) == 0) {
    goto LABEL_65;
  }
LABEL_61:
  if (v72)
  {
    sub_1010DDBC0(&v67, "");
    *(void *)&__int128 v68 = 0x100000003LL;
    WORD4(v6_Block_object_dispose(va, 8) = 0;
    else {
      std::string v69 = v67;
    }
    uint64_t v70 = 0LL;
    sub_1003B35F4(__p, &v68);
    sub_100E65E58((uint64_t)&v67);
    uint64_t v23 = std::string::append(&v67, "/cache_encryptedC.db");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__cap_;
    __int128 v68 = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    if (v69.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v25 = (const char *)&v68;
    }
    else {
      uint64_t v25 = (const char *)v68;
    }
    sub_1003BD864((uint64_t)__p, v25);
    if (v69.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v26 = (const char *)&v68;
    }
    else {
      uint64_t v26 = (const char *)v68;
    }
    sub_100292BC4(v26);
    if (v69.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v68);
    }
    sub_1003B3930(__p);
    sub_100309D64(0, &v67);
    char v27 = std::string::append(&v67, "userinfo");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__cap_;
    __int128 v68 = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    char v29 = std::string::append((std::string *)&v68, ".plist");
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    if (v69.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v68);
    }
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v31 = __p;
    }
    else {
      std::string v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if (sub_100292D28((const char *)v31))
    {
      sub_100E65E58((uint64_t)&v65);
      uint64_t v32 = std::string::append(&v65, "/");
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v34 = std::string::append(&v66, "userinfo");
      __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0LL;
      v34->__r_.__value_.__l.__cap_ = 0LL;
      v34->__r_.__value_.__r.__words[0] = 0LL;
      int v36 = std::string::append(&v67, ".log");
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__cap_;
      __int128 v68 = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v38 = __p;
      }
      else {
        uint64_t v38 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      if (v69.__r_.__value_.__s.__data_[7] >= 0) {
        std::string v39 = (const char *)&v68;
      }
      else {
        std::string v39 = (const char *)v68;
      }
      sub_100292DA4((const char *)v38, v39);
      if (v69.__r_.__value_.__s.__data_[7] >= 0) {
        uint64_t v40 = (const char *)&v68;
      }
      else {
        uint64_t v40 = (const char *)v68;
      }
      sub_100292BC4(v40);
      if (v69.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v68);
      }
    }

    sub_100309D64(0, &v66);
    __int128 v41 = std::string::append(&v66, "cache");
    __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0LL;
    v41->__r_.__value_.__l.__cap_ = 0LL;
    v41->__r_.__value_.__r.__words[0] = 0LL;
    std::string v43 = std::string::append(&v67, ".plist");
    __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[0] = v43->__r_.__value_.__l.__cap_;
    __int128 v68 = v44;
    v43->__r_.__value_.__l.__size_ = 0LL;
    v43->__r_.__value_.__l.__cap_ = 0LL;
    v43->__r_.__value_.__r.__words[0] = 0LL;
    if (v69.__r_.__value_.__s.__data_[7] >= 0) {
      __int16 v45 = (const char *)&v68;
    }
    else {
      __int16 v45 = (const char *)v68;
    }
    if (sub_100292D28(v45))
    {
      sub_100E65E58((uint64_t)&v64);
      __int16 v46 = std::string::append(&v64, "/");
      __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0LL;
      v46->__r_.__value_.__l.__cap_ = 0LL;
      v46->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v48 = std::string::append(&v65, "cache");
      __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0LL;
      v48->__r_.__value_.__l.__cap_ = 0LL;
      v48->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v50 = std::string::append(&v66, ".log");
      __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0LL;
      v50->__r_.__value_.__l.__cap_ = 0LL;
      v50->__r_.__value_.__r.__words[0] = 0LL;
      if (v69.__r_.__value_.__s.__data_[7] >= 0) {
        __int16 v52 = (const char *)&v68;
      }
      else {
        __int16 v52 = (const char *)v68;
      }
      if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v53 = &v67;
      }
      else {
        uint64_t v53 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_100292DA4(v52, (const char *)v53);
      if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v54 = &v67;
      }
      else {
        __int16 v54 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_100292BC4((const char *)v54);
    }

    if (v69.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v68);
    }
  }

void sub_1007B6B1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_1011C52D0(v56 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B6DFC(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  sub_1010DDBC0(&v30, a2);
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  __int128 v6 = &v29;
  sub_1000392EC((uint64_t)&v29, v5 + 1);
  if ((v29.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    __int128 v6 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    else {
      char v7 = *(const void **)(a1 + 40);
    }
    memmove(v6, v7, v5);
  }

  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + sub_1012279C0(0LL, v4, v5) = 95;
  if (sub_100E6641C(v4, (char **)&v30, (char *)&v29))
  {
    sub_1010DDBC0(&v28, a2);
    sub_1010DDBC0(v26, ".log.bz2");
    if ((sub_100E664F0(v4, (void **)&v28.__r_.__value_.__l.__data_, (char *)v26) & 1) != 0)
    {
      int v8 = 1;
    }

    else
    {
      sub_1010DDBC0(v24, a2);
      sub_1010DDBC0(__p, ".log");
      int v8 = sub_100E664F0(v4, v24, (char *)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }

    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }

  else
  {
    int v8 = 0;
  }

  if (SHIBYTE(cap) < 0)
  {
    operator delete((void *)v30);
    if (!v8) {
      return 1LL;
    }
  }

  else if (!v8)
  {
    return 1LL;
  }

  sub_100E65E58((uint64_t)&v28);
  char v9 = std::string::append(&v28, "/");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v11 = std::string::append(&v29, a2);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t cap = v11->__r_.__value_.__l.__cap_;
  __int128 v30 = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  else {
    size_t v13 = *(void *)(a1 + 72);
  }
  uint64_t v14 = &v28;
  sub_1000392EC((uint64_t)&v28, v13 + 1);
  if ((v28.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    else {
      uint64_t v15 = *(const void **)(a1 + 64);
    }
    memmove(v14, v15, v13);
  }

  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  char v16 = std::string::append(&v28, a2);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v18 = &v29;
  }
  else {
    char v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (cap >= 0) {
    unint64_t v19 = (const char *)&v30;
  }
  else {
    unint64_t v19 = (const char *)v30;
  }
  sub_100292D88((const char *)v18, v19);
  if (cap >= 0) {
    uint64_t v20 = (const char *)&v30;
  }
  else {
    uint64_t v20 = (const char *)v30;
  }
  sub_100292BC4(v20);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v30);
  }
  return 1LL;
}

void sub_1007B7104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007B71E8(uint64_t a1, uint64_t a2, int a3)
{
  return *(_DWORD *)(a1 + 168) >= a3
      || *(_DWORD *)(a1 + 172) >= a3
      || *(_DWORD *)(a1 + 176) >= a3
      || *(_BYTE *)(a1 + 160) != 0;
}

void sub_1007B7224(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_1007B7250(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_10184FB30;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1007B7298(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_1007BC170(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1007B72B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_1007BC170(v1);
    operator delete(v2);
  }

uint64_t sub_1007B72D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1007B7318(uint64_t a1, const __CFString *a2, char a3)
{
  uint64_t v4 = sub_1002F0C34(a1, a2, a3, (uint64_t)@"mobile");
  *(void *)uint64_t v4 = off_10184FBA8;
  if (*(_BYTE *)(v4 + 16)) {
    sub_1002F14E0(a1, 1);
  }
  return a1;
}

void sub_1007B7368(_Unwind_Exception *a1)
{
}

void sub_1007B7388(uint64_t a1)
{
  uint64_t v1 = sub_1002F1458(a1);
  operator delete(v1);
}

BOOL sub_1007B73A0(uint64_t a1, const __CFString *a2, const void *a3)
{
  return sub_1002F13B4(a1);
}

double sub_1007B73C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x404E000000000000LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.156897439;
  *(_OWORD *)(a1 + 80) = xmmword_10132BEB0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 104) = 0x3FC415371D0ABDC0LL;
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1007B7410(void **a1, uint64_t a2, int a3, unsigned int a4, double a5)
{
  double v9 = *(double *)(a2 + 80);
  double v10 = *(double *)(a2 + 208);
  if (!*((_BYTE *)a1 + 128))
  {
    a1[6] = 0LL;
    a1[7] = 0LL;
    *((_DWORD *)a1 + 30) = 1;
    *((double *)a1 + 2) = a5 + 5.0 + 15.0;
    *((double *)a1 + 3) = a5;
    *((double *)a1 + 4) = a5;
    *((double *)a1 + 5) = a5 + -2.56;
    *((_BYTE *)a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  if (v9 == 0.0)
  {
    int v11 = 0;
    *((_DWORD *)a1 + 30) = 0;
  }

  else
  {
    int v11 = *((_DWORD *)a1 + 30);
    if (v11 > 2)
    {
      if (a5 - *((double *)a1 + 8) <= 7.68)
      {
        int v11 = 1;
        goto LABEL_10;
      }

      goto LABEL_9;
    }
  }

  if (a3 < 1)
  {
LABEL_9:
    int v11 = 0;
    *((_DWORD *)a1 + 30) = 0;
  }

void sub_1007B7E18(uint64_t a1, double a2, double a3)
{
  BOOL v10 = a3 < 0.372823626;
  double v6 = 1.0;
  if (!v10)
  {
    double v6 = 0.0;
    if (a3 < 0.559235454)
    {
      float v7 = sub_100940328(0.559235454, 0.0, 0.372823626, 1.0, a3);
      double v6 = v7;
    }
  }

  double v8 = (1.0 - v6) * 45.0 + 15.0;
  double v9 = *(double *)(a1 + 16);
  BOOL v10 = v9 + 20.0 > a2 && v9 < a2;
  if (v10) {
    double v8 = 6.66666667;
  }
  *(double *)(a1 + _Block_object_dispose(va, 8) = v8;
}

double sub_1007B7EB8(uint64_t a1)
{
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  memset(v4, 0, sizeof(v4));
  BOOL v1 = sub_1007B8264(*(void **)a1, (uint64_t)&v5, v4, *(double *)(a1 + 24) + 5.0);
  double result = -1.0;
  if (v1)
  {
    uint64_t v3 = *((void *)&v6 + 1);
    if (*((void *)&v6 + 1) == *(void *)v6) {
      uint64_t v3 = *(void *)(v6 - 8) + 4032LL;
    }
    return *(double *)(v3 - 192);
  }

  return result;
}

double sub_1007B7F20(double a1)
{
  double v1 = 1.0;
  if (a1 >= 0.372823626)
  {
    double v1 = 0.0;
    if (a1 < 0.559235454)
    {
      float v2 = sub_100940328(0.559235454, 0.0, 0.372823626, 1.0, a1);
      double v1 = v2;
    }
  }

  return (1.0 - v1) * 60.0 + 120.0;
}

double sub_1007B7F90(void **a1, double a2)
{
  double v2 = a2;
  if (!sub_1007B84C8(a2, (uint64_t)a1, *a1, &v6))
  {
    uint64_t v4 = (*a1)[8];
    if (v4) {
    else
    }
      return -1.79769313e308;
  }

  return v2;
}

double sub_1007B8034(uint64_t a1, void *a2, double a3, double a4)
{
  if (a4 - a3 > 0.0)
  {
    double v4 = sub_1007B87B8(a1, a2, a3, a4) / (a4 - a3);
    if (v4 > 0.0) {
      return 1.0 / v4;
    }
    if (v4 == 0.0) {
      return 0.0;
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10184FF78);
  }
  double v6 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Odometer failed to compute a mean pace.", buf, 2u);
  }

  double v5 = -1.0;
  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10184FF78);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Odometer failed to compute a mean pace.",  v10,  2);
    double v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "double CLPedometerPaceFusion::computeMeanPace(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return v5;
}

double sub_1007B81FC(uint64_t a1)
{
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  memset(v4, 0, sizeof(v4));
  BOOL v1 = sub_1007B8264(*(void **)a1, (uint64_t)&v5, v4, *(double *)(a1 + 32) + 5.0);
  double result = -1.0;
  if (v1)
  {
    uint64_t v3 = *((void *)&v6 + 1);
    if (*((void *)&v6 + 1) == *(void *)v6) {
      uint64_t v3 = *(void *)(v6 - 8) + 4032LL;
    }
    return *(double *)(v3 - 192);
  }

  return result;
}

BOOL sub_1007B8264(void *a1, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = a1[7];
  uint64_t v5 = a1[4];
  __int128 v6 = (void *)(v5 + 8 * (v4 / 0x15));
  if (a1[5] == v5) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = *v6 + 192 * (v4 % 0x15);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  __int128 v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  uint64_t v9 = a1[8];
  if (!v9) {
    return 0LL;
  }
  unint64_t v10 = a1[7] + v9;
  uint64_t v11 = ((v10 - 1) * (unsigned __int128)0x8618618618618619LL) >> 64;
  unint64_t v12 = (v11 + ((v10 - 1 - v11) >> 1)) >> 4;
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  char v15 = (void *)(v13 + 8 * (v10 / 0x15));
  if (*(double *)(*(void *)(v13 + 8 * v12) + 192 * (v10 - 1 - 21 * v12)) < a4)
  {
    if (v14 == v13) {
      unint64_t v16 = 0LL;
    }
    else {
      unint64_t v16 = *v15 + 192 * (v10 % 0x15);
    }
    BOOL result = 0LL;
    *(void *)a2 = v15;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v16;
    *(void *)(a2 + 16) = v15;
    *(void *)(a2 + 24) = v16;
    return result;
  }

  if (v14 == v13) {
    unint64_t v18 = 0LL;
  }
  else {
    unint64_t v18 = *v15 + 192 * (v10 % 0x15);
  }
  uint64_t v19 = a3[3];
  if (v18 == v19)
  {
LABEL_22:
    uint64_t v24 = *(void *)(a2 + 24);
    return v24 != v19;
  }

  uint64_t v20 = *v15;
  unint64_t v21 = v18;
  double v22 = v15;
  while (1)
  {
    uint64_t v23 = v21 - v20;
    if (v21 == v20) {
      break;
    }
LABEL_21:
    v21 -= 192LL;
    if (v21 == v19) {
      goto LABEL_22;
    }
  }

  uint64_t v20 = *(v22 - 1);
  if (*(double *)(v20 + 3840) > a4)
  {
    unint64_t v21 = v20 + 4032;
    --v22;
    goto LABEL_21;
  }

BOOL sub_1007B84C8(double a1, uint64_t a2, void *a3, double *a4)
{
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  BOOL result = sub_1007B8264(a3, (uint64_t)&v31, &v29, a1);
  if (result)
  {
    uint64_t v7 = *((void *)&v32 + 1);
    uint64_t v8 = *(void *)v32;
    uint64_t v9 = *((void *)&v32 + 1) - *(void *)v32;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 6);
    unint64_t v11 = v10 - 1;
    if (v9 < 193)
    {
      uint64_t v15 = ((21 - v10) * (unsigned __int128)0x8618618618618619LL) >> 64;
      unint64_t v16 = v15 + ((21 - v10 - v15) >> 1);
      uint64_t v13 = *(void *)(v32 - 8 * (v16 >> 4));
      uint64_t v14 = v13 + 192 * (v10 - 21 + 21 * (v16 >> 4)) + 3840;
      if (v14 == *((void *)&v30 + 1)) {
        return 0LL;
      }
      unint64_t v12 = -(uint64_t)(v16 >> 4);
    }

    else
    {
      unint64_t v12 = v11 / 0x15;
      uint64_t v13 = *(void *)(v32 + 8 * (v11 / 0x15));
      uint64_t v14 = v13 + 192 * (v11 % 0x15);
      if (v14 == *((void *)&v30 + 1)) {
        return 0LL;
      }
    }

    if (v14 == v13) {
      uint64_t v14 = *(void *)(v32 + 8 * v12 - 8) + 4032LL;
    }
    uint64_t v17 = *((void *)&v32 + 1);
    if (*((void *)&v32 + 1) == v8) {
      uint64_t v17 = *(void *)(v32 - 8) + 4032LL;
    }
    if (v9 < 193)
    {
      uint64_t v21 = ((21 - v10) * (unsigned __int128)0x8618618618618619LL) >> 64;
      unint64_t v22 = (v21 + ((21 - v10 - v21) >> 1)) >> 4;
      unint64_t v18 = -(uint64_t)v22;
      uint64_t v19 = *(void *)(v32 - 8 * v22);
      uint64_t v20 = v19 + 192 * (v10 - 21 + 21 * v22) + 3840;
    }

    else
    {
      unint64_t v18 = v11 / 0x15;
      uint64_t v19 = *(void *)(v32 + 8 * (v11 / 0x15));
      uint64_t v20 = v19 + 192 * (v11 % 0x15);
    }

    if (v20 == v19) {
      uint64_t v20 = *(void *)(v32 + 8 * v18 - 8) + 4032LL;
    }
    if (v9 < 193)
    {
      unint64_t v26 = 21 - v10;
      uint64_t v27 = ((21 - v10) * (unsigned __int128)0x8618618618618619LL) >> 64;
      unint64_t v28 = (v27 + ((v26 - v27) >> 1)) >> 4;
      unint64_t v23 = -(uint64_t)v28;
      uint64_t v24 = *(void *)(v32 - 8 * v28);
      uint64_t v25 = v24 + 192 * (21 * v28 - v26) + 3840;
    }

    else
    {
      unint64_t v23 = v11 / 0x15;
      uint64_t v24 = *(void *)(v32 + 8 * (v11 / 0x15));
      uint64_t v25 = v24 + 192 * (v11 % 0x15);
    }

    if (v25 == v24) {
      uint64_t v25 = *(void *)(v32 + 8 * v23 - 8) + 4032LL;
    }
    if (*((void *)&v32 + 1) == v8) {
      uint64_t v7 = *(void *)(v32 - 8) + 4032LL;
    }
    *a4 = sub_100940328( *(double *)(v20 - 192),  *(double *)(v25 - 144),  *(double *)(v7 - 192),  *(double *)(v7 - 144),  a1);
    return 1LL;
  }

  return result;
}

void sub_1007B878C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_1007B87B8(uint64_t a1, void *a2, double a3, double a4)
{
  double v21 = 0.0;
  double v22 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      uint64_t v15 = a2[8];
      if (v15) {
        double v16 = *(double *)(*(void *)(a2[4] + 8 * ((v15 + a2[7] - 1) / 0x15uLL)) + 192 * ((v15 + a2[7] - 1) % 0x15uLL));
      }
      else {
        double v16 = -1.79769313e308;
      }
      if (v16 == a4)
      {
        memset(buf, 0, 32);
        memset(v23, 0, sizeof(v23));
        double v7 = -1.0;
        if (!(*(unsigned int (**)(void *, uint8_t *, _OWORD *, double))(*a2 + 16LL))(a2, buf, v23, a4)
          || !sub_1007B84C8(a3, a1, a2, &v22))
        {
          return v7;
        }

        uint64_t v17 = *(void *)&buf[24];
        if (*(void *)&buf[24] == **(void **)&buf[16]) {
          uint64_t v17 = *(void *)(*(void *)&buf[16] - 8LL) + 4032LL;
        }
        double v18 = *(double *)(v17 - 144);
      }

      else
      {
        double v7 = -1.0;
        if (!sub_1007B84C8(a3, a1, a2, &v22) || !sub_1007B84C8(a4, a1, a2, &v21)) {
          return v7;
        }
        double v18 = v21;
      }

      return v18 - v22;
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10184FF78);
    }
    unint64_t v11 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Time didn't move! time,%{public}f", buf, 0xCu);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10184FF78);
      }
      LODWORD(v23[0]) = 134349056;
      *(double *)((char *)v23 + 4) = a3;
      double v19 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Time didn't move! time,%{public}f",  v23,  12);
      unint64_t v10 = v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buf fer = CLNatalieInput<CLOdometerEntry>]",  "%s\n",  v19);
      goto LABEL_33;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10184FF78);
    }
    __int128 v6 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Time rolled back! t1,%{public}f,t2,%{public}f",  buf,  0x16u);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10184FF78);
      }
      LODWORD(v23[0]) = 134349312;
      *(double *)((char *)v23 + 4) = a3;
      WORD6(v23[0]) = 2050;
      *(double *)((char *)v23 + 14) = a4;
      double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Time rolled back! t1,%{public}f,t2,%{public}f",  v23,  22);
      unint64_t v10 = v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buf fer = CLNatalieInput<CLOdometerEntry>]",  "%s\n",  v8);
LABEL_33:
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  return v7;
}

void sub_1007B8BEC(uint64_t a1@<X8>)
{
  unint64_t v12 = 0LL;
  unint64_t v13 = 0LL;
  if (mach_get_times(&v13, &v12, v11))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    double v2 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      v10[0] = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,mach_get_times failed",  v10,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "Timestamp CLUtils::getTimestampNow()", "%s\n", v9);
    }

    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)a1 = _Q0;
    *(void *)(a1 + 16) = 0xBFF0000000000000LL;
    *(void *)(a1 + 24) = 0LL;
  }

  else
  {
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)a1 = _Q0;
    *(void *)(a1 + 16) = 0xBFF0000000000000LL;
    *(_BYTE *)(a1 + 24) = 0;
    *(double *)(a1 + 16) = sub_100295150(v11);
    *(double *)(a1 + _Block_object_dispose(va, 8) = sub_101171C7C(v13);
    *(double *)a1 = sub_101171C7C(v12);
    *(_BYTE *)(a1 + 24) = 1;
  }

uint64_t sub_1007B8DE8(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    *a2 = *(double *)(a1 + 16) - *(double *)a1;
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    uint64_t v3 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "TCONV,getMachContinuousToCFAbsoluteOffsetSec failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,getMachContinuousToCFAbsoluteOffsetSec failed",  v7,  2);
      __int128 v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLUtils::Timestamp::getMachContinuousToCFAbsoluteTimeOffsetSec(CFTimeInterval &) const",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  return *(unsigned __int8 *)(a1 + 24);
}

float sub_1007B8F98(int a1, int a2, int a3, float a4)
{
  int v4 = a2 + 12;
  if (a2 >= 3) {
    int v4 = a2;
  }
  return (float)((float)((float)((float)((float)((float)(a3
                                                       - (int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                       + (int)(float)((float)(int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                                    * 0.25)
                                                       + 2)
                                               + a4)
                                       + (float)(int)(((double)(a1 - (a2 < 3)) + 4716.0) * 365.25))
                               + (float)(int)(((double)v4 + 1.0) * 30.6001))
                       + -1524.5)
               + -2451500.0)
       / 36525.0;
}

float sub_1007B905C(float a1, float a2, float a3, float a4)
{
  float v7 = a4 / 57.296;
  double v8 = sinf(a4 / 57.296);
  double v9 = a1;
  double v10 = (v9 * -0.000101 + 0.019993) * sinf(v7 + v7) + v8 * (1.914602 - v9 * (v9 * 0.000014 + 0.004817));
  float v11 = v10 + sinf(v7 * 3.0) * 0.000289;
  double v12 = (float)(v11 + a3) + -0.00569;
  float v13 = v9 * -1934.136 + 125.04;
  *(float *)&double v12 = v12 + sinf(v13 / 57.296) * -0.00478;
  float v14 = sinf(a2 / 57.296);
  float v15 = sinf(*(float *)&v12 / 57.296);
  return asinf(v14 * v15) * 57.296;
}

float sub_1007B9184(float a1, float a2, float a3, float a4)
{
  float v8 = tanf((float)(a2 * 0.5) / 57.296);
  float v9 = v8 * tanf((float)(a2 / 57.296) * 0.5);
  float v10 = 0.016708634 - a1 * (a1 * 0.0000001267 + 0.000042037);
  float v11 = a4 / 57.296;
  float v12 = sinf(v11);
  __float2 v13 = __sincosf_stret((float)(a3 / 57.296) + (float)(a3 / 57.296));
  double v14 = (float)((float)((float)((float)(v10 * -2.0) * v12) + (float)(v9 * v13.__sinval))
  float v15 = v14 + v10 * -1.25 * v10 * sinf(v11 + v11);
  return (float)(v15 * 57.296) * 4.0;
}

float sub_1007B92AC(double a1, float a2, float a3)
{
  uint64_t v5 = +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierGregorian);
  -[NSCalendar setTimeZone:]( v5,  "setTimeZone:",  +[NSTimeZone timeZoneForSecondsFromGMT:](&OBJC_CLASS___NSTimeZone, "timeZoneForSecondsFromGMT:", 0LL));
  __int128 v6 = -[NSCalendar components:fromDate:]( v5,  "components:fromDate:",  252LL,  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  a1));
  float v7 = (float)-[NSDateComponents hour](v6, "hour");
  *(float *)&a1 = (float)-[NSDateComponents minute](v6, "minute");
  float v8 = (float)((float)((float)((float)((float)-[NSDateComponents second](v6, "second") / 60.0) + *(float *)&a1) / 60.0)
             + v7)
     / 24.0;
  float v9 = sub_1007B8F98( (int)-[NSDateComponents year](v6, "year"),  (int)-[NSDateComponents month](v6, "month"),  (int)-[NSDateComponents day](v6, "day"),  v8);
  double v10 = v9;
  float v11 = v9 * (v9 * 0.0003032 + 36000.7698) + 280.46646;
  float v12 = fmodf(v11, 360.0);
  if (v12 >= 0.0) {
    float v13 = v12;
  }
  else {
    float v13 = v12 + 360.0;
  }
  float v14 = v10 * (v10 * -0.0001537 + 35999.0503) + 357.52911;
  float v15 = ((21.448 - v10 * (v10 * (v10 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  double v16 = v15;
  float v17 = v10 * -1934.136 + 125.04;
  *(float *)&double v16 = v16 + cosf(v17 / 57.296) * 0.00256;
  float v18 = sub_1007B905C(v9, *(float *)&v16, v13, v14);
  float v19 = sub_1007B9184(v9, *(float *)&v16, v13, v14);
  float v20 = fmod(v19 + v8 * 1440.0 + (float)(a3 * 4.0), 1440.0);
  if (v20 < 0.0) {
    float v20 = v20 + 1440.0;
  }
  float v21 = v20 * 0.25 + dbl_10132BFF0[v20 * 0.25 < 0.0];
  float v22 = v21 / 57.296;
  __float2 v23 = __sincosf_stret(a2 / 57.296);
  __float2 v24 = __sincosf_stret(v18 / 57.296);
  float v25 = cosf(v22);
  return asinf((float)((float)(v23.__cosval * v24.__cosval) * v25) + (float)(v23.__sinval * v24.__sinval)) * 57.296;
}

BOOL sub_1007B95A4(uint64_t a1, double *a2)
{
  *a2 = -1.0;
  uint64_t v5 = *(int **)(a1 + 40);
  __int128 v6 = *(int **)(a1 + 48);
  float v7 = (int **)(a1 + 40);
  if (v5 == v6)
  {
    size_t v24 = 8LL;
    *(_DWORD *)uint64_t buf = 0;
    sub_10009C02C((uint64_t)v7, 8uLL, buf);
    if (sysctlnametomib("kern.wake_abs_time", *v7, &v24))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      float v15 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "TCONV,error occurred, no mib to wake_abs_time conversion",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10184FF98);
        }
        LOWORD(v25) = 0;
        float v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,error occurred, no mib to wake_abs_time conversion",  &v25,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)",  "%s\n",  v21);
      }

      BOOL v9 = 0LL;
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 40);
      return v9;
    }

    *(_DWORD *)uint64_t buf = 0;
    sub_10009C02C((uint64_t)v7, v24, buf);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    float v19 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      size_t v30 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TCONV,mib filled to %zu", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      int v25 = 134217984;
      size_t v26 = v24;
      float v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,mib filled to %zu",  (size_t)&v25);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)",  "%s\n",  v22);
    }

    uint64_t v5 = *(int **)(a1 + 40);
    __int128 v6 = *(int **)(a1 + 48);
  }

  size_t v23 = 8LL;
  size_t v24 = 0LL;
  int v8 = sysctl(v5, (unint64_t)((char *)v6 - (char *)v5) >> 2, &v24, &v23, 0LL, 0LL);
  BOOL v9 = v8 == 0;
  if (v8)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    double v10 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v30) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "TCONV,Error occurred when get wake_abs_time,%{errno}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      uint64_t v12 = qword_101934888;
      int v13 = *__error();
      int v25 = 67109120;
      LODWORD(v26) = v13;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  16LL,  "TCONV,Error occurred when get wake_abs_time,%{errno}d",  &v25,  8);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)",  "%s\n",  v14);
LABEL_33:
    }
  }

  else
  {
    *a2 = sub_101171C7C(v24);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    double v16 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      double v17 = *a2;
      *(_DWORD *)uint64_t buf = 134349312;
      size_t v30 = v24;
      __int16 v31 = 2050;
      double v32 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "TCONV,GetLastWakeUpMachAbsoluteTime success,machAbs,%{public}llu,floatInterval,%{public}.6lf",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      double v20 = *a2;
      int v25 = 134349312;
      size_t v26 = v24;
      __int16 v27 = 2050;
      double v28 = v20;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,GetLastWakeUpMachAbsoluteTime success,machAbs,%{public}llu,floatInterval,%{public}.6lf",  &v25,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)",  "%s\n",  v14);
      goto LABEL_33;
    }
  }

  return v9;
}

BOOL sub_1007B9C00(uint64_t a1, uint64_t a2)
{
  unint64_t v32 = 0LL;
  unint64_t v33 = 0LL;
  if (mach_get_times(&v33, &v32, &v30))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    int v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", buf, 2u);
    }

    BOOL v5 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      LOWORD(v34) = 0;
      uint64_t v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,mach_get_times failed",  &v34,  2);
LABEL_10:
      int v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
LABEL_11:
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }

    return result;
  }

  double v9 = sub_101171C7C(v32);
  unint64_t v10 = v32 - v33;
  double v11 = sub_100295150(&v30);
  double v12 = v11 - sub_101171C7C(v33);
  if (*(_BYTE *)(a1 + 32)
    && vabdd_f64(v12, *(double *)(a1 + 16)) <= 0.0012
    && v10 == *(void *)a1
    && v9 <= *(double *)(a1 + 64) + 30.0)
  {
LABEL_26:
    __int128 v19 = *(_OWORD *)a1;
    __int128 v20 = *(_OWORD *)(a1 + 16);
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
    *(_OWORD *)a2 = v19;
    *(_OWORD *)(a2 + 16) = v20;
    return 1LL;
  }

  *(_BYTE *)(a1 + 32) = 0;
  if (!sub_1007B95A4(a1, (double *)(a1 + 24)))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    float v21 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "TCONV,Getting last wake up time failed",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      LOWORD(v34) = 0;
      int v8 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,Getting last wake up time failed",  &v34,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
      goto LABEL_11;
    }

    return result;
  }

  *(double *)(a1 + 64) = v9;
  *(void *)a1 = v10;
  double v13 = sub_101171C7C(v10);
  *(double *)(a1 + _Block_object_dispose(va, 8) = v13;
  *(double *)(a1 + 16) = v12;
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    float v22 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaContAbsSec", buf, 2u);
    }

    BOOL v23 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v23)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      LOWORD(v34) = 0;
      uint64_t v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,invalid deltaContAbsSec",  &v34,  2);
      goto LABEL_10;
    }

    return result;
  }

  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
  {
    *(_BYTE *)(a1 + 32) = 1;
    double v14 = sub_101171C7C(v33);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    float v15 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 134351360;
      unint64_t v55 = v33;
      __int16 v56 = 2050;
      unint64_t v57 = v32;
      __int16 v58 = 2050;
      uint64_t v59 = v30;
      __int16 v60 = 2050;
      uint64_t v61 = v31;
      __int16 v62 = 2050;
      uint64_t v63 = v16;
      __int16 v64 = 2050;
      uint64_t v65 = v17;
      __int16 v66 = 2050;
      uint64_t v67 = v18;
      __int16 v68 = 2050;
      double v69 = v14;
      __int16 v70 = 2050;
      double v71 = v9;
      __int16 v72 = 2050;
      double v73 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "TCONV,mach_get_times,machAbs,%{public}llu,machCont,%{public}llu,tv_sec,%{public}ld,tv_nsec,%{public}ld,deltaCont Abs,%{public}.6lf,deltaCfAbs,%{public}.6lf,lastWakeAbs,%{public}.6lf,machNow,%{public}.6lf,machContNow,%{public} .6lf,sysNow,%{public}.6lf",  buf,  0x66u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = *(void *)(a1 + 16);
      uint64_t v28 = *(void *)(a1 + 24);
      int v34 = 134351360;
      unint64_t v35 = v33;
      __int16 v36 = 2050;
      unint64_t v37 = v32;
      __int16 v38 = 2050;
      uint64_t v39 = v30;
      __int16 v40 = 2050;
      uint64_t v41 = v31;
      __int16 v42 = 2050;
      uint64_t v43 = v26;
      __int16 v44 = 2050;
      uint64_t v45 = v27;
      __int16 v46 = 2050;
      uint64_t v47 = v28;
      __int16 v48 = 2050;
      double v49 = v14;
      __int16 v50 = 2050;
      double v51 = v9;
      __int16 v52 = 2050;
      double v53 = v11;
      __int128 v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "TCONV,mach_get_times,machAbs,%{public}llu,machCont,%{public}llu,tv_sec,%{public}ld,tv_nsec,%{publi c}ld,deltaContAbs,%{public}.6lf,deltaCfAbs,%{public}.6lf,lastWakeAbs,%{public}.6lf,machNow,%{publi c}.6lf,machContNow,%{public}.6lf,sysNow,%{public}.6lf",  &v34,  102);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)",  "%s\n",  v29);
    }

    goto LABEL_26;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10184FF98);
  }
  size_t v24 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaCfAbsSec", buf, 2u);
  }

  BOOL v25 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v25)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    LOWORD(v34) = 0;
    uint64_t v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "TCONV,invalid deltaCfAbsSec",  &v34,  2);
    goto LABEL_10;
  }

  return result;
}

BOOL sub_1007BA384(uint64_t a1, double *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10184FF98);
  }
  int v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 134349312;
    double v16 = v5;
    __int16 v17 = 2050;
    uint64_t v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "TCONV,Cannot get wakeTime or MachTime before sleep,machAbs,%{public}.6lf,wakeTime,%{public}.6lf",  buf,  0x16u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    double v8 = *a2;
    uint64_t v9 = *(void *)(a1 + 24);
    int v11 = 134349312;
    double v12 = v8;
    __int16 v13 = 2050;
    uint64_t v14 = v9;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "TCONV,Cannot get wakeTime or MachTime before sleep,machAbs,%{public}.6lf,wakeTime,%{public}.6lf",  &v11,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::isMachTimeAfterCachedLastWakeUpTime(const CFTimeInterval &)",  "%s\n",  v10);
    return 0LL;
  }

  return result;
}

BOOL sub_1007BA578(uint64_t a1, void *a2)
{
  char v9 = 0;
  memset(v8, 0, sizeof(v8));
  BOOL v3 = sub_1007B9C00(a1, (uint64_t)v8);
  if (v3)
  {
    *a2 = *((void *)&v8[0] + 1);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    int v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      v7[0] = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,UpdateLastWakeUpTime failed",  v7,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::deltaMachContinuousMachAbsolute_RealTime(CFTimeInterval &)",  "%s\n",  v6);
    }
  }

  return v3;
}

BOOL sub_1007BA734(uint64_t a1, void *a2)
{
  char v10 = 0;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  BOOL v3 = sub_1007B9C00(a1, (uint64_t)&v8);
  if (v3)
  {
    *a2 = v9;
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    int v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      v7[0] = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,UpdateLastWakeUpTime failed",  v7,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::deltaCFAbsTimeMachAbsTime_RealTime(CFTimeInterval &)",  "%s\n",  v6);
    }
  }

  return v3;
}

BOOL sub_1007BA8F0(uint64_t a1, double *a2, double *a3)
{
  double v10 = 0.0;
  if (sub_1007BA578(a1, &v10))
  {
    *a3 = *a2 + v10;
    return sub_1007BA384(a1, a2);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TCONV,Failed in getting the offset between mach continuous time and mach absolute time",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      __int16 v9 = 0;
      __int128 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,Failed in getting the offset between mach continuous time and mach absolute time",  &v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToMachContinuous_RealTime(const CFTimeInterval &, CFTimeInterval &)",  "%s\n",  v8);
    }

    return 0LL;
  }

BOOL sub_1007BAAD8(uint64_t a1, double *a2, double *a3)
{
  double v10 = 0.0;
  if (sub_1007BA578(a1, &v10))
  {
    *a3 = *a2 - v10;
    return sub_1007BA384(a1, a3);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TCONV,Failed in getting the offset between mach continuous time and mach absolute time",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      __int16 v9 = 0;
      __int128 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,Failed in getting the offset between mach continuous time and mach absolute time",  &v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::convertMachContinuousToMachAbsolute_RealTime(const CFTimeInterval &, CFTimeInterval &)",  "%s\n",  v8);
    }

    return 0LL;
  }

BOOL sub_1007BACC0(uint64_t a1, double *a2, double *a3)
{
  double v10 = 0.0;
  if (sub_1007BA734(a1, &v10))
  {
    *a3 = *a2 + v10;
    return sub_1007BA384(a1, a2);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TCONV,Failed in getting the offset between CF time and mach time",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      __int16 v9 = 0;
      __int128 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,Failed in getting the offset between CF time and mach time",  &v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToCFAbsolute_RealTime(const CFTimeInterval &, CFAbsoluteTime &)",  "%s\n",  v8);
    }

    return 0LL;
  }

BOOL sub_1007BAEA8(uint64_t a1, double *a2, double *a3)
{
  double v10 = 0.0;
  if (sub_1007BA734(a1, &v10))
  {
    *a3 = *a2 - v10;
    return sub_1007BA384(a1, a3);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184FF98);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TCONV,Failed in getting the offset between CF time and mach time",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10184FF98);
      }
      __int16 v9 = 0;
      __int128 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TCONV,Failed in getting the offset between CF time and mach time",  &v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLUtils::LiveTimeConverter::convertCFAbsoluteToMachAbsolute_RealTime(const CFAbsoluteTime &, CFTimeInterval &)",  "%s\n",  v8);
    }

    return 0LL;
  }

void sub_1007BB090(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

double sub_1007BB0BC(uint64_t a1, char a2)
{
  *(int64x2_t *)(v3 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(v3 + 40) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(v3 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(v3 + 56) = 0x3FFB333340000000LL;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_BYTE *)(v3 + 192) = a2;
  *(_DWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(void *)&double result = 1050253722LL;
  *(void *)(v3 + 240) = 1050253722LL;
  return result;
}

void sub_1007BB130(double a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10184FFB8);
  }
  __int16 v9 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    int v10 = *a4;
    uint64_t v11 = *(void *)(a5 + 32);
    double v12 = *(float *)(a5 + 24);
    double v13 = *(float *)(a5 + 40);
    double v14 = *(float *)(a5 + 44);
    int v15 = *(_DWORD *)(a5 + 56);
    uint64_t v16 = *(void *)(a5 + 64);
    int v17 = *(unsigned __int8 *)(a5 + 72);
    int v18 = *(unsigned __int8 *)(a5 + 73);
    int v19 = *(_DWORD *)(a5 + 76);
    int v20 = a4[2] - a3[2];
    HIDWORD(v61) = a4[3] - a3[3];
    int v21 = a4[7] - a3[7];
    int v22 = a4[8] - a3[8];
    uint64_t v23 = *(void *)(a5 + 80);
    double v60 = *(double *)(a5 + 88);
    int v24 = a4[9] - a3[9];
    int v25 = a4[10] - a3[10];
    int v26 = a4[11] - a3[11];
    int v27 = a4[14] - a3[14];
    int v28 = a4[15] - a3[15];
    uint64_t v29 = *(void *)(a5 + 96);
    int v30 = a4[12] - a3[12];
    int v31 = a4[13] - a3[13];
    int v32 = *(unsigned __int8 *)(a5 + 104);
    *(_DWORD *)uint64_t buf = 67116032;
    int v78 = v10;
    __int16 v79 = 2048;
    uint64_t v80 = v11;
    __int16 v81 = 2048;
    double v82 = v12;
    __int16 v83 = 2048;
    double v84 = v13;
    __int16 v85 = 2048;
    double v86 = v14;
    __int16 v87 = 1024;
    int v88 = v15;
    __int16 v89 = 2048;
    uint64_t v90 = v16;
    __int16 v91 = 1024;
    int v92 = v17;
    __int16 v93 = 1024;
    int v94 = v18;
    __int16 v95 = 1024;
    int v96 = v19;
    __int16 v97 = 1024;
    int v98 = v23;
    __int16 v99 = 1024;
    int v100 = 1;
    __int16 v101 = 1024;
    int v102 = v20;
    __int16 v103 = 1024;
    int v104 = 1;
    __int16 v105 = 1024;
    int v106 = HIDWORD(v61);
    __int16 v107 = 1024;
    int v108 = v21;
    __int16 v109 = 1024;
    int v110 = v22;
    __int16 v111 = 2048;
    double v112 = v60;
    __int16 v113 = 1024;
    int v114 = v24;
    __int16 v115 = 2048;
    uint64_t v116 = v29;
    __int16 v117 = 1024;
    int v118 = v25;
    __int16 v119 = 1024;
    int v120 = v26;
    __int16 v121 = 2048;
    double v122 = a1;
    __int16 v123 = 1024;
    int v124 = v27;
    __int16 v125 = 1024;
    int v126 = v28;
    __int16 v127 = 1024;
    int v128 = v30;
    __int16 v129 = 1024;
    int v130 = v31;
    __int16 v131 = 1024;
    int v132 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource ,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,metSourceOK,%d,hrOK,%d,cadence,%f,workoutL engthOK,%d,pace,%f,paceOK,%d,strollerOK,%d,percentGradeSigma,%.6f,percentWalkingOK,%d,metsAboveAdaptiveAlgMin,%d,p airOKForClustering,%d,pairOKForAdaptiveModel,%d,isStroller,%d",  buf,  0xCAu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10184FFB8);
    }
    int v33 = *a4;
    uint64_t v34 = *(void *)(a5 + 32);
    double v35 = *(float *)(a5 + 24);
    double v36 = *(float *)(a5 + 40);
    double v37 = *(float *)(a5 + 44);
    int v38 = *(_DWORD *)(a5 + 56);
    uint64_t v39 = *(void *)(a5 + 64);
    __int16 v40 = *(unsigned __int8 *)(a5 + 72);
    int v41 = *(unsigned __int8 *)(a5 + 73);
    int v42 = *(_DWORD *)(a5 + 76);
    int v43 = a4[2] - a3[2];
    int v44 = a4[3] - a3[3];
    int v45 = a4[7] - a3[7];
    int v46 = a4[8] - a3[8];
    int v47 = a4[9] - a3[9];
    int v48 = a4[10] - a3[10];
    int v49 = a4[12];
    int v50 = a3[12];
    int v51 = a4[11] - a3[11];
    int v52 = a4[13];
    int v53 = a3[13];
    int v54 = a4[14] - a3[14];
    unint64_t v55 = *(void *)(a5 + 88);
    uint64_t v56 = *(void *)(a5 + 96);
    int v57 = *(unsigned __int8 *)(a5 + 104);
    LODWORD(v62) = 67116032;
    HIDWORD(v62) = v33;
    LOWORD(v63) = 2048;
    *(void *)((char *)&v63 + 2) = v34;
    WORD5(v63) = 2048;
    HIDWORD(v63) = LODWORD(v35);
    LOWORD(v64) = 1024;
    HIWORD(v64) = v38;
    LOWORD(v65) = 1024;
    HIWORD(v65) = v40;
    LOWORD(v66) = HIWORD(v42);
    HIWORD(v66) = 1024;
    LODWORD(v67) = 0x4000000;
    HIDWORD(v67) = v44;
    LOWORD(v6_Block_object_dispose(va, 8) = 1024;
    HIWORD(v6_Block_object_dispose(va, 8) = v45;
    LODWORD(v69) = v46;
    WORD2(v69) = 2048;
    HIWORD(v69) = v55;
    *(void *)__int16 v70 = v56;
    *(_WORD *)&v70[8] = 1024;
    LOWORD(v71) = HIWORD(v51);
    HIWORD(v71) = 2048;
    LOWORD(v72) = HIWORD(v54);
    HIWORD(v72) = 1024;
    LOWORD(v73) = 1024;
    HIWORD(v73) = v49 - v50;
    int v74 = v52 - v53;
    __int16 v75 = 1024;
    int v76 = v57;
    LODWORD(v59) = 202;
    __int16 v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCa l,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,metSourceOK,%d ,hrOK,%d,cadence,%f,workoutLengthOK,%d,pace,%f,paceOK,%d,strollerOK,%d,percentGradeSigma,%.6f,percen tWalkingOK,%d,metsAboveAdaptiveAlgMin,%d,pairOKForClustering,%d,pairOKForAdaptiveModel,%d,isStroller,%d",  &v62,  v59,  v60,  v61,  v62,  (_DWORD)v63,  *((double *)&v63 + 1),  HIDWORD(v35),  *(void *)&v36 >> 16,  LODWORD(v37),  v64,  v39,  v65,  v41,  v66,  66560,  v43,  v67,  v68,  v69,  v55 >> 16,  v47,  *(double *)&v70[2],  v48,  v71,  HIDWORD(a1),  v72,  v73);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxPreprocessor::logSinglePairStats(const PairStats &, const PairStats &, const VO2MaxInput &, const double) const",  "%s\n",  v58);
  }

void sub_1007BB61C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 48);
  *(double *)a3 = v6;
  *(double *)(a3 + _Block_object_dispose(va, 8) = v7;
  float v8 = *(float *)(a2 + 24) * 3.5;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 40);
  *(float *)(a3 + 20) = v8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  int v10 = (int *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 64);
  __int128 v11 = *(_OWORD *)(a1 + 80);
  __int128 v12 = *(_OWORD *)(a1 + 112);
  v49[2] = *(_OWORD *)(a1 + 96);
  v50[0] = v12;
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a1 + 124);
  v49[0] = *(_OWORD *)(a1 + 64);
  v49[1] = v11;
  double v13 = *(double *)(a1 + 24);
  if (v13 < 0.0) {
    double v13 = v6;
  }
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v6;
  *int v10 = v9 + 1;
  BOOL v14 = v7 == 0.0;
  int v15 = *(_DWORD *)(a2 + 56);
  if (!v15) {
    BOOL v14 = 0;
  }
  int v16 = *(_DWORD *)(a1 + 68);
  if (v15) {
    ++v16;
  }
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = v16;
  if (v15)
  {
    double v17 = *(double *)(a2 + 64);
    int v18 = v17 > -0.02;
    if (*(_BYTE *)(a1 + 192))
    {
      int v18 = v17 > -0.02;
      if (v17 >= 0.02) {
        int v18 = 0;
      }
    }

    int v19 = v14 & v18;
    *(_DWORD *)(a1 + 72) += v18;
    int v20 = *(_DWORD *)(a1 + 136);
    if (fabs(v17) > 0.0525) {
      ++v20;
    }
    *(_DWORD *)(a1 + 136) = v20;
  }

  else
  {
    int v19 = 0;
  }

  int v21 = sub_1007BB91C(a1, *(void *)(a2 + 80), *(double *)(a2 + 96), *(double *)(a2 + 88));
  int v22 = v19 & v21;
  int v23 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 104) += v21;
  BOOL v24 = *(double *)(a2 + 96) <= 0.0 || *(_BYTE *)(a2 + 104) == 0;
  if (v24)
  {
    int v25 = v23 + 1;
  }

  else
  {
    int v22 = 0;
    int v25 = v23;
  }

  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v25;
  int v26 = *(unsigned __int8 *)(a2 + 72);
  BOOL v24 = v26 == 0;
  int v27 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 80) += v26;
  int v28 = *(_DWORD *)(a1 + 92);
  int v29 = *(_DWORD *)(a1 + 88) + v26;
  if (v24) {
    int v22 = 0;
  }
  *(_DWORD *)(a1 + 84) = v27 + *(unsigned __int8 *)(a2 + 73);
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v29;
  if (*(_DWORD *)(a2 + 76))
  {
    int v22 = 0;
    int v30 = v28;
  }

  else
  {
    int v30 = v28 + 1;
  }

  *(_DWORD *)(a1 + 92) = v30;
  float v31 = *(float *)(a2 + 44);
  if (v31 <= 0.35) {
    int v22 = 0;
  }
  int v32 = *(_DWORD *)(a1 + 96);
  if (v31 > 0.35) {
    ++v32;
  }
  *(_DWORD *)(a1 + 96) = v32;
  float v33 = *(float *)(a2 + 40);
  float v35 = *(float *)(a1 + 8);
  float v34 = *(float *)(a1 + 12);
  int v37 = *(_DWORD *)(a1 + 124);
  int v36 = *(_DWORD *)(a1 + 128);
  if (v33 > v34) {
    ++v36;
  }
  int v38 = *(_DWORD *)(a1 + 132);
  if (v33 < v35) {
    ++v38;
  }
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v36;
  *(_DWORD *)(a1 + 132) = v38;
  float v39 = (v34 - v33) / (v34 - v35);
  float v40 = 1.0 - v39;
  if (v40 <= 0.0) {
    int v22 = 0;
  }
  BOOL v41 = v31 < 0.6;
  float v42 = 0.0;
  if (!v41) {
    float v42 = v40;
  }
  *(float *)(a1 + 244) = v42;
  float v43 = *(float *)(a2 + 24);
  if (v43 > 2.5) {
    int v44 = v22;
  }
  else {
    int v44 = 0;
  }
  if (v43 <= 2.5) {
    int v45 = v37;
  }
  else {
    int v45 = v37 + 1;
  }
  *(_DWORD *)(a1 + 124) = v45;
  BOOL v46 = sub_1007BB9B8((void *)a1, a2);
  if (v46) {
    ++*(_DWORD *)(a1 + 120);
  }
  if (v44)
  {
    ++*(_DWORD *)(a1 + 112);
    sub_1005EFB14((double *)(a1 + 200), *(double *)(a2 + 64));
    if (v46)
    {
      *(_DWORD *)(a3 + 64) = 2;
      ++*(_DWORD *)(a1 + 116);
    }

    else
    {
      *(_DWORD *)(a3 + 64) = 1;
    }
  }

  int v47 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 76) = v47;
  int v48 = sub_1007BBB90((void *)a1, a2, a3);
  sub_1007BB130(*(double *)(a3 + 40), (uint64_t)v48, v49, v10, a2);
}

uint64_t sub_1007BB91C(uint64_t a1, unint64_t a2, double a3, double a4)
{
  if (a3 <= 0.0) {
    return 0LL;
  }
  LODWORD(result) = sub_100AF8F04(a3, *(double *)(a1 + 56));
  if (a4 * 60.0 > 140.0) {
    uint64_t result = 1LL;
  }
  else {
    uint64_t result = result;
  }
  if (*(_DWORD *)(a1 + 48) == 3 && (result & 1) != 0) {
    return 0LL;
  }
  if (a2 > 0x12 || ((1LL << a2) & 0x60004) == 0) {
    return 1LL;
  }
  return result;
}

BOOL sub_1007BB9B8(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[23];
  uint64_t v4 = (uint64_t)(a1 + 23);
  unint64_t v5 = v6;
  double v7 = (char **)(v4 - 16);
  double v8 = *(double *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(v4 - 8);
  if (v10 >= v6)
  {
    uint64_t v13 = (uint64_t)(v10 - (void)*v7) >> 4;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v5 - (void)*v7;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    else {
      unint64_t v16 = v14;
    }
    double v17 = (char *)sub_100037038(v4, v16);
    int v18 = &v17[16 * v13];
    int v20 = &v17[16 * v19];
    double v21 = 0.0;
    if (v8 <= 0.0) {
      double v21 = 1.0;
    }
    *(void *)int v18 = v9;
    *((double *)v18 + 1) = v21;
    __int128 v12 = v18 + 16;
    int v23 = (char *)a1[21];
    int v22 = (char *)a1[22];
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v22 - 1);
        v18 -= 16;
        v22 -= 16;
      }

      while (v22 != v23);
      int v22 = *v7;
    }

    a1[21] = v18;
    a1[22] = v12;
    a1[23] = v20;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    double v11 = 0.0;
    if (v8 <= 0.0) {
      double v11 = 1.0;
    }
    *(void *)unint64_t v10 = v9;
    *(double *)(v10 + _Block_object_dispose(va, 8) = v11;
    __int128 v12 = (char *)(v10 + 16);
  }

  a1[22] = v12;
  BOOL v24 = (double *)a1[21];
  int v25 = (double *)v12;
  if (v24 != (double *)v12)
  {
    double v26 = *(double *)(a2 + 32);
    while (vabdd_f64(v26, *v24) <= 122.56)
    {
      v24 += 2;
      if (v24 == (double *)v12)
      {
        int v25 = (double *)v12;
        goto LABEL_29;
      }
    }

    int v25 = (double *)v12;
    if (v24 != (double *)v12)
    {
      int v27 = v24 + 2;
      int v25 = v24;
      while (v27 != (double *)v12)
      {
        if (vabdd_f64(v26, *v27) <= 122.56)
        {
          double *v25 = *v27;
          v25[1] = v27[1];
          v25 += 2;
        }

        v27 += 2;
      }
    }
  }

char *sub_1007BBB90(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  double v7 = *(double *)(a2 + 64) * 100.0;
  *(double *)(a3 + 24) = 2.23693991 / *(double *)(a2 + 96);
  *(double *)(a3 + 32) = v7;
  *(double *)(a3 + 4_Block_object_dispose(va, 8) = *(float *)(a2 + 44);
  *(void *)(a3 + 56) = v6;
  uint64_t v8 = (uint64_t)(a1 + 20);
  unint64_t v9 = a1[20];
  unint64_t v10 = (void **)(a1 + 18);
  uint64_t v11 = *(void *)(a2 + 32);
  __int128 v12 = (char *)a1[19];
  if ((unint64_t)v12 >= v9)
  {
    unint64_t v14 = (char *)*v10;
    uint64_t v15 = (v12 - (_BYTE *)*v10) >> 4;
    unint64_t v16 = v15 + 1;
    uint64_t v17 = v9 - (void)v14;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_100037038(v8, v18);
      unint64_t v14 = (char *)a1[18];
      __int128 v12 = (char *)a1[19];
    }

    else
    {
      uint64_t v19 = 0LL;
    }

    int v20 = &v19[16 * v15];
    double v21 = &v19[16 * v18];
    *(void *)int v20 = v11;
    *((double *)v20 + 1) = v7;
    uint64_t v13 = v20 + 16;
    if (v12 != v14)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
        v20 -= 16;
        v12 -= 16;
      }

      while (v12 != v14);
      unint64_t v14 = (char *)*v10;
    }

    a1[18] = v20;
    a1[19] = v13;
    a1[20] = v21;
    if (v14) {
      operator delete(v14);
    }
  }

  else
  {
    *(void *)__int128 v12 = v11;
    *((double *)v12 + 1) = v7;
    uint64_t v13 = v12 + 16;
  }

  a1[19] = v13;
  int v22 = (double *)a1[18];
  int v23 = (double *)v13;
  if (v22 != (double *)v13)
  {
    double v24 = *(double *)(a2 + 32);
    while (vabdd_f64(v24, *v22) <= 62.56)
    {
      v22 += 2;
      if (v22 == (double *)v13)
      {
        int v23 = (double *)v13;
        goto LABEL_28;
      }
    }

    int v23 = (double *)v13;
    if (v22 != (double *)v13)
    {
      int v25 = v22 + 2;
      int v23 = v22;
      while (v25 != (double *)v13)
      {
        if (vabdd_f64(v24, *v25) <= 62.56)
        {
          double *v23 = *v25;
          v23[1] = v25[1];
          v23 += 2;
        }

        v25 += 2;
      }
    }
  }

void sub_1007BBDEC(uint64_t a1)
{
  uint64_t v2 = a1 + 192;
  char v3 = *(_BYTE *)(a1 + 192);
  sub_100AD6EA0((uint64_t)&v15);
  *(int64x2_t *)&_OWORD v16[8] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)&v16[24] = 0xFFEFFFFFFFFFFFFFLL;
  LODWORD(v17) = 0;
  *((void *)&v17 + 1) = 0x3FFB333340000000LL;
  __int128 v4 = 0uLL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  memset(v21, 0, 28);
  *(_OWORD *)__int128 __p = 0u;
  memset(v23, 0, sizeof(v23));
  LOBYTE(v24) = v3;
  DWORD2(v24) = 0;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v27 = 1050253722LL;
  __int128 v5 = v15;
  __int128 v6 = *(_OWORD *)v16;
  __int128 v7 = v17;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v16[16];
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v8 = v18;
  __int128 v9 = v19;
  *(_OWORD *)(a1 + 124) = *(_OWORD *)((char *)v21 + 12);
  __int128 v10 = v21[0];
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v11 = *(void **)(a1 + 144);
  if (v11)
  {
    *(void *)(a1 + 152) = v11;
    operator delete(v11);
    __int128 v4 = *(_OWORD *)__p;
    uint64_t v12 = *(void *)&v23[0];
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  *(_OWORD *)(a1 + 144) = v4;
  *(void *)(a1 + 160) = v12;
  __p[1] = 0LL;
  *(void *)&v23[0] = 0LL;
  __p[0] = 0LL;
  uint64_t v13 = *(void **)(a1 + 168);
  if (v13)
  {
    *(void *)(a1 + 176) = v13;
    operator delete(v13);
    uint64_t v13 = __p[0];
  }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_OWORD *)((char *)v23 + 8);
  *(void *)(a1 + 184) = *((void *)&v23[1] + 1);
  memset((char *)v23 + 8, 0, 24);
  __int128 v14 = v25;
  *(_OWORD *)uint64_t v2 = v24;
  *(_OWORD *)(v2 + 16) = v14;
  *(_OWORD *)(v2 + 32) = v26;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = v27;
  if (v13)
  {
    __p[1] = v13;
    operator delete(v13);
  }

uint64_t sub_1007BBF5C(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 56) = *(float *)(a2 + 8);
  return sub_100AD6EB4(a1, *(float *)(a2 + 28));
}

float sub_1007BBF70(float *a1, double a2)
{
  float v2 = a2;
  float v3 = (a1[3] - v2) / (a1[3] - a1[2]);
  float result = fminf(1.0 - v3, 0.3);
  a1[60] = result;
  return result;
}

BOOL sub_1007BBFB0(uint64_t a1)
{
  return *(float *)(a1 + 244) >= *(float *)(a1 + 240);
}

float sub_1007BBFC0(uint64_t a1)
{
  return (float)((float)(*(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 108)) * 100.0) / (float)*(int *)(a1 + 64);
}

float sub_1007BBFE8(uint64_t a1)
{
  return (float)*(int *)(a1 + 116) * 2.56;
}

void sub_1007BC000(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_1007BC02C(double *a1, uint64_t a2)
{
  double result = *(double *)(a2 + 72);
  *a1 = result;
  a1[1] = result;
  return result;
}

double sub_1007BC038(uint64_t a1)
{
  return *(double *)a1;
}

double sub_1007BC040(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

uint64_t sub_1007BC050(uint64_t a1, int a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  sub_1002E4C3C(a1 + 32, "CLCircularLogBuffer", 1LL, 1LL);
  return a1;
}

FILE **sub_1007BC094(FILE **a1)
{
  return a1;
}

uint64_t sub_1007BC0C4(FILE **a1)
{
  float v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  float v3 = *a1;
  if (*a1)
  {
    *a1 = 0LL;
    fclose(v3);
  }

  __int128 v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0LL;
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  sub_1007BC244((uint64_t)a1);
  (*(void (**)(void *))(*v2 + 24LL))(v2);
  return v5;
}

void sub_1007BC15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

FILE *sub_1007BC174(FILE **a1)
{
  float v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  float v3 = *a1;
  if (!*a1)
  {
    __int128 v4 = (FILE *)malloc(*((int *)a1 + 4));
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen( a1,  0LL,  (int (__cdecl *)(void *, const char *, int))sub_1007BC23C,  0LL,  (int (__cdecl *)(void *))sub_1007BC240);
      sub_1007BC244((uint64_t)a1);
      float v3 = *a1;
    }

    else
    {
      float v3 = 0LL;
    }
  }

  (*(void (**)(char *))(*(void *)v2 + 24LL))(v2);
  return v3;
}

void sub_1007BC224(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1007BC244(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16LL))(a1 + 32);
  *(void *)(v1 - 12) = 0LL;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
}

uint64_t sub_1007BC288(uint64_t a1, FILE *a2)
{
  uint64_t v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16LL))(a1 + 32);
  uint64_t v5 = *(void *)(v4 - 24);
  if (v5)
  {
    if (*(void *)a1)
    {
      fflush(*(FILE **)a1);
      uint64_t v5 = *(void *)(a1 + 8);
    }

    uint64_t v6 = *(unsigned int *)(a1 + 24);
    uint64_t v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      uint64_t v8 = v7 + v5;
      int v9 = *(char *)(v8 - 1);
      *(_BYTE *)(v8 - 1) = 0;
      fputs((const char *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      uint64_t v5 = *(void *)(a1 + 8);
    }

    *(_BYTE *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_1007BC244(a1);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v6;
}

void sub_1007BC370(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1007BC38C(uint64_t a1, const void *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16LL))(a1 + 32);
  uint64_t v7 = *(void *)(v6 - 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(a1 + 20);
    int v9 = *(_DWORD *)(a1 + 16) - v8;
    else {
      uint64_t v3 = v9;
    }
    memcpy((void *)(v7 + v8), a2, (int)v3);
    int v10 = *(_DWORD *)(a1 + 16);
    int v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  return v3;
}

uint64_t sub_1007BC43C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 120LL))(a1, v8);
  if ((_DWORD)result)
  {
    double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
    double v4 = v3 - v8[9];
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
    int v6 = v5 - v9;
    BOOL v7 = v4 > 25.0;
    if (v4 < 0.0) {
      BOOL v7 = 1;
    }
    return v6 > 3 && v7;
  }

  return result;
}

double sub_1007BC4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  int v3 = *(_DWORD *)(a1 + 100);
  do
  {
    int v4 = *(_DWORD *)((char *)&xmmword_10132C040 + v2);
    BOOL v5 = v4 == v3 || v2 == 12;
    v2 += 4LL;
  }

  while (!v5);
  double result = 0.0;
  if (v4 == v3)
  {
    int v7 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104);
    double v8 = *(double *)(a1 + 48) - *(double *)(a1 + 40);
    BOOL v9 = v8 <= 0.0 || v7 <= 0;
    double result = v8 + (double)v7;
    if (v9) {
      return 0.0;
    }
  }

  return result;
}

double sub_1007BC55C(uint64_t a1, uint64_t a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10184FFD8);
  }
  int v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#SWOLF,unable to calculate lap SWOLF since last entry is not available",  buf,  2u);
  }

  double v3 = 0.0;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "#SWOLF,unable to calculate lap SWOLF since last entry is not available",  v8,  2);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLSWOLFUtil::calculateLapSwimSWOLF(const CLSwimEntry &, const CLSwimDataStore &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return v3;
}

double sub_1007BC724(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    double v3 = *(double *)(a1 + 72) - *(double *)(a2 + 72);
    if (v3 >= 20.0 && v3 <= 30.0)
    {
      double v5 = 25.0 / v3;
      double v6 = v5 * (*(double *)(a1 + 48) - *(double *)(a1 + 40));
      int v7 = llround(v5 * (double)(*(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104)));
      BOOL v8 = v7 <= 0 || v6 <= 0.0;
      double result = v6 + (double)v7;
      if (v8) {
        return 0.0;
      }
    }
  }

  return result;
}

double sub_1007BC79C(uint64_t a1, uint64_t a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10184FFD8);
  }
  int v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#SWOLF,unable to calculate lap SWOLF since last entry is not available",  buf,  2u);
  }

  double v3 = 0.0;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "#SWOLF,unable to calculate lap SWOLF since last entry is not available",  v8,  2);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLSWOLFUtil::calculateOpenWaterSWOLF(const CLSwimEntry &, const CLSwimDataStore &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return v3;
}

double sub_1007BC964(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72LL))(&v9, a2, a1);
  if (v9 == v10)
  {
    double v7 = 0.0;
    if (!v9) {
      return v7;
    }
    goto LABEL_12;
  }

  double v2 = 0.0;
  double v3 = 0.0;
  int v4 = v9;
  do
  {
    double v5 = v4[4];
    BOOL v6 = v5 == 0.0;
    if (v5 == 0.0) {
      double v5 = -0.0;
    }
    double v3 = v3 + v5;
    if (!v6) {
      double v2 = v2 + 1.0;
    }
    v4 += 5;
  }

  while (v4 != v10);
  if (v2 <= 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v3 / v2;
  }
  if (v9)
  {
LABEL_12:
    int v10 = v9;
    operator delete(v9);
  }

  return v7;
}

void sub_1007BCA14(void *a1, __n128 a2)
{
  double v2 = a1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    goto LABEL_23;
  }

  int v49 = a1;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  a2.n128_u64[0] = 134220800LL;
  __n128 v50 = a2;
  do
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    BOOL v8 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v9 = *(void *)v3;
      int v10 = *(const char **)(v3 + 40);
      int v11 = *(const char **)(v3 + 48);
      uint64_t v12 = *(void *)(v3 + 72);
      uint64_t v13 = *(void *)(v3 + 80);
      int v14 = *(_DWORD *)(v3 + 96);
      int v15 = *(_DWORD *)(v3 + 100);
      int v16 = *(_DWORD *)(v3 + 104);
      int v17 = *(_DWORD *)(v3 + 108);
      int v18 = *(_DWORD *)(v3 + 120);
      uint64_t v19 = *(void *)(v3 + 128);
      uint64_t v20 = *(void *)(v3 + 136);
      int buf = v50.n128_u32[0];
      unint64_t v82 = v9;
      __int16 v83 = 2048;
      double v84 = v10;
      __int16 v85 = 2048;
      double v86 = v11;
      __int16 v87 = 2048;
      *(void *)int v88 = v12;
      *(_WORD *)&v88[8] = 2048;
      uint64_t v89 = v13;
      __int16 v90 = 1024;
      int v91 = v14;
      __int16 v92 = 1024;
      int v93 = v15;
      __int16 v94 = 1024;
      int v95 = v16;
      __int16 v96 = 1024;
      int v97 = v17;
      __int16 v98 = 1024;
      int v99 = v18;
      __int16 v100 = 2048;
      uint64_t v101 = v19;
      __int16 v102 = 2048;
      uint64_t v103 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "SWOLF session entries,id,%llu,startTime,%f,endTime,%f,distance,%f,distanceTimestamp,%f,type,%d,style,%d,strokes, %d,laps,%d,segment,%d,SWOLF,%f,segmentSWOLF,%f",  (uint8_t *)&buf,  0x66u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10184FFD8);
      }
      unint64_t v22 = *(void *)v3;
      int v23 = *(const char **)(v3 + 40);
      __int128 v24 = *(const char **)(v3 + 48);
      uint64_t v25 = *(void *)(v3 + 72);
      uint64_t v26 = *(void *)(v3 + 80);
      int v27 = *(_DWORD *)(v3 + 96);
      int v28 = *(_DWORD *)(v3 + 100);
      int v29 = *(_DWORD *)(v3 + 104);
      int v30 = *(_DWORD *)(v3 + 108);
      int v31 = *(_DWORD *)(v3 + 120);
      uint64_t v32 = *(void *)(v3 + 128);
      uint64_t v33 = *(void *)(v3 + 136);
      int v58 = v50.n128_u32[0];
      unint64_t v59 = v22;
      __int16 v60 = 2048;
      double v61 = v23;
      __int16 v62 = 2048;
      __int128 v63 = v24;
      __int16 v64 = 2048;
      *(void *)int v65 = v25;
      *(_WORD *)&v65[8] = 2048;
      uint64_t v66 = v26;
      __int16 v67 = 1024;
      int v68 = v27;
      __int16 v69 = 1024;
      int v70 = v28;
      __int16 v71 = 1024;
      int v72 = v29;
      __int16 v73 = 1024;
      int v74 = v30;
      __int16 v75 = 1024;
      int v76 = v31;
      __int16 v77 = 2048;
      uint64_t v78 = v32;
      __int16 v79 = 2048;
      uint64_t v80 = v33;
      LODWORD(v47) = 102;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "SWOLF session entries,id,%llu,startTime,%f,endTime,%f,distance,%f,distanceTimestamp,%f,type,%d,style,%d,strokes, %d,laps,%d,segment,%d,SWOLF,%f,segmentSWOLF,%f",  &v58,  *(double *)&v47,  *(double *)&v48,  *(double *)&v49,  v50.n128_f64[0],  v50.n128_u32[2],  v51,  out_2,  out_10,  out_18,  out_26,  out_34[0]);
      float v35 = (int *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)",  "%s\n",  v34);
      if (v35 != &buf) {
        free(v35);
      }
    }

    int v21 = *(_DWORD *)(v3 + 96);
    if ((v21 - 1) >= 2)
    {
      if (v21 != 3) {
        goto LABEL_14;
      }
      ++v6;
    }

    else
    {
      ++v5;
    }

BOOL sub_1007BCF74(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    int v5 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "empty session SWOLF entries", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10184FFD8);
      }
      LOWORD(v15[0]) = 0;
      double v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "empty session SWOLF entries",  v15,  2);
      BOOL v8 = v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)",  "%s\n",  v6);
LABEL_29:
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }
  }

  else
  {
    while (!uuid_compare((const unsigned __int8 *)(v1 + 8), (const unsigned __int8 *)(*a1 + 8LL)))
    {
      if (uuid_compare((const unsigned __int8 *)(v1 + 24), (const unsigned __int8 *)(*a1 + 24LL)))
      {
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10184FFD8);
        }
        int v11 = (os_log_s *)qword_1019344E8;
        if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "programmer error, entries passed into calculateSessionSWOLF should all have same session id",  buf,  2u);
        }

        BOOL v12 = sub_1002921D0(115, 0);
        BOOL result = 0LL;
        if (!v12) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 == -1)
        {
LABEL_28:
          LOWORD(v15[0]) = 0;
          double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  16LL,  "programmer error, entries passed into calculateSessionSWOLF should all have same session id",  v15,  2,  v15[0]);
          BOOL v8 = v14;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)",  "%s\n",  v13);
          goto LABEL_29;
        }

void sub_1007BD348(uint64_t *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((void *)a2 + 10) = 0LL;
  sub_1007BCA14(a1, (__n128)0);
  if (sub_1007BCF74(a1))
  {
    __int128 v29 = xmmword_10132C040;
    *((double *)a2 + 6) = sub_1007BD714((uint64_t)&v29, a1);
    *(_DWORD *)int buf = 1;
    *((double *)a2 + 7) = sub_1007BD794(buf, a1);
    *(_DWORD *)int buf = 2;
    *((double *)a2 + _Block_object_dispose(va, 8) = sub_1007BD794(buf, a1);
    *(_DWORD *)int buf = 3;
    *((double *)a2 + 9) = sub_1007BD794(buf, a1);
    *(_DWORD *)int buf = 4;
    *((double *)a2 + 10) = sub_1007BD794(buf, a1);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    double v6 = *(double *)(*a1 + 40);
    *(double *)a2 = v6;
    double v7 = *(double *)(v4 + 48);
    *((double *)a2 + 1) = v7;
    if (v4 != v5)
    {
      uint64_t v8 = v4;
      do
      {
        double v9 = *(double *)(v8 + 40);
        if (v9 < v6)
        {
          *(double *)a2 = v9;
          double v6 = v9;
        }

        double v10 = *(double *)(v8 + 48);
        if (v10 <= v7) {
LABEL_9:
        }
          double v10 = v7;
        else {
          *((double *)a2 + 1) = v10;
        }
        v8 += 152LL;
        double v7 = v10;
      }

      while (v8 != v5);
    }

    uuid_copy(a2 + 16, (const unsigned __int8 *)(v4 + 8));
    uuid_copy(a2 + 32, (const unsigned __int8 *)(*a1 + 24));
    uuid_unparse(a2 + 32, out);
    uuid_unparse(a2 + 16, v67);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    int v11 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *((void *)a2 + 6);
      uint64_t v13 = *((void *)a2 + 7);
      uint64_t v14 = *((void *)a2 + 8);
      uint64_t v15 = *((void *)a2 + 9);
      uint64_t v16 = *((void *)a2 + 10);
      uint64_t v17 = *(void *)a2;
      uint64_t v18 = *((void *)a2 + 1);
      *(_DWORD *)int buf = 134220034;
      uint64_t v49 = v12;
      __int16 v50 = 2048;
      uint64_t v51 = v13;
      __int16 v52 = 2048;
      uint64_t v53 = v14;
      __int16 v54 = 2048;
      uint64_t v55 = v15;
      __int16 v56 = 2048;
      uint64_t v57 = v16;
      __int16 v58 = 2048;
      uint64_t v59 = v17;
      __int16 v60 = 2048;
      uint64_t v61 = v18;
      __int16 v62 = 2080;
      __int128 v63 = out;
      __int16 v64 = 2080;
      int v65 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "SessionSWOLF,SWOLF,%f,freestyle,%f,backstroke,%f,breastroke,%f,butterfly,%f,startTime,%f,endTime,%f,sourceID,%s,sessionId,%s",  buf,  0x5Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10184FFD8);
      }
      uint64_t v19 = *((void *)a2 + 6);
      uint64_t v20 = *((void *)a2 + 7);
      uint64_t v21 = *((void *)a2 + 8);
      uint64_t v22 = *((void *)a2 + 9);
      uint64_t v23 = *((void *)a2 + 10);
      uint64_t v24 = *(void *)a2;
      uint64_t v25 = *((void *)a2 + 1);
      int v30 = 134220034;
      uint64_t v31 = v19;
      __int16 v32 = 2048;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      uint64_t v35 = v21;
      __int16 v36 = 2048;
      uint64_t v37 = v22;
      __int16 v38 = 2048;
      uint64_t v39 = v23;
      __int16 v40 = 2048;
      uint64_t v41 = v24;
      __int16 v42 = 2048;
      uint64_t v43 = v25;
      __int16 v44 = 2080;
      int v45 = out;
      __int16 v46 = 2080;
      int v47 = v67;
      LODWORD(v2_Block_object_dispose(va, 8) = 92;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "SessionSWOLF,SWOLF,%f,freestyle,%f,backstroke,%f,breastroke,%f,butterfly,%f,startTime,%f,endTime,%f,sourceID,%s,sessionId,%s",  COERCE_DOUBLE(&v30),  v28,  *(double *)&v29,  *((double *)&v29 + 1));
      int v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSWOLFSummary CLSWOLFUtil::calculateSessionSWOLF(const std::vector<CLSwimEntry> &)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

double sub_1007BD714(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0.0;
  }
  unint64_t v4 = 0LL;
  double v5 = 0.0;
  do
  {
    uint64_t v6 = 0LL;
    int v7 = *(_DWORD *)(v2 + 100);
    do
    {
      int v8 = *(_DWORD *)(a1 + v6);
      BOOL v9 = v8 == v7 || v6 == 12;
      v6 += 4LL;
    }

    while (!v9);
    if (v8 == v7)
    {
      double v10 = *(double *)(v2 + 128);
      if (v10 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        double v5 = v5 + v10;
        ++v4;
      }
    }

    v2 += 152LL;
  }

  while (v2 != v3);
  if (!v4) {
    return 0.0;
  }
  else {
    return v5 / (double)v4;
  }
}

double sub_1007BD794(_DWORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0.0;
  }
  unint64_t v4 = 0LL;
  double v5 = 0.0;
  do
  {
    if (*a1 == *(_DWORD *)(v2 + 100))
    {
      double v6 = *(double *)(v2 + 128);
      if (v6 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        double v5 = v5 + v6;
        ++v4;
      }
    }

    v2 += 152LL;
  }

  while (v2 != v3);
  if (!v4) {
    return 0.0;
  }
  else {
    return v5 / (double)v4;
  }
}

void sub_1007BD800(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_1007BD82C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  double v5 = -[NSArray reverseObjectEnumerator]( -[NSFileManager contentsOfDirectoryAtPath:error:]( v4,  "contentsOfDirectoryAtPath:error:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1),  0LL),  "reverseObjectEnumerator",  0LL);
  id v6 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
LABEL_3:
    uint64_t v9 = 0LL;
    while (1)
    {
      if (*(void *)v11 != v8) {
        objc_enumerationMutation(v5);
      }
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))( a2,  [*(id *)(*((void *)&v10 + 1) + 8 * v9) UTF8String])) {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_1007BD964(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  double v5 = -[NSArray objectEnumerator]( -[NSFileManager contentsOfDirectoryAtPath:error:]( v4,  "contentsOfDirectoryAtPath:error:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1),  0LL),  "objectEnumerator",  0LL);
  id v6 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
LABEL_3:
    uint64_t v9 = 0LL;
    while (1)
    {
      if (*(void *)v11 != v8) {
        objc_enumerationMutation(v5);
      }
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))( a2,  [*(id *)(*((void *)&v10 + 1) + 8 * v9) UTF8String])) {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

BOOL sub_1007BDA9C(const char *a1, __int16 a2, uint64_t a3)
{
  uint64_t v8 = a3;
  double v5 = -[NSFileManager attributesOfItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "attributesOfItemAtPath:error:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1),  &v8);
  id v6 = v5;
  if (v5) {
    chmod(a1, (unsigned __int16)-[NSDictionary filePosixPermissions](v5, "filePosixPermissions") | a2);
  }
  return v6 != 0LL;
}

void sub_1007BDB28(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 300);
  int v5 = *(_DWORD *)(a1 + 520);
  float v6 = 0.0;
  if (v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v4 <= 20.0;
  }
  if (v7) {
    goto LABEL_12;
  }
  float v8 = (float)(v4 * 0.0467) + 0.3694;
  if (v4 <= 8.0) {
    float v8 = 0.0;
  }
  float v9 = (float)(v8 * 0.9308) + 1.8885;
  float v6 = v4 <= 8.0 ? 1.8 : v9;
  if (!v5)
  {
LABEL_12:
    if (v4 > 17.5 && *(float *)(a1 + 292) < 0.0)
    {
      uint64_t v10 = sub_1008D9630();
      sub_1008D98C4(v10);
    }
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101850048);
  }
  __int128 v11 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 112);
    *(_DWORD *)int buf = 134218752;
    uint64_t v28 = v12;
    __int16 v29 = 2048;
    double v30 = v6;
    __int16 v31 = 1024;
    int v32 = v5;
    __int16 v33 = 2048;
    double v34 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101850048);
    }
    uint64_t v15 = *(void *)(a1 + 112);
    int v19 = 134218752;
    uint64_t v20 = v15;
    __int16 v21 = 2048;
    double v22 = v6;
    __int16 v23 = 1024;
    int v24 = v5;
    __int16 v25 = 2048;
    double v26 = v4;
    LODWORD(v1_Block_object_dispose(va, 8) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f",  COERCE_DOUBLE(&v19),  v18);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieWheelchairPushModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  if (*(void *)(a1 + 344) == 21LL) {
    int v13 = 18;
  }
  else {
    int v13 = 17;
  }
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v6;
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 0;
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 2_Block_object_dispose(va, 8) = v6;
  if (v6 == 1.8) {
    int v14 = 3;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v13;
}

uint64_t sub_1007BDE08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48LL))(*(void *)(a2 + 40));
}

void sub_1007BDE18(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1007BDEE8(id a1)
{
  qword_101998A50 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLVDRNotifierSilo");
}

uint64_t sub_1007BDF9C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1007BE33C;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101998A70 != -1) {
    dispatch_once(&qword_101998A70, block);
  }
  return qword_1019A1648;
}

void sub_1007BE13C(id a1)
{
}

void *sub_1007BE1BC(uint64_t a1, void *a2)
{
  BOOL result = (void *)sub_1007BE1E8(a1, "CLVDRNotifier", a2);
  *BOOL result = off_1018500B8;
  return result;
}

uint64_t sub_1007BE1E8(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101850270;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_1007BE268(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1007BE284(uint64_t a1)
{
  *(void *)a1 = off_1018500B8;
  return sub_1007BE294(a1);
}

uint64_t sub_1007BE294(uint64_t a1)
{
  *(void *)a1 = off_101850270;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_1007BE308(uint64_t a1)
{
  *(void *)a1 = off_1018500B8;
  return sub_1007BE294(a1);
}

void sub_1007BE318(void *a1)
{
  *a1 = off_1018500B8;
  uint64_t v1 = (void *)sub_1007BE294((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_1007BE33C(uint64_t a1)
{
  int v2 = sub_1002A6F64(v9, "CLTSPVDRNotifierTypeSensorRecorder", &v11);
  if (v11) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  float v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v3) {
        goto LABEL_9;
      }
LABEL_11:
      BOOL v7 = operator new(0xD0uLL);
      uint64_t result = sub_100491D44((uint64_t)v7, *(void **)(a1 + 32));
      goto LABEL_12;
    }
  }

  if (!v3) {
    goto LABEL_11;
  }
LABEL_9:
  BOOL v7 = operator new(0x150uLL);
  uint64_t result = sub_100B117D8(v7, *(void *)(a1 + 32));
LABEL_12:
  qword_1019A1648 = (uint64_t)v7;
  return result;
}

void sub_1007BE408( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_1007BE430@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1) {
    int v2 = "Unknown";
  }
  else {
    int v2 = "";
  }
  return sub_1010DDBC0(a2, v2);
}

uint64_t sub_1007BE454(uint64_t **a1, int a2, unsigned int *a3, int a4)
{
  int v27 = a2;
  if (qword_101934950 != -1) {
    dispatch_once(&qword_101934950, &stru_101850240);
  }
  BOOL v7 = (os_log_s *)qword_101934958;
  if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEFAULT))
  {
    float v8 = a4 ? "Registration" : "Unregistration";
    *(void *)int buf = &v27;
    id v9 = objc_msgSend( objc_msgSend(sub_10023311C(a1 + 10, &v27, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8], "description"),  "UTF8String");
    unsigned int v10 = *a3;
    *(_DWORD *)int buf = *a3;
    int v11 = sub_100247620((uint64_t)a1, (int *)buf, 1LL);
    ((void (*)(_BYTE *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(__p, a1, a3);
    uint64_t v12 = v33 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)int buf = 136447234;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v40 = 2082;
    id v41 = v9;
    __int16 v42 = 1026;
    unsigned int v43 = v10;
    __int16 v44 = 1026;
    int v45 = v11;
    __int16 v46 = 2082;
    int v47 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "VDR, action, %{public}s, client, %{public}s, notification, %{public}d, notificationClientCount, %{public}d, notifi cationString, %{public}s",  buf,  0x2Cu);
    if (SHIBYTE(v33) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_101850240);
    }
    uint64_t v17 = qword_101934958;
    if (a4) {
      double v18 = "Registration";
    }
    else {
      double v18 = "Unregistration";
    }
    *(void *)__int128 __p = &v27;
    id v19 = objc_msgSend( objc_msgSend(sub_10023311C(a1 + 10, &v27, (uint64_t)&unk_1012CF090, (_DWORD **)__p)[8], "description"),  "UTF8String");
    unsigned int v20 = *a3;
    *(_DWORD *)__int128 __p = *a3;
    int v21 = sub_100247620((uint64_t)a1, (int *)__p, 1LL);
    ((void (*)(void **__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(v25, a1, a3);
    if (v26 >= 0) {
      double v22 = v25;
    }
    else {
      double v22 = (void **)v25[0];
    }
    *(_DWORD *)__int128 __p = 136447234;
    *(void *)&__p[4] = v18;
    __int16 v31 = 2082;
    id v32 = v19;
    __int16 v33 = 1026;
    unsigned int v34 = v20;
    __int16 v35 = 1026;
    int v36 = v21;
    __int16 v37 = 2082;
    __int16 v38 = v22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v17,  0LL,  "VDR, action, %{public}s, client, %{public}s, notification, %{public}d, notificationClientCount, %{public}d, notifi cationString, %{public}s",  __p,  44);
    int v24 = v23;
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDRNotifier::logClient(int, const CLVDRNotifier_Type::Notification &, BOOL)",  "%s\n",  v24);
    if (v24 != buf) {
      free(v24);
    }
  }

  int v13 = @"Unregistration";
  if (a4) {
    int v13 = @"Registration";
  }
  v29[0] = v13;
  v28[0] = @"action";
  v28[1] = @"client";
  *(void *)int buf = &v27;
  v29[1] = objc_msgSend(sub_10023311C(a1 + 10, &v27, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8], "description");
  _DWORD v28[2] = @"notification";
  void v29[2] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a3);
  v28[3] = @"notificationClientCount";
  *(_DWORD *)int buf = *a3;
  v29[3] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  sub_100247620((uint64_t)a1, (int *)buf, 1LL));
  v28[4] = @"notificationString";
  ((void (*)(_BYTE *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(buf, a1, a3);
  if (v42 >= 0) {
    int v14 = buf;
  }
  else {
    int v14 = *(_BYTE **)buf;
  }
  v29[4] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14);
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  5LL);
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)buf);
  }
  return sub_100E575BC((uint64_t)v15, (uint64_t)"MotionVDR");
}

void sub_1007BE910( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007BE934(uint64_t **a1, uint64_t a2, unsigned int *a3)
{
  int v4 = a2;
  uint64_t v6 = ((uint64_t (*)(uint64_t **, uint64_t, unsigned int *, void *))(*a1)[12])(a1, a2, a3, &unk_10198D488);
  sub_1007BE454(a1, v4, a3, 1);
  return v6;
}

uint64_t sub_1007BE990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198D488);
}

BOOL sub_1007BE9A4(char *a1, int a2, int *a3)
{
  BOOL v6 = sub_1007BE9F0(a1, a2, a3);
  sub_1007BE454((uint64_t **)a1, a2, (unsigned int *)a3, 0);
  return v6;
}

BOOL sub_1007BE9F0(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      float v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          float v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        int v14 = (char *)*((void *)v8 + 6);
        uint64_t v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              id v19 = (char **)v13;
            }
            else {
              id v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            double v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                double v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101850220);
              }
              char v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101850220);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                __int16 v40 = v29;
                __int16 v41 = 2082;
                __int16 v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int16 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::unreg isterForNotification(int, const Notification_T &) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_1007BED78(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101850350;
  *(void *)(a1 + _Block_object_dispose(va, 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1007BEE4C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  float v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLVDRNotifier");
  sub_1007BED78((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = &off_1018501A8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007BEEE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1007BEF18(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1007BEFD0(a1);
  operator delete(v1);
}

id sub_1007BEF2C(uint64_t a1, int a2, void *a3)
{
  id result = sub_100494C6C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_1007BEF78(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1007BEFA4(id a1)
{
  qword_101934958 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_1007BEFD0(uint64_t a1)
{
  *(void *)a1 = off_101850350;
  int v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

void sub_1007BF030()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10132C0A4;
      v1[3] = unk_10132C0B4;
      v1[4] = xmmword_10132C0C4;
      v1[0] = xmmword_10132C084;
      v1[1] = unk_10132C094;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1007BF104(_Unwind_Exception *a1)
{
}

uint64_t sub_1007BF11C(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208]) {
      return sub_100253308(*(void *)(a3 + 8));
    }
  }

  return result;
}

void sub_1007BF1B4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1368);
  float v5 = *(float *)(a1 + 1372);
  float v6 = *(float *)(a1 + 1376);
  float v7 = *(float *)(a1 + 1380);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 3LL;
  *(void *)(a2 + 32) = 3LL;
  sub_1004493F4();
  float v9 = v8;
  if (sub_1003DBFB4(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    float v10 = *(double *)(a1 + 560);
    float v11 = (v7 - v10) / (v7 - v6);
    float v12 = v4 * sub_100D086F8(v11, v5);
    *(float *)a2 = v12;
    *(float *)(a2 + 2_Block_object_dispose(va, 8) = v12;
    int v13 = 1;
    *(_DWORD *)(a2 + 32) = 1;
    float v14 = 0.0;
    float v15 = 7.0;
    float v16 = v12;
    if (v12 > 7.0)
    {
LABEL_9:
      float v18 = v16;
      int v17 = v13;
      *(float *)(a2 + 20) = v15;
      int v13 = 3;
      *(_DWORD *)(a2 + 24) = 3;
      float v16 = v15;
      goto LABEL_11;
    }
  }

  else
  {
    int v13 = 0;
    *(float *)(a2 + 4) = v9;
    *(float *)(a2 + 2_Block_object_dispose(va, 8) = v9;
    float v12 = 0.0;
    float v14 = v9;
    float v16 = v9;
    *(_DWORD *)(a2 + 32) = 0;
  }

  *(float *)(a2 + 20) = v16;
  *(_DWORD *)(a2 + 24) = v13;
  float v15 = 4.4021;
  if (v16 >= 4.4021)
  {
    int v17 = v13;
    float v18 = v16;
    goto LABEL_11;
  }

  int v17 = v13;
  float v18 = v16;
LABEL_11:
  if (v18 < 1.6 && (!sub_1003DBFB4(a1) || *(double *)(a1 + 600) >= *(double *)a1))
  {
    *(void *)(a2 + 2_Block_object_dispose(va, 8) = 0x33FCCCCCDLL;
    int v17 = 3;
    float v18 = 1.6;
  }

  *(float *)(a2 + 12) = v9;
  if (*(_DWORD *)(a1 + 152) == 2101) {
    int v19 = 20;
  }
  else {
    int v19 = 13;
  }
  *(_DWORD *)(a2 + 36) = v19;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018503B8);
  }
  uint64_t v20 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134219264;
    double v37 = v14;
    __int16 v38 = 2048;
    double v39 = v12;
    __int16 v40 = 2048;
    double v41 = v18;
    __int16 v42 = 1024;
    int v43 = v17;
    __int16 v44 = 2048;
    double v45 = v16;
    __int16 v46 = 1024;
    int v47 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Yoga,metsWR,%f,metsHR,%f,truthMets,%f,truthMetsSrc,%d,userMets,%f,userMetsSrc,%d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018503B8);
    }
    int v24 = 134219264;
    double v25 = v14;
    __int16 v26 = 2048;
    double v27 = v12;
    __int16 v28 = 2048;
    double v29 = v18;
    __int16 v30 = 1024;
    int v31 = v17;
    __int16 v32 = 2048;
    double v33 = v16;
    __int16 v34 = 1024;
    int v35 = v13;
    LODWORD(v23) = 54;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Yoga,metsWR,%f,metsHR,%f,truthMets,%f,truthMetsSrc,%d,userMets,%f,userMetsSrc,%d",  COERCE_DOUBLE(&v24),  v23);
    double v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieYogaModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

void sub_1007BF57C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1007BF5A8(uint64_t a1, double *a2, double *a3, char a4)
{
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_1018503F0;
  *(_BYTE *)(a1 + 10) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0x3FF0000000000000LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = _Q0;
  *(_BYTE *)(a1 + 196) = a4;
  double v12 = *a2;
  *(double *)(a1 + 200) = *a2;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 4;
  *(void *)(a1 + 216) = 0x3FA0A3D70A3D70A4LL;
  *(_BYTE *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = off_10184DB98;
  int v13 = (void *)(a1 + 232);
  *(void *)(a1 + 240) = 100LL;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = off_101850538;
  *(void *)(a1 + 312) = 20LL;
  *(void *)(a1 + 320) = off_101850568;
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = 20LL;
  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 400) = off_101850568;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 20LL;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = off_101850568;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 20LL;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 616) = 0;
  float v14 = (char *)operator new[](0x54uLL);
  *(void *)(a1 + 120) = v14;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v14;
  *(void *)(a1 + 112) = v14 + 24;
  if (v12 > 0.011 || *a3 > 0.021)
  {
    *(void *)(a1 + 240) = 0LL;
    sub_10074DFF8(v13);
    *(void *)(a1 + 312) = 0LL;
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = 0LL;
    sub_1007C39F0((void *)(a1 + 320));
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
    sub_1007C39F0((void *)(a1 + 400));
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
    sub_1007C39F0((void *)(a1 + 480));
    *(_BYTE *)(a1 + 224) = 0;
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    float v16 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Doing crude accel measurement update.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      LOWORD(v42) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Doing crude accel measurement update.",  &v42,  2);
      float v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

  else
  {
    if (fabs(v12 * 200.0 + -1.0) > 0.25)
    {
      if (v12 <= 0.008 || v12 > 0.011) {
        uint64_t v15 = (0.5 / v12);
      }
      else {
        uint64_t v15 = 50LL;
      }
      *(void *)(a1 + 240) = v15;
      sub_10074DFF8(v13);
    }

    if (fabs(*a3 * 100.0 + -1.0) > 0.25)
    {
      uint64_t v19 = (0.200000003 / *a3);
      *(void *)(a1 + 312) = v19;
      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v19;
      sub_1007C39F0((void *)(a1 + 320));
      *(void *)(a1 + 40_Block_object_dispose(va, 8) = v19;
      sub_1007C39F0((void *)(a1 + 400));
      *(void *)(a1 + 48_Block_object_dispose(va, 8) = v19;
      sub_1007C39F0((void *)(a1 + 480));
      double v20 = *a3;
      int v21 = (int)((double)*(int *)(a1 + 208) / (*a3 * 100.0));
      if (v21 <= 2) {
        int v21 = 2;
      }
      *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = v21;
      *(double *)(a1 + 216) = fmax(sqrt(v20 * 75.0) * 0.0325, 0.0325);
    }
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018504C8);
  }
  double v22 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    double v23 = *(double *)(a1 + 240);
    uint64_t v24 = *(void *)(a1 + 312);
    int v25 = *(_DWORD *)(a1 + 208);
    uint64_t v26 = *(void *)(a1 + 216);
    *(_DWORD *)int buf = 134218752;
    double v51 = v23;
    __int16 v52 = 2048;
    uint64_t v53 = v24;
    __int16 v54 = 1024;
    int v55 = v25;
    __int16 v56 = 2048;
    uint64_t v57 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    double v31 = *(double *)(a1 + 240);
    uint64_t v32 = *(void *)(a1 + 312);
    int v33 = *(_DWORD *)(a1 + 208);
    uint64_t v34 = *(void *)(a1 + 216);
    int v42 = 134218752;
    double v43 = v31;
    __int16 v44 = 2048;
    uint64_t v45 = v32;
    __int16 v46 = 1024;
    int v47 = v33;
    __int16 v48 = 2048;
    uint64_t v49 = v34;
    LODWORD(v41) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f",  (size_t)&v42,  v41);
    __int16 v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018504C8);
  }
  double v27 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    double v28 = *a2;
    int v29 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)int buf = 134218240;
    double v51 = v28;
    __int16 v52 = 1024;
    LODWORD(v53) = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "gyroDt, %.4f, doAccelCheck, %d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    double v37 = *a2;
    int v38 = *(unsigned __int8 *)(a1 + 224);
    int v42 = 134218240;
    double v43 = v37;
    __int16 v44 = 1024;
    LODWORD(v45) = v38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "gyroDt, %.4f, doAccelCheck, %d",  COERCE_DOUBLE(&v42),  18);
    __int16 v40 = (uint8_t *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v39);
    if (v40 != buf) {
      free(v40);
    }
  }

  return a1;
}

void sub_1007BFCE4(_Unwind_Exception *a1)
{
  v1[29] = v2 + 16;
  sub_10046E180(v1 + 32);
  _Unwind_Resume(a1);
}

void *sub_1007BFD1C(void *a1)
{
  *a1 = off_1018503F0;
  uint64_t v2 = (void *)a1[16];
  if (v2) {
    operator delete[](v2);
  }
  sub_1007C3990(a1 + 38);
  a1[29] = off_10184DB98;
  sub_10046E180(a1 + 32);
  return a1;
}

void sub_1007BFD78(void *a1)
{
  uint64_t v1 = sub_1007BFD1C(a1);
  operator delete(v1);
}

uint64_t sub_1007BFD8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1007BFD94(uint64_t a1)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(void *)(a1 + 40) = 0x3FF0000000000000LL;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  uint64_t v2 = *(void *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_10132C280, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_10132C290, 0xCuLL);
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = _Q0;
  bzero((void *)(a1 + 184), 0xCuLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 560), 0xCuLL);
  bzero((void *)(a1 + 576), 0x18uLL);
  *(_DWORD *)(a1 + 600) = 0;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 616) = 0;
  sub_1007C39F0((void *)(a1 + 320));
  sub_1007C39F0((void *)(a1 + 400));
  sub_1007C39F0((void *)(a1 + 480));
  sub_10074DFF8((void *)(a1 + 232));
}

void sub_1007BFE90(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, void *a5)
{
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = *a5;
  ++*(_DWORD *)(a1 + 152);
  float v7 = *a4;
  float64x2_t v8 = *(float64x2_t *)(a1 + 88);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64( vsubq_f64( vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))),  v8));
  float32x2_t v52 = *(float32x2_t *)&v8.f64[0];
  float v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  float v53 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v52;
  float64x2_t v29 = v8;
  if (*(_BYTE *)(a1 + 224))
  {
    float v10 = *((float *)v8.f64 + 1);
    float v31 = sqrtf( vmlas_n_f32( vmuls_lane_f32(*((float *)v8.f64 + 1), *(float32x2_t *)&v8.f64[0], 1),  *(float *)v8.f64,  *(float *)v8.f64)
          + (float)(v9 * v9));
    sub_10074DC40(a1 + 232, &v31);
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      float v11 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134218752;
        double v43 = (float)(v31 / 0.017453);
        __int16 v44 = 2048;
        double v45 = (float)(*(float *)v29.f64 * 57.296);
        __int16 v46 = 2048;
        double v47 = (float)(v10 * 57.296);
        __int16 v48 = 2048;
        double v49 = (float)(v9 * 57.296);
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        int v32 = 134218752;
        double v33 = (float)(v31 / 0.017453);
        __int16 v34 = 2048;
        double v35 = (float)(*(float *)v29.f64 * 57.296);
        __int16 v36 = 2048;
        double v37 = (float)(v10 * 57.296);
        __int16 v38 = 2048;
        double v39 = (float)(v9 * 57.296);
        LODWORD(v2_Block_object_dispose(va, 8) = 42;
        double v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f",  COERCE_DOUBLE(&v32),  v28,  v29.f64[0],  v29.f64[1]);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v27);
      }
    }
  }

  sub_1007C03BC(a1 + 16, &v52, (double *)(a1 + 200));
  float32x2_t v12 = vadd_f32(*(float32x2_t *)(a1 + 136), *(float32x2_t *)&v29.f64[0]);
  *(float32x2_t *)(a1 + 136) = v12;
  float v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  double v14 = *(double *)(a1 + 200)
  if (v14 > 0.122500002) {
    sub_1007C0454(a1, v14, (int32x2_t)0x3FBF5C2900000000LL);
  }
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850508);
    }
    uint64_t v15 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 16);
      double v17 = *(double *)(a1 + 24);
      double v18 = *(double *)(a1 + 32);
      double v19 = *(double *)(a1 + 40);
      uint64_t v20 = *a5;
      *(_DWORD *)int buf = 134219008;
      double v43 = v16;
      __int16 v44 = 2048;
      double v45 = v17;
      __int16 v46 = 2048;
      double v47 = v18;
      __int16 v48 = 2048;
      double v49 = v19;
      __int16 v50 = 2048;
      uint64_t v51 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101850508);
      }
      double v21 = *(double *)(a1 + 16);
      double v22 = *(double *)(a1 + 24);
      double v23 = *(double *)(a1 + 32);
      double v24 = *(double *)(a1 + 40);
      uint64_t v25 = *a5;
      int v32 = 134219008;
      double v33 = v21;
      __int16 v34 = 2048;
      double v35 = v22;
      __int16 v36 = 2048;
      double v37 = v23;
      __int16 v38 = 2048;
      double v39 = v24;
      __int16 v40 = 2048;
      uint64_t v41 = v25;
      LODWORD(v2_Block_object_dispose(va, 8) = 52;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f",  COERCE_DOUBLE(&v32),  v28,  v29.f64[0],  v29.f64[1],  v30);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v26);
    }
  }

double sub_1007C03BC(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4 = *a3;
  float64x2_t v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  double v10 = v4 * a2[1].f32[0];
  sub_1007C0C90(v8, v9.f64);
  sub_10070D224((double *)v7, v8, (double *)a1);
  double result = *(double *)v7;
  __int128 v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_1007C0454(uint64_t result, double a2, int32x2_t a3)
{
  int v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    uint64_t v4 = result;
    float v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    int32x2_t v20 = a3;
    float v6 = *(float *)(result + 136) / (float)v3;
    double v24 = *(double *)(result + 200) * (double)v3;
    double v7 = v24;
    *(_DWORD *)(result + 14_Block_object_dispose(va, 8) = 0;
    double v18 = exp(v7 / -5000.0);
    float32x2_t v19 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v20, 0));
    bzero(v5, 0xCuLL);
    float32x2_t v8 = v19;
    *(float64x2_t *)(v4 + 8_Block_object_dispose(va, 8) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v18);
    *(double *)(v4 + 104) = v18 * *(double *)(v4 + 104);
    int v39 = 0;
    _S9 = v19.i32[1];
    float32_t v40 = v19.f32[1];
    float32x2_t v41 = vneg_f32(v19);
    int v42 = 0;
    float v43 = v6;
    __int32 v44 = v19.i32[0];
    float v45 = -v6;
    int v46 = 0;
    v31[0] = -(float)(vmul_f32(v8, v8).f32[0] + (float)(v19.f32[1] * v19.f32[1]));
    v31[1] = v6 * v19.f32[0];
    float v32 = vmuls_lane_f32(v6, v19, 1);
    float v33 = v6 * v19.f32[0];
    float v34 = -(float)((float)(v6 * v6) + (float)(v40 * v40));
    float v35 = vmuls_lane_f32(v8.f32[0], v8, 1);
    float v36 = v32;
    float v37 = v35;
    float v38 = -(float)((float)(v6 * v6) + (float)(v8.f32[0] * v8.f32[0]));
    sub_1007C0DC4((uint64_t)v30, &v24, (uint64_t)&v39, (uint64_t)v31);
    uint64_t v10 = *(void *)(v4 + 112);
    v4 += 112LL;
    sub_1007C0FC4(v30, v10, 6);
    v23[0] = &v28;
    v23[1] = &v27;
    _V1.S[1] = v19.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }

    double v21 = (float)(*(float *)v20.i32 * 0.00000021323) * 0.5;
    double v22 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_1007C1058(v29, &v24, (uint64_t)&v39, &v21, &v22);
    sub_1007C1298(v23, (uint64_t)v29, 6);
    double result = sub_1007C142C((uint64_t)&v25, (uint64_t *)v4, (uint64_t)v30, (uint64_t *)v23, 6LL);
    uint64_t v17 = *(void *)(v4 + 8);
    *(_OWORD *)uint64_t v17 = v25;
    *(void *)(v17 + 16) = v26;
  }

  return result;
}

double sub_1007C0690(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v13 = 1065353216;
  int v14 = 1065353216;
  int v15 = 1065353216;
  uint64_t v9 = *a3;
  int v10 = *((_DWORD *)a3 + 2);
  sub_1007C07AC(v11, (uint64_t *)(a1 + 112), (uint64_t)v12, (uint64_t)&v9, a2, 6, 3, (uint64_t)&v8);
  for (uint64_t i = 0LL; i != 24; i += 8LL)
  {
    double result = *(double *)&v11[i + 24] + *(double *)(a1 + i + 88);
    *(double *)(a1 + i + 8_Block_object_dispose(va, 8) = result;
  }

  return result;
}

void sub_1007C07AC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  if (a7 >= 1)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = a8 + 4LL * a6;
    do
    {
      sub_1007C375C(a8, *a2, a3 + 4 * v13, a7, a6);
      if (a6 >= 1)
      {
        int v15 = (float *)a2[1];
        uint64_t v16 = a6;
        uint64_t v17 = (float *)a8;
        do
        {
          float v18 = *v15++;
          v17[a6] = v18 * *v17;
          ++v17;
          --v16;
        }

        while (v16);
        uint64_t v19 = 0LL;
        float v20 = *(float *)(a5 + 4 * v13);
        float v21 = *(float *)(a4 + 4 * v13);
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
        float v24 = 1.0 / v21;
        do
        {
          float v25 = v21;
          float v26 = *(float *)(a8 + 4 * v19);
          float v21 = v21 + (float)(v26 * *(float *)(v14 + 4 * v19));
          *(float *)(v22 + 4 * v19) = *(float *)(v22 + 4 * v19) * (float)(v25 * (float)(1.0 / v21));
          if (v19)
          {
            uint64_t v27 = 0LL;
            float v28 = -(float)(v26 * v24);
            uint64_t v29 = v23 + 4LL * (((int)v19 - 1) * (int)v19 / 2);
            do
            {
              float v30 = *(float *)(v29 + 4 * v27);
              *(float *)(v29 + 4 * v27) = v30 + (float)(*(float *)(v14 + 4 * v27) * v28);
              *(float *)(v14 + 4 * v27) = *(float *)(v14 + 4 * v27) + (float)(*(float *)(v14 + 4 * v19) * v30);
              ++v27;
            }

            while (v19 != v27);
          }

          ++v19;
          float v24 = 1.0 / v21;
        }

        while (v19 != a6);
        float v31 = v20 * (float)(1.0 / v21);
        uint64_t v32 = a6;
        float v33 = (float *)(a8 + 4LL * a6);
        float v34 = (double *)a1;
        do
        {
          float v35 = *v33++;
          *float v34 = *v34 + (float)(v31 * v35);
          ++v34;
          --v32;
        }

        while (v32);
      }

      ++v13;
    }

    while (v13 != a7);
  }

double sub_1007C095C(uint64_t a1, float32x2_t *a2, float *a3)
{
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850508);
    }
    float v6 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v7 = a2->f32[0];
      double v8 = a2->f32[1];
      double v9 = a2[1].f32[0];
      double v10 = *a3;
      double v11 = a3[1];
      double v12 = a3[2];
      *(_DWORD *)int buf = 134219264;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v39 = 2048;
      double v40 = v8;
      __int16 v41 = 2048;
      double v42 = v9;
      __int16 v43 = 2048;
      double v44 = v10;
      __int16 v45 = 2048;
      double v46 = v11;
      __int16 v47 = 2048;
      double v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101850508);
      }
      double v19 = a2->f32[0];
      double v20 = a2->f32[1];
      double v21 = a2[1].f32[0];
      double v22 = *a3;
      double v23 = a3[1];
      double v24 = a3[2];
      *(_DWORD *)uint64_t v27 = 134219264;
      *(double *)&v27[4] = v19;
      __int16 v28 = 2048;
      double v29 = v20;
      __int16 v30 = 2048;
      double v31 = v21;
      __int16 v32 = 2048;
      double v33 = v22;
      __int16 v34 = 2048;
      double v35 = v23;
      __int16 v36 = 2048;
      double v37 = v24;
      LODWORD(v26) = 62;
      float v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f",  COERCE_DOUBLE(v27),  v26);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)",  "%s\n",  v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }

  if (*(_BYTE *)(a1 + 10))
  {
    uint64_t v13 = 0LL;
    double result = *(double *)a3;
    *(void *)int buf = *(void *)a3;
    *(float *)&uint8_t buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      float v15 = *(float *)&buf[v13];
      if (v15 < 0.000001) {
        float v15 = 0.000001;
      }
      *(float *)&buf[v13] = v15;
      v13 += 4LL;
    }

    while (v13 != 12);
    int v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50) {
        int v17 = 50;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 152);
      }
      do
      {
        *(float32x2_t *)uint64_t v27 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        float v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&v27[8] = v18;
        double result = sub_1007C0690(a1, (uint64_t)v27, (uint64_t *)buf);
        --v17;
      }

      while (v17);
    }

    *(_DWORD *)(a1 + 152) = 0;
  }

  else
  {
    *(float64x2_t *)(a1 + 8_Block_object_dispose(va, 8) = vcvtq_f64_f32(*a2);
    double result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(_BYTE *)(a1 + 10) = 1;
  }

  return result;
}

void sub_1007C0C90(double *a1, double *a2)
{
  double v4 = *a2;
  double v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    __double2 v13 = __sincos_stret(v5 * 0.5);
    double cosval = v13.__cosval;
    *a1 = v4 * v13.__sinval / v5;
    a1[1] = v13.__sinval * a2[1] / v5;
    double v11 = v13.__sinval * a2[2] / v5;
  }

  else
  {
    *a1 = v4 * 0.5;
    double v6 = a2[1] * 0.5;
    a1[1] = v6;
    double v7 = a2[2] * 0.5;
    double v8 = v5 * v5 * 0.125;
    double v9 = 1.0 - v8;
    double v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    double v11 = v7 / v10;
    double cosval = v9 / v10;
  }

  a1[2] = v11;
  a1[3] = cosval;
}

double sub_1007C0D6C(double *a1, double *a2)
{
  *a1 = a2[3] * (a2[1] + a2[1]) - *a2 * (a2[2] + a2[2]);
  a1[1] = -(a2[3] * (*a2 + *a2)) - a2[1] * (a2[2] + a2[2]);
  double result = *a2 * (*a2 + *a2) + -1.0 + a2[1] * (a2[1] + a2[1]);
  a1[2] = result;
  return result;
}

void sub_1007C0DC4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0LL;
  double v7 = *a2;
  float v8 = *a2;
  float v9 = -v8;
  double v10 = v7 * v7 * 0.5;
  float v11 = v10;
  uint64_t v12 = a3;
  __double2 v13 = v29;
  do
  {
    for (uint64_t i = 0LL; i != 3; ++i)
      v13[i] = (float)(*(float *)(a4 + i * 4) * v11) + (float)(v9 * *(float *)(v12 + i * 4));
    v29[4 * v6] = v29[4 * v6] + 1.0;
    ++v6;
    v13 += 3;
    a4 += 12LL;
    v12 += 12LL;
  }

  while (v6 != 3);
  uint64_t v15 = 0LL;
  uint64_t v16 = a1;
  do
  {
    *(void *)uint64_t v16 = *(void *)&v29[v15];
    *(float *)(v16 + _Block_object_dispose(va, 8) = v29[v15 + 2];
    v15 += 3LL;
    v16 += 24LL;
  }

  while (v15 != 9);
  uint64_t v17 = 0LL;
  float v18 = v10 / 5000.0 - v7;
  double v19 = v29;
  do
  {
    for (uint64_t j = 0LL; j != 3; ++j)
      v19[j] = *(float *)(a3 + j * 4) * v11;
    v29[4 * v17] = v29[4 * v17] + v18;
    ++v17;
    v19 += 3;
    a3 += 12LL;
  }

  while (v17 != 3);
  uint64_t v21 = 0LL;
  uint64_t v22 = a1 + 72;
  do
  {
    *(void *)uint64_t v22 = *(void *)&v29[v21];
    *(float *)(v22 + _Block_object_dispose(va, 8) = v29[v21 + 2];
    v21 += 3LL;
    v22 += 24LL;
  }

  while (v21 != 9);
  for (uint64_t k = 12LL; k != 84; k += 24LL)
    bzero((void *)(a1 + k), 0xCuLL);
  double v24 = exp(*a2 / -5000.0);
  uint64_t v25 = 0LL;
  float v26 = v24;
  uint64_t v27 = a1 + 84;
  __int16 v28 = (char *)(a1 + 84);
  do
  {
    bzero(v28, 0xCuLL);
    *(float *)(v27 + v25) = v26;
    v28 += 24;
    v25 += 28LL;
  }

  while (v25 != 84);
}

float *sub_1007C0FC4(float *result, uint64_t a2, int a3)
{
  uint64_t v3 = (a3 - 1);
  if (a3 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 4LL * a3;
    uint64_t v6 = result;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v3;
      while (v8 >= 2)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = v8 - 1;
        uint64_t v12 = v4 + (v8 - 1) * v7;
        float v13 = result[v12];
        uint64_t v14 = a2 + 4LL * (((int)v8 - 1) * ((int)v8 - 2) / 2);
        uint64_t v15 = v6;
        do
        {
          float v13 = v13 + (float)(*v15 * *(float *)(v14 + 4 * v10++));
          uint64_t v15 = (float *)((char *)v15 + v5);
        }

        while (v9 != v10);
        result[v12] = v13;
        --v9;
        uint64_t v8 = v11;
      }

      ++v4;
      ++v6;
    }

    while (v4 != v7);
  }

  return result;
}

void sub_1007C1058(char *a1, double *a2, uint64_t a3, double *a4, double *a5)
{
  uint64_t v9 = 0LL;
  float v10 = (*a2 * -0.25 / 5000.0 + 0.333333333) * (*a2 * (*a2 * (*a2 * *a5))) + *a4 * *a2;
  uint64_t v11 = a1;
  do
  {
    bzero(v11, 0xCuLL);
    *(float *)&a1[v9] = v10;
    v11 += 24;
    v9 += 28LL;
  }

  while (v9 != 84);
  double v12 = *a2;
  double v13 = *a2 / 5000.0;
  double v14 = expm1(-v13);
  double v15 = exp(-v13);
  uint64_t v16 = 0LL;
  double v17 = v15 * (v13 * v13 + v13 * 2.0) + v14 * 2.0;
  double v18 = *a5;
  double v19 = *a5 * -0.5;
  float v20 = v15 * (v12 * (v12 * v19));
  float v21 = v19 * 1.24999999e11 * v17;
  uint64_t v22 = v35;
  do
  {
    for (uint64_t i = 0LL; i != 3; ++i)
      v22[i] = *(float *)(a3 + i * 4) * v21;
    v35[4 * v16] = v35[4 * v16] + v20;
    ++v16;
    v22 += 3;
    a3 += 12LL;
  }

  while (v16 != 3);
  double v24 = (float *)(a1 + 12);
  uint64_t v25 = a1 + 72;
  float v26 = v35;
  uint64_t v27 = 3LL;
  do
  {
    uint64_t v28 = 0LL;
    double v29 = v24;
    do
    {
      float v30 = v26[v28];
      *(float *)&v25[v28 * 4] = v30;
      *double v29 = v30;
      v29 += 6;
      ++v28;
    }

    while (v28 != 3);
    ++v27;
    ++v24;
    v25 += 24;
    v26 += 3;
  }

  while (v27 != 6);
  uint64_t v31 = 0LL;
  float v32 = v18 * 5000.0 * (1.0 - exp(v12 * -2.0 / 5000.0)) * 0.5;
  double v33 = a1 + 84;
  __int16 v34 = a1 + 84;
  do
  {
    bzero(v34, 0xCuLL);
    *(float *)&v33[v31] = v32;
    v34 += 24;
    v31 += 28LL;
  }

  while (v31 != 84);
}

void sub_1007C1298(void **a1, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = (float *)*a1;
    uint64_t v8 = (float *)a1[1];
    uint64_t v9 = a3 - 2;
    uint64_t v10 = a3 - 1LL;
    int v11 = a3 - 1;
    double v12 = &v8[a3];
    uint64_t v13 = v10;
    int v14 = a3;
    while (1)
    {
      float v15 = *(float *)(a2 + 4 * (v13 + (int)v13 * a3));
      if (v13 < v10)
      {
        uint64_t v16 = 0LL;
        do
        {
          float v15 = v15
              + (float)((float)-(float)(v7[v13 + (v11 + (int)v16) * (v14 + (int)v16) / 2]
          ++v16;
        }

        while (v6 != (_DWORD)v16);
      }

      v8[v13] = v15;
      if (v13 < 1) {
        break;
      }
      double v17 = (float *)*a1;
      uint64_t v18 = v9;
      do
      {
        float v19 = *(float *)(a2 + 4 * (v18 + v13 * a3));
        if (v13 < v10)
        {
          uint64_t v20 = 0LL;
          do
          {
            float v19 = v19
                + (float)((float)-(float)(v17[v18 + (v11 + (int)v20) * (v14 + (int)v20) / 2]
            ++v20;
          }

          while (v6 != (_DWORD)v20);
        }

        v7[v18 + ((uint64_t)(int)((v13 - 1) * v13 + (((int)v13 - 1) * (int)v13 < 0)) >> 1)] = v19 / v8[v13];
      }

      while (v18-- > 0);
      --v14;
      --v9;
      --v11;
      --v12;
      ++v6;
      --v13;
    }
  }

uint64_t sub_1007C142C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = (a5 - 1);
  if ((int)a5 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    uint64_t v9 = a5;
    uint64_t v10 = 4LL * a5;
    uint64_t v12 = *a2;
    int v11 = (float *)a2[1];
    uint64_t v13 = a3 + v10 - 4;
    int v14 = a5 - 1;
    uint64_t v15 = v8 + v10;
    a5 = a5;
    while (1)
    {
      uint64_t v16 = a5--;
      float v17 = 0.0;
      uint64_t v18 = v9;
      float v19 = v11;
      uint64_t v20 = (float *)v13;
      do
      {
        float v21 = *v19++;
        float v17 = v17 + (float)((float)(*v20 * *v20) * v21);
        uint64_t v20 = (float *)((char *)v20 + v10);
        --v18;
      }

      while (v18);
      if (v16 < v9)
      {
        uint64_t v22 = 0LL;
        do
        {
          float v17 = v17
              + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v22) * ((int)v16 + (int)v22) / 2))
          ++v22;
        }

        while (v6 != (_DWORD)v22);
      }

      *(float *)(result + 4 * a5) = v17 + *(float *)(v8 + 4 * a5);
      if (v16 < 2) {
        break;
      }
      uint64_t v23 = 0LL;
      double v24 = (float *)a2[1];
      uint64_t v25 = (uint64_t)(int)(a5 * (v16 - 2) + ((int)a5 * ((int)v16 - 2) < 0)) >> 1;
      uint64_t v26 = a3;
      do
      {
        uint64_t v27 = 0LL;
        float v28 = 0.0;
        uint64_t v29 = v9;
        float v30 = v24;
        do
        {
          float v31 = *v30++;
          float v28 = v28 + (float)((float)(*(float *)(v13 + v27) * v31) * *(float *)(v26 + v27));
          v27 += v10;
          --v29;
        }

        while (v29);
        uint64_t v32 = v23 + v25;
        float v33 = v28 + (float)(*(float *)(v8 + 4 * a5) * *(float *)(v7 + 4 * (v23 + v25)));
        if (v16 < v9)
        {
          uint64_t v34 = 0LL;
          do
          {
            float v33 = v33
                + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v34) * ((int)v16 + (int)v34) / 2))
            ++v34;
          }

          while (v6 != (_DWORD)v34);
        }

        uint64_t v35 = 0LL;
        *(float *)(v12 + 4 * v32) = v33 / *(float *)(result + 4 * a5);
        uint64_t v36 = v9;
        do
        {
          *(float *)(v26 + v35) = *(float *)(v26 + v35) - (float)(*(float *)(v12 + 4 * v32) * *(float *)(v13 + v35));
          v35 += v10;
          --v36;
        }

        while (v36);
        int v37 = v6;
        int v38 = v16;
        if (v16 < v9)
        {
          do
          {
            *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2)) = *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2))
            ++v38;
            --v37;
          }

          while (v37);
        }

        *(float *)(v7 + 4 * v32) = *(float *)(v7 + 4 * v32) - *(float *)(v12 + 4 * v32);
        ++v23;
        v26 += 4LL;
      }

      while (v23 != v5);
      --v5;
      v13 -= 4LL;
      --v14;
      v15 -= 4LL;
      ++v6;
    }
  }

  return result;
}

void sub_1007C1678(uint64_t a1, double *a2, double *a3, double *a4, void *a5)
{
  v10.f64[0] = *a2;
  float v11 = *a2;
  *(float *)(a1 + 184) = v11;
  double v12 = *a3;
  float v13 = *a3;
  *(float *)(a1 + 18_Block_object_dispose(va, 8) = v13;
  double v14 = *a4;
  float v15 = *a4;
  *(float *)(a1 + 192) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_10070D13C(a1 + 16, a2, a3, a4);
    *(void *)(a1 + 176) = *a5;
    float v16 = *a2;
    *(float *)(a1 + 560) = v16;
    float v17 = *a3;
    *(float *)(a1 + 564) = v17;
    float v18 = *a4;
    *(float *)(a1 + 56_Block_object_dispose(va, 8) = v18;
    *(_DWORD *)(a1 + 600) = 0;
    sub_1007C0D6C((double *)(a1 + 576), (double *)(a1 + 16));
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
    return;
  }

  if (*(_BYTE *)(a1 + 224))
  {
    v10.f64[1] = v12;
    float32x2_t v19 = vcvt_f32_f64( vmlaq_f64( vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 560)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)),  (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL),  v10));
    *(float32x2_t *)(a1 + 560) = v19;
    float v20 = *(float *)(a1 + 568) * 0.1 + v14 * 0.9;
    *(float *)(a1 + 56_Block_object_dispose(va, 8) = v20;
    *(double *)int buf = v19.f32[0];
    *(double *)__int16 v154 = v19.f32[1];
    double v148 = v20;
    sub_1007C3A68(a1 + 320, (double *)buf);
    sub_1007C3A68(a1 + 400, (double *)v154);
    sub_1007C3A68(a1 + 480, &v148);
  }

  *(void *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148)) {
    return;
  }
  double v21 = *(double *)a5;
  double v22 = *(double *)(a1 + 168);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850508);
    }
    uint64_t v23 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v24 = *a2;
      double v25 = *a3;
      double v26 = *a4;
      double v27 = *(float *)(a1 + 560);
      double v28 = *(float *)(a1 + 564);
      double v29 = *(float *)(a1 + 568);
      uint64_t v30 = *a5;
      *(_DWORD *)int buf = 134219520;
      *(double *)&uint8_t buf[4] = v24;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      double v165 = v26;
      __int16 v166 = 2048;
      double v167 = v27;
      __int16 v168 = 2048;
      double v169 = v28;
      __int16 v170 = 2048;
      double v171 = v29;
      __int16 v172 = 2048;
      uint64_t v173 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf",  buf,  0x48u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101850508);
      }
      double v99 = *a2;
      double v100 = *a3;
      double v101 = *a4;
      double v102 = *(float *)(a1 + 560);
      double v103 = *(float *)(a1 + 564);
      double v104 = *(float *)(a1 + 568);
      uint64_t v105 = *a5;
      *(_DWORD *)__int16 v154 = 134219520;
      *(double *)&v154[4] = v99;
      *(_WORD *)&v154[12] = 2048;
      *(double *)&v154[14] = v100;
      *(_WORD *)&v154[22] = 2048;
      double v155 = v101;
      __int16 v156 = 2048;
      double v157 = v102;
      __int16 v158 = 2048;
      double v159 = v103;
      __int16 v160 = 2048;
      double v161 = v104;
      __int16 v162 = 2048;
      uint64_t v163 = v105;
      LODWORD(v137) = 72;
      int v106 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf",  COERCE_DOUBLE(v154),  v137,  v138,  v139,  v140,  v141,  v142);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v106);
      if (v106 != buf) {
        free(v106);
      }
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850508);
    }
    float v31 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v32 = *(float *)(a1 + 156);
      double v33 = *(float *)(a1 + 160);
      double v34 = *(float *)(a1 + 164);
      unint64_t v35 = *(void *)(a1 + 296);
      float v36 = 0.0;
      if (v35)
      {
        float v37 = *(float *)(a1 + 248);
        double v38 = (float)(v37 / (float)v35);
        if (v35 != 1)
        {
          float v39 = (float)((float)v35 * *(float *)(a1 + 252)) - (float)(v37 * v37);
          if (v39 >= 0.0) {
            float v36 = v39 / (float)((v35 - 1) * v35);
          }
        }
      }

      else
      {
        double v38 = 0.0;
      }

      *(_DWORD *)int buf = 134219008;
      *(double *)&uint8_t buf[4] = v32;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2048;
      double v165 = v34;
      __int16 v166 = 2048;
      double v167 = v38;
      __int16 v168 = 2048;
      double v169 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101850508);
      }
      double v107 = *(float *)(a1 + 156);
      double v108 = *(float *)(a1 + 160);
      double v109 = *(float *)(a1 + 164);
      unint64_t v110 = *(void *)(a1 + 296);
      float v111 = 0.0;
      if (v110)
      {
        float v112 = *(float *)(a1 + 248);
        double v113 = (float)(v112 / (float)v110);
        if (v110 != 1)
        {
          float v114 = (float)((float)v110 * *(float *)(a1 + 252)) - (float)(v112 * v112);
          if (v114 >= 0.0) {
            float v111 = v114 / (float)((v110 - 1) * v110);
          }
        }
      }

      else
      {
        double v113 = 0.0;
      }

      *(_DWORD *)__int16 v154 = 134219008;
      *(double *)&v154[4] = v107;
      *(_WORD *)&v154[12] = 2048;
      *(double *)&v154[14] = v108;
      *(_WORD *)&v154[22] = 2048;
      double v155 = v109;
      __int16 v156 = 2048;
      double v157 = v113;
      __int16 v158 = 2048;
      double v159 = v111;
      LODWORD(v137) = 52;
      __int16 v121 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f",  COERCE_DOUBLE(v154),  v137,  v138,  v139,  v140);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v121);
      if (v121 != buf) {
        free(v121);
      }
    }
  }

  double v41 = *a3;
  *(double *)&__int128 v152 = *a2;
  double v40 = *(double *)&v152;
  *((double *)&v152 + 1) = v41;
  double v153 = *a4;
  double v42 = v153;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  LODWORD(v21) = *(_DWORD *)(a1 + 140);
  float v43 = *(float *)(a1 + 144);
  float v146 = *(float *)&v21;
  float v147 = *(float *)&v22;
  int v44 = *(_DWORD *)(a1 + 148);
  sub_1007C0454(a1, v21, *(int32x2_t *)&v22);
  double v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
  double v46 = fabs(v45 + -1.0) / v45;
  if (v46 > 0.1) {
    return;
  }
  if (!*(_BYTE *)(a1 + 224) || *(_DWORD *)(a1 + 616)) {
    goto LABEL_26;
  }
  float v70 = fabsf(*(float *)(a1 + 156));
  if (v70 > 10.0) {
    goto LABEL_86;
  }
  float v71 = fabsf(*(float *)(a1 + 160));
  if (v71 > 10.0) {
    goto LABEL_86;
  }
  float v72 = fabsf(*(float *)(a1 + 164));
  if (v72 > 10.0) {
    goto LABEL_86;
  }
  unint64_t v73 = *(void *)(a1 + 296);
  if (v73)
  {
  }

  if (v70 > 3.14159265
    || v71 > 3.14159265
    || v72 > 3.14159265
    || (!v73 ? (float v74 = 0.0) : (float v74 = *(float *)(a1 + 248) / (float)v73), v74 > 3.14159265))
  {
    if (v73 < 2
      || (float v75 = (float)((float)v73 * *(float *)(a1 + 252)) - (float)(*(float *)(a1 + 248) * *(float *)(a1 + 248)),
          v75 < 0.0)
      || (float)(v75 / (float)((v73 - 1) * v73)) < 1.25)
    {
      sub_1007C0D6C((double *)(a1 + 576), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 196))
      {
        *(_DWORD *)(a1 + 600) = 0;
        goto LABEL_32;
      }

      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      int v76 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        *(_WORD *)__int16 v154 = 0;
        LODWORD(v137) = 2;
        __int16 v77 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "rotating and going through.",  v154,  *(void *)&v137);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const C FTimeInterval &)",  "%s\n",  v77);
        if (v77 != buf) {
          free(v77);
        }
      }

double sub_1007C3400@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(a1 + 88);
  double v3 = 0.0;
  double v4 = 0.0;
  if (v2 >= 2)
  {
    double v5 = (double)v2 * *(double *)(a1 + 40) - *(double *)(a1 + 32) * *(double *)(a1 + 32);
    double v4 = 0.0;
    if (v5 >= 0.0) {
      double v4 = v5 / (double)((v2 - 1) * v2);
    }
  }

  unint64_t v6 = *(void *)(a1 + 168);
  if (v6 >= 2)
  {
    double v7 = (double)v6 * *(double *)(a1 + 120) - *(double *)(a1 + 112) * *(double *)(a1 + 112);
    if (v7 >= 0.0) {
      double v3 = v7 / (double)((v6 - 1) * v6);
    }
  }

  unint64_t v8 = *(void *)(a1 + 248);
  double v9 = 0.0;
  if (v8 >= 2)
  {
    double v10 = (double)v8 * *(double *)(a1 + 200) - *(double *)(a1 + 192) * *(double *)(a1 + 192);
    if (v10 >= 0.0) {
      double v9 = v10 / (double)((v8 - 1) * v8);
    }
  }

  *(void *)a2 = &off_101850598;
  *(double *)(a2 + _Block_object_dispose(va, 8) = sqrt(v4);
  *(double *)(a2 + 16) = sqrt(v3);
  double result = sqrt(v9);
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1007C34D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 88);
  double v3 = 0.0;
  double v4 = 0.0;
  if (v2) {
    double v4 = *(double *)(result + 32) / (double)v2;
  }
  unint64_t v5 = *(void *)(result + 168);
  if (v5) {
    double v3 = *(double *)(result + 112) / (double)v5;
  }
  unint64_t v6 = *(void *)(result + 248);
  if (v6) {
    double v7 = *(double *)(result + 192) / (double)v6;
  }
  else {
    double v7 = 0.0;
  }
  *(void *)a2 = &off_101850598;
  *(double *)(a2 + _Block_object_dispose(va, 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v7;
  return result;
}

void sub_1007C353C(uint64_t a1, double *a2, double a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  double v8 = *(double *)(a1 + 40);
  double v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  double v12 = v8 * (v11 + v11) - v10 * v9;
  double v13 = -(v8 * (v10 + v10)) - v11 * v9;
  double v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&double v9 = v13;
  *(float *)&double v8 = v14;
  v29[0] = 0;
  v29[1] = LODWORD(v8);
  *(float *)&void v29[2] = -*(float *)&v9;
  *(float *)&double v10 = v12;
  *(float *)&v29[3] = -*(float *)&v8;
  v29[4] = 0;
  void v29[5] = LODWORD(v10);
  v29[6] = LODWORD(v9);
  *(float *)&v29[7] = -*(float *)&v10;
  v29[8] = 0;
  do
  {
    for (uint64_t i = 0LL; i != 9; i += 3LL)
      *(_DWORD *)&v27[v6 * 4 + i * 4] = v29[v6 + i];
    ++v7;
    ++v6;
  }

  while (v7 != 3);
  bzero(&v28, 0x24uLL);
  float v16 = a3;
  *(float *)double v26 = v16;
  *(float *)&v26[1] = v16;
  *(float *)&v26[2] = v16;
  float v17 = *a2 - v12;
  float v18 = a2[1] - v13;
  *(float *)double v25 = v17;
  *(float *)&v25[1] = v18;
  float v19 = a2[2] - v14;
  *(float *)&v25[2] = v19;
  sub_1007C07AC(&v22, (uint64_t *)(a1 + 112), (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, 6, 3, (uint64_t)&v21);
  double v20 = v13 * v23 + v22 * v12 + v24 * v14;
  double v22 = v22 - v20 * v12;
  double v23 = v23 - v20 * v13;
  double v24 = v24 - v20 * v14;
  sub_1007C36EC(a1, &v22);
}

double sub_1007C36EC(uint64_t a1, double *a2)
{
  uint64_t v4 = 0LL;
  __int128 v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = a1 + 88;
  do
  {
    double result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * _Block_object_dispose(va, 8) = result;
    ++v4;
  }

  while (v4 != 3);
  return result;
}

uint64_t sub_1007C375C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (float *)(a3 - 4LL * a4);
    do
    {
      float v7 = *(float *)(a3 + 4 * v5 * a4);
      *(float *)(result + 4 * sub_1012279C0(0LL, v4, v5) = v7;
      if (v5)
      {
        double v8 = v6;
        uint64_t v9 = v5;
        do
        {
          float v7 = v7 + (float)(*v8 * *(float *)(a2 - 4 + 4LL * (((int)v5 - 1) * (int)v5 / 2) + 4 * v9));
          *(float *)(result + 4 * sub_1012279C0(0LL, v4, v5) = v7;
          v8 -= a4;
        }

        while (v9-- > 1);
      }

      ++v5;
      v6 += a4;
    }

    while (v5 != a5);
  }

  return result;
}

double sub_1007C37E0(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double sub_1007C37E8(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_1007C37F0(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_1007C37F8(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[39];
  a2[1] = a1[40];
  a2[2] = a1[41];
  return 1LL;
}

BOOL sub_1007C3818(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(void *)a2 = 0LL;
    float v10 = 0.0;
  }

  else
  {
    double v3 = *(double *)(a1 + 40);
    double v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    double v5 = *(double *)(a1 + 16);
    double v6 = *(double *)(a1 + 24);
    double v7 = v3 * (v6 + v6) - v5 * v4;
    double v8 = -(v3 * (v5 + v5)) - v6 * v4;
    double v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&double v5 = *(float *)(a1 + 184) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&double v8 = *(float *)(a1 + 188) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    float v10 = *(float *)(a1 + 192) - v9;
  }

  BOOL result = v2 > 0.0;
  *(float *)(a2 + _Block_object_dispose(va, 8) = v10;
  return result;
}

uint64_t sub_1007C38A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

float sub_1007C38B0(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_1007C38BC(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1007C38E8(id a1)
{
  qword_101934578 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void *sub_1007C3914(void *a1)
{
  *a1 = off_101850568;
  sub_100210578(a1 + 4);
  return a1;
}

void sub_1007C3948(void *a1)
{
  uint64_t v1 = sub_1007C3990(a1);
  operator delete(v1);
}

void sub_1007C395C(void *a1)
{
  *a1 = off_101850568;
  sub_100210578(a1 + 4);
  operator delete(a1);
}

void *sub_1007C3990(void *a1)
{
  *a1 = off_101850538;
  a1[22] = off_101850568;
  sub_100210578(a1 + 26);
  a1[12] = off_101850568;
  sub_100210578(a1 + 16);
  a1[2] = off_101850568;
  sub_100210578(a1 + 6);
  return a1;
}

void sub_1007C39F0(void *a1)
{
  double v2 = (void **)a1[5];
  uint64_t v3 = a1[6];
  a1[9] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[6];
      double v2 = (void **)(a1[5] + 8LL);
      a1[5] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256LL;
    goto LABEL_7;
  }

  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 512LL;
LABEL_7:
    a1[8] = v6;
  }

  a1[2] = 0LL;
  a1[3] = 0LL;
}

double sub_1007C3A68(uint64_t a1, double *a2)
{
  uint64_t v4 = a1 + 32;
  sub_100355FA8((void *)(a1 + 32), a2);
  unint64_t v5 = *(void *)(a1 + 72);
  if (v5 > *(void *)(a1 + 8))
  {
    unint64_t v6 = *(void *)(a1 + 64);
    double v7 = *(double *)(*(void *)(*(void *)(a1 + 40) + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v6 & 0x1FF));
    double v8 = *(double *)(a1 + 16) - v7;
    double v9 = *(double *)(a1 + 24) - v7 * v7;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v9;
    *(void *)(a1 + 64) = v6 + 1;
    *(void *)(a1 + 72) = v5 - 1;
    sub_1002109A4(v4, 1);
  }

  double v10 = *(double *)(a1 + 24);
  *(double *)(a1 + 16) = *a2 + *(double *)(a1 + 16);
  double result = v10 + *a2 * *a2;
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1007C3B0C()
{
  uint64_t result = sub_1004FAB40();
  if ((result & 1) != 0)
  {
    uint64_t v1 = operator new(0x60uLL);
    uint64_t result = sub_1007C3BB4((uint64_t)v1);
    qword_1019A1650 = (uint64_t)v1;
  }

  return result;
}

void sub_1007C3B44(_Unwind_Exception *a1)
{
}

uint64_t sub_1007C3B58()
{
  return sub_1004FAB40() & 1;
}

uint64_t sub_1007C3B70()
{
  if (qword_101998A78 != -1) {
    dispatch_once(&qword_101998A78, &stru_1018505B8);
  }
  return qword_1019A1650;
}

uint64_t sub_1007C3BB4(uint64_t a1)
{
  uint64_t v2 = sub_1006DC9EC(a1, (uint64_t)"CLMagnetometer", 1);
  *(void *)uint64_t v2 = off_1018505E8;
  *(_BYTE *)(v2 + 32) = 0;
  uint64_t v3 = (BOOL *)(v2 + 32);
  *(void *)(v2 + 64) = 0LL;
  *(_DWORD *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0LL;
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v4 = sub_1006E27E8();
  sub_100413284(v4, &v11);
  char v5 = sub_1002A6F64(v11, "LogMagnetometer", v3);
  char v6 = v5;
  double v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) != 0) {
        return a1;
      }
      goto LABEL_6;
    }
  }

  if ((v5 & 1) == 0) {
LABEL_6:
  }
    *uint64_t v3 = 0;
  return a1;
}

void sub_1007C3C98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1007C3CC4(void *a1)
{
  *a1 = off_1018505E8;
  uint64_t v3 = 0LL;
  sub_1007C3D1C((uint64_t)a1, (double *)&v3);
  sub_1000F0D38(a1 + 10);
  sub_10000AE14((uint64_t)(a1 + 10));
  return sub_1006DCAA8(a1);
}

uint64_t sub_1007C3D1C(uint64_t a1, double *a2)
{
  char v4 = sub_1004FAB40();
  if ((v4 & 1) == 0) {
    return v4 & 1;
  }
  char v5 = (uint64_t *)(a1 + 80);
  if (!*(void *)(a1 + 80))
  {
    char v6 = (uint64_t *)sub_10071542C();
    uint64_t v27 = 0xA0000FF00LL;
    char v28 = 0;
    sub_10121B774(v6, (uint64_t)&v27, (uint64_t *)buf);
    sub_10005F550(a1 + 80, (__int128 *)buf);
    double v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      double v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    id v10 = [&off_1018D69B8 mutableCopy];
    HIDWORD(v26) = 0;
    uint64_t v11 = sub_1006E27E8();
    sub_100413284(v11, buf);
    int v12 = sub_1002A775C(*(uint64_t *)buf, "MagLocationID", (_DWORD *)&v26 + 1);
    if (HIDWORD(v26)) {
      int v13 = 1;
    }
    else {
      int v13 = v12;
    }
    double v14 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_15;
    }
    float v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v13) {
        goto LABEL_16;
      }
    }

    else
    {
LABEL_15:
      if (v13)
      {
LABEL_16:
        objc_msgSend( v10,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v26)),  @"LocationID");
        if (qword_1019345A0 != -1) {
          dispatch_once(&qword_1019345A0, &stru_101850630);
        }
        float v17 = (os_log_s *)qword_1019345A8;
        if (os_log_type_enabled((os_log_t)qword_1019345A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = HIDWORD(v26);
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Setting Mag matching properties with IMULocationID %d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345A0 != -1) {
            dispatch_once(&qword_1019345A0, &stru_101850630);
          }
          int v29 = 67109120;
          LODWORD(v30) = HIDWORD(v26);
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345A8,  0LL,  "Setting Mag matching properties with IMULocationID %d",  &v29);
          double v25 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }
      }
    }

    sub_10071A850(*v5, v10);
    sub_100719D78(*(uint64_t **)(a1 + 80), (uint64_t)sub_1007C424C, a1);
  }

  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101850650);
  }
  float v18 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    double v19 = *a2;
    *(_DWORD *)int buf = 134349056;
    *(double *)&uint8_t buf[4] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Setting magnetometer update and batch interval to %{public}f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850650);
    }
    uint64_t v21 = *(void *)a2;
    int v29 = 134349056;
    uint64_t v30 = v21;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Setting magnetometer update and batch interval to %{public}f",  &v29,  v26);
    double v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  sub_10071A73C(*v5, *a2);
  sub_10071A7C0(*v5, *a2);
  return v4 & 1;
}

void sub_1007C4198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1007C41CC(void *a1)
{
  uint64_t v1 = sub_1007C3CC4(a1);
  operator delete(v1);
}

BOOL sub_1007C41E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v3 = -[NSNumber initWithBool:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithBool:", 1LL);
    (*(void (**)(void, const __CFString *, NSNumber *))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  @"IOHIDCompasssResetDAC",  v3);
  }

  return v1 != 0;
}

uint64_t sub_1007C424C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 21)
  {
    float32_t FloatValue = IOHIDEventGetFloatValue(a4, 1376256LL);
    v12.f32[0] = FloatValue;
    float32_t v8 = IOHIDEventGetFloatValue(a4, 1376257LL);
    v12.f32[1] = v8;
    float v9 = IOHIDEventGetFloatValue(a4, 1376258LL);
    float v13 = v9;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    double v11 = sub_101171C7C(TimeStamp);
    return sub_1007C4798(a1, &v12, &v11);
  }

  return result;
}

double sub_1007C42F4(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850650);
    }
    char v4 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67240192;
      int v17 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Unrecognized magnetometer notification %{public}d",  buf,  8u);
    }

    double v5 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101850650);
      }
      v15[0] = 67240192;
      v15[1] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  17LL,  "Unrecognized magnetometer notification %{public}d",  v15,  8);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    sub_1007C3D1C(a1, a3);
    if (*a3 <= 0.0 || *(void *)(a1 + 40))
    {
      if (*a3 <= 0.0 && *(void *)(a1 + 40))
      {
        uint64_t v10 = sub_100AE28C8();
        sub_1006DD2A0(v10, 0, *(void *)(a1 + 40));
        uint64_t v11 = *(void *)(a1 + 40);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
        }
        *(void *)(a1 + 40) = 0LL;
      }
    }

    else
    {
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(a1 + 56) = 0;
      float32x2_t v12 = operator new(0x20uLL);
      *float32x2_t v12 = off_1018A2210;
      *float32x2_t v12 = &off_1018506A0;
      v12[1] = 0LL;
      v12[2] = sub_1007C458C;
      v12[3] = a1;
      *(void *)(a1 + 40) = v12;
      uint64_t v13 = sub_100AE28C8();
      sub_1006DCB40(v13, 0, *(void *)(a1 + 40), -1.0);
    }

    return *a3;
  }

  return v5;
}

void sub_1007C4570(_Unwind_Exception *a1)
{
}

void sub_1007C458C(float *a1, uint64_t a2)
{
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101850650);
  }
  char v4 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    double v5 = *a1;
    double v6 = a1[1];
    double v7 = a1[2];
    *(_DWORD *)int buf = 134218496;
    double v22 = v5;
    __int16 v23 = 2048;
    double v24 = v6;
    __int16 v25 = 2048;
    double v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received magnetometer offset (%f, %f, %f)",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850650);
    }
    double v9 = *a1;
    double v10 = a1[1];
    double v11 = a1[2];
    int v15 = 134218496;
    double v16 = v9;
    __int16 v17 = 2048;
    double v18 = v10;
    __int16 v19 = 2048;
    double v20 = v11;
    LODWORD(v14) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Received magnetometer offset (%f, %f, %f)",  COERCE_DOUBLE(&v15),  v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMagnetometer::onOffset(const CLMotionTypeMagneticField *, void *)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  uint64_t v8 = *(void *)a1;
  *(float *)(a2 + 56) = a1[2];
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v8;
}

uint64_t sub_1007C4798(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v6 = *a3;
  if (*a3 > *(double *)(a1 + 64) + 1.0)
  {
    double v7 = (void *)(*(uint64_t (**)(void, const __CFString *, double))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  @"AppleVoltageDictionary",  v6);
    objc_msgSend(objc_msgSend(v7, "objectForKeyedSubscript:", @"COMPASS_TEMP"), "floatValue");
    *(float *)(a1 + 72) = v8 / 100.0;
    *(double *)(a1 + 64) = *a3;

    double v6 = *a3;
  }

  float32x2_t v9 = vsub_f32(*a2, *(float32x2_t *)(a1 + 48));
  double v34 = v6;
  double v35 = *(double *)&v9;
  v9.i32[0] = *(_DWORD *)(a1 + 72);
  float v36 = a2[1].f32[0] - *(float *)(a1 + 56);
  __int32 v37 = v9.i32[0];
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101850650);
  }
  double v10 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
  {
    double v11 = a2->f32[0];
    double v12 = a2->f32[1];
    double v13 = a2[1].f32[0];
    double v14 = *a3;
    *(_DWORD *)int buf = 136316162;
    float v39 = "Magnetometer";
    __int16 v40 = 2048;
    double v41 = v11;
    __int16 v42 = 2048;
    double v43 = v12;
    __int16 v44 = 2048;
    double v45 = v13;
    __int16 v46 = 2048;
    double v47 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101850650);
    }
    double v26 = a2->f32[0];
    double v27 = a2->f32[1];
    double v28 = a2[1].f32[0];
    double v29 = *a3;
    *(_DWORD *)BOOL v51 = 136316162;
    *(void *)&v51[4] = "Magnetometer";
    *(_WORD *)&v51[12] = 2048;
    *(double *)&v51[14] = v26;
    __int16 v52 = 2048;
    double v53 = v27;
    *(_WORD *)__int16 v54 = 2048;
    *(double *)&v54[2] = v28;
    *(_WORD *)&v54[10] = 2048;
    double v55 = v29;
    LODWORD(v32) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f",  v51,  v32,  v33,  v34,  v35);
    float v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometer::onMagnetometerData(const CLMotionTypeMagneticField &, const CLMotionTypeTimestamp &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  if (*(_BYTE *)(a1 + 32))
  {
    *(void *)BOOL v51 = &off_101857A08;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v16 = *a3;
    *(CFAbsoluteTime *)&v51[8] = Current;
    float32x2_t v17 = *a2;
    double v53 = v16;
    *(float32x2_t *)__int16 v54 = v17;
    *(_DWORD *)&v54[8] = a2[1].i32[0];
    uint64_t v18 = sub_100E00E14();
    sub_100E022E0(v18, (uint64_t)v51);
    sub_101125260(buf);
    sub_10113A788(buf);
    v50 |= 1u;
    uint64_t v48 = *(void *)&v51[8];
    uint64_t v19 = v49;
    double v20 = *a3;
    *(_BYTE *)(v49 + 36) |= 1u;
    *(double *)(v19 + _Block_object_dispose(va, 8) = v20;
    uint64_t v21 = v49;
    LODWORD(v20) = a2->i32[0];
    *(_BYTE *)(v49 + 36) |= 8u;
    *(_DWORD *)(v21 + 24) = LODWORD(v20);
    uint64_t v22 = v49;
    LODWORD(v20) = a2->i32[1];
    *(_BYTE *)(v49 + 36) |= 0x10u;
    *(_DWORD *)(v22 + 2_Block_object_dispose(va, 8) = LODWORD(v20);
    uint64_t v23 = v49;
    LODWORD(v20) = a2[1].i32[0];
    *(_BYTE *)(v49 + 36) |= 0x20u;
    *(_DWORD *)(v23 + 32) = LODWORD(v20);
    uint64_t v24 = v49;
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    *(_BYTE *)(v49 + 36) |= 4u;
    *(_DWORD *)(v24 + 20) = LODWORD(v20);
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101850670);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  return sub_1006DD528(a1, 0LL, (uint64_t)&v34, 24LL);
}

void sub_1007C4BA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1007C4BC4(id a1)
{
  qword_1019345A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_1007C4BF0(id a1)
{
  qword_101934578 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_1007C4C20(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1368);
  float v5 = *(float *)(a1 + 1372);
  float v6 = *(float *)(a1 + 1376);
  float v7 = *(float *)(a1 + 1380);
  float v8 = 0.0;
  if (sub_1003DBFB4(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    float v9 = *(double *)(a1 + 560);
    double v10 = v9;
    double v11 = v6;
    double v12 = v7;
    float v13 = (v12 - v9) / (v12 - v11);
    float v14 = sub_100D086F8(v13, v5);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101850730);
    }
    float v8 = v4 * v14;
    int v15 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134219008;
      double v30 = v10;
      __int16 v31 = 2048;
      double v32 = v12;
      __int16 v33 = 2048;
      double v34 = v11;
      __int16 v35 = 2048;
      double v36 = v4;
      __int16 v37 = 2048;
      double v38 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101850730);
      }
      int v19 = 134219008;
      double v20 = v10;
      __int16 v21 = 2048;
      double v22 = v12;
      __int16 v23 = 2048;
      double v24 = v11;
      __int16 v25 = 2048;
      double v26 = v4;
      __int16 v27 = 2048;
      double v28 = v8;
      LODWORD(v1_Block_object_dispose(va, 8) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f",  COERCE_DOUBLE(&v19),  v18);
      float32x2_t v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieHighIntensityModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

  *(float *)a2 = v8;
  *(void *)(a2 + 4) = 0LL;
  *(void *)(a2 + 12) = 0LL;
  *(void *)(a2 + 20) = 0x340B33333LL;
  *(_DWORD *)(a2 + 2_Block_object_dispose(va, 8) = 0;
  *(void *)(a2 + 32) = 3LL;
  if (v8 > 5.6)
  {
    *(void *)(a2 + 4) = 0LL;
    *(void *)(a2 + 12) = 0LL;
    *(float *)(a2 + 20) = v8;
    *(_DWORD *)(a2 + 24) = 1;
    *(_DWORD *)(a2 + 32) = 3;
  }

void sub_1007C4EF8(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1007C4F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166080;
  uint64_t v4 = sub_1006AABA8(a1, a2);
  *(void *)uint64_t v4 = &off_101850760;
  float v5 = (void *)(v4 + 166136);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)(v3 + 4_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(v4 + 166136) = 0u;
  *(_DWORD *)(v4 + 166152) = 0;
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101850798);
  }
  float v6 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLSwimPoolSessionSimulator Instantiated",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101850798);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "CLSwimPoolSessionSimulator Instantiated",  v10,  2);
    float v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSwimPoolSessionSimulator::CLSwimPoolSessionSimulator(CLSwimDataStore *, float)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  memcpy(buf, &unk_10132C320, sizeof(buf));
  sub_1000C7020((char *)v3, (char *)buf, (uint64_t)&v12, 0x1DuLL);
  *(_DWORD *)(v3 + 4_Block_object_dispose(va, 8) = 0;
  *float v5 = 0LL;
  v5[1] = 0LL;
  *(void *)(v3 + 32) = *(void *)(v3 + 24);
  return a1;
}

void sub_1007C5134(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(void *)(v2 + 32) = v4;
    operator delete(v4);
  }

  float v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + _Block_object_dispose(va, 8) = v5;
    operator delete(v5);
  }

  *uint64_t v1 = &off_101849000;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007C517C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_10020EBD8(*(void *)(a1 + 8))) {
    return 0LL;
  }
  float v6 = (char **)(a1 + 166104);
  uint64_t v7 = *(void *)(a1 + 166080);
  if (*(void *)(a1 + 166112) - *(void *)(a1 + 166104) == *(void *)(a1 + 166088) - v7) {
    goto LABEL_3;
  }
  uint64_t v9 = *(void *)(a1 + 166144);
  double v10 = (__int128 *)(v7 + 24 * v9);
  int v11 = *(_DWORD *)(a1 + 166152);
  switch(v11)
  {
    case 2:
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8)))
      {
        else {
          uint64_t v8 = 0LL;
        }
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      unint64_t v15 = *(void *)(a1 + 166120);
      *(_DWORD *)(a1 + 16612_Block_object_dispose(va, 8) = 0;
      ++*(void *)(a1 + 166144);
      unint64_t v16 = *(void *)(a1 + 166112);
      if (v16 >= v15)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)*v6) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)*v6) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555LL) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          __int16 v23 = (char *)sub_10000701C(a1 + 166120, v22);
        }
        else {
          __int16 v23 = 0LL;
        }
        double v24 = &v23[24 * v19];
        __int16 v25 = &v23[24 * v22];
        __int128 v26 = *v10;
        *((void *)v24 + 2) = *((void *)v10 + 2);
        *(_OWORD *)double v24 = v26;
        double v18 = v24 + 24;
        double v28 = *(char **)(a1 + 166104);
        __int16 v27 = *(char **)(a1 + 166112);
        if (v27 != v28)
        {
          do
          {
            __int128 v29 = *(_OWORD *)(v27 - 24);
            *((void *)v24 - 1) = *((void *)v27 - 1);
            *(_OWORD *)(v24 - 24) = v29;
            v24 -= 24;
            v27 -= 24;
          }

          while (v27 != v28);
          __int16 v27 = *v6;
        }

        *(void *)(a1 + 166104) = v24;
        *(void *)(a1 + 166112) = v18;
        *(void *)(a1 + 166120) = v25;
        if (v27) {
          operator delete(v27);
        }
      }

      else
      {
        __int128 v17 = *v10;
        *(void *)(v16 + 16) = *((void *)v10 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        double v18 = (char *)(v16 + 24);
      }

      int v14 = 0;
      *(void *)(a1 + 166112) = v18;
      goto LABEL_38;
    case 1:
      uint64_t v8 = 0LL;
      int v14 = 2;
LABEL_38:
      *(_DWORD *)(a1 + 166152) = v14;
      goto LABEL_39;
    case 0:
      int v12 = *((_DWORD *)v10 + 1);
      double v13 = *(double *)(a2 + 56);
      if (vabdd_f64(v13, *(double *)(a1 + 166136)) > *(double *)(v7 + 24 * v9 + 8) / (double)v12)
      {
        *(double *)(a1 + 166136) = v13;
        ++*(_DWORD *)(a1 + 166128);
        sub_10020D6B8(*(void *)(a1 + 8), *(_DWORD *)v10, 1, v13);
        int v12 = *((_DWORD *)v10 + 1);
      }

      if (*(_DWORD *)(a1 + 166128) >= v12)
      {
        uint64_t v8 = 0LL;
        if (*(_BYTE *)(v7 + 24 * v9 + 16)) {
          int v14 = 1;
        }
        else {
          int v14 = 2;
        }
        goto LABEL_38;
      }

      break;
  }

void *sub_1007C5464(void *a1)
{
  uint64_t v2 = (void **)(a1 + 20760);
  *a1 = &off_101850760;
  uint64_t v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }

  uint64_t v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }

  *a1 = &off_101849000;
  return a1;
}

void sub_1007C54C8(char *__p)
{
  uint64_t v2 = __p + 166080;
  *(void *)__int128 __p = &off_101850760;
  uint64_t v3 = (void *)*((void *)__p + 20763);
  if (v3)
  {
    *((void *)v2 + 4) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *((void *)v2 + 1) = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

void sub_1007C551C(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_1007C5548@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  uint64_t result = sub_1007C9EA4((uint64_t)v4, a1);
  *a2 = v4;
  return result;
}

void sub_1007C5588(_Unwind_Exception *a1)
{
}

void sub_1007C5640(id a1)
{
  qword_101998A98 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLAnalyticsLoggerSilo");
}

void sub_1007C5EF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void **a23)
{
  a23 = (void **)&a17;
  sub_10043B844(&a23);
  _Unwind_Resume(a1);
}

BOOL sub_1007C5F28(uint64_t a1, int *a2, uint64_t a3)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  float v6 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    sub_1007C9854(a1, *a2, (uint64_t)__p);
    uint64_t v7 = v40 >= 0 ? __p : (void **)__p[0];
    int v8 = *a2;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v32 = 1026;
    int v33 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#ca,setMeasurements,measurement,%{public}s, %{public}d",  buf,  0x12u);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v20 = qword_101934A48;
    sub_1007C9854(a1, *a2, (uint64_t)buf);
    if (v34 >= 0) {
      unint64_t v21 = buf;
    }
    else {
      unint64_t v21 = *(_BYTE **)buf;
    }
    int v22 = *a2;
    int v35 = 136446466;
    double v36 = v21;
    __int16 v37 = 1026;
    int v38 = v22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v20,  2LL,  "#ca,setMeasurements,measurement,%{public}s, %{public}d",  &v35,  18);
    double v24 = v23;
    if (v34 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, Measu rementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std ::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v24);
  }

  LODWORD(__p[0]) = *a2;
  uint64_t v9 = sub_100781F1C((void *)(a1 + 8), (int *)__p);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v10 == -1) {
      sub_10013B58C();
    }
    uint64_t v11 = v9[6];
    __p[0] = buf;
    uint64_t v12 = ((uint64_t (*)(void **, uint64_t))off_101850900[v10])(__p, a3);
    if (!sub_10001A4B8(v12, v11)) {
      goto LABEL_21;
    }
  }

  sub_1007D3964(a1, *a2, __p);
  sub_10043BD50((uint64_t)v30, a3);
  if (!v41) {
    sub_100008BDC();
  }
  char v13 = (*((uint64_t (**)(void **, _BYTE *))*v41 + 6))(v41, v30);
  sub_10043AFF4((uint64_t)v30);
  int v14 = v41;
  if (v41 == __p)
  {
    uint64_t v15 = 4LL;
    int v14 = __p;
  }

  else
  {
    if (!v41) {
      goto LABEL_19;
    }
    uint64_t v15 = 5LL;
  }

  (*((void (**)(void))*v14 + v15))();
LABEL_19:
  if ((v13 & 1) != 0)
  {
    __p[0] = a2;
    unint64_t v16 = sub_1007D3B30(a1 + 48, a2, (uint64_t)&unk_1012CF090, (_DWORD **)__p);
    sub_1007D3DD4((uint64_t)(v16 + 3), a3);
    return 1LL;
  }

void sub_1007C6428( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char *a25)
{
  __int128 v26 = a25;
  if (a25 == &a22)
  {
    uint64_t v27 = 4LL;
    __int128 v26 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_6;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*(void *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1007C70C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a68 = (uint64_t)&a36;
  sub_10043B844((void ***)&a68);
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1007C71A0(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v4 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#ca,computeEmergencyDerivedMeasurements",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    LOWORD(v150) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#ca,computeEmergencyDerivedMeasurements",  &v150,  2);
    float v71 = (uint8_t *)v70;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v70);
    if (v71 != buf) {
      free(v71);
    }
  }

  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0LL) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = *((void *)&xmmword_1019A16B8 + 1);
  if (byte_1019A16CF >= 0) {
    uint64_t v7 = byte_1019A16CF;
  }
  if (v6 != v7) {
    goto LABEL_21;
  }
  if (byte_1019A16CF >= 0) {
    int v8 = &xmmword_1019A16B8;
  }
  else {
    int v8 = (__int128 *)xmmword_1019A16B8;
  }
  if ((v5 & 0x80) != 0)
  {
  }

  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v8)
    {
      ++a2;
      int v8 = (__int128 *)((char *)v8 + 1);
      if (!--v5) {
        goto LABEL_29;
      }
    }

void sub_1007C9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1007C90E4(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#ca,computePhoneNumberAvailabilityDerivedMeasurements",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#ca,computePhoneNumberAvailabilityDerivedMeasurements",  v12,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  *(_DWORD *)int buf = 146;
  uint64_t v3 = (__CFString *)sub_1007D2730(a1, (int *)buf);
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v4 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = -[__CFString intValue](v3, "intValue");
    *(_DWORD *)int buf = 67109120;
    unsigned int v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#ca,PhoneNumberAvailability,simInstance,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v8 = qword_101934A48;
    unsigned int v9 = -[__CFString intValue](v3, "intValue");
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  0LL,  "#ca,PhoneNumberAvailability,simInstance,%d",  v12);
    unsigned int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_1007C93E0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a2;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = sub_100121918((void *)(a1 + 88), a2);
  if (v6)
  {
    uint64_t v7 = (int *)*((void *)v6 + 5);
    for (uint64_t i = (int *)*((void *)v6 + 6); v7 != i; ++v7)
    {
      unsigned int v9 = sub_100781F1C((void *)(a1 + 48), v7);
      if (v9)
      {
        uint64_t v10 = (_DWORD *)a3[1];
        if ((unint64_t)v10 >= a3[2])
        {
          uint64_t v11 = sub_1007D4398(a3, (_DWORD *)v9 + 4);
        }

        else
        {
          *uint64_t v10 = *((_DWORD *)v9 + 4);
          sub_10043BD50((uint64_t)(v10 + 2), (uint64_t)(v9 + 3));
          uint64_t v11 = (uint64_t)(v10 + 10);
          a3[1] = (uint64_t)(v10 + 10);
        }

        a3[1] = v11;
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101850A30);
        }
        uint64_t v12 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
        {
          int v13 = *v7;
          sub_1007C9854(a1, *v7, (uint64_t)__p);
          unsigned int v14 = __p;
          if (v31 < 0) {
            unsigned int v14 = *(_BYTE **)__p;
          }
          *(_DWORD *)int buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v13;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "#ca,serializeEvent,no value for meas,id,%{public}d,name,%s",  buf,  0x12u);
          if (v31 < 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_101850A30);
          }
          uint64_t v15 = qword_101934888;
          int v16 = *v7;
          sub_1007C9854(a1, *v7, (uint64_t)buf);
          unsigned int v17 = buf;
          if (v26 < 0) {
            unsigned int v17 = *(_BYTE **)buf;
          }
          v27[0] = 67240450;
          v27[1] = v16;
          __int16 v28 = 2080;
          unsigned int v29 = v17;
          LODWORD(v24) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v15,  16LL,  "#ca,serializeEvent,no value for meas,id,%{public}d,name,%s",  v27,  v24);
          unint64_t v19 = v18;
          if (v26 < 0) {
            operator delete(*(void **)buf);
          }
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant <int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v19);
          if (v19 != __p) {
            free(v19);
          }
        }
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101850A30);
    }
    unsigned int v20 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      unint64_t v21 = v3;
      *(_DWORD *)__int128 __p = 136446210;
      *(void *)&__p[4] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "#ca,serializeEvent,invalid event,[%{public}s]",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101850A30);
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#ca,serializeEvent,invalid event,[%{public}s]",  buf,  12);
      unsigned int v23 = (char *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [M easurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, lo ng long, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v22);
      if (v23 != __p) {
        free(v23);
      }
    }
  }

void sub_1007C981C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t *sub_1007C9854@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v10 = a2;
  BOOL result = sub_100781F1C((void *)(a1 + 8), &v10);
  if (result)
  {
    if (*((char *)result + 47) < 0)
    {
      return (uint64_t *)sub_1010DD48C((_BYTE *)a3, (void *)result[3], result[4]);
    }

    else
    {
      __int128 v5 = *(_OWORD *)(result + 3);
      *(void *)(a3 + 16) = result[5];
      *(_OWORD *)a3 = v5;
    }
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v6 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#ca,ERROR,toString,invalid measurement",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#ca,ERROR,toString,invalid measurement",  v9,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::string AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::toString(Measurement) const [Measurem ent = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long , unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    return sub_1010DDBC0((void *)a3, "");
  }

  return result;
}

uint64_t sub_1007C9A38(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1007C9A40(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = sub_100121918(a1 + 11, a2);
  if (v4)
  {
    __int128 v5 = (int *)*((void *)v4 + 5);
    for (uint64_t i = (int *)*((void *)v4 + 6); v5 != i; ++v5)
    {
      uint64_t v7 = sub_100781F1C(a1 + 6, v5);
      if (v7)
      {
        uint64_t v8 = sub_100781F1C(a1 + 1, v5);
        if (v8)
        {
          if (!*((_BYTE *)v8 + 56))
          {
            sub_10005BEB8(a1 + 6, v7, (uint64_t)__p);
            sub_1007D3D90((uint64_t)__p, 0LL);
          }
        }
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101850A30);
        }
        unsigned int v9 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
        {
          int v10 = *v5;
          sub_1007C9854((uint64_t)a1, *v5, (uint64_t)__p);
          uint64_t v11 = __p;
          if (v28 < 0) {
            uint64_t v11 = *(_BYTE **)__p;
          }
          *(_DWORD *)int buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "#ca,clearEventMeasurements,no value for meas,%{public}d,name,%s",  buf,  0x12u);
          if (v28 < 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_101850A30);
          }
          uint64_t v12 = qword_101934888;
          int v13 = *v5;
          sub_1007C9854((uint64_t)a1, *v5, (uint64_t)buf);
          unsigned int v14 = buf;
          if (v23 < 0) {
            unsigned int v14 = *(_BYTE **)buf;
          }
          v24[0] = 67240450;
          v24[1] = v13;
          __int16 v25 = 2080;
          char v26 = v14;
          LODWORD(v21) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v12,  16LL,  "#ca,clearEventMeasurements,no value for meas,%{public}d,name,%s",  v24,  v21);
          int v16 = v15;
          if (v23 < 0) {
            operator delete(*(void **)buf);
          }
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Mea surement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v16);
          if (v16 != __p) {
            free(v16);
          }
        }
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101850A30);
    }
    unsigned int v17 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      double v18 = v2;
      *(_DWORD *)__int128 __p = 136446210;
      *(void *)&__p[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "#ca,clearEventMeasurements,invalid event,[%{public}s]",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101850A30);
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#ca,clearEventMeasurements,invalid event,[%{public}s]",  buf,  12);
      unsigned int v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Measure ment = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long lon g, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v19);
      if (v20 != __p) {
        free(v20);
      }
    }
  }

uint64_t sub_1007C9EA4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)a1 = off_1018507E8;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = a2;
  sub_100D2D9A4(a1 + 224);
  *(void *)(a1 + 264) = 0LL;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  [*(id *)(a1 + 208) silo];
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v3 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ca,CLAnalyticsLogger initialized", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#ca,CLAnalyticsLogger initialized",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLAnalyticsLogger::CLAnalyticsLogger(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_1007CA164(a1);
  sub_1007D1CB8(a1);
  sub_1007D2138((void **)a1);
  sub_1007D21CC(a1);
  sub_1007D23F4((void **)a1);
  return a1;
}

void sub_1007CA0CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[38];
  v1[38] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = v1[37];
  v1[37] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = v1[36];
  v1[36] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *v2;
  uint64_t *v2 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = v1[33];
  v1[33] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_1007D2488(v1);
  _Unwind_Resume(a1);
}

void sub_1007CA164(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    v1364[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,defineMeasurements", (uint8_t *)v1364, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v1364, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v393[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  v1364,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#ca,defineMeasurements",  v393,  2);
    v392 = (char *)v391;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAnalyticsLogger::defineMeasurements()", "%s\n", v391);
  }

  sub_1010DDBC0(&__p, "carrier1Mcc");
  char v1361 = 1;
  v1362[0] = &off_101850A60;
  v1362[1] = v1364;
  v1363 = v1362;
  sub_1007D24E4(a1, 4, &__p);
  uint64_t v3 = v1363;
  if (v1363 == v1362)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v1362;
  }

  else
  {
    if (!v1363) {
      goto LABEL_11;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  sub_1010DDBC0(&v1354, "carrier1Mnc");
  char v1356 = 1;
  v1357[0] = &off_101850AF0;
  v1357[1] = v1364;
  v1358 = v1357;
  sub_1007D24E4(a1, 5, &v1354);
  uint64_t v5 = v1358;
  if (v1358 == v1357)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v1357;
  }

  else
  {
    if (!v1358) {
      goto LABEL_18;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_18:
  sub_1010DDBC0(&v1349, "carrier2Mcc");
  char v1351 = 1;
  v1352[0] = &off_101850B70;
  v1352[1] = v1364;
  v1353 = v1352;
  sub_1007D24E4(a1, 12, &v1349);
  uint64_t v7 = v1353;
  if (v1353 == v1352)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v1352;
  }

  else
  {
    if (!v1353) {
      goto LABEL_25;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_25:
  sub_1010DDBC0(&v1344, "carrier2Mnc");
  char v1346 = 1;
  v1347[0] = &off_101850BF0;
  v1347[1] = v1364;
  v1348 = v1347;
  sub_1007D24E4(a1, 13, &v1344);
  unsigned int v9 = v1348;
  if (v1348 == v1347)
  {
    uint64_t v10 = 4LL;
    unsigned int v9 = v1347;
  }

  else
  {
    if (!v1348) {
      goto LABEL_32;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_32:
  sub_1010DDBC0(&v1339, "operator1Mcc");
  char v1341 = 1;
  v1342[0] = &off_101850C70;
  v1342[1] = v1364;
  v1343 = v1342;
  sub_1007D24E4(a1, 8, &v1339);
  uint64_t v11 = v1343;
  if (v1343 == v1342)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v1342;
  }

  else
  {
    if (!v1343) {
      goto LABEL_39;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_39:
  sub_1010DDBC0(&v1334, "operator1Mnc");
  char v1336 = 1;
  v1337[0] = &off_101850CF0;
  v1337[1] = v1364;
  v1338 = v1337;
  sub_1007D24E4(a1, 9, &v1334);
  int v13 = v1338;
  if (v1338 == v1337)
  {
    uint64_t v14 = 4LL;
    int v13 = v1337;
  }

  else
  {
    if (!v1338) {
      goto LABEL_46;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_46:
  sub_1010DDBC0(&v1329, "operator2Mcc");
  char v1331 = 1;
  v1332[0] = &off_101850D70;
  v1332[1] = v1364;
  v1333 = v1332;
  sub_1007D24E4(a1, 14, &v1329);
  uint64_t v15 = v1333;
  if (v1333 == v1332)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = v1332;
  }

  else
  {
    if (!v1333) {
      goto LABEL_53;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_53:
  sub_1010DDBC0(&v1324, "operator2Mnc");
  char v1326 = 1;
  v1327[0] = &off_101850DF0;
  v1327[1] = v1364;
  v1328 = v1327;
  sub_1007D24E4(a1, 15, &v1324);
  unsigned int v17 = v1328;
  if (v1328 == v1327)
  {
    uint64_t v18 = 4LL;
    unsigned int v17 = v1327;
  }

  else
  {
    if (!v1328) {
      goto LABEL_60;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_60:
  sub_1010DDBC0(&v1319, "carrier1BundleId");
  char v1321 = 1;
  v1322[0] = &off_101850E70;
  v1322[1] = v1364;
  v1323 = v1322;
  sub_1007D24E4(a1, 7, &v1319);
  unint64_t v19 = v1323;
  if (v1323 == v1322)
  {
    uint64_t v20 = 4LL;
    unint64_t v19 = v1322;
  }

  else
  {
    if (!v1323) {
      goto LABEL_67;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_67:
  sub_1010DDBC0(&v1314, "carrier2BundleId");
  char v1316 = 1;
  v1317[0] = &off_101850EF0;
  v1317[1] = v1364;
  v1318 = v1317;
  sub_1007D24E4(a1, 17, &v1314);
  uint64_t v21 = v1318;
  if (v1318 == v1317)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = v1317;
  }

  else
  {
    if (!v1318) {
      goto LABEL_74;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_74:
  sub_1010DDBC0(&v1309, "carrier1Country");
  char v1311 = 1;
  v1312[0] = &off_101850F70;
  v1312[1] = v1364;
  v1313 = v1312;
  sub_1007D24E4(a1, 6, &v1309);
  char v23 = v1313;
  if (v1313 == v1312)
  {
    uint64_t v24 = 4LL;
    char v23 = v1312;
  }

  else
  {
    if (!v1313) {
      goto LABEL_81;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_81:
  sub_1010DDBC0(&v1304, "carrier2Country");
  char v1306 = 1;
  v1307[0] = &off_101850FF0;
  v1307[1] = v1364;
  v1308 = v1307;
  sub_1007D24E4(a1, 16, &v1304);
  __int16 v25 = v1308;
  if (v1308 == v1307)
  {
    uint64_t v26 = 4LL;
    __int16 v25 = v1307;
  }

  else
  {
    if (!v1308) {
      goto LABEL_88;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_88:
  sub_1010DDBC0(&v1299, "operator1BundleId");
  char v1301 = 1;
  v1302[0] = &off_101851070;
  v1302[1] = v1364;
  v1303 = v1302;
  sub_1007D24E4(a1, 11, &v1299);
  uint64_t v27 = v1303;
  if (v1303 == v1302)
  {
    uint64_t v28 = 4LL;
    uint64_t v27 = v1302;
  }

  else
  {
    if (!v1303) {
      goto LABEL_95;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_95:
  sub_1010DDBC0(&v1294, "operator2BundleId");
  char v1296 = 1;
  v1297[0] = &off_1018510F0;
  v1297[1] = v1364;
  v1298 = v1297;
  sub_1007D24E4(a1, 19, &v1294);
  unsigned int v29 = v1298;
  if (v1298 == v1297)
  {
    uint64_t v30 = 4LL;
    unsigned int v29 = v1297;
  }

  else
  {
    if (!v1298) {
      goto LABEL_102;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_102:
  sub_1010DDBC0(&v1289, "operator1Country");
  char v1291 = 1;
  v1292[0] = &off_101851170;
  v1292[1] = v1364;
  v1293 = v1292;
  sub_1007D24E4(a1, 10, &v1289);
  char v31 = v1293;
  if (v1293 == v1292)
  {
    uint64_t v32 = 4LL;
    char v31 = v1292;
  }

  else
  {
    if (!v1293) {
      goto LABEL_109;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_109:
  sub_1010DDBC0(&v1284, "operator2Country");
  char v1286 = 1;
  v1287[0] = &off_1018511F0;
  v1287[1] = v1364;
  v1288 = v1287;
  sub_1007D24E4(a1, 18, &v1284);
  int v33 = v1288;
  if (v1288 == v1287)
  {
    uint64_t v34 = 4LL;
    int v33 = v1287;
  }

  else
  {
    if (!v1288) {
      goto LABEL_116;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_116:
  sub_1010DDBC0(&v1279, "carrierCountry");
  char v1281 = 0;
  v1282[0] = &off_101851270;
  v1282[1] = v1364;
  v1283 = v1282;
  sub_1007D24E4(a1, 58, &v1279);
  unsigned int v35 = v1283;
  if (v1283 == v1282)
  {
    uint64_t v36 = 4LL;
    unsigned int v35 = v1282;
  }

  else
  {
    if (!v1283) {
      goto LABEL_123;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_123:
  sub_1010DDBC0(&v1274, "carrierBundleId");
  char v1276 = 0;
  v1277[0] = &off_1018512F0;
  v1277[1] = v1364;
  v1278 = v1277;
  sub_1007D24E4(a1, 59, &v1274);
  __int16 v37 = v1278;
  if (v1278 == v1277)
  {
    uint64_t v38 = 4LL;
    __int16 v37 = v1277;
  }

  else
  {
    if (!v1278) {
      goto LABEL_130;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_130:
  sub_1010DDBC0(&v1269, "operatorCountry");
  char v1271 = 0;
  v1272[0] = &off_101851370;
  v1272[1] = v1364;
  v1273 = v1272;
  sub_1007D24E4(a1, 60, &v1269);
  float v39 = v1273;
  if (v1273 == v1272)
  {
    uint64_t v40 = 4LL;
    float v39 = v1272;
  }

  else
  {
    if (!v1273) {
      goto LABEL_137;
    }
    uint64_t v40 = 5LL;
  }

  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_137:
  sub_1010DDBC0(&v1264, "operatorBundleId");
  char v1266 = 0;
  v1267[0] = &off_1018513F0;
  v1267[1] = v1364;
  v1268 = v1267;
  sub_1007D24E4(a1, 61, &v1264);
  unsigned int v41 = v1268;
  if (v1268 == v1267)
  {
    uint64_t v42 = 4LL;
    unsigned int v41 = v1267;
  }

  else
  {
    if (!v1268) {
      goto LABEL_144;
    }
    uint64_t v42 = 5LL;
  }

  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_144:
  sub_1010DDBC0(&v1259, "simBundleId");
  char v1261 = 0;
  v1262[0] = &off_101851470;
  v1262[1] = v1364;
  v1263 = v1262;
  sub_1007D24E4(a1, 140, &v1259);
  unsigned int v43 = v1263;
  if (v1263 == v1262)
  {
    uint64_t v44 = 4LL;
    unsigned int v43 = v1262;
  }

  else
  {
    if (!v1263) {
      goto LABEL_151;
    }
    uint64_t v44 = 5LL;
  }

  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_151:
  sub_1010DDBC0(&v1254, "simCountry");
  char v1256 = 0;
  v1257[0] = &off_1018514F0;
  v1257[1] = v1364;
  v1258 = v1257;
  sub_1007D24E4(a1, 139, &v1254);
  double v45 = v1258;
  if (v1258 == v1257)
  {
    uint64_t v46 = 4LL;
    double v45 = v1257;
  }

  else
  {
    if (!v1258) {
      goto LABEL_158;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_158:
  sub_1010DDBC0(&v1249, "simSlot");
  char v1251 = 0;
  v1252[0] = &off_101851570;
  v1252[1] = v1364;
  v1253 = v1252;
  sub_1007D24E4(a1, 141, &v1249);
  double v47 = v1253;
  if (v1253 == v1252)
  {
    uint64_t v48 = 4LL;
    double v47 = v1252;
  }

  else
  {
    if (!v1253) {
      goto LABEL_165;
    }
    uint64_t v48 = 5LL;
  }

  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_165:
  sub_1010DDBC0(&v1244, "sim1RAT");
  char v1246 = 1;
  v1247[0] = &off_1018515F0;
  v1247[1] = v1364;
  v1248 = v1247;
  sub_1007D24E4(a1, 20, &v1244);
  uint64_t v49 = v1248;
  if (v1248 == v1247)
  {
    uint64_t v50 = 4LL;
    uint64_t v49 = v1247;
  }

  else
  {
    if (!v1248) {
      goto LABEL_172;
    }
    uint64_t v50 = 5LL;
  }

  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_172:
  sub_1010DDBC0(&v1239, "sim2RAT");
  char v1241 = 1;
  v1242[0] = &off_101851670;
  v1242[1] = v1364;
  v1243 = v1242;
  sub_1007D24E4(a1, 21, &v1239);
  unsigned int v51 = v1243;
  if (v1243 == v1242)
  {
    uint64_t v52 = 4LL;
    unsigned int v51 = v1242;
  }

  else
  {
    if (!v1243) {
      goto LABEL_179;
    }
    uint64_t v52 = 5LL;
  }

  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_179:
  sub_1010DDBC0(&v1234, "wifiAssociatedState");
  char v1236 = 1;
  v1237[0] = &off_1018516F0;
  v1237[1] = v1364;
  v1238 = v1237;
  sub_1007D24E4(a1, 24, &v1234);
  double v53 = v1238;
  if (v1238 == v1237)
  {
    uint64_t v54 = 4LL;
    double v53 = v1237;
  }

  else
  {
    if (!v1238) {
      goto LABEL_186;
    }
    uint64_t v54 = 5LL;
  }

  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_186:
  sub_1010DDBC0(&v1229, "networkReachablilityState");
  char v1231 = 1;
  v1232[0] = &off_101851770;
  v1232[1] = v1364;
  v1233 = v1232;
  sub_1007D24E4(a1, 26, &v1229);
  double v55 = v1233;
  if (v1233 == v1232)
  {
    uint64_t v56 = 4LL;
    double v55 = v1232;
  }

  else
  {
    if (!v1233) {
      goto LABEL_193;
    }
    uint64_t v56 = 5LL;
  }

  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_193:
  sub_1010DDBC0(&v1224, "watchMode");
  char v1226 = 1;
  v1227[0] = &off_1018517F0;
  v1227[1] = v1364;
  v1228 = v1227;
  sub_1007D24E4(a1, 30, &v1224);
  unsigned int v57 = v1228;
  if (v1228 == v1227)
  {
    uint64_t v58 = 4LL;
    unsigned int v57 = v1227;
  }

  else
  {
    if (!v1228) {
      goto LABEL_200;
    }
    uint64_t v58 = 5LL;
  }

  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_200:
  sub_1010DDBC0(&v1219, "mobileAssetVersion");
  char v1221 = 1;
  v1222[0] = &off_101851870;
  v1222[1] = v1364;
  v1223 = v1222;
  sub_1007D24E4(a1, 29, &v1219);
  double v59 = v1223;
  if (v1223 == v1222)
  {
    uint64_t v60 = 4LL;
    double v59 = v1222;
  }

  else
  {
    if (!v1223) {
      goto LABEL_207;
    }
    uint64_t v60 = 5LL;
  }

  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_207:
  sub_1010DDBC0(&v1214, "callTriggerType");
  char v1216 = 1;
  v1217[0] = &off_1018518F0;
  v1217[1] = v1364;
  v1218 = v1217;
  sub_1007D24E4(a1, 82, &v1214);
  uint64_t v61 = v1218;
  if (v1218 == v1217)
  {
    uint64_t v62 = 4LL;
    uint64_t v61 = v1217;
  }

  else
  {
    if (!v1218) {
      goto LABEL_214;
    }
    uint64_t v62 = 5LL;
  }

  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_214:
  sub_1010DDBC0(&v1209, "isSim1Present");
  char v1211 = 1;
  v1212[0] = &off_101851970;
  v1212[1] = v1364;
  v1213 = v1212;
  sub_1007D24E4(a1, 22, &v1209);
  unsigned int v63 = v1213;
  if (v1213 == v1212)
  {
    uint64_t v64 = 4LL;
    unsigned int v63 = v1212;
  }

  else
  {
    if (!v1213) {
      goto LABEL_221;
    }
    uint64_t v64 = 5LL;
  }

  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_221:
  sub_1010DDBC0(&v1204, "isSim2Present");
  char v1206 = 1;
  v1207[0] = &off_1018519F0;
  v1207[1] = v1364;
  v1208 = v1207;
  sub_1007D24E4(a1, 23, &v1204);
  double v65 = v1208;
  if (v1208 == v1207)
  {
    uint64_t v66 = 4LL;
    double v65 = v1207;
  }

  else
  {
    if (!v1208) {
      goto LABEL_228;
    }
    uint64_t v66 = 5LL;
  }

  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_228:
  sub_1010DDBC0(&v1199, "isSim1DataPreferred");
  char v1201 = 1;
  v1202[0] = &off_101851A70;
  v1202[1] = v1364;
  v1203 = v1202;
  sub_1007D24E4(a1, 33, &v1199);
  double v67 = v1203;
  if (v1203 == v1202)
  {
    uint64_t v68 = 4LL;
    double v67 = v1202;
  }

  else
  {
    if (!v1203) {
      goto LABEL_235;
    }
    uint64_t v68 = 5LL;
  }

  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_235:
  sub_1010DDBC0(&v1194, "isSim2DataPreferred");
  char v1196 = 1;
  v1197[0] = &off_101851AF0;
  v1197[1] = v1364;
  v1198 = v1197;
  sub_1007D24E4(a1, 35, &v1194);
  unsigned int v69 = v1198;
  if (v1198 == v1197)
  {
    uint64_t v70 = 4LL;
    unsigned int v69 = v1197;
  }

  else
  {
    if (!v1198) {
      goto LABEL_242;
    }
    uint64_t v70 = 5LL;
  }

  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_242:
  sub_1010DDBC0(&v1189, "isSim1DefaultVoice");
  char v1191 = 1;
  v1192[0] = &off_101851B70;
  v1192[1] = v1364;
  v1193 = v1192;
  sub_1007D24E4(a1, 34, &v1189);
  float v71 = v1193;
  if (v1193 == v1192)
  {
    uint64_t v72 = 4LL;
    float v71 = v1192;
  }

  else
  {
    if (!v1193) {
      goto LABEL_249;
    }
    uint64_t v72 = 5LL;
  }

  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_249:
  sub_1010DDBC0(&v1184, "isSim2DefaultVoice");
  char v1186 = 1;
  v1187[0] = &off_101851BF0;
  v1187[1] = v1364;
  v1188 = v1187;
  sub_1007D24E4(a1, 36, &v1184);
  unsigned int v73 = v1188;
  if (v1188 == v1187)
  {
    uint64_t v74 = 4LL;
    unsigned int v73 = v1187;
  }

  else
  {
    if (!v1188) {
      goto LABEL_256;
    }
    uint64_t v74 = 5LL;
  }

  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_256:
  sub_1010DDBC0(&v1179, "GNSSSignalEnvironment");
  char v1181 = 1;
  v1182[0] = &off_101851C70;
  v1182[1] = v1364;
  v1183 = v1182;
  sub_1007D24E4(a1, 25, &v1179);
  float v75 = v1183;
  if (v1183 == v1182)
  {
    uint64_t v76 = 4LL;
    float v75 = v1182;
  }

  else
  {
    if (!v1183) {
      goto LABEL_263;
    }
    uint64_t v76 = 5LL;
  }

  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_263:
  sub_1010DDBC0(&v1174, "communicationType");
  char v1176 = 1;
  v1177[0] = &off_101851CF0;
  v1177[1] = v1364;
  v1178 = v1177;
  sub_1007D24E4(a1, 77, &v1174);
  unsigned int v77 = v1178;
  if (v1178 == v1177)
  {
    uint64_t v78 = 4LL;
    unsigned int v77 = v1177;
  }

  else
  {
    if (!v1178) {
      goto LABEL_270;
    }
    uint64_t v78 = 5LL;
  }

  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_270:
  sub_1010DDBC0(&v1169, "latitude");
  char v1171 = 0;
  v1172[0] = &off_101851D70;
  v1172[1] = v1364;
  v1173 = v1172;
  sub_1007D24E4(a1, 37, &v1169);
  uint64_t v79 = v1173;
  if (v1173 == v1172)
  {
    uint64_t v80 = 4LL;
    uint64_t v79 = v1172;
  }

  else
  {
    if (!v1173) {
      goto LABEL_277;
    }
    uint64_t v80 = 5LL;
  }

  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_277:
  sub_1010DDBC0(&v1164, "longitude");
  char v1166 = 0;
  v1167[0] = &off_101851DF0;
  v1167[1] = v1364;
  v1168 = v1167;
  sub_1007D24E4(a1, 38, &v1164);
  unsigned int v81 = v1168;
  if (v1168 == v1167)
  {
    uint64_t v82 = 4LL;
    unsigned int v81 = v1167;
  }

  else
  {
    if (!v1168) {
      goto LABEL_284;
    }
    uint64_t v82 = 5LL;
  }

  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_284:
  sub_1010DDBC0(&v1159, "altitude");
  char v1161 = 0;
  v1162[0] = &off_101851E70;
  v1162[1] = v1364;
  v1163 = v1162;
  sub_1007D24E4(a1, 39, &v1159);
  uint64_t v83 = v1163;
  if (v1163 == v1162)
  {
    uint64_t v84 = 4LL;
    uint64_t v83 = v1162;
  }

  else
  {
    if (!v1163) {
      goto LABEL_291;
    }
    uint64_t v84 = 5LL;
  }

  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_291:
  sub_1010DDBC0(&v1154, "horizontalAccuracy");
  char v1156 = 0;
  v1157[0] = &off_101851EF0;
  v1157[1] = v1364;
  v1158 = v1157;
  sub_1007D24E4(a1, 40, &v1154);
  unsigned int v85 = v1158;
  if (v1158 == v1157)
  {
    uint64_t v86 = 4LL;
    unsigned int v85 = v1157;
  }

  else
  {
    if (!v1158) {
      goto LABEL_298;
    }
    uint64_t v86 = 5LL;
  }

  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_298:
  sub_1010DDBC0(&v1149, "verticalAccuracy");
  char v1151 = 0;
  v1152[0] = &off_101851F70;
  v1152[1] = v1364;
  v1153 = v1152;
  sub_1007D24E4(a1, 41, &v1149);
  double v87 = v1153;
  if (v1153 == v1152)
  {
    uint64_t v88 = 4LL;
    double v87 = v1152;
  }

  else
  {
    if (!v1153) {
      goto LABEL_305;
    }
    uint64_t v88 = 5LL;
  }

  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_305:
  sub_1010DDBC0(&v1144, "timetoFix");
  char v1146 = 0;
  v1147[0] = &off_101851FF0;
  v1147[1] = v1364;
  v1148 = v1147;
  sub_1007D24E4(a1, 42, &v1144);
  unsigned int v89 = v1148;
  if (v1148 == v1147)
  {
    uint64_t v90 = 4LL;
    unsigned int v89 = v1147;
  }

  else
  {
    if (!v1148) {
      goto LABEL_312;
    }
    uint64_t v90 = 5LL;
  }

  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_312:
  sub_1010DDBC0(&v1139, "fixSource");
  char v1141 = 0;
  v1142[0] = &off_101852070;
  v1142[1] = v1364;
  v1143 = v1142;
  sub_1007D24E4(a1, 43, &v1139);
  double v91 = v1143;
  if (v1143 == v1142)
  {
    uint64_t v92 = 4LL;
    double v91 = v1142;
  }

  else
  {
    if (!v1143) {
      goto LABEL_319;
    }
    uint64_t v92 = 5LL;
  }

  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_319:
  sub_1010DDBC0(&v1134, "requestedResponseTime");
  char v1136 = 0;
  v1137[0] = &off_1018520F0;
  v1137[1] = v1364;
  v1138 = v1137;
  sub_1007D24E4(a1, 44, &v1134);
  unsigned int v93 = v1138;
  if (v1138 == v1137)
  {
    uint64_t v94 = 4LL;
    unsigned int v93 = v1137;
  }

  else
  {
    if (!v1138) {
      goto LABEL_326;
    }
    uint64_t v94 = 5LL;
  }

  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_326:
  sub_1010DDBC0(&v1129, "requestedAccuracy");
  char v1131 = 0;
  v1132[0] = &off_101852170;
  v1132[1] = v1364;
  v1133 = v1132;
  sub_1007D24E4(a1, 45, &v1129);
  unint64_t v95 = v1133;
  if (v1133 == v1132)
  {
    uint64_t v96 = 4LL;
    unint64_t v95 = v1132;
  }

  else
  {
    if (!v1133) {
      goto LABEL_333;
    }
    uint64_t v96 = 5LL;
  }

  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_333:
  sub_1010DDBC0(&v1124, "requestedPosReportType");
  char v1126 = 0;
  v1127[0] = &off_1018521F0;
  v1127[1] = v1364;
  v1128 = v1127;
  sub_1007D24E4(a1, 46, &v1124);
  unsigned int v97 = v1128;
  if (v1128 == v1127)
  {
    uint64_t v98 = 4LL;
    unsigned int v97 = v1127;
  }

  else
  {
    if (!v1128) {
      goto LABEL_340;
    }
    uint64_t v98 = 5LL;
  }

  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_340:
  sub_1010DDBC0(&v1119, "isInActiveEmergency");
  char v1121 = 0;
  v1122[0] = &off_101852270;
  v1122[1] = v1364;
  v1123 = v1122;
  sub_1007D24E4(a1, 83, &v1119);
  double v99 = v1123;
  if (v1123 == v1122)
  {
    uint64_t v100 = 4LL;
    double v99 = v1122;
  }

  else
  {
    if (!v1123) {
      goto LABEL_347;
    }
    uint64_t v100 = 5LL;
  }

  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_347:
  sub_1010DDBC0(&v1114, "sessionResult");
  char v1116 = 0;
  v1117[0] = &off_1018522F0;
  v1117[1] = v1364;
  v1118 = v1117;
  sub_1007D24E4(a1, 47, &v1114);
  unsigned int v101 = v1118;
  if (v1118 == v1117)
  {
    uint64_t v102 = 4LL;
    unsigned int v101 = v1117;
  }

  else
  {
    if (!v1118) {
      goto LABEL_354;
    }
    uint64_t v102 = 5LL;
  }

  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_354:
  sub_1010DDBC0(&v1109, "posProtocol");
  char v1111 = 0;
  v1112[0] = &off_101852370;
  v1112[1] = v1364;
  v1113 = v1112;
  sub_1007D24E4(a1, 49, &v1109);
  uint64_t v103 = v1113;
  if (v1113 == v1112)
  {
    uint64_t v104 = 4LL;
    uint64_t v103 = v1112;
  }

  else
  {
    if (!v1113) {
      goto LABEL_361;
    }
    uint64_t v104 = 5LL;
  }

  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_361:
  sub_1010DDBC0(&v1104, "sessionType");
  char v1106 = 0;
  v1107[0] = &off_1018523F0;
  v1107[1] = v1364;
  v1108 = v1107;
  sub_1007D24E4(a1, 51, &v1104);
  uint64_t v105 = v1108;
  if (v1108 == v1107)
  {
    uint64_t v106 = 4LL;
    uint64_t v105 = v1107;
  }

  else
  {
    if (!v1108) {
      goto LABEL_368;
    }
    uint64_t v106 = 5LL;
  }

  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_368:
  sub_1010DDBC0(&v1099, "methodType");
  char v1101 = 0;
  v1102[0] = &off_101852470;
  v1102[1] = v1364;
  v1103 = v1102;
  sub_1007D24E4(a1, 52, &v1099);
  uint64_t v107 = v1103;
  if (v1103 == v1102)
  {
    uint64_t v108 = 4LL;
    uint64_t v107 = v1102;
  }

  else
  {
    if (!v1103) {
      goto LABEL_375;
    }
    uint64_t v108 = 5LL;
  }

  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_375:
  sub_1010DDBC0(&v1094, "abortCause");
  char v1096 = 0;
  v1097[0] = &off_1018524F0;
  v1097[1] = v1364;
  v1098 = v1097;
  sub_1007D24E4(a1, 66, &v1094);
  double v109 = v1098;
  if (v1098 == v1097)
  {
    uint64_t v110 = 4LL;
    double v109 = v1097;
  }

  else
  {
    if (!v1098) {
      goto LABEL_382;
    }
    uint64_t v110 = 5LL;
  }

  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_382:
  sub_1010DDBC0(&v1089, "carrier1Mcc");
  char v1091 = 1;
  v1092[0] = &off_101852570;
  v1092[1] = v1364;
  v1093 = v1092;
  sub_1007D24E4(a1, 4, &v1089);
  uint64_t v111 = v1093;
  if (v1093 == v1092)
  {
    uint64_t v112 = 4LL;
    uint64_t v111 = v1092;
  }

  else
  {
    if (!v1093) {
      goto LABEL_389;
    }
    uint64_t v112 = 5LL;
  }

  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_389:
  sub_1010DDBC0(&v1084, "carrier1Mnc");
  char v1086 = 1;
  v1087[0] = &off_1018525F0;
  v1087[1] = v1364;
  v1088 = v1087;
  sub_1007D24E4(a1, 5, &v1084);
  double v113 = v1088;
  if (v1088 == v1087)
  {
    uint64_t v114 = 4LL;
    double v113 = v1087;
  }

  else
  {
    if (!v1088) {
      goto LABEL_396;
    }
    uint64_t v114 = 5LL;
  }

  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_396:
  sub_1010DDBC0(&v1079, "carrier2Mcc");
  char v1081 = 1;
  v1082[0] = &off_101852670;
  v1082[1] = v1364;
  v1083 = v1082;
  sub_1007D24E4(a1, 12, &v1079);
  uint64_t v115 = v1083;
  if (v1083 == v1082)
  {
    uint64_t v116 = 4LL;
    uint64_t v115 = v1082;
  }

  else
  {
    if (!v1083) {
      goto LABEL_403;
    }
    uint64_t v116 = 5LL;
  }

  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_403:
  sub_1010DDBC0(&v1074, "carrier2Mnc");
  char v1076 = 1;
  v1077[0] = &off_1018526F0;
  v1077[1] = v1364;
  v1078 = v1077;
  sub_1007D24E4(a1, 13, &v1074);
  float v117 = v1078;
  if (v1078 == v1077)
  {
    uint64_t v118 = 4LL;
    float v117 = v1077;
  }

  else
  {
    if (!v1078) {
      goto LABEL_410;
    }
    uint64_t v118 = 5LL;
  }

  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_410:
  sub_1010DDBC0(&v1069, "phoneNumberAvailable");
  char v1071 = 1;
  v1072[0] = &off_101852770;
  v1072[1] = v1364;
  v1073 = v1072;
  sub_1007D24E4(a1, 31, &v1069);
  uint64_t v119 = v1073;
  if (v1073 == v1072)
  {
    uint64_t v120 = 4LL;
    uint64_t v119 = v1072;
  }

  else
  {
    if (!v1073) {
      goto LABEL_417;
    }
    uint64_t v120 = 5LL;
  }

  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_417:
  sub_1010DDBC0(&v1064, "wasTCPositionInjected");
  char v1066 = 0;
  v1067[0] = &off_1018527F0;
  v1067[1] = v1364;
  v1068 = v1067;
  sub_1007D24E4(a1, 62, &v1064);
  __int16 v121 = v1068;
  if (v1068 == v1067)
  {
    uint64_t v122 = 4LL;
    __int16 v121 = v1067;
  }

  else
  {
    if (!v1068) {
      goto LABEL_424;
    }
    uint64_t v122 = 5LL;
  }

  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_424:
  sub_1010DDBC0(&v1059, "TCPositionUsage");
  char v1061 = 0;
  v1062[0] = &off_101852870;
  v1062[1] = v1364;
  v1063 = v1062;
  sub_1007D24E4(a1, 63, &v1059);
  uint64_t v123 = v1063;
  if (v1063 == v1062)
  {
    uint64_t v124 = 4LL;
    uint64_t v123 = v1062;
  }

  else
  {
    if (!v1063) {
      goto LABEL_431;
    }
    uint64_t v124 = 5LL;
  }

  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_431:
  sub_1010DDBC0(&v1054, "nwRefLocAvailability");
  char v1056 = 0;
  v1057[0] = &off_1018528F0;
  v1057[1] = v1364;
  v1058 = v1057;
  sub_1007D24E4(a1, 67, &v1054);
  __int16 v125 = v1058;
  if (v1058 == v1057)
  {
    uint64_t v126 = 4LL;
    __int16 v125 = v1057;
  }

  else
  {
    if (!v1058) {
      goto LABEL_438;
    }
    uint64_t v126 = 5LL;
  }

  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_438:
  sub_1010DDBC0(&v1049, "nwTimeAssistanceAvailability");
  char v1051 = 0;
  v1052[0] = &off_101852970;
  v1052[1] = v1364;
  v1053 = v1052;
  sub_1007D24E4(a1, 74, &v1049);
  uint64_t v127 = v1053;
  if (v1053 == v1052)
  {
    uint64_t v128 = 4LL;
    uint64_t v127 = v1052;
  }

  else
  {
    if (!v1053) {
      goto LABEL_445;
    }
    uint64_t v128 = 5LL;
  }

  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_445:
  sub_1010DDBC0(&v1044, "nwNavModelAvailability");
  char v1046 = 0;
  v1047[0] = &off_1018529F0;
  v1047[1] = v1364;
  v1048 = v1047;
  sub_1007D24E4(a1, 75, &v1044);
  uint64_t v129 = v1048;
  if (v1048 == v1047)
  {
    uint64_t v130 = 4LL;
    uint64_t v129 = v1047;
  }

  else
  {
    if (!v1048) {
      goto LABEL_452;
    }
    uint64_t v130 = 5LL;
  }

  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_452:
  sub_1010DDBC0(&v1039, "nwRefLocLatitude");
  char v1041 = 0;
  v1042[0] = &off_101852A70;
  v1042[1] = v1364;
  v1043 = v1042;
  sub_1007D24E4(a1, 68, &v1039);
  uint64_t v131 = v1043;
  if (v1043 == v1042)
  {
    uint64_t v132 = 4LL;
    uint64_t v131 = v1042;
  }

  else
  {
    if (!v1043) {
      goto LABEL_459;
    }
    uint64_t v132 = 5LL;
  }

  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_459:
  sub_1010DDBC0(&v1034, "nwRefLocLongitude");
  char v1036 = 0;
  v1037[0] = &off_101852AF0;
  v1037[1] = v1364;
  v1038 = v1037;
  sub_1007D24E4(a1, 69, &v1034);
  int v133 = v1038;
  if (v1038 == v1037)
  {
    uint64_t v134 = 4LL;
    int v133 = v1037;
  }

  else
  {
    if (!v1038) {
      goto LABEL_466;
    }
    uint64_t v134 = 5LL;
  }

  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_466:
  sub_1010DDBC0(&v1029, "nwRefLocUncertainity");
  char v1031 = 0;
  v1032[0] = &off_101852B70;
  v1032[1] = v1364;
  v1033 = v1032;
  sub_1007D24E4(a1, 70, &v1029);
  uint64_t v135 = v1033;
  if (v1033 == v1032)
  {
    uint64_t v136 = 4LL;
    uint64_t v135 = v1032;
  }

  else
  {
    if (!v1033) {
      goto LABEL_473;
    }
    uint64_t v136 = 5LL;
  }

  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_473:
  sub_1010DDBC0(&v1024, "nwRefLocConfidence");
  char v1026 = 0;
  v1027[0] = &off_101852BF0;
  v1027[1] = v1364;
  v1028 = v1027;
  sub_1007D24E4(a1, 71, &v1024);
  double v137 = v1028;
  if (v1028 == v1027)
  {
    uint64_t v138 = 4LL;
    double v137 = v1027;
  }

  else
  {
    if (!v1028) {
      goto LABEL_480;
    }
    uint64_t v138 = 5LL;
  }

  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_480:
  sub_1010DDBC0(&v1019, "nwRefLocDeviationFromTCP");
  char v1021 = 0;
  v1022[0] = &off_101852C70;
  v1022[1] = v1364;
  v1023 = v1022;
  sub_1007D24E4(a1, 72, &v1019);
  double v139 = v1023;
  if (v1023 == v1022)
  {
    uint64_t v140 = 4LL;
    double v139 = v1022;
  }

  else
  {
    if (!v1023) {
      goto LABEL_487;
    }
    uint64_t v140 = 5LL;
  }

  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_487:
  sub_1010DDBC0(&v1014, "nwRefLocDeviationFromCellLocation");
  char v1016 = 0;
  v1017[0] = &off_101852CF0;
  v1017[1] = v1364;
  v1018 = v1017;
  sub_1007D24E4(a1, 73, &v1014);
  double v141 = v1018;
  if (v1018 == v1017)
  {
    uint64_t v142 = 4LL;
    double v141 = v1017;
  }

  else
  {
    if (!v1018) {
      goto LABEL_494;
    }
    uint64_t v142 = 5LL;
  }

  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_494:
  sub_1010DDBC0(&v1009, "finalFixDeviationFromCellLocation");
  char v1011 = 0;
  v1012[0] = &off_101852D70;
  v1012[1] = v1364;
  v1013 = v1012;
  sub_1007D24E4(a1, 76, &v1009);
  double v143 = v1013;
  if (v1013 == v1012)
  {
    uint64_t v144 = 4LL;
    double v143 = v1012;
  }

  else
  {
    if (!v1013) {
      goto LABEL_501;
    }
    uint64_t v144 = 5LL;
  }

  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_501:
  sub_1010DDBC0(&v1004, "simSlotId");
  char v1006 = 1;
  v1007[0] = &off_101852DF0;
  v1007[1] = v1364;
  v1008 = v1007;
  sub_1007D24E4(a1, 79, &v1004);
  double v145 = v1008;
  if (v1008 == v1007)
  {
    uint64_t v146 = 4LL;
    double v145 = v1007;
  }

  else
  {
    if (!v1008) {
      goto LABEL_508;
    }
    uint64_t v146 = 5LL;
  }

  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_508:
  sub_1010DDBC0(&v999, "carrierMcc");
  char v1001 = 0;
  v1002[0] = &off_101852E70;
  v1002[1] = v1364;
  v1003 = v1002;
  sub_1007D24E4(a1, 54, &v999);
  float v147 = v1003;
  if (v1003 == v1002)
  {
    uint64_t v148 = 4LL;
    float v147 = v1002;
  }

  else
  {
    if (!v1003) {
      goto LABEL_515;
    }
    uint64_t v148 = 5LL;
  }

  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_515:
  sub_1010DDBC0(&v994, "carrierMnc");
  char v996 = 0;
  v997[0] = &off_101852EF0;
  v997[1] = v1364;
  v998 = v997;
  sub_1007D24E4(a1, 55, &v994);
  double v149 = v998;
  if (v998 == v997)
  {
    uint64_t v150 = 4LL;
    double v149 = v997;
  }

  else
  {
    if (!v998) {
      goto LABEL_522;
    }
    uint64_t v150 = 5LL;
  }

  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_522:
  sub_1010DDBC0(&v989, "operatorMcc");
  char v991 = 0;
  v992[0] = &off_101852F70;
  v992[1] = v1364;
  v993 = v992;
  sub_1007D24E4(a1, 56, &v989);
  unsigned int v151 = v993;
  if (v993 == v992)
  {
    uint64_t v152 = 4LL;
    unsigned int v151 = v992;
  }

  else
  {
    if (!v993) {
      goto LABEL_529;
    }
    uint64_t v152 = 5LL;
  }

  (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_529:
  sub_1010DDBC0(&v984, "operatorMnc");
  char v986 = 0;
  v987[0] = &off_101852FF0;
  v987[1] = v1364;
  v988 = v987;
  sub_1007D24E4(a1, 57, &v984);
  unsigned int v153 = v988;
  if (v988 == v987)
  {
    uint64_t v154 = 4LL;
    unsigned int v153 = v987;
  }

  else
  {
    if (!v988) {
      goto LABEL_536;
    }
    uint64_t v154 = 5LL;
  }

  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_536:
  sub_1010DDBC0(&v979, "ratType");
  char v981 = 0;
  v982[0] = &off_101853070;
  v982[1] = v1364;
  v983 = v982;
  sub_1007D24E4(a1, 50, &v979);
  double v155 = v983;
  if (v983 == v982)
  {
    uint64_t v156 = 4LL;
    double v155 = v982;
  }

  else
  {
    if (!v983) {
      goto LABEL_543;
    }
    uint64_t v156 = 5LL;
  }

  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_543:
  sub_1010DDBC0(&v974, "isSimPresent");
  char v976 = 0;
  v977[0] = &off_1018530F0;
  v977[1] = v1364;
  v978 = v977;
  sub_1007D24E4(a1, 53, &v974);
  double v157 = v978;
  if (v978 == v977)
  {
    uint64_t v158 = 4LL;
    double v157 = v977;
  }

  else
  {
    if (!v978) {
      goto LABEL_550;
    }
    uint64_t v158 = 5LL;
  }

  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_550:
  sub_1010DDBC0(&v969, "callOverDataPrefferedSim");
  char v971 = 0;
  v972[0] = &off_101853170;
  v972[1] = v1364;
  v973 = v972;
  sub_1007D24E4(a1, 78, &v969);
  double v159 = v973;
  if (v973 == v972)
  {
    uint64_t v160 = 4LL;
    double v159 = v972;
  }

  else
  {
    if (!v973) {
      goto LABEL_557;
    }
    uint64_t v160 = 5LL;
  }

  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_557:
  sub_1010DDBC0(&v964, "callOverVoiceDefaultSim");
  char v966 = 0;
  v967[0] = &off_1018531F0;
  v967[1] = v1364;
  v968 = v967;
  sub_1007D24E4(a1, 80, &v964);
  double v161 = v968;
  if (v968 == v967)
  {
    uint64_t v162 = 4LL;
    double v161 = v967;
  }

  else
  {
    if (!v968) {
      goto LABEL_564;
    }
    uint64_t v162 = 5LL;
  }

  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_564:
  sub_1010DDBC0(&v959, "orbitFileAvailability");
  char v961 = 0;
  v962[0] = &off_101853270;
  v962[1] = v1364;
  v963 = v962;
  sub_1007D24E4(a1, 27, &v959);
  uint64_t v163 = v963;
  if (v963 == v962)
  {
    uint64_t v164 = 4LL;
    uint64_t v163 = v962;
  }

  else
  {
    if (!v963) {
      goto LABEL_571;
    }
    uint64_t v164 = 5LL;
  }

  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_571:
  sub_1010DDBC0(&v954, "orbitFileAge");
  char v956 = 0;
  v957[0] = &off_1018532F0;
  v957[1] = v1364;
  v958 = v957;
  sub_1007D24E4(a1, 28, &v954);
  double v165 = v958;
  if (v958 == v957)
  {
    uint64_t v166 = 4LL;
    double v165 = v957;
  }

  else
  {
    if (!v958) {
      goto LABEL_578;
    }
    uint64_t v166 = 5LL;
  }

  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_578:
  sub_1010DDBC0(&v949, "discardReason");
  char v951 = 0;
  v952[0] = &off_101853370;
  v952[1] = v1364;
  v953 = v952;
  sub_1007D24E4(a1, 84, &v949);
  double v167 = v953;
  if (v953 == v952)
  {
    uint64_t v168 = 4LL;
    double v167 = v952;
  }

  else
  {
    if (!v953) {
      goto LABEL_585;
    }
    uint64_t v168 = 5LL;
  }

  (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_585:
  sub_1010DDBC0(&v944, "discardedPositionMessageType");
  char v946 = 0;
  v947[0] = &off_1018533F0;
  v947[1] = v1364;
  v948 = v947;
  sub_1007D24E4(a1, 85, &v944);
  double v169 = v948;
  if (v948 == v947)
  {
    uint64_t v170 = 4LL;
    double v169 = v947;
  }

  else
  {
    if (!v948) {
      goto LABEL_592;
    }
    uint64_t v170 = 5LL;
  }

  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_592:
  sub_1010DDBC0(&v939, "posProtocolType");
  char v941 = 0;
  v942[0] = &off_101853470;
  v942[1] = v1364;
  v943 = v942;
  sub_1007D24E4(a1, 86, &v939);
  double v171 = v943;
  if (v943 == v942)
  {
    uint64_t v172 = 4LL;
    double v171 = v942;
  }

  else
  {
    if (!v943) {
      goto LABEL_599;
    }
    uint64_t v172 = 5LL;
  }

  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_599:
  sub_1010DDBC0(&v934, "timetoFirstFix");
  char v936 = 0;
  v937[0] = &off_1018534F0;
  v937[1] = v1364;
  v938 = v937;
  sub_1007D24E4(a1, 89, &v934);
  uint64_t v173 = v938;
  if (v938 == v937)
  {
    uint64_t v174 = 4LL;
    uint64_t v173 = v937;
  }

  else
  {
    if (!v938) {
      goto LABEL_606;
    }
    uint64_t v174 = 5LL;
  }

  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_606:
  sub_1010DDBC0(&v929, "firstFixSource");
  char v931 = 0;
  v932[0] = &off_101853570;
  v932[1] = v1364;
  v933 = v932;
  sub_1007D24E4(a1, 90, &v929);
  double v175 = v933;
  if (v933 == v932)
  {
    uint64_t v176 = 4LL;
    double v175 = v932;
  }

  else
  {
    if (!v933) {
      goto LABEL_613;
    }
    uint64_t v176 = 5LL;
  }

  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_613:
  sub_1010DDBC0(&v924, "timeToBestFix");
  char v926 = 0;
  v927[0] = &off_1018535F0;
  v927[1] = v1364;
  v928 = v927;
  sub_1007D24E4(a1, 91, &v924);
  double v177 = v928;
  if (v928 == v927)
  {
    uint64_t v178 = 4LL;
    double v177 = v927;
  }

  else
  {
    if (!v928) {
      goto LABEL_620;
    }
    uint64_t v178 = 5LL;
  }

  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_620:
  sub_1010DDBC0(&v919, "bestFixSource");
  char v921 = 0;
  v922[0] = &off_101853670;
  v922[1] = v1364;
  v923 = v922;
  sub_1007D24E4(a1, 92, &v919);
  double v179 = v923;
  if (v923 == v922)
  {
    uint64_t v180 = 4LL;
    double v179 = v922;
  }

  else
  {
    if (!v923) {
      goto LABEL_627;
    }
    uint64_t v180 = 5LL;
  }

  (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_627:
  sub_1010DDBC0(&v914, "horzAccuracy");
  char v916 = 0;
  v917[0] = &off_1018536F0;
  v917[1] = v1364;
  v918 = v917;
  sub_1007D24E4(a1, 93, &v914);
  double v181 = v918;
  if (v918 == v917)
  {
    uint64_t v182 = 4LL;
    double v181 = v917;
  }

  else
  {
    if (!v918) {
      goto LABEL_634;
    }
    uint64_t v182 = 5LL;
  }

  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_634:
  sub_1010DDBC0(&v909, "vertAccuracy");
  char v911 = 0;
  v912[0] = &off_101853770;
  v912[1] = v1364;
  v913 = v912;
  sub_1007D24E4(a1, 94, &v909);
  int v183 = v913;
  if (v913 == v912)
  {
    uint64_t v184 = 4LL;
    int v183 = v912;
  }

  else
  {
    if (!v913) {
      goto LABEL_641;
    }
    uint64_t v184 = 5LL;
  }

  (*(void (**)(void))(*v183 + 8 * v184))();
LABEL_641:
  sub_1010DDBC0(&v904, "sessionResult");
  char v906 = 0;
  v907[0] = &off_1018537F0;
  v907[1] = v1364;
  v908 = v907;
  sub_1007D24E4(a1, 96, &v904);
  double v185 = v908;
  if (v908 == v907)
  {
    uint64_t v186 = 4LL;
    double v185 = v907;
  }

  else
  {
    if (!v908) {
      goto LABEL_648;
    }
    uint64_t v186 = 5LL;
  }

  (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_648:
  sub_1010DDBC0(&v899, "numValidFixesSent");
  char v901 = 0;
  v902[0] = &off_101853870;
  v902[1] = v1364;
  v903 = v902;
  sub_1007D24E4(a1, 95, &v899);
  int v187 = v903;
  if (v903 == v902)
  {
    uint64_t v188 = 4LL;
    int v187 = v902;
  }

  else
  {
    if (!v903) {
      goto LABEL_655;
    }
    uint64_t v188 = 5LL;
  }

  (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_655:
  sub_1010DDBC0(&v894, "numNoFixMessagesSent");
  char v896 = 0;
  v897[0] = &off_1018538F0;
  v897[1] = v1364;
  v898 = v897;
  sub_1007D24E4(a1, 97, &v894);
  double v189 = v898;
  if (v898 == v897)
  {
    uint64_t v190 = 4LL;
    double v189 = v897;
  }

  else
  {
    if (!v898) {
      goto LABEL_662;
    }
    uint64_t v190 = 5LL;
  }

  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_662:
  sub_1010DDBC0(&v889, "numSendSuccessForValidFix");
  char v891 = 0;
  v892[0] = &off_101853970;
  v892[1] = v1364;
  v893 = v892;
  sub_1007D24E4(a1, 98, &v889);
  v191 = v893;
  if (v893 == v892)
  {
    uint64_t v192 = 4LL;
    v191 = v892;
  }

  else
  {
    if (!v893) {
      goto LABEL_669;
    }
    uint64_t v192 = 5LL;
  }

  (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_669:
  sub_1010DDBC0(&v884, "numSendFailForValidFix");
  char v886 = 0;
  v887[0] = &off_1018539F0;
  v887[1] = v1364;
  v888 = v887;
  sub_1007D24E4(a1, 99, &v884);
  double v193 = v888;
  if (v888 == v887)
  {
    uint64_t v194 = 4LL;
    double v193 = v887;
  }

  else
  {
    if (!v888) {
      goto LABEL_676;
    }
    uint64_t v194 = 5LL;
  }

  (*(void (**)(void))(*v193 + 8 * v194))();
LABEL_676:
  sub_1010DDBC0(&v879, "amlSessionOverNas");
  char v881 = 0;
  v882[0] = &off_101853A70;
  v882[1] = v1364;
  v883 = v882;
  sub_1007D24E4(a1, 100, &v879);
  int v195 = v883;
  if (v883 == v882)
  {
    uint64_t v196 = 4LL;
    int v195 = v882;
  }

  else
  {
    if (!v883) {
      goto LABEL_683;
    }
    uint64_t v196 = 5LL;
  }

  (*(void (**)(void))(*v195 + 8 * v196))();
LABEL_683:
  sub_1010DDBC0(&v874, "timetoFirstFix");
  char v876 = 0;
  v877[0] = &off_101853AF0;
  v877[1] = v1364;
  v878 = v877;
  sub_1007D24E4(a1, 101, &v874);
  int v197 = v878;
  if (v878 == v877)
  {
    uint64_t v198 = 4LL;
    int v197 = v877;
  }

  else
  {
    if (!v878) {
      goto LABEL_690;
    }
    uint64_t v198 = 5LL;
  }

  (*(void (**)(void))(*v197 + 8 * v198))();
LABEL_690:
  sub_1010DDBC0(&v869, "firstFixSource");
  char v871 = 0;
  v872[0] = &off_101853B70;
  v872[1] = v1364;
  v873 = v872;
  sub_1007D24E4(a1, 102, &v869);
  double v199 = v873;
  if (v873 == v872)
  {
    uint64_t v200 = 4LL;
    double v199 = v872;
  }

  else
  {
    if (!v873) {
      goto LABEL_697;
    }
    uint64_t v200 = 5LL;
  }

  (*(void (**)(void))(*v199 + 8 * v200))();
LABEL_697:
  sub_1010DDBC0(&v864, "timeToBestFix");
  char v866 = 0;
  v867[0] = &off_101853BF0;
  v867[1] = v1364;
  v868 = v867;
  sub_1007D24E4(a1, 103, &v864);
  v201 = v868;
  if (v868 == v867)
  {
    uint64_t v202 = 4LL;
    v201 = v867;
  }

  else
  {
    if (!v868) {
      goto LABEL_704;
    }
    uint64_t v202 = 5LL;
  }

  (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_704:
  sub_1010DDBC0(&v859, "bestFixSource");
  char v861 = 0;
  v862[0] = &off_101853C70;
  v862[1] = v1364;
  v863 = v862;
  sub_1007D24E4(a1, 104, &v859);
  v203 = v863;
  if (v863 == v862)
  {
    uint64_t v204 = 4LL;
    v203 = v862;
  }

  else
  {
    if (!v863) {
      goto LABEL_711;
    }
    uint64_t v204 = 5LL;
  }

  (*(void (**)(void))(*v203 + 8 * v204))();
LABEL_711:
  sub_1010DDBC0(&v854, "horzAccuracy");
  char v856 = 0;
  v857[0] = &off_101853CF0;
  v857[1] = v1364;
  v858 = v857;
  sub_1007D24E4(a1, 105, &v854);
  v205 = v858;
  if (v858 == v857)
  {
    uint64_t v206 = 4LL;
    v205 = v857;
  }

  else
  {
    if (!v858) {
      goto LABEL_718;
    }
    uint64_t v206 = 5LL;
  }

  (*(void (**)(void))(*v205 + 8 * v206))();
LABEL_718:
  sub_1010DDBC0(&v849, "vertAccuracy");
  char v851 = 0;
  v852[0] = &off_101853D70;
  v852[1] = v1364;
  v853 = v852;
  sub_1007D24E4(a1, 106, &v849);
  v207 = v853;
  if (v853 == v852)
  {
    uint64_t v208 = 4LL;
    v207 = v852;
  }

  else
  {
    if (!v853) {
      goto LABEL_725;
    }
    uint64_t v208 = 5LL;
  }

  (*(void (**)(void))(*v207 + 8 * v208))();
LABEL_725:
  sub_1010DDBC0(&v844, "sessionResult");
  char v846 = 0;
  v847[0] = &off_101853DF0;
  v847[1] = v1364;
  v848 = v847;
  sub_1007D24E4(a1, 107, &v844);
  v209 = v848;
  if (v848 == v847)
  {
    uint64_t v210 = 4LL;
    v209 = v847;
  }

  else
  {
    if (!v848) {
      goto LABEL_732;
    }
    uint64_t v210 = 5LL;
  }

  (*(void (**)(void))(*v209 + 8 * v210))();
LABEL_732:
  sub_1010DDBC0(&v839, "numValidFixesSent");
  char v841 = 0;
  v842[0] = &off_101853E70;
  v842[1] = v1364;
  v843 = v842;
  sub_1007D24E4(a1, 108, &v839);
  v211 = v843;
  if (v843 == v842)
  {
    uint64_t v212 = 4LL;
    v211 = v842;
  }

  else
  {
    if (!v843) {
      goto LABEL_739;
    }
    uint64_t v212 = 5LL;
  }

  (*(void (**)(void))(*v211 + 8 * v212))();
LABEL_739:
  sub_1010DDBC0(&v834, "numNoFixMessagesSent");
  char v836 = 0;
  v837[0] = &off_101853EF0;
  v837[1] = v1364;
  v838 = v837;
  sub_1007D24E4(a1, 109, &v834);
  v213 = v838;
  if (v838 == v837)
  {
    uint64_t v214 = 4LL;
    v213 = v837;
  }

  else
  {
    if (!v838) {
      goto LABEL_746;
    }
    uint64_t v214 = 5LL;
  }

  (*(void (**)(void))(*v213 + 8 * v214))();
LABEL_746:
  sub_1010DDBC0(&v829, "numSendSuccessForValidFix");
  char v831 = 0;
  v832[0] = &off_101853F70;
  v832[1] = v1364;
  v833 = v832;
  sub_1007D24E4(a1, 110, &v829);
  v215 = v833;
  if (v833 == v832)
  {
    uint64_t v216 = 4LL;
    v215 = v832;
  }

  else
  {
    if (!v833) {
      goto LABEL_753;
    }
    uint64_t v216 = 5LL;
  }

  (*(void (**)(void))(*v215 + 8 * v216))();
LABEL_753:
  sub_1010DDBC0(&v824, "numSendFailForValidFix");
  char v826 = 0;
  v827[0] = &off_101853FF0;
  v827[1] = v1364;
  v828 = v827;
  sub_1007D24E4(a1, 111, &v824);
  v217 = v828;
  if (v828 == v827)
  {
    uint64_t v218 = 4LL;
    v217 = v827;
  }

  else
  {
    if (!v828) {
      goto LABEL_760;
    }
    uint64_t v218 = 5LL;
  }

  (*(void (**)(void))(*v217 + 8 * v218))();
LABEL_760:
  sub_1010DDBC0(&v819, "payloadSendErrorCode");
  char v821 = 0;
  v822[0] = &off_101854070;
  v822[1] = v1364;
  v823 = v822;
  sub_1007D24E4(a1, 112, &v819);
  v219 = v823;
  if (v823 == v822)
  {
    uint64_t v220 = 4LL;
    v219 = v822;
  }

  else
  {
    if (!v823) {
      goto LABEL_767;
    }
    uint64_t v220 = 5LL;
  }

  (*(void (**)(void))(*v219 + 8 * v220))();
LABEL_767:
  sub_1010DDBC0(&v814, "countOfADRTotalPayloadsSent");
  char v816 = 0;
  v817[0] = &off_1018540F0;
  v817[1] = v1364;
  v818 = v817;
  sub_1007D24E4(a1, 113, &v814);
  v221 = v818;
  if (v818 == v817)
  {
    uint64_t v222 = 4LL;
    v221 = v817;
  }

  else
  {
    if (!v818) {
      goto LABEL_774;
    }
    uint64_t v222 = 5LL;
  }

  (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_774:
  sub_1010DDBC0(&v809, "countOfADRSuccessfulPayloadsSent");
  char v811 = 0;
  v812[0] = &off_101854170;
  v812[1] = v1364;
  v813 = v812;
  sub_1007D24E4(a1, 114, &v809);
  v223 = v813;
  if (v813 == v812)
  {
    uint64_t v224 = 4LL;
    v223 = v812;
  }

  else
  {
    if (!v813) {
      goto LABEL_781;
    }
    uint64_t v224 = 5LL;
  }

  (*(void (**)(void))(*v223 + 8 * v224))();
LABEL_781:
  sub_1010DDBC0(&v804, "nameAvailability");
  char v806 = 0;
  v807[0] = &off_1018541F0;
  v807[1] = v1364;
  v808 = v807;
  sub_1007D24E4(a1, 116, &v804);
  v225 = v808;
  if (v808 == v807)
  {
    uint64_t v226 = 4LL;
    v225 = v807;
  }

  else
  {
    if (!v808) {
      goto LABEL_788;
    }
    uint64_t v226 = 5LL;
  }

  (*(void (**)(void))(*v225 + 8 * v226))();
LABEL_788:
  sub_1010DDBC0(&v799, "ageAvailability");
  char v801 = 0;
  v802[0] = &off_101854270;
  v802[1] = v1364;
  v803 = v802;
  sub_1007D24E4(a1, 117, &v799);
  v227 = v803;
  if (v803 == v802)
  {
    uint64_t v228 = 4LL;
    v227 = v802;
  }

  else
  {
    if (!v803) {
      goto LABEL_795;
    }
    uint64_t v228 = 5LL;
  }

  (*(void (**)(void))(*v227 + 8 * v228))();
LABEL_795:
  sub_1010DDBC0(&v794, "weightAvailability");
  char v796 = 0;
  v797[0] = &off_1018542F0;
  v797[1] = v1364;
  v798 = v797;
  sub_1007D24E4(a1, 118, &v794);
  v229 = v798;
  if (v798 == v797)
  {
    uint64_t v230 = 4LL;
    v229 = v797;
  }

  else
  {
    if (!v798) {
      goto LABEL_802;
    }
    uint64_t v230 = 5LL;
  }

  (*(void (**)(void))(*v229 + 8 * v230))();
LABEL_802:
  sub_1010DDBC0(&v789, "heightAvailability");
  char v791 = 0;
  v792[0] = &off_101854370;
  v792[1] = v1364;
  v793 = v792;
  sub_1007D24E4(a1, 119, &v789);
  v231 = v793;
  if (v793 == v792)
  {
    uint64_t v232 = 4LL;
    v231 = v792;
  }

  else
  {
    if (!v793) {
      goto LABEL_809;
    }
    uint64_t v232 = 5LL;
  }

  (*(void (**)(void))(*v231 + 8 * v232))();
LABEL_809:
  sub_1010DDBC0(&v784, "bloodTypeAvailability");
  char v786 = 0;
  v787[0] = &off_1018543F0;
  v787[1] = v1364;
  v788 = v787;
  sub_1007D24E4(a1, 120, &v784);
  v233 = v788;
  if (v788 == v787)
  {
    uint64_t v234 = 4LL;
    v233 = v787;
  }

  else
  {
    if (!v788) {
      goto LABEL_816;
    }
    uint64_t v234 = 5LL;
  }

  (*(void (**)(void))(*v233 + 8 * v234))();
LABEL_816:
  sub_1010DDBC0(&v779, "medicalNotesAvailability");
  char v781 = 0;
  v782[0] = &off_101854470;
  v782[1] = v1364;
  v783 = v782;
  sub_1007D24E4(a1, 121, &v779);
  v235 = v783;
  if (v783 == v782)
  {
    uint64_t v236 = 4LL;
    v235 = v782;
  }

  else
  {
    if (!v783) {
      goto LABEL_823;
    }
    uint64_t v236 = 5LL;
  }

  (*(void (**)(void))(*v235 + 8 * v236))();
LABEL_823:
  sub_1010DDBC0(&v774, "allergyDetailsAvailability");
  char v776 = 0;
  v777[0] = &off_1018544F0;
  v777[1] = v1364;
  v778 = v777;
  sub_1007D24E4(a1, 122, &v774);
  v237 = v778;
  if (v778 == v777)
  {
    uint64_t v238 = 4LL;
    v237 = v777;
  }

  else
  {
    if (!v778) {
      goto LABEL_830;
    }
    uint64_t v238 = 5LL;
  }

  (*(void (**)(void))(*v237 + 8 * v238))();
LABEL_830:
  sub_1010DDBC0(&v769, "medicationsAvailability");
  char v771 = 0;
  v772[0] = &off_101854570;
  v772[1] = v1364;
  v773 = v772;
  sub_1007D24E4(a1, 123, &v769);
  v239 = v773;
  if (v773 == v772)
  {
    uint64_t v240 = 4LL;
    v239 = v772;
  }

  else
  {
    if (!v773) {
      goto LABEL_837;
    }
    uint64_t v240 = 5LL;
  }

  (*(void (**)(void))(*v239 + 8 * v240))();
LABEL_837:
  sub_1010DDBC0(&v764, "emergencyContactsAvailability");
  char v766 = 0;
  v767[0] = &off_1018545F0;
  v767[1] = v1364;
  v768 = v767;
  sub_1007D24E4(a1, 124, &v764);
  v241 = v768;
  if (v768 == v767)
  {
    uint64_t v242 = 4LL;
    v241 = v767;
  }

  else
  {
    if (!v768) {
      goto LABEL_844;
    }
    uint64_t v242 = 5LL;
  }

  (*(void (**)(void))(*v241 + 8 * v242))();
LABEL_844:
  sub_1010DDBC0(&v759, "medicalConditionsAvailability");
  char v761 = 0;
  v762[0] = &off_101854670;
  v762[1] = v1364;
  v763 = v762;
  sub_1007D24E4(a1, 125, &v759);
  v243 = v763;
  if (v763 == v762)
  {
    uint64_t v244 = 4LL;
    v243 = v762;
  }

  else
  {
    if (!v763) {
      goto LABEL_851;
    }
    uint64_t v244 = 5LL;
  }

  (*(void (**)(void))(*v243 + 8 * v244))();
LABEL_851:
  sub_1010DDBC0(&v754, "devicePrimaryLanguage");
  char v756 = 0;
  v757[0] = &off_1018546F0;
  v757[1] = v1364;
  v758 = v757;
  sub_1007D24E4(a1, 126, &v754);
  v245 = v758;
  if (v758 == v757)
  {
    uint64_t v246 = 4LL;
    v245 = v757;
  }

  else
  {
    if (!v758) {
      goto LABEL_858;
    }
    uint64_t v246 = 5LL;
  }

  (*(void (**)(void))(*v245 + 8 * v246))();
LABEL_858:
  sub_1010DDBC0(&v749, "deviceSystemLanguage");
  char v751 = 0;
  v752[0] = &off_101854770;
  v752[1] = v1364;
  v753 = v752;
  sub_1007D24E4(a1, 127, &v749);
  v247 = v753;
  if (v753 == v752)
  {
    uint64_t v248 = 4LL;
    v247 = v752;
  }

  else
  {
    if (!v753) {
      goto LABEL_865;
    }
    uint64_t v248 = 5LL;
  }

  (*(void (**)(void))(*v247 + 8 * v248))();
LABEL_865:
  sub_1010DDBC0(&v744, "dispatchableSearchAreaAvailability");
  char v746 = 0;
  v747[0] = &off_1018547F0;
  v747[1] = v1364;
  v748 = v747;
  sub_1007D24E4(a1, 115, &v744);
  v249 = v748;
  if (v748 == v747)
  {
    uint64_t v250 = 4LL;
    v249 = v747;
  }

  else
  {
    if (!v748) {
      goto LABEL_872;
    }
    uint64_t v250 = 5LL;
  }

  (*(void (**)(void))(*v249 + 8 * v250))();
LABEL_872:
  sub_1010DDBC0(&v739, "daysSinceLastNameUpdate");
  char v741 = 0;
  v742[0] = &off_101854870;
  v742[1] = v1364;
  v743 = v742;
  sub_1007D24E4(a1, 128, &v739);
  v251 = v743;
  if (v743 == v742)
  {
    uint64_t v252 = 4LL;
    v251 = v742;
  }

  else
  {
    if (!v743) {
      goto LABEL_879;
    }
    uint64_t v252 = 5LL;
  }

  (*(void (**)(void))(*v251 + 8 * v252))();
LABEL_879:
  sub_1010DDBC0(&v734, "daysSinceLastAgeUpdate");
  char v736 = 0;
  v737[0] = &off_1018548F0;
  v737[1] = v1364;
  v738 = v737;
  sub_1007D24E4(a1, 129, &v734);
  v253 = v738;
  if (v738 == v737)
  {
    uint64_t v254 = 4LL;
    v253 = v737;
  }

  else
  {
    if (!v738) {
      goto LABEL_886;
    }
    uint64_t v254 = 5LL;
  }

  (*(void (**)(void))(*v253 + 8 * v254))();
LABEL_886:
  sub_1010DDBC0(&v729, "daysSinceLastWeightUpdate");
  char v731 = 0;
  v732[0] = &off_101854970;
  v732[1] = v1364;
  v733 = v732;
  sub_1007D24E4(a1, 130, &v729);
  v255 = v733;
  if (v733 == v732)
  {
    uint64_t v256 = 4LL;
    v255 = v732;
  }

  else
  {
    if (!v733) {
      goto LABEL_893;
    }
    uint64_t v256 = 5LL;
  }

  (*(void (**)(void))(*v255 + 8 * v256))();
LABEL_893:
  sub_1010DDBC0(&v724, "daysSinceLastHeightUpdate");
  char v726 = 0;
  v727[0] = &off_1018549F0;
  v727[1] = v1364;
  v728 = v727;
  sub_1007D24E4(a1, 131, &v724);
  v257 = v728;
  if (v728 == v727)
  {
    uint64_t v258 = 4LL;
    v257 = v727;
  }

  else
  {
    if (!v728) {
      goto LABEL_900;
    }
    uint64_t v258 = 5LL;
  }

  (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_900:
  sub_1010DDBC0(&v719, "daysSinceLastMedicalNotesUpdate");
  char v721 = 0;
  v722[0] = &off_101854A70;
  v722[1] = v1364;
  v723 = v722;
  sub_1007D24E4(a1, 132, &v719);
  v259 = v723;
  if (v723 == v722)
  {
    uint64_t v260 = 4LL;
    v259 = v722;
  }

  else
  {
    if (!v723) {
      goto LABEL_907;
    }
    uint64_t v260 = 5LL;
  }

  (*(void (**)(void))(*v259 + 8 * v260))();
LABEL_907:
  sub_1010DDBC0(&v714, "daysSinceLastAllergyDetailsUpdate");
  char v716 = 0;
  v717[0] = &off_101854AF0;
  v717[1] = v1364;
  v718 = v717;
  sub_1007D24E4(a1, 133, &v714);
  v261 = v718;
  if (v718 == v717)
  {
    uint64_t v262 = 4LL;
    v261 = v717;
  }

  else
  {
    if (!v718) {
      goto LABEL_914;
    }
    uint64_t v262 = 5LL;
  }

  (*(void (**)(void))(*v261 + 8 * v262))();
LABEL_914:
  sub_1010DDBC0(&v709, "daysSinceLastMedicationsUpdate");
  char v711 = 0;
  v712[0] = &off_101854B70;
  v712[1] = v1364;
  v713 = v712;
  sub_1007D24E4(a1, 134, &v709);
  v263 = v713;
  if (v713 == v712)
  {
    uint64_t v264 = 4LL;
    v263 = v712;
  }

  else
  {
    if (!v713) {
      goto LABEL_921;
    }
    uint64_t v264 = 5LL;
  }

  (*(void (**)(void))(*v263 + 8 * v264))();
LABEL_921:
  sub_1010DDBC0(&v704, "daysSinceLastEmergencyContactsUpdate");
  char v706 = 0;
  v707[0] = &off_101854BF0;
  v707[1] = v1364;
  v708 = v707;
  sub_1007D24E4(a1, 135, &v704);
  v265 = v708;
  if (v708 == v707)
  {
    uint64_t v266 = 4LL;
    v265 = v707;
  }

  else
  {
    if (!v708) {
      goto LABEL_928;
    }
    uint64_t v266 = 5LL;
  }

  (*(void (**)(void))(*v265 + 8 * v266))();
LABEL_928:
  sub_1010DDBC0(&v699, "daysSinceLastMedicalConditionsUpdate");
  char v701 = 0;
  v702[0] = &off_101854C70;
  v702[1] = v1364;
  v703 = v702;
  sub_1007D24E4(a1, 136, &v699);
  v267 = v703;
  if (v703 == v702)
  {
    uint64_t v268 = 4LL;
    v267 = v702;
  }

  else
  {
    if (!v703) {
      goto LABEL_935;
    }
    uint64_t v268 = 5LL;
  }

  (*(void (**)(void))(*v267 + 8 * v268))();
LABEL_935:
  sub_1010DDBC0(&v694, "daysSinceLastDevicePrimaryLanguageUpdate");
  char v696 = 0;
  v697[0] = &off_101854CF0;
  v697[1] = v1364;
  v698 = v697;
  sub_1007D24E4(a1, 137, &v694);
  v269 = v698;
  if (v698 == v697)
  {
    uint64_t v270 = 4LL;
    v269 = v697;
  }

  else
  {
    if (!v698) {
      goto LABEL_942;
    }
    uint64_t v270 = 5LL;
  }

  (*(void (**)(void))(*v269 + 8 * v270))();
LABEL_942:
  sub_1010DDBC0(&v689, "featureVersion");
  char v691 = 0;
  v692[0] = &off_101854D70;
  v692[1] = v1364;
  v693 = v692;
  sub_1007D24E4(a1, 138, &v689);
  v271 = v693;
  if (v693 == v692)
  {
    uint64_t v272 = 4LL;
    v271 = v692;
  }

  else
  {
    if (!v693) {
      goto LABEL_949;
    }
    uint64_t v272 = 5LL;
  }

  (*(void (**)(void))(*v271 + 8 * v272))();
LABEL_949:
  sub_1010DDBC0(&v684, "callDuration");
  char v686 = 0;
  v687[0] = &off_101854DF0;
  v687[1] = v1364;
  v688 = v687;
  sub_1007D24E4(a1, 32, &v684);
  v273 = v688;
  if (v688 == v687)
  {
    uint64_t v274 = 4LL;
    v273 = v687;
  }

  else
  {
    if (!v688) {
      goto LABEL_956;
    }
    uint64_t v274 = 5LL;
  }

  (*(void (**)(void))(*v273 + 8 * v274))();
LABEL_956:
  sub_1010DDBC0(&v679, "apnsTokenReceived");
  char v681 = 0;
  v682[0] = &off_101854E70;
  v682[1] = v1364;
  v683 = v682;
  sub_1007D24E4(a1, 190, &v679);
  v275 = v683;
  if (v683 == v682)
  {
    uint64_t v276 = 4LL;
    v275 = v682;
  }

  else
  {
    if (!v683) {
      goto LABEL_963;
    }
    uint64_t v276 = 5LL;
  }

  (*(void (**)(void))(*v275 + 8 * v276))();
LABEL_963:
  sub_1010DDBC0(&v674, "numRequestsReceived");
  char v676 = 0;
  v677[0] = &off_101854EF0;
  v677[1] = v1364;
  v678 = v677;
  sub_1007D24E4(a1, 191, &v674);
  v277 = v678;
  if (v678 == v677)
  {
    uint64_t v278 = 4LL;
    v277 = v677;
  }

  else
  {
    if (!v678) {
      goto LABEL_970;
    }
    uint64_t v278 = 5LL;
  }

  (*(void (**)(void))(*v277 + 8 * v278))();
LABEL_970:
  sub_1010DDBC0(&v669, "numSuccessfulRequestsReceived");
  char v671 = 0;
  v672[0] = &off_101854F70;
  v672[1] = v1364;
  v673 = v672;
  sub_1007D24E4(a1, 192, &v669);
  v279 = v673;
  if (v673 == v672)
  {
    uint64_t v280 = 4LL;
    v279 = v672;
  }

  else
  {
    if (!v673) {
      goto LABEL_977;
    }
    uint64_t v280 = 5LL;
  }

  (*(void (**)(void))(*v279 + 8 * v280))();
LABEL_977:
  sub_1010DDBC0(&v664, "numControlPayloadsSent");
  char v666 = 0;
  v667[0] = &off_101854FF0;
  v667[1] = v1364;
  v668 = v667;
  sub_1007D24E4(a1, 193, &v664);
  v281 = v668;
  if (v668 == v667)
  {
    uint64_t v282 = 4LL;
    v281 = v667;
  }

  else
  {
    if (!v668) {
      goto LABEL_984;
    }
    uint64_t v282 = 5LL;
  }

  (*(void (**)(void))(*v281 + 8 * v282))();
LABEL_984:
  sub_1010DDBC0(&v659, "numSuccessfulControlPayloadsSent");
  char v661 = 0;
  v662[0] = &off_101855070;
  v662[1] = v1364;
  v663 = v662;
  sub_1007D24E4(a1, 194, &v659);
  v283 = v663;
  if (v663 == v662)
  {
    uint64_t v284 = 4LL;
    v283 = v662;
  }

  else
  {
    if (!v663) {
      goto LABEL_991;
    }
    uint64_t v284 = 5LL;
  }

  (*(void (**)(void))(*v283 + 8 * v284))();
LABEL_991:
  sub_1010DDBC0(&v654, "numRequestsDuringEEM");
  char v656 = 0;
  v657[0] = &off_1018550F0;
  v657[1] = v1364;
  v658 = v657;
  sub_1007D24E4(a1, 195, &v654);
  v285 = v658;
  if (v658 == v657)
  {
    uint64_t v286 = 4LL;
    v285 = v657;
  }

  else
  {
    if (!v658) {
      goto LABEL_998;
    }
    uint64_t v286 = 5LL;
  }

  (*(void (**)(void))(*v285 + 8 * v286))();
LABEL_998:
  sub_1010DDBC0(&v649, "numDuplicateRequests");
  char v651 = 0;
  v652[0] = &off_101855170;
  v652[1] = v1364;
  v653 = v652;
  sub_1007D24E4(a1, 196, &v649);
  v287 = v653;
  if (v653 == v652)
  {
    uint64_t v288 = 4LL;
    v287 = v652;
  }

  else
  {
    if (!v653) {
      goto LABEL_1005;
    }
    uint64_t v288 = 5LL;
  }

  (*(void (**)(void))(*v287 + 8 * v288))();
LABEL_1005:
  sub_1010DDBC0(&v644, "locationdRestartedDuringSession");
  char v646 = 0;
  v647[0] = &off_1018551F0;
  v647[1] = v1364;
  v648 = v647;
  sub_1007D24E4(a1, 197, &v644);
  v289 = v648;
  if (v648 == v647)
  {
    uint64_t v290 = 4LL;
    v289 = v647;
  }

  else
  {
    if (!v648) {
      goto LABEL_1012;
    }
    uint64_t v290 = 5LL;
  }

  (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_1012:
  sub_1010DDBC0(&v639, "firstRequestTypeReceived");
  char v641 = 0;
  v642[0] = &off_101855270;
  v642[1] = v1364;
  v643 = v642;
  sub_1007D24E4(a1, 198, &v639);
  v291 = v643;
  if (v643 == v642)
  {
    uint64_t v292 = 4LL;
    v291 = v642;
  }

  else
  {
    if (!v643) {
      goto LABEL_1019;
    }
    uint64_t v292 = 5LL;
  }

  (*(void (**)(void))(*v291 + 8 * v292))();
LABEL_1019:
  sub_1010DDBC0(&v634, "numStreamingRequests");
  char v636 = 0;
  v637[0] = &off_1018552F0;
  v637[1] = v1364;
  v638 = v637;
  sub_1007D24E4(a1, 199, &v634);
  v293 = v638;
  if (v638 == v637)
  {
    uint64_t v294 = 4LL;
    v293 = v637;
  }

  else
  {
    if (!v638) {
      goto LABEL_1026;
    }
    uint64_t v294 = 5LL;
  }

  (*(void (**)(void))(*v293 + 8 * v294))();
LABEL_1026:
  sub_1010DDBC0(&v629, "numUploadRequests");
  char v631 = 0;
  v632[0] = &off_101855370;
  v632[1] = v1364;
  v633 = v632;
  sub_1007D24E4(a1, 200, &v629);
  v295 = v633;
  if (v633 == v632)
  {
    uint64_t v296 = 4LL;
    v295 = v632;
  }

  else
  {
    if (!v633) {
      goto LABEL_1033;
    }
    uint64_t v296 = 5LL;
  }

  (*(void (**)(void))(*v295 + 8 * v296))();
LABEL_1033:
  sub_1010DDBC0(&v624, "numDuplicateMediaSelections");
  char v626 = 0;
  v627[0] = &off_1018553F0;
  v627[1] = v1364;
  v628 = v627;
  sub_1007D24E4(a1, 201, &v624);
  v297 = v628;
  if (v628 == v627)
  {
    uint64_t v298 = 4LL;
    v297 = v627;
  }

  else
  {
    if (!v628) {
      goto LABEL_1040;
    }
    uint64_t v298 = 5LL;
  }

  (*(void (**)(void))(*v297 + 8 * v298))();
LABEL_1040:
  sub_1010DDBC0(&v619, "totalItems");
  char v621 = 0;
  v622[0] = &off_101855470;
  v622[1] = v1364;
  v623 = v622;
  sub_1007D24E4(a1, 202, &v619);
  v299 = v623;
  if (v623 == v622)
  {
    uint64_t v300 = 4LL;
    v299 = v622;
  }

  else
  {
    if (!v623) {
      goto LABEL_1047;
    }
    uint64_t v300 = 5LL;
  }

  (*(void (**)(void))(*v299 + 8 * v300))();
LABEL_1047:
  sub_1010DDBC0(&v614, "numImages");
  char v616 = 0;
  v617[0] = &off_1018554F0;
  v617[1] = v1364;
  v618 = v617;
  sub_1007D24E4(a1, 203, &v614);
  v301 = v618;
  if (v618 == v617)
  {
    uint64_t v302 = 4LL;
    v301 = v617;
  }

  else
  {
    if (!v618) {
      goto LABEL_1054;
    }
    uint64_t v302 = 5LL;
  }

  (*(void (**)(void))(*v301 + 8 * v302))();
LABEL_1054:
  sub_1010DDBC0(&v609, "numVideos");
  char v611 = 0;
  v612[0] = &off_101855570;
  v612[1] = v1364;
  v613 = v612;
  sub_1007D24E4(a1, 204, &v609);
  v303 = v613;
  if (v613 == v612)
  {
    uint64_t v304 = 4LL;
    v303 = v612;
  }

  else
  {
    if (!v613) {
      goto LABEL_1061;
    }
    uint64_t v304 = 5LL;
  }

  (*(void (**)(void))(*v303 + 8 * v304))();
LABEL_1061:
  sub_1010DDBC0(&v604, "batteryLevelChange");
  char v606 = 0;
  v607[0] = &off_1018555F0;
  v607[1] = v1364;
  v608 = v607;
  sub_1007D24E4(a1, 205, &v604);
  v305 = v608;
  if (v608 == v607)
  {
    uint64_t v306 = 4LL;
    v305 = v607;
  }

  else
  {
    if (!v608) {
      goto LABEL_1068;
    }
    uint64_t v306 = 5LL;
  }

  (*(void (**)(void))(*v305 + 8 * v306))();
LABEL_1068:
  sub_1010DDBC0(&v599, "powerSourceConnected");
  char v601 = 0;
  v602[0] = &off_101855670;
  v602[1] = v1364;
  v603 = v602;
  sub_1007D24E4(a1, 206, &v599);
  v307 = v603;
  if (v603 == v602)
  {
    uint64_t v308 = 4LL;
    v307 = v602;
  }

  else
  {
    if (!v603) {
      goto LABEL_1075;
    }
    uint64_t v308 = 5LL;
  }

  (*(void (**)(void))(*v307 + 8 * v308))();
LABEL_1075:
  sub_1010DDBC0(&v594, "batteryLevelAtStartOfCall");
  char v596 = 0;
  v597[0] = &off_1018556F0;
  v597[1] = v1364;
  v598 = v597;
  sub_1007D24E4(a1, 207, &v594);
  v309 = v598;
  if (v598 == v597)
  {
    uint64_t v310 = 4LL;
    v309 = v597;
  }

  else
  {
    if (!v598) {
      goto LABEL_1082;
    }
    uint64_t v310 = 5LL;
  }

  (*(void (**)(void))(*v309 + 8 * v310))();
LABEL_1082:
  sub_1010DDBC0(&v589, "batteryLevelAtEndOfCall");
  char v591 = 0;
  v592[0] = &off_101855770;
  v592[1] = v1364;
  v593 = v592;
  sub_1007D24E4(a1, 208, &v589);
  v311 = v593;
  if (v593 == v592)
  {
    uint64_t v312 = 4LL;
    v311 = v592;
  }

  else
  {
    if (!v593) {
      goto LABEL_1089;
    }
    uint64_t v312 = 5LL;
  }

  (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_1089:
  sub_1010DDBC0(&v584, "partnerID");
  char v586 = 0;
  v587[0] = &off_1018557F0;
  v587[1] = v1364;
  v588 = v587;
  sub_1007D24E4(a1, 209, &v584);
  v313 = v588;
  if (v588 == v587)
  {
    uint64_t v314 = 4LL;
    v313 = v587;
  }

  else
  {
    if (!v588) {
      goto LABEL_1096;
    }
    uint64_t v314 = 5LL;
  }

  (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_1096:
  sub_1010DDBC0(&v579, "psapID");
  char v581 = 0;
  v582[0] = &off_101855870;
  v582[1] = v1364;
  v583 = v582;
  sub_1007D24E4(a1, 210, &v579);
  v315 = v583;
  if (v583 == v582)
  {
    uint64_t v316 = 4LL;
    v315 = v582;
  }

  else
  {
    if (!v583) {
      goto LABEL_1103;
    }
    uint64_t v316 = 5LL;
  }

  (*(void (**)(void))(*v315 + 8 * v316))();
LABEL_1103:
  sub_1010DDBC0(&v574, "geofenceID");
  char v576 = 0;
  v577[0] = &off_1018558F0;
  v577[1] = v1364;
  v578 = v577;
  sub_1007D24E4(a1, 211, &v574);
  v317 = v578;
  if (v578 == v577)
  {
    uint64_t v318 = 4LL;
    v317 = v577;
  }

  else
  {
    if (!v578) {
      goto LABEL_1110;
    }
    uint64_t v318 = 5LL;
  }

  (*(void (**)(void))(*v317 + 8 * v318))();
LABEL_1110:
  sub_1010DDBC0(&v569, "requestType");
  char v571 = 0;
  v572[0] = &off_101855970;
  v572[1] = v1364;
  v573 = v572;
  sub_1007D24E4(a1, 212, &v569);
  v319 = v573;
  if (v573 == v572)
  {
    uint64_t v320 = 4LL;
    v319 = v572;
  }

  else
  {
    if (!v573) {
      goto LABEL_1117;
    }
    uint64_t v320 = 5LL;
  }

  (*(void (**)(void))(*v319 + 8 * v320))();
LABEL_1117:
  sub_1010DDBC0(&v564, "requestStatusAtFirstUserResponse");
  char v566 = 0;
  v567[0] = &off_1018559F0;
  v567[1] = v1364;
  v568 = v567;
  sub_1007D24E4(a1, 213, &v564);
  v321 = v568;
  if (v568 == v567)
  {
    uint64_t v322 = 4LL;
    v321 = v567;
  }

  else
  {
    if (!v568) {
      goto LABEL_1124;
    }
    uint64_t v322 = 5LL;
  }

  (*(void (**)(void))(*v321 + 8 * v322))();
LABEL_1124:
  sub_1010DDBC0(&v559, "requestStatusAtCallEnd");
  char v561 = 0;
  v562[0] = &off_101855A70;
  v562[1] = v1364;
  v563 = v562;
  sub_1007D24E4(a1, 214, &v559);
  v323 = v563;
  if (v563 == v562)
  {
    uint64_t v324 = 4LL;
    v323 = v562;
  }

  else
  {
    if (!v563) {
      goto LABEL_1131;
    }
    uint64_t v324 = 5LL;
  }

  (*(void (**)(void))(*v323 + 8 * v324))();
LABEL_1131:
  sub_1010DDBC0(&v554, "receivedTimeSinceSessionStart");
  char v556 = 0;
  v557[0] = &off_101855AF0;
  v557[1] = v1364;
  v558 = v557;
  sub_1007D24E4(a1, 215, &v554);
  v325 = v558;
  if (v558 == v557)
  {
    uint64_t v326 = 4LL;
    v325 = v557;
  }

  else
  {
    if (!v558) {
      goto LABEL_1138;
    }
    uint64_t v326 = 5LL;
  }

  (*(void (**)(void))(*v325 + 8 * v326))();
LABEL_1138:
  sub_1010DDBC0(&v549, "receivedTimeToFirstUserResponse");
  char v551 = 0;
  v552[0] = &off_101855B70;
  v552[1] = v1364;
  v553 = v552;
  sub_1007D24E4(a1, 216, &v549);
  v327 = v553;
  if (v553 == v552)
  {
    uint64_t v328 = 4LL;
    v327 = v552;
  }

  else
  {
    if (!v553) {
      goto LABEL_1145;
    }
    uint64_t v328 = 5LL;
  }

  (*(void (**)(void))(*v327 + 8 * v328))();
LABEL_1145:
  sub_1010DDBC0(&v544, "receivedTimeToAcceptTime");
  char v546 = 0;
  v547[0] = &off_101855BF0;
  v547[1] = v1364;
  v548 = v547;
  sub_1007D24E4(a1, 217, &v544);
  v329 = v548;
  if (v548 == v547)
  {
    uint64_t v330 = 4LL;
    v329 = v547;
  }

  else
  {
    if (!v548) {
      goto LABEL_1152;
    }
    uint64_t v330 = 5LL;
  }

  (*(void (**)(void))(*v329 + 8 * v330))();
LABEL_1152:
  sub_1010DDBC0(&v539, "numMediaSelectIterations");
  char v541 = 0;
  v542[0] = &off_101855C70;
  v542[1] = v1364;
  v543 = v542;
  sub_1007D24E4(a1, 218, &v539);
  v331 = v543;
  if (v543 == v542)
  {
    uint64_t v332 = 4LL;
    v331 = v542;
  }

  else
  {
    if (!v543) {
      goto LABEL_1159;
    }
    uint64_t v332 = 5LL;
  }

  (*(void (**)(void))(*v331 + 8 * v332))();
LABEL_1159:
  sub_1010DDBC0(&v534, "requestTransmissionTime");
  char v536 = 0;
  v537[0] = &off_101855CF0;
  v537[1] = v1364;
  v538 = v537;
  sub_1007D24E4(a1, 219, &v534);
  v333 = v538;
  if (v538 == v537)
  {
    uint64_t v334 = 4LL;
    v333 = v537;
  }

  else
  {
    if (!v538) {
      goto LABEL_1166;
    }
    uint64_t v334 = 5LL;
  }

  (*(void (**)(void))(*v333 + 8 * v334))();
LABEL_1166:
  sub_1010DDBC0(&v529, "thermalLevelAtStartOfCall");
  char v531 = 0;
  v532[0] = &off_101855D70;
  v532[1] = v1364;
  v533 = v532;
  sub_1007D24E4(a1, 220, &v529);
  v335 = v533;
  if (v533 == v532)
  {
    uint64_t v336 = 4LL;
    v335 = v532;
  }

  else
  {
    if (!v533) {
      goto LABEL_1173;
    }
    uint64_t v336 = 5LL;
  }

  (*(void (**)(void))(*v335 + 8 * v336))();
LABEL_1173:
  sub_1010DDBC0(&v524, "maxThermalLevelInCall");
  char v526 = 0;
  v527[0] = &off_101855DF0;
  v527[1] = v1364;
  v528 = v527;
  sub_1007D24E4(a1, 221, &v524);
  v337 = v528;
  if (v528 == v527)
  {
    uint64_t v338 = 4LL;
    v337 = v527;
  }

  else
  {
    if (!v528) {
      goto LABEL_1180;
    }
    uint64_t v338 = 5LL;
  }

  (*(void (**)(void))(*v337 + 8 * v338))();
LABEL_1180:
  sub_1010DDBC0(&v519, "thermalLevelAtEndOfCall");
  char v521 = 0;
  v522[0] = &off_101855E70;
  v522[1] = v1364;
  v523 = v522;
  sub_1007D24E4(a1, 222, &v519);
  v339 = v523;
  if (v523 == v522)
  {
    uint64_t v340 = 4LL;
    v339 = v522;
  }

  else
  {
    if (!v523) {
      goto LABEL_1187;
    }
    uint64_t v340 = 5LL;
  }

  (*(void (**)(void))(*v339 + 8 * v340))();
LABEL_1187:
  sub_1010DDBC0(&v514, "peakPowerAtStartOfCall");
  char v516 = 0;
  v517[0] = &off_101855EF0;
  v517[1] = v1364;
  v518 = v517;
  sub_1007D24E4(a1, 223, &v514);
  v341 = v518;
  if (v518 == v517)
  {
    uint64_t v342 = 4LL;
    v341 = v517;
  }

  else
  {
    if (!v518) {
      goto LABEL_1194;
    }
    uint64_t v342 = 5LL;
  }

  (*(void (**)(void))(*v341 + 8 * v342))();
LABEL_1194:
  sub_1010DDBC0(&v509, "maxPeakPowerInCall");
  char v511 = 0;
  v512[0] = &off_101855F70;
  v512[1] = v1364;
  v513 = v512;
  sub_1007D24E4(a1, 224, &v509);
  v343 = v513;
  if (v513 == v512)
  {
    uint64_t v344 = 4LL;
    v343 = v512;
  }

  else
  {
    if (!v513) {
      goto LABEL_1201;
    }
    uint64_t v344 = 5LL;
  }

  (*(void (**)(void))(*v343 + 8 * v344))();
LABEL_1201:
  sub_1010DDBC0(&v504, "peakPowerAtEndOfCall");
  char v506 = 0;
  v507[0] = &off_101855FF0;
  v507[1] = v1364;
  v508 = v507;
  sub_1007D24E4(a1, 225, &v504);
  v345 = v508;
  if (v508 == v507)
  {
    uint64_t v346 = 4LL;
    v345 = v507;
  }

  else
  {
    if (!v508) {
      goto LABEL_1208;
    }
    uint64_t v346 = 5LL;
  }

  (*(void (**)(void))(*v345 + 8 * v346))();
LABEL_1208:
  sub_1010DDBC0(&v499, "phoneNumberAvailability");
  char v501 = 0;
  v502[0] = &off_101856070;
  v502[1] = v1364;
  v503 = v502;
  sub_1007D24E4(a1, 142, &v499);
  v347 = v503;
  if (v503 == v502)
  {
    uint64_t v348 = 4LL;
    v347 = v502;
  }

  else
  {
    if (!v503) {
      goto LABEL_1215;
    }
    uint64_t v348 = 5LL;
  }

  (*(void (**)(void))(*v347 + 8 * v348))();
LABEL_1215:
  sub_1010DDBC0(&v494, "timeSinceProvisioning");
  char v496 = 0;
  v497[0] = &off_1018560F0;
  v497[1] = v1364;
  v498 = v497;
  sub_1007D24E4(a1, 143, &v494);
  v349 = v498;
  if (v498 == v497)
  {
    uint64_t v350 = 4LL;
    v349 = v497;
  }

  else
  {
    if (!v498) {
      goto LABEL_1222;
    }
    uint64_t v350 = 5LL;
  }

  (*(void (**)(void))(*v349 + 8 * v350))();
LABEL_1222:
  sub_1010DDBC0(&v489, "timeWithoutNativeNumber");
  char v491 = 0;
  v492[0] = &off_101856170;
  v492[1] = v1364;
  v493 = v492;
  sub_1007D24E4(a1, 144, &v489);
  v351 = v493;
  if (v493 == v492)
  {
    uint64_t v352 = 4LL;
    v351 = v492;
  }

  else
  {
    if (!v493) {
      goto LABEL_1229;
    }
    uint64_t v352 = 5LL;
  }

  (*(void (**)(void))(*v351 + 8 * v352))();
LABEL_1229:
  sub_1010DDBC0(&v484, "isEEDEnabledCarrier");
  char v486 = 0;
  v487[0] = &off_1018561F0;
  v487[1] = v1364;
  v488 = v487;
  sub_1007D24E4(a1, 145, &v484);
  v353 = v488;
  if (v488 == v487)
  {
    uint64_t v354 = 4LL;
    v353 = v487;
  }

  else
  {
    if (!v488) {
      goto LABEL_1236;
    }
    uint64_t v354 = 5LL;
  }

  (*(void (**)(void))(*v353 + 8 * v354))();
LABEL_1236:
  sub_1010DDBC0(&v479, "simInstance");
  char v481 = 0;
  v482[0] = &off_101856270;
  v482[1] = v1364;
  v483 = v482;
  sub_1007D24E4(a1, 146, &v479);
  v355 = v483;
  if (v483 == v482)
  {
    uint64_t v356 = 4LL;
    v355 = v482;
  }

  else
  {
    if (!v483) {
      goto LABEL_1243;
    }
    uint64_t v356 = 5LL;
  }

  (*(void (**)(void))(*v355 + 8 * v356))();
LABEL_1243:
  sub_1010DDBC0(&v474, "ERAResult");
  char v476 = 0;
  v477[0] = &off_1018562F0;
  v477[1] = v1364;
  v478 = v477;
  sub_1007D24E4(a1, 173, &v474);
  v357 = v478;
  if (v478 == v477)
  {
    uint64_t v358 = 4LL;
    v357 = v477;
  }

  else
  {
    if (!v478) {
      goto LABEL_1250;
    }
    uint64_t v358 = 5LL;
  }

  (*(void (**)(void))(*v357 + 8 * v358))();
LABEL_1250:
  sub_1010DDBC0(&v469, "apiResponseTime");
  char v471 = 0;
  v472[0] = &off_101856370;
  v472[1] = v1364;
  v473 = v472;
  sub_1007D24E4(a1, 174, &v469);
  v359 = v473;
  if (v473 == v472)
  {
    uint64_t v360 = 4LL;
    v359 = v472;
  }

  else
  {
    if (!v473) {
      goto LABEL_1257;
    }
    uint64_t v360 = 5LL;
  }

  (*(void (**)(void))(*v359 + 8 * v360))();
LABEL_1257:
  sub_1010DDBC0(&v464, "placemarkLocCount");
  char v466 = 0;
  v467[0] = &off_1018563F0;
  v467[1] = v1364;
  v468 = v467;
  sub_1007D24E4(a1, 175, &v464);
  v361 = v468;
  if (v468 == v467)
  {
    uint64_t v362 = 4LL;
    v361 = v467;
  }

  else
  {
    if (!v468) {
      goto LABEL_1264;
    }
    uint64_t v362 = 5LL;
  }

  (*(void (**)(void))(*v361 + 8 * v362))();
LABEL_1264:
  sub_1010DDBC0(&v459, "chosenPlacemarkLocConfidence");
  char v461 = 0;
  v462[0] = &off_101856470;
  v462[1] = v1364;
  v463 = v462;
  sub_1007D24E4(a1, 176, &v459);
  v363 = v463;
  if (v463 == v462)
  {
    uint64_t v364 = 4LL;
    v363 = v462;
  }

  else
  {
    if (!v463) {
      goto LABEL_1271;
    }
    uint64_t v364 = 5LL;
  }

  (*(void (**)(void))(*v363 + 8 * v364))();
LABEL_1271:
  sub_1010DDBC0(&v454, "chosenPlacemarkLocType");
  char v456 = 0;
  v457[0] = &off_1018564F0;
  v457[1] = v1364;
  v458 = v457;
  sub_1007D24E4(a1, 177, &v454);
  v365 = v458;
  if (v458 == v457)
  {
    uint64_t v366 = 4LL;
    v365 = v457;
  }

  else
  {
    if (!v458) {
      goto LABEL_1278;
    }
    uint64_t v366 = 5LL;
  }

  (*(void (**)(void))(*v365 + 8 * v366))();
LABEL_1278:
  sub_1010DDBC0(&v449, "chosenPlacemarkLocSource");
  char v451 = 0;
  v452[0] = &off_101856570;
  v452[1] = v1364;
  v453 = v452;
  sub_1007D24E4(a1, 178, &v449);
  v367 = v453;
  if (v453 == v452)
  {
    uint64_t v368 = 4LL;
    v367 = v452;
  }

  else
  {
    if (!v453) {
      goto LABEL_1285;
    }
    uint64_t v368 = 5LL;
  }

  (*(void (**)(void))(*v367 + 8 * v368))();
LABEL_1285:
  sub_1010DDBC0(&v444, "placemarkLocDeviationFromE911Loc");
  char v446 = 0;
  v447[0] = &off_1018565F0;
  v447[1] = v1364;
  v448 = v447;
  sub_1007D24E4(a1, 179, &v444);
  v369 = v448;
  if (v448 == v447)
  {
    uint64_t v370 = 4LL;
    v369 = v447;
  }

  else
  {
    if (!v448) {
      goto LABEL_1292;
    }
    uint64_t v370 = 5LL;
  }

  (*(void (**)(void))(*v369 + 8 * v370))();
LABEL_1292:
  sub_1010DDBC0(&v439, "placemarkLocDeviationFromCurrentDeviceLoc");
  char v441 = 0;
  v442[0] = &off_101856670;
  v442[1] = v1364;
  v443 = v442;
  sub_1007D24E4(a1, 180, &v439);
  v371 = v443;
  if (v443 == v442)
  {
    uint64_t v372 = 4LL;
    v371 = v442;
  }

  else
  {
    if (!v443) {
      goto LABEL_1299;
    }
    uint64_t v372 = 5LL;
  }

  (*(void (**)(void))(*v371 + 8 * v372))();
LABEL_1299:
  sub_1010DDBC0(&v434, "placemarkLocUncertainity");
  char v436 = 0;
  v437[0] = &off_1018566F0;
  v437[1] = v1364;
  v438 = v437;
  sub_1007D24E4(a1, 181, &v434);
  v373 = v438;
  if (v438 == v437)
  {
    uint64_t v374 = 4LL;
    v373 = v437;
  }

  else
  {
    if (!v438) {
      goto LABEL_1306;
    }
    uint64_t v374 = 5LL;
  }

  (*(void (**)(void))(*v373 + 8 * v374))();
LABEL_1306:
  sub_1010DDBC0(&v429, "e911LocUncertainity");
  char v431 = 0;
  v432[0] = &off_101856770;
  v432[1] = v1364;
  v433 = v432;
  sub_1007D24E4(a1, 182, &v429);
  v375 = v433;
  if (v433 == v432)
  {
    uint64_t v376 = 4LL;
    v375 = v432;
  }

  else
  {
    if (!v433) {
      goto LABEL_1313;
    }
    uint64_t v376 = 5LL;
  }

  (*(void (**)(void))(*v375 + 8 * v376))();
LABEL_1313:
  sub_1010DDBC0(&v424, "subPremiseFromMeCard");
  char v426 = 0;
  v427[0] = &off_1018567F0;
  v427[1] = v1364;
  v428 = v427;
  sub_1007D24E4(a1, 183, &v424);
  v377 = v428;
  if (v428 == v427)
  {
    uint64_t v378 = 4LL;
    v377 = v427;
  }

  else
  {
    if (!v428) {
      goto LABEL_1320;
    }
    uint64_t v378 = 5LL;
  }

  (*(void (**)(void))(*v377 + 8 * v378))();
LABEL_1320:
  sub_1010DDBC0(&v419, "lastInjectedAltAssistanceSource");
  char v421 = 0;
  v422[0] = &off_101856870;
  v422[1] = v1364;
  v423 = v422;
  sub_1007D24E4(a1, 184, &v419);
  v379 = v423;
  if (v423 == v422)
  {
    uint64_t v380 = 4LL;
    v379 = v422;
  }

  else
  {
    if (!v423) {
      goto LABEL_1327;
    }
    uint64_t v380 = 5LL;
  }

  (*(void (**)(void))(*v379 + 8 * v380))();
LABEL_1327:
  sub_1010DDBC0(&v414, "lastInjectedAltAssistanceUnc");
  char v416 = 0;
  v417[0] = &off_1018568F0;
  v417[1] = v1364;
  v418 = v417;
  sub_1007D24E4(a1, 185, &v414);
  v381 = v418;
  if (v418 == v417)
  {
    uint64_t v382 = 4LL;
    v381 = v417;
  }

  else
  {
    if (!v418) {
      goto LABEL_1334;
    }
    uint64_t v382 = 5LL;
  }

  (*(void (**)(void))(*v381 + 8 * v382))();
LABEL_1334:
  sub_1010DDBC0(&v409, "bestWifiAltUncertainty");
  char v411 = 0;
  v412[0] = &off_101856970;
  v412[1] = v1364;
  v413 = v412;
  sub_1007D24E4(a1, 186, &v409);
  v383 = v413;
  if (v413 == v412)
  {
    uint64_t v384 = 4LL;
    v383 = v412;
  }

  else
  {
    if (!v413) {
      goto LABEL_1341;
    }
    uint64_t v384 = 5LL;
  }

  (*(void (**)(void))(*v383 + 8 * v384))();
LABEL_1341:
  sub_1010DDBC0(&v404, "bestRpaAltUncertainty");
  char v406 = 0;
  v407[0] = &off_1018569F0;
  v407[1] = v1364;
  v408 = v407;
  sub_1007D24E4(a1, 187, &v404);
  v385 = v408;
  if (v408 == v407)
  {
    uint64_t v386 = 4LL;
    v385 = v407;
  }

  else
  {
    if (!v408) {
      goto LABEL_1348;
    }
    uint64_t v386 = 5LL;
  }

  (*(void (**)(void))(*v385 + 8 * v386))();
LABEL_1348:
  sub_1010DDBC0(&v399, "bestGpsAltUncertainty");
  char v401 = 0;
  v402[0] = &off_101856A70;
  v402[1] = v1364;
  v403 = v402;
  sub_1007D24E4(a1, 188, &v399);
  v387 = v403;
  if (v403 == v402)
  {
    uint64_t v388 = 4LL;
    v387 = v402;
  }

  else
  {
    if (!v403) {
      goto LABEL_1355;
    }
    uint64_t v388 = 5LL;
  }

  (*(void (**)(void))(*v387 + 8 * v388))();
LABEL_1355:
  sub_1010DDBC0(&v394, "deviceInCMA");
  char v396 = 0;
  v397[0] = &off_101856AF0;
  v397[1] = v1364;
  v398 = v397;
  sub_1007D24E4(a1, 189, &v394);
  v389 = v398;
  if (v398 == v397)
  {
    uint64_t v390 = 4LL;
    v389 = v397;
  }

  else
  {
    if (!v398) {
      goto LABEL_1362;
    }
    uint64_t v390 = 5LL;
  }

  (*(void (**)(void))(*v389 + 8 * v390))();
LABEL_1362:
}

void sub_1007D116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1007D1CB8(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,defineEventRecipies", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v13[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#ca,defineEventRecipies",  v13,  2);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAnalyticsLogger::defineEventRecipies()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v3 = operator new(0xDCuLL);
  *(void *)int buf = v3;
  uint64_t v16 = (char *)v3 + 220;
  v3[10] = xmmword_10132C6D8;
  v3[11] = unk_10132C6E8;
  v3[12] = xmmword_10132C6F8;
  *(_OWORD *)((char *)v3 + 204) = *(__int128 *)((char *)&xmmword_10132C6F8 + 12);
  v3[6] = xmmword_10132C698;
  v3[7] = unk_10132C6A8;
  v3[8] = xmmword_10132C6B8;
  v3[9] = unk_10132C6C8;
  v3[2] = xmmword_10132C658;
  v3[3] = unk_10132C668;
  v3[4] = xmmword_10132C678;
  v3[5] = unk_10132C688;
  *uint64_t v3 = *(_OWORD *)"%";
  v3[1] = *(_OWORD *)")";
  uint64_t v15 = (char *)v3 + 220;
  sub_1007D25C0(a1, (__int128 *)&qword_1019A1658, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  uint64_t v4 = operator new(0x3CuLL);
  *(void *)int buf = v4;
  uint64_t v16 = (char *)v4 + 60;
  _OWORD *v4 = xmmword_10132C714;
  v4[1] = unk_10132C724;
  _OWORD v4[2] = xmmword_10132C734;
  *(_OWORD *)((char *)v4 + 44) = *(__int128 *)((char *)&xmmword_10132C734 + 12);
  uint64_t v15 = (char *)v4 + 60;
  sub_1007D25C0(a1, (__int128 *)&qword_1019A1688, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  uint64_t v5 = operator new(0x80uLL);
  *(void *)int buf = v5;
  uint64_t v16 = (char *)(v5 + 8);
  v5[4] = xmmword_10132C790;
  v5[5] = unk_10132C7A0;
  v5[6] = xmmword_10132C7B0;
  v5[7] = unk_10132C7C0;
  *uint64_t v5 = xmmword_10132C750;
  v5[1] = unk_10132C760;
  v5[2] = xmmword_10132C770;
  fpos_t v5[3] = unk_10132C780;
  uint64_t v15 = v5 + 8;
  sub_1007D25C0(a1, &xmmword_1019A1670, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  uint64_t v6 = (char *)operator new(0x134uLL);
  uint64_t v7 = v6 + 308;
  *(void *)int buf = v6;
  uint64_t v16 = v6 + 308;
  memcpy(v6, &unk_10132C7D0, 0x134uLL);
  uint64_t v15 = v7;
  sub_1007D25C0(a1, &xmmword_1019A16B8, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  uint64_t v8 = operator new(0x24uLL);
  *(void *)int buf = v8;
  uint64_t v16 = (char *)(v8 + 9);
  _WORD v8[8] = 61;
  *(_OWORD *)uint64_t v8 = xmmword_10132C904;
  *((_OWORD *)v8 + 1) = unk_10132C914;
  uint64_t v15 = v8 + 9;
  sub_1007D25C0(a1, (__int128 *)&qword_1019A16D0, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  unsigned int v9 = operator new(0x3CuLL);
  *(void *)int buf = v9;
  uint64_t v16 = (char *)v9 + 60;
  _OWORD *v9 = xmmword_10132C928;
  v9[1] = unk_10132C938;
  v9[2] = xmmword_10132C948;
  *(_OWORD *)((char *)v9 + 44) = *(__int128 *)((char *)&xmmword_10132C948 + 12);
  uint64_t v15 = (char *)v9 + 60;
  sub_1007D25C0(a1, &xmmword_1019A16A0, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  uint64_t v10 = operator new(0x2CuLL);
  *(void *)int buf = v10;
  uint64_t v16 = (char *)v10 + 44;
  *uint64_t v10 = xmmword_10132C964;
  v10[1] = unk_10132C974;
  *(_OWORD *)((char *)v10 + 2_Block_object_dispose(va, 8) = unk_10132C980;
  uint64_t v15 = (char *)v10 + 44;
  sub_1007D25C0(a1, &xmmword_1019A1748, buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

void sub_1007D20FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1007D2138(void **result)
{
  if (!result[35])
  {
    uint64_t v1 = result;
    sub_10034FF34((uint64_t)sub_1007D27BC, (uint64_t)result, result[26], &v3);
    uint64_t v2 = v3;
    uint64_t v3 = 0LL;
    BOOL result = (void **)v1[35];
    v1[35] = v2;
    if (result)
    {
      (*((void (**)(void **))*result + 1))(result);
      BOOL result = v3;
      uint64_t v3 = 0LL;
      if (result) {
        BOOL result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
      }
      uint64_t v2 = (void **)v1[35];
    }

    if (v2) {
      return (void **)[v2[2] register:v2[1] forNotification:6 registrationInfo:0];
    }
  }

  return result;
}

void sub_1007D21CC(uint64_t a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ca,registerForDaemonStatusNotification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#ca,registerForDaemonStatusNotification",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAnalyticsLogger::registerForDaemonStatusNotification()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if (!*(void *)(a1 + 288))
  {
    sub_1003CC884((uint64_t)sub_1007D30FC, a1, *(void **)(a1 + 208), buf);
    uint64_t v3 = *(void *)buf;
    *(void *)int buf = 0LL;
    uint64_t v4 = *(void *)(a1 + 288);
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = *(void *)buf;
      *(void *)int buf = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
      uint64_t v3 = *(void *)(a1 + 288);
    }

    if (v3)
    {
      [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:7 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 288) + 16) register:*(void *)(*(void *)(a1 + 288) + 8) forNotification:13 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 288) + 16) register:*(void *)(*(void *)(a1 + 288) + 8) forNotification:6 registrationInfo:0];
    }
  }

void **sub_1007D23F4(void **result)
{
  if (!result[37])
  {
    uint64_t v1 = result;
    sub_100583844((uint64_t)sub_1007D2D20, (uint64_t)result, result[26], &v3);
    uint64_t v2 = v3;
    uint64_t v3 = 0LL;
    BOOL result = (void **)v1[37];
    v1[37] = v2;
    if (result)
    {
      (*((void (**)(void **))*result + 1))(result);
      BOOL result = v3;
      uint64_t v3 = 0LL;
      if (result) {
        BOOL result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
      }
      uint64_t v2 = (void **)v1[37];
    }

    if (v2) {
      return (void **)[v2[2] register:v2[1] forNotification:4 registrationInfo:0];
    }
  }

  return result;
}

void *sub_1007D2488(void *a1)
{
  *a1 = &off_1018508D0;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1002DDBC0((uint64_t)(a1 + 21));
  sub_1007D3720((uint64_t)(a1 + 16));
  sub_1007D37A4((uint64_t)(a1 + 11));
  sub_1007D3818((uint64_t)(a1 + 6));
  sub_1007D388C(v2);
  return a1;
}

uint64_t sub_1007D24E4(uint64_t a1, int a2, const std::string *a3)
{
  int v7 = a2;
  uint64_t v8 = &v7;
  uint64_t v4 = (std::string *)sub_1007D4590(a1 + 8, &v7, (uint64_t)&unk_1012CF090, &v8);
  std::string::operator=(v4 + 1, a3);
  std::string::value_type v5 = a3[1].__r_.__value_.__s.__data_[8];
  v4[2].__r_.__value_.__r.__words[0] = a3[1].__r_.__value_.__r.__words[0];
  v4[2].__r_.__value_.__s.__data_[8] = v5;
  sub_1007D4870(&v4[2].__r_.__value_.__l.__cap_, (uint64_t)&a3[1].__r_.__value_.__l.__cap_);
  return 1LL;
}

uint64_t sub_1007D2560(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  return a1;
}

unsigned __int8 *sub_1007D25C0(uint64_t a1, __int128 *a2, void *a3)
{
  uint64_t v21 = a2;
  std::string::value_type v5 = sub_1007E0280(a1 + 88, (unsigned __int8 *)a2, (uint64_t)&unk_1012CF090, &v21);
  uint64_t v6 = (int **)(v5 + 40);
  *((void *)v5 + 6) = *((void *)v5 + 5);
  sub_1000210A0((void **)v5 + 5, (uint64_t)(a3[1] - *a3) >> 2);
  int v7 = (_DWORD *)*a3;
  uint64_t v8 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v8)
  {
    unsigned int v9 = v5 + 56;
    uint64_t v10 = (_DWORD *)*((void *)v5 + 6);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v10 - *v6;
        unint64_t v14 = v13 + 1;
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unsigned int v17 = (char *)sub_10000956C((uint64_t)(v5 + 56), v16);
          uint64_t v12 = (int *)*((void *)v5 + 5);
          uint64_t v10 = (_DWORD *)*((void *)v5 + 6);
        }

        else
        {
          unsigned int v17 = 0LL;
        }

        uint64_t v18 = &v17[4 * v13];
        *(_DWORD *)uint64_t v18 = *v7;
        uint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *--v10;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }

        *((void *)v5 + 5) = v18;
        *((void *)v5 + 6) = v11;
        *((void *)v5 + 7) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }

      else
      {
        *uint64_t v10 = *v7;
        uint64_t v11 = v10 + 1;
      }

      *((void *)v5 + 6) = v11;
      ++v7;
      uint64_t v10 = v11;
    }

    while (v7 != v8);
  }

  sub_1007E01EC(a1, v6);
  return v5 + 40;
}

CFStringRef sub_1007D2730(uint64_t a1, int *a2)
{
  uint64_t v3 = (void *)(a1 + 48);
  if (!sub_100781F1C((void *)(a1 + 48), a2)) {
    return &stru_1018A4B00;
  }
  uint64_t v4 = sub_100781F1C(v3, a2);
  if (!v4) {
    sub_10000C918("unordered_map::at: key not found");
  }
  uint64_t v5 = *((unsigned int *)v4 + 12);
  if ((_DWORD)v5 == -1) {
    sub_10013B58C();
  }
  uint64_t v8 = &v7;
  return (const __CFString *)((uint64_t (*)(char **, uint64_t *))off_101856B60[v5])(&v8, v4 + 3);
}

void sub_1007D27BC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018508E0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLAnalyticsLogger::onWifiServiceNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018508E0);
    }
    unsigned int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      unsigned int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLAnalyticsLogger::onWifiServiceNotification, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1007D2994(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D2974( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D2994(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 6)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v6 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a4 + 96)) {
        BOOL v7 = *(_DWORD *)(a4 + 48) <= 0;
      }
      else {
        BOOL v7 = 1;
      }
      int v8 = !v7;
      *(_DWORD *)int buf = 67109120;
      int v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#ca,received wifi service link status,%d,",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      if (*(_BYTE *)(a4 + 96)) {
        BOOL v14 = *(_DWORD *)(a4 + 48) <= 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = !v14;
      int v23 = 67109120;
      int v24 = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#ca,received wifi service link status,%d,",  &v23);
      unsigned int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiSer vice_Type::NotificationData &)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    *(_DWORD *)int buf = 24;
    if (*(_BYTE *)(a4 + 96)) {
      BOOL v9 = *(_DWORD *)(a4 + 48) <= 0;
    }
    else {
      BOOL v9 = 1;
    }
    char v10 = !v9;
    v21[0] = v10;
    int v22 = 7;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v21);
    sub_10043AFF4((uint64_t)v21);
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v12 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a3;
      *(_DWORD *)int buf = 67174657;
      int v26 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#ca, received unhandled wifi service notification,%{private}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v18 = *a3;
      int v23 = 67174657;
      int v24 = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#ca, received unhandled wifi service notification,%{private}d",  &v23,  8);
      uint64_t v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiSer vice_Type::NotificationData &)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

void sub_1007D2D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1007D2D20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018508E0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLAnalyticsLogger::onClientManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018508E0);
    }
    BOOL v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      unsigned int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLAnalyticsLogger::onClientManagerNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1007D2EF8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D2ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D2EF8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v6 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 216);
      int v8 = *(_DWORD *)(a4 + 188);
      *(_DWORD *)int buf = 67240448;
      int v19 = v7;
      __int16 v20 = 1026;
      int v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#ca,LS Toggle,prev,%{public}d,now,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v11 = *(_DWORD *)(a1 + 216);
      int v12 = *(_DWORD *)(a4 + 188);
      v15[0] = 67240448;
      v15[1] = v11;
      __int16 v16 = 1026;
      int v17 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#ca,LS Toggle,prev,%{public}d,now,%{public}d",  v15,  14);
      __int16 v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLCli entManager_Type::NotificationData &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    int v9 = *(_DWORD *)(a1 + 216);
    int v10 = *(_DWORD *)(a4 + 188);
    if (!v9 && v10 == 1 || v9 == 1 && !v10) {
      *(_DWORD *)(a1 + 216) = v10;
    }
  }

void sub_1007D30FC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018508E0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLAnalyticsLogger::onDaemonStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018508E0);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLAnalyticsLogger::onDaemonStatusNotification, event:%{public, location:escape_only }s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1007D32D4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D32B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D32D4(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3 == 15)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v10 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)a4;
      *(_DWORD *)int buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v11;
      int v12 = "{msg%{public}.0s:#ca received daemon status batterSaveMode, BatterySaverMode:%{public}d}";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v12, buf, 0x18u);
    }
  }

  else
  {
    if (v5 != 8)
    {
      if (v5 == 6)
      {
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        uint64_t v7 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
        {
          int v8 = *a4;
          int v9 = a4[1];
          *(_DWORD *)int buf = 68289538;
          int v16 = 0;
          __int16 v17 = 2082;
          __int16 v18 = "";
          __int16 v19 = 1026;
          int v20 = v8;
          __int16 v21 = 1026;
          int v22 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#ca,received daemon status reachability change, ReachabilityOld:%{public}d, R eachabilityNew:%{public}d}",  buf,  0x1Eu);
        }

        *(_DWORD *)int buf = 26;
        v14[0] = a4[1];
        v14[6] = 0;
        sub_1007C5F28(a1, (int *)buf, (uint64_t)v14);
        sub_10043AFF4((uint64_t)v14);
      }

      return;
    }

    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v10 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int8 *)a4;
      *(_DWORD *)int buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v13;
      int v12 = "{msg%{public}.0s:#ca received daemon status airplaneMode, AirplaneMode:%{public}d}";
      goto LABEL_17;
    }
  }

void sub_1007D353C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1007D358C(void *a1)
{
  uint64_t v1 = sub_1007E07A4(a1);
  operator delete(v1);
}

void sub_1007D35A0(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

NSNumber *sub_1007D35CC(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *a2);
}

NSNumber *sub_1007D35DC(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *a2);
}

NSNumber *sub_1007D35EC(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", *a2);
}

NSNumber *sub_1007D35FC(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a2);
}

NSNumber *sub_1007D360C(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", a1);
}

NSNumber *sub_1007D361C(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a2);
}

NSString *sub_1007D362C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  uint64_t v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1007D36B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSNumber *sub_1007D36CC(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *a2);
}

void sub_1007D36E0(void *a1)
{
  uint64_t v1 = sub_1007D2488(a1);
  operator delete(v1);
}

void sub_1007D36F4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1007D3720(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007D3758(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      sub_1000129D4(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1007D37A4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007D37DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1002E1050((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1007D3818(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007D3850(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10043AFF4((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1007D388C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007D38C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1007D3900((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_1007D3900(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
}

uint64_t *sub_1007D3964@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v5 = a2;
  BOOL result = sub_100781F1C((void *)(a1 + 8), &v5);
  if (result) {
    return (uint64_t *)sub_10001A504((uint64_t)a3, (uint64_t)(result + 8));
  }
  *a3 = &off_101850950;
  a3[1] = sub_1007D3A28;
  a3[3] = a3;
  return result;
}

void *sub_1007D39C8()
{
}

void *sub_1007D39D4()
{
}

void *sub_1007D39E0()
{
}

void *sub_1007D39EC()
{
}

void *sub_1007D39F8()
{
}

void *sub_1007D3A04()
{
}

_UNKNOWN **sub_1007D3A10()
{
}

void *sub_1007D3A1C()
{
}

uint64_t sub_1007D3A28()
{
  return 0LL;
}

void *sub_1007D3A30(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_101850950;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D3A68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850950;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D3A88(uint64_t a1, uint64_t a2)
{
  return sub_1007D3AD8((uint64_t (**)(_BYTE *))(a1 + 8), a2);
}

uint64_t sub_1007D3A90(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D3ACC()
{
  return &off_1018509D0;
}

uint64_t sub_1007D3AD8(uint64_t (**a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2 = *a1;
  sub_10043B9BC((uint64_t)v5, a2);
  uint64_t v3 = v2(v5);
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

void sub_1007D3B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1007D3B30(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  __int16 v14 = operator new(0x38uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  void *v14 = 0LL;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_DWORD *)v14 + 6) = 0;
  *((_DWORD *)v14 + 12) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  __int16 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1007D3D90((uint64_t)v24, 0LL);
  return i;
}

void sub_1007D3D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1007D3D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10043AFF4((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

uint64_t sub_1007D3DD4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return result;
    }
  }

  else if ((_DWORD)v4 == -1)
  {
    BOOL result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_101850840[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }

  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1018509F0 + v4))(&v5, result, a2);
}

_DWORD *sub_1007D3E60(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = *a1;
  if (result[6]) {
    return sub_1007D3F60(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_1007D3E80(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return sub_1007D3FC8(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_1007D3EA4(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 2) {
    return sub_1007D402C(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_1007D3EC8(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[6] != 3) {
    return sub_1007D4090(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_1007D3EEC(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[6] != 4) {
    return sub_1007D40FC(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_1007D3F10(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 5) {
    return sub_1007D4160(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_1007D3F34(uint64_t *a1, std::string *a2, std::string *a3)
{
}

uint64_t sub_1007D3F3C(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 7) {
    return sub_1007D4308(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_1007D3F60(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, _DWORD *))off_101850840[v4])(&v6, a1);
  }
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 0;
  return a1;
}

uint64_t sub_1007D3FC8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_101850840[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_1007D402C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_101850840[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

_DWORD *sub_1007D4090(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, _DWORD *))off_101850840[v4])(&v6, a1);
  }
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 3;
  return a1;
}

_DWORD *sub_1007D40FC(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, _DWORD *))off_101850840[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[6] = 4;
  return a1;
}

uint64_t sub_1007D4160(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_101850840[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

void sub_1007D41C4(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 24) == 6)
  {
    std::string::operator=(this, __str);
  }

  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_1007D4208(v3);
  }

void sub_1007D4208(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)v1, *(void *)(v1 + 8));
  }

  else
  {
    __int128 v3 = *(_OWORD *)v1;
    uint64_t v5 = *(void *)(v1 + 16);
    *(_OWORD *)std::string __p = v3;
  }

  sub_1007D428C(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007D4270( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007D428C(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_101850840[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  __int128 v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(_DWORD *)(a1 + 24) = 6;
  return a1;
}

uint64_t sub_1007D4308(uint64_t a1, _BYTE *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_101850840[v4])(&v6, a1);
  }
  *(_BYTE *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 7;
  return a1;
}

void sub_1007D436C(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1007D4398(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333LL) {
    unint64_t v9 = 0x666666666666666LL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_100100EF8(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  int v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[40 * v9];
  *(_DWORD *)int v11 = *a2;
  sub_10043BD50((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 40;
  sub_10043BAEC(a1, v14);
  uint64_t v12 = a1[1];
  sub_10043BB7C((uint64_t)v14);
  return v12;
}

void sub_1007D4490(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1007D44AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850A60;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D44E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850A60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D44FC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4548(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4584()
{
}

uint64_t *sub_1007D4590(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  __int16 v14 = (char *)operator new(0x60uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)__int16 v14 = 0LL;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((void *)v14 + _Block_object_dispose(va, 8) = &off_101850950;
  *((void *)v14 + 9) = sub_1007D3A28;
  *((void *)v14 + 11) = v14 + 64;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  __int16 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1007D482C((uint64_t)v24, 0LL);
  return i;
}

void sub_1007D4814(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1007D482C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1007D3900((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void *sub_1007D4870(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_1007D4908(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1007D4A70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_1007D4A84(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4AB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4AD4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4B20(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4B5C()
{
}

void *sub_1007D4B70(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4BA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4BC0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4C0C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4C48()
{
}

void *sub_1007D4C5C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4C90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4CAC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4CF8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4D34()
{
}

void *sub_1007D4D48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4D7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4D98(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4DE4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4E20()
{
}

void *sub_1007D4E34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4E68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850CF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4E84(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4ED0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4F0C()
{
}

void *sub_1007D4F20(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D4F54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D4F70(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D4FBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D4FF8()
{
}

void *sub_1007D500C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5040(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850DF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D505C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D50A8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D50E4()
{
}

void *sub_1007D50F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D512C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850E70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5148(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D51C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D51DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5218()
{
}

void *sub_1007D522C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5260(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850EF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D527C(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D52FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5310(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D534C()
{
}

void *sub_1007D5360(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5394(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850F70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D53B0(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5444(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5480()
{
}

void *sub_1007D5494(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101850FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D54C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101850FF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D54E4(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5578(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D55B4()
{
}

void *sub_1007D55C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D55FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851070;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5618(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D56AC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D56E8()
{
}

void *sub_1007D56FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018510F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5730(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018510F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D574C(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D57CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D57E0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D581C()
{
}

void *sub_1007D5830(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5864(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851170;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5880(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5914(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5950()
{
}

void *sub_1007D5964(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018511F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5998(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018511F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D59B4(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5A34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5A48(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5A84()
{
}

void *sub_1007D5A98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5ACC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851270;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5AE8(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5B68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5B7C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5BB8()
{
}

void *sub_1007D5BCC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018512F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5C00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018512F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5C1C(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5CB0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5CEC()
{
}

void *sub_1007D5D00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5D34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851370;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5D50(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5DD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5DE4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5E20()
{
}

void *sub_1007D5E34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018513F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5E68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018513F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5E84(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D5F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D5F18(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D5F54()
{
}

void *sub_1007D5F68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D5F9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851470;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D5FB8(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D6038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D604C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6088()
{
}

void *sub_1007D609C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018514F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D60D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018514F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D60EC(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D616C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D6180(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D61BC()
{
}

void *sub_1007D61D0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6204(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851570;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D6220(uint64_t a1, uint64_t a2)
{
  if (v4[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D627C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D62B8()
{
}

void *sub_1007D62CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018515F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6300(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018515F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D631C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6364(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D63A0()
{
}

void *sub_1007D63B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D63E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851670;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6404(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D644C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6488()
{
}

void *sub_1007D649C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018516F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D64D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018516F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D64EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D652C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6568()
{
}

void *sub_1007D657C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D65B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851770;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D65CC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E9u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6618(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6654()
{
}

void *sub_1007D6668(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018517F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D669C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018517F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D66B8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6700(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D673C()
{
}

void *sub_1007D6750(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851870;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D67A0(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007D6820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007D6834(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6870()
{
}

void *sub_1007D6884(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018518F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D68B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018518F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D68D4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x14u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D691C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6958()
{
}

void *sub_1007D696C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D69A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D69BC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6A04(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6A40()
{
}

void *sub_1007D6A54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018519F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6A88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018519F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6AA4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6AEC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6B28()
{
}

void *sub_1007D6B3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6B70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851A70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6B8C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6BD4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6C10()
{
}

void *sub_1007D6C24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6C58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6C74(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6CBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6CF8()
{
}

void *sub_1007D6D0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6D40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6D5C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6DA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6DE0()
{
}

void *sub_1007D6DF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6E28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6E44(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6E8C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6EC8()
{
}

void *sub_1007D6EDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6F10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D6F2C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 7u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D6F74(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D6FB0()
{
}

void *sub_1007D6FC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D6FF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851CF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7014(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D705C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7098()
{
}

void *sub_1007D70AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D70E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851D70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D70FC(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D7168(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D71A4()
{
}

void *sub_1007D71B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D71EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851DF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D7208(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D7274(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D72B0()
{
}

void *sub_1007D72C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D72F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851E70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D7314(uint64_t a1, uint64_t a2)
{
  BOOL v3 = v5[0] >= -500.0 && LODWORD(v5[6]) == 4;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7364(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D73A0()
{
}

void *sub_1007D73B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D73E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7404(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D744C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7488()
{
}

void *sub_1007D749C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D74D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851F70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D74EC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7534(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7570()
{
}

void *sub_1007D7584(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101851FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D75B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101851FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D75D4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D761C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7658()
{
}

void *sub_1007D766C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D76A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852070;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D76BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 0;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D76FC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7738()
{
}

void *sub_1007D774C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018520F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7780(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018520F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D779C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] - 1) >= 0x77;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D77EC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7828()
{
}

void *sub_1007D783C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7870(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D788C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] - 1) >= 0x77;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D78DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7918()
{
}

void *sub_1007D792C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018521F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7960(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018521F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D797C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D79C4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7A00()
{
}

void *sub_1007D7A14(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7A48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852270;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D7A64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D7AA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7AE0()
{
}

void *sub_1007D7AF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018522F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7B28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018522F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7B44(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x27u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7B90(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7BCC()
{
}

void *sub_1007D7BE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7C14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7C30(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7C78(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7CB4()
{
}

void *sub_1007D7CC8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018523F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7CFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018523F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7D18(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7D60(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7D9C()
{
}

void *sub_1007D7DB0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7DE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852470;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D7E00(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xBu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D7E48(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7E84()
{
}

void *sub_1007D7E98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018524F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D7ECC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018524F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D7EE8(uint64_t a1, uint64_t a2)
{
  if (v5 == 6)
  {
    else {
      std::string __str = v4;
    }
    BOOL v2 = (std::stoi(&__str, 0LL, 10) - 1) < 0xB;
  }

  else
  {
    BOOL v2 = 0LL;
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2;
}

void sub_1007D7F84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1007D7FB0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D7FEC()
{
}

void *sub_1007D8000(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8034(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8050(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D809C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D80D8()
{
}

void *sub_1007D80EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018525F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8120(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018525F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D813C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8188(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D81C4()
{
}

void *sub_1007D81D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D820C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852670;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8228(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8274(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D82B0()
{
}

void *sub_1007D82C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018526F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D82F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018526F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8314(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8360(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D839C()
{
}

void *sub_1007D83B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D83E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852770;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8400(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 5u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8448(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8484()
{
}

void *sub_1007D8498(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018527F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D84CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018527F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D84E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D8528(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8564()
{
}

void *sub_1007D8578(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D85AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852870;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D85C8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] < 3;
  }
  uint64_t v3 = v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8610(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D864C()
{
}

void *sub_1007D8660(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018528F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8694(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018528F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D86B0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D86F8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8734()
{
}

void *sub_1007D8748(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D877C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8798(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D87E0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D881C()
{
}

void *sub_1007D8830(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018529F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8864(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018529F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8880(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D88C8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8904()
{
}

void *sub_1007D8918(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D894C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852A70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8968(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D89D4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8A10()
{
}

void *sub_1007D8A24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8A58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852AF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8A74(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D8AE0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8B1C()
{
}

void *sub_1007D8B30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8B64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852B70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8B80(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_10043AFF4((uint64_t)v5);
  return v2;
}

uint64_t sub_1007D8BD4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8C10()
{
}

void *sub_1007D8C24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8C58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D8C74(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D8CBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8CF8()
{
}

void *sub_1007D8D0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8D40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852C70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8D5C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_10043AFF4((uint64_t)v5);
  return v2;
}

uint64_t sub_1007D8DB0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8DEC()
{
}

void *sub_1007D8E00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8E34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852CF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8E50(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_10043AFF4((uint64_t)v5);
  return v2;
}

uint64_t sub_1007D8EA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8EE0()
{
}

void *sub_1007D8EF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D8F28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852D70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D8F44(uint64_t a1, uint64_t a2)
{
  if (v5 == 5) {
    BOOL v2 = v4[0] == -1.0 || v4[0] > 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D8FA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D8FE0()
{
}

void *sub_1007D8FF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9028(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852DF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D9044(uint64_t a1, uint64_t a2)
{
  if (v4[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D90A0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D90DC()
{
}

void *sub_1007D90F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9124(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852E70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9140(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D918C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D91C8()
{
}

void *sub_1007D91DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9210(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D922C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9278(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D92B4()
{
}

void *sub_1007D92C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D92FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852F70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9318(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9364(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D93A0()
{
}

void *sub_1007D93B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101852FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D93E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101852FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9404(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9450(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D948C()
{
}

void *sub_1007D94A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D94D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853070;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D94F0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9538(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9574()
{
}

void *sub_1007D9588(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018530F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D95BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018530F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D95D8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9620(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D965C()
{
}

void *sub_1007D9670(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D96A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D96C0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9708(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9744()
{
}

void *sub_1007D9758(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018531F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D978C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018531F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D97A8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D97F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D982C()
{
}

void *sub_1007D9840(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9874(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853270;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9890(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D98D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9914()
{
}

void *sub_1007D9928(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018532F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D995C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018532F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007D9978(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 2;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007D99B8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D99F4()
{
}

void *sub_1007D9A08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9A3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9A58(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9AA0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9ADC()
{
}

void *sub_1007D9AF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018533F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9B24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018533F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9B40(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 8u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9B88(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9BC4()
{
}

void *sub_1007D9BD8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9C0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853470;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9C28(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9C70(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9CAC()
{
}

void *sub_1007D9CC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018534F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9CF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018534F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9D10(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9D58(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9D94()
{
}

void *sub_1007D9DA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9DDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9DF8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9E40(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9E7C()
{
}

void *sub_1007D9E90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018535F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9EC4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018535F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9EE0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007D9F28(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007D9F64()
{
}

void *sub_1007D9F78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007D9FAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853670;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007D9FC8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA010(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA04C()
{
}

void *sub_1007DA060(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018536F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA094(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018536F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DA0B0(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DA110(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA14C()
{
}

void *sub_1007DA160(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA194(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853770;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DA1B0(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DA210(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA24C()
{
}

void *sub_1007DA260(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018537F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA294(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018537F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA2B0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xAu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA2F8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA334()
{
}

void *sub_1007DA348(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA37C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853870;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA398(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA3E0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA41C()
{
}

void *sub_1007DA430(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018538F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA464(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018538F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA480(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA4C8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA504()
{
}

void *sub_1007DA518(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA54C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA568(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA5B0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA5EC()
{
}

void *sub_1007DA600(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018539F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA634(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018539F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA650(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA698(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA6D4()
{
}

void *sub_1007DA6E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA71C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853A70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DA738(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DA778(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA7B4()
{
}

void *sub_1007DA7C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA7FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA818(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA860(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA89C()
{
}

void *sub_1007DA8B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA8E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA900(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DA948(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DA984()
{
}

void *sub_1007DA998(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DA9CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DA9E8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DAA30(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAA6C()
{
}

void *sub_1007DAA80(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAAB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DAAD0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DAB18(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAB54()
{
}

void *sub_1007DAB68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAB9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853CF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DABB8(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DAC18(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAC54()
{
}

void *sub_1007DAC68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAC9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853D70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DACB8(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DAD18(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAD54()
{
}

void *sub_1007DAD68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAD9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853DF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DADB8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xBu;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DAE00(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAE3C()
{
}

void *sub_1007DAE50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAE84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853E70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DAEA0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DAEE8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DAF24()
{
}

void *sub_1007DAF38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DAF6C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DAF88(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DAFD0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB00C()
{
}

void *sub_1007DB020(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB054(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853F70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB070(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB0B8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB0F4()
{
}

void *sub_1007DB108(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101853FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB13C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101853FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB158(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB1A0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB1DC()
{
}

void *sub_1007DB1F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB224(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854070;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DB240(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 0;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DB280(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB2BC()
{
}

void *sub_1007DB2D0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018540F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB304(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018540F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB320(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB368(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB3A4()
{
}

void *sub_1007DB3B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB3EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB408(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB450(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB48C()
{
}

void *sub_1007DB4A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018541F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB4D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018541F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB4F0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB538(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB574()
{
}

void *sub_1007DB588(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB5BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854270;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB5D8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB620(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB65C()
{
}

void *sub_1007DB670(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018542F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB6A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018542F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB6C0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB708(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB744()
{
}

void *sub_1007DB758(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB78C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB7A8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB7F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB82C()
{
}

void *sub_1007DB840(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018543F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB874(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018543F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB890(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB8D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB914()
{
}

void *sub_1007DB928(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DB95C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854470;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DB978(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DB9C0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DB9FC()
{
}

void *sub_1007DBA10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018544F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBA44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018544F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DBA60(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DBAA8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DBAE4()
{
}

void *sub_1007DBAF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBB2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DBB48(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DBB90(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DBBCC()
{
}

void *sub_1007DBBE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018545F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBC14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018545F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DBC30(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DBC78(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DBCB4()
{
}

void *sub_1007DBCC8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBCFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854670;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DBD18(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DBD60(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DBD9C()
{
}

void *sub_1007DBDB0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018546F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBDE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018546F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DBE00(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007DBE80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007DBE94(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DBED0()
{
}

void *sub_1007DBEE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DBF18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854770;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DBF34(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007DBFB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007DBFC8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC004()
{
}

void *sub_1007DC018(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018547F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC04C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018547F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC068(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC0B0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC0EC()
{
}

void *sub_1007DC100(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC134(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854870;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC150(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC198(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC1D4()
{
}

void *sub_1007DC1E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018548F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC21C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018548F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC238(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC280(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC2BC()
{
}

void *sub_1007DC2D0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC304(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC320(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC368(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC3A4()
{
}

void *sub_1007DC3B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018549F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC3EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018549F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC408(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC450(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC48C()
{
}

void *sub_1007DC4A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC4D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854A70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC4F0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC538(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC574()
{
}

void *sub_1007DC588(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC5BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC5D8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC620(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC65C()
{
}

void *sub_1007DC670(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC6A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC6C0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC708(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC744()
{
}

void *sub_1007DC758(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC78C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC7A8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC7F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC82C()
{
}

void *sub_1007DC840(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC874(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC890(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC8D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC914()
{
}

void *sub_1007DC928(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DC95C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854CF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DC978(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DC9C0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DC9FC()
{
}

void *sub_1007DCA10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCA44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DCA60(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DCAA8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCAE4()
{
}

void *sub_1007DCAF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCB2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854DF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DCB48(uint64_t a1, uint64_t a2)
{
  BOOL v3 = v5[6] == 3 && v5[0] > -2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DCB90(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCBCC()
{
}

void *sub_1007DCBE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCC14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854E70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DCC30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DCC70(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCCAC()
{
}

void *sub_1007DCCC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCCF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DCD10(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DCD58(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCD94()
{
}

void *sub_1007DCDA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCDDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854F70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DCDF8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DCE40(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCE7C()
{
}

void *sub_1007DCE90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101854FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCEC4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101854FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DCEE0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DCF28(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DCF64()
{
}

void *sub_1007DCF78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DCFAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855070;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DCFC8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD010(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD04C()
{
}

void *sub_1007DD060(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018550F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD094(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018550F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD0B0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD0F8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD134()
{
}

void *sub_1007DD148(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD17C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855170;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD198(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD1E0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD21C()
{
}

void *sub_1007DD230(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018551F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD264(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018551F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DD280(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DD2C0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD2FC()
{
}

void *sub_1007DD310(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD344(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855270;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD360(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD3A8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD3E4()
{
}

void *sub_1007DD3F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018552F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD42C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018552F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD448(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD490(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD4CC()
{
}

void *sub_1007DD4E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD514(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD530(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD578(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD5B4()
{
}

void *sub_1007DD5C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018553F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD5FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018553F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD618(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD660(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD69C()
{
}

void *sub_1007DD6B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD6E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855470;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD700(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD748(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD784()
{
}

void *sub_1007DD798(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018554F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD7CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018554F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD7E8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD830(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD86C()
{
}

void *sub_1007DD880(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD8B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD8D0(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DD918(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DD954()
{
}

void *sub_1007DD968(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018555F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DD99C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018555F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DD9B8(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DDA00(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDA3C()
{
}

void *sub_1007DDA50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDA84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855670;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DDAA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DDAE0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDB1C()
{
}

void *sub_1007DDB30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018556F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDB64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018556F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DDB80(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DDBC8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDC04()
{
}

void *sub_1007DDC18(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDC4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855770;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DDC68(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DDCB0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDCEC()
{
}

void *sub_1007DDD00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018557F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDD34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018557F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DDD50(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007DDDD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007DDDE4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDE20()
{
}

void *sub_1007DDE34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDE68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855870;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DDE84(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007DDF04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007DDF18(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DDF54()
{
}

void *sub_1007DDF68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018558F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DDF9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018558F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DDFB8(uint64_t a1, uint64_t a2)
{
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1010DD48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }

    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }

    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10043AFF4((uint64_t)&v4);
  return v2 == 6;
}

void sub_1007DE038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007DE04C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE088()
{
}

void *sub_1007DE09C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE0D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855970;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE0EC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE134(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE170()
{
}

void *sub_1007DE184(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018559F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE1B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018559F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE1D4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x13u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE21C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE258()
{
}

void *sub_1007DE26C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE2A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855A70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE2BC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x13u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE304(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE340()
{
}

void *sub_1007DE354(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE388(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE3A4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE3EC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE428()
{
}

void *sub_1007DE43C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE470(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE48C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE4D4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE510()
{
}

void *sub_1007DE524(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE558(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE574(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE5BC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE5F8()
{
}

void *sub_1007DE60C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855C70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE640(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE65C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE6A4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE6E0()
{
}

void *sub_1007DE6F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE728(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855CF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE744(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE78C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE7C8()
{
}

void *sub_1007DE7DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE810(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE82C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE874(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE8B0()
{
}

void *sub_1007DE8C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855DF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE8F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855DF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE914(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DE95C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DE998()
{
}

void *sub_1007DE9AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855E70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DE9E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855E70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DE9FC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DEA44(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEA80()
{
}

void *sub_1007DEA94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DEAC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DEAE4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DEB2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEB68()
{
}

void *sub_1007DEB7C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855F70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DEBB0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855F70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DEBCC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DEC14(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEC50()
{
}

void *sub_1007DEC64(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101855FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DEC98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101855FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DECB4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DECFC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DED38()
{
}

void *sub_1007DED4C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856070;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DED80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856070;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DED9C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DEDE4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEE20()
{
}

void *sub_1007DEE34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018560F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DEE68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018560F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DEE84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 0;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DEEC4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEF00()
{
}

void *sub_1007DEF14(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856170;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DEF48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856170;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DEF64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 0;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DEFA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DEFE0()
{
}

void *sub_1007DEFF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018561F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF028(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018561F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DF044(uint64_t a1, uint64_t a2)
{
  BOOL v2 = v4[6] == 7;
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DF084(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF0C0()
{
}

void *sub_1007DF0D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856270;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF108(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856270;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DF124(uint64_t a1, uint64_t a2)
{
  if (v4[6] == 3) {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DF184(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF1C0()
{
}

void *sub_1007DF1D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018562F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF208(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018562F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF224(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 9u;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF26C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF2A8()
{
}

void *sub_1007DF2BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856370;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF2F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF30C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF354(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF390()
{
}

void *sub_1007DF3A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018563F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF3D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018563F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF3F4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF43C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF478()
{
}

void *sub_1007DF48C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856470;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF4C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856470;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DF4DC(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DF53C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF578()
{
}

void *sub_1007DF58C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018564F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF5C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018564F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF5DC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF624(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF660()
{
}

void *sub_1007DF674(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856570;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF6A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF6C4(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF70C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF748()
{
}

void *sub_1007DF75C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018565F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF790(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018565F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF7AC(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF7F4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF830()
{
}

void *sub_1007DF844(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856670;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF878(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856670;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DF894(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DF8DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DF918()
{
}

void *sub_1007DF92C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018566F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DF960(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018566F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DF97C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DF9DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFA18()
{
}

void *sub_1007DFA2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856770;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFA60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856770;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DFA7C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DFADC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFB18()
{
}

void *sub_1007DFB2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018567F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFB60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018567F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007DFB7C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007DFBC4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFC00()
{
}

void *sub_1007DFC14(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856870;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFC48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856870;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DFC64(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 0LL;
  }
  else {
    BOOL v2 = v5[0] < 0xEu || v5[0] == 100;
  }
  sub_10043AFF4((uint64_t)v5);
  return v2;
}

uint64_t sub_1007DFCBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFCF8()
{
}

void *sub_1007DFD0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018568F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFD40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018568F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DFD5C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DFDBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFDF8()
{
}

void *sub_1007DFE0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856970;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFE40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856970;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DFE5C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DFEBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFEF8()
{
}

void *sub_1007DFF0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018569F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007DFF40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018569F0;
  a2[1] = v2;
  return result;
}

BOOL sub_1007DFF5C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007DFFBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007DFFF8()
{
}

void *sub_1007E000C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1007E0040(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856A70;
  a2[1] = v2;
  return result;
}

BOOL sub_1007E005C(uint64_t a1, uint64_t a2)
{
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0LL;
  }
  sub_10043AFF4((uint64_t)v4);
  return v2;
}

uint64_t sub_1007E00BC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007E00F8()
{
}

void *sub_1007E010C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101856AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1007E0140(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101856AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007E015C(uint64_t a1, uint64_t a2)
{
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_10043AFF4((uint64_t)v5);
  return v3;
}

uint64_t sub_1007E01A4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1007E01E0()
{
}

uint64_t sub_1007E01EC(uint64_t a1, int **a2)
{
  int v6 = 1065353216;
  uint64_t v3 = sub_1007E05FC(*a2, a2[1], (uint64_t)v5);
  if (a2[1] != v3) {
    a2[1] = v3;
  }
  return sub_100019CEC((uint64_t)v5);
}

void sub_1007E026C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_1007E0280(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    __int16 v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_1007E0518(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_1007E05B8((uint64_t)v26, 0LL);
  return i;
}

void sub_1007E0500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_BYTE *sub_1007E0518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    double v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  void v8[5] = 0LL;
  v8[6] = 0LL;
  v8[7] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1007E05A0(_Unwind_Exception *a1)
{
}

void sub_1007E05B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1002E1050((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

int *sub_1007E05FC(int *a1, int *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (1)
  {
    sub_1000B9D1C(a3, v5, v5);
    if ((v6 & 1) == 0) {
      break;
    }
    if (++v5 == a2) {
      return a2;
    }
  }

  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      sub_1000B9D1C(a3, i, i);
      if ((v9 & 1) != 0) {
        *v5++ = *i;
      }
    }
  }

  return v5;
}

NSNumber *sub_1007E0690(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *a2);
}

NSNumber *sub_1007E06A0(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *a2);
}

NSNumber *sub_1007E06B0(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", *a2);
}

NSNumber *sub_1007E06C0(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a2);
}

NSNumber *sub_1007E06D0(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", a1);
}

NSNumber *sub_1007E06E0(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a2);
}

NSNumber *sub_1007E06F4(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *a2);
}

NSString *sub_1007E0704(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  if (v6 >= 0) {
    BOOL v2 = __p;
  }
  else {
    BOOL v2 = (void **)__p[0];
  }
  uint64_t v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1007E0788( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1007E07A4(void *a1)
{
  *a1 = off_1018507E8;
  uint64_t v2 = a1[38];
  a1[38] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[37];
  a1[37] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = a1[36];
  a1[36] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = a1[35];
  a1[35] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = a1[33];
  a1[33] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return sub_1007D2488(a1);
}

uint64_t sub_1007E084C()
{
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1019A1748,  (void *)&_mh_execute_header);
}

double sub_1007E0A58(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = &unk_101337600;
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_101337680;
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = &unk_101337600;
  *(void *)(a1 + 112) = 0LL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_101337680;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = 0x80000000800000LL;
  *(_BYTE *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(void *)(a1 + 220) = 0x6400000000LL;
  *(_WORD *)(a1 + 62_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  return result;
}

uint64_t sub_1007E0AD8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double a5, double a6)
{
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a3 + 136LL))(a3, 100LL, a6 + -12.0);
  double v12 = *(double *)(a2 + 56);
  int v14 = v11;
  *(double *)a1 = v12;
  if (sub_1007E0C00(a1, a2))
  {
    *(double *)(a1 + 632) = a6;
  }

  else
  {
    double v15 = a6 + -6.0;
    else {
      double v16 = *(double *)(a1 + 640);
    }
    int v17 = (*(uint64_t (**)(uint64_t, double))(*(void *)a3 + 128LL))(a3, v15);
    int v18 = (*(uint64_t (**)(uint64_t, double))(*(void *)a3 + 128LL))(a3, v16);
    if ((v14 != 2) == (*(_BYTE *)(a1 + 629) == 0)) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 629) ^= 1u;
    *a4 = v15;
    *(double *)(a1 + 640) = v15;
  }

  return 1LL;
}

uint64_t sub_1007E0C00(uint64_t a1, uint64_t a2)
{
  float v3 = sub_100DEA4AC(v24);
  float v5 = v4;
  float v6 = sub_1007E0EF4((void *)(a1 + 64), 0LL, v3);
  *(float *)(a1 + 72) = v6;
  *(float *)(a1 + 72) = sub_1007E0EF4((void *)(a1 + 64), 1LL, v6);
  float v7 = sub_1007E0EF4((void *)(a1 + 144), 0LL, v5);
  *(float *)(a1 + 152) = v7;
  float v8 = sub_1007E0EF4((void *)(a1 + 144), 1LL, v7);
  *(float *)(a1 + 152) = v8;
  uint64_t v9 = *(void *)(a1 + 16) + 1LL;
  *(void *)(a1 + 16) = v9;
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v9, 1) > 0x1999999999999999uLL) {
    return 0LL;
  }
  float v11 = v8;
  float v12 = sub_1007E0EF4((void *)(a1 + 24), 0LL, *(float *)(a1 + 72));
  *(float *)(a1 + 32) = v12;
  *(float *)(a1 + 32) = sub_1007E0EF4((void *)(a1 + 24), 1LL, v12);
  float v13 = sub_1007E0EF4((void *)(a1 + 104), 0LL, v11);
  *(float *)(a1 + 112) = v13;
  float v14 = sub_1007E0EF4((void *)(a1 + 104), 1LL, v13);
  *(float *)(a1 + 112) = v14;
  uint64_t v15 = *(void *)(a1 + 8);
  else {
    unint64_t v16 = 100LL;
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = v16;
  if (v16 < 0x64) {
    goto LABEL_16;
  }
  float v17 = v14;
  float v18 = *(float *)(a1 + 32);
  float v19 = sqrtf((float)(v17 * v17) + (float)(v18 * v18));
  if (v19 > 0.00000011921)
  {
    float v18 = v18 / v19;
    float v17 = v17 / v19;
  }

  v23[0] = v18;
  v23[1] = v17;
  float v22 = sub_1007E0DE8(a1, v23);
  *(float *)(a1 + 184) = v18;
  *(float *)(a1 + 18_Block_object_dispose(va, 8) = v17;
  sub_1007E0E20(a1 + 192, &v22);
  uint64_t v20 = 0LL;
  float v21 = fabsf(*(float *)(a1 + 204));
  while (v21 > flt_101337700[v20])
  {
    if (++v20 == 16) {
      goto LABEL_15;
    }
  }

  if (v20 < 0xA)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 62_Block_object_dispose(va, 8) = 0;
    goto LABEL_17;
  }

float sub_1007E0DE8(uint64_t a1, float *a2)
{
  float v2 = *(float *)(a1 + 184);
  float v3 = *(float *)(a1 + 188);
  if (v2 == 1.1755e-38 && v3 == 1.1755e-38) {
    return 0.0;
  }
  else {
    return atan2f((float)(v2 * a2[1]) - (float)(v3 * *a2), (float)(a2[1] * v3) + (float)(v2 * *a2));
  }
}

unsigned __int16 *sub_1007E0E20(uint64_t a1, float *a2)
{
  float v3 = (unsigned __int16 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a1 + 30))
  {
    float v4 = *(float *)(a1 + 28 + 4LL * *(unsigned __int16 *)(a1 + 28) + 8);
    float v5 = *(float *)(a1 + 12);
    float v6 = (float)(*a2 - v4) - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v5 + v6;
    *(float *)(a1 + 16) = (float)((float)(v5 + v6) - v5) - v6;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)((float)(v4 + *a2) * (float)(*a2 - v4)) - *(float *)(a1 + 24);
  }

  else
  {
    float v9 = *(float *)(a1 + 12);
    float v10 = *a2 - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v9 + v10;
    *(float *)(a1 + 16) = (float)((float)(v9 + v10) - v9) - v10;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)(*a2 * *a2) - *(float *)(a1 + 24);
  }

  *(float *)(a1 + 20) = v7 + v8;
  *(float *)(a1 + 24) = (float)((float)(v7 + v8) - v7) - v8;
  uint64_t result = sub_1005CAE5C(v3, a2);
  *(_BYTE *)a1 = 1;
  return result;
}

float sub_1007E0EF4(void *a1, uint64_t a2, float a3)
{
  uint64_t v4 = *a1;
  float v3 = (char *)a1 + 12;
  uint64_t v5 = v4 + 8 * a2;
  uint64_t v6 = 3 * a2 + 1;
  float v7 = *(float *)&v3[4 * v6];
  uint64_t v8 = 3 * a2 + 2;
  double v9 = *(float *)&v3[4 * v8];
  float v10 = *(double *)(v4 + 48 + 24 * a2) * a3 * *(double *)(v5 + 96)
      - *(double *)(v4 + 48 + 8 * v6) * v7
      - *(double *)(v4 + 48 + 8 * v8) * v9;
  *(float *)&v3[4 * v8] = v7;
  float result = v11;
  *(float *)&v3[4 * v6] = v10;
  *(_DWORD *)&v3[12 * a2] = 0;
  return result;
}

void sub_1007E1420( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_1007E1694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_1007E1DC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
}

void sub_1007E1ED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E209C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  sub_10068CDBC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1007E2138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E227C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
  if (a30) {
    sub_100607C80(&a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E2550( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void **a23)
{
  a23 = (void **)&a15;
  sub_10068CDBC(&a23);
  _Unwind_Resume(a1);
}

id sub_1007E389C(uint64_t a1, uint64_t a2)
{
  float v3 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  a2,   -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  *(void *)(a1 + 32),  CKCurrentUserDefaultName));
  uint64_t v4 =  -[CKSyncEnginePendingRecordZoneChange initWithRecordID:type:]( objc_alloc(&OBJC_CLASS___CKSyncEnginePendingRecordZoneChange),  "initWithRecordID:type:",  v3,  *(void *)(a1 + 48));

  return [*(id *)(a1 + 40) addObject:v4];
}

void sub_1007E4700( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CKRecord *sub_1007E4CA0(uint64_t a1, void *a2)
{
  return sub_1009EEEDC(*(void *)(*(void *)(a1 + 32) + 16LL), a2);
}

void sub_1007E6EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1007E76C8(id a1, CKRecordZone *a2, unint64_t a3, BOOL *a4)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    float v12 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved zone %{public}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v6 = qword_101934858;
    int v9 = 138543362;
    float v10 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  0LL,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved zone %{public}@",  &v9,  12);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

id sub_1007E788C(uint64_t a1, void *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    id v12 = [a2 zoneName];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted zone ID %{public}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v6 = qword_101934858;
    int v9 = 138543362;
    id v10 = [a2 zoneName];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  0LL,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted zone ID %{public}@",  &v9,  12);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return [*(id *)(a1 + 32) handleZoneDeleted:a2];
}

id sub_1007E7A58(uint64_t a1, void *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138543618;
    id v14 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    __int16 v15 = 2114;
    id v16 = [a2 error];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to save zone changes %{public}@. Error: %{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v6 = qword_101934858;
    int v9 = 138543618;
    id v10 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    __int16 v11 = 2114;
    id v12 = [a2 error];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to save zone changes %{public}@. Error: %{public}@",  &v9,  22);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  id result = objc_msgSend(objc_msgSend(a2, "error"), "code");
  if (result == (id)112) {
    return objc_msgSend(*(id *)(a1 + 32), "deleteZone:", objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"));
  }
  return result;
}

void sub_1007E7C90(id a1, CKRecordZoneID *a2, NSError *a3, BOOL *a4)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 138543618;
    __int16 v15 = -[CKRecordZoneID zoneName](a2, "zoneName");
    __int16 v16 = 2114;
    float v17 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete zone %{public}@. Error: %{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v7 = qword_101934858;
    int v10 = 138543618;
    __int16 v11 = -[CKRecordZoneID zoneName](a2, "zoneName");
    __int16 v12 = 2114;
    float v13 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  17LL,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete zone %{public}@. Error: %{public}@",  &v10,  22);
    int v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

void sub_1007E810C(uint64_t a1, void *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138477827;
    id v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved record %{private}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    int v11 = 138477827;
    __int16 v12 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved record %{private}@",  &v11,  12);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if ([*(id *)(a1 + 32) isCentroidDatabaseValid]
    && (sub_1009EF2B4(*(void *)(*(void *)(a1 + 32) + 16), [a2 recordID], a2) & 1) == 0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for saved record",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for saved record",  &v11,  v10);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_1007E8418(uint64_t a1, void *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138477827;
    id v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted record %{private}@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    int v11 = 138477827;
    __int16 v12 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted record %{private}@",  &v11,  12);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if ([*(id *)(a1 + 32) isCentroidDatabaseValid]
    && (sub_1009EF2B4(*(void *)(*(void *)(a1 + 32) + 16LL), a2, 0LL) & 1) == 0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for failed record",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for failed record",  &v11,  v10);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_1007E8718(uint64_t a1, void *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138478083;
    id v29 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    __int16 v30 = 2114;
    id v31 = [a2 error];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to save record changes %{private}@. Error: %{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v10 = qword_101934858;
    int v24 = 138478083;
    id v25 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    __int16 v26 = 2114;
    id v27 = [a2 error];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to save record changes %{private}@. Error: %{public}@",  &v24,  22);
    __int16 v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  if (CKErrorIsCode([a2 error], 14))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorServerRecordChanged: The record was rejected because the versio n on the server was different",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorServerRecordChanged: The record was rejected because the versio n on the server was different",  &v24,  v23);
      id v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    objc_msgSend( *(id *)(a1 + 32),  "handleServerRecordChanged:",  objc_msgSend( objc_msgSend(objc_msgSend(a2, "error"), "userInfo"),  "objectForKeyedSubscript:",  CKRecordChangedErrorServerRecordKey));
  }

  else if (CKErrorIsCode([a2 error], 11))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorUnknownItem: Record does not exist",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorUnknownItem: Record does not exist",  &v24,  v23);
      __int16 v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "handleUnknownItem:", objc_msgSend(a2, "record"));
  }

  else if (CKErrorIsCode([a2 error], 26))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorZoneNotFound: The specified zone does not exist on the server",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorZoneNotFound: The specified zone does not exist on the server",  &v24,  v23);
      float v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "handleZoneNotFound:", objc_msgSend(a2, "record"));
  }

  else if (CKErrorIsCode([a2 error], 112))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    uint64_t v8 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorPrivateMissingManateeIdentity",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, CKErrorPrivateMissingManateeIdentity",  &v24,  v23);
      uint64_t v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    objc_msgSend( *(id *)(a1 + 32),  "deleteZone:",  objc_msgSend(objc_msgSend(objc_msgSend(a2, "record"), "recordID"), "zoneID"));
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    int v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[CloudKit] WifiAssociatedApCentroidStore, Unhandled error, ignoring failed record",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856C28);
      }
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[CloudKit] WifiAssociatedApCentroidStore, Unhandled error, ignoring failed record",  &v24,  v23);
      float v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

void sub_1007E8FB4(id a1, CKRecordID *a2, NSError *a3, BOOL *a4)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C28);
  }
  uint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138478083;
    id v14 = a2;
    __int16 v15 = 2114;
    __int16 v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete record %{private}@. Error: %{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C28);
    }
    int v9 = 138478083;
    uint64_t v10 = a2;
    __int16 v11 = 2114;
    __int16 v12 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete record %{private}@. Error: %{public}@",  &v9,  22);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_1007EA278(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1007EA2A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1003B3930(a2 + 72);
    operator delete((void *)a2);
  }

void sub_1007EA2F4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1007EA390(_Unwind_Exception *a1)
{
}

void sub_1007EA3A8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1007EA434(_Unwind_Exception *a1)
{
}

uint64_t sub_1007EA44C(uint64_t a1, double a2)
{
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)a1 = _Q1;
  *(void *)(a1 + 24) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = _Q1;
  uint64_t v8 = (void **)(a1 + 40);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 62) = 0LL;
  *(void *)(a1 + 72) = 3LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(double *)(a1 + 16) = a2;
  uint64_t v9 = sub_100B7ECFC();
  sub_100B7ED40(v9, (uint64_t)@"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds", v8);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101856C48);
  }
  uint64_t v10 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)int buf = 134349312;
    uint64_t v23 = v11;
    __int16 v24 = 2050;
    uint64_t v25 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Now watching for deescalation event for background VO2Max estimation; start time: %{public}f, extendAfterHightExer"
      "tionTimeSeconds: %{public}f",
      buf,
      0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101856C48);
    }
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = *(void *)(a1 + 40);
    int v18 = 134349312;
    uint64_t v19 = v14;
    __int16 v20 = 2050;
    uint64_t v21 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Now watching for deescalation event for background VO2Max estimation; start time: %{public}f, extendAfterHightExer"
      "tionTimeSeconds: %{public}f",
      &v18,
      22);
    float v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVO2MaxEstimationDeescalator::CLVO2MaxEstimationDeescalator(CFAbsoluteTime)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return a1;
}

uint64_t sub_1007EA670(uint64_t result, void *a2)
{
  *(void *)(result + 72) = *a2;
  return result;
}

BOOL sub_1007EA67C(double *a1)
{
  if (a1[5] <= 0.0 || CFAbsoluteTimeGetCurrent() - a1[6] >= a1[5]) {
    double v2 = (double)(int)sub_100AD3944();
  }
  else {
    double v2 = a1[5] + (double)(int)sub_100AD3944();
  }
  return CFAbsoluteTimeGetCurrent() - a1[2] > v2;
}

BOOL sub_1007EA6F0(uint64_t a1)
{
  double v2 = *(double *)(a1 + 56);
  double v3 = *(double *)(a1 + 16);
  float v4 = *(float *)(a1 + 64);
  BOOL result = 0;
  if ((sub_100AD3BAC() & 1) == 0)
  {
    double v6 = v2 - v3;
    double v7 = v6 - v4;
    float v8 = (float)(int)sub_100AD38B0();
  }

  return result;
}

uint64_t sub_1007EA77C(uint64_t a1, double *a2)
{
  int v4 = 0;
  if (a2[82] != -1.79769313e308)
  {
    double v5 = a2[92];
    if (v5 > 0.140000001 && v5 <= 2.23693991)
    {
      float v6 = 2.23693991 / v5;
      if (v6 >= 1.0)
      {
        float v7 = (float)((float)(v6 * -0.793) + (float)((float)(v6 * 0.3564) * v6)) + 3.142;
        if (v7 > 8.0) {
          float v7 = 8.0;
        }
        int v4 = v7 > 2.5;
      }

      else
      {
        int v4 = 0;
      }
    }

    v4 |= sub_100AD39F0();
    *(_DWORD *)(a1 + 84) += v4;
  }

  if ((sub_100AD3A84() & 1) != 0) {
    int v8 = 1;
  }
  else {
    int v8 = a2[33] != -1.79769313e308 && a2[30] > 0.349999994;
  }
  *(_DWORD *)(a1 + 80) += v8;
  uint64_t result = sub_100AD3B18();
  if ((result & 1) != 0) {
    int v10 = 1;
  }
  else {
    int v10 = a2[36] != -1.79769313e308 && a2[41] > -1.0;
  }
  int v11 = v4 & v8;
  *(_DWORD *)(a1 + 88) += v10;
  if (!*(_BYTE *)(a1 + 104))
  {
    if ((v11 & v10 & 1) != 0) {
      return result;
    }
    goto LABEL_24;
  }

  if (((v11 ^ 1 | v10) & 1) == 0) {
    ++*(_DWORD *)(a1 + 100);
  }
  if ((v11 & 1) == 0) {
LABEL_24:
  }
    ++*(_DWORD *)(a1 + 92);
  return result;
}

uint64_t sub_1007EA930(uint64_t a1)
{
  if (*(double *)(a1 + 40) > 0.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 48) < *(double *)(a1 + 40))
  {
    else {
      return 0LL;
    }
  }

  int v3 = *(unsigned __int8 *)(a1 + 104);
  BOOL v4 = sub_1007EA67C((double *)a1);
  if (!v3)
  {
    if (!v4)
    {
      if ((sub_100AD3C40() & 1) == 0 && *(void *)(a1 + 72) < 2uLL) {
        return 4294967294LL;
      }
      if (sub_1007EA6F0(a1)) {
        return 4294967293LL;
      }
      goto LABEL_8;
    }

    return 0xFFFFFFFFLL;
  }

  if (v4) {
    return 0xFFFFFFFFLL;
  }
LABEL_8:
  double v5 = (double)*(int *)(a1 + 92) * 2.56;
  float v6 = (float)(int)sub_100AD38B0();
  else {
    return 4294967292LL;
  }
}

void sub_1007EAA10(uint64_t a1, double *a2, char a3)
{
  if (*(double *)(a1 + 24) == -1.0)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_101998AC8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_101998AC8))
    {
      *(void *)int buf = 0x300000008LL;
      *(_DWORD *)&uint8_t buf[8] = 2;
      sub_1002C72A8(qword_101998AB0, buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_1002C7328, qword_101998AB0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101998AC8);
    }

    __int16 v100 = 0;
    *(_OWORD *)double v99 = xmmword_1012E1E90;
    memset(&v99[2], 0, 135);
    __int128 v101 = xmmword_1012E1E90;
    uint64_t v102 = 0LL;
    int v103 = 0;
    v105[0] = 0LL;
    uint64_t v104 = 0LL;
    *(void *)((char *)v105 + 5) = 0LL;
    *(void *)((char *)&v105[1] + 6) = 0LL;
    char v106 = 0;
    memset(&v105[3], 0, 24);
    __int128 v107 = xmmword_1012E1E90;
    uint64_t v108 = 0LL;
    int v109 = 0;
    unint64_t v110 = 0xFFEFFFFFFFFFFFFFLL;
    int v121 = 0;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    int v116 = 0;
    __int128 v117 = 0u;
    __int128 v118 = 0u;
    __int128 v119 = 0u;
    memset(v120, 0, sizeof(v120));
    uint64_t v122 = 0LL;
    uint64_t v123 = 0LL;
    unint64_t v124 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v125 = 0LL;
    int v126 = 0;
    uint64_t v132 = 0LL;
    __int16 v133 = 0;
    int v138 = 0;
    int v131 = 0;
    __int128 v130 = 0u;
    __int128 v129 = 0u;
    __int128 v128 = 0u;
    __int128 v127 = 0u;
    __int128 v135 = 0u;
    __int128 v134 = 0u;
    char v136 = 0;
    memset(v137, 0, sizeof(v137));
    unint64_t v139 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v158 = 0u;
    __int128 v157 = 0u;
    __int128 v156 = 0u;
    __int128 v155 = 0u;
    __int128 v154 = 0u;
    __int128 v153 = 0u;
    __int128 v152 = 0u;
    __int128 v151 = 0u;
    __int128 v150 = 0u;
    __int128 v149 = 0u;
    __int128 v148 = 0u;
    __int128 v147 = 0u;
    __int128 v146 = 0u;
    __int128 v145 = 0u;
    __int128 v144 = 0u;
    __int128 v143 = 0u;
    __int128 v142 = 0u;
    __int128 v141 = 0u;
    __int128 v140 = 0u;
    uint64_t v159 = 0LL;
    unint64_t v160 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v161 = 0u;
    __int128 v162 = 0u;
    __int128 v163 = 0u;
    __int128 v164 = 0u;
    unint64_t v165 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v166 = 0LL;
    int v167 = 0;
    uint64_t v168 = 0LL;
    char v169 = 0;
    unint64_t v170 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v172 = 0LL;
    uint64_t v171 = 0LL;
    uint64_t v173 = 0x80000000800000LL;
    uint64_t v175 = 0LL;
    uint64_t v174 = 0LL;
    __int128 v176 = xmmword_1012E1EA0;
    uint64_t v177 = 0x80000000800000LL;
    __int128 v178 = 0u;
    __int128 v179 = 0u;
    uint64_t v180 = 0LL;
    unint64_t v181 = 0xFFEFFFFFFFFFFFFFLL;
    __int128 v182 = 0u;
    __int128 v183 = 0u;
    __int128 v184 = 0u;
    __int128 v185 = 0u;
    __int128 v186 = 0u;
    __int128 v187 = 0u;
    int v188 = 0;
    unint64_t v189 = 0xFFEFFFFFFFFFFFFFLL;
    __int16 v190 = 0;
    int v191 = 0;
    unint64_t v192 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v193 = 7LL;
    unint64_t v194 = 0xFFEFFFFFFFFFFFFFLL;
    char v195 = 0;
    uint64_t v197 = 0LL;
    uint64_t v196 = 0LL;
    uint64_t v198 = 0LL;
    sub_100CDB578(a2, qword_101998AB0, (uint64_t)v99);
    *(_BYTE *)(a1 + 104) = a3;
    sub_1007EA77C(a1, (double *)v99);
    int v7 = sub_1007EA930(a1);
    if (v7)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101856C48);
      }
      int v8 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        double v10 = *(double *)(a1 + 16);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 72);
        double v14 = *(double *)(a1 + 56) - v10;
        double v15 = v14 - *(float *)(a1 + 64);
        int v16 = *(unsigned __int8 *)(a1 + 68);
        int v17 = *(_DWORD *)(a1 + 96);
        int v18 = *(_DWORD *)(a1 + 100);
        int v19 = v17 - *(_DWORD *)(a1 + 80);
        int v20 = v17 - *(_DWORD *)(a1 + 84);
        int v21 = *(_DWORD *)(a1 + 92);
        int v22 = v17 - *(_DWORD *)(a1 + 88);
        *(_DWORD *)int buf = 67243776;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(CFAbsoluteTime *)&buf[10] = Current;
        *(_WORD *)&_BYTE buf[18] = 2050;
        *(double *)&buf[20] = v10;
        __int16 v75 = 2050;
        uint64_t v76 = v11;
        __int16 v77 = 2050;
        uint64_t v78 = v12;
        __int16 v79 = 1026;
        int v80 = v13;
        __int16 v81 = 2050;
        double v82 = v14;
        __int16 v83 = 2050;
        double v84 = v15;
        __int16 v85 = 1026;
        int v86 = v16;
        __int16 v87 = 1026;
        int v88 = v17;
        __int16 v89 = 1026;
        int v90 = v19;
        __int16 v91 = 1026;
        int v92 = v20;
        __int16 v93 = 1026;
        int v94 = v22;
        __int16 v95 = 1026;
        int v96 = v21;
        __int16 v97 = 1026;
        int v98 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "VO2MaxBackgroundEstimationDeescalation,reason,%{public}d,timestamp,%{public}f,deescalatorStartTime,%{public}f, timeToExtendAfterHighExertion,%{public}f,lastTimeHRMetExertionThreshold,%{public}f,locationType,%{public}d,ses sionStatsDuration,%{public}f,sessionStatsBadSeconds,%{public}f,sessionStatsPreconditionFailed,%{public}d,pairS tatsTotalSamples,%{public}d,pairStatsBadHR,%{public}d,pairStatsBadWR,%{public}d,pairStatsBadGPS,%{public}d,pai rStatsBadSamples,%{public}d,pairStatsExtraSamplesFromRelaxedDeescalationRules,%{public}d",  buf,  0x74u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101856C48);
        }
        uint64_t v31 = qword_101934688;
        CFAbsoluteTime v32 = CFAbsoluteTimeGetCurrent();
        double v33 = *(double *)(a1 + 16);
        uint64_t v34 = *(void *)(a1 + 40);
        uint64_t v35 = *(void *)(a1 + 48);
        uint64_t v36 = *(void *)(a1 + 72);
        double v37 = *(double *)(a1 + 56) - v33;
        double v38 = v37 - *(float *)(a1 + 64);
        int v39 = *(unsigned __int8 *)(a1 + 68);
        int v40 = *(_DWORD *)(a1 + 96);
        int v41 = *(_DWORD *)(a1 + 100);
        int v42 = v40 - *(_DWORD *)(a1 + 80);
        int v43 = v40 - *(_DWORD *)(a1 + 84);
        int v44 = *(_DWORD *)(a1 + 92);
        int v45 = v40 - *(_DWORD *)(a1 + 88);
        int v48 = 67243776;
        *(_DWORD *)uint64_t v49 = v7;
        *(_WORD *)&v49[4] = 2050;
        *(CFAbsoluteTime *)&v49[6] = v32;
        *(_WORD *)&v49[14] = 2050;
        *(double *)&v49[16] = v33;
        __int16 v50 = 2050;
        uint64_t v51 = v34;
        __int16 v52 = 2050;
        uint64_t v53 = v35;
        __int16 v54 = 1026;
        int v55 = v36;
        __int16 v56 = 2050;
        double v57 = v37;
        __int16 v58 = 2050;
        double v59 = v38;
        __int16 v60 = 1026;
        int v61 = v39;
        __int16 v62 = 1026;
        int v63 = v40;
        __int16 v64 = 1026;
        int v65 = v42;
        __int16 v66 = 1026;
        int v67 = v43;
        __int16 v68 = 1026;
        int v69 = v45;
        __int16 v70 = 1026;
        int v71 = v44;
        __int16 v72 = 1026;
        int v73 = v41;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v31,  0LL,  "VO2MaxBackgroundEstimationDeescalation,reason,%{public}d,timestamp,%{public}f,deescalatorStartTi me,%{public}f,timeToExtendAfterHighExertion,%{public}f,lastTimeHRMetExertionThreshold,%{public}f ,locationType,%{public}d,sessionStatsDuration,%{public}f,sessionStatsBadSeconds,%{public}f,sessi onStatsPreconditionFailed,%{public}d,pairStatsTotalSamples,%{public}d,pairStatsBadHR,%{public}d, pairStatsBadWR,%{public}d,pairStatsBadGPS,%{public}d,pairStatsBadSamples,%{public}d,pairStatsExt raSamplesFromRelaxedDeescalationRules,%{public}d",  &v48,  116);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)",  "%s\n",  v46);
        if (v46 != buf) {
          free(v46);
        }
      }

      double v23 = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 24) = v23;
      if (*(double *)(a1 + 40) > 0.0)
      {
        double v24 = *(double *)(a1 + 48);
        if (v24 > 0.0 && v24 < v23)
        {
          *(double *)a1 = v24;
          *(double *)(a1 + _Block_object_dispose(va, 8) = v23;
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101856C48);
          }
          uint64_t v25 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
          {
            double v26 = *(double *)a1;
            uint64_t v27 = *(void *)(a1 + 8);
            *(_DWORD *)int buf = 134349312;
            *(double *)&uint8_t buf[4] = v26;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(void *)&buf[14] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "VO2Max Background Escalation, HRRecovery startTime,%{public}f,endTime,%{public}f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_101856C48);
            }
            double v28 = *(double *)a1;
            uint64_t v29 = *(void *)(a1 + 8);
            int v48 = 134349312;
            *(double *)uint64_t v49 = v28;
            *(_WORD *)&v49[8] = 2050;
            *(void *)&v49[10] = v29;
            LODWORD(v47) = 22;
            __int16 v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "VO2Max Background Escalation, HRRecovery startTime,%{public}f,endTime,%{public}f",  &v48,  v47);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)",  "%s\n",  v30);
            if (v30 != buf) {
              free(v30);
            }
          }
        }
      }
    }
  }

void sub_1007EB19C(_Unwind_Exception *a1)
{
}

BOOL sub_1007EB1BC(uint64_t a1, uint64_t *a2)
{
  *a2 = sub_1007EB1F8(a1, *(_DWORD *)(a1 + 32));
  return *(double *)(a1 + 24) != -1.0;
}

uint64_t sub_1007EB1F8(uint64_t a1, int a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101856C48);
  }
  BOOL v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 67240192;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Unexpected DeescalationReason value: %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101856C48);
    }
    v6[0] = 67240192;
    v6[1] = a2;
    double v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Unexpected DeescalationReason value: %{public}d",  v6,  8);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMActivityReason CLVO2MaxEstimationDeescalator::getActivityReasonFromDeescalationReason(CLVO2MaxEstimationDeescala tor::DeescalationReason) const",  "%s\n",  v5);
  }

  return 0LL;
}

void sub_1007EB3BC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 16);
  double v6 = *(double *)a2;
  float v7 = *(float *)(a2 + 8);
  if (*(_BYTE *)(a2 + 13)) {
    *(double *)(a1 + 4_Block_object_dispose(va, 8) = v6;
  }
  double v8 = v6 - v5;
  double v9 = v7;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101856C48);
  }
  double v10 = Current - v5;
  uint64_t v11 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    double v12 = *(float *)(a2 + 8);
    int v13 = *(unsigned __int8 *)(a2 + 12);
    int v14 = *(unsigned __int8 *)(a2 + 13);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_DWORD *)int buf = 134285057;
    double v36 = v8;
    __int16 v37 = 2049;
    double v38 = v12;
    __int16 v39 = 2049;
    double v40 = v8 - v9;
    __int16 v41 = 2049;
    double v42 = v10;
    __int16 v43 = 1025;
    int v44 = v13;
    __int16 v45 = 1025;
    int v46 = v14;
    __int16 v47 = 2049;
    uint64_t v48 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "VO2SessionStatus,duration,%{private}.3f,totalGoodSeconds,%{private}.3f,totalBadSeconds,%{private}.3f,timeElapsed,% {private}.3f,preConditionFailed,%{private}d,lastHRMetExertionThreshold,%{private}d,lastTimeHRMetExertionThreshold,%{private}f",  buf,  0x40u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101856C48);
    }
    double v16 = *(float *)(a2 + 8);
    int v17 = *(unsigned __int8 *)(a2 + 12);
    int v18 = *(unsigned __int8 *)(a2 + 13);
    uint64_t v19 = *(void *)(a1 + 48);
    int v21 = 134285057;
    double v22 = v8;
    __int16 v23 = 2049;
    double v24 = v16;
    __int16 v25 = 2049;
    double v26 = v8 - v9;
    __int16 v27 = 2049;
    double v28 = v10;
    __int16 v29 = 1025;
    int v30 = v17;
    __int16 v31 = 1025;
    int v32 = v18;
    __int16 v33 = 2049;
    uint64_t v34 = v19;
    int v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "VO2SessionStatus,duration,%{private}.3f,totalGoodSeconds,%{private}.3f,totalBadSeconds,%{private}.3f ,timeElapsed,%{private}.3f,preConditionFailed,%{private}d,lastHRMetExertionThreshold,%{private}d,las tTimeHRMetExertionThreshold,%{private}f",  &v21,  64);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimationDeescalator::feedVO2MaxSessionStats(const VO2MaxSessionStats &)",  "%s\n",  v20);
  }

void sub_1007EB648(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

NSDictionary *sub_1007EB674()
{
  v1[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1018D6D90;
  v1[1] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1018D6DA8;
  v1[2] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1018D6DC0;
  v1[3] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1018D6DD8;
  v1[4] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1018D6DF0;
  _OWORD v1[5] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1018D6E08;
  v1[6] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1018D6E20;
  uint64_t result = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  7LL);
  qword_101998AA8 = (uint64_t)result;
  return result;
}

void *sub_1007EB7C4(std::string *a1)
{
  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_15;
    }
    if (size != 12) {
      goto LABEL_17;
    }
    uint64_t v2 = a1->__r_.__value_.__r.__words[0];
  }

  else
  {
    uint64_t v2 = (uint64_t)a1;
    if (a1->__r_.__value_.__s.__size_ != 12)
    {
      if (a1->__r_.__value_.__s.__size_)
      {
LABEL_17:
        sub_1010DDBC0(v9, "size");
        uint64_t v7 = sub_1007EB9E0((uint64_t *)v9, (uint64_t *)a1);
LABEL_19:
        double v5 = (void *)v7;
        goto LABEL_20;
      }

void sub_1007EB994( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_1007EB9E0(uint64_t *a1, uint64_t *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101856C88);
  }
  BOOL v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    else {
      double v5 = (uint64_t *)*a1;
    }
    else {
      uint64_t v6 = (uint64_t *)*a2;
    }
    *(_DWORD *)int buf = 136446467;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v17 = 2081;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#Warning malformed mac address error, %{public}s, %{private}s",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856C88);
    }
    else {
      double v9 = (uint64_t *)*a1;
    }
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    int v12 = 136446467;
    uint64_t v13 = v9;
    __int16 v14 = 2081;
    char v15 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "#Warning malformed mac address error, %{public}s, %{private}s",  &v12,  22);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static CLMacAddress CLMacAddress::newFromMalformedMac(const std::string &, const std::string &)",  "%s\n",  v11);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_1010DDBC0(buf, "ff:ff:ff:ff:ff:ff");
  uint64_t v7 = sub_1007EBE44((uint64_t *)buf);
  if (v19 < 0) {
    operator delete(*(void **)buf);
  }
  return v7;
}

void sub_1007EBC14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EBC38(char *a1)
{
  if (a1[23] < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      memset(&__str, 0, sizeof(__str));
      int v3 = *(char **)a1;
      goto LABEL_6;
    }

    goto LABEL_17;
  }

  uint64_t v2 = a1[23];
  if (!a1[23])
  {
LABEL_17:
    sub_1010DDBC0(&__str, "empty");
    sub_1010DDBC0(&__p, " ");
    uint64_t v10 = sub_1007EB9E0((uint64_t *)&__str, (uint64_t *)&__p);
    goto LABEL_29;
  }

  memset(&__str, 0, sizeof(__str));
  int v3 = a1;
  do
  {
LABEL_6:
    __darwin_ct_rune_t v4 = *v3;
    if (v4 < 0 || (_DefaultRuneLocale.__runetype[v4] & 0x10000) == 0)
    {
      sub_1010DDBC0(&__p, "nonhex");
      uint64_t v10 = sub_1007EB9E0((uint64_t *)&__p, (uint64_t *)a1);
      goto LABEL_29;
    }

    std::string::value_type v5 = __tolower(v4);
    std::string::push_back(&__str, v5);
    ++v3;
    --v2;
  }

  while (v2);
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  std::string::size_type v7 = __str.__r_.__value_.__s.__size_;
  memset(&__p, 0, sizeof(__p));
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v7 = __str.__r_.__value_.__l.__size_;
  }
  if (v7 > 0xB)
  {
    std::string::operator=(&__p, &__str);
  }

  else
  {
    BOOL v8 = (__str.__r_.__value_.__s.__size_ & 0x80u) != 0;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __str.__r_.__value_.__s.__size_;
    }
    if (size == 12)
    {
      std::string::size_type v9 = 12LL;
    }

    else
    {
      unint64_t v11 = 0LL;
      do
      {
        std::string::push_back(&__p, 48);
        ++v11;
        BOOL v8 = (__str.__r_.__value_.__s.__size_ & 0x80u) != 0;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v9 = __str.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
        }
      }

      while (12 - v9 > v11);
    }

    if (v8) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else {
      p_str = &__str;
    }
    std::string::append(&__p, (const std::string::value_type *)p_str, v9);
  }

  uint64_t v10 = (uint64_t)sub_1007EB7C4(&__p);
LABEL_29:
  uint64_t v13 = v10;
  return v13;
}

void sub_1007EBDFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EBE44(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      int v3 = (uint64_t *)*a1;
      goto LABEL_6;
    }

void sub_1007EBFE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1007EC028(unsigned __int8 *a1)
{
  return bswap32(*(_DWORD *)(a1 + 2)) | ((unint64_t)a1[1] << 32) | ((unint64_t)*a1 << 40);
}

uint64_t sub_1007EC044()
{
  uint64_t v0 = sub_1007EBE44((uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return v0;
}

void sub_1007EC094( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007EC0B0(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_1007EC0C4(void *a1, void *a2)
{
  return *a1 != *a2;
}

BOOL sub_1007EC0D8(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1007EC0EC(void *a1, void *a2)
{
  return *a1 <= *a2;
}

BOOL sub_1007EC100(void *a1, void *a2)
{
  return *a1 > *a2;
}

BOOL sub_1007EC114()
{
  if ((char)v4.__r_.__value_.__s.__size_ < 0)
  {
    BOOL v1 = v4.__r_.__value_.__l.__size_ == 12
      && *(void *)v4.__r_.__value_.__l.__data_ == 0x6666666666666666LL
      && *(_DWORD *)(v4.__r_.__value_.__r.__words[0] + 8) == 1717986918;
    operator delete(v4.__r_.__value_.__l.__data_);
  }

  else
  {
    return v4.__r_.__value_.__s.__size_ == 12
        && v4.__r_.__value_.__r.__words[0] == 0x6666666666666666LL
        && LODWORD(v4.__r_.__value_.__r.__words[1]) == 1717986918;
  }

  return v1;
}

uint64_t sub_1007EC1AC@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  char v6 = 48;
  uint64_t v2 = sub_1007EC2C0(&v8, &v6);
  uint64_t v3 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 - 24) + 24) = 12LL;
  *(_DWORD *)((char *)v2 + *(void *)(v3 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v2 + *(void *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str(a1, &v9);
  *(void *)((char *)v7
  uint64_t v8 = v4;
  std::streambuf::~streambuf(&v9);
  return std::ios::~ios(&v10);
}

void sub_1007EC2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1007EC2C0(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    uint64_t v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1007EC34C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1007EC360(std::string *a1@<X8>)
{
  std::string::size_type v2 = 0LL;
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  while (1)
  {
    signed __int8 size = __p.__r_.__value_.__s.__size_;
    if (v2 >= __p.__r_.__value_.__s.__size_) {
      return;
    }
LABEL_6:
    if (v2)
    {
      std::string::push_back(a1, 58);
      signed __int8 size = __p.__r_.__value_.__s.__size_;
    }

    if (size >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::push_back(a1, p_p->__r_.__value_.__s.__data_[v2]);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v5 = &__p;
    }
    else {
      uint64_t v5 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::push_back(a1, v5->__r_.__value_.__s.__data_[v2 + 1]);
    v2 += 2LL;
  }

  if (v2 < __p.__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1007EC428( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007EC454(std::string *a1@<X8>)
{
  std::string::size_type v2 = 0LL;
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  while (1)
  {
    signed __int8 size = __p.__r_.__value_.__s.__size_;
    if (v2 >= __p.__r_.__value_.__s.__size_) {
      return;
    }
LABEL_6:
    if (v2)
    {
      std::string::push_back(a1, 58);
      signed __int8 size = __p.__r_.__value_.__s.__size_;
    }

    std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
    if (size >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    int v6 = p_p->__r_.__value_.__s.__data_[v2];
    if (v6 != 48)
    {
      std::string::push_back(a1, v6);
      signed __int8 size = __p.__r_.__value_.__s.__size_;
      std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
    }

    if (size >= 0) {
      int v7 = &__p;
    }
    else {
      int v7 = (std::stringbuf::string_type *)v4;
    }
    std::string::push_back(a1, v7->__r_.__value_.__s.__data_[v2 + 1]);
    v2 += 2LL;
  }

  if (v2 < __p.__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1007EC52C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007EC558(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1007EC584()
{
  HIBYTE(v20) = 0;
  sub_1002F0B04(&buf);
  int v0 = sub_1002A6F64(buf, "iCloudSharingEnabled", (BOOL *)&v20 + 7);
  BOOL v1 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    std::string::size_type v2 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856CA8);
    }
    std::string::size_type v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      if (HIBYTE(v20)) {
        uint64_t v5 = "true";
      }
      else {
        uint64_t v5 = "false";
      }
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWifi1Settings, #Warning defaults write iCloudSharingEnabled to %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856CA8);
      }
      if (HIBYTE(v20)) {
        uint64_t v15 = "true";
      }
      else {
        uint64_t v15 = "false";
      }
      *(_DWORD *)int v21 = 136380675;
      *(void *)&v21[4] = v15;
      LODWORD(v20) = 12;
      char v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CLWifi1Settings, #Warning defaults write iCloudSharingEnabled to %{private}s",  v21,  v20);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()",  "%s\n",  v16);
    }

    int v6 = (unsigned __int8 *)&v20 + 7;
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101856CA8);
    }
    int v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004F2598();
      sub_1004F5420(&buf);
      std::locale v8 = v26 >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)int v21 = 136446210;
      *(void *)&v21[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLWifi1Settings, system version: %{public}s",  v21,  0xCu);
      if (v26 < 0) {
        operator delete((void *)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101856CA8);
      }
      uint64_t v17 = qword_101934858;
      sub_1004F2598();
      sub_1004F5420(v21);
      if (v22 >= 0) {
        int v18 = v21;
      }
      else {
        int v18 = *(_BYTE **)v21;
      }
      int v23 = 136446210;
      double v24 = v18;
      LODWORD(v20) = 12;
      char v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v17,  0LL,  "CLWifi1Settings, system version: %{public}s",  &v23,  v20);
      if (v22 < 0) {
        operator delete(*(void **)v21);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()",  "%s\n",  v19);
    }

    sub_1004F2598();
    if (sub_1004F7000())
    {
      int v6 = (unsigned __int8 *)sub_100F4BF44() + 93;
    }

    else
    {
      sub_1004F2598();
      if (sub_1001B9A1C())
      {
        int v6 = (unsigned __int8 *)sub_100F4BF44() + 96;
      }

      else
      {
        sub_1004F2598();
        int v10 = sub_1004F75F8();
        sub_1004F2598();
        if (v10)
        {
          int v11 = sub_1004F6DCC();
          int v12 = (char *)sub_100F4BF44();
          if (v11) {
            int v6 = (unsigned __int8 *)(v12 + 94);
          }
          else {
            int v6 = (unsigned __int8 *)(v12 + 95);
          }
        }

        else if (sub_1004F7858())
        {
          int v6 = (unsigned __int8 *)sub_100F4BF44() + 98;
        }

        else
        {
          sub_1004F2598();
          int v13 = sub_1004F7968();
          char v14 = (char *)sub_100F4BF44();
          if (v13) {
            int v6 = (unsigned __int8 *)(v14 + 99);
          }
          else {
            int v6 = (unsigned __int8 *)(v14 + 100);
          }
        }
      }
    }
  }

  return *v6;
}

void sub_1007ECA04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1007ECA20(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1007ECA4C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      BOOL v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)BOOL v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1007ECAE8(_Unwind_Exception *a1)
{
}

void sub_1007ECB00()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      BOOL v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *BOOL v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1007ECB8C(_Unwind_Exception *a1)
{
}

id sub_1007ECE30(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) onGeoCountryCodeChangeNotification:a2 andMonitorRegion:*(void *)(a1 + 40)];
}

void sub_1007ED1BC(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1007ED1E8(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  if (!*(void *)(a1 + 48))
  {
    sub_100F1B460((uint64_t)sub_1007ED26C, a1, *(void **)(a1 + 8), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_1007ED26C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101856D70);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    std::locale v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLRangingSubscription::onBTLERangeNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101856D70);
    }
    std::stringbuf v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLRangingSubscription::onBTLERangeNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1007EFE24(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007ED424( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1007ED444@<X0>(uint64_t a1@<X8>)
{
  v6[0] = &off_101856DE0;
  v6[1] = sub_1007ED5A0;
  _OWORD v6[2] = 0LL;
  uint64_t v7 = v6;
  sub_1010DDBC0(__p, "kCLConnectionMessageRanging");
  sub_1007F0C00((uint64_t)v10, (uint64_t)v6);
  sub_1007F10F0(a1, (unsigned __int8 *)__p, 1LL);
  std::string::size_type v2 = v11;
  if (v11 == v10)
  {
    uint64_t v3 = 4LL;
    std::string::size_type v2 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1007ED554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  __int16 v14 = a12;
  if (a12 == &a9)
  {
    uint64_t v15 = 4LL;
    __int16 v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1007ED5A0(uint64_t a1, int a2, uint64_t a3)
{
  __int16 v43 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1007F18B8(v54, a1 + 56);
  sub_100527C80(a1 + 56, *(void **)(a1 + 64));
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_1010DDBC0(v52, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
  int v5 = sub_1002AF124(a3, "kCLConnectionMessageRegionsKey");
  if (v5 < 1)
  {
LABEL_76:
    sub_1007EF6DC(a1);
    if (sub_100C6AC8C(a1))
    {
      sub_1007EF184(a1);
      sub_100C6ACDC(a1);
    }

    else if (a2)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      char v26 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Unable to subscribe to ranging.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        LOWORD(v56) = 0;
        LODWORD(v41) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#Warning Unable to subscribe to ranging.",  &v56,  v41);
        __int16 v39 = (char *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

      *(void *)__int128 buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0LL;
      sub_1007EFD30((uint64_t)v54, (void *)(a1 + 56), (uint64_t *)buf);
      for (uint64_t i = *(void *)&buf[8]; (_BYTE *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        sub_1002A5370(&v56);
        sub_1007EFB28(i + 16, (uint64_t)&v56);
        v50.__r_.__value_.__r.__words[0] = 1LL;
        sub_1002AC4EC((uint64_t)&v56, "kCLConnectionMessageErrorKey", &v50);
        v50.__r_.__value_.__r.__words[0] = sub_1002A59CC((uint64_t)&v56);
        sub_1007EFC88(a1, &v50);
        sub_1002A5590(&v56);
      }

      sub_100527B44((uint64_t *)buf);
    }

    goto LABEL_129;
  }

  int v6 = 0;
  while (1)
  {
    sub_1002A5370(v51);
    if (!sub_1002A8F8C(a3, "kCLConnectionMessageRegionsKey", v51))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      uint64_t v15 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Unable to parse ranged region,%{public}d.",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        int v56 = 67240192;
        *(_DWORD *)double v57 = v6;
        LODWORD(v41) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Unable to parse ranged region,%{public}d.",  &v56,  v41);
        uint64_t v17 = (char *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      goto LABEL_68;
    }

    memset(&v50, 0, sizeof(v50));
    sub_1002A8560((uint64_t)v51, "kCLConnectionMessageIdentifierKey", &v50);
    memset(&__p, 0, sizeof(__p));
    sub_1002A8560((uint64_t)v51, "kCLConnectionMessageOnBehalfOfKey", &__p);
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      std::locale v8 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        char v9 = v52;
        if (v53 < 0) {
          char v9 = (void **)v52[0];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Client %{public}s is attempting ranging as a proxy service to %{public}s",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        char v11 = v52;
        if (v53 < 0) {
          char v11 = (void **)v52[0];
        }
        int v12 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v56 = 136446466;
        *(void *)double v57 = v11;
        *(_WORD *)&v57[8] = 2082;
        *(void *)&v57[10] = v12;
        LODWORD(v41) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Client %{public}s is attempting ranging as a proxy service to %{public}s",  &v56,  v41);
        __int16 v14 = (char *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }

      goto LABEL_64;
    }

    sub_100271AF0((uint64_t)&v56, (__int128 *)v52, (__int128 *)&v50, (__int128 *)&__p);
    sub_1002A7CB0((uint64_t)v51, "kCLConnectionMessageRegionDefinitionKey", (_DWORD *)v59 + 1);
    sub_1002A8560((uint64_t)v51, "kCLConnectionMessageProximityUUIDKey", (std::string *)&v57[4]);
    sub_1002A7208((uint64_t)v51, "kCLConnectionMessageMajorKey", v59);
    sub_1002A7208((uint64_t)v51, "kCLConnectionMessageMinorKey", (_WORD *)v59 + 1);
    if ((sub_1002A6F64(a3, "kCLConnectionMessageNotifyOnEntryKey", &v48) & 1) == 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      double v28 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        *(_DWORD *)int v55 = 136446210;
        *(void *)&v55[4] = "kCLConnectionMessageNotifyOnEntryKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Couldn't get value for key %{public}s",  v55,  v41);
        int v30 = (char *)v29;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v29);
        goto LABEL_139;
      }

      goto LABEL_124;
    }

    if ((sub_1002A6F64(a3, "kCLConnectionMessageNotifyOnExitKey", &v47) & 1) == 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      __int16 v31 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnExitKey";
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        *(_DWORD *)int v55 = 136446210;
        *(void *)&v55[4] = "kCLConnectionMessageNotifyOnExitKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Couldn't get value for key %{public}s",  v55,  v41);
        int v30 = (char *)v32;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v32);
        goto LABEL_139;
      }

      goto LABEL_124;
    }

    if ((sub_1002A6F64(a3, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v46) & 1) == 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      __int16 v33 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        *(_DWORD *)int v55 = 136446210;
        *(void *)&v55[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Couldn't get value for key %{public}s",  v55,  v41);
        int v30 = (char *)v34;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v34);
        goto LABEL_139;
      }

      goto LABEL_124;
    }

    if ((sub_1002A6F64(a3, "kCLConnectionMessageConservativeEntry", &v45) & 1) == 0) {
      break;
    }
    if ((sub_1002A6F64(a3, "kCLConnectionMessageEmergencyKey", &v44) & 1) == 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      __int16 v37 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEmergencyKey";
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_124;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      *(_DWORD *)int v55 = 136446210;
      *(void *)&v55[4] = "kCLConnectionMessageEmergencyKey";
      LODWORD(v41) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Couldn't get value for key %{public}s",  v55,  v41);
      int v30 = (char *)v40;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v40);
LABEL_139:
      if (v30 != buf) {
        free(v30);
      }
      goto LABEL_124;
    }

    if (v48) {
      v60 |= 1u;
    }
    if (v47) {
      v60 |= 2u;
    }
    if (v46) {
      v60 |= 4u;
    }
    if (v45) {
      v60 |= 8u;
    }
    if (!HIDWORD(v59[0]))
    {
      sub_1010DDBC0(buf, "com.apple.locationd.ranging");
      char v18 = sub_100C6AC9C(a1);
      char v19 = v18;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if ((v19 & 1) == 0)
        {
LABEL_55:
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101856D90);
          }
          int v21 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
          {
            char v22 = &v50;
            if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              char v22 = (std::string *)v50.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)__int128 buf = 136446210;
            *(void *)&uint8_t buf[4] = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "Ranging any region,%{public}s, requires an entitlement.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101856D90);
            }
            int v23 = &v50;
            if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int v55 = 136446210;
            *(void *)&v55[4] = v23;
            LODWORD(v41) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Ranging any region,%{public}s, requires an entitlement.",  v55,  v41);
            __int16 v25 = (char *)v24;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v24);
            if (v25 != buf) {
              free(v25);
            }
          }

          sub_1002A5370(buf);
          sub_1007EFB28((uint64_t)&v56, (uint64_t)buf);
          *(void *)int v55 = 1LL;
          sub_1002AC4EC((uint64_t)buf, "kCLConnectionMessageErrorKey", v55);
          *(void *)int v55 = sub_1002A59CC((uint64_t)buf);
          sub_1007EFC88(a1, v55);
          sub_1002A5590(buf);
          goto LABEL_63;
        }
      }

      else if ((v18 & 1) == 0)
      {
        goto LABEL_55;
      }
    }

    *(void *)__int128 buf = &off_10182CE18;
    if (SHIBYTE(v58) < 0)
    {
      sub_1010DD48C(&buf[8], *(void **)&v57[4], *(unint64_t *)&v57[12]);
    }

    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&v57[4];
      uint64_t v62 = v58;
    }

    uint64_t v63 = v59[0];
    *(void *)int v55 = buf;
    uint64_t v20 = sub_1007F1F90((uint64_t **)(a1 + 56), (uint64_t)buf, (uint64_t)&unk_1012CF090, (uint64_t *)v55);
    sub_1005293EC((uint64_t **)v20 + 9, (uint64_t)&v56, (uint64_t)&v56);
    *(void *)__int128 buf = &off_10182CE18;
    if (SHIBYTE(v62) < 0) {
      operator delete(*(void **)&buf[8]);
    }
LABEL_63:
    sub_1002722AC((uint64_t)&v56);
LABEL_64:
LABEL_68:
    sub_1002A5590(v51);
    if (v5 == ++v6) {
      goto LABEL_76;
    }
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101856D90);
  }
  uint64_t v35 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "kCLConnectionMessageConservativeEntry";
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101856D90);
    }
    *(_DWORD *)int v55 = 136446210;
    *(void *)&v55[4] = "kCLConnectionMessageConservativeEntry";
    LODWORD(v41) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Couldn't get value for key %{public}s",  v55,  v41);
    int v30 = (char *)v36;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)",  "%s\n",  v36);
    goto LABEL_139;
  }

void sub_1007EE72C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, char a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_1002A5590(&a38);
  if (a45 < 0) {
    operator delete(a40);
  }
  sub_100527C80((uint64_t)&a46, (void *)a47);

  _Unwind_Resume(a1);
}

uint64_t sub_1007EE898(uint64_t a1)
{
  *(void *)a1 = off_101856D20;
  std::string::size_type v2 = (_OWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101856D90);
    }
    uint64_t v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "iB: ending metric session (BeaconRangingSession) for %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)&_DWORD v15[4] = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "iB: ending metric session (BeaconRangingSession) for %@",  v15,  12);
      __int16 v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLRangingSubscription::~CLRangingSubscription()", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    sub_10091CFD4((uint64_t)v2);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    memset(__p, 0, sizeof(__p));
    *(void *)__int128 buf = 0LL;
    *(_OWORD *)uint64_t v17 = 0u;
    *(void *)&uint8_t buf[8] = 0xBFF0000000000000LL;
    LODWORD(v19) = 0;
    DWORD2(v22) = 0;
    _OWORD *v2 = *(_OWORD *)buf;
    int v5 = (void **)(a1 + 96);
    *(_OWORD *)int v5 = *(_OWORD *)v17;
    *(void **)(a1 + 112) = __p[0];
    HIBYTE(__p[0]) = 0;
    LOBYTE(v17[0]) = 0;
    int v6 = (void **)(a1 + 120);
    *(_OWORD *)int v6 = *(_OWORD *)&__p[1];
    *(void **)(a1 + 136) = __p[3];
    HIBYTE(__p[3]) = 0;
    LOBYTE(__p[1]) = 0;
    __int128 v7 = v20;
    *(_OWORD *)(a1 + 144) = v19;
    *(_OWORD *)(a1 + 160) = v7;
    sub_1007F0C90((void **)(a1 + 176));
    *(void *)(a1 + 176) = 0LL;
    *(void *)(a1 + 184) = 0LL;
    *(void *)(a1 + 192) = 0LL;
    *(void *)&__int128 v22 = 0LL;
    __int128 v21 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    *(void *)uint64_t v15 = &v21;
    sub_1007F0D04((void ***)v15);
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v17[0]);
    }
  }

  uint64_t v8 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *(void *)__int128 buf = a1 + 176;
  sub_1007F0D04((void ***)buf);
  sub_100527C80(a1 + 56, *(void **)(a1 + 64));
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  sub_100C6AB50(a1);
  return a1;
}

void sub_1007EEC20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_1007EEC2C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 96);
  sub_1007F0D04(&v3);
  return a1;
}

void sub_1007EEC88(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1007EE898(a1);
  operator delete(v1);
}

uint64_t sub_1007EEC9C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_101856D20;
  *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 56) = v6 + 64;
  *(_BYTE *)(v6 + 80) = 0;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 8_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(v6 + 152) = 0LL;
  *(_BYTE *)(v6 + 160) = 0;
  *(_DWORD *)(v6 + 164) = 0;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 12_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(v6 + 144) = 0;
  *(void *)(v6 + 184) = 0LL;
  *(void *)(v6 + 192) = 0LL;
  *(void *)(v6 + 176) = 0LL;
  *(_DWORD *)(v6 + 200) = 0;
  *(void *)(v6 + 20_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(v6 + 216) = -1;
  *(_WORD *)(v6 + 320) = 0;
  *(_OWORD *)(v6 + 28_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  sub_100D96A2C((uint64_t)sub_1007EEE64, a1, *(void **)(v6 + 8), &v11);
  uint64_t v7 = v11;
  uint64_t v11 = 0LL;
  uint64_t v8 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    uint64_t v9 = v11;
    uint64_t v11 = 0LL;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:4 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:3 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:1 registrationInfo:0];
  return a1;
}

void sub_1007EEDF4(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 208);
  *(void *)(v1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_1007EEC2C(v3);
  sub_100527C80(v2, *(void **)(v1 + 64));
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_1007EEE64(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101856D70);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLRangingSubscription::onAppMonitorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101856D70);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLRangingSubscription::onAppMonitorNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1007F0A60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007EF01C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007EF040(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 16) transientAwareRegistrationResult];
  if (v2 <= 8)
  {
    if (((1 << v2) & 0x1C) != 0)
    {
      sub_1007EF6DC(a1);
      sub_1002A5370(v8);
      uint64_t v5 = 1LL;
      sub_1002AC4EC((uint64_t)v8, "kCLConnectionMessageErrorKey", &v5);
      uint64_t v5 = (uint64_t)&v5;
      uint64_t v6 = &v5;
      uint64_t v7 = 0LL;
      sub_1007EFA30((void *)(a1 + 56), &v5);
      for (uint64_t i = v6; i != &v5; uint64_t i = (uint64_t *)i[1])
      {
        sub_1007EFB28((uint64_t)(i + 2), (uint64_t)v8);
        uint64_t v4 = sub_1002A59CC((uint64_t)v8);
        sub_1007EFC88(a1, &v4);
      }

      sub_100527B44(&v5);
      sub_1002A5590(v8);
    }

    else if (((1 << v2) & 0x103) != 0)
    {
      sub_1007EF184(a1);
    }
  }

  sub_1007EF184(a1);
}

void sub_1007EF158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100527B44((uint64_t *)va);
  sub_1002A5590(va1);
  _Unwind_Resume(a1);
}

void sub_1007EF184(uint64_t a1)
{
  char v2 = sub_100C6ACAC(a1);
  char v3 = v2;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) == 0) {
      return;
    }
  }

  else if ((v2 & 1) == 0)
  {
    return;
  }

  if ((sub_100C6ADAC(a1, 2) & 1) != 0)
  {
    v17[0] = (uint64_t)v17;
    v17[1] = (uint64_t)v17;
    uint64_t v18 = 0LL;
    sub_1007EFA30((void *)(a1 + 56), v17);
    if (v18)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      uint64_t v4 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(void *)std::string __p = 68289282LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2050;
        *(void *)&__p[20] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Starting ranging for regions, rangedRegions:%{public}lu}",  __p,  0x1Cu);
      }

      sub_100C6AD0C(a1, 4LL);
      uint64_t v5 = *(void *)sub_1007ED1E8(a1);
      [*(id *)(v5 + 16) register:*(void *)(v5 + 8) forNotification:0 registrationInfo:sub_1007F2110((uint64_t)v17)];
      if (!*(_BYTE *)(a1 + 80))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        uint64_t v6 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = *(void *)(a1 + 24);
          *(_DWORD *)std::string __p = 138412290;
          *(void *)&__p[4] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "iB: start metric session (BeaconRangingSession) for %@",  __p,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101856D90);
          }
          uint64_t v14 = *(void *)(a1 + 24);
          *(_DWORD *)uint64_t v19 = 138412290;
          *(void *)&v19[4] = v14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "iB: start metric session (BeaconRangingSession) for %@",  v19,  12);
          __int16 v16 = (char *)v15;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRangingSubscription::startRanging_nl()", "%s\n", v15);
          if (v16 != __p) {
            free(v16);
          }
        }

        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        *(void *)std::string __p = 0LL;
        memset(&__p[16], 0, 48);
        *(void *)&__p[8] = 0xBFF0000000000000LL;
        LODWORD(v21) = 0;
        DWORD2(v24) = 0;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
        uint64_t v8 = (void **)(a1 + 96);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)&__p[16];
        *(void *)(a1 + 112) = *(void *)&__p[32];
        __p[39] = 0;
        __p[16] = 0;
        uint64_t v9 = (void **)(a1 + 120);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)&__p[40];
        *(void *)(a1 + 136) = *(void *)&__p[56];
        __p[63] = 0;
        __p[40] = 0;
        __int128 v10 = v22;
        *(_OWORD *)(a1 + 144) = v21;
        *(_OWORD *)(a1 + 160) = v10;
        sub_1007F0C90((void **)(a1 + 176));
        *(void *)(a1 + 176) = 0LL;
        *(void *)(a1 + 184) = 0LL;
        *(void *)(a1 + 192) = 0LL;
        *(void *)&__int128 v24 = 0LL;
        __int128 v23 = 0uLL;
        *(_DWORD *)(a1 + 200) = 0;
        *(void *)uint64_t v19 = &v23;
        sub_1007F0D04((void ***)v19);
        if ((__p[63] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[40]);
        }
        if ((__p[39] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[16]);
        }
        sub_10091CC88(a1 + 80, [*(id *)(a1 + 24) bundleId], (unsigned __int8 *)(a1 + 224), (uint64_t)v17);
      }
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      int v13 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)std::string __p = 68289026LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning There are no regions to range.}",  __p,  0x12u);
      }
    }

    sub_100527B44(v17);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101856DB0);
    }
    char v11 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)std::string __p = 68289282LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2114;
      *(void *)&__p[20] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:client not authorized for ranging; not starting yet, Client:%{public, location:escape_only}@}",
        __p,
        0x1Cu);
    }

    sub_1007EF6DC(a1);
  }

void sub_1007EF6A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

void sub_1007EF6DC(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101856D90);
  }
  char v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Stopping ranging.}",  buf,  0x12u);
  }

  sub_100C6AE20(a1);
  uint64_t v3 = sub_1007ED1E8(a1);
  [*(id *)(*(void *)v3 + 16) unregister:*(void *)(*(void *)v3 + 8) forNotification:0];
  if (*(_BYTE *)(a1 + 80))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101856D90);
    }
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "iB: ending metric session (BeaconRangingSession) for %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      uint64_t v9 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)&_DWORD v12[4] = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "iB: ending metric session (BeaconRangingSession) for %@",  v12,  12);
      char v11 = (char *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRangingSubscription::stopRanging_nl()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_10091CFD4(a1 + 80);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    *(void *)__int128 buf = 0LL;
    memset(&buf[16], 0, 48);
    *(void *)&uint8_t buf[8] = 0xBFF0000000000000LL;
    LODWORD(v14) = 0;
    DWORD2(v17) = 0;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)buf;
    uint64_t v6 = (void **)(a1 + 96);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&buf[16];
    *(void *)(a1 + 112) = *(void *)&buf[32];
    buf[39] = 0;
    uint8_t buf[16] = 0;
    uint64_t v7 = (void **)(a1 + 120);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)&buf[40];
    *(void *)(a1 + 136) = *(void *)&buf[56];
    buf[63] = 0;
    uint8_t buf[40] = 0;
    __int128 v8 = v15;
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = v8;
    sub_1007F0C90((void **)(a1 + 176));
    *(void *)(a1 + 176) = 0LL;
    *(void *)(a1 + 184) = 0LL;
    *(void *)(a1 + 192) = 0LL;
    *(void *)&__int128 v17 = 0LL;
    __int128 v16 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    *(void *)uint64_t v12 = &v16;
    sub_1007F0D04((void ***)v12);
    if ((buf[63] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[40]);
    }
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }

uint64_t sub_1007EFA30(void *a1, uint64_t *a2)
{
  uint64_t v6 = (void *)*a1;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = (void *)v5[9];
      if (v7 != v5 + 10)
      {
        do
        {
          __int128 v8 = sub_1007F14D0((uint64_t)a2, 0LL, 0LL, (uint64_t)(v7 + 4));
          uint64_t v9 = *a2;
          void *v8 = *a2;
          v8[1] = a2;
          *(void *)(v9 + _Block_object_dispose(va, 8) = v8;
          *a2 = (uint64_t)v8;
          ++a2[2];
          __int128 v10 = (void *)v7[1];
          if (v10)
          {
            do
            {
              char v11 = v10;
              __int128 v10 = (void *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              char v11 = (void *)v7[2];
              BOOL v12 = *v11 == (void)v7;
              uint64_t v7 = v11;
            }

            while (!v12);
          }

          uint64_t v7 = v11;
        }

        while (v11 != v5 + 10);
      }

      int v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          __int128 v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          __int128 v14 = (void *)v5[2];
          BOOL v12 = *v14 == (void)v5;
          uint64_t v5 = v14;
        }

        while (!v12);
      }

      uint64_t v5 = v14;
    }

    while (v14 != v4);
  }

  return 1LL;
}

uint64_t sub_1007EFB28(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  sub_1002AC220(a2, "kCLConnectionMessageRegionTypeKey", &v6);
  int v6 = *(_DWORD *)(a1 + 36) & 7;
  sub_1002AC220(a2, "kCLConnectionMessageRegionDefinitionKey", &v6);
  sub_1002ACD58(a2, "kCLConnectionMessageProximityUUIDKey", (char *)(a1 + 8));
  sub_1002AB6D8(a2, "kCLConnectionMessageMajorKey", (unsigned __int16 *)(a1 + 32));
  sub_1002AB6D8(a2, "kCLConnectionMessageMinorKey", (unsigned __int16 *)(a1 + 34));
  int v5 = *(_DWORD *)(a1 + 112) & 1;
  sub_1002AC220(a2, "kCLConnectionMessageNotifyOnEntryKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 2;
  sub_1002AC220(a2, "kCLConnectionMessageNotifyOnExitKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 4;
  sub_1002AC220(a2, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 8;
  sub_1002AC220(a2, "kCLConnectionMessageConservativeEntry", &v5);
  LOBYTE(sub_1012279C0(0LL, v4, v5) = 0;
  sub_1002AB3FC(a2, "kCLConnectionMessageEmergencyKey", &v5);
  return 1LL;
}

void sub_1007EFC88(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1007EFD1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1007EFD30(uint64_t a1, void *a2, uint64_t *a3)
{
  __int128 v8 = (void *)*a2;
  uint64_t v6 = a2 + 1;
  uint64_t v7 = v8;
  if (v8 != v6)
  {
    do
    {
      uint64_t v9 = sub_100528D38(a1, (uint64_t)(v7 + 4));
      if ((void *)(a1 + 8) == v9)
      {
        sub_1007F152C((uint64_t)v14, (void *)v7[9], v7 + 10, a3);
      }

      else
      {
        uint64_t v10 = v9[9];
        uint64_t v19 = v7[9];
        uint64_t v17 = v10;
        uint64_t v18 = v7 + 10;
        v15[1] = a3;
        __int128 v16 = v9 + 10;
        v15[0] = a3;
        sub_1007F15D4((uint64_t)&v19, &v18, (uint64_t)&v17, &v16, (uint64_t)v15, (uint64_t)v14);
      }

      char v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          char v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          BOOL v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }

        while (!v13);
      }

      uint64_t v7 = v12;
    }

    while (v12 != v6);
  }

void sub_1007EFE24(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (!*a3)
  {
    sub_1002A5370(v71);
    uint64_t v12 = a4 + 8;
    BOOL v13 = sub_100528D38(a1 + 56, a4 + 8);
    __int128 v14 = v13;
    if ((void *)(a1 + 64) == v13)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
      __int128 v16 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        sub_100271E94(v12, buf);
        uint64_t v17 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
            ? buf
            : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
        LODWORD(v76.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "iB: Unable to find ranged region,%{private}s.",  (uint8_t *)&v76,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        uint64_t v18 = qword_101934978;
        sub_100271E94(v12, &v76);
        if ((v76.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v19 = &v76;
        }
        else {
          uint64_t v19 = (std::stringbuf::string_type *)v76.__r_.__value_.__r.__words[0];
        }
        int valuePtr = 136380675;
        int v73 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  2LL,  "iB: Unable to find ranged region,%{private}s.",  &valuePtr,  12);
        __int128 v21 = v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)",  "%s\n",  (const char *)v21);
        if (v21 != buf) {
          free(v21);
        }
      }

      goto LABEL_92;
    }

    if ((*(_DWORD *)a4 - 1) >= 2)
    {
      if (!*(_DWORD *)a4)
      {
        __int16 v66 = v13;
        uint64_t v69 = a1;
        theArray = CFArrayCreateMutable( kCFAllocatorDefault,  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a4 + 56) - *(void *)(a4 + 48)) >> 3),  &kCFTypeArrayCallBacks);
        uint64_t v22 = *(void *)(a4 + 48);
        uint64_t v68 = a4;
        if (v22 != *(void *)(a4 + 56))
        {
          __int128 v23 = (_BYTE *)(a1 + 80);
          __int128 v24 = (_DWORD *)(v22 + 56);
          int v67 = (_BYTE *)(a1 + 80);
          do
          {
            if (*v23) {
              sub_10091CF10((uint64_t)v23, (uint64_t)(v24 - 14));
            }
            sub_1002A5370(buf);
            int valuePtr = *(v24 - 5) & 7;
            else {
              int v25 = *(v24 - 4);
            }
            Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 8LL, &kCFTypeArrayCallBacks);
            CFNumberRef v27 = sub_1002AD1CC(&valuePtr);
            double v28 = (char *)(v24 - 12);
            CFStringRef v29 = sub_1002A6F04(v28);
            CFNumberRef v30 = sub_1002AD17C((unsigned __int16 *)v24 - 12);
            CFNumberRef v31 = sub_1002AD17C((unsigned __int16 *)v24 - 11);
            LODWORD(v76.__r_.__value_.__l.__data_) = v25;
            CFNumberRef v32 = sub_1002AD1CC(&v76);
            CFNumberRef v33 = sub_1002AD1E4(v24 - 2);
            CFNumberRef v34 = sub_1002AD1B4(v24);
            v76.__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
            CFNumberRef v35 = sub_1002AD1E4(&v76);
            CFArrayAppendValue(Mutable, v27);
            CFArrayAppendValue(Mutable, v29);
            CFArrayAppendValue(Mutable, v30);
            CFArrayAppendValue(Mutable, v31);
            CFArrayAppendValue(Mutable, v32);
            CFArrayAppendValue(Mutable, v33);
            CFArrayAppendValue(Mutable, v34);
            CFArrayAppendValue(Mutable, v35);
            CFArrayAppendValue(theArray, Mutable);
            CFRelease(v34);
            CFRelease(v33);
            CFRelease(v32);
            CFRelease(v31);
            CFRelease(v30);
            CFRelease(v29);
            CFRelease(v27);
            CFRelease(Mutable);
            CFRelease(v35);
            sub_1002A5590(buf);
            __int128 v23 = v67;
            double v36 = (char *)(v24 + 8);
            v24 += 22;
          }

          while (v36 != *(char **)(v68 + 56));
        }

        sub_1002AB370((uint64_t)v71, "kCLConnectionMessageBeaconsKey", (uint64_t)theArray);
        CFRelease(theArray);
        __int16 v37 = (void *)v66[9];
        if (v37 != v66 + 10)
        {
          do
          {
            double v38 = v37 + 4;
            sub_1007EFB28((uint64_t)(v37 + 4), (uint64_t)v71);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101856D90);
            }
            __int16 v39 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v38 + 16LL))(buf, v37 + 4);
              int size = (char)buf[0].__r_.__value_.__s.__size_;
              std::string::size_type v41 = buf[0].__r_.__value_.__r.__words[0];
              int v42 = sub_1002AF124((uint64_t)v71, "kCLConnectionMessageBeaconsKey");
              LODWORD(v76.__r_.__value_.__l.__data_) = 136380931;
              __int16 v43 = buf;
              if (size < 0) {
                __int16 v43 = (std::stringbuf::string_type *)v41;
              }
              *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
              WORD2(v76.__r_.__value_.__r.__words[1]) = 1026;
              *(_DWORD *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.",  (uint8_t *)&v76,  0x12u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101856D90);
              }
              uint64_t v47 = qword_101934978;
              (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v38 + 16LL))(&v76, v37 + 4);
              int v48 = (char)v76.__r_.__value_.__s.__size_;
              std::string::size_type v49 = v76.__r_.__value_.__r.__words[0];
              int v50 = sub_1002AF124((uint64_t)v71, "kCLConnectionMessageBeaconsKey");
              int valuePtr = 136380931;
              uint64_t v51 = &v76;
              if (v48 < 0) {
                uint64_t v51 = (std::stringbuf::string_type *)v49;
              }
              int v73 = v51;
              __int16 v74 = 1026;
              int v75 = v50;
              LODWORD(v65) = 18;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  1LL,  "@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.",  &valuePtr,  v65);
              char v53 = v52;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)",  "%s\n",  (const char *)v53);
              if (v53 != buf) {
                free(v53);
              }
            }

            buf[0].__r_.__value_.__r.__words[0] = sub_1002A59CC((uint64_t)v71);
            sub_1007F09B8(v69, buf);
            BOOL v44 = (void *)v37[1];
            if (v44)
            {
              do
              {
                BOOL v45 = v44;
                BOOL v44 = (void *)*v44;
              }

              while (v44);
            }

            else
            {
              do
              {
                BOOL v45 = (void *)v37[2];
                BOOL v46 = *v45 == (void)v37;
                __int16 v37 = v45;
              }

              while (!v46);
            }

            __int16 v37 = v45;
          }

          while (v45 != v66 + 10);
        }

        goto LABEL_92;
      }

      std::string::size_type v15 = 17LL;
    }

    else
    {
      std::string::size_type v15 = 16LL;
    }

    buf[0].__r_.__value_.__r.__words[0] = v15;
    sub_1002AC4EC((uint64_t)v71, "kCLConnectionMessageErrorKey", buf);
    __int16 v54 = (void *)v14[9];
    int v55 = v14 + 10;
    if (v54 != v14 + 10)
    {
      do
      {
        int v56 = v54 + 4;
        sub_1007EFB28((uint64_t)(v54 + 4), (uint64_t)v71);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101856D90);
        }
        double v57 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v56 + 16LL))(buf, v54 + 4);
          uint64_t v58 = buf;
          if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v58 = (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
          }
          LODWORD(v76.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
          WORD2(v76.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "#Warning Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.",  (uint8_t *)&v76,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101856D90);
          }
          uint64_t v61 = qword_101934978;
          (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v56 + 16LL))(&v76, v54 + 4);
          uint64_t v62 = &v76;
          if ((v76.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v62 = (std::stringbuf::string_type *)v76.__r_.__value_.__r.__words[0];
          }
          int valuePtr = 136380931;
          int v73 = v62;
          __int16 v74 = 1026;
          int v75 = v15;
          LODWORD(v65) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  0LL,  "#Warning Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.",  &valuePtr,  v65);
          __int16 v64 = v63;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, cons t CLBTLERangeManager_Type::NotificationData &)",  "%s\n",  (const char *)v64);
          if (v64 != buf) {
            free(v64);
          }
        }

        buf[0].__r_.__value_.__r.__words[0] = sub_1002A59CC((uint64_t)v71);
        sub_1007EFC88(a1, buf);
        double v59 = (void *)v54[1];
        if (v59)
        {
          do
          {
            int v60 = v59;
            double v59 = (void *)*v59;
          }

          while (v59);
        }

        else
        {
          do
          {
            int v60 = (void *)v54[2];
            BOOL v46 = *v60 == (void)v54;
            __int16 v54 = v60;
          }

          while (!v46);
        }

        __int16 v54 = v60;
      }

      while (v60 != v55);
    }

void sub_1007F08F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
}

void sub_1007F09B8(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1007F0A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1007F0A60(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 - 1) >= 3)
  {
    if (*a3 == 4)
    {
      *(_DWORD *)(a1 + 216) = *(_DWORD *)a4;
      std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a4 + 8));
      std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a4 + 32));
      std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a4 + 56));
      std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a4 + 80));
      *(_WORD *)(a1 + 320) = *(_WORD *)(a4 + 104);
    }

    return;
  }

  uint64_t v6 = *(unsigned __int8 *)(a4 + 31);
  if ((v6 & 0x80u) == 0LL) {
    uint64_t v7 = *(unsigned __int8 *)(a4 + 31);
  }
  else {
    uint64_t v7 = *(void *)(a4 + 16);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 247);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a1 + 232);
  }
  if (v7 != v8) {
    return;
  }
  uint64_t v10 = (const void **)(a4 + 8);
  uint64_t v12 = (void *)(a1 + 224);
  char v11 = *(void **)(a1 + 224);
  if (v9 >= 0) {
    BOOL v13 = (unsigned __int8 *)(a1 + 224);
  }
  else {
    BOOL v13 = *(unsigned __int8 **)(a1 + 224);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v13, *(void *)(a4 + 16))) {
      return;
    }
    goto LABEL_19;
  }

  if (!*(_BYTE *)(a4 + 31))
  {
LABEL_19:
    *(_DWORD *)(a1 + 216) = -1;
    if (v9 < 0) {
      operator delete(v11);
    }
    __int128 v14 = (void **)(a1 + 248);
    *uint64_t v12 = 0LL;
    *(void *)(a1 + 232) = 0LL;
    *(void *)(a1 + 240) = 0LL;
    std::string::size_type v15 = (void **)(a1 + 272);
    void *v14 = 0LL;
    *(void *)(a1 + 256) = 0LL;
    *(void *)(a1 + 264) = 0LL;
    __int128 v16 = (void **)(a1 + 296);
    const char *v15 = 0LL;
    *(void *)(a1 + 280) = 0LL;
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
    *__int128 v16 = 0LL;
    *(void *)(a1 + 304) = 0LL;
    *(_WORD *)(a1 + 320) = 0;
    *(void *)(a1 + 312) = 0LL;
    return;
  }

  while (*(unsigned __int8 *)v10 == *v13)
  {
    uint64_t v10 = (const void **)((char *)v10 + 1);
    ++v13;
    if (!--v6) {
      goto LABEL_19;
    }
  }

void sub_1007F0BD4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1007F0C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_1007F0C64(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1007F0C90(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      unint64_t v5 = v3 - 40;
      uint64_t v6 = v3 - 40;
      do
      {
        uint64_t v7 = *(void (***)(char *))v6;
        v6 -= 40;
        (*v7)(v5);
        BOOL v8 = v5 == v1;
        unint64_t v5 = v6;
      }

      while (!v8);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void sub_1007F0D04(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      do
      {
        BOOL v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }

      while (!v9);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1007F0D90(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_1007F0DBC(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &off_101856DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1007F0DF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101856DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1007F0E1C(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_1007F0E24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1007F0E60()
{
}

void sub_1007F0E6C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1007F0EF0(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1007F0ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F0EF0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    BOOL v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      BOOL v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101856D90);
    }
    char v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101856D90);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__int128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_1007F10D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1007F10F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1007F1168(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_1007F1154(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_1007F1168(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    BOOL v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_1007F13E8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_1007F13D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1007F13E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_1007F145C(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1007F1444(_Unwind_Exception *a1)
{
}

void *sub_1007F145C(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1007F14B4(_Unwind_Exception *exception_object)
{
}

void *sub_1007F14D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x88uLL);
  void *v7 = a2;
  v7[1] = a3;
  sub_100272138((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1007F1518(_Unwind_Exception *a1)
{
}

void *sub_1007F152C(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = sub_1007F14D0((uint64_t)a4, 0LL, 0LL, (uint64_t)(v5 + 4));
      uint64_t v8 = *a4;
      void *v7 = *a4;
      v7[1] = a4;
      *(void *)(v8 + _Block_object_dispose(va, 8) = v7;
      *a4 = (uint64_t)v7;
      ++a4[2];
      unint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          unint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }

        while (!v11);
      }

      uint64_t v5 = v10;
    }

    while (v10 != a3);
    return a3;
  }

  return v5;
}

double sub_1007F15D4@<D0>( uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10 = *(void **)a1;
  BOOL v11 = *a2;
  if (*(void **)a1 == *a2)
  {
LABEL_31:
    BOOL v11 = v10;
    goto LABEL_32;
  }

  for (uint64_t i = *(void **)a3; *(void *)a3 != *a4; uint64_t i = *(void **)a3)
  {
    if (sub_100528F5C((uint64_t)(v10 + 4), (uint64_t)(i + 4)))
    {
      sub_1007F1790((uint64_t *)a5, *(void *)a1 + 32LL);
      unint64_t v15 = *(void **)a1;
      float v16 = *(void **)(*(void *)a1 + 8LL);
      if (v16)
      {
        do
        {
          float v17 = v16;
          float v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          float v17 = (void *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          unint64_t v15 = v17;
        }

        while (!v18);
      }

      *(void *)a1 = v17;
    }

    else
    {
      if (sub_100528F5C(*(void *)a3 + 32LL, *(void *)a1 + 32LL))
      {
        unint64_t v19 = *(void **)a3;
        unint64_t v20 = *(void **)(*(void *)a3 + 8LL);
        if (v20)
        {
          do
          {
            size_t v21 = v20;
            unint64_t v20 = (void *)*v20;
          }

          while (v20);
        }

        else
        {
          do
          {
            size_t v21 = (void *)v19[2];
            BOOL v18 = *v21 == (void)v19;
            unint64_t v19 = v21;
          }

          while (!v18);
        }
      }

      else
      {
        uint64_t v22 = *(void **)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8LL);
        if (v23)
        {
          do
          {
            __int128 v24 = v23;
            unint64_t v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            __int128 v24 = (void *)v22[2];
            BOOL v18 = *v24 == (void)v22;
            uint64_t v22 = v24;
          }

          while (!v18);
        }

        *(void *)a1 = v24;
        int v25 = *(void **)a3;
        char v26 = *(void **)(*(void *)a3 + 8LL);
        if (v26)
        {
          do
          {
            size_t v21 = v26;
            char v26 = (void *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            size_t v21 = (void *)v25[2];
            BOOL v18 = *v21 == (void)v25;
            int v25 = v21;
          }

          while (!v18);
        }
      }

      *(void *)a3 = v21;
    }

    unint64_t v10 = *(void **)a1;
    BOOL v11 = *a2;
    if (*(void **)a1 == *a2) {
      goto LABEL_31;
    }
  }

uint64_t *sub_1007F1790(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  __int128 v4 = (uint64_t *)a1[1];
  uint64_t v5 = sub_1007F14D0(*a1, 0LL, 0LL, a2);
  uint64_t v6 = *v4;
  *(void *)(v6 + _Block_object_dispose(va, 8) = v5;
  *uint64_t v5 = v6;
  uint64_t *v4 = (uint64_t)v5;
  v5[1] = v4;
  ++*(void *)(v3 + 16);
  a1[1] = (uint64_t)v5;
  a1[1] = v5[1];
  return a1;
}

void sub_1007F17FC(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    do
    {
      unint64_t v10 = sub_1007F14D0(a3, 0LL, 0LL, (uint64_t)(v7 + 4));
      uint64_t v11 = *a4;
      *(void *)(v11 + _Block_object_dispose(va, 8) = v10;
      *unint64_t v10 = v11;
      *a4 = (uint64_t)v10;
      v10[1] = a4;
      ++*(void *)(a3 + 16);
      unint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          BOOL v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }

        while (!v14);
      }

      uint64_t v7 = v13;
    }

    while (v13 != a2);
    uint64_t v7 = a2;
  }

  *a5 = v7;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t *sub_1007F18B8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007F190C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1007F18F4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1007F190C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_1007F1990(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          __int128 v4 = v8;
        }

        while (!v9);
      }

      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1007F1990(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1007F1A24(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_1007F1BA8((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1005293A8((uint64_t)v10, 0LL);
  }

  return v7;
}

uint64_t *sub_1007F1A24(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_100528DB0(a5, (uint64_t)(a2 + 4)))
  {
    if ((void *)*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    uint64_t v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      float v16 = a2;
      do
      {
        uint64_t v12 = (void *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        float v16 = v12;
      }

      while (v17);
    }

    return sub_100529238((uint64_t)a1, a3, a5);
  }

  if (sub_100528DB0((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      BOOL v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        BOOL v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      BOOL v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        BOOL v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = a2;
    }

    return a4;
  }

  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t sub_1007F1BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1007F1C10((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007F1BF8(_Unwind_Exception *a1)
{
}

uint64_t sub_1007F1C10(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10182CE18;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1007F1CB4((uint64_t *)(a1 + 40), a2 + 40);
  return a1;
}

void sub_1007F1C90(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3 + 16;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1007F1CB4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007F1D08(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1007F1CF0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1007F1D08(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1007F1D8C(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          __int128 v4 = v8;
        }

        while (!v9);
      }

      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1007F1D8C(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1007F1E0C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1005294F8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v10, v6, v8);
    return v8;
  }

  return result;
}

uint64_t *sub_1007F1E0C(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_100528F5C(a5, (uint64_t)(a2 + 4)))
  {
    if ((void *)*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    uint64_t v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      float v16 = a2;
      do
      {
        uint64_t v12 = (void *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        float v16 = v12;
      }

      while (v17);
    }

    return sub_100529468((uint64_t)a1, a3, a5);
  }

  if (sub_100528F5C((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      BOOL v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        BOOL v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      BOOL v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        BOOL v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = a2;
    }

    return a4;
  }

  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *sub_1007F1F90(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_100529238((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1007F2038((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1005293A8((uint64_t)v10, 0LL);
  }

  return v7;
}

void *sub_1007F2038@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1007F20A0(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007F2088(_Unwind_Exception *a1)
{
}

void *sub_1007F20A0(void *a1, uint64_t a2)
{
  *a1 = &off_10182CE18;
  __int128 v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C(v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 8);
    _OWORD v4[2] = *(void *)(a2 + 24);
    *(_OWORD *)__int128 v4 = v5;
  }

  uint64_t v6 = *(void *)(a2 + 32);
  a1[7] = 0LL;
  a1[6] = 0LL;
  a1[4] = v6;
  a1[5] = a1 + 6;
  return a1;
}

CLCppContainer *sub_1007F2110(uint64_t a1)
{
  char v2 = (uint64_t *)operator new(0x18uLL);
  sub_1007F21E0(v2, a1);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _OWORD v4[2] = sub_1007F21A8;
  double v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  24LL);
}

void sub_1007F2194(_Unwind_Exception *a1)
{
}

void sub_1007F21A8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    sub_100527B44(*(uint64_t **)(a1 + 32));
    operator delete(v1);
  }

uint64_t *sub_1007F21E0(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    __int128 v5 = sub_1007F14D0((uint64_t)a1, 0LL, 0LL, i + 16);
    uint64_t v6 = *a1;
    *__int128 v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + _Block_object_dispose(va, 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }

  return a1;
}

void sub_1007F225C(_Unwind_Exception *a1)
{
}

uint64_t sub_1007F2270()
{
  if (qword_101998AD8 != -1) {
    dispatch_once(&qword_101998AD8, &stru_101857028);
  }
  return qword_101998AD0;
}

void sub_1007F22B0(id a1)
{
  CFNumberRef v30 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  qword_101998AD0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v1 = sub_1005E2BCC();
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id v2 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v1,  "countByEnumeratingWithState:objects:count:",  &v49,  v65,  16LL);
  if (v2)
  {
    uint64_t v32 = *(void *)v50;
    CFNumberRef v31 = v1;
    do
    {
      uint64_t v3 = 0LL;
      id v33 = v2;
      do
      {
        if (*(void *)v50 != v32) {
          objc_enumerationMutation(v1);
        }
        __int128 v4 = *(__CFString **)(*((void *)&v49 + 1) + 8 * v3);
        if (!sub_1002965E4(v4))
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101857070);
          }
          __int128 v5 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)__int128 buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            double v59 = "";
            __int16 v60 = 2114;
            uint64_t v61 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Bellwethers of groups MUST be system services, Bellwether:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101857070);
            }
          }

          uint64_t v6 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            *(_DWORD *)__int128 buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            double v59 = "";
            __int16 v60 = 2114;
            uint64_t v61 = v4;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Bellwethers of groups MUST be system services",  "{msg%{public}.0s:Bellwethers of groups MUST be system services, Bellwether:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }
        }

        uint64_t v7 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:",  0LL,  v4,  112LL);
        [(id)qword_101998AD0 setObject:v7 forKeyedSubscript:v4];
        id v8 = -[NSDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", v4);
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        id v9 = [v8 countByEnumeratingWithState:&v45 objects:v64 count:16];
        uint64_t v34 = v3;
        if (v9)
        {
          uint64_t v10 = *(void *)v46;
          do
          {
            uint64_t v11 = 0LL;
            do
            {
              if (*(void *)v46 != v10) {
                objc_enumerationMutation(v8);
              }
              uint64_t v12 = *(__CFString **)(*((void *)&v45 + 1) + 8LL * (void)v11);
              if (sub_1002965E4(v12))
              {
                uint64_t v13 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:",  0LL,  v4,  112LL,  v12,  112LL);
                [(id)qword_101998AD0 setObject:v13 forKeyedSubscript:v12];
              }

              else
              {
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101857070);
                }
                BOOL v14 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 68289538;
                  int v57 = 0;
                  __int16 v58 = 2082;
                  double v59 = "";
                  __int16 v60 = 2114;
                  uint64_t v61 = v4;
                  __int16 v62 = 2114;
                  uint64_t v63 = v12;
                  _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Innate system service found in grouping, but is not a system service on disk , Group:%{public, location:escape_only}@, Innate:%{public, location:escape_only}@}",  buf,  0x26u);
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101857070);
                  }
                }

                unint64_t v15 = (os_log_s *)qword_101934988;
                if (os_signpost_enabled((os_log_t)qword_101934988))
                {
                  *(_DWORD *)__int128 buf = 68289538;
                  int v57 = 0;
                  __int16 v58 = 2082;
                  double v59 = "";
                  __int16 v60 = 2114;
                  uint64_t v61 = v4;
                  __int16 v62 = 2114;
                  uint64_t v63 = v12;
                  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Innate system service found in grouping, but is not a system service on disk",  "{msg%{public}.0s:Innate system service found in grouping, but is not a system service on disk , Group:%{public, location:escape_only}@, Innate:%{public, location:escape_only}@}",  buf,  0x26u);
                }
              }

              uint64_t v11 = (char *)v11 + 1;
            }

            while (v9 != v11);
            id v9 = [v8 countByEnumeratingWithState:&v45 objects:v64 count:16];
          }

          while (v9);
        }

        uint64_t v3 = v34 + 1;
        uint64_t v1 = v31;
      }

      while ((id)(v34 + 1) != v33);
      id v2 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v49,  v65,  16LL);
    }

    while (v2);
  }

  id v16 = -[NSArray mutableCopy](sub_1005E2D7C(), "mutableCopy");
  BOOL v17 = sub_1005E2E70();
  v55[0] = @"/System/Library/LocationBundles";
  v55[1] = @"/AppleInternal/Library/LocationBundles";
  BOOL v18 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v55, 2LL);
  CFNumberRef v35 = v16;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v19 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v41,  v54,  16LL);
  if (v19)
  {
    uint64_t v20 = *(void *)v42;
    do
    {
      for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v20) {
          objc_enumerationMutation(v18);
        }
        uint64_t v22 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
        id v23 = [v22 UTF8String];
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472LL;
        void v40[2] = sub_1007F2AC0;
        v40[3] = &unk_101857050;
        v40[4] = v22;
        v40[5] = v17;
        v40[6] = 0LL;
        sub_1007BD964((uint64_t)v23, (uint64_t)v40);
      }

      id v19 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v41,  v54,  16LL);
    }

    while (v19);
  }

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v24 = [v35 countByEnumeratingWithState:&v36 objects:v53 count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v37;
    do
    {
      char v26 = 0LL;
      do
      {
        if (*(void *)v37 != v25) {
          objc_enumerationMutation(v35);
        }
        CFNumberRef v27 = *(__CFString **)(*((void *)&v36 + 1) + 8LL * (void)v26);
        if (![(id)qword_101998AD0 objectForKeyedSubscript:v27])
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101857070);
          }
          uint64_t v28 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            double v59 = "";
            __int16 v60 = 2114;
            uint64_t v61 = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:System service found in known standalone set, but is not a system service on disk , SystemService:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101857070);
            }
          }

          __int128 v29 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            *(_DWORD *)__int128 buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            double v59 = "";
            __int16 v60 = 2114;
            uint64_t v61 = v27;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "System service found in known standalone set, but is not a system service on disk",  "{msg%{public}.0s:System service found in known standalone set, but is not a system service on disk , SystemService:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }
        }

        char v26 = (char *)v26 + 1;
      }

      while (v24 != v26);
      id v24 = [v35 countByEnumeratingWithState:&v36 objects:v53 count:16];
    }

    while (v24);
  }
}

void sub_1007F2A48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

uint64_t sub_1007F2AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (__CFString *)objc_msgSend( objc_msgSend( *(id *)(a1 + 32),  "stringByAppendingPathComponent:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)),  "stringByResolvingSymlinksInPath");
  if (v3)
  {
    __int128 v4 = v3;
    if (![(id)qword_101998AD0 objectForKeyedSubscript:v3] && sub_1002965E4(v4))
    {
      if ([*(id *)(a1 + 40) containsObject:v4])
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101857070);
        }
        __int128 v5 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
        {
          int v9 = 68289282;
          int v10 = 0;
          __int16 v11 = 2082;
          uint64_t v12 = "";
          __int16 v13 = 2114;
          BOOL v14 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:System service found in known standalone set, but is not a system service on disk, SystemService:%{public, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101857070);
          }
        }

        uint64_t v6 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          int v9 = 68289282;
          int v10 = 0;
          __int16 v11 = 2082;
          uint64_t v12 = "";
          __int16 v13 = 2114;
          BOOL v14 = v4;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "System service found in known standalone set, but is not a system service on disk",  "{msg%{public}.0s:System service found in known standalone set, but is not a system service on disk, SystemService:%{public, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
        }
      }

      uint64_t v7 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:",  *(void *)(a1 + 48),  v4,  112LL);
      [(id)qword_101998AD0 setObject:v7 forKeyedSubscript:v4];
    }
  }

  return 1LL;
}

void sub_1007F2D38(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_1007F2D64(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1018570A0;
  a1[9] = off_101857168;
  a1[58] = off_1018571B8;
  sub_1007F4268((uint64_t)a1);
  return a1;
}

void sub_1007F2DF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1007F2E20(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *uint64_t v12 = &off_101826EF8;
  *(void *)a1 = off_1018575A8;
  *(void *)(a1 + 72) = off_101857650;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_1018575A8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_101857650;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 384) = 12000;
  *(void *)(a1 + 392) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 400));
  *(void *)(a1 + 400) = &off_101826EF8;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  unint64_t v15 = (int *)(a1 + 384);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 384));
  BOOL v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101857690);
  }
  uint64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101857690);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    char v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = HRRecoverySession, D ataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_1007F31E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[49] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_10046AD28(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_1007F328C()
{
}

void *sub_1007F3294(void *a1)
{
  a1[9] = off_101857650;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_1018575A8;
  a1[49] = off_101826EC8;
  sub_1001B9C98(a1 + 50);
  sub_10046AD28(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_1007F3314(uint64_t a1)
{
  return sub_1007F3294((void *)(a1 - 72));
}

void *sub_1007F331C(uint64_t a1)
{
  return sub_1007F3294((void *)(a1 - 464));
}

void sub_1007F3324(void *a1)
{
  uint64_t v1 = sub_1007F3294(a1);
  operator delete(v1);
}

void sub_1007F3338(uint64_t a1)
{
  uint64_t v1 = sub_1007F3294((void *)(a1 - 72));
  operator delete(v1);
}

void sub_1007F3350(uint64_t a1)
{
  uint64_t v1 = sub_1007F3294((void *)(a1 - 464));
  operator delete(v1);
}

uint64_t sub_1007F3368(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16LL) == 1.79769313e308 && sub_100D8A92C(a1 + 9))
  {
    sub_1003C0454(a1[10]);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1003C0D54(a1[10], "DELETE FROM HRRecoverySessionHistory WHERE startTime < ?", &v13);
    uint64_t v5 = v13;
    char v6 = (sqlite3_stmt *)sub_100019240(v13);
    if (sub_1003B7480(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
    {
      uint64_t v7 = a1[10];
      id v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
      uint64_t v9 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }

    else
    {
      uint64_t v9 = -1LL;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v10 = a1[10];
    else {
      uint64_t v11 = *(void *)(v10 + 88);
    }
    sub_1003C1EC0(v10, v11);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  else
  {
    uint64_t v9 = -1LL;
  }

  sub_1001BA1BC(v14);
  return v9;
}

void sub_1007F349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1007F34D4(uint64_t a1, uint64_t a2)
{
  return sub_1007F3368((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1007F34DC(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC", &v40);
    uint64_t v5 = v40;
    uint64_t v39 = v40;
    sub_1003C0454(*(void *)(a1 + 80));
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    memset(v45, 0, 28);
    __int128 v46 = 0u;
    memset(v47, 0, 26);
    while (!sub_1007F376C(&v39, (uint64_t)&v40))
    {
      char v6 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v7)
      {
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a2) >> 5);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0x199999999999999LL) {
          sub_100007008();
        }
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a2) >> 5);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v19 = 0x199999999999999LL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          uint64_t v20 = (char *)sub_1007F89DC((uint64_t)(a2 + 2), v19);
        }
        else {
          uint64_t v20 = 0LL;
        }
        int v21 = &v20[160 * v16];
        __int128 v22 = v41;
        *(_OWORD *)int v21 = v40;
        *((_OWORD *)v21 + 1) = v22;
        __int128 v23 = v42;
        __int128 v24 = v43;
        __int128 v25 = *(_OWORD *)v45;
        *((_OWORD *)v21 + 4) = v44;
        *((_OWORD *)v21 + 5) = v25;
        *((_OWORD *)v21 + 2) = v23;
        *((_OWORD *)v21 + 3) = v24;
        __int128 v26 = *(_OWORD *)&v45[16];
        __int128 v27 = v46;
        __int128 v28 = v47[1];
        *((_OWORD *)v21 + _Block_object_dispose(va, 8) = v47[0];
        *((_OWORD *)v21 + 9) = v28;
        *((_OWORD *)v21 + 6) = v26;
        *((_OWORD *)v21 + 7) = v27;
        CFNumberRef v30 = *a2;
        uint64_t v29 = a2[1];
        __int16 v31 = v21;
        if (v29 != *a2)
        {
          do
          {
            __int128 v32 = *((_OWORD *)v29 - 9);
            *((_OWORD *)v31 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v29 - 10);
            *((_OWORD *)v31 - 9) = v32;
            __int128 v33 = *((_OWORD *)v29 - 8);
            __int128 v34 = *((_OWORD *)v29 - 7);
            __int128 v35 = *((_OWORD *)v29 - 5);
            *((_OWORD *)v31 - 6) = *((_OWORD *)v29 - 6);
            *((_OWORD *)v31 - 5) = v35;
            *((_OWORD *)v31 - _Block_object_dispose(va, 8) = v33;
            *((_OWORD *)v31 - 7) = v34;
            __int128 v36 = *((_OWORD *)v29 - 4);
            __int128 v37 = *((_OWORD *)v29 - 3);
            __int128 v38 = *((_OWORD *)v29 - 2);
            *(_OWORD *)(v31 - 22) = *(_OWORD *)(v29 - 22);
            *((_OWORD *)v31 - 3) = v37;
            *((_OWORD *)v31 - 2) = v38;
            *((_OWORD *)v31 - 4) = v36;
            v31 -= 160;
            v29 -= 160;
          }

          while (v29 != v30);
          uint64_t v29 = *a2;
        }

        unint64_t v15 = v21 + 160;
        *a2 = v31;
        a2[1] = v21 + 160;
        a2[2] = &v20[160 * v19];
        if (v29) {
          operator delete(v29);
        }
      }

      else
      {
        __int128 v8 = v41;
        *(_OWORD *)char v6 = v40;
        *((_OWORD *)v6 + 1) = v8;
        __int128 v9 = v42;
        __int128 v10 = v43;
        __int128 v11 = *(_OWORD *)v45;
        *((_OWORD *)v6 + 4) = v44;
        *((_OWORD *)v6 + 5) = v11;
        *((_OWORD *)v6 + 2) = v9;
        *((_OWORD *)v6 + 3) = v10;
        __int128 v12 = *(_OWORD *)&v45[16];
        __int128 v13 = v46;
        __int128 v14 = v47[1];
        *((_OWORD *)v6 + _Block_object_dispose(va, 8) = v47[0];
        *((_OWORD *)v6 + 9) = v14;
        *((_OWORD *)v6 + 6) = v12;
        *((_OWORD *)v6 + 7) = v13;
        unint64_t v15 = v6 + 160;
      }

      a2[1] = v15;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_1007F373C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F376C(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  sub_1007F4A18(a1, a2);
  return 0LL;
}

uint64_t sub_1007F37C8(uint64_t a1)
{
  uint64_t v3 = v8;
  __int128 v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    char v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1007F3868(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F388C(uint64_t a1)
{
  return sub_1007F37C8(a1 - 72);
}

uint64_t sub_1007F3894(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE HRRecoverySessionHistory SET startTime = ?, activityEndTime = ?, workoutSessionId = ?, workoutType = ?, hrR ecovery = ?, lambda = ?, hrMax = ?, hrMinAdjusted = ?, recoveryOnsetTime = ?, steadyStateHR = ?, status = ?, sessi onHrRecovery = ?, peakHR = ?, hrRecoveryReference = ? WHERE id = ?",  v25);
    uint64_t v7 = *(void *)v25;
    uuid_unparse((const unsigned __int8 *)(a2 + 32), v25);
    uint64_t v8 = (sqlite3_stmt *)sub_100019240(v7);
    uint64_t result = sub_1003B7480(v8, 1, *(double *)(a2 + 8));
    if ((_DWORD)result)
    {
      __int128 v9 = (sqlite3_stmt *)sub_100019240(v7);
      uint64_t result = sub_1003B7480(v9, 2, *(double *)(a2 + 16));
      if ((_DWORD)result)
      {
        __int128 v10 = (sqlite3_stmt *)sub_100019240(v7);
        uint64_t result = sub_1003BC1F0(v10, 3, v25);
        if ((_DWORD)result)
        {
          __int128 v11 = (sqlite3_stmt *)sub_100019240(v7);
          uint64_t result = sub_1003C28BC(v11, 4, *(_DWORD *)(a2 + 48));
          if ((_DWORD)result)
          {
            __int128 v12 = (sqlite3_stmt *)sub_100019240(v7);
            uint64_t result = sub_1003B7480(v12, 5, *(double *)(a2 + 56));
            if ((_DWORD)result)
            {
              __int128 v13 = (sqlite3_stmt *)sub_100019240(v7);
              uint64_t result = sub_1003B7480(v13, 6, *(double *)(a2 + 64));
              if ((_DWORD)result)
              {
                __int128 v14 = (sqlite3_stmt *)sub_100019240(v7);
                uint64_t result = sub_1003B7480(v14, 7, *(double *)(a2 + 72));
                if ((_DWORD)result)
                {
                  unint64_t v15 = (sqlite3_stmt *)sub_100019240(v7);
                  uint64_t result = sub_1003B7480(v15, 8, *(double *)(a2 + 80));
                  if ((_DWORD)result)
                  {
                    unint64_t v16 = (sqlite3_stmt *)sub_100019240(v7);
                    uint64_t result = sub_1003B7480(v16, 9, *(double *)(a2 + 88));
                    if ((_DWORD)result)
                    {
                      unint64_t v17 = (sqlite3_stmt *)sub_100019240(v7);
                      uint64_t result = sub_1003B7480(v17, 10, *(double *)(a2 + 96));
                      if ((_DWORD)result)
                      {
                        unint64_t v18 = (sqlite3_stmt *)sub_100019240(v7);
                        uint64_t result = sub_1003C28BC(v18, 11, *(_DWORD *)(a2 + 104));
                        if ((_DWORD)result)
                        {
                          unint64_t v19 = (sqlite3_stmt *)sub_100019240(v7);
                          uint64_t result = sub_1003B7480(v19, 12, *(double *)(a2 + 112));
                          if ((_DWORD)result)
                          {
                            uint64_t v20 = (sqlite3_stmt *)sub_100019240(v7);
                            uint64_t result = sub_1003B7480(v20, 13, *(double *)(a2 + 120));
                            if ((_DWORD)result)
                            {
                              int v21 = (sqlite3_stmt *)sub_100019240(v7);
                              uint64_t result = sub_1003B7480(v21, 14, *(double *)(a2 + 128));
                              if ((_DWORD)result)
                              {
                                __int128 v22 = (sqlite3_stmt *)sub_100019240(v7);
                                uint64_t result = sub_1003C2D24(v22, 15, a3);
                                if ((_DWORD)result)
                                {
                                  uint64_t v23 = *(void *)(a1 + 80);
                                  __int128 v24 = (sqlite3_stmt *)sub_100019240(v7);
                                  uint64_t result = sub_1003BB2BC(v23, v24);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  return result;
}

void sub_1007F3AB8(_Unwind_Exception *exception_object)
{
}

void sub_1007F3AE0(void *a1, double *a2)
{
  if (!sub_10029DF68(a1, (uint64_t)v21))
  {
LABEL_17:
    uint64_t v4 = 0LL;
    goto LABEL_18;
  }

  if (*((double *)v21 + 1) != a2[1])
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101857258);
    }
    __int128 v9 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *((void *)a2 + 1);
      *(_DWORD *)__int128 buf = 134349312;
      uint64_t v18 = v10;
      __int16 v19 = 2050;
      uint64_t v20 = *((void *)&v21[0] + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Inserted session (startTime=%{public}f) is not the latest session (startTime=%{public}f)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101857258);
      }
      uint64_t v11 = *((void *)a2 + 1);
      int v13 = 134349312;
      uint64_t v14 = v11;
      __int16 v15 = 2050;
      uint64_t v16 = *((void *)&v21[0] + 1);
      __int128 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "Inserted session (startTime=%{public}f) is not the latest session (startTime=%{public}f)",  &v13,  22);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)",  "%s\n",  v12);
    }

    goto LABEL_17;
  }

  uint64_t v4 = *(void *)&v21[0];
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101857258);
  }
  int v5 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(_DWORD *)__int128 buf = 134349312;
    uint64_t v18 = v4;
    __int16 v19 = 2050;
    uint64_t v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Wrote session to db: id=%{public}llu, startTime=%{public}.2f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101857258);
    }
    uint64_t v7 = *((void *)a2 + 1);
    int v13 = 134349312;
    uint64_t v14 = v4;
    __int16 v15 = 2050;
    uint64_t v16 = v7;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "Wrote session to db: id=%{public}llu, startTime=%{public}.2f",  &v13,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)",  "%s\n",  v8);
  }

uint64_t sub_1007F3E78(uint64_t a1, char **a2, int a3, double a4)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    if (a3) {
      sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL AND startTime > ? ORDE R BY startTime ASC",  buf);
    }
    else {
      sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM HRRecoverySessionHistory WHERE sessionHrRecovery IS NOT NULL AND startTime > ? ORDER BY startTime ASC",  buf);
    }
    uint64_t v10 = *(void *)buf;
    v46[0] = *(void *)buf;
    *(_OWORD *)__int128 buf = 0u;
    __int128 v48 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    memset(v52, 0, 28);
    __int128 v53 = 0u;
    memset(v54, 0, 26);
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v46[0]);
    if (sub_1003C28BC(v11, 1, (int)a4))
    {
      while (!sub_1007F376C(v46, (uint64_t)buf))
      {
        __int128 v12 = a2[1];
        unint64_t v13 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v13)
        {
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - *a2) >> 5);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x199999999999999LL) {
            sub_100007008();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 5);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0xCCCCCCCCCCCCCCLL) {
            unint64_t v25 = 0x199999999999999LL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            __int128 v26 = (char *)sub_1007F89DC((uint64_t)(a2 + 2), v25);
          }
          else {
            __int128 v26 = 0LL;
          }
          __int128 v27 = &v26[160 * v22];
          __int128 v28 = v48;
          *(_OWORD *)__int128 v27 = *(_OWORD *)buf;
          *((_OWORD *)v27 + 1) = v28;
          __int128 v29 = v49;
          __int128 v30 = v50;
          __int128 v31 = *(_OWORD *)v52;
          *((_OWORD *)v27 + 4) = v51;
          *((_OWORD *)v27 + 5) = v31;
          *((_OWORD *)v27 + 2) = v29;
          *((_OWORD *)v27 + 3) = v30;
          __int128 v32 = *(_OWORD *)&v52[16];
          __int128 v33 = v53;
          __int128 v34 = *(_OWORD *)&v54[16];
          *((_OWORD *)v27 + _Block_object_dispose(va, 8) = *(_OWORD *)v54;
          *((_OWORD *)v27 + 9) = v34;
          *((_OWORD *)v27 + 6) = v32;
          *((_OWORD *)v27 + 7) = v33;
          __int128 v36 = *a2;
          __int128 v35 = a2[1];
          __int128 v37 = v27;
          if (v35 != *a2)
          {
            do
            {
              __int128 v38 = *((_OWORD *)v35 - 9);
              *((_OWORD *)v37 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v35 - 10);
              *((_OWORD *)v37 - 9) = v38;
              __int128 v39 = *((_OWORD *)v35 - 8);
              __int128 v40 = *((_OWORD *)v35 - 7);
              __int128 v41 = *((_OWORD *)v35 - 5);
              *((_OWORD *)v37 - 6) = *((_OWORD *)v35 - 6);
              *((_OWORD *)v37 - 5) = v41;
              *((_OWORD *)v37 - _Block_object_dispose(va, 8) = v39;
              *((_OWORD *)v37 - 7) = v40;
              __int128 v42 = *((_OWORD *)v35 - 4);
              __int128 v43 = *((_OWORD *)v35 - 3);
              __int128 v44 = *((_OWORD *)v35 - 2);
              *(_OWORD *)(v37 - 22) = *(_OWORD *)(v35 - 22);
              *((_OWORD *)v37 - 3) = v43;
              *((_OWORD *)v37 - 2) = v44;
              *((_OWORD *)v37 - 4) = v42;
              v37 -= 160;
              v35 -= 160;
            }

            while (v35 != v36);
            __int128 v35 = *a2;
          }

          int v21 = v27 + 160;
          *a2 = v37;
          a2[1] = v27 + 160;
          a2[2] = &v26[160 * v25];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          __int128 v14 = v48;
          *(_OWORD *)__int128 v12 = *(_OWORD *)buf;
          *((_OWORD *)v12 + 1) = v14;
          __int128 v15 = v49;
          __int128 v16 = v50;
          __int128 v17 = *(_OWORD *)v52;
          *((_OWORD *)v12 + 4) = v51;
          *((_OWORD *)v12 + 5) = v17;
          *((_OWORD *)v12 + 2) = v15;
          *((_OWORD *)v12 + 3) = v16;
          __int128 v18 = *(_OWORD *)&v52[16];
          __int128 v19 = v53;
          __int128 v20 = *(_OWORD *)&v54[16];
          *((_OWORD *)v12 + _Block_object_dispose(va, 8) = *(_OWORD *)v54;
          *((_OWORD *)v12 + 9) = v20;
          *((_OWORD *)v12 + 6) = v18;
          *((_OWORD *)v12 + 7) = v19;
          int v21 = v12 + 160;
        }

        a2[1] = v21;
      }
    }

    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    return 100LL;
  }

  else
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101857258);
    }
    uint64_t v8 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "HRRecoverySessionHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101857258);
      }
      LOWORD(v46[0]) = 0;
      __int128 v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "HRRecoverySessionHistory, DB not accessible",  v46,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLHRRecoverySessionRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<HRRecoverySession> &, BOOL) const",  "%s\n",  v45);
    }

    return 109LL;
  }

void sub_1007F423C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1007F4268(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1007F42C4(a1);
    return sub_1003B59A0( *(void *)(a1 + 80),  "HRRecoverySessionHistory",  (const char **)&off_101857278,  (const std::string::value_type **)&off_10198D550,  0);
  }

  return result;
}

uint64_t sub_1007F42C4(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "HRRecoverySessionHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "startTime";
    do
    {
      __int128 v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "HRRecoverySessionHistory", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        __int128 v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE HRRecoverySessionHistory ADD COLUMN ", 48LL);
        size_t v10 = strlen(v8);
        uint64_t v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        __int128 v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        unint64_t v13 = (const char *)sub_1003BCC40((int)(&off_101857278)[v3 + 7]);
        size_t v14 = strlen(v13);
        __int128 v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v17 = &v31;
        }
        else {
          __int128 v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        __int128 v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        int v21 = sub_10000CF44(&v31.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE HRRecoverySessionHistory SET ", 36LL);
        size_t v22 = strlen(v8);
        unint64_t v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v25 = &v29;
        }
        else {
          unint64_t v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        __int128 v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      uint64_t v8 = (&off_101857278)[v3 + 12];
      v3 += 6LL;
    }

    while (v3 != 84);
    uint64_t result = sub_1007F4B70( a1,  "HRRecoverySessionHistory",  (const char **)&off_101857278,  (const std::string::value_type **)&off_10198D550);
  }

  return result;
}

void sub_1007F4668( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void *sub_1007F4700@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "HRRecoverySessionHistory");
}

void *sub_1007F4710@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "HRRecoverySessionHistory");
}

uint64_t sub_1007F4720(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM HRRecoverySessionHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_1007F47B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F47D4(uint64_t a1)
{
  return sub_1007F4720(a1 - 72);
}

uint64_t sub_1007F47DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO HRRecoverySessionHistory (startTime, activityEndTime, workoutSessionId, workoutType, hrRecovery, lambd a, hrMax, hrMinAdjusted, recoveryOnsetTime, steadyStateHR, status, sessionHrRecovery, peakHR, hrRecoveryReference) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  v22);
    uint64_t v5 = *(void *)v22;
    uuid_unparse((const unsigned __int8 *)(a2 + 32), v22);
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v5);
    uint64_t result = sub_1003B7480(v6, 1, *(double *)(a2 + 8));
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003B7480(v7, 2, *(double *)(a2 + 16));
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003BC1F0(v8, 3, v22);
        if ((_DWORD)result)
        {
          __int128 v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003C28BC(v9, 4, *(_DWORD *)(a2 + 48));
          if ((_DWORD)result)
          {
            size_t v10 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003B7480(v10, 5, *(double *)(a2 + 56));
            if ((_DWORD)result)
            {
              uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              uint64_t result = sub_1003B7480(v11, 6, *(double *)(a2 + 64));
              if ((_DWORD)result)
              {
                __int128 v12 = (sqlite3_stmt *)sub_100019240(v5);
                uint64_t result = sub_1003B7480(v12, 7, *(double *)(a2 + 72));
                if ((_DWORD)result)
                {
                  unint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                  uint64_t result = sub_1003B7480(v13, 8, *(double *)(a2 + 80));
                  if ((_DWORD)result)
                  {
                    size_t v14 = (sqlite3_stmt *)sub_100019240(v5);
                    uint64_t result = sub_1003B7480(v14, 9, *(double *)(a2 + 88));
                    if ((_DWORD)result)
                    {
                      __int128 v15 = (sqlite3_stmt *)sub_100019240(v5);
                      uint64_t result = sub_1003B7480(v15, 10, *(double *)(a2 + 96));
                      if ((_DWORD)result)
                      {
                        uint64_t v16 = (sqlite3_stmt *)sub_100019240(v5);
                        uint64_t result = sub_1003C28BC(v16, 11, *(_DWORD *)(a2 + 104));
                        if ((_DWORD)result)
                        {
                          __int128 v17 = (sqlite3_stmt *)sub_100019240(v5);
                          uint64_t result = sub_1003B7480(v17, 12, *(double *)(a2 + 112));
                          if ((_DWORD)result)
                          {
                            uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
                            uint64_t result = sub_1003B7480(v18, 13, *(double *)(a2 + 120));
                            if ((_DWORD)result)
                            {
                              uint64_t v19 = (sqlite3_stmt *)sub_100019240(v5);
                              uint64_t result = sub_1003B7480(v19, 14, *(double *)(a2 + 128));
                              if ((_DWORD)result)
                              {
                                uint64_t v20 = *(void *)(a1 + 80);
                                int v21 = (sqlite3_stmt *)sub_100019240(v5);
                                uint64_t result = sub_1003BB2BC(v20, v21);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_1007F49E4(_Unwind_Exception *exception_object)
{
}

void sub_1007F4A0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1007F4A18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + _Block_object_dispose(va, 8) = sqlite3_column_double(v5, 1);
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t v8 = sqlite3_column_text(v7, 3);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 32));
  __int128 v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = sqlite3_column_int(v9, 4);
  size_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v10, 5);
  uint64_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v11, 6);
  __int128 v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v12, 7);
  unint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = sqlite3_column_double(v13, 8);
  size_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8_Block_object_dispose(va, 8) = sqlite3_column_double(v14, 9);
  __int128 v15 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v15, 10);
  uint64_t v16 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v16, 11);
  __int128 v17 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v17, 12);
  uint64_t v18 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 12sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = sqlite3_column_double(v18, 13);
  uint64_t v19 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 12_Block_object_dispose(va, 8) = sqlite3_column_double(v19, 14);
}

uint64_t sub_1007F4B70(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101857690);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      uint64_t v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(con st char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoverySession, DataProtectionPolicy = C LActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    __int128 v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      int v21 = &__p;
    }
    else {
      int v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      __int128 v28 = v143;
    }
    else {
      __int128 v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v34 = &v139;
    }
    else {
      __int128 v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v47 = &__p;
      }
      else {
        __int128 v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      __int128 v48 = v143;
    }
    else {
      __int128 v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    __int128 v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v54 = buf;
    }
    else {
      __int16 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    int v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v60 = buf;
    }
    else {
      __int16 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v69 = &__p;
    }
    else {
      uint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int16 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    __int16 v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v75 = &__p;
      }
      else {
        int v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    std::stringbuf::string_type v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      __int16 v79 = &__p;
    }
    else {
      __int16 v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    int v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    double v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v85 = &__p;
      }
      else {
        __int16 v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      int v86 = v143;
    }
    else {
      int v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    int v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    int v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    int v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v95 = &__p;
    }
    else {
      __int16 v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    int v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v103 = &__p;
        }
        else {
          int v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        uint64_t v104 = v141;
      }
      else {
        uint64_t v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      char v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v114 = buf;
      }
      else {
        __int128 v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      int v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v121 = &__p;
      }
      else {
        int v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      uint64_t v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      uint64_t v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        char v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(c onst char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      __int128 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int128 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(c onst char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_1007F5D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1007F6028(uint64_t a1)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT COUNT(*) FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL",  buf);
    uint64_t v2 = *(void *)buf;
    uint64_t v3 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sqlite3_step(v3) == 100)
    {
      uint64_t v4 = (sqlite3_stmt *)sub_100019240(v2);
      BOOL v5 = sqlite3_column_int(v4, 0) > 0;
      if (!v2) {
        return v5;
      }
      goto LABEL_12;
    }

    BOOL v5 = 0LL;
    if (v2) {
LABEL_12:
    }
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }

  else
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101857258);
    }
    uint64_t v6 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "HRRecoverySessionHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101857258);
      }
      v9[0] = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "HRRecoverySessionHistory, DB not accessible",  v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHRRecoverySessionRecorderDb::hasRecentSuccessfulEstimate() const",  "%s\n",  v8);
    }

    return 0LL;
  }

  return v5;
}

void sub_1007F622C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F6258(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  uint64_t v11 = a1 + 112;
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v12 = a1 + 72;
  v55[1] = a1 + 112;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 112);
  __int16 v56 = 256;
  if ((sub_100D8A92C(v12) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM HRRecoverySessionHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?",  buf);
    uint64_t v13 = *(void *)buf;
    v55[0] = *(void *)buf;
    *(_OWORD *)__int128 buf = 0u;
    __int128 v58 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    memset(v62, 0, 28);
    __int128 v63 = 0u;
    memset(v64, 0, 26);
    if (a5 >= a4)
    {
      size_t v14 = (sqlite3_stmt *)sub_100019240(v13);
      if (sub_1003B7480(v14, 1, a4))
      {
        __int128 v15 = (sqlite3_stmt *)sub_100019240(v13);
        if (sub_1003B7480(v15, 2, a5))
        {
          uint64_t v16 = (sqlite3_stmt *)sub_100019240(v13);
          if (sub_1003C28BC(v16, 3, a2))
          {
            while (!sub_1007F376C(v55, (uint64_t)buf))
            {
              std::string::size_type v17 = a3[1];
              unint64_t v18 = (unint64_t)a3[2];
              if ((unint64_t)v17 >= v18)
              {
                unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (_BYTE *)*a3) >> 5);
                unint64_t v28 = v27 + 1;
                if (v27 + 1 > 0x199999999999999LL) {
                  sub_100007008();
                }
                unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)*a3) >> 5);
                if (2 * v29 > v28) {
                  unint64_t v28 = 2 * v29;
                }
                if (v29 >= 0xCCCCCCCCCCCCCCLL) {
                  unint64_t v30 = 0x199999999999999LL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30) {
                  __int128 v31 = (char *)sub_1007F89DC((uint64_t)(a3 + 2), v30);
                }
                else {
                  __int128 v31 = 0LL;
                }
                std::stringbuf v32 = &v31[160 * v27];
                __int128 v33 = v58;
                *(_OWORD *)std::stringbuf v32 = *(_OWORD *)buf;
                *((_OWORD *)v32 + 1) = v33;
                __int128 v34 = v59;
                __int128 v35 = v60;
                __int128 v36 = *(_OWORD *)v62;
                *((_OWORD *)v32 + 4) = v61;
                *((_OWORD *)v32 + 5) = v36;
                *((_OWORD *)v32 + 2) = v34;
                *((_OWORD *)v32 + 3) = v35;
                __int128 v37 = *(_OWORD *)&v62[16];
                __int128 v38 = v63;
                __int128 v39 = *(_OWORD *)&v64[16];
                *((_OWORD *)v32 + _Block_object_dispose(va, 8) = *(_OWORD *)v64;
                *((_OWORD *)v32 + 9) = v39;
                *((_OWORD *)v32 + 6) = v37;
                *((_OWORD *)v32 + 7) = v38;
                char v41 = (char *)*a3;
                unsigned __int8 v40 = (char *)a3[1];
                char v42 = v32;
                if (v40 != *a3)
                {
                  do
                  {
                    __int128 v43 = *((_OWORD *)v40 - 9);
                    *(v42 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v40 - 10);
                    *(v42 - 9) = v43;
                    __int128 v44 = *((_OWORD *)v40 - 8);
                    __int128 v45 = *((_OWORD *)v40 - 7);
                    __int128 v46 = *((_OWORD *)v40 - 5);
                    *(v42 - 6) = *((_OWORD *)v40 - 6);
                    *(v42 - 5) = v46;
                    *(v42 - _Block_object_dispose(va, 8) = v44;
                    *(v42 - 7) = v45;
                    __int128 v47 = *((_OWORD *)v40 - 4);
                    __int128 v48 = *((_OWORD *)v40 - 3);
                    __int128 v49 = *((_OWORD *)v40 - 2);
                    *(_OWORD *)((char *)v42 - 22) = *(_OWORD *)(v40 - 22);
                    *(v42 - 3) = v48;
                    *(v42 - 2) = v49;
                    *(v42 - 4) = v47;
                    v42 -= 10;
                    v40 -= 160;
                  }

                  while (v40 != v41);
                  unsigned __int8 v40 = (char *)*a3;
                }

                uint64_t v26 = v32 + 160;
                *a3 = v42;
                a3[1] = v32 + 160;
                a3[2] = &v31[160 * v30];
                if (v40) {
                  operator delete(v40);
                }
              }

              else
              {
                __int128 v19 = v58;
                *std::string::size_type v17 = *(_OWORD *)buf;
                v17[1] = v19;
                __int128 v20 = v59;
                __int128 v21 = v60;
                __int128 v22 = *(_OWORD *)v62;
                v17[4] = v61;
                v17[5] = v22;
                uint64_t v17[2] = v20;
                v17[3] = v21;
                __int128 v23 = *(_OWORD *)&v62[16];
                __int128 v24 = v63;
                __int128 v25 = *(_OWORD *)&v64[16];
                _WORD v17[8] = *(_OWORD *)v64;
                v17[9] = v25;
                v17[6] = v23;
                v17[7] = v24;
                uint64_t v26 = v17 + 10;
              }

              a3[1] = v26;
            }
          }
        }
      }
    }

    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    uint64_t v51 = 100LL;
  }

  else
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101857258);
    }
    __int128 v50 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "HRRecoverySessionHistory not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101857258);
      }
      LOWORD(v55[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "HRRecoverySessionHistory not accessible",  v55,  2);
      __int16 v54 = (uint8_t *)v53;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoverySession> &) const",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }

    uint64_t v51 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  return v51;
}

void sub_1007F666C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1007F66B8(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  return sub_1007F6258(a1 - 464, a2, a3, a4, a5);
}

uint64_t sub_1007F66C0(uint64_t a1, void **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v46[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v47 = 256;
  if ((sub_100D8A92C(v6) & 1) != 0)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC", buf);
    uint64_t v7 = *(void *)buf;
    v46[0] = *(void *)buf;
    sub_1003C0454(*(void *)(a1 + 80));
    *(_OWORD *)__int128 buf = 0u;
    __int128 v49 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    memset(v53, 0, 28);
    __int128 v54 = 0u;
    memset(v55, 0, 26);
    while (!sub_1007F376C(v46, (uint64_t)buf))
    {
      uint64_t v8 = a2[1];
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (_BYTE *)*a2) >> 5);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x199999999999999LL) {
          sub_100007008();
        }
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)*a2) >> 5);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v21 = 0x199999999999999LL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          __int128 v22 = (char *)sub_1007F89DC((uint64_t)(a2 + 2), v21);
        }
        else {
          __int128 v22 = 0LL;
        }
        __int128 v23 = &v22[160 * v18];
        __int128 v24 = v49;
        *(_OWORD *)__int128 v23 = *(_OWORD *)buf;
        *((_OWORD *)v23 + 1) = v24;
        __int128 v25 = v50;
        __int128 v26 = v51;
        __int128 v27 = *(_OWORD *)v53;
        *((_OWORD *)v23 + 4) = v52;
        *((_OWORD *)v23 + 5) = v27;
        *((_OWORD *)v23 + 2) = v25;
        *((_OWORD *)v23 + 3) = v26;
        __int128 v28 = *(_OWORD *)&v53[16];
        __int128 v29 = v54;
        __int128 v30 = *(_OWORD *)&v55[16];
        *((_OWORD *)v23 + _Block_object_dispose(va, 8) = *(_OWORD *)v55;
        *((_OWORD *)v23 + 9) = v30;
        *((_OWORD *)v23 + 6) = v28;
        *((_OWORD *)v23 + 7) = v29;
        std::stringbuf v32 = (char *)*a2;
        __int128 v31 = (char *)a2[1];
        __int128 v33 = v23;
        if (v31 != *a2)
        {
          do
          {
            __int128 v34 = *((_OWORD *)v31 - 9);
            *(v33 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v31 - 10);
            *(v33 - 9) = v34;
            __int128 v35 = *((_OWORD *)v31 - 8);
            __int128 v36 = *((_OWORD *)v31 - 7);
            __int128 v37 = *((_OWORD *)v31 - 5);
            *(v33 - 6) = *((_OWORD *)v31 - 6);
            *(v33 - 5) = v37;
            *(v33 - _Block_object_dispose(va, 8) = v35;
            *(v33 - 7) = v36;
            __int128 v38 = *((_OWORD *)v31 - 4);
            __int128 v39 = *((_OWORD *)v31 - 3);
            __int128 v40 = *((_OWORD *)v31 - 2);
            *(_OWORD *)((char *)v33 - 22) = *(_OWORD *)(v31 - 22);
            *(v33 - 3) = v39;
            *(v33 - 2) = v40;
            *(v33 - 4) = v38;
            v33 -= 10;
            v31 -= 160;
          }

          while (v31 != v32);
          __int128 v31 = (char *)*a2;
        }

        std::string::size_type v17 = v23 + 160;
        *a2 = v33;
        a2[1] = v23 + 160;
        a2[2] = &v22[160 * v21];
        if (v31) {
          operator delete(v31);
        }
      }

      else
      {
        __int128 v10 = v49;
        _OWORD *v8 = *(_OWORD *)buf;
        v8[1] = v10;
        __int128 v11 = v50;
        __int128 v12 = v51;
        __int128 v13 = *(_OWORD *)v53;
        double v8[4] = v52;
        void v8[5] = v13;
        void v8[2] = v11;
        v8[3] = v12;
        __int128 v14 = *(_OWORD *)&v53[16];
        __int128 v15 = v54;
        __int128 v16 = *(_OWORD *)&v55[16];
        _WORD v8[8] = *(_OWORD *)v55;
        v8[9] = v16;
        v8[6] = v14;
        v8[7] = v15;
        std::string::size_type v17 = v8 + 10;
      }

      a2[1] = v17;
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v42 = 100LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101857578);
    }
    char v41 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "HRRecoverySessionHistory not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101857578);
      }
      LOWORD(v46[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "HRRecoverySessionHistory not accessible",  v46,  2);
      __int128 v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionAllRecords(std::vector<HRRecoverySession> &) const",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    uint64_t v42 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  return v42;
}

void sub_1007F6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1007F6AD0(uint64_t a1, void **a2)
{
  return sub_1007F66C0(a1 - 464, a2);
}

uint64_t sub_1007F6AD8(void *a1, void **a2, double a3, double a4)
{
  uint64_t v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v57);
  if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
    if (HIBYTE(v58)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10124B024(v8);
    __break(1u);
  }

  __int128 v52 = v57[1];
  operator delete(v57[0]);
  if (!v52) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v57);
  unint64_t v9 = sub_10000CF44(&v58, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(__int128 *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((SBYTE7(v62) & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (__int128 *)__p;
  }
  if ((SBYTE7(v62) & 0x80u) == 0) {
    uint64_t v11 = BYTE7(v62);
  }
  else {
    uint64_t v11 = *((void *)&__p + 1);
  }
  __int128 v12 = sub_10000CF44(v9, (uint64_t)p_p, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)&__p, &v59);
  if ((SBYTE7(v62) & 0x80u) == 0) {
    __int128 v14 = (char *)&__p;
  }
  else {
    __int128 v14 = (char *)__p;
  }
  sub_1003C0D54(v13, v14, &v55);
  uint64_t v15 = v55;
  uint64_t v55 = 0LL;
  uint64_t v56 = v15;
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__p);
  }
  __int128 v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    __int128 __p = 0u;
    __int128 v62 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    memset(v66, 0, 28);
    __int128 v67 = 0u;
    memset(v68, 0, 26);
    while (1)
    {
      uint64_t v18 = sub_1001BA11C((uint64_t)a1, &v56, (uint64_t)&__p);
      if ((_DWORD)v18) {
        break;
      }
      unint64_t v19 = a2[1];
      unint64_t v20 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v20)
      {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - (_BYTE *)*a2) >> 5);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x199999999999999LL) {
          sub_100007008();
        }
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - (void)*a2) >> 5);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v32 = 0x199999999999999LL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          __int128 v33 = (char *)sub_1007F89DC((uint64_t)(a2 + 2), v32);
        }
        else {
          __int128 v33 = 0LL;
        }
        __int128 v34 = &v33[160 * v29];
        __int128 v35 = v62;
        *(_OWORD *)__int128 v34 = __p;
        *((_OWORD *)v34 + 1) = v35;
        __int128 v36 = v63;
        __int128 v37 = v64;
        __int128 v38 = v66[0];
        *((_OWORD *)v34 + 4) = v65;
        *((_OWORD *)v34 + 5) = v38;
        *((_OWORD *)v34 + 2) = v36;
        *((_OWORD *)v34 + 3) = v37;
        __int128 v39 = v66[1];
        __int128 v40 = v67;
        __int128 v41 = v68[1];
        *((_OWORD *)v34 + _Block_object_dispose(va, 8) = v68[0];
        *((_OWORD *)v34 + 9) = v41;
        *((_OWORD *)v34 + 6) = v39;
        *((_OWORD *)v34 + 7) = v40;
        __int128 v43 = (char *)*a2;
        uint64_t v42 = (char *)a2[1];
        __int128 v44 = v34;
        if (v42 != *a2)
        {
          do
          {
            __int128 v45 = *((_OWORD *)v42 - 9);
            *(v44 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v42 - 10);
            *(v44 - 9) = v45;
            __int128 v46 = *((_OWORD *)v42 - 8);
            __int128 v47 = *((_OWORD *)v42 - 7);
            __int128 v48 = *((_OWORD *)v42 - 5);
            *(v44 - 6) = *((_OWORD *)v42 - 6);
            *(v44 - 5) = v48;
            *(v44 - _Block_object_dispose(va, 8) = v46;
            *(v44 - 7) = v47;
            __int128 v49 = *((_OWORD *)v42 - 4);
            __int128 v50 = *((_OWORD *)v42 - 3);
            __int128 v51 = *((_OWORD *)v42 - 2);
            *(_OWORD *)((char *)v44 - 22) = *(_OWORD *)(v42 - 22);
            *(v44 - 3) = v50;
            *(v44 - 2) = v51;
            *(v44 - 4) = v49;
            v44 -= 10;
            v42 -= 160;
          }

          while (v42 != v43);
          uint64_t v42 = (char *)*a2;
        }

        __int128 v28 = v34 + 160;
        *a2 = v44;
        a2[1] = v34 + 160;
        a2[2] = &v33[160 * v32];
        if (v42) {
          operator delete(v42);
        }
      }

      else
      {
        __int128 v21 = v62;
        *unint64_t v19 = __p;
        v19[1] = v21;
        __int128 v22 = v63;
        __int128 v23 = v64;
        __int128 v24 = v66[0];
        v19[4] = v65;
        v19[5] = v24;
        v19[2] = v22;
        v19[3] = v23;
        __int128 v25 = v66[1];
        __int128 v26 = v67;
        __int128 v27 = v68[1];
        v19[8] = v68[0];
        v19[9] = v27;
        v19[6] = v25;
        v19[7] = v26;
        __int128 v28 = v19 + 10;
      }

      a2[1] = v28;
    }

    uint64_t v15 = v56;
  }

  else
  {
    uint64_t v18 = 2LL;
  }

  uint64_t v56 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v57
  uint64_t v58 = v53;
  std::streambuf::~streambuf(&v59);
  std::ios::~ios(&v60);
  return v18;
}

void sub_1007F6EB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F6F28(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101857690);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)__int128 buf = 134349056;
        *(void *)__int128 v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101857690);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)__int128 buf = 68289539;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int128 v16 = (void *)(v14 + 8 * (v13 / 0x19));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 160 * (v13 % 0x19);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x19)) + 160 * (v22 % 0x19);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101857578);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101857578);
        }
        LOWORD(v41) = 0;
        LODWORD(v3_Block_object_dispose(va, 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 160LL;
      if (v17 - *v16 == 4000)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101857690);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      unint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  __int128 v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      __int128 v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 12LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 25LL;
  }

  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_1007F766C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_1007F76A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  __int128 v4 = *(_OWORD *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  __int128 v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 8sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = v6;
  *(_OWORD *)(a2 + memset(v21, 0, 32) = v4;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
  __n128 result = *(__n128 *)(a3 + 96);
  __int128 v8 = *(_OWORD *)(a3 + 112);
  __int128 v9 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 13_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 138);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = v9;
  *(__n128 *)(a2 + 96) = result;
  return result;
}

id *sub_1007F76D4(uint64_t a1, uint64_t a2, char a3)
{
  v38[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v38[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v38);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  memset(v47, 0, 32);
  memset(&v47[3], 0, 60);
  memset(&v47[7], 0, 42);
  int v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 104LL))(a1, v47);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v39,  2);
        __int128 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 8);
    double v8 = *((double *)v47 + 1);
    double v9 = v7 - *((double *)v47 + 1);
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101857690);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)__int128 buf = 134349312;
        double v44 = *((double *)v47 + 1);
        __int16 v45 = 2050;
        uint64_t v46 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        uint64_t v29 = *(void *)(a2 + 8);
        int v39 = 134349312;
        double v40 = *((double *)v47 + 1);
        __int16 v41 = 2050;
        uint64_t v42 = v29;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v39,  22);
        uint64_t v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
        if (v31 != buf) {
          free(v31);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 8);
      double v8 = *((double *)v47 + 1);
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)__int128 buf = 134217984;
          double v44 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101857690);
          }
          double v32 = *(double *)(a2 + 8);
          int v39 = 134217984;
          double v40 = v32;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v39));
          __int128 v34 = (uint8_t *)v33;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndS toreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v33);
          if (v34 != buf) {
            free(v34);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101857690);
        double v18 = v37;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 134217984;
        double v44 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101857690);
        }
        int v39 = 134217984;
        double v40 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v39));
        __int128 v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, v47, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_1007F7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1007F7E84(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10124B190(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_1007F80E4(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10124B2FC(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_1007F831C(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10124B468(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

uint64_t sub_1007F8544(uint64_t a1)
{
  return sub_1007F6F28(a1 - 72);
}

void sub_1007F854C(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_1007F8578(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1007F85A4(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v51);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
    if (HIBYTE(v52)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10124B5D4(v4);
    __break(1u);
  }

  uint64_t v48 = v51[1];
  operator delete(v51[0]);
  if (!v48) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v51);
    int v6 = sub_10000CF44(&v52, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a1 + 64))(&__p, a1);
    if ((SBYTE7(v56) & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (__int128 *)__p;
    }
    if ((SBYTE7(v56) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v56);
    }
    else {
      uint64_t v8 = *((void *)&__p + 1);
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v56) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)&__p, &v53);
    if ((SBYTE7(v56) & 0x80u) == 0) {
      uint64_t v11 = (char *)&__p;
    }
    else {
      uint64_t v11 = (char *)__p;
    }
    sub_1003C0D54(v10, v11, &v49);
    uint64_t v12 = v49;
    uint64_t v49 = 0LL;
    uint64_t v50 = v12;
    if (SBYTE7(v56) < 0) {
      operator delete((void *)__p);
    }
    sub_1003C0454(a1[10]);
    __int128 __p = 0u;
    __int128 v56 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    memset(v60, 0, 28);
    __int128 v61 = 0u;
    memset(v62, 0, 26);
    while (!sub_1001BA11C((uint64_t)a1, &v50, (uint64_t)&__p))
    {
      uint64_t v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a2) >> 5);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x199999999999999LL) {
          sub_100007008();
        }
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 5);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v26 = 0x199999999999999LL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26) {
          __int128 v27 = (char *)sub_1007F89DC((uint64_t)(a2 + 2), v26);
        }
        else {
          __int128 v27 = 0LL;
        }
        __int128 v28 = &v27[160 * v23];
        __int128 v29 = v56;
        *(_OWORD *)__int128 v28 = __p;
        *((_OWORD *)v28 + 1) = v29;
        __int128 v30 = v57;
        __int128 v31 = v58;
        __int128 v32 = v60[0];
        *((_OWORD *)v28 + 4) = v59;
        *((_OWORD *)v28 + 5) = v32;
        *((_OWORD *)v28 + 2) = v30;
        *((_OWORD *)v28 + 3) = v31;
        __int128 v33 = v60[1];
        __int128 v34 = v61;
        __int128 v35 = v62[1];
        *((_OWORD *)v28 + _Block_object_dispose(va, 8) = v62[0];
        *((_OWORD *)v28 + 9) = v35;
        *((_OWORD *)v28 + 6) = v33;
        *((_OWORD *)v28 + 7) = v34;
        double v37 = *a2;
        __int128 v36 = a2[1];
        uint64_t v38 = v28;
        if (v36 != *a2)
        {
          do
          {
            __int128 v39 = *((_OWORD *)v36 - 9);
            *((_OWORD *)v38 - 1sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *((_OWORD *)v36 - 10);
            *((_OWORD *)v38 - 9) = v39;
            __int128 v40 = *((_OWORD *)v36 - 8);
            __int128 v41 = *((_OWORD *)v36 - 7);
            __int128 v42 = *((_OWORD *)v36 - 5);
            *((_OWORD *)v38 - 6) = *((_OWORD *)v36 - 6);
            *((_OWORD *)v38 - 5) = v42;
            *((_OWORD *)v38 - _Block_object_dispose(va, 8) = v40;
            *((_OWORD *)v38 - 7) = v41;
            __int128 v43 = *((_OWORD *)v36 - 4);
            __int128 v44 = *((_OWORD *)v36 - 3);
            __int128 v45 = *((_OWORD *)v36 - 2);
            *(_OWORD *)(v38 - 22) = *(_OWORD *)(v36 - 22);
            *((_OWORD *)v38 - 3) = v44;
            *((_OWORD *)v38 - 2) = v45;
            *((_OWORD *)v38 - 4) = v43;
            v38 -= 160;
            v36 -= 160;
          }

          while (v36 != v37);
          __int128 v36 = *a2;
        }

        uint64_t v22 = v28 + 160;
        *a2 = v38;
        a2[1] = v28 + 160;
        a2[2] = &v27[160 * v26];
        if (v36) {
          operator delete(v36);
        }
      }

      else
      {
        __int128 v15 = v56;
        *(_OWORD *)uint64_t v13 = __p;
        *((_OWORD *)v13 + 1) = v15;
        __int128 v16 = v57;
        __int128 v17 = v58;
        __int128 v18 = v60[0];
        *((_OWORD *)v13 + 4) = v59;
        *((_OWORD *)v13 + 5) = v18;
        *((_OWORD *)v13 + 2) = v16;
        *((_OWORD *)v13 + 3) = v17;
        __int128 v19 = v60[1];
        __int128 v20 = v61;
        __int128 v21 = v62[1];
        *((_OWORD *)v13 + _Block_object_dispose(va, 8) = v62[0];
        *((_OWORD *)v13 + 9) = v21;
        *((_OWORD *)v13 + 6) = v19;
        *((_OWORD *)v13 + 7) = v20;
        uint64_t v22 = v13 + 160;
      }

      a2[1] = v22;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v46 = v50;
    uint64_t v50 = 0LL;
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
    }
    *(void **)((char *)v51
    uint64_t v52 = v47;
    std::streambuf::~streambuf(&v53);
    return std::ios::~ios(&v54);
  }

  return result;
}

void sub_1007F8940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  sub_1011F8850((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1007F89B0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_1007F89DC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    sub_1000070D4();
  }
  return operator new(160 * a2);
}

uint64_t sub_1007F8A20(uint64_t a1, double *a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_101998AF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_101998AF8))
  {
    *(void *)&__int128 v7 = 0xC00000000LL;
    __int128 v6 = xmmword_101337BEC;
    sub_1002C72A8(qword_101998AE0, &v6, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1002C7328, qword_101998AE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101998AF8);
  }

  __int16 v15 = 0;
  __int128 v6 = xmmword_1012E1E90;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v14, 0, sizeof(v14));
  __int128 v16 = xmmword_1012E1E90;
  uint64_t v17 = 0LL;
  int v18 = 0;
  uint64_t v19 = 0LL;
  v20[0] = 0LL;
  *(void *)((char *)v20 + 5) = 0LL;
  *(void *)((char *)&v20[1] + 6) = 0LL;
  char v21 = 0;
  memset(&v20[3], 0, 24);
  __int128 v22 = xmmword_1012E1E90;
  uint64_t v23 = 0LL;
  int v24 = 0;
  unint64_t v25 = 0xFFEFFFFFFFFFFFFFLL;
  int v36 = 0;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  int v31 = 0;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  memset(v35, 0, sizeof(v35));
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  unint64_t v39 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v40 = 0LL;
  int v41 = 0;
  uint64_t v47 = 0LL;
  __int16 v48 = 0;
  int v53 = 0;
  int v46 = 0;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v50 = 0u;
  __int128 v49 = 0u;
  char v51 = 0;
  memset(v52, 0, sizeof(v52));
  unint64_t v54 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  __int128 v56 = 0u;
  __int128 v55 = 0u;
  uint64_t v74 = 0LL;
  unint64_t v75 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v81 = 0LL;
  int v82 = 0;
  uint64_t v83 = 0LL;
  char v84 = 0;
  unint64_t v85 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v87 = 0LL;
  uint64_t v86 = 0LL;
  uint64_t v88 = 0x80000000800000LL;
  uint64_t v90 = 0LL;
  uint64_t v89 = 0LL;
  __int128 v91 = xmmword_1012E1EA0;
  uint64_t v92 = 0x80000000800000LL;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  uint64_t v95 = 0LL;
  unint64_t v96 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  int v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v105 = 0;
  int v106 = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v108 = 7LL;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  char v110 = 0;
  uint64_t v112 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v113 = 0LL;
  sub_100CDB578(a2, qword_101998AE0, (uint64_t)&v6);
  return sub_1007F8D14(a1, (uint64_t)a2, (uint64_t)&v6);
}

void sub_1007F8CF4(_Unwind_Exception *a1)
{
}

uint64_t sub_1007F8D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a3 + 320);
  double v7 = 0.0;
  double v8 = 0.0;
  if (v6 > 0.0) {
    double v8 = *(double *)(a3 + 192) / v6;
  }
  double v9 = *(double *)(a3 + 880);
  if (v9 > 0.0) {
    double v7 = *(double *)(a3 + 912) / v9;
  }
  int v10 = *(_DWORD *)(a3 + 24);
  unsigned int v11 = *(unsigned __int8 *)(a3 + 1352);
  float v111 = *(float *)(a3 + 1360);
  float v112 = *(float *)(a3 + 1356);
  LODWORD(v107) = *(_DWORD *)(a3 + 1364);
  double v12 = *(double *)(a3 + 328);
  double v13 = *(double *)(a3 + 232);
  double v118 = *(double *)(a3 + 240);
  int v110 = *(_DWORD *)(a3 + 872);
  uint64_t v14 = *(void *)(a3 + 8);
  HIBYTE(v12sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = 0;
  unsigned int v15 = sub_1007F9D4C(a3, (_BYTE *)&v120 + 7);
  unsigned int v115 = sub_100BE0E80((void *)a2, a3);
  double v108 = *(double *)(a3 + 296);
  uint64_t v16 = *(void *)(a3 + 192);
  sub_1007F9E44((void **)a1, (double *)a3, a2 + 328, (uint64_t)&buf);
  *(_OWORD *)(a1 + 24) = buf;
  uint64_t v119 = a1;
  *(void *)(a1 + 4sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = *(void *)v171;
  double v18 = *(double *)(a3 + 288);
  BOOL v19 = v18 != -1.79769313e308;
  double v20 = *(double *)(a3 + 328);
  if (v20 <= -1.0) {
    BOOL v19 = 0;
  }
  double v21 = *(double *)(a3 + 656);
  uint64_t v116 = v14;
  if (!v19 || v12 >= 0.44704 || v21 == -1.79769313e308 || !HIBYTE(v120) || v15)
  {
    if (v12 < 0.44704) {
      LOBYTE(v19) = 0;
    }
    if (v19)
    {
      int v23 = 7;
      int v24 = 1;
    }

    else
    {
      int v24 = v21 != -1.79769313e308 && HIBYTE(v120) != 0 && v15 != 0;
      int v23 = 7;
    }

    int v22 = 1;
  }

  else
  {
    BOOL v17 = sub_10006419C(v115);
    int v22 = 0;
    if (v17) {
      int v23 = 0;
    }
    else {
      int v23 = 11;
    }
    double v18 = *(double *)(a3 + 288);
    double v20 = *(double *)(a3 + 328);
    double v21 = *(double *)(a3 + 656);
    int v24 = 1;
  }

  BOOL v27 = v20 > -1.0 && v18 != -1.79769313e308;
  double v109 = v7;
  if (!v27 || v12 < 0.44704 || v12 >= 1.56464 || v21 == -1.79769313e308 || !HIBYTE(v120) || v15)
  {
    BOOL v30 = v12 >= 1.56464 && v27 || v21 != -1.79769313e308 && HIBYTE(v120) != 0 && v15 != 0;
    v24 &= v30;
  }

  else if (*(double *)(a3 + 168) == -1.79769313e308 || !*(_DWORD *)(a3 + 184) || (double v28 = fabs(v8), v28 < 0.03))
  {
    int v22 = 0;
    int v23 = 5;
  }

  else if (v28 > 0.03)
  {
    int v22 = 0;
    int v23 = 4;
  }

  char v33 = !v27;
  if (v6 >= 8.9408) {
    char v33 = 1;
  }
  if ((v33 & 1) != 0 || v21 == -1.79769313e308 || !HIBYTE(v120) || !v15)
  {
    BOOL v39 = v6 >= 8.9408 && v27 || v21 != -1.79769313e308 && HIBYTE(v120) != 0 && v15 == 0;
    v24 &= v39;
  }

  else
  {
    int v22 = 0;
    int v23 = 1;
    if (*(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184))
    {
      int v22 = 0;
      else {
        int v23 = 1;
      }
    }
  }

  float v42 = v13;
  sub_1007F9F10(v17, a3);
  float v44 = v43;
  HIDWORD(v107) = v15;
  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_1007F9FC8(v119, a3, (float *)(a2 + 328)) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v8 > -0.005
    && *(double *)(v119 + 40) > -0.005
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 2;
LABEL_147:
    uint64_t v48 = v119;
    goto LABEL_182;
  }

  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_1007F9FC8(v119, a3, (float *)(a2 + 328)) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && (v8 <= -0.005 || *(double *)(v119 + 40) <= -0.005)
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 13;
    goto LABEL_147;
  }

  if (*(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && v12 >= 0.44704
    && v118 >= 0.4
    && (sub_1007F9FC8(v119, a3, (float *)(a2 + 328)) == 2
     || sub_1007F9FC8(v119, a3, (float *)(a2 + 328)) == 1)
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 3;
    goto LABEL_147;
  }

  double v45 = *(double *)(a3 + 1344);
  double v46 = *(double *)(a3 + 288);
  double v47 = *(double *)(a3 + 328);
  if (v23 == 7
    && v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 0.44704
    && v12 < 8.9408
    && v44 > 0.5
    && (v42 <= 120.0 || v118 < 0.4)
    || v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 8.9408
    && v44 > 0.5
    && v42 <= 120.0
    && v118 >= 0.4)
  {
    int v22 = 0;
    int v23 = 12;
    goto LABEL_147;
  }

  BOOL v49 = v46 != -1.79769313e308;
  if (v47 <= -1.0) {
    BOOL v49 = 0;
  }
  uint64_t v48 = v119;
  if (!v49) {
    goto LABEL_162;
  }
  if (*(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v12 >= 11.176
    && *(float *)(a3 + 1364) < 0.2
    && v8 > -0.005)
  {
LABEL_160:
    int v22 = 0;
    int v23 = 12;
    goto LABEL_182;
  }

  if (v6 > 8.9408)
  {
LABEL_162:
    double v50 = *(double *)(a3 + 264);
    double v51 = *(double *)(a3 + 240);
    if (v50 != -1.79769313e308 && v51 >= 0.8)
    {
      if (!sub_1007F9FC8(v119, a3, (float *)(a2 + 328)))
      {
        BOOL v52 = 1;
LABEL_170:
        uint64_t v48 = v119;
        goto LABEL_173;
      }

      double v50 = *(double *)(a3 + 264);
      double v51 = *(double *)(a3 + 240);
    }

    BOOL v52 = v50 != -1.79769313e308;
    if (v51 < 0.8) {
      BOOL v52 = 0;
    }
    if (v42 <= 120.0) {
      BOOL v52 = 0;
    }
    goto LABEL_170;
  }

  BOOL v52 = 1;
LABEL_173:
  BOOL v53 = 0;
  v24 &= v52 || v53;
LABEL_182:
  sub_1007FA060((unsigned __int16 *)v48, a3);
  BOOL v55 = sub_1007FA104(v48);
  BOOL v56 = *(double *)(a3 + 288) != -1.79769313e308;
  if (v6 > 22.352 && v56)
  {
    BOOL v57 = *(double *)(a3 + 168) == -1.79769313e308 || *(_DWORD *)(a3 + 184) == 0;
    int v58 = !v57;
    if (!v57 && v8 > -0.005 && *(double *)(v48 + 40) > -0.005)
    {
      int v59 = 2;
LABEL_216:
      uint64_t v62 = v116;
      goto LABEL_217;
    }

    if (v58 && (v8 <= -0.005 || *(double *)(v48 + 40) <= -0.005))
    {
      int v59 = 13;
      goto LABEL_216;
    }
  }

  if (v6 <= 22.352) {
    int v60 = v24;
  }
  else {
    int v60 = 0;
  }
  if ((v60 & v56) != 0) {
    int v61 = 6;
  }
  else {
    int v61 = 7;
  }
  if (!v22) {
    int v61 = v23;
  }
  if (v55) {
    int v59 = 2;
  }
  else {
    int v59 = v61;
  }
  uint64_t v62 = v116;
  if (v59 == 7)
  {
    if ((v10 - 1) >= 2 && (v112 >= 4.0 || v111 >= 1.045))
    {
      int v59 = 7;
      if (v10 == 64 || v10 == 16)
      {
        if (v110) {
          BOOL v80 = v11 == 0;
        }
        else {
          BOOL v80 = 0;
        }
        if (v80) {
          int v59 = 10;
        }
        else {
          int v59 = 7;
        }
      }
    }

    else
    {
      int v59 = 9;
    }
  }

uint64_t sub_1007F9D4C(uint64_t a1, _BYTE *a2)
{
  double v2 = *(double *)(a1 + 328);
  BOOL v4 = *(double *)(a1 + 288) == -1.79769313e308 || v2 <= -1.0 || *(double *)(a1 + 656) == -1.79769313e308;
  if (v4
    || (int v6 = *(_BYTE *)(a1 + 816) & 0xFE, v6 == 2)
    && (*(double *)(a1 + 168) != -1.79769313e308 ? (BOOL v7 = *(_DWORD *)(a1 + 184) == 0) : (BOOL v7 = 1), v7))
  {
    uint64_t v5 = 0LL;
    *a2 = 0;
  }

  else
  {
    *a2 = 1;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 872);
    double v8 = *(double *)(a1 + 880);
    double v9 = 0.0;
    if (v8 > 0.0) {
      double v9 = *(double *)(a1 + 912) / v8;
    }
    if (v9 <= v2 * 0.7) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = v5;
    }
    if (v6 == 2 && *(double *)(a1 + 168) != -1.79769313e308 && *(_DWORD *)(a1 + 184) != 0)
    {
      double v11 = *(double *)(a1 + 320);
      double v12 = 0.0;
      if (v11 > 0.0) {
        double v12 = *(double *)(a1 + 192) / v11;
      }
      if (fabs(v12) > 0.03) {
        return 0LL;
      }
    }
  }

  return v5;
}

double sub_1007F9E44@<D0>(void **a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = a2[40];
  double v8 = a2[24];
  if (v7 <= 0.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = v8 / v7;
  }
  double v10 = fabs(v8);
  float v11 = v8;
  if (v10 > v7 * 0.1) {
    float v11 = 0.0;
  }
  float v12 = v7;
  sub_100C39A28(v12, v11, *(float *)(a3 + 12));
  double v13 = a2[1];
  *(double *)&__int128 v16 = v13;
  *((double *)&v16 + 1) = v14;
  double v17 = v9;
  if (a2[36] != -1.79769313e308 && a2[41] > -1.0) {
    sub_1007FA1B0(a1, &v16);
  }
  return sub_1007FA2FC((uint64_t *)a1, a4, v13);
}

void sub_1007F9F10(uint64_t a1, uint64_t a2)
{
  __int128 v6 = xmmword_101337C04;
  int v7 = -1056275379;
  float v3 = *(double *)(a2 + 328);
  float v4 = log10f(*(float *)(a2 + 1368));
  *(float *)double v9 = v3;
  *(float *)&v9[1] = v4 * 10.0;
  int v5 = *(_DWORD *)(a2 + 1372);
  v9[2] = *(_DWORD *)(a2 + 1356);
  v9[3] = v5;
  sub_10050D3D4((uint64_t)v9, (float *)&v8, (int *)&v6, 2LL, 4LL);
}

uint64_t sub_1007F9FC8(uint64_t a1, uint64_t a2, float *a3)
{
  float v4 = fmin((a3[7] - *(double *)(a2 + 232)) / (a3[7] - a3[6]), 1.0);
  float v5 = sub_100D086F8(v4, a3[5]) * a3[4];
  if (v5 <= 0.0) {
    return 0LL;
  }
  double v6 = v5;
  double v7 = *(double *)(a1 + 32);
  if (v7 > v6 + 15.0) {
    return 1LL;
  }
  if (v7 <= v6 + v6) {
    return 0LL;
  }
  else {
    return 2LL;
  }
}

unsigned __int16 *sub_1007FA060(unsigned __int16 *result, uint64_t a2)
{
  if (*(double *)(a2 + 168) == -1.79769313e308 || *(_DWORD *)(a2 + 184) == 0)
  {
    BOOL v3 = 0;
  }

  else
  {
    BOOL v3 = *(double *)(a2 + 288) != -1.79769313e308;
  }

  double v4 = *(double *)(a2 + 320);
  double v5 = 0.0;
  if (v4 > 0.0) {
    double v5 = *(double *)(a2 + 192) / v4;
  }
  if (fabs(v5) >= 0.03) {
    BOOL v3 = 0;
  }
  *((_DWORD *)result + 12) = 0;
  return result;
}

BOOL sub_1007FA104(uint64_t a1)
{
  if (*(_WORD *)(a1 + 50) != 3) {
    return 0LL;
  }
  uint64_t v1 = (unsigned __int16 *)(a1 + 48);
  double v2 = *(double *)sub_1006B4618((unsigned __int16 *)(a1 + 48), 0LL);
  uint64_t v3 = 1LL;
  double v4 = v2 - *(double *)sub_1006B4618(v1, 1uLL);
  double v5 = *(double *)sub_1006B4618(v1, 1uLL);
  double v6 = v5 - *(double *)sub_1006B4618(v1, 2uLL);
  if (v4 < 3.0 || v6 < 3.0) {
    return v6 <= -3.0 && v4 <= -3.0;
  }
  return v3;
}

void sub_1007FA1B0(void **a1, __int128 *a2)
{
  double v4 = (char *)*a1;
  double v5 = (char *)a1[1];
  uint64_t v6 = v5 - (_BYTE *)*a1;
  if (v5 == *a1 || *(double *)a2 - *((double *)v5 - 3) > 0.0)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    int v8 = (char *)a1[2];
    if (v5 >= v8)
    {
      uint64_t v11 = v6 / 24;
      unint64_t v12 = v6 / 24 + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555LL) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unsigned int v15 = (char *)sub_10000701C(v7, v14);
      }
      else {
        unsigned int v15 = 0LL;
      }
      __int128 v16 = &v15[24 * v11];
      double v17 = &v15[24 * v14];
      __int128 v18 = *a2;
      *((void *)v16 + 2) = *((void *)a2 + 2);
      *(_OWORD *)__int128 v16 = v18;
      double v10 = v16 + 24;
      double v20 = (char *)*a1;
      BOOL v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *((void *)v16 - 1) = *((void *)v19 - 1);
          *(_OWORD *)(v16 - 24) = v21;
          v16 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        BOOL v19 = (char *)*a1;
      }

      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      __int128 v9 = *a2;
      *((void *)v5 + 2) = *((void *)a2 + 2);
      *(_OWORD *)double v5 = v9;
      double v10 = v5 + 24;
    }

    a1[1] = v10;
  }

double sub_1007FA2FC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = xmmword_1012E0070;
  uint64_t v6 = (__int128 *)*a1;
  double v5 = (__int128 *)a1[1];
  uint64_t v7 = v6;
  if (v6 == v5)
  {
LABEL_6:
    double v5 = v7;
  }

  else
  {
    double v8 = a3 + -30.0;
    __int128 v9 = v6;
    while (*(double *)v9 >= v8)
    {
      __int128 v9 = (__int128 *)((char *)v9 + 24);
      if (v9 == v5)
      {
        uint64_t v7 = v5;
        goto LABEL_6;
      }
    }

    if (v9 != v5)
    {
      double v10 = (__int128 *)((char *)v9 + 24);
      if ((__int128 *)((char *)v9 + 24) != v5)
      {
        do
        {
          if (*(double *)v10 >= v8)
          {
            __int128 v11 = *v10;
            *((void *)v9 + 2) = *((void *)v10 + 2);
            __int128 *v9 = v11;
            __int128 v9 = (__int128 *)((char *)v9 + 24);
          }

          double v10 = (__int128 *)((char *)v10 + 24);
        }

        while (v10 != v5);
        uint64_t v6 = (__int128 *)*a1;
        double v5 = (__int128 *)a1[1];
      }
    }

    if (v9 != v5)
    {
      double v5 = v9;
      a1[1] = (uint64_t)v9;
    }
  }

  int v12 = -1431655765 * ((unint64_t)((char *)v5 - (char *)v6) >> 3);
  *(_DWORD *)a2 = v12;
  if (v6 == v5)
  {
    double v14 = 0.0;
    double v13 = 0.0;
  }

  else
  {
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      double v13 = v13 + fmax(*((double *)v6 + 1), 0.0);
      double v14 = v14 + *((double *)v6 + 2);
      uint64_t v6 = (__int128 *)((char *)v6 + 24);
    }

    while (v6 != v5);
  }

  double result = v14 / (double)v12;
  *(double *)(a2 + _Block_object_dispose(va, 8) = v13 / (double)v12;
  *(double *)(a2 + 16) = result;
  return result;
}

unsigned __int16 *sub_1007FA448(unsigned __int16 *result, void *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  *(void *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *double result = v4 + 1 - v3;
  }

  else
  {
    result[1] = v2 + 1;
  }

  return result;
}

void sub_1007FA49C(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_1007FA4C8()
{
  if (qword_101998B00 != -1) {
    dispatch_once(&qword_101998B00, &stru_1018576D0);
  }
  return qword_1019A1760;
}

uint64_t sub_1007FA50C()
{
  unsigned __int8 v0 = operator new(0x30uLL);
  uint64_t result = sub_1006DC9EC((uint64_t)v0, (uint64_t)"CLProximityNotifier", 1);
  *unsigned __int8 v0 = off_101857700;
  v0[4] = 0LL;
  v0[5] = 0LL;
  qword_1019A1760 = (uint64_t)v0;
  return result;
}

void sub_1007FA55C(_Unwind_Exception *a1)
{
}

void *sub_1007FA570(void *a1)
{
  *a1 = off_101857700;
  sub_1007FA5CC((uint64_t)a1, 0, 0LL);
  sub_10000AE14((uint64_t)(a1 + 4));
  return sub_1006DCAA8(a1);
}

void sub_1007FA5B8(void *a1)
{
  uint64_t v1 = sub_1007FA570(a1);
  operator delete(v1);
}

void sub_1007FA5CC(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    if (!*(void *)(a1 + 32))
    {
      double v8 = (uint64_t *)sub_10071542C();
      uint64_t v14 = 0x80000FF00LL;
      char v15 = 0;
      sub_10121B774(v8, (uint64_t)&v14, (uint64_t *)&v16);
      sub_10005F550((uint64_t)v7, &v16);
      __int128 v9 = (std::__shared_weak_count *)*((void *)&v16 + 1);
      if (*((void *)&v16 + 1))
      {
        double v10 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      sub_10071A6F0(*v7, 14);
    }

    if (a3)
    {
      int v12 = sub_1007FA6A4;
      uint64_t v13 = a1;
    }

    else
    {
      int v12 = 0LL;
      uint64_t v13 = 0LL;
    }

    sub_100719D78((uint64_t *)*v7, (uint64_t)v12, v13);
  }

uint64_t sub_1007FA6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 14)
  {
    int IntegerValue = IOHIDEventGetIntegerValue(a4, 917504LL);
    unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    double v9 = sub_101171C7C(TimeStamp);
    int v10 = IntegerValue;
    return sub_1006DD528(a1, 0LL, (uint64_t)&v9, 16LL);
  }

  return result;
}

uint64_t sub_1007FA720(uint64_t a1)
{
  *(void *)a1 = &off_101857758;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 1065353216;
  uint64_t v2 = (float *)(a1 + 8);
  uint64_t v3 = sub_1006E27E8();
  sub_100413284(v3, &v8);
  sub_1002A81F8(v8, "StatCycleModelMetsScale", v2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_1007FA7BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1007FA7D4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208])
    {
      sub_100253308(*(void *)(a3 + 8));
      return sub_100253308(*(void *)(a3 + 64));
    }
  }

  return result;
}

uint64_t sub_1007FA874(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48LL))(*(void *)(a3 + 8));
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void, double))(**(void **)(a3 + 64) + 48LL))(*(void *)(a3 + 64), a1);
  }
  return result;
}

void sub_1007FA8D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 288));
  *(_OWORD *)a2 = xmmword_101337C40;
  *(void *)(a2 + 16) = 0x408CDDEA00000000LL;
  *(_DWORD *)(a2 + 24) = 3;
  float v5 = 4.4021;
  if (isTypeStatic) {
    float v6 = 1.3;
  }
  else {
    float v6 = 4.4021;
  }
  *((float *)&v47 + 1) = v6;
  *(float *)(a2 + 2_Block_object_dispose(va, 8) = v6;
  *(void *)(a2 + memset(v21, 0, 32) = 0x300000003LL;
  int v7 = *(_DWORD *)(a1 + 1364);
  float v8 = *(float *)(a1 + 1368);
  float v9 = *(float *)(a1 + 1372);
  float v10 = *(float *)(a1 + 1380);
  float v11 = *(float *)(a1 + 1384);
  float v12 = 0.0;
  if (sub_1003DBFB4(a1))
  {
    LODWORD(v47) = v7;
    float v13 = 4.4021;
    if (*(double *)(a1 + 600) < *(double *)a1)
    {
      float v14 = *(double *)(a1 + 560);
      double v15 = v11;
      double v16 = v10;
      double v17 = v14;
      double v46 = v16;
      float v18 = (v16 - v14) / (v16 - v11);
      float v19 = v8;
      float v20 = v8 * sub_100D086F8(v18, v9);
      if ((float)(1.0 - v18) <= 0.2)
      {
        float v5 = 2.1;
        if (v20 >= 2.1) {
          float v13 = v20;
        }
        else {
          float v13 = 2.1;
        }
        if (v20 >= 2.1) {
          int v21 = 1;
        }
        else {
          int v21 = 3;
        }
        if (isTypeStatic) {
          float v23 = 1.3;
        }
        else {
          float v23 = 2.1;
        }
        if (v20 >= v23) {
          float v22 = v20;
        }
        else {
          float v22 = v23;
        }
      }

      else
      {
        float v5 = 4.4021;
        if (v20 >= 4.4021) {
          float v13 = v20;
        }
        else {
          float v13 = 4.4021;
        }
        if (v20 >= 4.4021) {
          int v21 = 1;
        }
        else {
          int v21 = 3;
        }
        float v22 = v13;
      }

      *(float *)a2 = v20;
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 0;
      *(float *)(a2 + 12) = v5;
      *(_DWORD *)(a2 + 16) = 0;
      *(float *)(a2 + 2sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = v13;
      *(_DWORD *)(a2 + 24) = v21;
      *(float *)(a2 + 2_Block_object_dispose(va, 8) = v22;
      *(_DWORD *)(a2 + memset(v21, 0, 32) = v21;
      *(_DWORD *)(a2 + 36) = 0;
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101857798);
      }
      int v24 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
      {
        double v25 = *(double *)(a1 + 120);
        double v26 = *(double *)(a1 + 128);
        uint64_t v27 = *(void *)(a1 + 600);
        *(_DWORD *)__int128 buf = 134220288;
        double v69 = v25;
        __int16 v70 = 2048;
        double v71 = v26;
        __int16 v72 = 2048;
        double v73 = v17;
        __int16 v74 = 2048;
        double v75 = v46;
        __int16 v76 = 2048;
        double v77 = v15;
        __int16 v78 = 2048;
        double v79 = v19;
        __int16 v80 = 2048;
        double v81 = v26 - v25;
        __int16 v82 = 2048;
        double v83 = *(float *)&v47;
        __int16 v84 = 2048;
        double v85 = v13;
        __int16 v86 = 2048;
        uint64_t v87 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f",  buf,  0x66u);
      }

      *((float *)&v47 + 1) = v22;
      if (sub_1002921D0(115, 2))
      {
        double v38 = v17;
        bzero(buf, 0x65CuLL);
        double v39 = v15;
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101857798);
        }
        float v12 = v20;
        double v40 = *(double *)(a1 + 120);
        double v41 = *(double *)(a1 + 128);
        uint64_t v42 = *(void *)(a1 + 600);
        int v48 = 134220288;
        double v49 = v40;
        __int16 v50 = 2048;
        double v51 = v41;
        __int16 v52 = 2048;
        double v53 = v38;
        __int16 v54 = 2048;
        double v55 = v46;
        __int16 v56 = 2048;
        double v57 = v39;
        __int16 v58 = 2048;
        double v59 = v19;
        __int16 v60 = 2048;
        double v61 = v41 - v40;
        __int16 v62 = 2048;
        double v63 = *(float *)&v47;
        __int16 v64 = 2048;
        double v65 = v13;
        __int16 v66 = 2048;
        uint64_t v67 = v42;
        LODWORD(v45) = 102;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f",  COERCE_DOUBLE(&v48),  v45,  v46,  v47);
        float v44 = (uint8_t *)v43;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v43);
        if (v44 != buf) {
          free(v44);
        }
      }

      else
      {
        float v12 = v20;
      }
    }
  }

  else
  {
    float v13 = 4.4021;
  }

  double v28 = 0.0;
  if (*(_BYTE *)(a1 + 352))
  {
    float v29 = *((float *)&v47 + 1);
    if (*(double *)(a1 + 1040) > 0.0)
    {
      float v30 = sub_100F290B8(*(double *)(a1 + 1152), *(float *)(a1 + 1364));
      *(float *)(a2 + _Block_object_dispose(va, 8) = v30;
      if (v13 < v30)
      {
        *(float *)(a2 + 2sub_100222B94(v14, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0) = v30;
        *(_DWORD *)(a2 + 24) = 4;
        float v13 = v30;
      }

      if (*((float *)&v47 + 1) < v30)
      {
        *(float *)(a2 + 2_Block_object_dispose(va, 8) = v30;
        *(_DWORD *)(a2 + memset(v21, 0, 32) = 4;
        float v29 = v30;
      }

      if (v5 <= v30) {
        float v5 = v30;
      }
      *(float *)(a2 + 12) = v5;
      double v28 = v30;
    }
  }

  else
  {
    float v29 = *((float *)&v47 + 1);
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101857798);
  }
  int v31 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    double v32 = *(double *)(a1 + 112);
    double v33 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)__int128 buf = 134219520;
    double v69 = v32;
    __int16 v70 = 2048;
    double v71 = v12;
    __int16 v72 = 2048;
    double v73 = v28;
    __int16 v74 = 2048;
    double v75 = v13;
    __int16 v76 = 2048;
    double v77 = v33;
    __int16 v78 = 2048;
    double v79 = v29;
    __int16 v80 = 2048;
    double v81 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f, truthMets, %f, metsPE, %f",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101857798);
    }
    double v34 = *(double *)(a1 + 112);
    double v35 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    int v48 = 134219520;
    double v49 = v34;
    __int16 v50 = 2048;
    double v51 = v12;
    __int16 v52 = 2048;
    double v53 = v28;
    __int16 v54 = 2048;
    double v55 = v13;
    __int16 v56 = 2048;
    double v57 = v35;
    __int16 v58 = 2048;
    double v59 = v29;
    __int16 v60 = 2048;
    double v61 = v5;
    LODWORD(v45) = 72;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f, truthMets, %f, metsPE, %f",  COERCE_DOUBLE(&v48),  v45,  v46,  v47);
    uint64_t v37 = (uint8_t *)v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v36);
    if (v37 != buf) {
      free(v37);
    }
  }

void sub_1007FAF44(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_1007FAF70(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

unint64_t sub_1007FAF94(void *a1, void *a2, unsigned int a3)
{
  double v35 = 0LL;
  int v36 = 0LL;
  uint64_t v37 = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  double v34 = 0.0;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  sub_1002A82BC(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", &v34);
  float v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    float v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v34 <= 0.0)
  {
    uint64_t v17 = sub_1002F8DDC();
    sub_1002A82BC(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v34);
  }

  else
  {
    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v34);
    uint64_t v12 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v12 + 944LL))(v12);
    uint64_t v13 = sub_1006E27E8();
    sub_100413284(v13, buf);
    sub_1002A667C(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", 0xFFFFFFFFLL);
    float v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      double v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if ((*(unsigned int (**)(void, char **, uint64_t, unint64_t, void, double, double))(*(void *)*a1 + 24LL))( *a1,  &v35,  1LL,  a3 / 0x78uLL,  0LL,  v34,  Current) != 100)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018577B8);
    }
    float v18 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v34;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLPredictedWalkDistanceCompanionSyncManager: Failed to fetch bouts for time range, startTime : %f, endTime: %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018577B8);
      }
      int v39 = 134218240;
      double v40 = v34;
      __int16 v41 = 2048;
      double v42 = Current;
      LODWORD(v33) = 22;
      double v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "CLPredictedWalkDistanceCompanionSyncManager: Failed to fetch bouts for time range, startTime : %f, endTime: %f",  COERCE_DOUBLE(&v39),  v33);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "size_t CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)",  "%s\n",  v32);
      if (v32 != buf) {
        free(v32);
      }
    }
  }

  a1[2] = 0xBFF0000000000000LL;
  float v19 = v35;
  if (v35 == v36)
  {
    float v30 = v35;
    if (!v35) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  a1[2] = *((void *)v36 - 13);
  id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v21 = v35;
  float v22 = v36;
  if (v35 != v36)
  {
    do
    {
      __int128 v23 = *v21;
      __int128 v24 = v21[1];
      __int128 v25 = v21[3];
      __int128 v44 = v21[2];
      __int128 v45 = v25;
      *(_OWORD *)__int128 buf = v23;
      *(_OWORD *)&uint8_t buf[16] = v24;
      __int128 v26 = v21[4];
      __int128 v27 = v21[5];
      __int128 v28 = v21[6];
      uint64_t v49 = *((void *)v21 + 14);
      __int128 v47 = v27;
      __int128 v48 = v28;
      __int128 v46 = v26;
      float v29 = -[CLPredictedWalkDistanceData initWithPredictedWalkDistanceBoutEntry:]( objc_alloc(&OBJC_CLASS___CLPredictedWalkDistanceData),  "initWithPredictedWalkDistanceBoutEntry:",  buf);
      [v20 addObject:v29];

      int v21 = (_OWORD *)((char *)v21 + 120);
    }

    while (v21 != (_OWORD *)v22);
  }

  [a2 setObject:v20 forKey:@"PredictedWalkDistanceBoutKey"];
  float v30 = v35;
  float v19 = v36;
  if (v35)
  {
LABEL_23:
    int v36 = v30;
    operator delete(v30);
  }

void sub_1007FB3BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1007FB41C(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 16);
  if (*(double *)(result + 16) > 0.0)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018577B8);
    }
    uint64_t v2 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Saving last Cold Storage sync timestamp: %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018577B8);
      }
      uint64_t v6 = *v1;
      int v8 = 134217984;
      uint64_t v9 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "Saving last Cold Storage sync timestamp: %f",  COERCE_DOUBLE(&v8));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPredictedWalkDistanceCompanionSyncManager::saveCurrentSyncProgress()",  "%s\n",  v7);
    }

    uint64_t v4 = sub_1002F8DDC();
    sub_1002AC7B8(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", v1);
    uint64_t v5 = sub_1002F8DDC();
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
  }

  return result;
}

void sub_1007FB5FC(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

BOOL sub_1007FB628(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  BOOL result = 0LL;
  if (a2 && a3 - a4 >= a6)
  {
    if (*(_BYTE *)(a2 + a4) == 64
      && (uint64_t v7 = a4 + a2, *(unsigned __int8 *)(v7 + 1) <= 0x30u)
      && *(unsigned __int8 *)(v7 + 2) == a6)
    {
      return *(unsigned __int8 *)(a4 + a2 + 3) == a5;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1007FB684(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 19083328;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }

  return a3 > 34;
}

BOOL sub_1007FB72C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 1, 35);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33LL;
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FB810(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#\n");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }

  return a3 > 34;
}

BOOL sub_1007FB8B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 10, 35);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33LL;
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

std::string *sub_1007FB99C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

BOOL sub_1007FBA34(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 41)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    char v7 = *(_BYTE *)(a1 + 49);
    if (*(_BYTE *)(a1 + 50)) {
      v7 |= 2u;
    }
    *(_DWORD *)a2 = 36253760;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a2 + 3_Block_object_dispose(va, 8) = v7;
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 39);
    *(_WORD *)(a2 + 39) = v6 | ((_WORD)v5 << 8);
    *a4 = 41;
  }

  return a3 > 40;
}

BOOL sub_1007FBB04(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 2, 41);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v8[37];
    unsigned __int8 v9 = v8[38];
    uint64_t v10 = a4 + 39LL;
    *(_BYTE *)(a1 + 49) = v9 & 1;
    *(_BYTE *)(a1 + 5sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = (v9 & 2) != 0;
    if (a4 < -38)
    {
      int v15 = 0;
    }

    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = v10;
      do
      {
        int v14 = *v8++;
        unsigned int v12 = (v12 + v14) % 0xFF;
        unsigned int v11 = (v12 + v11) % 0xFF;
        --v13;
      }

      while (v13);
      int v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }

    int v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }

  return result;
}

BOOL sub_1007FBC0C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 19)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 101920832;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 17);
    *(_WORD *)(a2 + 17) = v6 | ((_WORD)v5 << 8);
    *a4 = 19;
  }

  return a3 > 18;
}

BOOL sub_1007FBC9C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 6, 19);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 17LL;
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    if (a4 < -16)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FBD68(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 38)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 388378688;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_WORD *)(a2 + 33) = *(_WORD *)(a1 + 44);
    *(_BYTE *)(a2 + 35) = *(_BYTE *)(a1 + 46);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 36);
    *(_WORD *)(a2 + 36) = v6 | ((_WORD)v5 << 8);
    *a4 = 38;
  }

  return a3 > 37;
}

BOOL sub_1007FBE20(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 23, 38);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_WORD *)(a1 + 44) = *(_WORD *)(v8 + 33);
    uint64_t v9 = a4 + 36LL;
    *(_BYTE *)(a1 + 46) = v8[35] == 1;
    if (a4 < -35)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

std::string *sub_1007FBF1C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

BOOL sub_1007FBFC0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 40)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 203960384;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 44);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 38);
    *(_WORD *)(a2 + 3_Block_object_dispose(va, 8) = v6 | ((_WORD)v5 << 8);
    *a4 = 40;
  }

  return a3 > 39;
}

BOOL sub_1007FC080(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 12, 40);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 33);
    *(_BYTE *)(a1 + 44) = v8[37];
    uint64_t v9 = a4 + 38LL;
    if (a4 < -37)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC17C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 44)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 288108608;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 42);
    *(_WORD *)(a2 + memset(&v21[7], 0, 42) = v6 | ((_WORD)v5 << 8);
    *a4 = 44;
  }

  return a3 > 43;
}

BOOL sub_1007FC23C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 17, 44);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    uint64_t v9 = a4 + 42LL;
    if (a4 < -41)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC338(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 20)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 303312960;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 18);
    *(_WORD *)(a2 + 1_Block_object_dispose(va, 8) = v6 | ((_WORD)v5 << 8);
    *a4 = 20;
  }

  return a3 > 19;
}

BOOL sub_1007FC3C8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 18, 20);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    uint64_t v9 = a4 + 18LL;
    if (a4 < -17)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC494(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 52637760;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }

  return a3 > 34;
}

BOOL sub_1007FC53C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 3, 35);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33LL;
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC620(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 72)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 71839808;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_BYTE *)(a2 + 57) = *(_BYTE *)(a1 + 68);
    *(_DWORD *)(a2 + 5_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 70);
    *(_WORD *)(a2 + 7sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v6 | ((_WORD)v5 << 8);
    *a4 = 72;
  }

  return a3 > 71;
}

BOOL sub_1007FC718(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 4, 72);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = v8[57];
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 58);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 70LL;
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 66);
    if (a4 < -69)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC84C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 24)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 186134592;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }

  return a3 > 23;
}

BOOL sub_1007FC8E4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 11, 24);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_BYTE *)(a1 + memset(v21, 0, 32) = v8[21];
    uint64_t v9 = a4 + 22LL;
    if (a4 < -21)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FC9B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 102)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 90583104;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_BYTE *)(a2 + 73) = *(_BYTE *)(a1 + 84);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 7_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 82) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 86) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 9sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 94) = *(_DWORD *)(a1 + 108);
    *(_WORD *)(a2 + 9_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 112);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 100);
    *(_WORD *)(a2 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v6 | ((_WORD)v5 << 8);
    *a4 = 102;
  }

  return a3 > 101;
}

BOOL sub_1007FCAF0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 5, 102);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 69);
    *(_BYTE *)(a1 + 84) = v8[73];
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 74);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 78);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 82);
    *(_DWORD *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 86);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 90);
    *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 94);
    *(_WORD *)(a1 + 112) = *((_WORD *)v8 + 49);
    uint64_t v9 = a4 + 100LL;
    if (a4 < -99)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FCC64(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 84)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 341061696;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a2 + 1_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 25);
    *(_BYTE *)(a2 + 19) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a2 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 27);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a2 + 23) = *(_BYTE *)(a1 + 30);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
    *(void *)(a2 + 2_Block_object_dispose(va, 8) = *(void *)(a1 + 40);
    *(void *)(a2 + 36) = *(void *)(a1 + 48);
    *(void *)(a2 + 44) = *(void *)(a1 + 56);
    *(void *)(a2 + 52) = *(void *)(a1 + 64);
    *(_BYTE *)(a2 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 72);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 76);
    *(_BYTE *)(a2 + 65) = *(_BYTE *)(a1 + 80);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 7sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 7_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 96);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 82);
    *(_WORD *)(a2 + 82) = v6 | ((_WORD)v5 << 8);
    *a4 = 84;
  }

  return a3 > 83;
}

BOOL sub_1007FCD8C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 20, 84);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_BYTE *)(a1 + 24) = v8[17];
    *(_BYTE *)(a1 + 25) = v8[18];
    *(_BYTE *)(a1 + 26) = v8[19];
    *(_BYTE *)(a1 + 27) = v8[20];
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v8[21];
    *(_BYTE *)(a1 + 29) = v8[22];
    *(_BYTE *)(a1 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v8[23];
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *((_DWORD *)v8 + 6);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 28);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 36);
    *(void *)(a1 + 56) = *(void *)(v8 + 44);
    *(void *)(a1 + 64) = *(void *)(v8 + 52);
    *(_BYTE *)(a1 + 72) = v8[60];
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 61);
    *(_BYTE *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v8[65];
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 66);
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 70);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 74);
    uint64_t v9 = a4 + 82LL;
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 78);
    if (a4 < -81)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FCEF0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 31)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 220147776;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }

  return a3 > 30;
}

BOOL sub_1007FCF90(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 13, 31);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 29LL;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    if (a4 < -28)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD06C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B5");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }

  return a3 > 26;
}

BOOL sub_1007FD104(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 53, 27);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    uint64_t v9 = a4 + 25LL;
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    if (a4 < -24)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD1D8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 320548928;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }

  return a3 > 26;
}

BOOL sub_1007FD270(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 19, 27);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25LL;
    if (a4 < -24)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD344(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 24)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 421015616;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }

  return a3 > 23;
}

BOOL sub_1007FD3DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 25, 24);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    uint64_t v9 = a4 + 22LL;
    *(_BYTE *)(a1 + memset(v21, 0, 32) = v8[21] == 1;
    if (a4 < -21)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD4B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 76)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 374091840;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_BYTE *)(a2 + 73) = *(_BYTE *)(a1 + 84);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 74);
    *(_WORD *)(a2 + 74) = v6 | ((_WORD)v5 << 8);
    *a4 = 76;
  }

  return a3 > 75;
}

BOOL sub_1007FD5B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 22, 76);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 69);
    *(_BYTE *)(a1 + 84) = v8[73];
    uint64_t v9 = a4 + 74LL;
    if (a4 < -73)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD6F4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 32)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 404762688;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(_BYTE *)(a2 + 29) = *(_BYTE *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 30);
    *(_WORD *)(a2 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v6 | ((_WORD)v5 << 8);
    *a4 = 32;
  }

  return a3 > 31;
}

BOOL sub_1007FD794(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 24, 32);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    uint64_t v9 = a4 + 30LL;
    *(_BYTE *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v8[29] != 0;
    if (a4 < -29)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FD878(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 43)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0+%");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 41);
    *(_WORD *)(a2 + 41) = v6 | ((_WORD)v5 << 8);
    *a4 = 43;
  }

  return a3 > 42;
}

BOOL sub_1007FD928(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 37, 43);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 37);
    uint64_t v9 = a4 + 41LL;
    if (a4 < -40)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FDA14(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B*");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }

  return a3 > 26;
}

BOOL sub_1007FDAAC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 42, 27);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25LL;
    if (a4 < -24)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FDB80(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 437989440;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }

  return a3 > 26;
}

BOOL sub_1007FDC18(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 25)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 454635584;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 33);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 23);
    *(_WORD *)(a2 + 23) = v6 | ((_WORD)v5 << 8);
    *a4 = 25;
  }

  return a3 > 24;
}

BOOL sub_1007FDCB8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 26, 27);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25LL;
    if (a4 < -24)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FDD8C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 27, 25);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_BYTE *)(a1 + memset(v21, 0, 32) = v8[21];
    *(_BYTE *)(a1 + 33) = v8[22];
    uint64_t v9 = a4 + 23LL;
    if (a4 < -22)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FDE68(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 95)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 509554752;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 73) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 77) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 81) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_BYTE *)(a2 + 89) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(a2 + 9sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(a2 + 91) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 103);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 93);
    *(_WORD *)(a2 + 93) = v6 | ((_WORD)v5 << 8);
    *a4 = 95;
  }

  return a3 > 94;
}

BOOL sub_1007FDF80(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 30, 95);
  if (result)
  {
    int v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 69);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 73);
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 77);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 81);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    unsigned __int8 v9 = v8[89];
    *(_BYTE *)(a1 + 101) = v8[90] != 0;
    *(_BYTE *)(a1 + 102) = v8[91] != 0;
    unsigned __int8 v10 = v8[92];
    uint64_t v11 = a4 + 93LL;
    *(_BYTE *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v9;
    *(_BYTE *)(a1 + 103) = v10;
    if (a4 < -92)
    {
      int v16 = 0;
    }

    else
    {
      unsigned int v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = v11;
      do
      {
        int v15 = *v8++;
        unsigned int v13 = (v13 + v15) % 0xFF;
        unsigned int v12 = (v13 + v12) % 0xFF;
        --v14;
      }

      while (v14);
      int v16 = (unsigned __int16)v13 | ((unsigned __int16)v12 << 8);
    }

    int v17 = *(unsigned __int16 *)(v11 + a2);
    *(_WORD *)(a1 + 16) = v17;
    return v17 == v16;
  }

  return result;
}

BOOL sub_1007FE0E4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 252)
  {
    uint64_t v4 = 0LL;
    *(_DWORD *)a2 = 536621120;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    do
    {
      *(_DWORD *)(a2 + 13 + v4) = *(_DWORD *)(a1 + 20 + v4);
      v4 += 4LL;
    }

    while (v4 != 96);
    for (uint64_t i = 0LL; i != 96; i += 4LL)
      *(_DWORD *)(a2 + 109 + i) = *(_DWORD *)(a1 + 116 + i);
    for (uint64_t j = 0LL; j != 28; j += 4LL)
      *(_DWORD *)(a2 + 205 + j) = *(_DWORD *)(a1 + 212 + j);
    uint64_t v7 = 0LL;
    *(_DWORD *)(a2 + 233) = *(_DWORD *)(a1 + 240);
    do
    {
      *(_BYTE *)(a2 + 237 + v7) = *(_BYTE *)(a1 + 244 + v7);
      ++v7;
    }

    while (v7 != 13);
    uint64_t v8 = 0LL;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    do
    {
      unsigned int v10 = (v10 + *(unsigned __int8 *)(a2 + v8)) % 0xFF;
      unsigned int v9 = (v10 + v9) % 0xFF;
      ++v8;
    }

    while (v8 != 250);
    *(_WORD *)(a2 + 25sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v10 | ((_WORD)v9 << 8);
    *a4 = 252;
  }

  return a3 > 251;
}

BOOL sub_1007FE1F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 31, 252);
  if (result)
  {
    uint64_t v8 = 0LL;
    unsigned int v9 = (unsigned __int8 *)(a2 + a4);
    int v10 = a4 + 13;
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v9 + 5);
    do
    {
      *(_DWORD *)(a1 + 20 + v_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + v10 + v8);
      v8 += 4LL;
    }

    while (v8 != 96);
    uint64_t v11 = 0LL;
    int v12 = -96;
    do
    {
      *(_DWORD *)(a1 + 116 + v11) = *(_DWORD *)(a2 + a4 + 109 + v11);
      v12 -= 4;
      v11 += 4LL;
    }

    while (v11 != 96);
    uint64_t v13 = 0LL;
    uint64_t v14 = (v10 - v12);
    uint64_t v15 = a2 + (int)v14;
    uint64_t v16 = v14 << 32;
    do
    {
      *(_DWORD *)(a1 + 212 + v13) = *(_DWORD *)(v15 + v13);
      v12 -= 4;
      v13 += 4LL;
      v16 += 0x400000000LL;
    }

    while (v13 != 28);
    uint64_t v17 = 0LL;
    *(_DWORD *)(a1 + 24sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)((v16 >> 32) + a2);
    uint64_t v18 = (a4 + 17 - v12);
    uint64_t v19 = a2 + (int)v18;
    uint64_t v20 = v18 << 32;
    int v21 = 19 - v12;
    do
    {
      *(_BYTE *)(a1 + 244 + v17) = *(_BYTE *)(v19 + v17);
      LODWORD(v1_Block_object_dispose(va, 8) = v18 + 1;
      ++v21;
      ++v17;
      v20 += (uint64_t)&_mh_execute_header;
    }

    while (v17 != 13);
    if ((int)v18 - 1 < 0)
    {
      int v27 = 0;
    }

    else
    {
      unsigned int v22 = 0;
      unsigned int v23 = 0;
      uint64_t v24 = -(uint64_t)v18;
      do
      {
        int v25 = *v9++;
        unsigned int v23 = (v23 + v25) % 0xFF;
        unsigned int v22 = (v23 + v22) % 0xFF;
      }

      while (!__CFADD__(v24++, 1LL));
      int v27 = (unsigned __int16)v23 | ((unsigned __int16)v22 << 8);
    }

    int v28 = *(unsigned __int16 *)((v20 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v28;
    if (v21 == 252)
    {
      return v28 == v27;
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      float v29 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v37 = v21;
        __int16 v38 = 1026;
        int v39 = 252;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v30 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v30)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101858960);
        }
        v33[0] = 67240448;
        v33[1] = v21;
        __int16 v34 = 1026;
        int v35 = 252;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  v33,  14);
        double v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLBinaryLogTypes::NonlinearBiasFit::decode(const uint8_t *, const int, const int)",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
        return 0LL;
      }
    }
  }

  return result;
}

BOOL sub_1007FE548(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 59)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0;!");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 60);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 57);
    *(_WORD *)(a2 + 57) = v6 | ((_WORD)v5 << 8);
    *a4 = 59;
  }

  return a3 > 58;
}

BOOL sub_1007FE628(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 33, 59);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 49);
    uint64_t v9 = a4 + 57LL;
    *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 53);
    if (a4 < -56)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FE744(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 31)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 572469312;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }

  return a3 > 30;
}

BOOL sub_1007FE7E4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 34, 31);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    uint64_t v9 = a4 + 29LL;
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    if (a4 < -28)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FE8C0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 68)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0D#");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(void *)(a2 + 3_Block_object_dispose(va, 8) = *(void *)(a1 + 56);
    *(void *)(a2 + 46) = *(void *)(a1 + 64);
    *(void *)(a2 + 54) = *(void *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }

  return a3 > 67;
}

BOOL sub_1007FE990(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 35, 68);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v8[37] != 0;
    *(void *)(a1 + 56) = *(void *)(v8 + 38);
    *(void *)(a1 + 64) = *(void *)(v8 + 46);
    *(void *)(a1 + 72) = *(void *)(v8 + 54);
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 66LL;
    if (a4 < -65)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FEAA4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 68)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0D$");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 48);
    *(void *)(a2 + 3_Block_object_dispose(va, 8) = *(void *)(a1 + 56);
    *(void *)(a2 + 46) = *(void *)(a1 + 64);
    *(void *)(a2 + 54) = *(void *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }

  return a3 > 67;
}

BOOL sub_1007FEB74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 36, 68);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v8[37] != 0;
    *(void *)(a1 + 56) = *(void *)(v8 + 38);
    *(void *)(a1 + 64) = *(void *)(v8 + 46);
    *(void *)(a1 + 72) = *(void *)(v8 + 54);
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 66LL;
    if (a4 < -65)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FEC88(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 155)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 647704640;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(void *)(a2 + 85) = *(void *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(void *)(a2 + 97) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(void *)(a2 + 125) = *(void *)(a1 + 144);
    *(void *)(a2 + 133) = *(void *)(a1 + 152);
    *(void *)(a2 + 141) = *(void *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }

  return a3 > 154;
}

BOOL sub_1007FEDB8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 38, 155);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 69);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(v8 + 77);
    *(void *)(a1 + 96) = *(void *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 97);
    *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 1memset(v21, 0, 32) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(void *)(a1 + 144) = *(void *)(v8 + 125);
    *(void *)(a1 + 152) = *(void *)(v8 + 133);
    *(void *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 141);
    *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 149);
    uint64_t v9 = a4 + 153LL;
    if (a4 < -152)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FEF24(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 155)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 664481856;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(void *)(a2 + 85) = *(void *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(void *)(a2 + 97) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(void *)(a2 + 125) = *(void *)(a1 + 144);
    *(void *)(a2 + 133) = *(void *)(a1 + 152);
    *(void *)(a2 + 141) = *(void *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }

  return a3 > 154;
}

BOOL sub_1007FF054(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 39, 155);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 69);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(v8 + 77);
    *(void *)(a1 + 96) = *(void *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 97);
    *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 1memset(v21, 0, 32) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(void *)(a1 + 144) = *(void *)(v8 + 125);
    *(void *)(a1 + 152) = *(void *)(v8 + 133);
    *(void *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 141);
    *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 149);
    uint64_t v9 = a4 + 153LL;
    if (a4 < -152)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FF1C0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 47)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0/(");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(void *)(a2 + 17) = *(void *)(a1 + 24);
    *(void *)(a2 + 25) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }

  return a3 > 46;
}

BOOL sub_1007FF270(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 40, 47);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(void *)(a1 + 24) = *(void *)(v8 + 17);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 33);
    uint64_t v9 = a4 + 45LL;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    if (a4 < -44)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FF35C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 688926784;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }

  return a3 > 15;
}

BOOL sub_1007FF3EC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 41, 16);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14LL;
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = v8[13] != 0;
    if (a4 < -13)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FF4C0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#,");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }

  return a3 > 34;
}

BOOL sub_1007FF570(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 44, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + memset(v21, 0, 32) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33LL;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1007FF65C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 32)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0 ;");
    *(_DWORD *)(a2 + 5) = *(_DWORD *)(a1 + 20);
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a2 + 1sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 25);
    *(_BYTE *)(a2 + 11) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 27);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a2 + 14) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a2 + 15) = *(_BYTE *)(a1 + 30);
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a2 + 26) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a2 + 27) = *(_BYTE *)(a1 + 43);
    *(_BYTE *)(a2 + 2_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a2 + 29) = *(_BYTE *)(a1 + 45);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 30);
    *(_WORD *)(a2 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v6 | ((_WORD)v5 << 8);
    *a4 = 32;
  }

  return a3 > 31;
}

BOOL sub_1007FF754(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_1007FB628(a1, a2, a3, a4, 59, 32);
  BOOL v9 = v8;
  BOOL result = sub_1007FB628(v8, a2, a3, a4, 59, 33);
  if (!v9 && !result) {
    return result;
  }
  unsigned int v11 = (unsigned __int8 *)(a2 + a4);
  *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v11 + 5);
  *(_BYTE *)(a1 + 24) = v11[9] != 0;
  *(_BYTE *)(a1 + 25) = v11[10] != 0;
  *(_BYTE *)(a1 + 26) = v11[11] != 0;
  *(_BYTE *)(a1 + 27) = v11[12] != 0;
  *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v11[13] != 0;
  *(_BYTE *)(a1 + 29) = v11[14] != 0;
  *(_BYTE *)(a1 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v11[15] != 0;
  *(void *)(a1 + memset(v21, 0, 32) = *((void *)v11 + 2);
  *(_BYTE *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v11[24];
  *(_BYTE *)(a1 + 41) = v11[25] != 0;
  *(_BYTE *)(a1 + memset(&v21[7], 0, 42) = v11[26];
  *(_BYTE *)(a1 + 43) = v11[27] != 0;
  *(_BYTE *)(a1 + 44) = v11[28] != 0;
  *(_BYTE *)(a1 + 45) = v11[29] != 0;
  if (result) {
    int v12 = 31;
  }
  else {
    int v12 = 30;
  }
  uint64_t v13 = (v12 + a4);
  if ((int)v13 < 1)
  {
    int v18 = 0;
  }

  else
  {
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = v13;
    do
    {
      int v17 = *v11++;
      unsigned int v15 = (v15 + v17) % 0xFF;
      unsigned int v14 = (v15 + v14) % 0xFF;
      --v16;
    }

    while (v16);
    int v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
  }

  int v19 = *(unsigned __int16 *)(a2 + (int)v13);
  *(_WORD *)(a1 + 16) = v19;
  int v20 = v13 + 2;
  if (v9)
  {
    int v21 = v20 - a4;
    if (v20 - a4 != 32)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      unsigned int v23 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v32 = v21;
        __int16 v33 = 1026;
        int v34 = 32;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v24 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (!v24) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      LODWORD(v29) = 67240448;
      HIDWORD(v29) = v21;
      LOWORD(v3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 1026;
      *(_DWORD *)((char *)&v30 + 2) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v29,  14,  v29,  v30);
LABEL_33:
      int v28 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLBinaryLogTypes::FallConfig::decode(const uint8_t *, const int, const int)",  "%s\n",  v25);
      if (v28 != buf) {
        free(v28);
      }
      return 0LL;
    }
  }

  if (!result) {
    return v19 == v18;
  }
  int v22 = v20 - a4;
  if (v20 - a4 == 33) {
    return v19 == v18;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101858960);
  }
  __int128 v26 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67240448;
    int v32 = v22;
    __int16 v33 = 1026;
    int v34 = 33;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
  }

  BOOL v27 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v27)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    LODWORD(v29) = 67240448;
    HIDWORD(v29) = v22;
    LOWORD(v3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = 33;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v29,  14,  v29,  v30);
    goto LABEL_33;
  }

  return result;
}

BOOL sub_1007FFBF8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 209)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 768684096;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 34);
    *(void *)(a2 + 24) = *(void *)(a1 + 40);
    *(void *)(a2 + memset(v21, 0, 32) = *(void *)(a1 + 48);
    *(_DWORD *)(a2 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 108);
    *(void *)(a2 + 96) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 116) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a2 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a2 + 1memset(v21, 0, 32) = *(_DWORD *)(a1 + 148);
    *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 152);
    *(_BYTE *)(a2 + 137) = *(_BYTE *)(a1 + 153);
    *(_BYTE *)(a2 + 13_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 154);
    *(_BYTE *)(a2 + 139) = *(_BYTE *)(a1 + 155);
    *(_BYTE *)(a2 + 14sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 156);
    *(_DWORD *)(a2 + 141) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a2 + 145) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a2 + 153) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a2 + 157) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 161) = *(_DWORD *)(a1 + 180);
    *(_DWORD *)(a2 + 165) = *(_DWORD *)(a1 + 184);
    *(_BYTE *)(a2 + 169) = *(_BYTE *)(a1 + 188);
    *(_DWORD *)(a2 + 17sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a2 + 174) = *(_DWORD *)(a1 + 196);
    *(_DWORD *)(a2 + 17_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a2 + 182) = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a2 + 186) = *(_DWORD *)(a1 + 208);
    *(_BYTE *)(a2 + 19sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 212);
    *(_DWORD *)(a2 + 191) = *(_DWORD *)(a1 + 216);
    *(_DWORD *)(a2 + 195) = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a2 + 199) = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a2 + 203) = *(_DWORD *)(a1 + 228);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 207);
    *(_WORD *)(a2 + 207) = v6 | ((_WORD)v5 << 8);
    *a4 = 209;
  }

  return a3 > 208;
}

BOOL sub_1007FFE18(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_1007FB628(a1, a2, a3, a4, 45, 98);
  BOOL v76 = v8;
  BOOL v9 = sub_1007FB628(v8, a2, a3, a4, 45, 143);
  BOOL v75 = v9;
  BOOL v10 = sub_1007FB628(v9, a2, a3, a4, 45, 151);
  BOOL v74 = v10;
  BOOL v11 = sub_1007FB628(v10, a2, a3, a4, 45, 159);
  BOOL v73 = v11;
  BOOL v12 = sub_1007FB628(v11, a2, a3, a4, 45, 171);
  BOOL v13 = v12;
  BOOL v14 = sub_1007FB628(v12, a2, a3, a4, 45, 172);
  BOOL v15 = v14;
  BOOL v16 = sub_1007FB628(v14, a2, a3, a4, 45, 188);
  BOOL v17 = sub_1007FB628(v16, a2, a3, a4, 45, 192);
  BOOL v18 = sub_1007FB628(v17, a2, a3, a4, 45, 193);
  BOOL v19 = sub_1007FB628(v18, a2, a3, a4, 45, 201);
  BOOL result = sub_1007FB628(v19, a2, a3, a4, 45, 209);
  if (!v76 && !v75 && !v74 && !v73 && !v13 && !v15 && !v16 && !v17 && !v18 && !v19 && !result) {
    return result;
  }
  uint64_t v21 = a2 + a4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v21 + 5);
  *(void *)(a1 + 24) = *(void *)(v21 + 13);
  *(_BYTE *)(a1 + memset(v21, 0, 32) = *(_BYTE *)(v21 + 21);
  *(_WORD *)(a1 + 34) = *(_WORD *)(v21 + 22);
  *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v21 + 24);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v21 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v21 + 40);
  *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v21 + 44);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v21 + 48);
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v21 + 52);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v21 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v21 + 60);
  *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v21 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(v21 + 68);
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v21 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v21 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(v21 + 80);
  *(_DWORD *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v21 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(v21 + 88);
  uint64_t v22 = a4 + 96LL;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(v21 + 92);
  if (v75 || v74 || v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    *(void *)(a1 + 112) = *(void *)(v22 + a2);
    *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v21 + 104);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v21 + 108);
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(v21 + 112);
    *(_DWORD *)(a1 + 1memset(v21, 0, 32) = *(_DWORD *)(v21 + 116);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v21 + 120);
    *(_DWORD *)(a1 + 14sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v21 + 124);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(v21 + 128);
    *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(v21 + 132);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a4 + a2 + 136);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a4 + a2 + 137);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a4 + a2 + 138);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a4 + a2 + 139);
    LODWORD(v22) = a4 + 141;
    *(_BYTE *)(a1 + 156) = *(_BYTE *)(a4 + a2 + 140);
  }

  if (v74 || v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    unsigned int v23 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *v23;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 164) = v23[1];
  }

  if (v73 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    BOOL v24 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *v24;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 172) = v24[1];
  }

  if (v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    int v25 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 176) = *v25;
    *(_DWORD *)(a1 + 18sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v25[1];
    LODWORD(v22) = v22 + 12;
    *(_DWORD *)(a1 + 184) = v25[2];
  }

  if (v15 || v16 || v17 || v18 || v19 || result)
  {
    *(_BYTE *)(a1 + 18_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }

  if (v16 || v17 || v18 || v19 || result)
  {
    __int128 v26 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 192) = *v26;
    *(_DWORD *)(a1 + 196) = v26[1];
    *(_DWORD *)(a1 + 20sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v26[2];
    LODWORD(v22) = v22 + 16;
    *(_DWORD *)(a1 + 204) = v26[3];
  }

  if (v17 || v18 || v19 || result)
  {
    int v27 = *(_DWORD *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 4;
    *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = v27;
  }

  if (v18 || v19 || result)
  {
    *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }

  if (v19 || result)
  {
    int v28 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 216) = *v28;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 22sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v28[1];
  }

  if (result)
  {
    uint64_t v29 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 224) = *v29;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = v29[1];
  }

  if ((int)v22 < 1)
  {
    int v35 = 0;
  }

  else
  {
    unsigned int v30 = 0;
    unsigned int v31 = 0;
    int v32 = (unsigned __int8 *)(a2 + a4);
    uint64_t v33 = v22;
    do
    {
      int v34 = *v32++;
      unsigned int v31 = (v31 + v34) % 0xFF;
      unsigned int v30 = (v31 + v30) % 0xFF;
      --v33;
    }

    while (v33);
    int v35 = (unsigned __int16)v31 | ((unsigned __int16)v30 << 8);
  }

  int v36 = *(unsigned __int16 *)(a2 + (int)v22);
  *(_WORD *)(a1 + 16) = v36;
  int v37 = v22 + 2;
  if (v76 && (int v38 = v37 - a4, v37 - a4 != 98))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    uint64_t v49 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v38;
      __int16 v83 = 1026;
      int v84 = 98;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v50 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v38;
      __int16 v79 = 1026;
      int v80 = 98;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v75 && (int v39 = v37 - a4, v37 - a4 != 143))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v52 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v39;
      __int16 v83 = 1026;
      int v84 = 143;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v53 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v53)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v39;
      __int16 v79 = 1026;
      int v80 = 143;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v74 && (int v40 = v37 - a4, v37 - a4 != 151))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v54 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v40;
      __int16 v83 = 1026;
      int v84 = 151;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v55 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v55)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v40;
      __int16 v79 = 1026;
      int v80 = 151;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v73 && (int v41 = v37 - a4, v37 - a4 != 159))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v56 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v41;
      __int16 v83 = 1026;
      int v84 = 159;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v57 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v57)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v41;
      __int16 v79 = 1026;
      int v80 = 159;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v13 && (int v42 = v37 - a4, v37 - a4 != 171))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v58 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v42;
      __int16 v83 = 1026;
      int v84 = 171;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v59 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v59)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v42;
      __int16 v79 = 1026;
      int v80 = 171;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v15 && (int v43 = v37 - a4, v37 - a4 != 172))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v60 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v43;
      __int16 v83 = 1026;
      int v84 = 172;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v61 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v61)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v43;
      __int16 v79 = 1026;
      int v80 = 172;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v16 && (int v44 = v37 - a4, v37 - a4 != 188))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v62 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v44;
      __int16 v83 = 1026;
      int v84 = 188;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v63 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v63)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v44;
      __int16 v79 = 1026;
      int v80 = 188;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v17 && (int v45 = v37 - a4, v37 - a4 != 192))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v64 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v45;
      __int16 v83 = 1026;
      int v84 = 192;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v65 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v65)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v45;
      __int16 v79 = 1026;
      int v80 = 192;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v18 && (int v46 = v37 - a4, v37 - a4 != 193))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v66 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v46;
      __int16 v83 = 1026;
      int v84 = 193;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v67 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v67)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v46;
      __int16 v79 = 1026;
      int v80 = 193;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else if (v19 && (int v47 = v37 - a4, v37 - a4 != 201))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    BOOL v68 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v47;
      __int16 v83 = 1026;
      int v84 = 201;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v69 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v69)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v47;
      __int16 v79 = 1026;
      int v80 = 201;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
      goto LABEL_149;
    }
  }

  else
  {
    if (!result) {
      return v36 == v35;
    }
    int v48 = v37 - a4;
    if (v37 - a4 == 209) {
      return v36 == v35;
    }
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    __int16 v70 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240448;
      int v82 = v48;
      __int16 v83 = 1026;
      int v84 = 209;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
    }

    BOOL v71 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v71)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v77 = 67240448;
      int v78 = v48;
      __int16 v79 = 1026;
      int v80 = 209;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v77,  14);
LABEL_149:
      __int16 v72 = (uint8_t *)v51;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLBinaryLogTypes::FallStats::decode(const uint8_t *, const int, const int)",  "%s\n",  v51);
      if (v72 != buf) {
        free(v72);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100801048(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 53)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@056");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 40);
    *(void *)(a2 + 29) = *(void *)(a1 + 48);
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a2 + 3_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a2 + 39) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a2 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 59);
    *(void *)(a2 + 41) = *(void *)(a1 + 64);
    *(_BYTE *)(a2 + 49) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a2 + 5sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_BYTE *)(a1 + 73);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 51);
    *(_WORD *)(a2 + 51) = v6 | ((_WORD)v5 << 8);
    *a4 = 53;
  }

  return a3 > 52;
}

BOOL sub_100801120(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_1007FB628(a1, a2, a3, a4, 54, 43);
  BOOL v9 = v8;
  BOOL v10 = sub_1007FB628(v8, a2, a3, a4, 54, 52);
  BOOL v11 = v10;
  BOOL result = sub_1007FB628(v10, a2, a3, a4, 54, 53);
  if (!v9 && !v11 && !result) {
    return result;
  }
  uint64_t v13 = a2 + a4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v13 + 5);
  *(void *)(a1 + 24) = *(void *)(v13 + 13);
  *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v13 + 21);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v13 + 29);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(v13 + 37);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(v13 + 38);
  *(_BYTE *)(a1 + 5_Block_object_dispose(va, 8) = *(_BYTE *)(v13 + 39);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(v13 + 40);
  uint64_t v14 = a4 + 41LL;
  if (v11 || result)
  {
    *(void *)(a1 + 64) = *(void *)(v14 + a2);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a4 + a2 + 49);
    LODWORD(v14) = a4 + 50;
  }

  if (result)
  {
    int v15 = *(unsigned __int8 *)(a2 + (int)v14);
    LODWORD(v14) = v14 + 1;
    *(_BYTE *)(a1 + 73) = v15 != 0;
  }

  if ((int)v14 < 1)
  {
    int v21 = 0;
  }

  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    BOOL v18 = (unsigned __int8 *)(a2 + a4);
    uint64_t v19 = v14;
    do
    {
      int v20 = *v18++;
      unsigned int v17 = (v17 + v20) % 0xFF;
      unsigned int v16 = (v17 + v16) % 0xFF;
      --v19;
    }

    while (v19);
    int v21 = (unsigned __int16)v17 | ((unsigned __int16)v16 << 8);
  }

  int v22 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v22;
  int v23 = v14 + 2;
  if (v9)
  {
    int v24 = v23 - a4;
    if (v23 - a4 != 43)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v27 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v38 = v24;
        __int16 v39 = 1026;
        int v40 = 43;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v28 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (!v28) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      LODWORD(v35) = 67240448;
      HIDWORD(v35) = v24;
      LOWORD(v36) = 1026;
      *(_DWORD *)((char *)&v36 + 2) = 43;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v35,  14,  v35,  v36);
LABEL_45:
      int v34 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLBinaryLogTypes::FallState::decode(const uint8_t *, const int, const int)",  "%s\n",  v29);
      if (v34 != buf) {
        free(v34);
      }
      return 0LL;
    }
  }

  if (v11)
  {
    int v25 = v23 - a4;
    if (v23 - a4 != 52)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      unsigned int v30 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v38 = v25;
        __int16 v39 = 1026;
        int v40 = 52;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v31 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (!v31) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      LODWORD(v35) = 67240448;
      HIDWORD(v35) = v25;
      LOWORD(v36) = 1026;
      *(_DWORD *)((char *)&v36 + 2) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v35,  14,  v35,  v36);
      goto LABEL_45;
    }
  }

  if (!result) {
    return v22 == v21;
  }
  int v26 = v23 - a4;
  if (v23 - a4 == 53) {
    return v22 == v21;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101858960);
  }
  int v32 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67240448;
    int v38 = v26;
    __int16 v39 = 1026;
    int v40 = 53;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
  }

  BOOL v33 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    LODWORD(v35) = 67240448;
    HIDWORD(v35) = v26;
    LOWORD(v36) = 1026;
    *(_DWORD *)((char *)&v36 + 2) = 53;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v35,  14,  v35,  v36);
    goto LABEL_45;
  }

  return result;
}

BOOL sub_1008016B8(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_1008016C0(a1, a2, a3, a4, 58);
}

BOOL sub_1008016C0(void *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  if (a3 >= 43)
  {
    uint64_t v5 = 0LL;
    *(_WORD *)a2 = 12352;
    *(_BYTE *)(a2 + 2) = 43;
    *(_BYTE *)(a2 + 3) = a5;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = a1[1];
    *(void *)(a2 + 13) = a1[3];
    *(void *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + sub_1012279C0(0LL, v4, v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4LL;
    }

    while (v5 != 12);
    uint64_t v6 = 0LL;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      unsigned int v7 = (v8 + v7) % 0xFF;
      ++v6;
    }

    while (v6 != 41);
    *(_WORD *)(a2 + 41) = v8 | ((_WORD)v7 << 8);
    *a4 = 43;
  }

  return a3 > 42;
}

BOOL sub_100801780(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100801788(a1, a2, a3, a4, 58);
}

BOOL sub_100801788(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, a5, 43);
  if (result)
  {
    uint64_t v9 = 0LL;
    BOOL v10 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v10 + 5);
    *(void *)(a1 + 24) = *(void *)(v10 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v10 + 21);
    uint64_t v11 = (a4 + 29);
    uint64_t v12 = a2 + (int)v11;
    uint64_t v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4LL;
      v13 += 0x400000000LL;
    }

    while (v9 != 12);
    if (a4 + 37 < -3)
    {
      int v18 = 0;
    }

    else
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = (a4 + 41);
      do
      {
        int v17 = *v10++;
        unsigned int v15 = (v15 + v17) % 0xFF;
        unsigned int v14 = (v15 + v14) % 0xFF;
        --v16;
      }

      while (v16);
      int v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }

    int v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }

  return result;
}

BOOL sub_100801A58(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_1008016C0(a1, a2, a3, a4, 57);
}

BOOL sub_100801A60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100801788(a1, a2, a3, a4, 57);
}

BOOL sub_100801A68(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100801A70(a1, a2, a3, a4, 60);
}

BOOL sub_100801A70(void *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  if (a3 >= 47)
  {
    uint64_t v5 = 0LL;
    *(_WORD *)a2 = 12352;
    *(_BYTE *)(a2 + 2) = 47;
    *(_BYTE *)(a2 + 3) = a5;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = a1[1];
    *(void *)(a2 + 13) = a1[3];
    *(void *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + sub_1012279C0(0LL, v4, v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4LL;
    }

    while (v5 != 16);
    uint64_t v6 = 0LL;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      unsigned int v7 = (v8 + v7) % 0xFF;
      ++v6;
    }

    while (v6 != 45);
    *(_WORD *)(a2 + 45) = v8 | ((_WORD)v7 << 8);
    *a4 = 47;
  }

  return a3 > 46;
}

BOOL sub_100801B30(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100801B38(a1, a2, a3, a4, 60);
}

BOOL sub_100801B38(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, a5, 47);
  if (result)
  {
    uint64_t v9 = 0LL;
    BOOL v10 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v10 + 5);
    *(void *)(a1 + 24) = *(void *)(v10 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v10 + 21);
    uint64_t v11 = (a4 + 29);
    uint64_t v12 = a2 + (int)v11;
    uint64_t v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4LL;
      v13 += 0x400000000LL;
    }

    while (v9 != 16);
    if (a4 + 41 < -3)
    {
      int v18 = 0;
    }

    else
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = (a4 + 45);
      do
      {
        int v17 = *v10++;
        unsigned int v15 = (v15 + v17) % 0xFF;
        unsigned int v14 = (v15 + v14) % 0xFF;
        --v16;
      }

      while (v16);
      int v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }

    int v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }

  return result;
}

BOOL sub_100801E08(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_1008016C0(a1, a2, a3, a4, 123);
}

BOOL sub_100801E10(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100801788(a1, a2, a3, a4, 123);
}

BOOL sub_100801E18(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 86)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0V>");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(_WORD *)(a2 + 45) = *(_WORD *)(a1 + 56);
    *(_DWORD *)(a2 + 47) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 51) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 55) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 59) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 63) = *(_DWORD *)(a1 + 76);
    *(_BYTE *)(a2 + 67) = *(_BYTE *)(a1 + 81);
    *(void *)(a2 + 6_Block_object_dispose(va, 8) = *(void *)(a1 + 88);
    *(void *)(a2 + 76) = *(void *)(a1 + 96);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 84);
    *(_WORD *)(a2 + 84) = v6 | ((_WORD)v5 << 8);
    *a4 = 86;
  }

  return a3 > 85;
}

BOOL sub_100801F08(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_1007FB628(a1, a2, a3, a4, 62, 69);
  BOOL v9 = v8;
  BOOL v10 = sub_1007FB628(v8, a2, a3, a4, 62, 70);
  BOOL v11 = v10;
  BOOL result = sub_1007FB628(v10, a2, a3, a4, 62, 86);
  if (!v9 && !v11 && !result) {
    return result;
  }
  uint64_t v13 = a2 + a4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v13 + 5);
  *(void *)(a1 + 24) = *(void *)(v13 + 13);
  *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v13 + 21);
  *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v13 + 29);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v13 + 37);
  *(_WORD *)(a1 + 56) = *(_WORD *)(v13 + 45);
  *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v13 + 47);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v13 + 51);
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(v13 + 55);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v13 + 59);
  uint64_t v14 = a4 + 67LL;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v13 + 63);
  if (v9)
  {
    *(_BYTE *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 1;
  }

  else if (v11)
  {
    *(_BYTE *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 2;
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + v14);
    LODWORD(v14) = a4 + 68;
  }

  else if (result)
  {
    *(_BYTE *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 3;
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + v14);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(v13 + 68);
    *(void *)(a1 + 96) = *(void *)(v13 + 76);
    LODWORD(v14) = a4 + 84;
  }

  if ((int)v14 < 1)
  {
    int v20 = 0;
  }

  else
  {
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    int v17 = (unsigned __int8 *)(a2 + a4);
    uint64_t v18 = v14;
    do
    {
      int v19 = *v17++;
      unsigned int v16 = (v16 + v19) % 0xFF;
      unsigned int v15 = (v16 + v15) % 0xFF;
      --v18;
    }

    while (v18);
    int v20 = (unsigned __int16)v16 | ((unsigned __int16)v15 << 8);
  }

  int v21 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v21;
  int v22 = v14 + 2;
  if (v9)
  {
    int v23 = v22 - a4;
    if (v22 - a4 != 69)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      int v26 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v37 = v23;
        __int16 v38 = 1026;
        int v39 = 69;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v27 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (!v27) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      LODWORD(v34) = 67240448;
      HIDWORD(v34) = v23;
      LOWORD(v35) = 1026;
      *(_DWORD *)((char *)&v35 + 2) = 69;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v34,  14,  v34,  v35);
LABEL_47:
      BOOL v33 = (uint8_t *)v28;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLBinaryLogTypes::FallFalsePositiveSuppressionFeatures::decode(const uint8_t *, const int, const int)",  "%s\n",  v28);
      if (v33 != buf) {
        free(v33);
      }
      return 0LL;
    }
  }

  if (v11)
  {
    int v24 = v22 - a4;
    if (v22 - a4 != 70)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      uint64_t v29 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67240448;
        int v37 = v24;
        __int16 v38 = 1026;
        int v39 = 70;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
      }

      BOOL v30 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (!v30) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101858960);
      }
      LODWORD(v34) = 67240448;
      HIDWORD(v34) = v24;
      LOWORD(v35) = 1026;
      *(_DWORD *)((char *)&v35 + 2) = 70;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v34,  14,  v34,  v35);
      goto LABEL_47;
    }
  }

  if (!result) {
    return v21 == v20;
  }
  int v25 = v22 - a4;
  if (v22 - a4 == 86) {
    return v21 == v20;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101858960);
  }
  BOOL v31 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67240448;
    int v37 = v25;
    __int16 v38 = 1026;
    int v39 = 86;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "i-index(%{public}d)!=kSize(%{public}d)",  buf,  0xEu);
  }

  BOOL v32 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v32)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101858960);
    }
    LODWORD(v34) = 67240448;
    HIDWORD(v34) = v25;
    LOWORD(v35) = 1026;
    *(_DWORD *)((char *)&v35 + 2) = 86;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "i-index(%{public}d)!=kSize(%{public}d)",  &v34,  14,  v34,  v35);
    goto LABEL_47;
  }

  return result;
}

BOOL sub_1008024D0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B.");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a2 + 22) = *(_BYTE *)(a1 + 33);
    *(_BYTE *)(a2 + 23) = *(_BYTE *)(a1 + 34);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 35);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }

  return a3 > 26;
}

BOOL sub_100802580(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 46, 27);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    __int16 v9 = *(_WORD *)(v8 + 21);
    *(_BYTE *)(a1 + 34) = v8[23];
    *(_BYTE *)(a1 + 35) = v8[24];
    uint64_t v10 = a4 + 25LL;
    *(_WORD *)(a1 + memset(v21, 0, 32) = v9;
    if (a4 < -24)
    {
      int v15 = 0;
    }

    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = v10;
      do
      {
        int v14 = *v8++;
        unsigned int v12 = (v12 + v14) % 0xFF;
        unsigned int v11 = (v12 + v11) % 0xFF;
        --v13;
      }

      while (v13);
      int v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }

    int v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }

  return result;
}

BOOL sub_100802664(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 789590080;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }

  return a3 > 15;
}

BOOL sub_1008026F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 47, 16);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14LL;
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = v8[13] == 1;
    if (a4 < -13)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_1008027C8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 47)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0/0");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(void *)(a2 + 17) = *(void *)(a1 + 24);
    *(void *)(a2 + 25) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }

  return a3 > 46;
}

BOOL sub_100802878(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 48, 47);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 13);
    *(void *)(a1 + 24) = *(void *)(v8 + 17);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 25);
    *(_DWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 33);
    uint64_t v9 = a4 + 45LL;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    if (a4 < -44)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_100802964(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 17)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 823210048;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a2 + 14) = *(_BYTE *)(a1 + 19);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 15);
    *(_WORD *)(a2 + 15) = v6 | ((_WORD)v5 << 8);
    *a4 = 17;
  }

  return a3 > 16;
}

BOOL sub_1008029FC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 49, 17);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = v8[13];
    *(_BYTE *)(a1 + 19) = v8[14];
    uint64_t v9 = a4 + 15LL;
    if (a4 < -14)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_100802AD0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 839921728;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }

  return a3 > 15;
}

BOOL sub_100802B60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 50, 16);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14LL;
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = v8[13] == 1;
    if (a4 < -13)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_100802C34(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 56)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@083");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(_BYTE *)(a2 + 53) = *(_BYTE *)(a1 + 64);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 54);
    *(_WORD *)(a2 + 54) = v6 | ((_WORD)v5 << 8);
    *a4 = 56;
  }

  return a3 > 55;
}

BOOL sub_100802CEC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 51, 56);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(_BYTE *)(a1 + 64) = v8[53];
    uint64_t v9 = a4 + 54LL;
    if (a4 < -53)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_100802DE0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 127)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 880750656;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(void *)(a2 + 93) = *(void *)(a1 + 104);
    *(void *)(a2 + 101) = *(void *)(a1 + 112);
    *(void *)(a2 + 109) = *(void *)(a1 + 120);
    *(void *)(a2 + 117) = *(void *)(a1 + 128);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 125);
    *(_WORD *)(a2 + 125) = v6 | ((_WORD)v5 << 8);
    *a4 = 127;
  }

  return a3 > 126;
}

BOOL sub_100802EE0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 52, 127);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 69);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 89);
    *(void *)(a1 + 104) = *(void *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 101);
    *(void *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 109);
    uint64_t v9 = a4 + 125LL;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(v8 + 117);
    if (a4 < -124)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

BOOL sub_10080301C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 143)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 1066348608;
    *(_BYTE *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(void *)(a2 + 93) = *(void *)(a1 + 104);
    *(void *)(a2 + 101) = *(void *)(a1 + 112);
    *(void *)(a2 + 109) = *(void *)(a1 + 120);
    *(void *)(a2 + 117) = *(void *)(a1 + 128);
    *(void *)(a2 + 125) = *(void *)(a1 + 136);
    *(void *)(a2 + 133) = *(void *)(a1 + 144);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }

    while (v4 != 141);
    *(_WORD *)(a2 + 141) = v6 | ((_WORD)v5 << 8);
    *a4 = 143;
  }

  return a3 > 142;
}

BOOL sub_10080312C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_1007FB628(a1, a2, a3, a4, 63, 143);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + memset(v21, 0, 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 29);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 69);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(v8 + 89);
    *(void *)(a1 + 104) = *(void *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 101);
    *(void *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(v8 + 109);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(v8 + 117);
    *(void *)(a1 + 136) = *(void *)(v8 + 125);
    uint64_t v9 = a4 + 141LL;
    *(void *)(a1 + 144) = *(void *)(v8 + 133);
    if (a4 < -140)
    {
      int v14 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }

      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }

    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }

  return result;
}

std::string *sub_100803278(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803310(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008033C0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803440(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008034F0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008035A8(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803628(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008036C0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008037A8(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803830(uint64_t a1, std::string *a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 112);
  snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,DeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userA ccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticFiel d.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,heading,%.3f,trueheadin g,%.3f,accuracy,%.3f,variant,%d,mode,%d,clientID,%#02x,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,cours eCorrection,%d,visualLocalizationCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration, %d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%20.20f",  *(double *)(a1 + 8),  *(float *)(a1 + 32),  *(float *)(a1 + 36),  *(float *)(a1 + 40),  *(float *)(a1 + 44),  *(float *)(a1 + 48),  *(float *)(a1 + 52),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(char *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(_DWORD *)(a1 + 100),  *(_DWORD *)(a1 + 104),  *(_DWORD *)(a1 + 108),  (v3 >> 4) & 1,  (v3 >> 3) & 1,  (v3 >> 2) & 1,  (v3 >> 5) & 1,  (v3 >> 6) & 1,  (v3 >> 8) & 1,  (v3 >> 1) & 1,  v3 & 1,  (v3 >> 10) & 1,  (v3 >> 9) & 1,  (v3 >> 11) & 1,  (v3 >> 12) & 1,  (v3 >> 13) & 1,  (v3 >> 14) & 1,  *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_1008039A4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803AA0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803B2C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803BB4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803C3C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803CC4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803DB4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803E3C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100803EC4(uint64_t a1, std::string *a2)
{
  switch(*(_BYTE *)(a1 + 32))
  {
    case 4:
      snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d,valueDescription,%s\n");
      break;
    default:
      snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d\n");
      break;
  }

  return std::string::assign(a2, __str);
}

std::string *sub_100804018(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

void *sub_10080410C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (float *)(a1 + 124);
  unint64_t v5 = -3LL;
  unint64_t v6 = 5LL;
  while (1)
  {
    v6 += snprintf( &__s[v6],  4096 - v6,  "slope.x,%f,slope.y,%f,slope.z,%f,intercept.x,%f,intercept.y,%f,intercept.z,%f,",  *(v4 - 26),  *(v4 - 25),  *(v4 - 24),  *(v4 - 2),  *(v4 - 1),  *v4);
    if (v6 > 0xFFF) {
      break;
    }
    v5 += 3LL;
    v4 += 3;
    if (v5 > 0x14)
    {
      snprintf( &__s[v6],  4096 - v6,  "temperatures,%f,%f,%f,%f,%f,%f,%f,overlap,%f,error,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d",  *(float *)(a1 + 212),  *(float *)(a1 + 216),  *(float *)(a1 + 220),  *(float *)(a1 + 224),  *(float *)(a1 + 228),  *(float *)(a1 + 232),  *(float *)(a1 + 236),  *(float *)(a1 + 240),  *(unsigned __int8 *)(a1 + 244),  *(unsigned __int8 *)(a1 + 245),  *(unsigned __int8 *)(a1 + 246),  *(unsigned __int8 *)(a1 + 247),  *(unsigned __int8 *)(a1 + 248),  *(unsigned __int8 *)(a1 + 249),  *(unsigned __int8 *)(a1 + 250),  *(unsigned __int8 *)(a1 + 251),  *(unsigned __int8 *)(a1 + 252),  *(unsigned __int8 *)(a1 + 253),  *(unsigned __int8 *)(a1 + 254),  *(unsigned __int8 *)(a1 + 255),  *(unsigned __int8 *)(a1 + 256));
      return sub_1010DDBC0(a2, __s);
    }
  }

  return sub_1010DDBC0(a2, __s);
}

std::string *sub_1008042E0(uint64_t a1, std::string *a2)
{
  double v3 = *(double *)(a1 + 8);
  sub_10080410C(a1, __p);
  if (v7 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  snprintf(__str, 0x1000uLL, "STATUS,SENSOR,Time,%.3lf,Type,CLNonlinearGyroBiasFit,fits,%s", v3, (const char *)v4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return std::string::assign(a2, __str);
}

std::string *sub_1008043B4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804488(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804510(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008045B8(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804660(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008046F0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804774(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804868(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_10080495C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008049F4(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804A74(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804B18(uint64_t a1, std::string *a2)
{
  if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,systemHardware,%d,defaultsUserStudyFallStatsEnabled,%d,defaultsUserStudyPressureDat aCollection,%d,defaultsIsSensorRecordingEnabled,%d,defaultsDetectorEnabled,%d,defaultsAnomalyMoti onInternalTest,%d,spuConfigSensorTestModeEnabled,%d,spuConfigSensorRecordingEnabled,%d,spuConfigL astReplyAopTimestamp,%llu,spuConfigFallStatsMode,%d,spuConfigSensorRecordingActive,%d,spuConfigSi mulateEvent,%d,spuConfigUserStudyPressureDataCollection,%d,spuConfigDetectorEnabled,%d,spuConfigS ensorTestModeEnabled,%d",  *(_DWORD *)(a1 + 20),  *(unsigned __int8 *)(a1 + 24),  *(unsigned __int8 *)(a1 + 25),  *(unsigned __int8 *)(a1 + 26),  *(unsigned __int8 *)(a1 + 27),  *(unsigned __int8 *)(a1 + 28),  *(unsigned __int8 *)(a1 + 29),  *(unsigned __int8 *)(a1 + 30),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 41),  *(unsigned __int8 *)(a1 + 42),  *(unsigned __int8 *)(a1 + 43),  *(unsigned __int8 *)(a1 + 44),  *(unsigned __int8 *)(a1 + 45)) >= 0x401) {
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 4684);
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100804C08(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804CC8(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100804E58(uint64_t a1, std::string *a2)
{
  switch(*(_BYTE *)(a1 + 32))
  {
    case 1:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSen sor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCT ime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  1,  *(unsigned __int16 *)(a1 + 34),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108)) > 0x4000)
      {
        int v3 = 4810;
        goto LABEL_24;
      }

      break;
    case 2:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  2,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154)) > 0x4000)
      {
        int v3 = 4848;
        goto LABEL_24;
      }

      break;
    case 3:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  3,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164)) > 0x4000)
      {
        int v3 = 4888;
        goto LABEL_24;
      }

      break;
    case 4:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  4,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172)) > 0x4000)
      {
        int v3 = 4930;
        goto LABEL_24;
      }

      break;
    case 5:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  5,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172),  *(float *)(a1 + 176),  *(float *)(a1 + 180),
                           *(float *)(a1 + 184)) > 0x4000)
      {
        int v3 = 4975;
        goto LABEL_24;
      }

      break;
    case 6:
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  6,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172),  *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188)) > 0x4000)
      {
        int v3 = 5021;
        goto LABEL_24;
      }

      break;
    case 7:
      double v4 = *(double *)(a1 + 8);
      double v5 = *(double *)(a1 + 24);
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDe laySpread,%f,accelPathLengthWithPeak,%f",  v4,  v5,  7,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           *(float *)(a1 + 204)) > 0x4000)
      {
        int v3 = 5071;
        goto LABEL_24;
      }

      break;
    case 8:
      double v6 = *(double *)(a1 + 8);
      double v7 = *(double *)(a1 + 24);
      double v15 = *(float *)(a1 + 204);
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDe laySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f",  v6,  v7,  8,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v15,
                           *(float *)(a1 + 208)) > 0x4000)
      {
        int v3 = 5122;
        goto LABEL_24;
      }

      break;
    case 9:
      double v8 = *(double *)(a1 + 8);
      double v9 = *(double *)(a1 + 24);
      double v16 = *(float *)(a1 + 204);
      double v19 = *(float *)(a1 + 208);
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDe laySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d",  v8,  v9,  9,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),  *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v16,
                           v19,
                           *(unsigned __int8 *)(a1 + 212)) > 0x4000)
      {
        int v3 = 5174;
        goto LABEL_24;
      }

      break;
    case 0xA:
      double v10 = *(double *)(a1 + 8);
      double v11 = *(double *)(a1 + 24);
      double v22 = *(float *)(a1 + 216);
      double v24 = *(float *)(a1 + 220);
      double v17 = *(float *)(a1 + 204);
      double v20 = *(float *)(a1 + 208);
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDe laySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVaria nce,%f,crownVariance,%f",  v10,  v11,  10,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v17,
                           v20,
                           *(unsigned __int8 *)(a1 + 212),
                           v22,
                           v24) > 0x4000)
      {
        int v3 = 5228;
        goto LABEL_24;
      }

      break;
    case 0xB:
      double v12 = *(double *)(a1 + 8);
      double v13 = *(double *)(a1 + 24);
      double v26 = *(float *)(a1 + 224);
      double v27 = *(float *)(a1 + 228);
      double v23 = *(float *)(a1 + 216);
      double v25 = *(float *)(a1 + 220);
      double v18 = *(float *)(a1 + 204);
      double v21 = *(float *)(a1 + 208);
      if (snprintf( __str,  0x4000uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%h hd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,x ZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f ,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImp act,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDel taAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAcce lNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f, swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDe laySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVaria nce,%f,crownVariance,%f,medianAbsGravityY,%f,abruptGravityChangeAngle,%f",  v12,  v13,  11,  *(unsigned __int16 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 155),  *(char *)(a1 + 156),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(float *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(float *)(a1 + 72),  *(float *)(a1 + 76),  *(float *)(a1 + 80),  *(float *)(a1 + 84),  *(float *)(a1 + 88),  *(float *)(a1 + 92),  *(float *)(a1 + 96),  *(float *)(a1 + 100),  *(float *)(a1 + 104),  *(float *)(a1 + 108),  *(void *)(a1 + 112),  *(float *)(a1 + 120),  *(float *)(a1 + 124),  *(float *)(a1 + 128),  *(float *)(a1 + 132),  *(float *)(a1 + 136),  *(float *)(a1 + 140),  *(float *)(a1 + 144),  *(float *)(a1 + 148),  *(char *)(a1 + 152),  *(unsigned __int8 *)(a1 + 153),  *(unsigned __int8 *)(a1 + 154),  *(float *)(a1 + 160),  *(float *)(a1 + 164),  *(float *)(a1 + 168),
                           *(float *)(a1 + 172),
                           *(float *)(a1 + 176),
                           *(float *)(a1 + 180),
                           *(float *)(a1 + 184),
                           *(unsigned __int8 *)(a1 + 188),
                           *(float *)(a1 + 192),
                           *(float *)(a1 + 196),
                           *(float *)(a1 + 200),
                           v18,
                           v21,
                           *(unsigned __int8 *)(a1 + 212),
                           v23,
                           v25,
                           v26,
                           v27) > 0x4000)
      {
        int v3 = 5284;
LABEL_24:
        snprintf(__str, 0x4000uLL, "buffer too short to host all data (line:%i)", v3);
      }

      break;
    default:
      return std::string::assign(a2, __str);
  }

  return std::string::assign(a2, __str);
}

std::string *sub_100805ED4(uint64_t a1, std::string *this)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 == 3)
  {
    if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,s tate,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d,fallAlertSentFromReferee,%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57),  *(unsigned __int8 *)(a1 + 58),  *(unsigned __int8 *)(a1 + 59),  *(double *)(a1 + 64),  *(unsigned __int8 *)(a1 + 72),  *(unsigned __int8 *)(a1 + 73)) >= 0x401)
    {
      int v4 = 5332;
      goto LABEL_10;
    }
  }

  else if (v3 == 2)
  {
    if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,s tate,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57),  *(unsigned __int8 *)(a1 + 58),  *(unsigned __int8 *)(a1 + 59),  *(double *)(a1 + 64),  *(unsigned __int8 *)(a1 + 72)) > 0x400)
    {
      int v4 = 5317;
      goto LABEL_10;
    }
  }

  else if (v3 == 1 {
         && snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,% d,state,%d,response,%d,resolution,%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57),  *(unsigned __int8 *)(a1 + 58),  *(unsigned __int8 *)(a1 + 59)) > 0x400)
  }
  {
    int v4 = 5303;
LABEL_10:
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
  }

  return std::string::assign(this, __str);
}

void sub_100806074(uint64_t a1, std::string *a2, int a3)
{
  if (a3 == 57)
  {
    std::string::assign(&v11, "FallDataGyro200");
    double v7 = "aopTs";
  }

  else
  {
    if (a3 == 58)
    {
      double v6 = "FallDataAccel800";
    }

    else
    {
      if (a3 != 123) {
        goto LABEL_9;
      }
      double v6 = "FallDataHgal";
    }

    std::string::assign(&v11, v6);
    double v7 = "approxAopTs";
  }

  std::string::assign(&v10, v7);
LABEL_9:
  double v8 = &v11;
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    double v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  double v9 = &v10;
  if ((v10.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    double v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,x,%f,y,%f,z,%f",  *(double *)(a1 + 8),  (const char *)v8,  *(double *)(a1 + 24),  (const char *)v9,  *(void *)(a1 + 32),  *(float *)(a1 + 40),  *(float *)(a1 + 44),  *(float *)(a1 + 48)) >= 0x401) {
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5371);
  }
  std::string::assign(a2, __str);
}

void sub_100806218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100806254(uint64_t a1, std::string *a2, int a3)
{
  if (a3 == 60)
  {
    std::string::assign(&v9, "FallDataQuaternion6");
    std::string::assign(&v8, "aopTs");
  }

  double v6 = &v9;
  if ((v9.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    double v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  double v7 = &v8;
  if ((v8.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    double v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,qx,%f,qy,%f,qz,%f,qw,%f",  *(double *)(a1 + 8),  (const char *)v6,  *(double *)(a1 + 24),  (const char *)v7,  *(void *)(a1 + 32),  *(float *)(a1 + 40),  *(float *)(a1 + 44),  *(float *)(a1 + 48),  *(float *)(a1 + 52)) >= 0x401) {
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5404);
  }
  std::string::assign(a2, __str);
}

void sub_1008063C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100806400(uint64_t a1, std::string *a2)
{
}

void sub_100806408(uint64_t a1, std::string *a2)
{
}

void sub_100806410(uint64_t a1, std::string *a2)
{
}

void sub_100806418(uint64_t a1, std::string *a2)
{
}

std::string *sub_100806420(uint64_t a1, std::string *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == 2)
  {
    if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,a opTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT ,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int16 *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(_DWORD *)(a1 + 72),  *(float *)(a1 + 76),  *(unsigned __int8 *)(a1 + 81),  2) > 0x400)
    {
      int v4 = 5486;
      goto LABEL_9;
    }
  }

  else if (v3 == 3)
  {
    if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,a opTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT ,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d,r epetitiveMotionStartTs,%llu,repetitiveMotionEndTs,%llu",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int16 *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(_DWORD *)(a1 + 72),  *(float *)(a1 + 76),  *(unsigned __int8 *)(a1 + 81),  3,  *(void *)(a1 + 88),  *(void *)(a1 + 96)) > 0x400)
    {
      int v4 = 5469;
LABEL_9:
      snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
    }
  }

  else if (snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%ll u,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowF reqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,version=%d",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int16 *)(a1 + 56),  *(float *)(a1 + 60),  *(float *)(a1 + 64),  *(float *)(a1 + 68),  *(_DWORD *)(a1 + 72),  *(float *)(a1 + 76),  *(unsigned __int8 *)(a1 + 80)) >= 0x401)
  {
    int v4 = 5502;
    goto LABEL_9;
  }

  return std::string::assign(a2, __str);
}

std::string *sub_100806624(uint64_t a1, std::string *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  unint64_t v4 = *(char *)(a1 + 33);
  double v5 = "Undefined";
  double v6 = "Undefined";
  if (v4 <= 5) {
    double v6 = (&off_1018589B8)[v4];
  }
  if (v3 == 16) {
    double v5 = "Above 30mph";
  }
  if (v3 == 1) {
    double v5 = "Below 30mph";
  }
  snprintf( __str,  0x400uLL,  "STATUS,SENSOR,Time,%.3lf,Type,BasebandSpeed,timestamp,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x% 02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s",  *(double *)(a1 + 8),  *(double *)(a1 + 24),  v3,  *(unsigned __int8 *)(a1 + 33),  *(unsigned __int8 *)(a1 + 34),  *(unsigned __int8 *)(a1 + 35),  v5,  v6);
  return std::string::assign(a2, __str);
}

std::string *sub_100806700(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100806780(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100806818(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_10080689C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_10080691C(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_1008069B0(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

std::string *sub_100806A64(uint64_t a1, std::string *a2)
{
  return std::string::assign(a2, __str);
}

uint64_t sub_100806B1C()
{
  return 35LL;
}

uint64_t sub_100806B24()
{
  return 41LL;
}

uint64_t sub_100806B2C()
{
  return 38LL;
}

uint64_t sub_100806B34()
{
  return 19LL;
}

uint64_t sub_100806B3C()
{
  return 44LL;
}

uint64_t sub_100806B44()
{
  return 20LL;
}

uint64_t sub_100806B4C()
{
  return 72LL;
}

uint64_t sub_100806B54()
{
  return 76LL;
}

uint64_t sub_100806B5C()
{
  return 31LL;
}

uint64_t sub_100806B64()
{
  return 27LL;
}

uint64_t sub_100806B6C()
{
  return 24LL;
}

uint64_t sub_100806B74()
{
  return 102LL;
}

uint64_t sub_100806B7C()
{
  return 84LL;
}

uint64_t sub_100806B84()
{
  return 32LL;
}

uint64_t sub_100806B8C()
{
  return 95LL;
}

uint64_t sub_100806B94()
{
  return 252LL;
}

uint64_t sub_100806B9C()
{
  return 59LL;
}

uint64_t sub_100806BA4()
{
  return 68LL;
}

uint64_t sub_100806BAC()
{
  return 47LL;
}

uint64_t sub_100806BB4()
{
  return 16LL;
}

uint64_t sub_100806BBC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 0xB) {
    sub_10124B740();
  }
  return *(unsigned int *)&aB_2[4 * (char)v1];
}

uint64_t sub_100806BF0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 18);
  if (v1 == 1) {
    return 32LL;
  }
  if (v1 != 2) {
    sub_10124B768();
  }
  return 33LL;
}

uint64_t sub_100806C24(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 3) {
    sub_10124B790();
  }
  return dword_101338644[(char)v1];
}

uint64_t sub_100806C58()
{
  return 43LL;
}

uint64_t sub_100806C60(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 80) - 1;
  if (v1 >= 3) {
    sub_10124B7B8();
  }
  return dword_101338650[(char)v1];
}

uint64_t sub_100806C94()
{
  return 17LL;
}

uint64_t sub_100806C9C()
{
  return 56LL;
}

uint64_t sub_100806CA4()
{
  return 127LL;
}

uint64_t sub_100806CAC()
{
  return 143LL;
}

uint64_t sub_100806CB4()
{
  return 40LL;
}

uint64_t sub_100806CBC()
{
  return 25LL;
}

uint64_t sub_100806CC4()
{
  return 155LL;
}

void sub_100806CCC(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100806FDC(id *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      double v13 = objc_alloc_init(&OBJC_CLASS___CLCKVO2MaxCalorimetryInput);
      [a1 addInputs:v13];

      PBReaderRecallMark(a2, v15);
    }

    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString(a2);

      a1[2] = String;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1008076C4(uint64_t a1)
{
  return a1;
}

std::string *sub_1008076F4(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t sub_1008076FC(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, double a5)
{
  *(void *)a1 = a2;
  if (a2) {
    double v6 = (double)a3 / (double)a2;
  }
  else {
    double v6 = 0.0;
  }
  *(double *)(a1 + _Block_object_dispose(va, 8) = v6;
  *(double *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = *a4;
  uint64_t result = rand();
  HIDWORD(v_Block_object_dispose(va, 8) = -1030792151 * result + 85899344;
  LODWORD(v_Block_object_dispose(va, 8) = HIDWORD(v8);
  return result;
}

uint64_t sub_10080777C(unsigned int *a1)
{
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_1018589E8);
  }
  uint64_t v2 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1 + 8;
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 3);
    *(_DWORD *)__int128 buf = 136447234;
    BOOL v33 = v3;
    __int16 v34 = 2050;
    uint64_t v35 = v4;
    __int16 v36 = 2050;
    uint64_t v37 = v5;
    __int16 v38 = 2050;
    uint64_t v39 = v6;
    __int16 v40 = 2050;
    uint64_t v41 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "WifiAssociatedApHarvestDatabaseAnalytics, %{public}s, %{public}zu APs, average number of samples, %{public}.1f, cu rrent associated AP has oldest sample age of %{public}.1f hours, latest sample age of %{public}.1f seconds",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_1018589E8);
    }
    double v15 = a1 + 8;
    uint64_t v16 = *(void *)a1;
    uint64_t v17 = *((void *)a1 + 1);
    uint64_t v18 = *((void *)a1 + 2);
    uint64_t v19 = *((void *)a1 + 3);
    int v22 = 136447234;
    double v23 = v15;
    __int16 v24 = 2050;
    uint64_t v25 = v16;
    __int16 v26 = 2050;
    uint64_t v27 = v17;
    __int16 v28 = 2050;
    uint64_t v29 = v18;
    __int16 v30 = 2050;
    uint64_t v31 = v19;
    double v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "WifiAssociatedApHarvestDatabaseAnalytics, %{public}s, %{public}zu APs, average number of samples, %{ public}.1f, current associated AP has oldest sample age of %{public}.1f hours, latest sample age of %{public}.1f seconds",  &v22,  52);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiAssociatedApHarvestDatabaseAnalytics::sendCoreAnalyticsEvent()",  "%s\n",  v20);
  }

  id v8 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a1),  @"numAssociatedAps");
  LODWORD(v9) = llround(*((double *)a1 + 1));
  objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9),  @"averageNumSamples");
  int v10 = a1 + 8;
  objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10),  @"harvestType");
  double v12 = *((double *)a1 + 2);
  if (v12 >= 0.0)
  {
    LODWORD(v11) = llround(v12);
    objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11),  @"oldestSampleAgeInHoursOfCurrentAssociatedAp");
  }

  double v13 = *((double *)a1 + 3);
  if (v13 >= 0.0)
  {
    LODWORD(v11) = llround(v13);
    objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11),  @"latestSampleAgeInSecondsOfCurrentAssociatedAp");
  }

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  _OWORD v21[2] = sub_100807AC0;
  v21[3] = &unk_1018486D8;
  v21[4] = v8;
  return AnalyticsSendEventLazy(@"com.apple.wifiAssociatedApHarvestDatabase.analytics", v21);
}

uint64_t sub_100807AC0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100807AC8(id a1)
{
  off_101934A28 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100808120(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_10080814C(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208])
    {
      sub_100253308(*(void *)(a3 + 16));
      sub_100253308(*(void *)(a3 + 24));
      return sub_100253308(*(void *)(a3 + 40));
    }
  }

  return result;
}

uint64_t sub_1008081F4(double a1, uint64_t a2, void **a3)
{
  if ((*(unsigned int (**)(void *))(*a3[5] + 48LL))(a3[5])
    && (*(unsigned int (**)(void *, double))(*a3[2] + 48LL))(a3[2], a1))
  {
    return (*(uint64_t (**)(void *, double))(*a3[3] + 48LL))(a3[3], a1);
  }

  else
  {
    return 0LL;
  }

void sub_10080826C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 832);
  float v5 = *(double *)(a1 + 648);
  if (v5 <= 8.0) {
    float v7 = *(double *)(a1 + 648);
  }
  else {
    float v7 = 8.0;
  }
  float v8 = 2.0;
  float v6 = *(double *)(a1 + 840);
  if (v6 <= 2.0) {
    float v9 = *(double *)(a1 + 840);
  }
  else {
    float v9 = 2.0;
  }
  float v10 = fmaxf(v7, 0.0);
  if (v9 >= -2.0) {
    float v11 = v9;
  }
  else {
    float v11 = -2.0;
  }
  if (v10 < 0.3 || v10 > 0.5)
  {
    float v8 = 1.5;
    if (v10 >= 0.3) {
      float v8 = (float)(v10 * -0.94) + v10 * v10 * 0.699999988 + 2.29999995;
    }
  }

  float v13 = *(float *)(a1 + 300);
  sub_1007BDB28(a1, (uint64_t)buf);
  float v14 = *(float *)&v62[6];
  BOOL v16 = *(double *)(a1 + 616) <= 0.0 || *(_DWORD *)(a1 + 832) == 0 || v4 == 3;
  float v17 = *(float *)&v62[6];
  if (!v16)
  {
    if (v4 == 1)
    {
      BOOL v27 = v11 <= 0.0 || v7 <= 0.0;
      float v17 = (float)(v8 * 2.4) + (float)(v11 * 4.4);
      if (v27) {
        float v17 = v8;
      }
    }

    else if (v8 >= *(float *)&v62[6])
    {
      float v17 = v8;
    }

    else
    {
      float v17 = *(float *)&v62[6];
    }
  }

  if (v17 >= 1.5) {
    float v18 = v17;
  }
  else {
    float v18 = 1.5;
  }
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101858A78);
  }
  uint64_t v19 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    double v20 = *(double *)(a1 + 120);
    double v21 = *(double *)(a1 + 128);
    BOOL v22 = *(double *)(a1 + 616) > 0.0;
    BOOL v23 = *(_DWORD *)(a1 + 832) != 0;
    *(_DWORD *)__int128 buf = 134220800;
    double v60 = v20;
    __int16 v61 = 2048;
    *(double *)__int16 v62 = v21;
    *(_WORD *)&v62[8] = 2048;
    double v63 = v21 - v20;
    __int16 v64 = 2048;
    double v65 = v10;
    __int16 v66 = 1024;
    BOOL v67 = v22;
    __int16 v68 = 1024;
    BOOL v69 = v23;
    __int16 v70 = 2048;
    double v71 = v13;
    __int16 v72 = 2048;
    double v73 = v11;
    __int16 v74 = 1024;
    int v75 = v4;
    __int16 v76 = 2048;
    double v77 = v8;
    __int16 v78 = 2048;
    double v79 = v14;
    __int16 v80 = 2048;
    double v81 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM, %.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f",  buf,  0x6Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101858A78);
    }
    double v28 = *(double *)(a1 + 120);
    double v29 = *(double *)(a1 + 128);
    BOOL v30 = *(double *)(a1 + 616) > 0.0;
    BOOL v31 = *(_DWORD *)(a1 + 832) != 0;
    int v35 = 134220800;
    double v36 = v28;
    __int16 v37 = 2048;
    double v38 = v29;
    __int16 v39 = 2048;
    double v40 = v29 - v28;
    __int16 v41 = 2048;
    double v42 = v10;
    __int16 v43 = 1024;
    BOOL v44 = v30;
    __int16 v45 = 1024;
    BOOL v46 = v31;
    __int16 v47 = 2048;
    double v48 = v13;
    __int16 v49 = 2048;
    double v50 = v11;
    __int16 v51 = 1024;
    int v52 = v4;
    __int16 v53 = 2048;
    double v54 = v8;
    __int16 v55 = 2048;
    double v56 = v14;
    __int16 v57 = 2048;
    double v58 = v18;
    LODWORD(v34) = 110;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM, %.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f",  COERCE_DOUBLE(&v35),  v34);
    BOOL v33 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieOutdoorWheelchairModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  if (*(void *)(a1 + 344) == 21LL) {
    int v24 = 18;
  }
  else {
    int v24 = 17;
  }
  float v25 = 16.0;
  if (v18 <= 16.0) {
    float v25 = v18;
  }
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v25;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 12) = v25;
  *(float *)(a2 + 2_Block_object_dispose(va, 8) = v25;
  if (v18 == 1.8) {
    int v26 = 3;
  }
  else {
    int v26 = 0;
  }
  *(_DWORD *)(a2 + memset(v21, 0, 32) = v26;
  *(_DWORD *)(a2 + 36) = v24;
}

void sub_1008086D8(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100808704(uint64_t a1)
{
  *(void *)(a1 + 144) = a1 + 144;
  *(void *)(a1 + 152) = a1 + 144;
  *(void *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0LL;
  *(_DWORD *)a1 = 0;
  return a1;
}

uint64_t sub_10080873C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(result + 88);
  __int128 v3 = *(_OWORD *)(result + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(result + 104);
  *(_OWORD *)(a2 + 112) = v3;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = *(void *)(result + 136);
  __int128 v4 = *(_OWORD *)(result + 24);
  __int128 v5 = *(_OWORD *)(result + 56);
  *(_OWORD *)(a2 + memset(v21, 0, 32) = *(_OWORD *)(result + 40);
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 72);
  *(_OWORD *)(a2 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v2;
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v4;
  if (*(_DWORD *)result) {
    *(_DWORD *)a2 = *(_DWORD *)result;
  }
  return result;
}

uint64_t sub_100808784(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

__n128 sub_10080878C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (uint64_t **)(a1 + 144);
  unint64_t v5 = *(void *)(a1 + 160);
  if (v5 > 2)
  {
    uint64_t v19 = *v4;
    double v20 = *(double *)(a2 + 80);
    double v21 = v20 - *((double *)*v4 + 12);
    if (v21 > 0.0 && v21 < 9.0)
    {
      uint64_t v29 = *(void *)(a1 + 152);
      if ((uint64_t **)v29 != v4)
      {
        unsigned int v30 = 0;
        while (1)
        {
          if (*(_DWORD *)(v29 + 16) == *(_DWORD *)a2) {
            ++v30;
          }
          if (v30 >= 2) {
            break;
          }
          uint64_t v29 = *(void *)(v29 + 8);
        }

        *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)a2;
        __int128 v31 = *(_OWORD *)(a2 + 16);
        __int128 v32 = *(_OWORD *)(a2 + 32);
        __int128 v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 56) = v33;
        *(_OWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v32;
        *(_OWORD *)(a1 + 24) = v31;
        __int128 v34 = *(_OWORD *)(a2 + 80);
        __int128 v35 = *(_OWORD *)(a2 + 96);
        __int128 v36 = *(_OWORD *)(a2 + 112);
        *(void *)(a1 + 136) = *(void *)(a2 + 128);
        *(_OWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v36;
        *(_OWORD *)(a1 + 104) = v35;
        *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v34;
        double v20 = *(double *)(a2 + 80);
      }

void sub_100808984(uint64_t a1, int a2, unsigned __int8 *src)
{
  *(_DWORD *)a1 = a2;
  uuid_copy((unsigned __int8 *)(a1 + 168), src);
}

void sub_100808990(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uuid_clear((unsigned __int8 *)(a1 + 168));
}

void sub_100808998(uint64_t a1, uuid_t dst)
{
  if (*(_DWORD *)a1) {
    uuid_copy(dst, (const unsigned __int8 *)(a1 + 168));
  }
  else {
    uuid_clear(dst);
  }
}

double sub_1008089B8(uint64_t a1)
{
  *(void *)a1 = &off_101858AA8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x1000000000LL;
  *(void *)(a1 + 22_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 233) = 0LL;
  *(_BYTE *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x2000000000LL;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(_WORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 42sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 973279855;
  *(int32x2_t *)(a1 + 424) = vdup_n_s32(0x3A03126Fu);
  *(_OWORD *)(a1 + 4memset(v21, 0, 32) = 0u;
  *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 472) = 1LL;
  *(_DWORD *)(a1 + 48sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 32;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 484) = 0LL;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_BYTE *)(a1 + 50sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  *(void *)(a1 + 504) = 0xA00000000LL;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(void *)(a1 + 68sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0x500000000LL;
  *(void *)(a1 + 72_Block_object_dispose(va, 8) = 0x500000000LL;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 813) = 0LL;
  *(_OWORD *)(a1 + 80sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(void *)&double result = 1003306496LL;
  *(_OWORD *)(a1 + 212) = xmmword_1013386D0;
  return result;
}

int32x2_t sub_100808A88(uint64_t a1)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(void *)(a1 + 444) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 24sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  *(_OWORD *)(a1 + 80sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 42sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 973279855;
  int32x2_t result = vdup_n_s32(0x3A03126Fu);
  *(int32x2_t *)(a1 + 424) = result;
  *(void *)(a1 + 456) = 0LL;
  *(_DWORD *)(a1 + 464) = 0;
  *(void *)(a1 + 4memset(v21, 0, 32) = 0LL;
  *(_DWORD *)(a1 + 44sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(_BYTE *)(a1 + 244) = 1;
  *(void *)(a1 + 484) = 0LL;
  *(void *)(a1 + 492) = 0x3F80000000000000LL;
  *(_DWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 50sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_DWORD *)(a1 + 68sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  *(_DWORD *)(a1 + 72_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 82sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  return result;
}

void sub_100808B24(_DWORD *a1, unsigned int a2)
{
  a1[117] = a2;
  if (a2)
  {
    a1[118] = 1;
    a1[120] = 32;
    float v3 = (float)a2;
    float v4 = 5000.0 / (float)a2;
    BOOL v5 = v4 < 1.0;
    if (v4 < 1.0) {
      float v4 = v4 * 32.0;
    }
    uint64_t v6 = 118LL;
    if (v5) {
      uint64_t v6 = 120LL;
    }
    a1[v6] = v4;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101858AF0);
    }
    __int128 v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v8 = a1[118];
      int v9 = a1[120];
      *(_DWORD *)__int128 buf = 134218496;
      double v21 = (float)(1000000.0 / v3);
      __int16 v22 = 1024;
      int v23 = v8;
      __int16 v24 = 1024;
      int v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "GyroInterval, GyroFreq, %.1f, rotationDecimation, %u, numSamplesForPartialGyroStats, %u",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101858AF0);
      }
      int v10 = a1[118];
      int v11 = a1[120];
      int v14 = 134218496;
      double v15 = (float)(1000000.0 / v3);
      __int16 v16 = 1024;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "GyroInterval, GyroFreq, %.1f, rotationDecimation, %u, numSamplesForPartialGyroStats, %u",  COERCE_DOUBLE(&v14),  24);
      __int128 v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CMDeviceMotionInputs::updateGyroInterval(uint32_t)", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

float sub_100808D7C(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  *(void *)(a1 + 22_Block_object_dispose(va, 8) = *(void *)(a1 + 808);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 816);
  *(_BYTE *)(a1 + 24sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = sub_100808E84(a1, *(void *)(a1 + 800), a1 + 228);
  *(void *)(a1 + 80sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = a3;
  *(_DWORD *)(a1 + 80_Block_object_dispose(va, 8) = a2->i32[0];
  *(_DWORD *)(a1 + 812) = a2->i32[1];
  float result = a2[1].f32[0];
  *(float *)(a1 + 816) = result;
  return result;
}

float32x2_t *sub_100808DFC(float32x2_t *result, float32x2_t *a2)
{
  int v2 = result->i32[0];
  int v3 = result->i32[0] + 1;
  result->i32[0] = v3;
  float v4 = a2[1].f32[0];
  if (v2 > 2)
  {
    float v7 = result->f32[1];
    float v8 = result[2].f32[0];
    result[1] = vsub_f32(result[1], vmul_n_f32(vsub_f32(result[1], *a2), v7));
    float v6 = v8 - (float)(v7 * (float)(v8 - v4));
  }

  else
  {
    float v5 = 1.0 / (float)v3;
    float v6 = v5 * (float)((float)(result[2].f32[0] * (float)v2) + v4);
    result[1] = vmul_n_f32(vadd_f32(vmul_n_f32(result[1], (float)v2), *a2), v5);
  }

  result[2].f32[0] = v6;
  return result;
}

uint64_t sub_100808E84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned __int16 *)(a1 + 682);
  if (*(_DWORD *)(a1 + 684) != (_DWORD)v3) {
    return 0LL;
  }
  unint64_t v4 = a2;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 680);
  if (*(void *)(a1 + 688 + 8 * v6) > a2) {
    return 0LL;
  }
  unint64_t v7 = v3 + v6 - 1;
  uint64_t v8 = v7 >= v3 ? *(unsigned __int16 *)(a1 + 682) : 0LL;
  unint64_t v9 = *(void *)(a1 + 688 + 8 * (v7 - v8));
  if (v9 + 10000 < a2) {
    return 0LL;
  }
  BOOL v12 = v9 >= a2;
  uint64_t v13 = v9 - a2;
  if (!v12)
  {
    uint64_t v14 = 0LL;
    float v15 = (float)v13 * 0.000001;
    unint64_t v16 = *(unsigned __int16 *)(a1 + 728) + (unint64_t)*(unsigned __int16 *)(a1 + 730) - 1;
    unint64_t v17 = *(unsigned int *)(a1 + 732);
    if (v16 < v17) {
      unint64_t v17 = 0LL;
    }
    __int16 v18 = (float32x2_t *)(a1 + 728 + 12 * (v16 - v17));
    float v19 = v15 * v18[2].f32[0];
    float32x2_t v32 = vmul_n_f32(v18[1], v15);
    float v33 = v19;
    do
    {
      v32.f32[v14] = -v32.f32[v14];
      ++v14;
    }

    while (v14 != 3);
    float32x2_t v30 = v32;
    float v31 = v33;
    sub_1008095A8((float *)&v30, (uint64_t)&v32);
    *(float *)a3 = sub_1002B8A2C((uint64_t)&v32, (float *)a3);
    *(_DWORD *)(a3 + 4) = v20;
    *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v21;
    return 1LL;
  }

  if ((_DWORD)v3 == 1) {
    return 1LL;
  }
  unint64_t v22 = 0LL;
  do
  {
    int v23 = (unint64_t *)sub_100809B38((unsigned __int16 *)(a1 + 680), v22++);
    if (v4 >= *v23 && v4 < *(void *)sub_100809B38((unsigned __int16 *)(a1 + 680), v22))
    {
      float v29 = (float)(*(void *)sub_100809B38((unsigned __int16 *)(a1 + 680), v22) - v4) * 0.000001;
      __int16 v24 = (float32x2_t *)sub_10040B624((unsigned __int16 *)(a1 + 728), v22);
      uint64_t v25 = 0LL;
      float v26 = v29 * v24[1].f32[0];
      float32x2_t v32 = vmul_n_f32(*v24, v29);
      float v33 = v26;
      do
      {
        v32.f32[v25] = -v32.f32[v25];
        ++v25;
      }

      while (v25 != 3);
      float32x2_t v30 = v32;
      float v31 = v33;
      sub_1008095A8((float *)&v30, (uint64_t)&v32);
      *(float *)a3 = sub_1002B8A2C((uint64_t)&v32, (float *)a3);
      *(_DWORD *)(a3 + 4) = v27;
      *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v28;
      unint64_t v4 = *(void *)sub_100809B38((unsigned __int16 *)(a1 + 680), v22);
    }

    uint64_t result = 1LL;
  }

  while (v22 < (unint64_t)*(unsigned __int16 *)(a1 + 682) - 1);
  return result;
}

void sub_1008090E8(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if (*(_BYTE *)(a1 + 416))
  {
    if (*(_BYTE *)(a1 + 820))
    {
      *(void *)(a1 + 256) = 0LL;
      *(void *)(a1 + 264) = 0LL;
      *(_DWORD *)(a1 + 272) = 0;
      *(_BYTE *)(a1 + 244) = 1;
      v8.i32[0] = a2->i32[0];
      *(_DWORD *)(a1 + 456) = a2->i32[0];
      __int32 v6 = a2->i32[1];
      *(_DWORD *)(a1 + 46sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v6;
      float v7 = a2[1].f32[0];
      *(float *)(a1 + 464) = v7;
      *(void *)(a1 + 484) = 0LL;
      *(void *)(a1 + 492) = 0x3F80000000000000LL;
      *(_DWORD *)(a1 + 504) = 0;
      *(_BYTE *)(a1 + 50sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
      *(_DWORD *)(a1 + 672) = 1065353216;
      *(_BYTE *)(a1 + 82sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
      v8.i32[1] = v6;
    }

    else
    {
      float32x2_t v8 = *(float32x2_t *)(a1 + 456);
      float v7 = *(float *)(a1 + 464);
    }

    unint64_t v9 = (float32x2_t *)(a1 + 444);
    float v10 = (float)((float)(v7 + a2[1].f32[0]) * 0.5) - *(float *)(a1 + 452);
    float32x2_t v34 = vsub_f32(vmul_f32(vadd_f32(v8, *a2), (float32x2_t)0x3F0000003F000000LL), *(float32x2_t *)(a1 + 444));
    float v35 = v10;
    uint64_t v11 = *(unsigned __int16 *)(a1 + 682);
    unint64_t v12 = *(unsigned int *)(a1 + 684);
    uint64_t v13 = *(unsigned __int16 *)(a1 + 680);
    if (v13 + v11 >= v12) {
      uint64_t v14 = *(unsigned int *)(a1 + 684);
    }
    else {
      uint64_t v14 = 0LL;
    }
    *(void *)(a1 + 680 + 8 * (v13 + v11 - v14) + _Block_object_dispose(va, 8) = a3;
    if (v12 <= v11)
    {
      if (v13 + 1 < v12) {
        LOWORD(v12) = 0;
      }
      *(_WORD *)(a1 + 68sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v13 + 1 - v12;
    }

    else
    {
      *(_WORD *)(a1 + 682) = v11 + 1;
    }

    sub_10040B364((unsigned __int16 *)(a1 + 728), (uint64_t)&v34);
    float v15 = a2[1].f32[0] - *(float *)(a1 + 452);
    *(float32x2_t *)(a1 + 4memset(v21, 0, 32) = vsub_f32(*a2, *v9);
    *(float *)(a1 + 44sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v15;
    *(_DWORD *)(a1 + 456) = a2->i32[0];
    *(_DWORD *)(a1 + 46sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = a2->i32[1];
    *(_DWORD *)(a1 + 464) = a2[1].i32[0];
    int v16 = *(_DWORD *)(a1 + 476) + 1;
    *(_DWORD *)(a1 + 476) = v16;
    if (v16 == *(_DWORD *)(a1 + 472))
    {
      uint64_t v17 = 0LL;
      float v18 = 0.0;
      do
      {
        float v18 = v18 + (float)(*(float *)(a1 + 432 + v17) * *(float *)(a1 + 432 + v17));
        v17 += 4LL;
      }

      while (v17 != 12);
      v33.i32[0] = sqrtf(v18);
      sub_1007E0E20(a1 + 244, v33.f32);
      *(_DWORD *)(a1 + 476) = 0;
    }

    unint64_t v19 = *(void *)(a1 + 408);
    if (v19)
    {
      BOOL v20 = a3 >= v19;
      unint64_t v21 = a3 - v19;
      if (v21 != 0 && v20)
      {
        float v22 = (float)(*(float *)(a1 + 440) * (float)v21) * 0.000001;
        float32x2_t v30 = vmul_f32(vmul_n_f32(*(float32x2_t *)(a1 + 432), (float)v21), (float32x2_t)vdup_n_s32(0x358637BDu));
        float v31 = v22;
        *(double *)v23.i64 = sub_10083365C(&v32, (float *)&v30);
        sub_1008333F0((uint64_t)&v32, (float *)(a1 + 484), &v33, v23);
      }
    }

    unsigned __int8 v24 = *(_BYTE *)(a1 + 500) + 1;
    *(_BYTE *)(a1 + 50sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v24;
    if ((*(_DWORD *)(a1 + 468) * v24) >> 4 >= 0x753)
    {
      sub_100483268((unsigned __int16 *)(a1 + 504), (_OWORD *)(a1 + 484));
      *(_BYTE *)(a1 + 50sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
    }

    if (*(_DWORD *)(a1 + 508) == *(unsigned __int16 *)(a1 + 506))
    {
      unint64_t v25 = 0LL;
      float v26 = 1.0;
      do
      {
        uint64_t v27 = sub_1008096A0((unsigned __int16 *)(a1 + 504), v25);
        *(double *)v29.i64 = sub_100833450((float32x2_t *)(a1 + 484), &v32, v28);
        sub_1008333F0(v27, v32.f32, &v33, v29);
        if (v26 >= v33.f32[3]) {
          float v26 = v33.f32[3];
        }
        ++v25;
      }

      while (v25 != 10);
      *(float *)(a1 + 672) = v26;
    }

    *(void *)(a1 + 40_Block_object_dispose(va, 8) = a3;
  }

float sub_1008093D4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 416) = 1;
  *(_DWORD *)(a1 + 444) = *a2;
  *(_DWORD *)(a1 + 44_Block_object_dispose(va, 8) = a2[1];
  *(_DWORD *)(a1 + 452) = a2[2];
  *(_DWORD *)(a1 + 42sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *(float *)(a1 + 42_Block_object_dispose(va, 8) = result;
  return result;
}

BOOL sub_100809410(uint64_t a1)
{
  int v2 = (unsigned __int16 *)(a1 + 8);
  float v3 = sub_10040B3D0((unsigned __int16 *)(a1 + 8), 0LL, *(unsigned __int16 *)(a1 + 10));
  uint64_t v4 = 0LL;
  float v15 = v3;
  int v16 = v5;
  int v17 = v6;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + (float)(*(float *)((char *)&v15 + v4) * *(float *)((char *)&v15 + v4));
    v4 += 4LL;
  }

  while (v4 != 12);
  float v8 = sqrtf(v7) + -1.0;
  if (v8 <= 0.0) {
    float v8 = -v8;
  }
  if (v8 >= 0.05) {
    return 0LL;
  }
  sub_10040B820(v2, 0LL, *(unsigned __int16 *)(a1 + 10));
  uint64_t v9 = 0LL;
  float v15 = v10;
  int v16 = v11;
  int v17 = v12;
  float v13 = 0.0;
  do
  {
    float v13 = v13 + (float)(*(float *)((char *)&v15 + v9) * *(float *)((char *)&v15 + v9));
    v9 += 4LL;
  }

  while (v9 != 12);
  return sqrtf(v13) < 0.01;
}

uint64_t sub_1008094F4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 417) = *(void *)(a2 + 64) != 0LL;
  return result;
}

float sub_100809508(uint64_t a1)
{
  return sub_100809520(a1 + 244, 32 - *(_DWORD *)(a1 + 480), *(_DWORD *)(a1 + 480));
}

float sub_100809520(uint64_t a1, int a2, int a3)
{
  if (a3 < 1)
  {
    float v10 = 0.0;
  }

  else
  {
    uint64_t v4 = (unsigned __int16 *)(a1 + 28);
    unint64_t v5 = a2;
    float v6 = 0.0;
    float v7 = 0.0;
    uint64_t v8 = a3;
    do
    {
      float v9 = *(float *)sub_100208A44(v4, v5) - v7;
      float v10 = v6 + v9;
      float v7 = (float)((float)(v6 + v9) - v6) - v9;
      ++v5;
      float v6 = v6 + v9;
      --v8;
    }

    while (v8);
  }

  return v10 / (float)a3;
}

void sub_1008095A8(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0LL;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }

  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = -v6;
  if (v6 > 0.0) {
    float v7 = v6;
  }
  if (v7 == 0.0)
  {
    *(_DWORD *)(a2 + memset(v21, 0, 32) = 1065353216;
    *(_OWORD *)a2 = xmmword_101338704;
    *(_OWORD *)(a2 + 16) = unk_101338714;
  }

  else
  {
    __float2 v8 = __sincosf_stret(v6);
    v9[0] = 1.0;
    v9[1] = v8.__sinval / v6;
    v9[2] = (float)(1.0 - v8.__cosval) / (float)(v6 * v6);
    sub_100809898(a1, v9, a2);
  }

void *sub_100809664(void *result)
{
  *float result = &off_101858AA8;
  return result;
}

void sub_100809674(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1008096A0(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101858AF0);
    }
    float v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101858AF0);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      int v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CMOQuaternion>::operator[](const size_t) const [T = CMOQuaternion]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

float sub_100809898@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0LL;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }

  while (v4 != 3);
  float v6 = *a2;
  *(float *)a3 = *a2;
  *(void *)(a3 + 4) = 0LL;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v6;
  *(void *)(a3 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0LL;
  *(_DWORD *)(a3 + 2_Block_object_dispose(va, 8) = 0;
  *(float *)(a3 + memset(v21, 0, 32) = v6;
  float result = sqrtf(v5);
  if (result <= 0.0) {
    float result = -result;
  }
  if (result != 0.0)
  {
    uint64_t v8 = 0LL;
    float v10 = a1[1];
    float v9 = a1[2];
    float v11 = *a1;
    float v12 = -*a1;
    LODWORD(vmemset(v21, 0, 32) = 0;
    *((float *)&v32 + 1) = v9;
    *((float *)&v32 + 2) = -v10;
    *((float *)&v32 + 3) = -v9;
    LODWORD(v33) = 0;
    *(void *)((char *)&v33 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v11));
    *((float *)&v33 + 3) = v12;
    int v34 = 0;
    float v13 = a2[1];
    int v26 = 0;
    __int128 v24 = v32;
    __int128 v25 = v33;
    do
    {
      *(float *)((char *)&v24 + v_Block_object_dispose(va, 8) = v13 * *(float *)((char *)&v24 + v8);
      v8 += 4LL;
    }

    while (v8 != 36);
    uint64_t v14 = 0LL;
    int v29 = v26;
    __int128 v27 = v24;
    __int128 v28 = v25;
    float v15 = a2[2];
    __int128 v18 = v32;
    __int128 v19 = v33;
    int v20 = v34;
    do
    {
      *(float *)((char *)&v18 + v14) = v15 * *(float *)((char *)&v18 + v14);
      v14 += 4LL;
    }

    while (v14 != 36);
    v21[0] = v18;
    v21[1] = v19;
    int v22 = v20;
    sub_100809A4C((uint64_t)v21, (uint64_t)&v32, (uint64_t)v23);
    for (unint64_t i = 0LL; i != 9; ++i)
      *((float *)&v27 + i) = sub_1005AAEAC((uint64_t)v23, i) + *((float *)&v27 + i);
    unint64_t v17 = 0LL;
    v30[0] = v27;
    v30[1] = v28;
    int v31 = v29;
    do
    {
      float result = sub_1005AAEAC((uint64_t)v30, v17) + *(float *)(a3 + 4 * v17);
      *(float *)(a3 + 4 * v17++) = result;
    }

    while (v17 != 9);
  }

  return result;
}

float *sub_100809A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0LL; i != 3; ++i)
  {
    for (unint64_t j = 0LL; j != 3; ++j)
    {
      float v8 = sub_1002B9B68(a1, i, 0LL);
      float v9 = v8 * sub_1002B9B68(a2, 0LL, j);
      *(float *)sub_1002B9EC4(a3, i, j) = v9;
      for (unint64_t k = 1LL; k != 3; ++k)
      {
        float v11 = sub_1002B9B68(a1, i, k);
        float v12 = sub_1002B9B68(a2, k, j);
        float result = (float *)sub_1002B9EC4(a3, i, j);
        *float result = *result + (float)(v11 * v12);
      }
    }
  }

  return result;
}

uint64_t sub_100809B38(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101858AF0);
    }
    float v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101858AF0);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      float v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

uint64_t sub_100809D30(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + memset(v21, 0, 32) = 0u;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(void *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = -1LL;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0xBFF0000000000000LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = -1;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_101858B10);
  }
  float v3 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting up CLDeviceMotionAWDAggregator", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101858B10);
    }
    v11[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Starting up CLDeviceMotionAWDAggregator",  v11,  2);
    float v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLDeviceMotionAWDAggregator::CLDeviceMotionAWDAggregator()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  sub_10080A038(a1, (unsigned int *)a1);
  sub_10080A220(a1, v2);
  if ((sub_1004F97F4() & 0x10) != 0)
  {
    unint64_t v4 = operator new(0x20uLL);
    void *v4 = off_1018A2210;
    void *v4 = &off_1018A42E0;
    v4[1] = 0LL;
    _OWORD v4[2] = sub_10080A404;
    double v4[3] = a1;
    *(void *)(a1 + 176) = v4;
    uint64_t v5 = sub_10099F510();
    sub_1006DCB40(v5, 0, *(void *)(a1 + 176), -1.0);
    float v6 = operator new(0x20uLL);
    void *v6 = off_1018A2210;
    void *v6 = &off_1018A42E0;
    v6[1] = 0LL;
    _OWORD v6[2] = sub_10080A5BC;
    void v6[3] = a1;
    *(void *)(a1 + 184) = v6;
    uint64_t v7 = sub_100A874F4();
    sub_1006DCB40(v7, 0, *(void *)(a1 + 184), -1.0);
  }

  return a1;
}

void sub_100809FEC(_Unwind_Exception *exception_object)
{
}

void sub_10080A038(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = sub_1002F8DDC();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  float v6 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Loading daemon cache for Compass Saturations AWD metrics",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    __int16 v9 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Loading daemon cache for Compass Saturations AWD metrics",  &v9,  2);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if ((sub_10080B9B0(a1, (float *)a2, v10) & 1) == 0) {
LABEL_8:
  }
    sub_10080B35C(a1, a2);
  objc_autoreleasePoolPop(v4);
}

void sub_10080A220(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = sub_1002F8DDC();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  float v6 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Loading daemon cache for MotionGyroDaily AWD metrics",  buf,  2u);
  }

  uint64_t v7 = sub_1002921D0(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    __int16 v10 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Loading daemon cache for MotionGyroDaily AWD metrics",  &v10,  2);
    __int16 v9 = (uint8_t *)v8;
    uint64_t v7 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if ((sub_10080C178(v7, a2, v11) & 1) == 0) {
LABEL_8:
  }
    sub_10080BF2C(a1, a2);
  objc_autoreleasePoolPop(v4);
}

void sub_10080A404(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  unint64_t v4 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keyboard attached,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Keyboard attached,%d",  v7);
    float v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLDeviceMotionAWDAggregator::onKeyboardState(const BOOL *, void *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (v3) {
    sub_10080C500(a2);
  }
}

void sub_10080A5BC(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  unint64_t v4 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cover open,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Cover open,%d",  v7);
    float v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLDeviceMotionAWDAggregator::onCoverState(const BOOL *, void *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (v3) {
    sub_10080C500(a2);
  }
}

void sub_10080A778(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a1 + 56) > 0.0)
  {
    float v4 = *(float *)(a1 + 172);
    if (v4 > 0.0)
    {
      float v5 = *(float *)(a1 + 144) - *(float *)(a1 + 160);
      float v6 = *(float *)(a1 + 148) - *(float *)(a1 + 164);
      float v7 = *(float *)(a1 + 152) - *(float *)(a1 + 168);
      unsigned int v8 = llroundf(*(float *)(a1 + 156) - v4);
      *(_DWORD *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = llroundf(sqrtf((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)));
      *(_DWORD *)(a1 + 64) = v8;
    }
  }

  *(_OWORD *)a2 = *(_OWORD *)a1;
  int v9 = (void **)(a1 + 16);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 16));
  __int128 v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = v10;
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)int v9 = 0u;
  *(_OWORD *)(a1 + memset(v21, 0, 32) = 0u;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(void *)(a1 + 6sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = -1LL;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(_OWORD *)(a1 + 16sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10080A874(a1, (unsigned int *)a1);
}

void sub_10080A874(uint64_t a1, unsigned int *a2)
{
  float v4 = objc_autoreleasePoolPush();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  float v5 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Saving daemon cache for CompassSaturations AWD metrics",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    LOWORD(v13[0]) = 0;
    int v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Saving daemon cache for CompassSaturations AWD metrics",  v13,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)",  "%s\n",  v9);
  }

  uint64_t v6 = sub_1002F8DDC();
  if ((sub_1002A6F20(v6, (uint64_t)@"CompassSaturations", v13) & 1) != 0)
  {
    sub_10080B53C(a1, a2);
    uint64_t v7 = sub_1002F8DDC();
    sub_1002AB3DC(v7);
  }

  else
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    unsigned int v8 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning daemon cache does not exist!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101858B30);
      }
      v12[0] = 0;
      LODWORD(v11) = 2;
      __int128 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "#Warning daemon cache does not exist!",  v12,  v11);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)",  "%s\n",  v10);
    }
  }

  objc_autoreleasePoolPop(v4);
}

void sub_10080AB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 72;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 72);
  float v5 = (void **)(a1 + 88);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 88));
  int v6 = *(_DWORD *)(a1 + 120);
  *(void *)(a2 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)(a1 + 112);
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = v6;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0xBFF0000000000000LL;
  *float v5 = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = -1;
  sub_10080AC1C(a1, v4);
}

void sub_10080AC1C(uint64_t a1, uint64_t a2)
{
  int v3 = objc_autoreleasePoolPush();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  uint64_t v4 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Saving daemon cache for MotionGyroDaily AWD metrics",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    LOWORD(v18[0]) = 0;
    int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Saving daemon cache for MotionGyroDaily AWD metrics",  v18,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)",  "%s\n",  v15);
  }

  uint64_t v5 = sub_1002F8DDC();
  uint64_t v6 = sub_1002A6F20(v5, (uint64_t)@"MotionGyroDaily", &v17);
  if ((v6 & 1) != 0)
  {
    sub_10080C0FC(v6, a2);
    uint64_t v7 = sub_1002F8DDC();
    sub_1002AB3DC(v7);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    unsigned int v8 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a2 + 44);
      int v10 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)__int128 buf = 67109376;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101858B30);
      }
      int v11 = *(_DWORD *)(a2 + 44);
      int v12 = *(_DWORD *)(a2 + 48);
      v18[0] = 67109376;
      v18[1] = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      unint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "magnitude,%d,activeMins,%d",  v18);
LABEL_28:
      int v16 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)",  "%s\n",  v13);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    __int16 v14 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning daemon cache does not exist!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101858B30);
      }
      LOWORD(v18[0]) = 0;
      unint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "#Warning daemon cache does not exist!");
      goto LABEL_28;
    }
  }

  objc_autoreleasePoolPop(v3);
}

void sub_10080B044(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 2))
  {
    ++*(_DWORD *)(a1 + 40);
    double Current = CFAbsoluteTimeGetCurrent();
    double v5 = Current;
    int v6 = *(_DWORD *)(a1 + 40);
    if (v6 >= 2)
    {
      double v7 = *(double *)(a1 + 136) + Current - *(double *)(a1 + 128);
      *(double *)(a1 + 136) = v7;
      *(_DWORD *)(a1 + 44) = (int)(v7 / (double)(v6 - 1) * 1000.0);
    }

    *(double *)(a1 + 12_Block_object_dispose(va, 8) = v5;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101858B10);
    }
    unsigned int v8 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a1 + 40);
      int v10 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)__int128 buf = 67109632;
      int v21 = v9;
      __int16 v22 = 2048;
      double v23 = v5;
      __int16 v24 = 1024;
      int v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Received compass saturation,%d,timestamp,%f,meanDeltaTimeSaturations,%d",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101858B10);
      }
      int v12 = *(_DWORD *)(a1 + 44);
      __int16 v16 = 2048;
      double v17 = v5;
      __int16 v18 = 1024;
      int v19 = v12;
      LODWORD(v14) = 24;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Received compass saturation,%d,timestamp,%f,meanDeltaTimeSaturations,%d",  &v15,  v14,  67109632);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::updateCalibrationStats(const CMMotionCoprocessorReply::CompassCalibration)",  "%s\n",  v13);
    }
  }

  if (*(unsigned __int8 *)(a2 + 1) - 4 >= 2)
  {
    if (!*(_BYTE *)(a2 + 1))
    {
      *(_DWORD *)(a1 + 56) = -1082130432;
      *(void *)(a1 + 144) = 0LL;
      *(void *)(a1 + 152) = 0LL;
    }
  }

  else
  {
    float v11 = *(float *)(a2 + 53);
    if (v11 > *(float *)(a1 + 56))
    {
      *(float *)(a1 + 56) = v11;
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 5);
      *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 9);
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 13);
      *(float *)(a1 + 156) = 1.0 / *(float *)(a2 + 29);
    }
  }

  sub_10080A874(a1, (unsigned int *)a1);
}

void sub_10080B2F8(unsigned int *a1, uint64_t a2, int a3)
{
  a1[12] = (int)*(float *)&a3;
  a1[13] = (int)*((float *)&a2 + 1);
  sub_10080A874((uint64_t)a1, a1);
}

void sub_10080B318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&__int128 v3 = a2;
  BYTE8(v3) = a3;
  *(_DWORD *)(a1 + 116) = (int)*((float *)&a3 + 1);
  *(_DWORD *)(a1 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = llroundf((float)((float)*(unint64_t *)((char *)&v3 + 1) * 0.000001) / 60.0);
  sub_10080AC1C(a1, a1 + 72);
}

void sub_10080B35C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  double v5 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Creating daemon cache for AWD CompassSaturations metric",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Creating daemon cache for AWD CompassSaturations metric",  v10,  2);
    int v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::CompassSaturations &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  sub_10080B53C(a1, a2);
  uint64_t v6 = sub_1002F8DDC();
  sub_1002AB3DC(v6);
  uint64_t v7 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v7 + 944LL))(v7);
  objc_autoreleasePoolPop(v4);
}

id sub_10080B53C(uint64_t a1, unsigned int *a2)
{
  id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[10]),  @"NumSaturations");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[11]),  @"BetweenSaturations");
  v52[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[12]);
  v52[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[13]);
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v52, 2),  @"Intensities");
  LODWORD(sub_1012279C0(0LL, v4, v5) = a2[14];
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5),  @"MaxQuality");
  v51[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[15]);
  v51[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[16]);
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v51, 2),  @"DeltaCalibrations");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[17]),  @"NumCoverAttach");
  id v6 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  for (uint64_t i = 0LL; i != 4; ++i)
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 160 + 4 * i);
    objc_msgSend( v6,  "setObject:atIndexedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7),  i);
  }

  [v4 setObject:v6 forKeyedSubscript:@"PreviousCalibration"];
  id v9 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  for (uint64_t j = 0LL; j != 4; ++j)
  {
    LODWORD(v1sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(_DWORD *)(a1 + 144 + 4 * j);
    objc_msgSend( v9,  "setObject:atIndexedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10),  j);
  }

  [v4 setObject:v9 forKeyedSubscript:@"CurrentCalibration"];
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 128)),  @"PreviousSaturationTime");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 136)),  @"SumDeltaSaturations");
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  int v12 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v13 = a2[10];
    unsigned int v14 = a2[11];
    unsigned int v15 = a2[12];
    unsigned int v16 = a2[13];
    double v17 = *((float *)a2 + 14);
    unsigned int v18 = a2[15];
    unsigned int v19 = a2[16];
    unsigned int v20 = a2[17];
    *(_DWORD *)__int128 buf = 67110912;
    unsigned int v36 = v13;
    __int16 v37 = 1024;
    unsigned int v38 = v14;
    __int16 v39 = 1024;
    unsigned int v40 = v15;
    __int16 v41 = 1024;
    unsigned int v42 = v16;
    __int16 v43 = 2048;
    double v44 = v17;
    __int16 v45 = 1024;
    unsigned int v46 = v18;
    __int16 v47 = 1024;
    unsigned int v48 = v19;
    __int16 v49 = 1024;
    unsigned int v50 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    unsigned int v22 = a2[11];
    unsigned int v23 = a2[12];
    unsigned int v24 = a2[13];
    double v25 = *((float *)a2 + 14);
    unsigned int v26 = a2[15];
    unsigned int v27 = a2[17];
    LOWORD(v3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 1024;
    HIWORD(v3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v22;
    *(_DWORD *)int v31 = v23;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v24;
    *(_WORD *)&v31[10] = 2048;
    LOWORD(vmemset(v21, 0, 32) = HIWORD(v26);
    HIWORD(vmemset(v21, 0, 32) = 1024;
    __int16 v33 = 1024;
    unsigned int v34 = v27;
    __int128 v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d",  &v29,  54,  67110912,  v30,  *(double *)v31,  *(_DWORD *)&v31[8],  HIDWORD(v25),  v32);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSDictionary *CLDeviceMotionAWDAggregator::populateStatsToCache(const CLDaemonStats_Type::CompassSaturations &) const",  "%s\n",  v28);
  }

  return v4;
}

uint64_t sub_10080B9B0(uint64_t a1, float *a2, void *a3)
{
  *((_DWORD *)a2 + 1sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"NumSaturations"),  "integerValue");
  *((_DWORD *)a2 + 11) = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"BetweenSaturations"),  "integerValue");
  id v6 = [a3 objectForKeyedSubscript:@"Intensities"];
  *((_DWORD *)a2 + 12) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "integerValue");
  *((_DWORD *)a2 + 13) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "integerValue");
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", @"MaxQuality"), "floatValue");
  *((_DWORD *)a2 + 14) = v7;
  id v8 = [a3 objectForKeyedSubscript:@"DeltaCalibrations"];
  *((_DWORD *)a2 + 15) = objc_msgSend(objc_msgSend(v8, "objectAtIndexedSubscript:", 0), "integerValue");
  *((_DWORD *)a2 + 16) = objc_msgSend(objc_msgSend(v8, "objectAtIndexedSubscript:", 1), "integerValue");
  *((_DWORD *)a2 + 17) = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"NumCoverAttach"),  "unsignedIntegerValue");
  id v9 = [a3 objectForKeyedSubscript:@"PreviousCalibration"];
  for (uint64_t i = 0LL; i != 4; ++i)
  {
    objc_msgSend(objc_msgSend(v9, "objectAtIndexedSubscript:", i), "floatValue");
    *(_DWORD *)(a1 + 160 + 4 * i) = v11;
  }

  id v12 = [a3 objectForKeyedSubscript:@"CurrentCalibration"];
  for (uint64_t j = 0LL; j != 4; ++j)
  {
    objc_msgSend(objc_msgSend(v12, "objectAtIndexedSubscript:", j), "floatValue");
    *(_DWORD *)(a1 + 144 + 4 * j) = v14;
  }

  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", @"PreviousSaturationTime"), "doubleValue");
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v15;
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", @"SumDeltaSaturations"), "doubleValue");
  *(void *)(a1 + 136) = v16;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  double v17 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *((_DWORD *)a2 + 10);
    int v19 = *((_DWORD *)a2 + 11);
    int v20 = *((_DWORD *)a2 + 12);
    int v21 = *((_DWORD *)a2 + 13);
    double v22 = a2[14];
    int v23 = *((_DWORD *)a2 + 15);
    int v24 = *((_DWORD *)a2 + 16);
    int v25 = *((_DWORD *)a2 + 17);
    *(_DWORD *)__int128 buf = 67110912;
    int v42 = v18;
    __int16 v43 = 1024;
    int v44 = v19;
    __int16 v45 = 1024;
    int v46 = v20;
    __int16 v47 = 1024;
    int v48 = v21;
    __int16 v49 = 2048;
    double v50 = v22;
    __int16 v51 = 1024;
    int v52 = v23;
    __int16 v53 = 1024;
    int v54 = v24;
    __int16 v55 = 1024;
    int v56 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    int v27 = *((_DWORD *)a2 + 11);
    int v28 = *((_DWORD *)a2 + 12);
    int v29 = *((_DWORD *)a2 + 13);
    double v30 = a2[14];
    int v31 = *((_DWORD *)a2 + 15);
    int v32 = *((_DWORD *)a2 + 17);
    LOWORD(v36) = 1024;
    HIWORD(v36) = v27;
    *(_DWORD *)__int16 v37 = v28;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = v29;
    *(_WORD *)&v37[10] = 2048;
    LOWORD(v3_Block_object_dispose(va, 8) = HIWORD(v31);
    HIWORD(v3_Block_object_dispose(va, 8) = 1024;
    __int16 v39 = 1024;
    int v40 = v32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d",  &v35,  54,  67110912,  v36,  *(double *)v37,  *(_DWORD *)&v37[8],  HIDWORD(v30),  v38);
    unsigned int v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &, NSDictionary *)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  return 1LL;
}

#error "10080BEE8: call analysis failed (funcsize=82)"
void sub_10080BF2C(uint64_t a1, uint64_t a2)
{
  void *v3;
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];
  __int128 v3 = objc_autoreleasePoolPush();
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  id v4 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Creating daemon cache for AWD MotionGyroDaily metric",  buf,  2u);
  }

  double v5 = sub_1002921D0(115, 2);
  if ((_DWORD)v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Creating daemon cache for AWD MotionGyroDaily metric",  v10,  2);
    id v9 = (uint8_t *)v8;
    double v5 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::MotionGyroDaily &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  sub_10080C0FC(v5, a2);
  id v6 = sub_1002F8DDC();
  sub_1002AB3DC(v6);
  int v7 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v7 + 944LL))(v7);
  objc_autoreleasePoolPop(v3);
}

id sub_10080C0FC(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 44)),  @"GyroMagnitude");
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 48)),  @"ActiveMins");
  return v3;
}

uint64_t sub_10080C178(uint64_t a1, uint64_t a2, void *a3)
{
  *(_DWORD *)(a2 + 44) = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"GyroMagnitude"),  "integerValue");
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"ActiveMins"),  "integerValue");
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  double v5 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a2 + 44);
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)__int128 buf = 67109376;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    int v9 = *(_DWORD *)(a2 + 44);
    int v10 = *(_DWORD *)(a2 + 48);
    v13[0] = 67109376;
    v13[1] = v9;
    __int16 v14 = 1024;
    int v15 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "magnitude,%d,activeMins,%d",  v13,  14);
    id v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &, NSDictionary *)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return 1LL;
}

#error "10080C4BC: call analysis failed (funcsize=82)"
void sub_10080C500(uint64_t a1)
{
  os_log_s *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;
  ++*(_DWORD *)(a1 + 68);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101858B30);
  }
  uint64_t v2 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    id v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "New cover attachment,total,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101858B30);
    }
    id v4 = *(_DWORD *)(a1 + 68);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "New cover attachment,total,%d",  v7);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDeviceMotionAWDAggregator::newCoverAttach()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_10080C6BC(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_10080C6E8(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_10080C714()
{
  if (sub_100231608())
  {
    unsigned __int8 v0 = operator new(0x68uLL);
    sub_100E61F40((uint64_t)v0, (uint64_t)"CLAccessoryMagnetometer", 2, 32, 131);
    *(void *)unsigned __int8 v0 = &off_101858B80;
    v0[25] = 0x800000;
    qword_1019A1768 = (uint64_t)v0;
  }

void sub_10080C774(_Unwind_Exception *a1)
{
}

uint64_t sub_10080C788()
{
  if (qword_101998B08 != -1) {
    dispatch_once(&qword_101998B08, &stru_101858B50);
  }
  return qword_1019A1768;
}

void sub_10080C7D0(void *a1)
{
  uint64_t v1 = sub_100E61F94(a1);
  operator delete(v1);
}

double sub_10080C7E4(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101858BD8);
    }
    id v4 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d",  buf,  8u);
    }

    double v5 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      int v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d",  &v16,  8);
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    sub_100E62108(a1);
    if (*a3 > 0.0) {
      *(_BYTE *)(a1 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
    }
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101858BD8);
    }
    int v10 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
    {
      double v11 = *a3;
      *(_DWORD *)__int128 buf = 134349056;
      double v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccessoryMagnetometer] Setting update interval to %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      double v13 = *a3;
      int v16 = 134349056;
      double v17 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "[AccessoryMagnetometer] Setting update interval to %{public}f",  &v16,  12);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    sub_10071A73C(*(void *)(a1 + 32), *a3);
    return *a3;
  }

  return v5;
}

double sub_10080CB1C(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101858BD8);
    }
    id v4 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d",  buf,  8u);
    }

    double v5 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      int v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d",  &v16,  8);
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    sub_100E62108(a1);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101858BD8);
    }
    int v10 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
    {
      double v11 = *a3;
      *(_DWORD *)__int128 buf = 134349056;
      double v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccessoryMagnetometer] Setting batch interval to %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      uint64_t v13 = *(void *)a3;
      int v16 = 134349056;
      uint64_t v17 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "[AccessoryMagnetometer] Setting batch interval to %{public}f",  &v16,  12);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    sub_10071A7C0(*(void *)(a1 + 32), *a3);
    return *a3;
  }

  return v5;
}

void sub_10080CE44(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 30))
  {
    *(_BYTE *)(a1 + 3sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 1;
    int v13 = 0;
    sub_1010DDBC0(v14, "N/A");
    sub_1010DDBC0(__p, "N/A");
    int v18 = 0;
    if (sub_100E62278(a1, (uint64_t)&v13))
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      id v3 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
      {
        if (v15 >= 0) {
          id v4 = v14;
        }
        else {
          id v4 = (void **)v14[0];
        }
        if (v17 >= 0) {
          double v5 = __p;
        }
        else {
          double v5 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 67240707;
        int v25 = v13;
        __int16 v26 = 2081;
        int v27 = v4;
        __int16 v28 = 2081;
        int v29 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101858BD8);
        }
        if (v15 >= 0) {
          int v7 = v14;
        }
        else {
          int v7 = (void **)v14[0];
        }
        if (v17 >= 0) {
          id v8 = __p;
        }
        else {
          id v8 = (void **)__p[0];
        }
        v19[0] = 67240707;
        v19[1] = v13;
        __int16 v20 = 2081;
        int v21 = v7;
        __int16 v22 = 2081;
        int v23 = v8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s",  v19,  28);
        int v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      sub_1006DD528(a1, 1LL, (uint64_t)&v13, 64LL);
    }

    else
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      int v6 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "[AccessoryMagnetometer] Service not found!",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101858BD8);
        }
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryMagnetometer] Service not found!",  v19,  2);
        id v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }
    }

    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }

void sub_10080D230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_10080D26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IOHIDEventGetType(a4) == 21)
  {
    float FloatValue = IOHIDEventGetFloatValue(a4, 1376256LL);
    float v19 = FloatValue;
    float v7 = IOHIDEventGetFloatValue(a4, 1376257LL);
    float v20 = v7;
    float v8 = IOHIDEventGetFloatValue(a4, 1376258LL);
    float v21 = v8;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    double v10 = sub_101171C7C(TimeStamp);
    double v18 = v10;
    unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue(a4, 1376261LL);
    unsigned __int16 v23 = IntegerValue;
    uint64_t v12 = sub_100FACB74();
    uint64_t v22 = v12;
    float v13 = *(float *)(a1 + 100);
    float v24 = v13;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101858BD8);
    }
    __int16 v14 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67241728;
      int v39 = IntegerValue;
      __int16 v40 = 2050;
      double v41 = FloatValue;
      __int16 v42 = 2050;
      double v43 = v7;
      __int16 v44 = 2050;
      double v45 = v8;
      __int16 v46 = 2050;
      double v47 = v13;
      __int16 v48 = 2050;
      uint64_t v49 = v12;
      __int16 v50 = 2050;
      double v51 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20 f,sensorTime,%{public}llu,timestamp,%{public}20.20f",  buf,  0x44u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101858BD8);
      }
      v25[0] = 67241728;
      v25[1] = IntegerValue;
      __int16 v26 = 2050;
      double v27 = FloatValue;
      __int16 v28 = 2050;
      double v29 = v7;
      __int16 v30 = 2050;
      double v31 = v8;
      __int16 v32 = 2050;
      double v33 = v13;
      __int16 v34 = 2050;
      uint64_t v35 = v12;
      __int16 v36 = 2050;
      double v37 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20 f,sensorTime,%{public}llu,timestamp,%{public}20.20f",  v25,  68);
      char v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAccessoryMagnetometer::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    sub_10080CE44(a1, (uint64_t)&v18);
  }

  else if (IOHIDEventGetType(a4) == 15)
  {
    float v15 = IOHIDEventGetFloatValue(a4, 983040LL);
    *(float *)(a1 + 10sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v15;
  }

void sub_10080D598(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void *sub_10080D5C4(void *a1, uint64_t a2, void *a3)
{
  *a1 = off_101858C08;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = 0LL;
  sub_10036B3B4((uint64_t)sub_10080D6B4, (uint64_t)a1, a3, &v10);
  uint64_t v4 = v10;
  uint64_t v10 = 0LL;
  uint64_t v5 = a1[3];
  a1[3] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v6 = v10;
    uint64_t v10 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  uint64_t v7 = a1[1];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10080D88C;
  float v9[3] = &unk_10182B3E0;
  _DWORD v9[4] = a1;
  CLConnection::setDefaultMessageHandler(v7, v9);
  return a1;
}

void sub_10080D684(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100213E60(v1);
  _Unwind_Resume(a1);
}

void sub_10080D6B4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101858C48);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionActivityLiteClient::onMotionActivityNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101858C48);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionActivityLiteClient::onMotionActivityNotification, event:%{public, location: escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_10080E6B8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10080D86C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10080D88C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v9);
  uint64_t v6 = v10;
  if (v10)
  {
    uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_10080D918( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10080D930(void *a1)
{
  *a1 = off_101858C08;
  uint64_t v2 = a1[3];
  a1[3] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_100213E60(a1);
}

void sub_10080D974(void *a1)
{
  *a1 = off_101858C08;
  uint64_t v2 = a1[3];
  a1[3] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = sub_100213E60(a1);
  operator delete(v3);
}

void sub_10080D9BC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 59LL)
    {
LABEL_7:
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101858C68);
      }
      uint64_t v6 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = (uint64_t *)CLConnectionMessage::name(*a2);
        else {
          unint64_t v8 = (uint64_t *)*v7;
        }
        *(_DWORD *)__int128 buf = 136446210;
        float v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Got unhandled mesage of type %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101858C68);
        }
        uint64_t v15 = qword_1019344F8;
        __int16 v16 = (uint64_t *)CLConnectionMessage::name(*a2);
        else {
          char v17 = (uint64_t *)*v16;
        }
        int v21 = 136446210;
        uint64_t v22 = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  17LL,  "Got unhandled mesage of type %{public}s",  &v21,  12);
        uint64_t v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMotionActivityLiteClient::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }

      return;
    }

    uint64_t v4 = (void *)*v4;
  }

  else if (v5 != 59)
  {
    goto LABEL_7;
  }

  if (memcmp(v4, "MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", 0x3BuLL)) {
    goto LABEL_7;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  v20[0] = v9;
  v20[1] = v10;
  if (v10)
  {
    char v11 = (unint64_t *)((char *)v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  sub_10080DC84(a1, v20);
  if (v10)
  {
    int v13 = (unint64_t *)((char *)v10 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v10 + 16LL))(v10);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
    }
  }

void sub_10080DC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10080DC84(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101858C68);
  }
  uint64_t v4 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received MotionActivityUpdate request", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101858C68);
    }
    v20[0] = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "Received MotionActivityUpdate request",  v20,  v19);
    __int16 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (sub_10080E1A0(a1, (int *)&v21))
  {
    Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
    sub_1002A5550((int)v20, Dictionary);
    HIBYTE(v19) = 0;
    if ((sub_1002A6F64((uint64_t)v20, "kCLConnectionMessageSubscribeKey", (BOOL *)&v19 + 7) & 1) != 0)
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101858C68);
      }
      uint64_t v6 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 67240192;
        int v28 = HIBYTE(v19);
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Received MotionActivityUpdate subscription,%{public}u",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101858C68);
        }
        v22[0] = 67240192;
        v22[1] = HIBYTE(v19);
        LODWORD(v19) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "Received MotionActivityUpdate subscription,%{public}u",  v22,  v19);
        __int16 v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(v7 + 8);
      unint64_t v8 = *(void **)(v7 + 16);
      if (HIBYTE(v19)) {
        [v8 register:v9 forNotification:1 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:1];
      }
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101858C68);
      }
      unint64_t v12 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 68289026;
        int v28 = 0;
        __int16 v29 = 2082;
        __int16 v30 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101858C68);
        }
      }

      int v13 = (os_log_s *)qword_1019344F8;
      if (os_signpost_enabled((os_log_t)qword_1019344F8))
      {
        *(_DWORD *)__int128 buf = 68289026;
        int v28 = 0;
        __int16 v29 = 2082;
        __int16 v30 = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      }

      unint64_t v14 = *a2;
      uint64_t v23 = CMErrorMessage;
      float v24 = &off_1018D3A10;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL);
      CLConnectionMessage::sendReply(v14);
    }

    return sub_1002A5590(v20);
  }

  else
  {
    uint64_t v10 = *a2;
    uint64_t v25 = CMErrorMessage;
    __int16 v26 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v21);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL);
    return CLConnectionMessage::sendReply(v10);
  }

void sub_10080E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_10080E1A0(uint64_t a1, int *a2)
{
  if ((sub_10036AA24() & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    sub_1010DDBC0(buf, "com.apple.locationd.activity");
    char isEntitled = CLConnection::isEntitled(v4, buf);
    char v6 = isEntitled;
    if (SBYTE3(v37) < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0) {
        goto LABEL_4;
      }
    }

    else if ((isEntitled & 1) != 0)
    {
LABEL_4:
      BOOL result = 1LL;
      int v8 = 100;
      goto LABEL_24;
    }

    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101858C68);
    }
    unint64_t v12 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      unint64_t v14 = __p;
      *(_DWORD *)__int128 buf = 136315650;
      if ((v32 & 0x80000000LL) != 0) {
        unint64_t v14 = *(_BYTE **)__p;
      }
      *(void *)&uint8_t buf[4] = v14;
      __int16 v34 = 1024;
      int v35 = RemotePid;
      __int16 v36 = 2048;
      uint64_t v37 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "ActivityLite client failed entitlement check,connection,%s,pid,%d,this,%p",  buf,  0x1Cu);
      if (SBYTE3(v32) < 0) {
        operator delete(*(void **)__p);
      }
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101858C68);
      }
      uint64_t v20 = qword_1019344F8;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      int v21 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      uint64_t v22 = v26;
      *(_DWORD *)__int128 __p = 136315650;
      if (v27 < 0) {
        uint64_t v22 = (void **)v26[0];
      }
      *(void *)&__p[4] = v22;
      __int16 v29 = 1024;
      int v30 = v21;
      __int16 v31 = 2048;
      uint64_t v32 = a1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  0LL,  "ActivityLite client failed entitlement check,connection,%s,pid,%d,this,%p",  __p,  28,  v25);
      float v24 = v23;
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)",  "%s\n",  v24);
      if (v24 != buf) {
        free(v24);
      }
      BOOL result = 0LL;
    }

    int v8 = 110;
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101858C68);
    }
    uint64_t v9 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      int v10 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      char v11 = __p;
      *(_DWORD *)__int128 buf = 136315650;
      if ((v32 & 0x80000000LL) != 0) {
        char v11 = *(_BYTE **)__p;
      }
      *(void *)&uint8_t buf[4] = v11;
      __int16 v34 = 1024;
      int v35 = v10;
      __int16 v36 = 2048;
      uint64_t v37 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "ActivityLite not available unable to service request,connection,%s,pid,%d,this,%p",  buf,  0x1Cu);
      if (SBYTE3(v32) < 0) {
        operator delete(*(void **)__p);
      }
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101858C68);
      }
      uint64_t v15 = qword_1019344F8;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      int v16 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      char v17 = v26;
      *(_DWORD *)__int128 __p = 136315650;
      if (v27 < 0) {
        char v17 = (void **)v26[0];
      }
      *(void *)&__p[4] = v17;
      __int16 v29 = 1024;
      int v30 = v16;
      __int16 v31 = 2048;
      uint64_t v32 = a1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  0LL,  "ActivityLite not available unable to service request,connection,%s,pid,%d,this,%p",  __p,  28,  v25);
      uint64_t v19 = v18;
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)",  "%s\n",  v19);
      if (v19 != buf) {
        free(v19);
      }
      BOOL result = 0LL;
    }

    int v8 = 109;
  }

void sub_10080E664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10080E6B8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1 && *(void *)(a1 + 8))
  {
    char v6 = objc_alloc(&OBJC_CLASS___CMMotionActivity);
    __int128 v7 = *(_OWORD *)(a4 + 112);
    v26[6] = *(_OWORD *)(a4 + 96);
    v26[7] = v7;
    uint64_t v27 = *(void *)(a4 + 128);
    __int128 v8 = *(_OWORD *)(a4 + 48);
    v26[2] = *(_OWORD *)(a4 + 32);
    void v26[3] = v8;
    __int128 v9 = *(_OWORD *)(a4 + 80);
    v26[4] = *(_OWORD *)(a4 + 64);
    v26[5] = v9;
    __int128 v10 = *(_OWORD *)(a4 + 16);
    v26[0] = *(_OWORD *)a4;
    v26[1] = v10;
    char v11 = -[CMMotionActivity initWithMotionActivity:](v6, "initWithMotionActivity:", v26);
    uint64_t v28 = CMMotionActivityData;
    __int16 v29 = v11;
    uint64_t v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL);

    sub_10080E8CC("MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", &v25, &v23);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v21 = v23;
    uint64_t v22 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    CLConnection::sendMessage(v12, &v21);
    uint64_t v15 = v22;
    if (v22)
    {
      int v16 = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    __int16 v18 = v24;
    if (v24)
    {
      uint64_t v19 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

void sub_10080E850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10080E874(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10080E8A0(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void *sub_10080E8CC@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x70uLL);
  BOOL result = sub_100215340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10080E918(_Unwind_Exception *a1)
{
}

uint64_t sub_10080E94C()
{
  if (qword_101998B10 != -1) {
    dispatch_once(&qword_101998B10, &stru_101858C88);
  }
  return qword_1019A1770;
}

void sub_10080E98C(id a1)
{
  uint64_t v1 = operator new(0x28uLL);
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)uint64_t v1 = _Q0;
  v1[2] = 0xBFF0000000000000LL;
  v1[3] = 0LL;
  v1[4] = 0xBFF0000000000000LL;
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101858CA8);
  }
  __int128 v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "LocationController,#time,created time instance",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101858CA8);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "LocationController,#time,created time instance",  v10,  2);
    __int128 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLLocationControllerLatchedTime *CLLocationControllerLatchedTime::instance()_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  qword_1019A1770 = (uint64_t)v1;
}

void sub_10080EB40(_Unwind_Exception *a1)
{
}

double sub_10080EB58(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (void *)a1;
  if (!*(_BYTE *)(a1 + 24))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101858CA8);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = v3[1];
      uint64_t v6 = v3[2];
      *(_DWORD *)__int128 buf = 134349312;
      uint64_t v16 = v5;
      __int16 v17 = 2050;
      uint64_t v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "LocationController,#time,getTime,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101858CA8);
      }
      uint64_t v8 = v3[1];
      uint64_t v9 = v3[2];
      int v11 = 134349312;
      uint64_t v12 = v8;
      __int16 v13 = 2050;
      uint64_t v14 = v9;
      __int128 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "LocationController,#time,getTime,#Warning: current latched timestamp is invalid,mct_sec,%{public}. 3f,cfat_sec,%{public}.3f",  &v11,  22);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFTimeInterval CLLocationControllerLatchedTime::getTime(const Type &)",  "%s\n",  v10);
    }
  }

  if (*a2 != 1)
  {
    if (*a2) {
      return result;
    }
    v3 += 2;
  }

  return *(double *)v3;
}

__n128 sub_10080ED44@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  if (!a1[1].n128_u8[8])
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101858CA8);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = a1->n128_u64[1];
      unint64_t v6 = a1[1].n128_u64[0];
      *(_DWORD *)__int128 buf = 134349312;
      unint64_t v16 = v5;
      __int16 v17 = 2050;
      unint64_t v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "LocationController,#time,getTimestamp,#Warning: current latched timestamp is invalid,mct_sec,%{public}.3f,cfat_sec,%{public}.3f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101858CA8);
      }
      unint64_t v8 = a1->n128_u64[1];
      unint64_t v9 = a1[1].n128_u64[0];
      int v11 = 134349312;
      unint64_t v12 = v8;
      __int16 v13 = 2050;
      unint64_t v14 = v9;
      __int128 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "LocationController,#time,getTimestamp,#Warning: current latched timestamp is invalid,mct_sec,%{pub lic}.3f,cfat_sec,%{public}.3f",  &v11,  22);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLUtils::Timestamp CLLocationControllerLatchedTime::getTimestamp()",  "%s\n",  v10);
    }
  }

  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[8] = a1[1].n128_u8[8];
  return result;
}

double sub_10080EF30(uint64_t a1)
{
  return (sub_101171D4C() - *(double *)(a1 + 32)) * 1000000.0;
}

void sub_10080EF64(uint64_t a1, uint64_t *a2)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101858CA8);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[2];
      int v7 = *((unsigned __int8 *)a2 + 24);
      *(_DWORD *)__int128 buf = 134218496;
      uint64_t v21 = v5;
      __int16 v22 = 2048;
      uint64_t v23 = v6;
      __int16 v24 = 1024;
      int v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "LocationController,#time,setTime,set for the first time,mct,%.3f,cfat,%.3f,isValid,%d",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101858CA8);
      }
      uint64_t v9 = *a2;
      uint64_t v10 = a2[2];
      int v11 = *((unsigned __int8 *)a2 + 24);
      int v14 = 134218496;
      uint64_t v15 = v9;
      __int16 v16 = 2048;
      uint64_t v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      LODWORD(v13) = 28;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "LocationController,#time,setTime,set for the first time,mct,%.3f,cfat,%.3f,isValid,%d",  COERCE_DOUBLE(&v14),  v13);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerLatchedTime::setTime(const CLUtils::Timestamp &)",  "%s\n",  v12);
    }
  }

  __int128 v8 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)a1 = v8;
  *(double *)(a1 + memset(v21, 0, 32) = sub_101171D4C();
}

void sub_10080F178(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10080F1A4()
{
  if (qword_1019A1778) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1778 + 8LL))(qword_1019A1778);
  }
  if (qword_1019A1780) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1780 + 8LL))(qword_1019A1780);
  }
  if (qword_1019A1788) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1788 + 8LL))(qword_1019A1788);
  }
  if (qword_1019A1790) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1790 + 8LL))(qword_1019A1790);
  }
  if (qword_1019A1798) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1798 + 8LL))(qword_1019A1798);
  }
  if (qword_1019A17A0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17A0 + 8LL))(qword_1019A17A0);
  }
  if (qword_1019A17A8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17A8 + 8LL))(qword_1019A17A8);
  }
  if (qword_1019A17B0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17B0 + 8LL))(qword_1019A17B0);
  }
  if (qword_1019A17B8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17B8 + 8LL))(qword_1019A17B8);
  }
  if (qword_1019A17C0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17C0 + 8LL))(qword_1019A17C0);
  }
  if (qword_1019A17C8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17C8 + 8LL))(qword_1019A17C8);
  }
  if (qword_1019A17D0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17D0 + 8LL))(qword_1019A17D0);
  }
  if (qword_1019A17D8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17D8 + 8LL))(qword_1019A17D8);
  }
  if (qword_1019A17E0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17E0 + 8LL))(qword_1019A17E0);
  }
  if (qword_1019A17E8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17E8 + 8LL))(qword_1019A17E8);
  }
  if (qword_1019A17F0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17F0 + 8LL))(qword_1019A17F0);
  }
  if (qword_1019A17F8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A17F8 + 8LL))(qword_1019A17F8);
  }
  if (qword_1019A1800) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1800 + 8LL))(qword_1019A1800);
  }
  if (qword_1019A1808) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1808 + 8LL))(qword_1019A1808);
  }
  if (qword_1019A1810) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1810 + 8LL))(qword_1019A1810);
  }
  uint64_t result = qword_1019A1818;
  if (qword_1019A1818) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A1818 + 8LL))(qword_1019A1818);
  }
  return result;
}

void sub_10080F3B0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101998B18 & 1) == 0)
  {
    byte_101998B18 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  a4);
    uint64_t v4 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v4 = off_101858CD8;
    *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    qword_1019A1778 = (uint64_t)v4;
    uint64_t v5 = operator new(0x20uLL);
    *uint64_t v5 = &off_101858D50;
    v5[1] = 0LL;
    _OWORD v5[2] = 0LL;
    fpos_t v5[3] = 0LL;
    qword_1019A1780 = (uint64_t)v5;
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &off_101858DC8;
    v6[1] = 0LL;
    _OWORD v6[2] = 0LL;
    void v6[3] = 0LL;
    qword_1019A1788 = (uint64_t)v6;
    int v7 = operator new(0x28uLL);
    v7[1] = 0LL;
    void v7[2] = 0LL;
    void *v7 = off_101858E40;
    *((_DWORD *)v7 + 6) = 0;
    _DWORD v7[4] = 0LL;
    qword_1019A1790 = (uint64_t)v7;
    __int128 v8 = operator new(0x28uLL);
    v8[1] = 0LL;
    void v8[2] = 0LL;
    void *v8 = off_101858EB8;
    *((_DWORD *)v8 + 6) = 0;
    double v8[4] = 0LL;
    qword_1019A1798 = (uint64_t)v8;
    uint64_t v9 = operator new(0x20uLL);
    void *v9 = off_101858F30;
    v9[1] = 0LL;
    v9[2] = 0LL;
    float v9[3] = 0LL;
    qword_1019A17A0 = (uint64_t)v9;
    uint64_t v10 = (char *)operator new(0x48uLL);
    *(void *)uint64_t v10 = off_101858FA8;
    *(_OWORD *)(v10 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
    *(_OWORD *)(v10 + 52) = 0u;
    qword_1019A17A8 = (uint64_t)v10;
    int v11 = (char *)operator new(0x48uLL);
    *(void *)int v11 = off_101859020;
    *(_OWORD *)(v11 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
    *(_OWORD *)(v11 + 52) = 0u;
    qword_1019A17B0 = (uint64_t)v11;
    unint64_t v12 = operator new(0x60uLL);
    v12[10] = 0xFFFFFFFFLL;
    *unint64_t v12 = off_101859098;
    v12[1] = 0LL;
    v12[2] = 0LL;
    v12[3] = 0LL;
    _DWORD v12[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v12[5] = 0LL;
    *((_DWORD *)v12 + 22) = 0;
    v12[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v12[7] = 0LL;
    _WORD v12[8] = 0LL;
    v12[9] = 0LL;
    qword_1019A17B8 = (uint64_t)v12;
    double v13 = operator new(0x20uLL);
    *double v13 = off_101859110;
    v13[1] = 0LL;
    _DWORD v13[2] = 0LL;
    v13[3] = 0LL;
    qword_1019A17C0 = (uint64_t)v13;
    int v14 = (char *)operator new(0x28uLL);
    *(void *)int v14 = off_101859188;
    *(_OWORD *)(v14 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    qword_1019A17C8 = (uint64_t)v14;
    uint64_t v15 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v15 = off_101859200;
    *(_OWORD *)(v15 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *((void *)v15 + _Block_object_dispose(va, 8) = 0xFFFFFFFFLL;
    *((_DWORD *)v15 + 1_Block_object_dispose(va, 8) = 0;
    *((void *)v15 + 6) = 0LL;
    *((void *)v15 + 7) = 0LL;
    *((void *)v15 + 5) = 0LL;
    qword_1019A17D0 = (uint64_t)v15;
    __int16 v16 = operator new(0x30uLL);
    v16[5] = 0LL;
    *__int16 v16 = off_101859278;
    v16[1] = 0LL;
    v16[2] = 0LL;
    v16[3] = 0LL;
    *((_DWORD *)v16 + _Block_object_dispose(va, 8) = 0;
    qword_1019A17D8 = (uint64_t)v16;
    uint64_t v17 = operator new(0x18uLL);
    v17[1] = 0LL;
    uint64_t v17[2] = 0LL;
    *uint64_t v17 = &off_1018592F0;
    qword_1019A17E0 = (uint64_t)v17;
    __int16 v18 = operator new(0x30uLL);
    v18[1] = 0LL;
    _DWORD v18[2] = 0LL;
    *__int16 v18 = off_101859368;
    *((_DWORD *)v18 + 6) = 0;
    *((_OWORD *)v18 + 2) = xmmword_101338760;
    qword_1019A17E8 = (uint64_t)v18;
    int v19 = operator new(0x20uLL);
    *int v19 = &off_1018593E0;
    v19[1] = 0LL;
    _DWORD v19[2] = 0LL;
    v19[3] = 0LL;
    qword_1019A17F0 = (uint64_t)v19;
    unint64_t v20 = operator new(0x20uLL);
    void *v20 = &off_101859458;
    v20[1] = 0LL;
    v20[2] = 0LL;
    v20[3] = 0LL;
    qword_1019A17F8 = (uint64_t)v20;
    uint64_t v21 = operator new(0x28uLL);
    v21[1] = 0LL;
    _OWORD v21[2] = 0LL;
    void *v21 = off_1018594D0;
    *((_DWORD *)v21 + 6) = 0;
    v21[4] = 0LL;
    qword_1019A1800 = (uint64_t)v21;
    __int16 v22 = operator new(0x118uLL);
    *(void *)__int16 v22 = off_101859548;
    *(_OWORD *)((char *)v22 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)((char *)v22 + 24) = 0u;
    *(_OWORD *)((char *)v22 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
    *(_OWORD *)((char *)v22 + 56) = 0u;
    *(_OWORD *)((char *)v22 + 72) = 0u;
    *(_OWORD *)((char *)v22 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)((char *)v22 + 12sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
    *(_OWORD *)((char *)v22 + 136) = 0u;
    *(_OWORD *)((char *)v22 + 152) = 0u;
    v22[11] = 0u;
    v22[12] = 0u;
    v22[13] = 0u;
    v22[14] = 0u;
    v22[15] = 0u;
    v22[16] = 0u;
    *((void *)v22 + 34) = 0LL;
    *((void *)v22 + 13) = 0LL;
    *((void *)v22 + 14) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v22 + 21) = 0LL;
    qword_1019A1808 = (uint64_t)v22;
    uint64_t v23 = operator new(0x18uLL);
    v23[1] = 0LL;
    float v23[2] = 0LL;
    void *v23 = &off_1018595C0;
    qword_1019A1810 = (uint64_t)v23;
    __int16 v24 = (char *)operator new(0x40uLL);
    *(void *)__int16 v24 = off_101859638;
    *(_OWORD *)(v24 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
    *((_DWORD *)v24 + 14) = 0;
    qword_1019A1818 = (uint64_t)v24;
    uint64_t v25 = sub_10080F8F0((uint64_t)v12);
    uint64_t v26 = qword_1019A17C8;
    uint64_t v27 = qword_1019A17C0;
    if (!qword_1019A17C0)
    {
      uint64_t v25 = sub_10080F3B0(v25);
      uint64_t v27 = qword_1019A17C0;
    }

    *(void *)(v26 + _Block_object_dispose(va, 8) = v27;
    uint64_t v28 = qword_1019A1778;
    if (!qword_1019A1778)
    {
      sub_10080F3B0(v25);
      uint64_t v28 = qword_1019A1778;
    }

    *(void *)(v26 + 24) = v28;
    uint64_t v29 = sub_10080F9B4(qword_1019A17D0);
    uint64_t v30 = qword_1019A17E0;
    uint64_t v31 = qword_1019A17D8;
    if (!qword_1019A17D8)
    {
      uint64_t v29 = sub_10080F3B0(v29);
      uint64_t v31 = qword_1019A17D8;
    }

    *(void *)(v30 + _Block_object_dispose(va, 8) = v31;
    uint64_t v32 = qword_1019A17F0;
    uint64_t v33 = qword_1019A1788;
    if (!qword_1019A1788)
    {
      uint64_t v29 = sub_10080F3B0(v29);
      uint64_t v33 = qword_1019A1788;
    }

    *(void *)(v32 + _Block_object_dispose(va, 8) = v33;
    uint64_t v34 = qword_1019A1810;
    uint64_t v35 = qword_1019A1808;
    if (!qword_1019A1808)
    {
      sub_10080F3B0(v29);
      uint64_t v35 = qword_1019A1808;
    }

    *(void *)(v34 + _Block_object_dispose(va, 8) = v35;
    sub_10080FA60(qword_1019A1818);
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_10080F1A4,  v36);
  }

double sub_10080F874(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0xFFFFFFFFLL;
  *(void *)a1 = off_101859098;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + memset(v21, 0, 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0LL;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

double sub_10080F8A8(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_101859368;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)&double result = 0x8FFFFFFFFLL;
  *(_OWORD *)(a1 + memset(v21, 0, 32) = xmmword_101338760;
  return result;
}

double sub_10080F8CC(uint64_t a1)
{
  *(void *)a1 = off_101859638;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_10080F8F0(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A1778;
  if (qword_1019A1778)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = qword_1019A1778;
  }

  else
  {
    double result = ((uint64_t (*)(void))sub_10080F3B0)();
    uint64_t v2 = qword_1019A1778;
    v1[1] = qword_1019A1778;
    if (!v2)
    {
      double result = sub_10080F3B0(result);
      uint64_t v2 = qword_1019A1778;
    }
  }

  v1[2] = v2;
  uint64_t v3 = qword_1019A17A8;
  if (!qword_1019A17A8)
  {
    double result = sub_10080F3B0(result);
    uint64_t v3 = qword_1019A17A8;
  }

  v1[3] = v3;
  uint64_t v4 = qword_1019A17B0;
  if (!qword_1019A17B0)
  {
    double result = sub_10080F3B0(result);
    uint64_t v4 = qword_1019A17B0;
  }

  _OWORD v1[5] = v4;
  uint64_t v5 = qword_1019A1790;
  if (qword_1019A1790)
  {
    void v1[7] = qword_1019A1790;
  }

  else
  {
    double result = sub_10080F3B0(result);
    uint64_t v5 = qword_1019A1790;
    void v1[7] = qword_1019A1790;
    if (!v5)
    {
      double result = sub_10080F3B0(result);
      uint64_t v5 = qword_1019A1790;
    }
  }

  v1[8] = v5;
  uint64_t v6 = qword_1019A17A0;
  if (!qword_1019A17A0)
  {
    double result = sub_10080F3B0(result);
    uint64_t v6 = qword_1019A17A0;
  }

  v1[9] = v6;
  return result;
}

uint64_t sub_10080F9B4(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A1778;
  if (!qword_1019A1778)
  {
    double result = sub_10080F3B0(result);
    uint64_t v2 = qword_1019A1778;
  }

  v1[1] = v2;
  uint64_t v3 = qword_1019A1798;
  if (qword_1019A1798)
  {
    v1[2] = qword_1019A1798;
  }

  else
  {
    double result = sub_10080F3B0(result);
    uint64_t v3 = qword_1019A1798;
    v1[2] = qword_1019A1798;
    if (!v3)
    {
      double result = sub_10080F3B0(result);
      uint64_t v3 = qword_1019A1798;
    }
  }

  v1[3] = v3;
  uint64_t v4 = qword_1019A1788;
  if (!qword_1019A1788)
  {
    double result = sub_10080F3B0(result);
    uint64_t v4 = qword_1019A1788;
  }

  v1[4] = v4;
  uint64_t v5 = qword_1019A17C8;
  if (!qword_1019A17C8)
  {
    double result = sub_10080F3B0(result);
    uint64_t v5 = qword_1019A17C8;
  }

  v1[6] = v5;
  uint64_t v6 = qword_1019A17E0;
  if (!qword_1019A17E0)
  {
    double result = sub_10080F3B0(result);
    uint64_t v6 = qword_1019A17E0;
  }

  void v1[7] = v6;
  return result;
}

uint64_t sub_10080FA60(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A1778;
  if (!qword_1019A1778)
  {
    double result = sub_10080F3B0(result);
    uint64_t v2 = qword_1019A1778;
  }

  v1[1] = v2;
  uint64_t v3 = qword_1019A17F0;
  if (!qword_1019A17F0)
  {
    double result = sub_10080F3B0(result);
    uint64_t v3 = qword_1019A17F0;
  }

  v1[2] = v3;
  uint64_t v4 = qword_1019A1798;
  if (!qword_1019A1798)
  {
    double result = sub_10080F3B0(result);
    uint64_t v4 = qword_1019A1798;
  }

  v1[3] = v4;
  uint64_t v5 = qword_1019A1800;
  if (!qword_1019A1800)
  {
    double result = sub_10080F3B0(result);
    uint64_t v5 = qword_1019A1800;
  }

  v1[4] = v5;
  uint64_t v6 = qword_1019A1810;
  if (!qword_1019A1810)
  {
    double result = sub_10080F3B0(result);
    uint64_t v6 = qword_1019A1810;
  }

  _OWORD v1[5] = v6;
  return result;
}

double sub_10080FAF4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  375LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + _Block_object_dispose(va, 8) = result;
      int v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }

    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }

    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }

  return result;
}

void sub_10080FBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10080FBDC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858CD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10080FBEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858CD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_10080FC0C()
{
  unsigned __int8 v0 = (char *)operator new(0x28uLL);
  *(void *)unsigned __int8 v0 = off_101858CD8;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_10080FC3C(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10080FC54( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0LL;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          uint64_t v10 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }

      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }

      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_10080FE0C( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v4 + 16),  a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  }
  return result;
}

uint64_t sub_10080FE84(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    unsigned int v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }

  *(_DWORD *)(a1 + memset(v21, 0, 32) = v1;
  return v1;
}

double sub_10080FEBC(uint64_t a1, void *lpsrc)
{
  return sub_10080FAF4(a1, (uint64_t)lpsrc);
}

uint64_t sub_10080FF08()
{
  return 1LL;
}

void *sub_10080FF10@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.TimeStamp");
}

void sub_10080FF20(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  553LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_10004AAFC(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(void *)(a1 + 8) + 4LL * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4LL * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }

void sub_10080FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10080FFE8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101858D50;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100810024(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100810038()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101858D50;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100810060(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_10081006C( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      char v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      if (v8 != 2)
      {
        if (v8 != 5) {
          break;
        }
        goto LABEL_15;
      }

      uint64_t result = sub_1008102E0(this, v5);
      if (!(_DWORD)result) {
        return result;
      }
      while (1)
      {
        uint64_t v21 = (_BYTE *)*((void *)this + 1);
        __int16 v22 = (_BYTE *)*((void *)this + 2);
        if (v21 >= v22 || *v21 != 13) {
          break;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_15:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) == 0) {
          return 0LL;
        }
        unsigned int v10 = v24[0];
        int v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_10004AAFC(v5, v11 + 1);
          int v11 = *(_DWORD *)(a1 + 16);
        }

        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4LL * v11) = v10;
        uint64_t v14 = *((void *)this + 1);
        int v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          signed int v16 = v15 / 5u;
          int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            int v18 = 0;
            while (*(_BYTE *)v14 == 13)
            {
              int v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents /Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/go ogle/protobuf/repeated_field.h",  602LL);
                uint64_t v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                int v13 = *(_DWORD *)(a1 + 16);
                uint64_t v12 = *(void *)(a1 + 8);
              }

              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4LL * v13) = v19;
              ++v18;
              v14 += 5LL;
              ++v13;
              if (v17 == v18)
              {
                int v18 = v17;
                break;
              }
            }

            if (v18) {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
            }
          }
        }
      }

      if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    if (v8 == 4) {
      return 1LL;
    }
  }

void sub_1008102C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1008102E0(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  uint64_t v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v5 = v11;
  }

  else
  {
    unsigned int v5 = *v4;
    unsigned int v11 = v5;
    *((void *)this + 1) = v4 + 1;
  }

  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1LL;
  }

  else
  {
    while (1)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12);
      if (!(_DWORD)result) {
        break;
      }
      unsigned int v8 = v12;
      int v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_10004AAFC(a2, v9 + 1);
        int v9 = *(_DWORD *)(a2 + 8);
      }

      uint64_t v10 = *(void *)a2;
      *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = v9 + 1;
      *(_DWORD *)(v10 + 4LL * v9) = v8;
    }
  }

  return result;
}

uint64_t sub_1008103D0( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(float *)(*(void *)(v4 + 8) + 4 * v5++),  a3);
    while (v5 < *(int *)(v4 + 16));
  }

  return result;
}

uint64_t sub_10081042C(uint64_t a1)
{
  uint64_t v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100810440(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10081048C()
{
  return 1LL;
}

void *sub_100810494@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.simd_floatM");
}

void sub_1008104A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  719LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_10008D024(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(void *)(a1 + 8) + 8LL * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 8LL * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }

void sub_100810554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10081056C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101858DC8;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1008105A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_1008105BC()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101858DC8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1008105E4(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1008105F0( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
LABEL_2:
    char v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    int v8 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if (v8 == 1)
      {
        while ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v24) & 1) != 0)
        {
          unint64_t v10 = v24[0];
          int v11 = *(_DWORD *)(a1 + 16);
          if (v11 == *(_DWORD *)(a1 + 20))
          {
            sub_10008D024(v5, v11 + 1);
            int v11 = *(_DWORD *)(a1 + 16);
          }

          uint64_t v12 = *(void *)(a1 + 8);
          int v13 = v11 + 1;
          *(_DWORD *)(a1 + 16) = v11 + 1;
          *(void *)(v12 + 8LL * v11) = v10;
          uint64_t v14 = *((void *)this + 1);
          int v15 = *((_DWORD *)this + 4) - v14;
          if (v15 >= 1)
          {
            signed int v16 = v15 / 9u;
            int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
            if (v17 >= 1)
            {
              int v18 = 0;
              while (*(_BYTE *)v14 == 9)
              {
                uint64_t v19 = *(void *)(v14 + 1);
                if (v13 >= *(_DWORD *)(a1 + 20))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  602LL);
                  uint64_t v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                  int v13 = *(_DWORD *)(a1 + 16);
                  uint64_t v12 = *(void *)(a1 + 8);
                }

                *(_DWORD *)(a1 + 16) = v13 + 1;
                *(void *)(v12 + 8LL * v13) = v19;
                ++v18;
                v14 += 9LL;
                ++v13;
                if (v17 == v18)
                {
                  int v18 = v17;
                  break;
                }
              }

              if (v18) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v18);
              }
            }
          }

void sub_10081084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100810864( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(*(void *)(v4 + 8) + 8 * v5++),  a3);
    while (v5 < *(int *)(v4 + 16));
  }

  return result;
}

uint64_t sub_1008108C0(uint64_t a1)
{
  uint64_t v1 = (9 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_1008108D4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100810920()
{
  return 1LL;
}

void *sub_100810928@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.simd_doubleM");
}

void sub_100810938(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  879LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        unint64_t v10 = operator new(0x20uLL);
        *unint64_t v10 = &off_101858D50;
        v10[1] = 0LL;
        v10[2] = 0LL;
        v10[3] = 0LL;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        unint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10080FF20((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_100810A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100810A88(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858E40;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100810AC0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100810AD4()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101858E40;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100810B04(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100810B5C( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = operator new(0x20uLL);
          *uint64_t v11 = &off_101858D50;
          v11[1] = 0LL;
          uint64_t v11[2] = 0LL;
          void v11[3] = 0LL;
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        uint64_t v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        __int16 v22 = (_BYTE *)*((void *)this + 1);
        char v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_100810D5C( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_100810DB8(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }

  else
  {
    uint64_t v4 = 0LL;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }

      else
      {
        int v8 = 1;
      }

      uint64_t v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }

    while (v4 < v3);
  }

  *(_DWORD *)(a1 + memset(v21, 0, 32) = v5;
  return v5;
}

void sub_100810E44(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100810E90()
{
  return 1LL;
}

void *sub_100810E98@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.simd_floatMxN");
}

void sub_100810EA8(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  1039LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        uint64_t v10 = operator new(0x20uLL);
        *uint64_t v10 = &off_101858DC8;
        v10[1] = 0LL;
        v10[2] = 0LL;
        v10[3] = 0LL;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        uint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_1008104A4((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_100810FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100810FF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858EB8;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100811030(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100811044()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101858EB8;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100811074(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_1008110CC( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = operator new(0x20uLL);
          *uint64_t v11 = &off_101858DC8;
          v11[1] = 0LL;
          uint64_t v11[2] = 0LL;
          void v11[3] = 0LL;
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        uint64_t v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        __int16 v22 = (_BYTE *)*((void *)this + 1);
        char v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_1008112CC( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_100811328(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }

  else
  {
    uint64_t v4 = 0LL;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }

      else
      {
        int v8 = 1;
      }

      uint64_t v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }

    while (v4 < v3);
  }

  *(_DWORD *)(a1 + memset(v21, 0, 32) = v5;
  return v5;
}

void sub_1008113B4(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100811400()
{
  return 1LL;
}

void *sub_100811408@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.simd_doubleMxN");
}

double sub_100811418(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  1229LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + _Block_object_dispose(va, 8) = result;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }

  return result;
}

void sub_1008114C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008114D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858F30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1008114E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858F30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100811508()
{
  double result = operator new(0x20uLL);
  *double result = off_101858F30;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100811530(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
  }

  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_100811544( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        int v8 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && *v8 == 17)
        {
          *((void *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_21;
      }

      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_21:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_1008116A0( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }

  if ((v5 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v4 + 16),  a3);
  }
  return result;
}

uint64_t sub_1008116F8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    unsigned int v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }

  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100811724(uint64_t a1, void *lpsrc)
{
  return sub_100811418(a1, (uint64_t)lpsrc);
}

uint64_t sub_100811770()
{
  return 1LL;
}

void *sub_100811778@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.CGSize");
}

void sub_100811788(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v19,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  1745LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v19,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }

  int v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5) {
    goto LABEL_13;
  }
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  int v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

void sub_100811984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10081199C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858FA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1008119AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101858FA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_1008119CC()
{
  unsigned __int8 v0 = (char *)operator new(0x48uLL);
  *(void *)unsigned __int8 v0 = off_101858FA8;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(_OWORD *)(v0 + 52) = 0u;
  return result;
}

uint64_t sub_100811A04(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
  }

  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 52) = 0LL;
    *(void *)(result + 44) = 0LL;
  }

  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100811A38( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  double v41 = (unint64_t *)(a1 + 8);
  __int16 v42 = (unsigned int *)(a1 + 16);
  double v43 = (unsigned int *)(a1 + 20);
  __int16 v44 = (unsigned int *)(a1 + 24);
  double v45 = (unsigned int *)(a1 + 28);
  int v5 = (unsigned int *)(a1 + 32);
  int v6 = (unsigned int *)(a1 + 36);
  int v7 = (unsigned int *)(a1 + 40);
  uint64_t v8 = (unsigned int *)(a1 + 44);
  int v9 = (unsigned int *)(a1 + 48);
  int v10 = (unsigned int *)(a1 + 52);
  int v11 = (unsigned int *)(a1 + 56);
  while (2)
  {
    int v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          *double v41 = *v16;
          int v17 = v16 + 1;
          *((void *)this + 1) = v17;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v17 < v15 && *v17 == 16)
          {
            char v18 = v17 + 1;
            *((void *)this + 1) = v18;
            goto LABEL_43;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v41);
        if ((_DWORD)result)
        {
          int v17 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
          goto LABEL_40;
        }

        break;
      case 2u:
        int v14 = TagFallback & 7;
        char v18 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
LABEL_43:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v42);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v29 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *__int16 v42 = *v18;
          uint64_t v29 = v18 + 1;
          *((void *)this + 1) = v29;
        }

        *(_DWORD *)(a1 + 64) |= 2u;
        int v19 = v29 + 1;
        *((void *)this + 1) = v19;
LABEL_51:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v30 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *double v43 = *v19;
          uint64_t v30 = v19 + 1;
          *((void *)this + 1) = v30;
        }

        *(_DWORD *)(a1 + 64) |= 4u;
        BOOL v20 = v30 + 1;
        *((void *)this + 1) = v20;
LABEL_59:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v31 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v44 = *v20;
          uint64_t v31 = v20 + 1;
          *((void *)this + 1) = v31;
        }

        *(_DWORD *)(a1 + 64) |= 8u;
        int v21 = v31 + 1;
        *((void *)this + 1) = v21;
LABEL_67:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v32 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *double v45 = *v21;
          uint64_t v32 = v21 + 1;
          *((void *)this + 1) = v32;
        }

        *(_DWORD *)(a1 + 64) |= 0x10u;
        __int16 v22 = v32 + 1;
        *((void *)this + 1) = v22;
LABEL_75:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v33 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v22;
          uint64_t v33 = v22 + 1;
          *((void *)this + 1) = v33;
        }

        *(_DWORD *)(a1 + 64) |= 0x20u;
        char v23 = v33 + 1;
        *((void *)this + 1) = v23;
LABEL_83:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v34 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v6 = *v23;
          uint64_t v34 = v23 + 1;
          *((void *)this + 1) = v34;
        }

        *(_DWORD *)(a1 + 64) |= 0x40u;
        __int16 v24 = v34 + 1;
        *((void *)this + 1) = v24;
LABEL_91:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v35 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v7 = *v24;
          uint64_t v35 = v24 + 1;
          *((void *)this + 1) = v35;
        }

        *(_DWORD *)(a1 + 64) |= 0x80u;
        unsigned int v25 = v35 + 1;
        *((void *)this + 1) = v25;
LABEL_99:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result) {
            return result;
          }
          __int16 v36 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v8 = *v25;
          __int16 v36 = v25 + 1;
          *((void *)this + 1) = v36;
        }

        *(_DWORD *)(a1 + 64) |= 0x100u;
        uint64_t v26 = v36 + 1;
        *((void *)this + 1) = v26;
LABEL_107:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v37 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v9 = *v26;
          uint64_t v37 = v26 + 1;
          *((void *)this + 1) = v37;
        }

        *(_DWORD *)(a1 + 64) |= 0x200u;
        uint64_t v27 = v37 + 1;
        *((void *)this + 1) = v27;
LABEL_115:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result) {
            return result;
          }
          int v38 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v10 = *v27;
          int v38 = v27 + 1;
          *((void *)this + 1) = v38;
        }

        *(_DWORD *)(a1 + 64) |= 0x400u;
        uint64_t v28 = v38 + 1;
        *((void *)this + 1) = v28;
LABEL_123:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result) {
            return result;
          }
          int v39 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v11 = *v28;
          int v39 = (unsigned __int8 *)(v28 + 1);
          *((void *)this + 1) = v39;
        }

        *(_DWORD *)(a1 + 64) |= 0x800u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v14 = TagFallback & 7;
        int v19 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_51;
      case 4u:
        int v14 = TagFallback & 7;
        BOOL v20 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_59;
      case 5u:
        int v14 = TagFallback & 7;
        int v21 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_67;
      case 6u:
        int v14 = TagFallback & 7;
        __int16 v22 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_75;
      case 7u:
        int v14 = TagFallback & 7;
        char v23 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_83;
      case 8u:
        int v14 = TagFallback & 7;
        __int16 v24 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_91;
      case 9u:
        int v14 = TagFallback & 7;
        unsigned int v25 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_99;
      case 0xAu:
        int v14 = TagFallback & 7;
        uint64_t v26 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_107;
      case 0xBu:
        int v14 = TagFallback & 7;
        uint64_t v27 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_115;
      case 0xCu:
        int v14 = TagFallback & 7;
        uint64_t v28 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_123;
      default:
        int v14 = TagFallback & 7;
LABEL_34:
        if (v14 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1008120B4( uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4 = a2;
  int v5 = (int *)result;
  int v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(result + 8),  a2,  a4);
    int v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v5[4],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_100812228(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_42;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
       + 1;
    int v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }

  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v6 = 1;
  }

  uint64_t v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      int v8 = 1;
    }

    uint64_t v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }

  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v10 = 1;
  }

  uint64_t v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

void sub_100812464(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1008124B0()
{
  return 1LL;
}

void *sub_1008124B8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VIOInertialStateInfo");
}

void sub_1008124C8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v19,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  2303LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v19,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }

  int v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5) {
    goto LABEL_13;
  }
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  int v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

void sub_1008126C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008126DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859020;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1008126EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859020;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_10081270C()
{
  unsigned __int8 v0 = (char *)operator new(0x48uLL);
  *(void *)unsigned __int8 v0 = off_101859020;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
  *(_OWORD *)(v0 + 52) = 0u;
  return result;
}

uint64_t sub_100812744(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
  }

  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 52) = 0LL;
    *(void *)(result + 44) = 0LL;
  }

  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100812778( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  double v41 = (unint64_t *)(a1 + 8);
  __int16 v42 = (unsigned int *)(a1 + 16);
  double v43 = (unsigned int *)(a1 + 20);
  __int16 v44 = (unsigned int *)(a1 + 24);
  double v45 = (unsigned int *)(a1 + 28);
  int v5 = (unsigned int *)(a1 + 32);
  int v6 = (unsigned int *)(a1 + 36);
  int v7 = (unsigned int *)(a1 + 40);
  uint64_t v8 = (unsigned int *)(a1 + 44);
  int v9 = (unsigned int *)(a1 + 48);
  int v10 = (unsigned int *)(a1 + 52);
  int v11 = (unsigned int *)(a1 + 56);
  while (2)
  {
    int v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          *double v41 = *v16;
          int v17 = v16 + 1;
          *((void *)this + 1) = v17;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v17 < v15 && *v17 == 16)
          {
            char v18 = v17 + 1;
            *((void *)this + 1) = v18;
            goto LABEL_43;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v41);
        if ((_DWORD)result)
        {
          int v17 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
          goto LABEL_40;
        }

        break;
      case 2u:
        int v14 = TagFallback & 7;
        char v18 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
LABEL_43:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v42);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v29 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *__int16 v42 = *v18;
          uint64_t v29 = v18 + 1;
          *((void *)this + 1) = v29;
        }

        *(_DWORD *)(a1 + 64) |= 2u;
        int v19 = v29 + 1;
        *((void *)this + 1) = v19;
LABEL_51:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v30 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *double v43 = *v19;
          uint64_t v30 = v19 + 1;
          *((void *)this + 1) = v30;
        }

        *(_DWORD *)(a1 + 64) |= 4u;
        int v20 = v30 + 1;
        *((void *)this + 1) = v20;
LABEL_59:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v31 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v44 = *v20;
          uint64_t v31 = v20 + 1;
          *((void *)this + 1) = v31;
        }

        *(_DWORD *)(a1 + 64) |= 8u;
        int v21 = v31 + 1;
        *((void *)this + 1) = v21;
LABEL_67:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v32 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *double v45 = *v21;
          uint64_t v32 = v21 + 1;
          *((void *)this + 1) = v32;
        }

        *(_DWORD *)(a1 + 64) |= 0x10u;
        int v22 = v32 + 1;
        *((void *)this + 1) = v22;
LABEL_75:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v33 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v22;
          uint64_t v33 = v22 + 1;
          *((void *)this + 1) = v33;
        }

        *(_DWORD *)(a1 + 64) |= 0x20u;
        char v23 = v33 + 1;
        *((void *)this + 1) = v23;
LABEL_83:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v34 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v6 = *v23;
          uint64_t v34 = v23 + 1;
          *((void *)this + 1) = v34;
        }

        *(_DWORD *)(a1 + 64) |= 0x40u;
        int v24 = v34 + 1;
        *((void *)this + 1) = v24;
LABEL_91:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v35 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v7 = *v24;
          uint64_t v35 = v24 + 1;
          *((void *)this + 1) = v35;
        }

        *(_DWORD *)(a1 + 64) |= 0x80u;
        unsigned int v25 = v35 + 1;
        *((void *)this + 1) = v25;
LABEL_99:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result) {
            return result;
          }
          __int16 v36 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v8 = *v25;
          __int16 v36 = v25 + 1;
          *((void *)this + 1) = v36;
        }

        *(_DWORD *)(a1 + 64) |= 0x100u;
        int v26 = v36 + 1;
        *((void *)this + 1) = v26;
LABEL_107:
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v37 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v9 = *v26;
          uint64_t v37 = v26 + 1;
          *((void *)this + 1) = v37;
        }

        *(_DWORD *)(a1 + 64) |= 0x200u;
        uint64_t v27 = v37 + 1;
        *((void *)this + 1) = v27;
LABEL_115:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result) {
            return result;
          }
          int v38 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v10 = *v27;
          int v38 = v27 + 1;
          *((void *)this + 1) = v38;
        }

        *(_DWORD *)(a1 + 64) |= 0x400u;
        uint64_t v28 = v38 + 1;
        *((void *)this + 1) = v28;
LABEL_123:
        if ((unint64_t)v28 >= v15 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result) {
            return result;
          }
          int v39 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v11 = *v28;
          int v39 = (unsigned __int8 *)(v28 + 1);
          *((void *)this + 1) = v39;
        }

        *(_DWORD *)(a1 + 64) |= 0x800u;
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v14 = TagFallback & 7;
        int v19 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_51;
      case 4u:
        int v14 = TagFallback & 7;
        int v20 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_59;
      case 5u:
        int v14 = TagFallback & 7;
        int v21 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_67;
      case 6u:
        int v14 = TagFallback & 7;
        int v22 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_75;
      case 7u:
        int v14 = TagFallback & 7;
        char v23 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_83;
      case 8u:
        int v14 = TagFallback & 7;
        int v24 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_91;
      case 9u:
        int v14 = TagFallback & 7;
        unsigned int v25 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_99;
      case 0xAu:
        int v14 = TagFallback & 7;
        int v26 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_107;
      case 0xBu:
        int v14 = TagFallback & 7;
        uint64_t v27 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_115;
      case 0xCu:
        int v14 = TagFallback & 7;
        uint64_t v28 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_123;
      default:
        int v14 = TagFallback & 7;
LABEL_34:
        if (v14 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_100812DF4( uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4 = a2;
  int v5 = (int *)result;
  int v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(result + 8),  a2,  a4);
    int v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v5[4],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_100812F68(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_42;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
       + 1;
    int v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }

  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v6 = 1;
  }

  uint64_t v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      int v8 = 1;
    }

    uint64_t v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }

  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v10 = 1;
  }

  uint64_t v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

void sub_1008131A4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1008131F0()
{
  return 1LL;
}

void *sub_1008131F8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VIOInertialCovarianceInfo");
}

double sub_100813208(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v27,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  2870LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v27,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v26, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
  }

  int v6 = *(_DWORD *)(a2 + 88);
  if (!(_BYTE)v6) {
    goto LABEL_47;
  }
  if ((v6 & 1) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 88) |= 1u;
    *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v7;
    int v6 = *(_DWORD *)(a2 + 88);
  }

  if ((v6 & 2) != 0)
  {
    *(_DWORD *)(a1 + 88) |= 2u;
    int v8 = *(char **)(a1 + 8);
    if (!v8)
    {
      int v8 = (char *)operator new(0x28uLL);
      *(void *)int v8 = off_101858CD8;
      *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 8);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A17B8 + 8);
    }
    double result = sub_10080FAF4((uint64_t)v8, v9);
    int v6 = *(_DWORD *)(a2 + 88);
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
  }

  else if ((v6 & 4) == 0)
  {
    goto LABEL_9;
  }

  *(_DWORD *)(a1 + 88) |= 4u;
  int v10 = *(char **)(a1 + 16);
  if (!v10)
  {
    int v10 = (char *)operator new(0x28uLL);
    *(void *)int v10 = off_101858CD8;
    *(_OWORD *)(v10 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(void *)(a1 + 16) = v10;
  }

  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A17B8 + 16);
  }
  double result = sub_10080FAF4((uint64_t)v10, v11);
  int v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 8) != 0)
  {
LABEL_21:
    *(_DWORD *)(a1 + 88) |= 8u;
    int v12 = *(char **)(a1 + 24);
    if (!v12)
    {
      int v12 = (char *)operator new(0x48uLL);
      *(void *)int v12 = off_101858FA8;
      *(_OWORD *)(v12 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
      *(_OWORD *)(v12 + 52) = 0u;
      *(void *)(a1 + 24) = v12;
    }

    uint64_t v13 = *(void *)(a2 + 24);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_1019A17B8 + 24);
    }
    sub_100811788((uint64_t)v12, v13);
    int v6 = *(_DWORD *)(a2 + 88);
  }

void sub_1008135CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008135E4(void *a1)
{
  uint64_t v2 = a1[4];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[6];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  if ((void *)qword_1019A17B8 != a1)
  {
    uint64_t v6 = a1[1];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = a1[2];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = a1[3];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v9 = a1[5];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v10 = a1[7];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    uint64_t v11 = a1[8];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v12 = a1[9];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

void sub_100813708(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859098;
  sub_1008135E4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100813738(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859098;
  sub_1008135E4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_10081376C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A17B8;
  if (!qword_1019A17B8)
  {
    sub_10080F3B0(0LL, a2, a3, a4);
    return qword_1019A17B8;
  }

  return result;
}

double sub_100813798()
{
  unsigned __int8 v0 = operator new(0x60uLL);
  *(void *)&double result = 0xFFFFFFFFLL;
  v0[10] = 0xFFFFFFFFLL;
  *unsigned __int8 v0 = off_101859098;
  v0[1] = 0LL;
  v0[2] = 0LL;
  v0[3] = 0LL;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[5] = 0LL;
  *((_DWORD *)v0 + 22) = 0;
  v0[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[7] = 0LL;
  v0[8] = 0LL;
  v0[9] = 0LL;
  return result;
}

uint64_t sub_1008137E0(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 88);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = -1;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
        }

        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }

    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v4 + 16) = 0LL;
          *(void *)(v4 + 24) = 0LL;
        }

        *(_DWORD *)(v4 + 36) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }

    if ((v2 & 8) != 0)
    {
      uint64_t v5 = *(void *)(result + 24);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 64);
        if ((_BYTE)v6)
        {
          *(_DWORD *)(v5 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
          *(_OWORD *)(v5 + 24) = 0u;
          *(_OWORD *)(v5 + _Block_object_dispose(va, 8) = 0u;
        }

        if ((v6 & 0xFF00) != 0)
        {
          *(void *)(v5 + 52) = 0LL;
          *(void *)(v5 + 44) = 0LL;
        }

        *(_DWORD *)(v5 + 64) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }

    if ((v2 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(result + 32);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)uint64_t v7 = 0;
          *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }

    int v8 = *(_DWORD *)(result + 88);
    if ((v8 & 0x20) != 0)
    {
      uint64_t v9 = *(void *)(result + 40);
      if (v9)
      {
        int v10 = *(_DWORD *)(v9 + 64);
        if ((_BYTE)v10)
        {
          *(_DWORD *)(v9 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = 0u;
        }

        if ((v10 & 0xFF00) != 0)
        {
          *(void *)(v9 + 52) = 0LL;
          *(void *)(v9 + 44) = 0LL;
        }

        *(_DWORD *)(v9 + 64) = 0;
        int v8 = *(_DWORD *)(result + 88);
      }
    }

    if ((v8 & 0x40) != 0)
    {
      uint64_t v11 = *(void *)(result + 48);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)uint64_t v11 = 0;
          *(void *)(v11 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }

    int v2 = *(_DWORD *)(result + 88);
    if ((v2 & 0x80) != 0)
    {
      uint64_t v12 = *(void *)(result + 56);
      if (v12)
      {
        if (*(int *)(v12 + 16) >= 1)
        {
          uint64_t v13 = 0LL;
          do
          {
            uint64_t v14 = *(void *)(*(void *)(v12 + 8) + 8 * v13);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32LL))(v14);
            ++v13;
          }

          while (v13 < *(int *)(v12 + 16));
        }

        *(_DWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 88);
      }
    }
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t v15 = *(void *)(v1 + 64);
      if (v15)
      {
        if (*(int *)(v15 + 16) >= 1)
        {
          uint64_t v16 = 0LL;
          do
          {
            uint64_t v17 = *(void *)(*(void *)(v15 + 8) + 8 * v16);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32LL))(v17);
            ++v16;
          }

          while (v16 < *(int *)(v15 + 16));
        }

        *(_DWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 88);
      }
    }

    if ((v2 & 0x200) != 0)
    {
      uint64_t v18 = *(void *)(v1 + 72);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 28))
        {
          *(void *)(v18 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v18 + 16) = 0LL;
        }

        *(_DWORD *)(v18 + 2_Block_object_dispose(va, 8) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 8_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_100813A10( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v79);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v79;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 + 1 <= 5)
        {
          *(_DWORD *)(a1 + 88) |= 1u;
          *(_DWORD *)(a1 + 8sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v9;
        }

        uint64_t v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_39;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
LABEL_39:
        *(_DWORD *)(a1 + 88) |= 2u;
        uint64_t v12 = *(char **)(a1 + 8);
        if (!v12)
        {
          uint64_t v12 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v12 = off_101858CD8;
          *(_OWORD *)(v12 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
        }

        uint64_t v13 = (char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0LL;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        uint64_t v21 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v21 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 88) |= 4u;
        int v22 = *(char **)(a1 + 16);
        if (!v22)
        {
          int v22 = (char *)operator new(0x28uLL);
          *(void *)int v22 = off_101858CD8;
          *(_OWORD *)(v22 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(void *)(a1 + 16) = v22;
        }

        uint64_t v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v23;
          *((void *)this + 1) = v23 + 1;
        }

        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0LL;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        uint64_t v30 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v30 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 88) |= 8u;
        uint64_t v31 = *(char **)(a1 + 24);
        if (!v31)
        {
          uint64_t v31 = (char *)operator new(0x48uLL);
          *(void *)uint64_t v31 = off_101858FA8;
          *(_OWORD *)(v31 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v31 + 24) = 0u;
          *(_OWORD *)(v31 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
          *(_OWORD *)(v31 + 52) = 0u;
          *(void *)(a1 + 24) = v31;
        }

        uint64_t v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v32;
          *((void *)this + 1) = v32 + 1;
        }

        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0LL;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v19) {
          *((_DWORD *)this + 14) = v38;
        }
        int v39 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v39 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 88) |= 0x10u;
        __int16 v40 = *(void **)(a1 + 32);
        if (v40 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          __int16 v40 = operator new(0x18uLL);
          v40[1] = 0LL;
          void v40[2] = 0LL;
          void *v40 = 0LL;
          *(void *)(a1 + memset(v21, 0, 32) = v40;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v40);
        if (!(_DWORD)result) {
          return result;
        }
        double v41 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v41 + 1;
LABEL_87:
        *(_DWORD *)(a1 + 88) |= 0x20u;
        __int16 v42 = *(char **)(a1 + 40);
        if (!v42)
        {
          __int16 v42 = (char *)operator new(0x48uLL);
          *(void *)__int16 v42 = off_101859020;
          *(_OWORD *)(v42 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v42 + 24) = 0u;
          *(_OWORD *)(v42 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0u;
          *(_OWORD *)(v42 + 52) = 0u;
          *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = v42;
        }

        double v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v43;
          *((void *)this + 1) = v43 + 1;
        }

        int v44 = *((_DWORD *)this + 14);
        int v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0LL;
        }
        int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        int v48 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v48, 1);
        int v49 = v48 - 1;
        if (v49 < 0 == v19) {
          *((_DWORD *)this + 14) = v49;
        }
        __int16 v50 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v50 + 1;
LABEL_101:
        *(_DWORD *)(a1 + 88) |= 0x40u;
        double v51 = *(void **)(a1 + 48);
        if (v51 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          double v51 = operator new(0x18uLL);
          v51[1] = 0LL;
          void v51[2] = 0LL;
          *double v51 = 0LL;
          *(void *)(a1 + 4_Block_object_dispose(va, 8) = v51;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v51);
        if (!(_DWORD)result) {
          return result;
        }
        int v52 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v52 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 88) |= 0x80u;
        __int16 v53 = *(void **)(a1 + 56);
        if (!v53)
        {
          __int16 v53 = operator new(0x28uLL);
          v53[1] = 0LL;
          v53[2] = 0LL;
          void *v53 = off_101858E40;
          *((_DWORD *)v53 + 6) = 0;
          v53[4] = 0LL;
          *(void *)(a1 + 56) = v53;
        }

        int v54 = (char *)*((void *)this + 1);
        if ((unint64_t)v54 >= *((void *)this + 2) || *v54 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v54;
          *((void *)this + 1) = v54 + 1;
        }

        int v55 = *((_DWORD *)this + 14);
        int v56 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v55 + 1;
        if (v55 >= v56) {
          return 0LL;
        }
        int v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
        int v59 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v59, 1);
        int v60 = v59 - 1;
        if (v60 < 0 == v19) {
          *((_DWORD *)this + 14) = v60;
        }
        __int16 v61 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v61 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 88) |= 0x100u;
        __int16 v62 = *(void **)(a1 + 64);
        if (!v62)
        {
          __int16 v62 = operator new(0x28uLL);
          v62[1] = 0LL;
          _OWORD v62[2] = 0LL;
          *__int16 v62 = off_101858E40;
          *((_DWORD *)v62 + 6) = 0;
          v62[4] = 0LL;
          *(void *)(a1 + 64) = v62;
        }

        double v63 = (char *)*((void *)this + 1);
        if ((unint64_t)v63 >= *((void *)this + 2) || *v63 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v63;
          *((void *)this + 1) = v63 + 1;
        }

        int v64 = *((_DWORD *)this + 14);
        int v65 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v64 + 1;
        if (v64 >= v65) {
          return 0LL;
        }
        int v66 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v66);
        int v68 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v68, 1);
        int v69 = v68 - 1;
        if (v69 < 0 == v19) {
          *((_DWORD *)this + 14) = v69;
        }
        __int16 v70 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v70 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 88) |= 0x200u;
        double v71 = *(void **)(a1 + 72);
        if (!v71)
        {
          double v71 = operator new(0x20uLL);
          *double v71 = off_101858F30;
          v71[1] = 0LL;
          void v71[2] = 0LL;
          v71[3] = 0LL;
          *(void *)(a1 + 72) = v71;
        }

        __int16 v72 = (char *)*((void *)this + 1);
        if ((unint64_t)v72 >= *((void *)this + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v79)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v79 = *v72;
          *((void *)this + 1) = v72 + 1;
        }

        int v73 = *((_DWORD *)this + 14);
        int v74 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v73 + 1;
        if (v73 >= v74) {
          return 0LL;
        }
        int v75 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v75);
        int v77 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v77, 1);
        int v78 = v77 - 1;
        if (v78 < 0 == v19) {
          *((_DWORD *)this + 14) = v78;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_29;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_29;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_29;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_87;
        }
        goto LABEL_29;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_101;
        }
        goto LABEL_29;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_107;
        }
        goto LABEL_29;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_121;
        }
        goto LABEL_29;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        goto LABEL_135;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100814334( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 88);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 80),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 88);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A17B8 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_1008144E0(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 88);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_73;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }

    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 88);
    }

    else
    {
      int v6 = 1;
    }

    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A17B8 + 8);
  }
  int v8 = *(unsigned __int8 *)(v7 + 36);
  if (*(_BYTE *)(v7 + 36))
  {
    int v9 = (v8 << 31 >> 31) & 9;
    if ((v8 & 2) != 0) {
      v9 += 9;
    }
    if ((v8 & 4) != 0) {
      int v8 = v9 + 9;
    }
    else {
      int v8 = v9;
    }
  }

  *(_DWORD *)(v7 + memset(v21, 0, 32) = v8;
  uint64_t v4 = (v4 + v8 + 2);
  int v3 = *(_DWORD *)(a1 + 88);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_1019A17B8 + 16);
    }
    int v11 = *(unsigned __int8 *)(v10 + 36);
    if (*(_BYTE *)(v10 + 36))
    {
      int v12 = (v11 << 31 >> 31) & 9;
      if ((v11 & 2) != 0) {
        v12 += 9;
      }
      if ((v11 & 4) != 0) {
        int v11 = v12 + 9;
      }
      else {
        int v11 = v12;
      }
    }

    *(_DWORD *)(v10 + memset(v21, 0, 32) = v11;
    uint64_t v4 = (v4 + v11 + 2);
    int v3 = *(_DWORD *)(a1 + 88);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_43;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }

  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1019A17B8 + 24);
  }
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100812228(v13, a2);
  int v15 = (int)v14;
  else {
    int v16 = 1;
  }
  uint64_t v4 = (v4 + v15 + v16 + 1);
  int v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

double sub_10081483C(uint64_t a1, void *lpsrc)
{
  return sub_100813208(a1, (uint64_t)lpsrc);
}

uint64_t sub_100814888()
{
  return 1LL;
}

void *sub_100814890@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VIOEstimation");
}

double sub_1008148A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  3102LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + _Block_object_dispose(va, 8) = result;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }

  return result;
}

void sub_100814948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100814960(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859110;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100814970(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859110;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100814990()
{
  double result = operator new(0x20uLL);
  *double result = off_101859110;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1008149B8(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
  }

  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1008149CC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + _Block_object_dispose(va, 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        int v8 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && *v8 == 17)
        {
          *((void *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_21;
      }

      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_21:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100814B28( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }

  if ((v5 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v4 + 16),  a3);
  }
  return result;
}

uint64_t sub_100814B80(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    unsigned int v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }

  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100814BAC(uint64_t a1, void *lpsrc)
{
  return sub_1008148A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100814BF8()
{
  return 1LL;
}

void *sub_100814C00@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLLocationCoordinate");
}

double sub_100814C10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  3349LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      int v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        int v7 = operator new(0x20uLL);
        void *v7 = off_101859110;
        v7[1] = 0LL;
        void v7[2] = 0LL;
        v7[3] = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A17C8 + 8);
      }
      double result = sub_1008148A0((uint64_t)v7, v8);
      int v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          return result;
        }
        goto LABEL_14;
      }
    }

    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }

    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_14:
    *(_DWORD *)(a1 + 36) |= 4u;
    int v9 = *(char **)(a1 + 24);
    if (!v9)
    {
      int v9 = (char *)operator new(0x28uLL);
      *(void *)int v9 = off_101858CD8;
      *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(void *)(a1 + 24) = v9;
    }

    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_1019A17C8 + 24);
    }
    return sub_10080FAF4((uint64_t)v9, v10);
  }

  return result;
}

void sub_100814D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100814D68(void *result)
{
  if ((void *)qword_1019A17C8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    double result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100814DC4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859188;
  sub_100814D68(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100814DF4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859188;
  sub_100814D68(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100814E28()
{
  unsigned __int8 v0 = (char *)operator new(0x28uLL);
  *(void *)unsigned __int8 v0 = off_101859188;
  double result = 0.0;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_100814E58(uint64_t result)
{
  LOBYTE(v1) = *(_BYTE *)(result + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 28))
        {
          *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v2 + 16) = 0LL;
        }

        *(_DWORD *)(v2 + 2_Block_object_dispose(va, 8) = 0;
        int v1 = *(_DWORD *)(result + 36);
      }
    }

    *(void *)(result + 16) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
        }

        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100814EAC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v10 = *(void **)(a1 + 8);
        if (!v10)
        {
          uint64_t v10 = operator new(0x20uLL);
          *uint64_t v10 = off_101859110;
          v10[1] = 0LL;
          v10[2] = 0LL;
          v10[3] = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v10;
        }

        char v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v30)) {
            return 0LL;
          }
        }

        else
        {
          v30[0] = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0LL;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        char v19 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 17)
        {
          *((void *)this + 1) = v19 + 1;
          goto LABEL_32;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 1) {
        goto LABEL_20;
      }
LABEL_32:
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v30) & 1) == 0) {
        return 0LL;
      }
      *(void *)(a1 + 16) = *(void *)v30;
      int v9 = *(_DWORD *)(a1 + 36) | 2;
      *(_DWORD *)(a1 + 36) = v9;
      uint64_t v20 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v20 < *((void *)this + 2) && *v20 == 26)
      {
        *((void *)this + 1) = v20 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v9 | 4;
        unint64_t v21 = *(char **)(a1 + 24);
        if (!v21)
        {
          unint64_t v21 = (char *)operator new(0x28uLL);
          *(void *)unint64_t v21 = off_101858CD8;
          *(_OWORD *)(v21 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v21 + 24) = 0u;
          *(void *)(a1 + 24) = v21;
        }

        int v22 = (char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v30)) {
            return 0LL;
          }
        }

        else
        {
          v30[0] = *v22;
          *((void *)this + 1) = v22 + 1;
        }

        int v23 = *((_DWORD *)this + 14);
        int v24 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0LL;
        }
        int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
        int v27 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v27, 1);
        int v28 = v27 - 1;
        if (v28 < 0 == v17) {
          *((_DWORD *)this + 14) = v28;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2)
      {
        int v9 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_1008151BC( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 16),  a3);
    if ((*(_DWORD *)(v5 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_9;
  }

  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A17C8 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A17C8 + 24);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
}

uint64_t sub_100815254(uint64_t a1)
{
  LOBYTE(v1) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (!v2) {
        uint64_t v2 = *(void *)(qword_1019A17C8 + 8);
      }
      int v3 = *(unsigned __int8 *)(v2 + 28);
      if (*(_BYTE *)(v2 + 28))
      {
        if ((v3 & 2) != 0) {
          int v3 = ((v3 << 31 >> 31) & 9) + 9;
        }
        else {
          int v3 = (v3 << 31 >> 31) & 9;
        }
      }

      *(_DWORD *)(v2 + 24) = v3;
      LODWORD(v2) = v3 + 2;
      int v1 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      LODWORD(v2) = 0;
    }

    if ((v1 & 2) != 0) {
      uint64_t v2 = (v2 + 9);
    }
    else {
      uint64_t v2 = v2;
    }
    if ((v1 & 4) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        uint64_t v4 = *(void *)(qword_1019A17C8 + 24);
      }
      int v5 = *(unsigned __int8 *)(v4 + 36);
      if (*(_BYTE *)(v4 + 36))
      {
        int v6 = (v5 << 31 >> 31) & 9;
        if ((v5 & 2) != 0) {
          v6 += 9;
        }
        if ((v5 & 4) != 0) {
          int v5 = v6 + 9;
        }
        else {
          int v5 = v6;
        }
      }

      *(_DWORD *)(v4 + memset(v21, 0, 32) = v5;
      uint64_t v2 = (v2 + v5 + 2);
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  *(_DWORD *)(a1 + memset(v21, 0, 32) = v2;
  return v2;
}

double sub_100815318(uint64_t a1, void *lpsrc)
{
  return sub_100814C10(a1, (uint64_t)lpsrc);
}

uint64_t sub_100815364()
{
  return 1LL;
}

void *sub_10081536C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLLocation");
}

void sub_10081537C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v21,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  3790LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v21,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    int v6 = *(char **)(a1 + 8);
    if (!v6)
    {
      int v6 = (char *)operator new(0x28uLL);
      *(void *)int v6 = off_101858CD8;
      *(_OWORD *)(v6 + _Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A17D0 + 8);
    }
    sub_10080FAF4((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }

  else if ((*(_BYTE *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_6;
  }

  *(_DWORD *)(a1 + 72) |= 2u;
  uint64_t v8 = *(void **)(a1 + 16);
  if (!v8)
  {
    uint64_t v8 = operator new(0x28uLL);
    v8[1] = 0LL;
    void v8[2] = 0LL;
    void *v8 = off_101858EB8;
    *((_DWORD *)v8 + 6) = 0;
    double v8[4] = 0LL;
    *(void *)(a1 + 16) = v8;
  }

  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A17D0 + 16);
  }
  sub_100810EA8(v8, v9);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

void sub_100815654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10081566C(void *result)
{
  if ((void *)qword_1019A17D0 != result)
  {
    int v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t result = (void *)v1[7];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100815718(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859200;
  sub_10081566C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100815748(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859200;
  sub_10081566C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10081577C()
{
  unsigned __int8 v0 = (char *)operator new(0x50uLL);
  *(void *)unsigned __int8 v0 = off_101859200;
  *(_OWORD *)(v0 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(void *)&double result = 0xFFFFFFFFLL;
  *((void *)v0 + _Block_object_dispose(va, 8) = 0xFFFFFFFFLL;
  *((_DWORD *)v0 + 1_Block_object_dispose(va, 8) = 0;
  *((void *)v0 + 6) = 0LL;
  *((void *)v0 + 7) = 0LL;
  *((void *)v0 + 5) = 0LL;
  return result;
}

uint64_t sub_1008157C0(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
        }

        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 72);
      }
    }

    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(int *)(v4 + 16) >= 1)
        {
          uint64_t v5 = 0LL;
          do
          {
            uint64_t v6 = *(void *)(*(void *)(v4 + 8) + 8 * v5);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
            ++v5;
          }

          while (v5 < *(int *)(v4 + 16));
        }

        *(_DWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 4) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 24);
      if (v7)
      {
        if (*(int *)(v7 + 16) >= 1)
        {
          uint64_t v8 = 0LL;
          do
          {
            uint64_t v9 = *(void *)(*(void *)(v7 + 8) + 8 * v8);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32LL))(v9);
            ++v8;
          }

          while (v8 < *(int *)(v7 + 16));
        }

        *(_DWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 8) != 0)
    {
      uint64_t v10 = *(void *)(v1 + 32);
      if (v10)
      {
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 2_Block_object_dispose(va, 8) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    *(void *)(v1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0LL;
    *(_DWORD *)(v1 + 64) = -1;
    if ((v2 & 0x40) != 0)
    {
      double result = *(void *)(v1 + 48);
      if (result)
      {
        double result = sub_100814E58(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 0x80) != 0)
    {
      uint64_t v11 = *(void *)(v1 + 56);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 20) & 1) != 0)
        {
          double result = *(void *)(v11 + 8);
          if (result) {
            double result = sub_1008167A8(result);
          }
        }

        *(_DWORD *)(v11 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100815908(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = sub_1008167A8(result);
    }
  }

  *(_DWORD *)(v1 + 2sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = 0;
  return result;
}

uint64_t sub_10081593C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        uint64_t v8 = *(char **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v8 = off_101858CD8;
          *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v8 + 24) = 0u;
          *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0LL;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        uint64_t v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
        goto LABEL_39;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
LABEL_39:
        *(_DWORD *)(a1 + 72) |= 2u;
        char v20 = *(void **)(a1 + 16);
        if (!v20)
        {
          char v20 = operator new(0x28uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          void *v20 = off_101858EB8;
          *((_DWORD *)v20 + 6) = 0;
          v20[4] = 0LL;
          *(void *)(a1 + 16) = v20;
        }

        unint64_t v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v21;
          *((void *)this + 1) = v21 + 1;
        }

        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0LL;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v26, 1);
        int v27 = v26 - 1;
        if (v27 < 0 == v17) {
          *((_DWORD *)this + 14) = v27;
        }
        int v28 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v28 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 4u;
        char v29 = *(void **)(a1 + 24);
        if (!v29)
        {
          char v29 = operator new(0x28uLL);
          v29[1] = 0LL;
          void v29[2] = 0LL;
          *char v29 = off_101858EB8;
          *((_DWORD *)v29 + 6) = 0;
          v29[4] = 0LL;
          *(void *)(a1 + 24) = v29;
        }

        uint64_t v30 = (char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v30;
          *((void *)this + 1) = v30 + 1;
        }

        int v31 = *((_DWORD *)this + 14);
        int v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32) {
          return 0LL;
        }
        int v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        int v35 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v35, 1);
        int v36 = v35 - 1;
        if (v36 < 0 == v17) {
          *((_DWORD *)this + 14) = v36;
        }
        uint64_t v37 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v37 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 8u;
        int v38 = *(void **)(a1 + 32);
        if (!v38)
        {
          int v38 = operator new(0x20uLL);
          void *v38 = &off_101858DC8;
          v38[1] = 0LL;
          id v38[2] = 0LL;
          v38[3] = 0LL;
          *(void *)(a1 + memset(v21, 0, 32) = v38;
        }

        unsigned int v39 = (char *)*((void *)this + 1);
        if ((unint64_t)v39 >= *((void *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v39;
          *((void *)this + 1) = v39 + 1;
        }

        int v40 = *((_DWORD *)this + 14);
        int v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 >= v41) {
          return 0LL;
        }
        int v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
        int v44 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v44, 1);
        int v45 = v44 - 1;
        if (v45 < 0 == v17) {
          *((_DWORD *)this + 14) = v45;
        }
        int v46 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v46 + 1;
LABEL_81:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v68) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 4sub_100222B94(v38, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0) = *(void *)v68;
        *(_DWORD *)(a1 + 72) |= 0x10u;
        unsigned int v47 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v11 = v47 + 1;
        *((void *)this + 1) = v11;
LABEL_85:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v48 = v68[0];
        }

        else
        {
          unsigned int v48 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v48 + 1 <= 3)
        {
          *(_DWORD *)(a1 + 72) |= 0x20u;
          *(_DWORD *)(a1 + 64) = v48;
        }

        __int16 v50 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        double v51 = *(char **)(a1 + 48);
        if (!v51)
        {
          double v51 = (char *)operator new(0x28uLL);
          *(void *)double v51 = off_101859188;
          *(_OWORD *)(v51 + _Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v51 + 24) = 0u;
          *(void *)(a1 + 4_Block_object_dispose(va, 8) = v51;
        }

        int v52 = (char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v52;
          *((void *)this + 1) = v52 + 1;
        }

        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0LL;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v57 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v17) {
          *((_DWORD *)this + 14) = v58;
        }
        int v59 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        int v60 = *(void **)(a1 + 56);
        if (!v60)
        {
          int v60 = operator new(0x18uLL);
          v60[1] = 0LL;
          _OWORD v60[2] = 0LL;
          *int v60 = &off_1018592F0;
          *(void *)(a1 + 56) = v60;
        }

        __int16 v61 = (char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v61;
          *((void *)this + 1) = v61 + 1;
        }

        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0LL;
        }
        int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        int v66 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v17) {
          *((_DWORD *)this + 14) = v67;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_27;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_27;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_81;
        }
        goto LABEL_27;
      case 6u:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_85;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_95;
        }
        goto LABEL_27;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
        goto LABEL_109;
      default:
        int v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1008160C8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A17D0 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A17D0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10081622C(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_61;
  }

  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(_BYTE *)(a1 + 72) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_1019A17D0 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }

  *(_DWORD *)(v6 + memset(v21, 0, 32) = v7;
  unsigned int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A17D0 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100811328(v9, a2);
    int v11 = (int)v10;
    else {
      int v12 = 1;
    }
    v4 += v11 + v12 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }

void sub_100816480(uint64_t a1, void *lpsrc)
{
}

void sub_1008164CC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4193LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x30uLL);
      v5[5] = 0LL;
      *uint64_t v5 = off_101859278;
      v5[1] = 0LL;
      _OWORD v5[2] = 0LL;
      fpos_t v5[3] = 0LL;
      *((_DWORD *)v5 + _Block_object_dispose(va, 8) = 0;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A17E0 + 8);
    }
    sub_1008165C0((uint64_t)v5, v6);
  }

void sub_100816590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1008165A8()
{
  return 1LL;
}

void *sub_1008165B0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLHeading");
}

void sub_1008165C0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4016LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16),  *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 28);
      uint64_t v8 = *(int *)(a1 + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 28);
        }

        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v7 + 1;
        uint64_t v10 = operator new(0x20uLL);
        *uint64_t v10 = off_101859110;
        v10[1] = 0LL;
        v10[2] = 0LL;
        v10[3] = 0LL;
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = *(int *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v8 + 1;
        uint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_1008148A0((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 24));
  }

  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
  }

void sub_100816714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10081672C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859278;
  sub_10008D0EC((uint64_t)a1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100816764(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100816778()
{
  uint64_t result = operator new(0x30uLL);
  result[5] = 0LL;
  *uint64_t result = off_101859278;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  *((_DWORD *)result + _Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1008167A8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 44)) {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  }
  if (*(int *)(result + 24) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 24));
  }

  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_10081680C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallbacunint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v9 = TagFallback & 7;
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v10 >= v11 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v12 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }

        else
        {
          *uint64_t v5 = *v10;
          uint64_t v12 = v10 + 1;
          *((void *)this + 1) = v12;
        }

        *(_DWORD *)(a1 + 44) |= 1u;
      }

      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_16;
      }
      while (1)
      {
        int v14 = *(_DWORD *)(a1 + 28);
        uint64_t v15 = *(int *)(a1 + 24);
        if ((int)v15 >= v14)
        {
          if (v14 == *(_DWORD *)(a1 + 32))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
            int v14 = *(_DWORD *)(a1 + 28);
          }

          *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v14 + 1;
          uint64_t v17 = operator new(0x20uLL);
          *uint64_t v17 = off_101859110;
          v17[1] = 0LL;
          uint64_t v17[2] = 0LL;
          v17[3] = 0LL;
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v19 = *(int *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v19 + 1;
          *(void *)(v18 + 8 * v19) = v17;
        }

        else
        {
          uint64_t v16 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v15 + 1;
          uint64_t v17 = *(void **)(v16 + 8 * v15);
        }

        char v20 = (char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v29)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v29 = *v20;
          *((void *)this + 1) = v20 + 1;
        }

        int v21 = *((_DWORD *)this + 14);
        int v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0LL;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        int v25 = *((_DWORD *)this + 14);
        BOOL v26 = __OFSUB__(v25, 1);
        int v27 = v25 - 1;
        if (v27 < 0 == v26) {
          *((_DWORD *)this + 14) = v27;
        }
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        unsigned int v28 = (_BYTE *)*((void *)this + 2);
        if (v12 >= v28 || *v12 != 18) {
          break;
        }
LABEL_23:
        *((void *)this + 1) = v12 + 1;
      }

      if (v12 == v28 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v9 = TagFallback & 7;
LABEL_16:
    if (v9 == 4) {
      return 1LL;
    }
  }