uint64_t *sub_100006620(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  *a1 = 0LL;
  a1[1] = 0LL;
  v5 = *a2;
  *a2 = 0LL;
  v6 = *a1;
  *a1 = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  v7 = *a3;
  *a3 = 0LL;
  v8 = a1[1];
  a1[1] = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  return a1;
}

unint64_t sub_10000668C(void *a1, double ***a2, _DWORD *a3, __n128 **a4)
{
  v6 = *a2;
  uint64_t v7 = (uint64_t)a2[1];
  v9 = v6[1];
  unint64_t v10 = (char *)v9 - (char *)*v6;
  if (v9 != *v6)
  {
    v65 = a3;
    v80 = 0LL;
    v81 = 0LL;
    uint64_t v82 = 0LL;
    if (&v80 != (__n128 **)a2) {
      sub_100006C5C((uint64_t)&v80, (uint64_t)v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v6) >> 3));
    }
    int v12 = 0;
    BOOL v13 = 0;
    unint64_t v14 = v10 >> 3;
    unint64_t v15 = (v10 >> 3);
    double v16 = (double)(v10 >> 3);
    while (!v13)
    {
      v77 = 0LL;
      v78 = 0LL;
      unint64_t v79 = 0LL;
      uint64_t v17 = ((char *)v81 - (char *)v80) >> 3;
      unsigned int v18 = -1431655765 * v17;
      double v19 = 0.0;
      if (-1431655765 * (_DWORD)v17)
      {
        int v68 = v12;
        uint64_t v20 = 0LL;
        unsigned int v67 = -1431655765 * v17;
        uint64_t v21 = (-1431655765 * v17);
        do
        {
          v22 = v80;
          v71 = 0LL;
          sub_1000070FC(&v74, v15, &v71);
          __p = 0LL;
          sub_1000070FC(&v71, v15, &__p);
          v23 = (char **)v22 + 3 * v20;
          v25 = *a2;
          v24 = a2[1];
          while (v25 != v24)
          {
            (*(void (**)(void, uint64_t, double **))(*(void *)a1[1] + 16LL))( a1[1],  (uint64_t)v22 + 24 * v20,  v25);
            if ((_DWORD)v14)
            {
              v27 = *v25;
              v28 = (double *)v74;
              unint64_t v29 = v15;
              v30 = (double *)v71;
              do
              {
                double v31 = *v27++;
                double *v28 = *v28 - v31 * v26;
                ++v28;
                double *v30 = *v30 - v26;
                ++v30;
                --v29;
              }

              while (v29);
            }

            v25 += 3;
          }

          sub_1000071F0(&__p, v15);
          if ((_DWORD)v14)
          {
            v32 = (double *)v74;
            v33 = (double *)v71;
            v34 = *v23;
            unint64_t v35 = v15;
            v36 = (double *)__p;
            do
            {
              double v37 = *v32++;
              double v38 = v37;
              double v39 = *v33++;
              double v40 = v38 / v39;
              double v41 = *(double *)v34;
              v34 += 8;
              *v36++ = v40 - v41;
              --v35;
            }

            while (v35);
          }

          v42 = v78;
          if ((unint64_t)v78 >= v79)
          {
            uint64_t v43 = sub_100007264((uint64_t *)&v77, (uint64_t)&__p);
          }

          else
          {
            *v78 = 0LL;
            v42[1] = 0LL;
            v42[2] = 0LL;
            sub_100007590(v42, __p, (uint64_t)v70, (v70 - (_BYTE *)__p) >> 3);
            uint64_t v43 = (uint64_t)(v42 + 3);
          }

          v78 = (void **)v43;
          if ((_DWORD)v14)
          {
            v44 = (double *)__p;
            v45 = (double *)*v23;
            unint64_t v46 = v15;
            do
            {
              double v47 = *v44++;
              double *v45 = v47 + *v45;
              ++v45;
              --v46;
            }

            while (v46);
          }

          if (v80 != v22) {
            sub_1000F9040( (char *)v80 + 24 * v20,  *v23,  v22->n128_i64[3 * v20 + 1],  (uint64_t)(v22->n128_u64[3 * v20 + 1] - (void)*v23) >> 3);
          }
          if (__p)
          {
            v70 = __p;
            operator delete(__p);
          }

          if (v71)
          {
            v72 = v71;
            operator delete(v71);
          }

          if (v74)
          {
            v75 = v74;
            operator delete(v74);
          }

          ++v20;
        }

        while (v20 != v21);
        v48 = v77;
        int v12 = v68;
        unsigned int v18 = v67;
        if (v77 != v78)
        {
          double v19 = 0.0;
          do
          {
            for (i = (double *)*v48; i != v48[1]; ++i)
            {
              double v50 = *i;
              double v19 = v19 + v50 * v50;
            }

            v48 += 3;
          }

          while (v48 != v78);
        }
      }

      double v51 = sqrt(v19) / v16 / (double)v18;
      BOOL v13 = v51 < 0.00000001;
      uint64_t v52 = (uint64_t)v80;
      if (v80 != v81)
      {
        do
        {
          v74 = 0LL;
          v75 = 0LL;
          uint64_t v76 = 0LL;
          sub_100007590( &v74,  *(const void **)v52,  *(void *)(v52 + 8),  (uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 3);
          v53 = (__n128 *)(v52 + 24);
          v54 = (__n128 *)(v52 + 24);
          if ((__n128 *)(v52 + 24) != v81)
          {
            while (1)
            {
              v71 = 0LL;
              v72 = 0LL;
              uint64_t v73 = 0LL;
              sub_100007590( &v71,  (const void *)v54->n128_u64[0],  v54->n128_i64[1],  (uint64_t)(v54->n128_u64[1] - v54->n128_u64[0]) >> 3);
              double v55 = (*(double (**)(void, void **, void **))(*(void *)*a1 + 16LL))(*a1, &v74, &v71);
              if (v71)
              {
                v72 = v71;
                operator delete(v71);
              }

              if (v55 < 0.01) {
                break;
              }
              v54 = (__n128 *)((char *)v54 + 24);
              if (v54 == v81) {
                goto LABEL_52;
              }
            }

            sub_100007608((__n128 *)(v52 + 24), v81, v52);
            v54 = v56;
            v57 = v81;
            if (v81 != v56)
            {
              v58 = v81;
              do
              {
                v60 = (void *)v58[-2].n128_u64[1];
                v58 = (__n128 *)((char *)v58 - 24);
                v59 = v60;
                if (v60)
                {
                  v57[-1].n128_u64[0] = (unint64_t)v59;
                  operator delete(v59);
                }

                v57 = v58;
              }

              while (v58 != v54);
            }

            v81 = v54;
          }

LABEL_52:
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
            v54 = v81;
          }

          v52 += 24LL;
        }

        while (v53 != v54);
      }

      ++v12;
      v74 = &v77;
      sub_100006BC8((void ***)&v74);
      if (v12 == 51)
      {
        if (v51 >= 0.00000001)
        {
          unint64_t v10 = 0LL;
          goto LABEL_62;
        }

        break;
      }
    }

    uint64_t v61 = (uint64_t)v80;
    v62 = v81;
    unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3);
    _DWORD *v65 = v63;
    if (&v80 != a4) {
      sub_100006C5C((uint64_t)a4, v61, (uint64_t)v62, v63);
    }
    unint64_t v10 = 1LL;
LABEL_62:
    v77 = (void **)&v80;
    sub_100006BC8(&v77);
  }

  return v10;
}

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 168),  a2,  a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x80000) == 0)
  {
LABEL_31:
    if ((v12 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_54;
  }

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  BOOL v13 = *(void *)(v5 + 56);
  if (!v13) {
    BOOL v13 = *(void *)(qword_1019A0978 + 56);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v13,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }

          unsigned int v18 = 0LL;
          goto LABEL_53;
        }

        unsigned int v18 = 1LL;
LABEL_53:
        if (SHIBYTE(v35) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(__dst[0]);
        }
        v6 += 280LL;
        if (v6 == v7) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v18;
        }
        if ((v21 & 1) == 0) {
          goto LABEL_95;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      double v19 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993AFF >= 0) {
          uint64_t v20 = &xmmword_101993AE8;
        }
        else {
          uint64_t v20 = (__int128 *)xmmword_101993AE8;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        if (byte_101993AFF >= 0) {
          double v26 = &xmmword_101993AE8;
        }
        else {
          double v26 = (__int128 *)xmmword_101993AE8;
        }
        double v41 = 136380675;
        v42 = v26;
        LODWORD(v32) = 12;
        v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v41,  v32);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationModelTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v27);
      }

      sqlite3_reset(v8);
      goto LABEL_52;
    }

    unsigned int v18 = 1LL;
LABEL_95:
    unint64_t v29 = v40;
    double v40 = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    v28 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      double v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v39,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v31);
    }

    return 0LL;
  }

  return v18;
}

  result = *(double *)(a2 + 136);
  *(_DWORD *)(a1 + 160) |= 0x40000u;
  *(double *)(a1 + 136) = result;
  if ((*(_DWORD *)(a2 + 160) & 0x80000) == 0) {
    return result;
  }
LABEL_28:
  result = *(double *)(a2 + 144);
  *(_DWORD *)(a1 + 160) |= 0x80000u;
  *(double *)(a1 + 144) = result;
  return result;
}

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 80),  a3);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D,  (int)a2,  *(double *)(v5 + 128),  a3);
  v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  *(_DWORD *)(a1 + 152) |= 0x2000u;
  uint64_t v20 = *(void **)(a1 + 96);
  if (!v20)
  {
    uint64_t v20 = operator new(0x20uLL);
    *uint64_t v20 = off_101827EC8;
    v20[1] = 0LL;
    v20[2] = 0LL;
    v20[3] = 0LL;
    *(void *)(a1 + 96) = v20;
  }

  uint64_t v21 = *(void *)(a2 + 96);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_1019A0B80 + 96);
  }
  sub_1001D60C0((uint64_t)v20, v21);
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 116),  a2,  a4);
  v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

      free(v18);
      goto LABEL_74;
    }

    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    v24 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = [a3 type];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v84 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: qualified leeched location, type, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v62 = qword_1019344F8;
      unint64_t v63 = [a3 type];
      *(_DWORD *)v80 = 67109120;
      *(_DWORD *)&v80[4] = v63;
      v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v62,  0LL,  "VEHICULAR: qualified leeched location, type, %d",  v80);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v64);
    }

    if (!-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"))
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      unint64_t v29 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: first qualifying location",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_73;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v28 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: first qualifying location");
      goto LABEL_148;
    }

    objc_msgSend( objc_msgSend(a3, "timestamp"),  "timeIntervalSinceDate:",  -[CLLocation timestamp](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "timestamp"));
    if (v26 > 240.0)
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v27 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)v84 = 0x406E000000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: renew previous location older than age of %f seconds",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_73;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v28 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: renew previous location older than age of %f seconds");
LABEL_148:
      v65 = (uint8_t *)v28;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v28);
      if (v65 != buf) {
        free(v65);
      }
LABEL_73:
      -[CLLocationDerivedSpeedEstimator setPrevLoc:](self, "setPrevLoc:", a3);
      goto LABEL_74;
    }

    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    v30 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
    {
      double v31 = -[CLLocation type](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "type");
      v32 = objc_msgSend( -[CLLocation description](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "description"),  "UTF8String");
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v84 = v31;
      *(_WORD *)&v84[4] = 2080;
      *(void *)&v84[6] = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "VEHICULAR: previous location, type, %d, %s",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v66 = qword_1019344F8;
      unsigned int v67 = -[CLLocation type](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "type");
      int v68 = objc_msgSend( -[CLLocation description](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "description"),  "UTF8String");
      *(_DWORD *)v80 = 67109378;
      *(_DWORD *)&v80[4] = v67;
      *(_WORD *)&v80[8] = 2080;
      *(void *)&v80[10] = v68;
      LODWORD(v79) = 18;
      v69 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v66,  2LL,  "VEHICULAR: previous location, type, %d, %s",  v80,  v79);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v69);
    }

    -[CLLocation distanceFromLocation:]( -[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"),  "distanceFromLocation:",  a3);
    v34 = v33;
    -[NSDate timeIntervalSinceDate:]( -[CLLocation timestamp](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "timestamp"),  "timeIntervalSinceDate:",  [a3 timestamp]);
    v36 = v35;
    -[CLLocation horizontalAccuracy](-[CLLocationDerivedSpeedEstimator prevLoc](self, "prevLoc"), "horizontalAccuracy");
    double v38 = v37 * v37;
    [a3 horizontalAccuracy];
    double v40 = sqrt(v38 + v39 * v39);
    if (v34 <= v40) {
      double v41 = 0.0;
    }
    else {
      double v41 = v34 - v40;
    }
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    v42 = fabs(v36);
    uint64_t v43 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)v84 = v34;
      *(_WORD *)&v84[8] = 2048;
      *(double *)&v84[10] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "VEHICULAR: distanceMoved, %f, elapsedTime, %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      *(_DWORD *)v80 = 134218240;
      *(double *)&v80[4] = v34;
      *(_WORD *)&v80[12] = 2048;
      *(double *)&v80[14] = v42;
      LODWORD(v79) = 22;
      v70 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "VEHICULAR: distanceMoved, %f, elapsedTime, %f",  COERCE_DOUBLE(v80),  *(double *)&v79);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v70);
    }

    if (v42 <= 60.0)
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      double v50 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)v84 = 0x404E000000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: drop leeched location within %f sec",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v23 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: drop leeched location within %f sec");
      goto LABEL_51;
    }

    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    v44 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      v45 = [a3 type];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v84 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: accept qualified leeched location, type, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v71 = qword_1019344F8;
      v72 = [a3 type];
      *(_DWORD *)v80 = 67109120;
      *(_DWORD *)&v80[4] = v72;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v71,  0LL,  "VEHICULAR: accept qualified leeched location, type, %d",  v80);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v73);
    }

    if (v36 == 0.0)
    {
      -[CLLocationDerivedSpeedEstimator _invalidateSpeedEstimate](self, "_invalidateSpeedEstimate");
      -[CLLocationDerivedSpeedEstimator setPrevLoc:](self, "setPrevLoc:", a3);
      goto LABEL_75;
    }

    unint64_t v46 = v41 / v42;
    if (v46 > 45.0)
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      double v47 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        v48 = [a3 type];
        *(_DWORD *)buf = 134219264;
        *(double *)v84 = v46;
        *(_WORD *)&v84[8] = 2048;
        *(double *)&v84[10] = v34 / v42;
        *(_WORD *)&v84[18] = 2048;
        *(double *)&v84[20] = v40 / v42;
        *(_WORD *)&v84[28] = 2048;
        *(double *)&v84[30] = v34;
        v85 = 2048;
        v86 = v42;
        v87 = 1024;
        v88 = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: outlier, conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapse dTime, %f, type, %d",  buf,  0x3Au);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v49 = qword_1019344F8;
      [a3 type];
      uint64_t v17 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  0LL,  "VEHICULAR: outlier, conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanc eMoved, %f, elapsedTime, %f, type, %d",  v80);
      goto LABEL_40;
    }

    objc_msgSend(objc_msgSend(a3, "timestamp"), "timeIntervalSinceReferenceDate");
    -[CLLocationDerivedSpeedEstimator setCurrentEstimate:](self, "setCurrentEstimate:", v34 / v42, v51, v40 / v42);
    if (v46 <= 6.7)
    {
      self->_numConsecutiveVehicularSpeedObservations = 0;
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v58 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        v59 = [a3 type];
        *(_DWORD *)buf = 134219264;
        *(double *)v84 = v46;
        *(_WORD *)&v84[8] = 2048;
        *(double *)&v84[10] = v34 / v42;
        *(_WORD *)&v84[18] = 2048;
        *(double *)&v84[20] = v40 / v42;
        *(_WORD *)&v84[28] = 2048;
        *(double *)&v84[30] = v34;
        v85 = 2048;
        v86 = v42;
        v87 = 1024;
        v88 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d",  buf,  0x3Au);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_135;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 == -1) {
        goto LABEL_167;
      }
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      uint64_t v52 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        numConsecutiveVehicularSpeedObservations = self->_numConsecutiveVehicularSpeedObservations;
        lastElapsedTime = self->_lastElapsedTime;
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)v84 = numConsecutiveVehicularSpeedObservations;
        *(_WORD *)&v84[4] = 2048;
        *(double *)&v84[6] = v42;
        *(_WORD *)&v84[14] = 2048;
        *(double *)&v84[16] = lastElapsedTime;
        *(_WORD *)&v84[24] = 2048;
        *(double *)&v84[26] = v42 - lastElapsedTime;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: vehicular speed detected, consecutive observations, %d, elapsedTime, %f, lastElapsedTime, %f, delta, %f",  buf,  0x26u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101835500);
        }
        v74 = self->_lastElapsedTime;
        *(void *)v80 = __PAIR64__(self->_numConsecutiveVehicularSpeedObservations, 67109888);
        *(_WORD *)&v80[8] = 2048;
        *(double *)&v80[10] = v42;
        *(_WORD *)&v80[18] = 2048;
        *(double *)&v80[20] = v74;
        v81 = 2048;
        uint64_t v82 = v42 - v74;
        LODWORD(v79) = 38;
        v75 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: vehicular speed detected, consecutive observations, %d, elapsedTime, %f, lastElapsedT ime, %f, delta, %f",  v80,  *(double *)&v79,  *(double *)v80,  *(double *)&v80[8]);
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v75);
      }

      double v55 = self->_numConsecutiveVehicularSpeedObservations;
      if (v55 <= 0)
      {
        self->_numConsecutiveVehicularSpeedObservations = v55 + 1;
        self->_lastElapsedTime = v42;
        self->_lastDistanceMoved = v34;
        -[CLLocationDerivedSpeedEstimator _invalidateSpeedEstimate](self, "_invalidateSpeedEstimate");
        -[CLTimer setNextFireDelay:]( -[CLLocationDerivedSpeedEstimator scanTimer](self, "scanTimer"),  "setNextFireDelay:",  15.0);
        goto LABEL_75;
      }

      if (v42 - self->_lastElapsedTime < 15.0) {
        goto LABEL_74;
      }
      -[CLTimer setNextFireDelay:]( -[CLLocationDerivedSpeedEstimator scanTimer](self, "scanTimer"),  "setNextFireDelay:",  1.79769313e308);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v56 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        v57 = [a3 type];
        *(_DWORD *)buf = 134219264;
        *(double *)v84 = v46;
        *(_WORD *)&v84[8] = 2048;
        *(double *)&v84[10] = v34 / v42;
        *(_WORD *)&v84[18] = 2048;
        *(double *)&v84[20] = v40 / v42;
        *(_WORD *)&v84[28] = 2048;
        *(double *)&v84[30] = v34;
        v85 = 2048;
        v86 = v42;
        v87 = 1024;
        v88 = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d",  buf,  0x3Au);
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_135:
        -[CLLocationDerivedSpeedEstimator setPrevLoc:](self, "setPrevLoc:", a3);
        LOBYTE(v7) = 1;
        return v7;
      }

      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 == -1)
      {
LABEL_167:
        uint64_t v76 = qword_1019344F8;
        [a3 type];
        v77 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v76,  0LL,  "VEHICULAR: conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, e lapsedTime, %f, type, %d",  v80);
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLLocationDerivedSpeedEstimator _feedLocation:]", "%s\n", v77);
        goto LABEL_135;
      }
    }

    dispatch_once(&qword_1019344F0, &stru_101835500);
    goto LABEL_167;
  }

  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101835500);
  }
  v9 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
  {
    unint64_t v10 = [a3 type];
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v84 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "VEHICULAR: disqualified leeched location, type, %d",  buf,  8u);
  }

  uint64_t v7 = sub_1002921D0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    v11 = qword_1019344F8;
    [a3 type];
    v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  1LL,  "VEHICULAR: disqualified leeched location, type, %d",  v80);
    goto LABEL_29;
  }

  return v7;
}

        if (!a3) {
          goto LABEL_54;
        }
      }

      sub_100DAEDCC(v30 + 2328, v16 + 32, (double *)(v16 + 56), v4);
      v24 = sub_1003F9708((uint64_t **)(v30 + 5928), v16);
LABEL_59:
      double v16 = (uint64_t)v24;
    }

    while (v24 != v17);
  }

  sub_1000229D4((uint64_t)&v37, v38[0]);
}
        }
      }
    }
  }

  return HIDWORD(v35);
}

  BOOL v13 = *(void *)(v5 + 56);
  if (!v13) {
    BOOL v13 = *(void *)(qword_1019A11B8 + 56);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v13,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }

  double v16 = *(_DWORD *)(a2 + 24);
  a1[37] |= 0x10u;
  a1[6] = v16;
  v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x20) != 0) {
    goto LABEL_53;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_54:
  unsigned int v18 = *(_DWORD *)(a2 + 32);
  a1[37] |= 0x40u;
  a1[8] = v18;
  v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 36);
    a1[37] |= 0x80u;
    a1[9] = v6;
    v5 = *(_DWORD *)(a2 + 148);
  }

  result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v5[17],  a2,  a4);
  v6 = v5[37];
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

          if (*((_DWORD *)v8 + 70) == v156)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101847D40);
            }
            v32 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              else {
                v33 = v8[5];
              }
              sub_1000392EC((uint64_t)v163, v33 + 1);
              if (v165[9] >= 0) {
                v34 = v163;
              }
              else {
                v34 = *(_BYTE **)v163;
              }
              if (v33)
              {
                else {
                  unint64_t v35 = (const void *)v8[4];
                }
                memmove(v34, v35, v33);
              }

              *(_WORD *)&v34[v33] = 47;
              v36 = *((char *)v8 + 79);
              if (v36 >= 0) {
                double v37 = (const std::string::value_type *)(v8 + 7);
              }
              else {
                double v37 = (const std::string::value_type *)v8[7];
              }
              if (v36 >= 0) {
                double v38 = *((unsigned __int8 *)v8 + 79);
              }
              else {
                double v38 = v8[8];
              }
              double v39 = std::string::append((std::string *)v163, v37, v38);
              double v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = v39->__r_.__value_.__l.__cap_;
              *(_OWORD *)__p = v40;
              v39->__r_.__value_.__l.__size_ = 0LL;
              v39->__r_.__value_.__l.__cap_ = 0LL;
              v39->__r_.__value_.__r.__words[0] = 0LL;
              if ((v165[9] & 0x80000000) != 0) {
                operator delete(*(void **)v163);
              }
              double v41 = __p;
              if (__p[23] < 0) {
                double v41 = *(_BYTE **)__p;
              }
              v42 = *((_DWORD *)v8 + 70) + 1;
              uint64_t v43 = "---";
              if (v42 <= 4) {
                uint64_t v43 = off_101847F50[v42];
              }
              v44 = "---";
              *(_DWORD *)v163 = v153.n128_u32[0];
              *(void *)&v163[4] = v41;
              v164 = 2081;
              *(void *)v165 = v43;
              *(_WORD *)&v165[8] = 2081;
              *(void *)&v165[10] = v44;
              v166 = 1026;
              v167 = a3;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "notifyFenceEntryExitForAuthorizedFence,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private} s,client,%{public}d",  v163,  0x26u);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(v163, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              double v55 = qword_101934878;
              sub_10065EF44((const void **)v8 + 4, &v157);
              v56 = &v157;
              if ((v157.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v56 = (std::string *)v157.__r_.__value_.__r.__words[0];
              }
              v57 = *((_DWORD *)v8 + 70) + 1;
              v58 = "---";
              if (v57 <= 4) {
                v58 = off_101847F50[v57];
              }
              v59 = "---";
              *(_DWORD *)__p = v153.n128_u32[0];
              *(void *)&__p[4] = v56;
              *(_WORD *)&__p[12] = 2081;
              *(void *)&__p[14] = v58;
              *(_WORD *)&__p[22] = 2081;
              *(void *)&__p[24] = v59;
              v159 = 1026;
              v160 = a3;
              LODWORD(v152) = 38;
              _os_log_send_and_compose_impl( 2LL,  0LL,  v163,  1628LL,  &_mh_execute_header,  v55,  2LL,  "notifyFenceEntryExitForAuthorizedFence,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private} s,client,%{public}d",  __p,  v152);
              uint64_t v61 = v60;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::Fe nceStatus, int, const std::string &)",  "%s\n",  v61);
              if (v61 != v163) {
                free(v61);
              }
            }

            sub_100662C50(a1, (uint64_t)(v8 + 4), &v156, (__int128 *)(v8 + 39), a3);
          }

          goto LABEL_85;
        }
      }

  memset(&v74, 0, sizeof(v74));
  sub_1002F0B04(buf);
  unint64_t v35 = sub_1002A8560(*(uint64_t *)buf, "EEDControlURL", &v74);
  v36 = v35;
  double v37 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_56;
  }
  double v38 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    double v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v36) {
      goto LABEL_64;
    }
  }

  else
  {
LABEL_56:
    if (!v35) {
      goto LABEL_64;
    }
  }

  double v40 = (void *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), &v74);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  double v41 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    v42 = *(_DWORD *)a1;
    uint64_t v43 = (void *)(a1 + 112);
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)&buf[4] = v42;
    *(_WORD *)&buf[8] = 2081;
    *(void *)&buf[10] = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2Cfg,inst,%{public}d,overriding Control URL to %{private}s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v61 = *(_DWORD *)a1;
    v70 = 67240451;
    v71 = v61;
    v72 = 2081;
    uint64_t v73 = v40;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2Cfg,inst,%{public}d,overriding Control URL to %{private}s",  &v70,  v67);
    unint64_t v63 = (uint8_t *)v62;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v62);
    if (v63 != buf) {
      free(v63);
    }
  }

  v23 = *(void *)(a1 + 40);
  if (!v23) {
    v23 = *(void *)(qword_1019A17B8 + 40);
  }
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100812F68(v23, a2);
  v25 = (int)v24;
  else {
    double v26 = 1;
  }
  v4 = (v4 + v25 + v26 + 1);
  v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_73;
    }
    goto LABEL_67;
  }

      ++v39;
    }

    v42 = (uint64_t *)v69;
    double v41 = v70;
    if (v69 == v70 || __p == v36) {
      goto LABEL_58;
    }
    while (1)
    {
      double v50 = (uint64_t *)__p;
      if (__p != v36) {
        break;
      }
LABEL_79:
      if (++v42 == v41) {
        goto LABEL_58;
      }
    }

    while ((sub_10084CBD8(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        double v41 = v70;
        v36 = v50;
        goto LABEL_79;
      }
    }

    goto LABEL_95;
  }

  v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_10084CE24((double *)v80.i64, (double *)(*v37++ + 32));
  while (v37 != v58);
  double v55 = v80;
  v56 = v81;
  if (sub_10084E2F8( (double *)v55.i64,  (uint64_t **)&v72,  (uint64_t **)&__p,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11))
  {
    if ((sub_10084E2F8((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v45 = (uint64_t *)v72;
      v44 = v73;
      if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (_BYTE *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          unint64_t v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              double v47 = (uint64_t *)v63;
              if (v63 != v46) {
                break;
              }
LABEL_69:
              if (++v45 == v44) {
                goto LABEL_70;
              }
            }

            while ((sub_10084CBD8(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                v44 = v73;
                unint64_t v46 = v47;
                goto LABEL_69;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10084E2F8((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

      ++v40;
    }

    uint64_t v43 = (uint64_t *)v70;
    v42 = v71;
    if (v70 == v71 || __p == v37) {
      goto LABEL_58;
    }
    while (1)
    {
      double v51 = (uint64_t *)__p;
      if (__p != v37) {
        break;
      }
LABEL_79:
      if (++v43 == v42) {
        goto LABEL_58;
      }
    }

    while ((sub_10084CBD8(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        v42 = v71;
        double v37 = v51;
        goto LABEL_79;
      }
    }

    goto LABEL_95;
  }

  v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_10084CE24((double *)v81.i64, (double *)(*v38++ + 32));
  while (v38 != v59);
  v56 = v81;
  v57 = v82;
  if (sub_10084DB1C(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_10084DB1C(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      unint64_t v46 = (uint64_t *)v73;
      v45 = v74;
      if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (_BYTE *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          double v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              v48 = (uint64_t *)v64;
              if (v64 != v47) {
                break;
              }
LABEL_69:
              if (++v46 == v45) {
                goto LABEL_70;
              }
            }

            while ((sub_10084CBD8(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                v45 = v74;
                double v47 = v48;
                goto LABEL_69;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10084DB1C(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

          v28 = v8[8];
          uint64_t v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              result = sub_10085FD88(v5);
              unint64_t v29 = v43++;
            }

            while (v29 < -1);
          }

          v30 = v8[33];
          v44 = -1LL;
          if ((v30 & 0x8000000000000000LL) == 0)
          {
            do
            {
              result = sub_10085FD88(v5);
              ++v44;
            }

            while (v44 < v30);
          }
        }

        if (*(_BYTE *)(v5 + 16)) {
          break;
        }
        v8 += 25;
        uint64_t v7 = v4 + 25;
        if (v4 + 25 == a3) {
          goto LABEL_65;
        }
      }
    }
  }

  return result;
}

          v28 = v8[18];
          uint64_t v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              result = sub_100863F30(v5);
              unint64_t v29 = v43++;
            }

            while (v29 < -1);
          }

          v30 = v8[43];
          v44 = -1LL;
          if ((v30 & 0x8000000000000000LL) == 0)
          {
            do
            {
              result = sub_100863F30(v5);
              ++v44;
            }

            while (v44 < v30);
          }
        }

        if (*(_BYTE *)(v5 + 16)) {
          break;
        }
        v8 += 25;
        uint64_t v7 = v4 + 25;
        if (v4 + 25 == a3) {
          goto LABEL_65;
        }
      }
    }
  }

  return result;
}

      ++v39;
    }

    v42 = (double **)v69;
    double v41 = v70;
    if (v69 == v70 || __p == v36) {
      goto LABEL_58;
    }
    while (1)
    {
      double v50 = (double **)__p;
      if (__p != v36) {
        break;
      }
LABEL_79:
      if (++v42 == v41) {
        goto LABEL_58;
      }
    }

    while ((sub_10085A3D8(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        double v41 = v70;
        v36 = v50;
        goto LABEL_79;
      }
    }

    goto LABEL_95;
  }

  v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_10084CE24((double *)v80.i64, *v37++ + 4);
  while (v37 != v58);
  double v55 = v80;
  v56 = v81;
  if (sub_10085A614( (double *)v55.i64,  (uint64_t **)&v72,  (uint64_t **)&__p,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11))
  {
    if ((sub_10085A614((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v45 = (double **)v72;
      v44 = v73;
      if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (_BYTE *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          unint64_t v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              double v47 = (double **)v63;
              if (v63 != v46) {
                break;
              }
LABEL_69:
              if (++v45 == v44) {
                goto LABEL_70;
              }
            }

            while ((sub_10085A3D8(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                v44 = v73;
                unint64_t v46 = v47;
                goto LABEL_69;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10085A614((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

      ++v40;
    }

    uint64_t v43 = (double **)v70;
    v42 = v71;
    if (v70 == v71 || __p == v37) {
      goto LABEL_58;
    }
    while (1)
    {
      double v51 = (double **)__p;
      if (__p != v37) {
        break;
      }
LABEL_79:
      if (++v43 == v42) {
        goto LABEL_58;
      }
    }

    while ((sub_10085A3D8(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        v42 = v71;
        double v37 = v51;
        goto LABEL_79;
      }
    }

    goto LABEL_95;
  }

  v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_10084CE24((double *)v81.i64, *v38++ + 4);
  while (v38 != v59);
  v56 = v81;
  v57 = v82;
  if (sub_100859BFC(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_100859BFC(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      unint64_t v46 = (double **)v73;
      v45 = v74;
      if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (_BYTE *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          double v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              v48 = (double **)v64;
              if (v64 != v47) {
                break;
              }
LABEL_69:
              if (++v46 == v45) {
                goto LABEL_70;
              }
            }

            while ((sub_10085A3D8(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                v45 = v74;
                double v47 = v48;
                goto LABEL_69;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_100859BFC(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

        if (v19 != __p) {
          free(v19);
        }
LABEL_75:
        v3 += 174;
        if (v3 == v4) {
          goto LABEL_85;
        }
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101868368);
      }
      uint64_t v20 = (os_log_s *)p_vtable[267];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        sub_100F57510(v3, __p);
        uint64_t v21 = __p;
        if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v21 = (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)unint64_t v63 = 136446210;
        *(void *)&v63[4] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "CellQuery, skip, invalid cell, %{public}s, #CloneMe",  v63,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_75;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101868368);
      }
      v22 = p_vtable[267];
      sub_100F57510(v3, (std::stringbuf::string_type *)v63);
      v23 = v63;
      if (SBYTE3(v65) < 0) {
        v23 = *(_BYTE **)v63;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
      LODWORD(v55) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v22,  0LL,  "CellQuery, skip, invalid cell, %{public}s, #CloneMe",  &buf,  v55);
      double v19 = v24;
      if (SBYTE3(v65) < 0) {
        operator delete(*(void **)v63);
      }
LABEL_51:
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()",  "%s\n",  (const char *)v19);
      goto LABEL_52;
    }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v23 = *(void *)(a1 + 72);
      if (!v23) {
        v23 = *(void *)(qword_1019A1A90 + 72);
      }
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A4AD8C(v23, a2);
      v25 = (int)v24;
      else {
        double v26 = 1;
      }
      LODWORD(v4) = v4 + v25 + v26 + 1;
      v3 = *(_DWORD *)(a1 + 112);
    }

    if ((v3 & 0x200) != 0) {
      LODWORD(v4) = v4 + 5;
    }
    if ((v3 & 0x400) != 0)
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 84);
      if ((v27 & 0x80000000) != 0)
      {
        v28 = 11;
      }

      else if (v27 >= 0x80)
      {
        v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
        v3 = *(_DWORD *)(a1 + 112);
      }

      else
      {
        v28 = 2;
      }

      LODWORD(v4) = v28 + v4;
    }

    if ((v3 & 0x800) != 0)
    {
      unint64_t v29 = *(void *)(a1 + 88);
      if (!v29) {
        unint64_t v29 = *(void *)(qword_1019A1A90 + 88);
      }
      v30 = *(unsigned __int8 *)(v29 + 32);
      double v31 = (v30 << 31 >> 31) & 9;
      if ((v30 & 2) != 0) {
        v31 += 9;
      }
      if ((v30 & 4) != 0) {
        v31 += 2;
      }
      if (*(_BYTE *)(v29 + 32)) {
        v32 = v31;
      }
      else {
        v32 = 0;
      }
      *(_DWORD *)(v29 + 28) = v32;
      LODWORD(v4) = v4 + v32 + 2;
      v3 = *(_DWORD *)(a1 + 112);
    }

    if ((v3 & 0x1000) != 0) {
      v4 = (v4 + 2);
    }
    else {
      v4 = v4;
    }
    if ((v3 & 0x2000) != 0)
    {
      v33 = *(void *)(a1 + 96);
      if (!v33) {
        v33 = *(void *)(qword_1019A1A90 + 96);
      }
      v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A48258(v33);
      v36 = (int)v34;
      else {
        double v37 = 1;
      }
      v4 = (v4 + v36 + v37 + 1);
    }
  }

  *(_DWORD *)(a1 + 108) = v4;
  return v4;
}

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  *(_DWORD *)(v5 + 148),  (int)a2,  a4);
  unint64_t v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x100000) == 0)
  {
LABEL_28:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }

    unsigned int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 92);
    if ((v18 & 0x80000000) != 0)
    {
      double v19 = 10;
    }

    else if (v18 >= 0x80)
    {
      double v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      double v19 = 1;
    }

    v5 += v19 + 1;
    if ((v3 & 0x1000) == 0)
    {
LABEL_37:
      if ((v3 & 0x2000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_64;
    }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_96;
  }
  if ((v3 & 0x100) != 0)
  {
    unint64_t v29 = *(void *)(a1 + 64);
    if (!v29) {
      unint64_t v29 = *(void *)(qword_1019A1C80 + 64);
    }
    v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DD99C(v29);
    double v31 = (int)v30;
    else {
      v32 = 1;
    }
    v5 = (v5 + v31 + v32 + 1);
    v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 0x200) == 0)
    {
LABEL_55:
      if ((v3 & 0x400) == 0) {
        goto LABEL_56;
      }
      goto LABEL_72;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_55;
  }

  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 104);
  if ((v33 & 0x80000000) != 0)
  {
    v34 = 11;
  }

  else if (v33 >= 0x80)
  {
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    v3 = *(_DWORD *)(a1 + 112);
  }

  else
  {
    v34 = 2;
  }

  v5 = (v34 + v5);
  if ((v3 & 0x400) == 0)
  {
LABEL_56:
    if ((v3 & 0x800) == 0) {
      goto LABEL_57;
    }
    goto LABEL_78;
  }

  double v16 = *(void *)(v5 + 80);
  if (!v16) {
    double v16 = *(void *)(qword_1019A1CE8 + 80);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v16,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }

  int v12 = *(void *)(v5 + 64);
  if (!v12) {
    int v12 = *(void *)(qword_1019A1D38 + 64);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_58;
  }

  uint64_t v20 = sub_100F1F594((double *)a2);
  if (v20 >= 10.0) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 10.0;
  }
  v99 = v21;
  if (v21 < 50.0 && v10 == 0)
  {
    if (fabs(*(double *)(a2 + 256)) <= 75.0 && fabs(*(double *)(a2 + 248)) <= 150.0)
    {
      unint64_t v10 = 0;
    }

    else
    {
      v103 = 1;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881720);
        }
        v23 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v24 + 1;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          unint64_t v79 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)v104 = 67240448;
          *(_DWORD *)&v104[4] = v79;
          *(_WORD *)&v104[8] = 1026;
          *(_DWORD *)&v104[10] = v79 + 1;
          LODWORD(v94) = 14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  v104,  v94);
          v81 = (char *)v80;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v80);
          if (v81 != buf) {
            free(v81);
          }
        }
      }

      ++*(_DWORD *)(a1 + 648);
      unint64_t v10 = 1;
    }
  }

  v25 = (_OWORD *)(a1 + 120);
  double v26 = *(double *)(a1 + 128);
  v27 = *(double *)(a2 + 8) - v26;
  if (v26 == 0.0) {
    v27 = 0.0;
  }
  if (v27 >= 0.0) {
    v28 = v27;
  }
  else {
    v28 = 0.0;
  }
  if (v28 <= 4.9)
  {
    if (v28 <= 75.0) {
      goto LABEL_80;
    }
  }

  else if (v28 <= 75.0 && *(_BYTE *)(a2 + 228) != 0)
  {
LABEL_80:
    v30 = *(unsigned __int8 *)(a1 + 384);
    double v31 = 10000.0;
    if (*(_BYTE *)(a1 + 384) && *(_BYTE *)(a1 + 481))
    {
      if (*(_BYTE *)(a2 + 361)) {
        v32 = a3;
      }
      else {
        v32 = 1;
      }
      if (v32) {
        double v31 = 10000.0;
      }
      else {
        double v31 = 40000.0;
      }
    }

    v98 = *(double *)(a2 + 256) * *(double *)(a2 + 256) + *(double *)(a2 + 248) * *(double *)(a2 + 248);
    if (v98 > v31)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881720);
        }
        v33 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(void *)&buf[4] = sqrt(v31);
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          *(_DWORD *)v104 = 134349312;
          *(void *)&v104[4] = sqrt(v31);
          *(_WORD *)&v104[12] = 1026;
          *(_DWORD *)&v104[14] = a3;
          LODWORD(v94) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d",  v104,  v94);
          v83 = (char *)v82;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v82);
          if (v83 != buf) {
            free(v83);
          }
        }
      }

      v34 = 0;
      *(_BYTE *)(a1 + 652) = 0;
      goto LABEL_173;
    }

    if (*(_BYTE *)(a1 + 652))
    {
      uint64_t v43 = *(double *)(a2 + 232);
      if (!v30) {
        goto LABEL_120;
      }
      if (v43 > 13.0)
      {
        v44 = *(double *)(a1 + 216);
        v45 = v44 <= 0.0 ? *(double *)(a2 + 96) : (v44 + *(double *)(a2 + 96)) * 0.5;
        if (sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 272),  *(double *)(a1 + 280),  *(double *)(a2 + 152),  *(double *)(a2 + 160),  *(double *)(a2 + 72))
           - v28 * v45 > 100.0)
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881720);
            }
            unint64_t v46 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              double v47 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v47;
              *(_WORD *)&buf[8] = 2050;
              *(double *)&buf[10] = (double)v47 + 18.0;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f",  buf,  0x12u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_101881720);
              }
              v89 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)v104 = 67240448;
              *(_DWORD *)&v104[4] = v89;
              *(_WORD *)&v104[8] = 2050;
              *(double *)&v104[10] = (double)v89 + 18.0;
              LODWORD(v94) = 18;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f",  v104,  v94);
              v91 = (char *)v90;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v90);
              if (v91 != buf) {
                free(v91);
              }
            }
          }

          *(_DWORD *)(a1 + 648) += 18;
          unint64_t v10 = 1;
          v103 = 1;
        }
      }

      if (*(_BYTE *)(a1 + 652))
      {
        uint64_t v43 = *(double *)(a2 + 232);
LABEL_120:
        if (v43 <= 70.0)
        {
          if (*(int *)(a1 + 648) < 18)
          {
            if (!*(_BYTE *)(a2 + 265) || (v56 = v20 * 3.5, fabs(*(double *)(a2 + 256)) <= v56))
            {
              if (v43 < 6.5 && !v10)
              {
                *(_DWORD *)(a1 + 648) = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1019348B0 != -1) {
                    dispatch_once(&qword_1019348B0, &stru_101881720);
                  }
                  int v68 = (os_log_s *)qword_1019348B8;
                  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                  {
                    v69 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)buf = 67240192;
                    *(_DWORD *)&buf[4] = v69;
                    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "CLMM,reseting offRoadCount,%{public}d",  buf,  8u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_101881720);
                    }
                    v70 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)v104 = 67240192;
                    *(_DWORD *)&v104[4] = v70;
                    LODWORD(v94) = 8;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,reseting offRoadCount,%{public}d",  v104,  v94);
                    v72 = (char *)v71;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v71);
                    if (v72 != buf) {
                      free(v72);
                    }
                  }
                }
              }

              goto LABEL_166;
            }

            if (!*(_BYTE *)(a1 + 96)) {
              goto LABEL_155;
            }
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881720);
            }
            v57 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              v58 = *(void *)(a2 + 256);
              *(_DWORD *)buf = 134349312;
              *(void *)&buf[4] = v58;
              *(_WORD *)&buf[12] = 2050;
              *(double *)&buf[14] = v56;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf",  buf,  0x16u);
            }

            if (!sub_1002921D0(115, 2))
            {
LABEL_155:
              *(_BYTE *)(a1 + 652) = 0;
LABEL_166:
              if (*(_BYTE *)(a1 + 841))
              {
                v34 = *(_BYTE *)(a1 + 652);
                else {
                  *(_BYTE *)(a1 + 841) = 0;
                }
              }

              else
              {
                *(void *)buf = 0x4079000000000000LL;
                *(void *)v104 = 0x3FE0000000000000LL;
                *(_BYTE *)(a1 + 841) = sub_100D53194( a1,  a2,  &v98,  (double *)buf,  (double *)v104,  (_BYTE *)&v100 + 1,  &v100,  &v99,  &v102,  &v101,  &v103);
                v34 = *(_BYTE *)(a1 + 652);
              }

      v30 = v10 + v11 + v12 + v13 + v14;
      *a4 = v14 / v30 * 100.0;
      *a5 = v13 / v30 * 100.0;
      *a6 = v12 / v30 * 100.0;
      *a7 = v11 / v30 * 100.0;
      result = v10 / v30 * 100.0;
      *a8 = result;
      return result;
    }

  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "maxAbsZ", *(float *)(a1 + 68));
  v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 132), 0xEu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }

  unint64_t v10 = *(void *)(a2 + 176);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(void *)(a1 + 176) = v10;
  v4 = *v3;
  if ((*v3 & 0x8000000000LL) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfDecimatedLowFrequencyFFT", *(void *)(a1 + 40));
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(void *)(v3 + 320), 0x2Du);
  v5 = *v4;
  if ((*v4 & 0x40000000000LL) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000LL) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "maxNumQuiescentBins", *(_DWORD *)(a1 + 68));
  v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xFu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }

  v27 = *(void *)(a2 + 360);
  v10 |= 0x20000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 360) = v27;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }

          *(void *)(a1 + 8) = v25;
        }

        else
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          v2 = *((void *)this + 1);
        }

        goto LABEL_53;
      }

      *(_BYTE *)(a1 + 32) |= 4u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }

    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((void *)this + 2);
  }

  return i == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "timestampAccel", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0) {
    goto LABEL_53;
  }
LABEL_26:
  if ((v5 & 8) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "timestampPrediction", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x19u);
  if ((*(_DWORD *)(v3 + 128) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x1Au);
  }
  return result;
}

  v24 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 212) |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v24;
  unint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x100) == 0)
  {
LABEL_23:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "lastCompleted15sWindowMean", *(float *)(a1 + 132));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0xCu);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  result = *(float *)(a2 + 28);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "rawRmsMean", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 20), 0x17u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  int v12 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 152) = v3;
  *(void *)(a1 + 8) = v12;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 2) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "odr", *(_DWORD *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x15u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  v24 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 132) = v3;
  *(void *)(result + 24) = v24;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x2000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "streamStartSpeed", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xCFu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 104);
  v3 |= 0x40000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 104) = v20;
  v2 = *(void *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "metaCountOfFreefallImpactPassed", *(_DWORD *)(a1 + 108));
  v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x12u);
  v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "chaosOrSaturationMet", *(_BYTE *)(a1 + 157));
  v5 = *(void *)(a1 + 172);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_7;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 5u);
  v4 = *(void *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }

        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }

      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        v2 = *((void *)this + 1);
        goto LABEL_53;
      }

      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        v2 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }

    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((void *)this + 2);
  }

  return i == 0;
}

        *(_DWORD *)(a1 + 24) = v31;
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v34 = *((void *)this + 1);
        if (v34 <= 0xFFFFFFFFFFFFFFF7LL && v34 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v34);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v21 = operator new(0x30uLL);
        v24 = sub_10119AB68((uint64_t)v21);
        v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t, double))(*(void *)v25 + 8LL))(v25, v24);
          uint64_t v21 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v41, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v41);
      }

      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      v2 = *((void *)this + 1);
      v3 = *((void *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    unint64_t v15 = 0;
    double v16 = 0;
    v11 = 0LL;
    if (v2 > v3) {
      v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unsigned int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0LL;
        goto LABEL_20;
      }
    }

    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 72));
  v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 132), 0xDu);
  v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "signalRateNoiseMarginKcpss", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }

  double v19 = *(_DWORD *)(a2 + 128);
  v3 |= 0x2000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 128) = v19;
  v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "pearlSessionOnTs", *(void *)(a1 + 32));
  v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x11u);
  v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }

  v9 = *(_BYTE *)(a2 + 133);
  v3 |= 0x40000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 133) = v9;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "qy", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 132), 0x14u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  BOOL v13 = *(_DWORD *)(a2 + 144);
  v3 |= 0x400000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 144) = v13;
  v2 = *(void *)(a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "planarChaosAtMaxEnergy", *(float *)(a1 + 120));
  v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0xBu);
  v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }

  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ95", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 168), 0x15u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_54:
    result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 216) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2Mean", *(double *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000000) != 0) {
    goto LABEL_53;
  }
LABEL_26:
  if ((v5 & 0x2000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P95", *(double *)(a1 + 208));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::write(this, *(double *)(v3 + 96), 0x19u);
  if ((*(_DWORD *)(v3 + 216) & 0x1000) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x1Au);
  }
  return result;
}

  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 64));
  if ((*(_DWORD *)(a1 + 152) & 0x80000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "recordId", *(_DWORD *)(a1 + 140));
LABEL_27:
  if (*(void *)(a1 + 72)) {
    PB::TextFormatter::format(this, "sourceId");
  }
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 0x80) == 0) {
      goto LABEL_31;
    }
LABEL_55:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 152) & 0x100000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x80) != 0) {
    goto LABEL_55;
  }
LABEL_31:
  if ((v9 & 0x100000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x16u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x200) == 0)
  {
LABEL_29:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  result = *(float *)(a2 + 108);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 108) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_54:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 116) = v3 | 2;
    *(float *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "pressureFFTBin6", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) != 0) {
    goto LABEL_53;
  }
LABEL_26:
  if ((v5 & 1) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x19u);
  if ((*(_DWORD *)(v3 + 116) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 0x1Au);
  }
  return result;
}

          *(_DWORD *)(a1 + 24) = v25;
        }

        else
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          v2 = *((void *)this + 1);
        }

        goto LABEL_53;
      }

      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }

    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((void *)this + 2);
  }

  return i == 0;
}

        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }

      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        v2 = *((void *)this + 1);
        goto LABEL_53;
      }

      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        v2 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }

    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((void *)this + 2);
  }

  return i == 0;
}

        *(_DWORD *)(a1 + 16) = v34;
      }

      else if ((_DWORD)v21 == 1)
      {
        v22 = (void **)operator new(0x18uLL);
        v22[1] = 0LL;
        v22[2] = 0LL;
        __n128 *v22 = 0LL;
        __p = 0LL;
        v23 = *v8;
        *v8 = v22;
        if (v23)
        {
          sub_10058A4FC((int)v8, v23);
          v24 = (void **)__p;
          __p = 0LL;
          if (v24) {
            sub_10058A4FC((int)&__p, v24);
          }
        }

        PB::Reader::read(this, *v8);
      }

      else
      {
        result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      v2 = *((void *)this + 1);
      v3 = *((void *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    double v16 = 0;
    uint64_t v17 = 0;
    int v12 = 0LL;
    if (v2 > v3) {
      v3 = v2;
    }
    while (v3 != v2)
    {
      unsigned int v18 = v2 + 1;
      double v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        int v12 = 0LL;
        goto LABEL_21;
      }
    }

    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  v6 = *(_BYTE *)(a2 + 181);
  v3 |= 0x100000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 181) = v6;
  v2 = *(void *)(a2 + 184);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "cycleTimeEntropy", *(float *)(a1 + 44));
  v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 64), 6u);
  v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000000LL) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }

  double v26 = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v26;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "vehicularMotionHint", *(_BYTE *)(a1 + 113));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x18u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }

        *(_DWORD *)(a1 + 24) = v26;
      }

      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      v2 = *((void *)this + 1);
      v3 = *((void *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    unint64_t v15 = 0;
    double v16 = 0;
    v11 = 0LL;
    if (v2 > v3) {
      v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unsigned int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0LL;
        goto LABEL_20;
      }
    }

    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double v31 = *(_DWORD *)(a2 + 144);
  v5 |= 0x40000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 144) = v31;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }

  uint64_t v21 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 96) = v21;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x13u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 92);
  v5 |= 0x2000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 92) = v20;
  v4 = *(void *)(a2 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "isVehicular", *(_DWORD *)(a1 + 92));
  v5 = *(void *)(a1 + 192);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xAu);
  v4 = *(void *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }

      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }

    if ((_DWORD)v20 == 2)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }

    else
    {
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        v2 = *((void *)this + 1);
        goto LABEL_53;
      }

      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        v2 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }

    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((void *)this + 2);
  }

  return i == 0;
}

  uint64_t v21 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 36) = v21;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xCu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0) {
    goto LABEL_53;
  }
LABEL_14:
  if ((v4 & 0x80) != 0) {
LABEL_15:
  }
    result = PB::Writer::write(this, *(float *)(v3 + 92), 0xEu);
LABEL_16:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    result = PB::Writer::write(this, v7, 0xFu);
  }

  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    result = PB::Writer::write(this, v10, 0x10u);
  }

  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 157), 0x11u);
    v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_57;
    }
  }

  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 152), 0x12u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }

  v11 = *(_DWORD *)(a2 + 204);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 204) = v11;
  v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "isFormBasedStrideLength", *(_BYTE *)(a1 + 219));
  v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0x10u);
  v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

  v25 = *(_DWORD *)(a2 + 172);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v25;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }

  PB::TextFormatter::format(this, "kalmanProcessNoise", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 0x17u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }

  v27 = *(void *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 184) = v27;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0) {
      return result;
    }
LABEL_54:
    unint64_t v29 = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(result + 212) = v3 | 0x2000000;
    *(_BYTE *)(result + 208) = v29;
    return result;
  }

  PB::TextFormatter::format(this, "swingAccelTZMean", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800000) != 0) {
    goto LABEL_53;
  }
LABEL_26:
  if ((v5 & 0x1000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::write(this, *(double *)(v3 + 160), 0x19u);
  if ((*(_DWORD *)(v3 + 212) & 0x2000000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 208), 0x1Au);
  }
  return result;
}

void sub_100006B18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char *a22, uint64_t a23, uint64_t a24, char a25)
{
  a22 = &a25;
  sub_100006BC8((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_100006BB8(void *a1)
{
}

void sub_100006BC8(void ***a1)
{
  v2 = *a1;
  if (*v2)
  {
    sub_100006C08((uint64_t *)v2);
    operator delete(**a1);
  }
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_100006C08(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

void sub_100006C5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100006DE4((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100006E1C((void *)a1, v11);
    int v12 = sub_100006E6C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_100006F9C((int)&v20, a2, v13, v9);
    int v12 = sub_100006E6C(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }

  sub_100006F9C((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      double v19 = *(void **)(v17 - 24);
      v17 -= 24LL;
      unsigned int v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }

      uint64_t v16 = v17;
    }

    while (v17 != v15);
  }

  *(void *)(a1 + 8) = v15;
}

void sub_100006DD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100006DDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100006DE4(uint64_t *a1)
{
  if (*a1)
  {
    sub_100006C08(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

char *sub_100006E1C(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100007008();
  }
  result = (char *)sub_10000701C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_100006E6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      sub_100007590(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100006F1C((uint64_t)v8);
  return v4;
}

void sub_100006F08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100006F1C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100006F50(a1);
  }
  return a1;
}

void sub_100006F50(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24LL;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }

      uint64_t v1 = v3;
    }

    while (v3 != v2);
  }

uint64_t sub_100006F9C(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v5 += 24LL;
      a4 += 24;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void sub_100007008()
{
}

void *sub_10000701C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000070D4();
  }
  return operator new(24 * a2);
}

void sub_100007060(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000070B0(exception, a1);
}

void sub_10000709C(_Unwind_Exception *a1)
{
}

std::logic_error *sub_1000070B0(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1000070D4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_1000070FC(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10000717C(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_100007160(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10000717C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100007008();
  }
  result = (char *)sub_1000071BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1000071BC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000070D4();
  }
  return operator new(8 * a2);
}

void *sub_1000071F0(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10000717C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_100007248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100007264(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_100007590(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_100007378(a1, v14);
  uint64_t v12 = a1[1];
  sub_100007504((uint64_t)v14);
  return v12;
}

void sub_100007364(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100007378(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000073EC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000073EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_10000748C((uint64_t)v11);
  return v9;
}

uint64_t sub_10000748C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000074C0(a1);
  }
  return a1;
}

void sub_1000074C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }

    v1 += 24LL;
  }

uint64_t sub_100007504(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100007538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

void *sub_100007590(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000717C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1000075EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

__n128 *sub_100007608(__n128 *a1, __n128 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100007664(a3, v4);
      unint64_t v4 = (__n128 *)((char *)v4 + 24);
      a3 += 24LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

__n128 sub_100007664(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  return result;
}

float sub_1000076B4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  unint64_t v13 = v12 + ((v11 + v11 * v11) >> 1);
  return result;
}

float sub_1000076F4( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float v10 = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float result = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (v10 >= 3.4028e38)
  {
    if (result >= 3.4028e38) {
      return 3.4028e38;
    }
  }

  else if (result >= 3.4028e38)
  {
    return v10;
  }

  else
  {
    return (float)((float)(result * (float)a5) + (float)((float)a3 * v10)) / (float)(a5 + a3);
  }

  return result;
}

float sub_100007784( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float v13 = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (result >= 3.4028e38)
  {
    float result = 3.4028e38;
    if (v13 < 3.4028e38) {
      return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
    }
  }

  else if (v13 < 3.4028e38 && result < v13)
  {
    return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  }

  return result;
}

char **sub_1000077F4(char **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_100007D54((void **)a1, *a2 - 1);
  v56 = 0LL;
  unint64_t v57 = 0LL;
  double v55 = (uint64_t *)&v56;
  if (*a2)
  {
    v54 = v5;
    unint64_t v6 = 0LL;
    do
    {
      *(void *)buf = v6;
      *(void *)v59 = 1LL;
      sub_1000083D0(&v55, &v56, (unint64_t *)buf, buf);
      ++v6;
    }

    while (v6 < *a2);
    if (v57 >= 2)
    {
      uint64_t v53 = a3;
      do
      {
        unint64_t v7 = v55;
        if (v55 == (uint64_t *)&v56)
        {
          uint64_t v9 = 0LL;
          unint64_t v8 = 0LL;
          float v11 = INFINITY;
        }

        else
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          float v11 = INFINITY;
          do
          {
            unint64_t v12 = (uint64_t *)v7[1];
            float v13 = v12;
            __int128 v14 = v7;
            if (v12)
            {
              do
              {
                uint64_t v15 = v13;
                float v13 = (uint64_t *)*v13;
              }

              while (v13);
            }

            else
            {
              do
              {
                uint64_t v15 = (uint64_t *)v14[2];
                BOOL v16 = *v15 == (void)v14;
                __int128 v14 = v15;
              }

              while (!v16);
            }

            if (v15 != (uint64_t *)&v56)
            {
              unint64_t v17 = v7[4];
              do
              {
                unint64_t v18 = v15[4];
                if (v17 <= v18) {
                  uint64_t v19 = v15[4];
                }
                else {
                  uint64_t v19 = v7[4];
                }
                if (v17 < v18) {
                  unint64_t v18 = v7[4];
                }
                unint64_t v10 = a2[1];
                if (*(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1))) < v11)
                {
                  float v11 = *(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1)));
                  uint64_t v9 = v15;
                  unint64_t v8 = v7;
                }

                char v20 = (uint64_t *)v15[1];
                if (v20)
                {
                  do
                  {
                    char v21 = v20;
                    char v20 = (uint64_t *)*v20;
                  }

                  while (v20);
                }

                else
                {
                  do
                  {
                    char v21 = (uint64_t *)v15[2];
                    BOOL v16 = *v21 == (void)v15;
                    uint64_t v15 = v21;
                  }

                  while (!v16);
                }

                uint64_t v15 = v21;
              }

              while (v21 != (uint64_t *)&v56);
            }

            if (v12)
            {
              do
              {
                v22 = v12;
                unint64_t v12 = (uint64_t *)*v12;
              }

              while (v12);
            }

            else
            {
              do
              {
                v22 = (uint64_t *)v7[2];
                BOOL v16 = *v22 == (void)v7;
                unint64_t v7 = v22;
              }

              while (!v16);
            }

            unint64_t v7 = v22;
          }

          while (v22 != (uint64_t *)&v56);
        }

        if (fabsf(v11) == INFINITY)
        {
          sub_101222E70();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm",  100,  "CLHierarchicalClustering");
          __break(1u);
        }

        v23 = (uint64_t *)v9[1];
        v24 = v9;
        if (v23)
        {
          do
          {
            v25 = v23;
            v23 = (uint64_t *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            v25 = (uint64_t *)v24[2];
            BOOL v16 = *v25 == (void)v24;
            v24 = v25;
          }

          while (!v16);
        }

        uint64_t v26 = v8[4];
        uint64_t v27 = v8[5];
        uint64_t v29 = v9[4];
        uint64_t v28 = v9[5];
        unint64_t v30 = (unint64_t)v5[1];
        unint64_t v31 = (unint64_t)v5[2];
        if (v30 >= v31)
        {
          v33 = *v5;
          uint64_t v34 = (uint64_t)(v30 - (void)*v5) >> 5;
          unint64_t v35 = v34 + 1;
          uint64_t v36 = v31 - (void)v33;
          if (v36 >> 4 > v35) {
            unint64_t v35 = v36 >> 4;
          }
          else {
            unint64_t v37 = v35;
          }
          double v38 = (char *)sub_10000835C((uint64_t)(v54 + 2), v37);
          double v40 = &v38[32 * v34];
          *(void *)double v40 = v26;
          *((void *)v40 + 1) = v29;
          *((float *)v40 + 4) = v11;
          *((void *)v40 + 3) = v28 + v27;
          v42 = *v54;
          double v41 = v54[1];
          uint64_t v43 = v40;
          if (v41 != *v54)
          {
            do
            {
              __int128 v44 = *((_OWORD *)v41 - 1);
              *((_OWORD *)v43 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 32;
              v41 -= 32;
            }

            while (v41 != v42);
            double v41 = *v54;
          }

          v32 = v40 + 32;
          __n128 *v54 = v43;
          v54[1] = v40 + 32;
          v54[2] = &v38[32 * v39];
          if (v41) {
            operator delete(v41);
          }
        }

        else
        {
          *(void *)unint64_t v30 = v26;
          *(void *)(v30 + 8) = v29;
          *(float *)(v30 + 16) = v11;
          v32 = (char *)(v30 + 32);
          *(void *)(v30 + 24) = v28 + v27;
        }

        v54[1] = v32;
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818730);
        }
        v45 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68290050;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v59 = 2082;
          *(void *)&v59[2] = "";
          __int16 v60 = 2050;
          uint64_t v61 = v26;
          __int16 v62 = 2050;
          uint64_t v63 = v29;
          __int16 v64 = 2050;
          double v65 = v11;
          __int16 v66 = 2050;
          uint64_t v67 = v28 + v27;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:dendrogram, left:%{public}lu, right:%{public}lu, dist:%{public}f,  size:%{public}lu}",  buf,  0x3Au);
        }

        *(void *)buf = v29;
        *(void *)v59 = v28 + v27;
        sub_1000087E8(&v55, v8);
        operator delete(v8);
        sub_1000087E8(&v55, v9);
        operator delete(v9);
        unint64_t v46 = v55;
        if (v55 != (uint64_t *)&v56)
        {
          do
          {
            sub_100007DF0(v53, (uint64_t)a2, v26, v27, v29, v28, v46[4], v46[5]);
            unint64_t v48 = v46[4];
            if (v48 <= *(void *)buf) {
              uint64_t v49 = *(void *)buf;
            }
            else {
              uint64_t v49 = v46[4];
            }
            if (v48 >= *(void *)buf) {
              unint64_t v48 = *(void *)buf;
            }
            *(_DWORD *)(a2[1] + 4 * (v48 + ((unint64_t)(v49 + v49 * v49) >> 1))) = v47;
            double v50 = (uint64_t *)v46[1];
            if (v50)
            {
              do
              {
                double v51 = v50;
                double v50 = (uint64_t *)*v50;
              }

              while (v50);
            }

            else
            {
              do
              {
                double v51 = (uint64_t *)v46[2];
                BOOL v16 = *v51 == (void)v46;
                unint64_t v46 = v51;
              }

              while (!v16);
            }

            unint64_t v46 = v51;
          }

          while (v51 != (uint64_t *)&v56);
        }

        sub_1000083D0(&v55, v25, (unint64_t *)buf, buf);
        uint64_t v5 = v54;
      }

      while (v57 > 1);
    }
  }

  sub_100008390((uint64_t)&v55, v56);
  return v5;
}

void sub_100007D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21)
{
  v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(exception_object);
}

void sub_100007D54(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    unint64_t v6 = (char *)sub_10000835C(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0LL];
    uint64_t v9 = &v6[32 * v8];
    float v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }

      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_100007DF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  v10[0] = a7;
  v10[1] = a8;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, void *, void *))(*(void *)v8 + 48LL))( v8,  a2,  v12,  v11,  v10);
}

uint64_t sub_100007E3C( uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, double a6)
{
  if (*a3 == a3[1]) {
    sub_101222FE0();
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818730);
  }
  unint64_t v12 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    __int16 v46 = 2082;
    int v47 = "";
    __int16 v48 = 2050;
    unint64_t v49 = a4;
    __int16 v50 = 2050;
    double v51 = a6;
    __int16 v52 = 2050;
    double v53 = *(double *)&a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:getClusterLabels, smallNodeSize:%{public}lu, distanceThresholdForSmallNode:%{pu blic}f, minNumClusters:%{public}lu}",  buf,  0x30u);
  }

  a2[1] = *a2;
  unint64_t v13 = ((a1[1] - *a1) >> 5) + 1;
  *(void *)buf = 0LL;
  sub_100008230((uint64_t)a2, v13, buf);
  uint64_t v14 = a1[1];
  uint64_t v15 = *a1;
  if (v14 == *a1) {
    return 1LL;
  }
  uint64_t v16 = a3[1];
  double v17 = *(float *)(v14 - 16);
  if (v16 == *a3) {
    uint64_t v18 = -1LL;
  }
  else {
    uint64_t v18 = 0LL;
  }
  BOOL v19 = a5 > 1;
  if (*(double *)(*a3 + 8 * v18) < v17 || a5 >= 2)
  {
    unint64_t v21 = (v16 - *a3) >> 3;
    unint64_t v40 = 1LL;
    while (1)
    {
      uint64_t v22 = *a2;
      BOOL v23 = v17 > a6 || *(void *)(v14 - 8) > a4;
      if (v23 || v19)
      {
        *(void *)(v22 + 8LL * *(void *)(v14 - 32)) = v40;
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818730);
        }
        ++v40;
        uint64_t v31 = qword_1019348D8;
        if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
        unint64_t v32 = *(void *)(v14 - 32);
        double v33 = *(double *)(v14 - 24);
        double v34 = *(float *)(v14 - 16);
        uint64_t v35 = *(void *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v32;
        __int16 v50 = 2050;
        double v51 = v33;
        __int16 v52 = 2050;
        double v53 = v34;
        __int16 v54 = 2050;
        uint64_t v55 = v35;
        uint64_t v29 = (os_log_s *)v31;
        unint64_t v30 = "{msg%{public}.0s:getClusterLabels - split, left:%{public}lu, right:%{public}lu, dist:"
              "%{public}f, size:%{public}lu}";
      }

      else
      {
        *(void *)(v22 + 8LL * *(void *)(v14 - 32)) = *(void *)(v22 + 8LL * *(void *)(v14 - 24));
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818730);
        }
        uint64_t v24 = qword_1019348D8;
        if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
        unint64_t v25 = *(void *)(v14 - 32);
        double v26 = *(double *)(v14 - 24);
        double v27 = *(float *)(v14 - 16);
        uint64_t v28 = *(void *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v25;
        __int16 v50 = 2050;
        double v51 = v26;
        __int16 v52 = 2050;
        double v53 = v27;
        __int16 v54 = 2050;
        uint64_t v55 = v28;
        uint64_t v29 = (os_log_s *)v24;
        unint64_t v30 = "{msg%{public}.0s:getClusterLabels - don't split, left:%{public}lu, right:%{public}lu, di"
              "st:%{public}f, size:%{public}lu}";
      }

      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x3Au);
LABEL_31:
      uint64_t v36 = v14 - 32;
      uint64_t v15 = *a1;
      if (v14 - 32 == *a1) {
        return v40;
      }
      double v17 = *(float *)(v14 - 48);
      if (v21 >= v40) {
        unint64_t v37 = v40;
      }
      else {
        unint64_t v37 = v21;
      }
      double v38 = *(double *)(*a3 + 8 * v37 - 8);
      BOOL v19 = v40 < a5;
      BOOL v39 = v38 >= v17 && v40 >= a5;
      v14 -= 32LL;
      if (v39)
      {
        uint64_t v14 = v36;
        goto LABEL_42;
      }
    }
  }

  unint64_t v40 = 1LL;
LABEL_42:
  if (v14 != v15)
  {
    uint64_t v41 = *a2;
    do
    {
      uint64_t v42 = *(void *)(v14 - 32);
      uint64_t v43 = *(void *)(v14 - 24);
      v14 -= 32LL;
      *(void *)(v41 + 8 * v42) = *(void *)(v41 + 8 * v43);
    }

    while (v14 != v15);
  }

  return v40;
}

void sub_100008230(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }

  else
  {
    sub_100008C28((void **)a1, a2 - v3, a3);
  }

uint64_t sub_100008260(uint64_t *a1, void *a2, unint64_t a3, double a4, double a5)
{
  double v12 = a4;
  sub_1000070FC(__p, 1uLL, &v12);
  uint64_t v9 = sub_100007E3C(a1, a2, __p, a3, 1uLL, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v9;
}

void sub_1000082E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100008304(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100008330(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_10000835C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1000070D4();
  }
  return operator new(32 * a2);
}

void sub_100008390(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100008390(a1, *a2);
    sub_100008390(a1, a2[1]);
    operator delete(a2);
  }

uint64_t *sub_1000083D0(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  unint64_t v6 = (void **)sub_100008454(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000085FC(a1, v11, v8, v7);
  }

  return v7;
}

void *sub_100008454(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }

      while (v14);
    }

    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        int64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }

      while (v16);
    }

    else
    {
      double v17 = a1 + 1;
    }

LABEL_29:
    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

      if (v8 == 4) {
        return 1LL;
      }
    }

    uint64_t v8 = TagFallback & 7;
    if (v8 != 1) {
      goto LABEL_29;
    }
LABEL_17:
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v14;
    uint64_t v9 = *(_DWORD *)(a1 + 36) | 2;
    *(_DWORD *)(a1 + 36) = v9;
    uint64_t v11 = (_BYTE *)*((void *)this + 1);
    if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 26)
    {
      *((void *)this + 1) = v11 + 1;
LABEL_21:
      *(_DWORD *)(a1 + 36) = v9 | 4;
      double v12 = *(void **)(a1 + 24);
      if (v12 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        double v12 = operator new(0x18uLL);
        v12[1] = 0LL;
        void v12[2] = 0LL;
        *double v12 = 0LL;
        *(void *)(a1 + 24) = v12;
      }

      float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v12);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }

  *((_DWORD *)this + 8) = 0;
  float result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(13LL, *(void *)(v5 + 88), a2);
  unint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 15LL,  *(void *)(v5 + 104),  a2);
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0980 + 32);
  }
  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v10,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    char v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          char v20 = *v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

      sub_100064FE0((wireless_diagnostics::google::protobuf::MessageLite *)v30);
      v5 += 56LL;
    }

    while (v5 != v6);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181F8F8);
  }
  unint64_t v22 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v23 = 0x6DB6DB6DB6DB6DB7LL * ((a3[1] - *a3) >> 3);
    uint64_t v24 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    *(_DWORD *)unint64_t v30 = 134349824;
    *(void *)uint64_t v31 = v23;
    *(_WORD *)&v31[8] = 2050;
    *(void *)&v31[10] = v7;
    *(_WORD *)&v31[18] = 2050;
    unint64_t v32 = v28;
    LOWORD(v33[0]) = 2050;
    *(void *)((char *)v33 + 2) = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Ingested %{public}ld new AP measurements, too old %{public}ld, dupe %{public}ld, buffer size %{public}ld",  v30,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v30, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F8F8);
    }
    unint64_t v25 = 0x6DB6DB6DB6DB6DB7LL * ((a3[1] - *a3) >> 3);
    double v26 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    BOOL v39 = 134349824;
    *(void *)unint64_t v40 = v25;
    *(_WORD *)&v40[8] = 2050;
    *(void *)&v40[10] = v7;
    *(_WORD *)&v40[18] = 2050;
    uint64_t v41 = v28;
    LOWORD(v42[0]) = 2050;
    *(void *)((char *)v42 + 2) = v26;
    double v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v30,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Ingested %{public}ld new AP measurements, too old %{public}ld, dupe %{public}ld, buffer size %{public}ld",  &v39,  42);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMiLoProtobufWrapper::WiFiRssi> CLMicroLocationScanBuffer::ingestAps(cl::chrono::CFAbsoluteTimeClock: :time_point, const std::vector<CLMiLoProtobufWrapper::WiFiRssi> &)",  "%s\n",  v27);
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_41;
  }
  if ((v5 & 0x100) != 0)
  {
    unint64_t v15 = *(_DWORD *)(a2 + 136);
    if (v15 >= 3) {
      sub_10122F824();
    }
    *(_DWORD *)(a1 + 228) |= 0x100u;
    *(_DWORD *)(a1 + 136) = v15;
    int64_t v5 = *(_DWORD *)(a2 + 228);
  }

  if ((v5 & 0x200) != 0)
  {
    unint64_t v25 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 228) |= 0x200u;
    *(void *)(a1 + 56) = v25;
    int64_t v5 = *(_DWORD *)(a2 + 228);
    if ((v5 & 0x400) == 0)
    {
LABEL_35:
      if ((v5 & 0x800) == 0) {
        goto LABEL_36;
      }
      goto LABEL_69;
    }
  }

  else if ((v5 & 0x400) == 0)
  {
    goto LABEL_35;
  }

  double v26 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 228) |= 0x400u;
  *(void *)(a1 + 64) = v26;
  int64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x800) == 0)
  {
LABEL_36:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 24),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 168);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 153),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 132) |= 4u;
  *(double *)(a1 + 24) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 132) |= 4u;
  *(double *)(a1 + 24) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 88),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 88),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 24),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

    *(_DWORD *)(a1 + 100) |= 0x10u;
    BOOL v14 = *(_DWORD **)(a1 + 40);
    if (!v14)
    {
      BOOL v14 = operator new(0x18uLL);
      *(void *)BOOL v14 = off_101828210;
      void v14[2] = 0;
      *((_BYTE *)v14 + 12) = 0;
      *((void *)v14 + 2) = 0LL;
      *(void *)(a1 + 40) = v14;
    }

    unint64_t v15 = *(void *)(a2 + 40);
    if (!v15) {
      unint64_t v15 = *(void *)(qword_1019A0BD8 + 40);
    }
    sub_1001DCD30((uint64_t)v14, v15);
    unint64_t v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_35;
    }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 48),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  double v12 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 96) |= 8u;
  *(void *)(a1 + 32) = v12;
  int64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_31:
    BOOL v14 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 96) |= 0x20u;
    *(void *)(a1 + 48) = v14;
    int64_t v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_32;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(unsigned __int8 *)(v5 + 89),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(unsigned __int8 *)(v5 + 91),  (BOOL)a2,  a4);
  }

  float result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 124) |= 4u;
  *(double *)(a1 + 24) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 76),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  *(_DWORD *)(a1 + 60) |= 8u;
  double v12 = *(_DWORD **)(a1 + 24);
  if (!v12)
  {
    double v12 = operator new(0x20uLL);
    v12[5] = 0;
    v12[6] = 0;
    *(void *)double v12 = off_101829020;
    *((void *)v12 + 1) = 0LL;
    *((_WORD *)v12 + 8) = 0;
    *(void *)(a1 + 24) = v12;
  }

  unint64_t v13 = *(void *)(a2 + 24);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A0CB0 + 24);
  }
  sub_1001EDCE8((uint64_t)v12, v13);
  int64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_39:
    uint64_t v16 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_BYTE *)(a1 + 40) = v16;
    int64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_40;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 43),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

    LODWORD(result) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 68) |= 4u;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    unint64_t v6 = *(_DWORD *)(a2 + 68);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }

  unint64_t v13 = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_BYTE *)(a1 + 44) = v13;
  int64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x20) != 0) {
    goto LABEL_30;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_35:
  *(_DWORD *)(a1 + 56) |= 0x40u;
  uint64_t v16 = *(void **)(a1 + 32);
  if (!v16)
  {
    uint64_t v16 = operator new(0x30uLL);
    v16[5] = 0LL;
    *uint64_t v16 = off_101829BD8;
    v16[1] = 0LL;
    v16[2] = 0LL;
    v16[3] = 0LL;
    *((_DWORD *)v16 + 8) = 0;
    *(void *)(a1 + 32) = v16;
  }

  double v17 = *(void *)(a2 + 32);
  if (!v17) {
    double v17 = *(void *)(qword_1019A0D70 + 32);
  }
  sub_1001FBF94((uint64_t)v16, v17);
  int64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unint64_t v6 = *(_BYTE *)(a2 + 45);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_BYTE *)(a1 + 45) = v6;
    int64_t v5 = *(_DWORD *)(a2 + 56);
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  a2,  *(float *)(v5 + 52),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  self->_numWorkoutsContrToEstimate),  @"numWorkoutsContrToEstimate");
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_14:
    if ((has & 2) == 0) {
      goto LABEL_15;
    }
LABEL_31:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_estimatedHRRecoveryParam),  @"estimatedHRRecoveryParam");
    if ((*(_WORD *)&self->_has & 0x80) == 0) {
      return v3;
    }
    goto LABEL_16;
  }

  PBDataWriterWriteDoubleField(a3, 13LL, self->_estimatedHRResponseParam);
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_15:
    if ((has & 0x80) == 0) {
      return;
    }
LABEL_31:
    PBDataWriterWriteDoubleField(a3, 15LL, self->_sessionVo2Max);
    return;
  }

  *((void *)a3 + 3) = *(void *)&self->_estimatedHRResponseParam;
  *((_WORD *)a3 + 52) |= 4u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_15:
    if ((has & 0x80) == 0) {
      return;
    }
LABEL_31:
    *((void *)a3 + 8) = *(void *)&self->_sessionVo2Max;
    *((_WORD *)a3 + 52) |= 0x80u;
    return;
  }

  *((_DWORD *)result + 22) = self->_numWorkoutsContrToEstimate;
  *((_WORD *)result + 52) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_14:
    if ((has & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  self->_estimatedHRResponseParam = *((double *)a3 + 3);
  *(_WORD *)&self->_has |= 4u;
  unint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 2) == 0)
  {
LABEL_15:
    if ((v3 & 0x80) == 0) {
      return;
    }
LABEL_31:
    self->_sessionVo2Max = *((double *)a3 + 8);
    *(_WORD *)&self->_has |= 0x80u;
    return;
  }

      unint64_t v18 = *(unsigned __int8 *)(v89 + 295);
      BOOL v19 = (char)v18;
      if ((v18 & 0x80u) != 0LL) {
        unint64_t v18 = *(void *)(v89 + 280);
      }
      if (v14 == v18)
      {
        if (v19 >= 0) {
          char v20 = (unsigned __int8 *)v86;
        }
        else {
          char v20 = *v86;
        }
        if ((v12 & 0x80) != 0)
        {
        }

        else if ((_DWORD)v12)
        {
          while (*v11 == *v20)
          {
            ++v11;
            ++v20;
            if (!--v12) {
              goto LABEL_42;
            }
          }

          goto LABEL_43;
        }

        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          unint64_t v4 = v16;
        }
      }
    }

    while (v4 != a2);
  }

  return result;
}

        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          unint64_t v4 = v16;
        }
      }
    }

    while (v4 != a2);
  }

  return result;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    char v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          char v20 = *v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

  sub_1002DDAD8((uint64_t)&v27);
  return 1LL;
}

  sub_1002DDAD8((uint64_t)v18);
}

      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      goto LABEL_30;
    }

    [v16 timestamp];
    __int16 v48 = v47;
    if (v14)
    {
      unint64_t v49 = v4 - v47;
      if (v4 - v48 < self->_meanSeaLevelPressureSamplingPeriod)
      {
        objc_msgSend(v16, "timestamp", v49);
        int64_t v5 = v5 + v50;
        [v16 fState];
        unint64_t v6 = v6 + v51;
        [v16 fCovariance];
        unint64_t v7 = v7 + sqrtf(v52);
        [v16 fState];
        uint64_t v8 = v8 + v53;
        ++v14;
        goto LABEL_30;
      }

      __int16 v54 = objc_alloc_init(&OBJC_CLASS___CLMeanSeaLevelPressureData);
      -[CLMeanSeaLevelPressureData setTimestamp:](v54, "setTimestamp:", v5 / (double)v14);
      -[CLMeanSeaLevelPressureData setMeanSeaLevelPressure:](v54, "setMeanSeaLevelPressure:", v6 / (double)v14);
      -[CLMeanSeaLevelPressureData setUncertainty:](v54, "setUncertainty:", v7 / (double)v14);
      uint64_t v55 = v8 / (double)v14;
      v56 = v6 / (double)v14;
      -[CLMeanSeaLevelPressureData setPressureMeasurement:](v54, "setPressureMeasurement:", sub_100FAE01C(v55, v56));
      -[NSMutableArray addObject:](v127, "addObject:", v54);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10183D2D0);
      }
      unint64_t v57 = (os_log_s *)p_vtable[213];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        -[CLMeanSeaLevelPressureData timestamp](v54, "timestamp");
        v59 = v58;
        -[CLMeanSeaLevelPressureData meanSeaLevelPressure](v54, "meanSeaLevelPressure");
        uint64_t v61 = v60;
        -[CLMeanSeaLevelPressureData uncertainty](v54, "uncertainty");
        uint64_t v63 = v62;
        -[CLMeanSeaLevelPressureData pressureMeasurement](v54, "pressureMeasurement");
        *(_DWORD *)buf = v126;
        v147 = v59;
        v148 = 2048;
        v149 = v61;
        v150 = 2048;
        v151 = v63;
        v152 = 2048;
        v153 = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "historical mslp array element,timestamp,%f,meanSeaLevelPressure,%f,uncertainty,%f,pressureMeasurement,%f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10183D2D0);
        }
        v89 = qword_1019346A8;
        -[CLMeanSeaLevelPressureData timestamp](v54, "timestamp");
        v91 = v90;
        -[CLMeanSeaLevelPressureData meanSeaLevelPressure](v54, "meanSeaLevelPressure");
        v93 = v92;
        -[CLMeanSeaLevelPressureData uncertainty](v54, "uncertainty");
        v95 = v94;
        -[CLMeanSeaLevelPressureData pressureMeasurement](v54, "pressureMeasurement");
        v132 = v126;
        v133 = v91;
        v134 = 2048;
        v135 = v93;
        v136 = 2048;
        v137 = v95;
        v138 = 2048;
        v139 = v96;
        LODWORD(v119) = 42;
        v97 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v89,  2LL,  "historical mslp array element,timestamp,%f,meanSeaLevelPressure,%f,uncertainty,%f,pressureMeasurement,%f",  COERCE_DOUBLE(&v132),  v119,  v120,  v121);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLElevationProfileEstimator _sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:]",  "%s\n",  v97);
      }

      [v16 timestamp];
      unint64_t v4 = v65;
      [v16 timestamp];
      int64_t v5 = v66;
      [v16 fState];
      unint64_t v6 = v67;
      [v16 fCovariance];
      unint64_t v7 = sqrtf(v68);
      [v16 fState];
      uint64_t v8 = v69;
      BOOL v14 = 1LL;
      goto LABEL_29;
    }

    [v16 timestamp];
    int64_t v5 = v70;
    [v16 fState];
    unint64_t v6 = v71;
    [v16 fCovariance];
    unint64_t v7 = sqrtf(v72);
    [v16 fState];
    uint64_t v8 = v73;
    BOOL v14 = 1LL;
    unint64_t v4 = v48;
LABEL_30:
    --v12;
    --v13;
  }

  while (v12 > 0);
  a4 = v125;
  if (v14)
  {
    v98 = objc_alloc_init(&OBJC_CLASS___CLMeanSeaLevelPressureData);
    -[CLMeanSeaLevelPressureData setTimestamp:](v98, "setTimestamp:", v5 / (double)v14);
    -[CLMeanSeaLevelPressureData setMeanSeaLevelPressure:](v98, "setMeanSeaLevelPressure:", v6 / (double)v14);
    -[CLMeanSeaLevelPressureData setUncertainty:](v98, "setUncertainty:", v7 / (double)v14);
    v99 = v8 / (double)v14;
    v100 = v6 / (double)v14;
    -[CLMeanSeaLevelPressureData setPressureMeasurement:](v98, "setPressureMeasurement:", sub_100FAE01C(v99, v100));
    -[NSMutableArray addObject:](v127, "addObject:", v98);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10183D2D0);
    }
    v101 = (os_log_s *)p_vtable[213];
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
    {
      -[CLMeanSeaLevelPressureData timestamp](v98, "timestamp");
      v103 = v102;
      -[CLMeanSeaLevelPressureData meanSeaLevelPressure](v98, "meanSeaLevelPressure");
      v105 = v104;
      -[CLMeanSeaLevelPressureData uncertainty](v98, "uncertainty");
      v107 = v106;
      -[CLMeanSeaLevelPressureData pressureMeasurement](v98, "pressureMeasurement");
      *(_DWORD *)buf = v126;
      v147 = v103;
      v148 = 2048;
      v149 = v105;
      v150 = 2048;
      v151 = v107;
      v152 = 2048;
      v153 = v108;
      _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEBUG,  "historical mslp array element,timestamp,%f,meanSeaLevelPressure,%f,uncertainty,%f,pressureMeasurement,%f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10183D2D0);
      }
      v110 = qword_1019346A8;
      -[CLMeanSeaLevelPressureData timestamp](v98, "timestamp");
      v112 = v111;
      -[CLMeanSeaLevelPressureData meanSeaLevelPressure](v98, "meanSeaLevelPressure");
      v114 = v113;
      -[CLMeanSeaLevelPressureData uncertainty](v98, "uncertainty");
      v116 = v115;
      -[CLMeanSeaLevelPressureData pressureMeasurement](v98, "pressureMeasurement");
      v132 = v126;
      v133 = v112;
      v134 = 2048;
      v135 = v114;
      v136 = 2048;
      v137 = v116;
      v138 = 2048;
      v139 = v117;
      LODWORD(v119) = 42;
      v118 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v110,  2LL,  "historical mslp array element,timestamp,%f,meanSeaLevelPressure,%f,uncertainty,%f,pressureMeasurement,%f",  COERCE_DOUBLE(&v132),  v119,  v120,  v121);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLElevationProfileEstimator _sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:]",  "%s\n",  v118);
      a4 = v125;
    }
  }

  unint64_t v15 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 96) |= 0x10u;
  *(void *)(a1 + 40) = v15;
  int64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x20) != 0) {
    goto LABEL_30;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  double v17 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 96) |= 0x40u;
  *(void *)(a1 + 56) = v17;
  int64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unint64_t v6 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 96) |= 0x80u;
    *(void *)(a1 + 64) = v6;
    int64_t v5 = *(_DWORD *)(a2 + 96);
  }

  PBDataWriterWriteUint32Field(a3, self->_nGoodCatherine, 7LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_8:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  *((_DWORD *)a3 + 14) = self->_nGoodCatherine;
  *((_DWORD *)a3 + 26) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_8:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  *((_DWORD *)result + 19) = self->_nVeryHighCatherine;
  *((_DWORD *)result + 26) |= 0x8000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  self->_nGoodCatherine = *((_DWORD *)a3 + 14);
  *(_DWORD *)&self->_has |= 0x400u;
  unint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x1000) == 0)
  {
LABEL_8:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

      dispatch_once(&qword_101934980, &stru_1018401A0);
      goto LABEL_14;
    }

  BOOL v14 = qword_101997298;
  if (byte_1019972A7 >= 0) {
    BOOL v14 = byte_1019972A7;
  }
  if (v8 != v14) {
    goto LABEL_45;
  }
  if (byte_1019972A7 >= 0) {
    unint64_t v15 = &qword_101997290;
  }
  else {
    unint64_t v15 = (uint64_t *)qword_101997290;
  }
  if ((v6 & 0x80) != 0)
  {
    goto LABEL_43;
  }

  if (!(_DWORD)v6)
  {
LABEL_43:
    uint64_t v11 = "WifiHarvest";
    goto LABEL_44;
  }

  uint64_t v11 = "WifiHarvest";
  while (*v4 == *(unsigned __int8 *)v15)
  {
    ++v4;
    unint64_t v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v6) {
      goto LABEL_44;
    }
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 64),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(unsigned __int8 *)(v5 + 96),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  float result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[12],  a2,  a4);
  unint64_t v6 = v5[20];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  unint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A12D0 + 24);
  }
  BOOL v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10061FCC0(v13, a2);
  unint64_t v15 = (int)v14;
  else {
    uint64_t v16 = 1;
  }
  unint64_t v4 = (v4 + v15 + v16 + 1);
  unint64_t v3 = *(_DWORD *)(a1 + 60);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unint64_t v3 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    uint64_t v16 = 2;
  }

  unint64_t v4 = (v16 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_33:
    double v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    else {
      unint64_t v18 = 2;
    }
    unint64_t v4 = (v18 + v4);
  }

  *(_DWORD *)(a1 + 72) |= 8u;
  unint64_t v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    unint64_t v13 = (char *)operator new(0x30uLL);
    *(void *)unint64_t v13 = &off_101845530;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((_DWORD *)v13 + 10) = 0;
    *(void *)(a1 + 32) = v13;
  }

  BOOL v14 = *(void *)(a2 + 32);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A1328 + 32);
  }
  sub_100629694((uint64_t)v13, v14);
  int64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_39:
    *(_DWORD *)(a1 + 72) |= 0x20u;
    double v17 = *(void **)(a1 + 48);
    if (!v17)
    {
      double v17 = operator new(0x20uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *double v17 = &off_1018455A8;
      *((_DWORD *)v17 + 6) = 0;
      *(void *)(a1 + 48) = v17;
    }

    unint64_t v18 = *(void *)(a2 + 48);
    if (!v18) {
      unint64_t v18 = *(void *)(qword_1019A1328 + 48);
    }
    sub_100629F9C((uint64_t)v17, v18);
    int64_t v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }

    goto LABEL_44;
  }

  BOOL v19 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 16) = v19;
  unint64_t v13 = *(_DWORD *)(a2 + 76);
  if ((v13 & 8) == 0)
  {
LABEL_16:
    if ((v13 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_31:
    *(_DWORD *)(a1 + 76) |= 0x20u;
    unint64_t v21 = *(void **)(a1 + 48);
    if (!v21)
    {
      unint64_t v21 = operator new(0x20uLL);
      v21[1] = 0LL;
      v21[2] = 0LL;
      *unint64_t v21 = &off_101844EA0;
      *((_DWORD *)v21 + 6) = 0;
      *(void *)(a1 + 48) = v21;
    }

    unint64_t v22 = *(void *)(a2 + 48);
    if (!v22) {
      unint64_t v22 = *(void *)(qword_1019A1398 + 48);
    }
    sub_100622D24((uint64_t)v21, v22);
    unint64_t v13 = *(_DWORD *)(a2 + 76);
    if ((v13 & 0x40) == 0)
    {
LABEL_18:
      if ((v13 & 0x80) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }

    goto LABEL_36;
  }

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if ((v13 & 0x80000000) != 0)
  {
    BOOL v14 = 10;
  }

  else if (v13 >= 0x80)
  {
    BOOL v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    unint64_t v3 = a1[17];
  }

  else
  {
    BOOL v14 = 1;
  }

  unint64_t v4 = (v4 + v14 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  double v12 = *(_DWORD *)(a1 + 16);
  unint64_t v13 = (v12 + v4);
  if (v12 >= 1)
  {
    BOOL v14 = 0LL;
    do
    {
      unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006403D8( *(void *)(*(void *)(a1 + 8) + 8 * v14),  a2);
      uint64_t v16 = (int)v15;
      else {
        double v17 = 1;
      }
      unint64_t v13 = (v16 + v13 + v17);
      ++v14;
    }

    while (v14 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if (v13 >= 0x80)
  {
    BOOL v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    unint64_t v3 = a1[16];
  }

  else
  {
    BOOL v14 = 1;
  }

  unint64_t v4 = (v4 + v14 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

    BOOL v14 = *(_DWORD *)(a2 + 28);
    if (v14 >= 4) {
      sub_101241B74();
    }
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v14;
    int64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v6 = *(_BYTE *)(a2 + 56);
    *(_DWORD *)(a1 + 64) |= 0x40u;
    *(_BYTE *)(a1 + 56) = v6;
    int64_t v5 = *(_DWORD *)(a2 + 64);
LABEL_12:
    if ((v5 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 64) |= 0x80u;
      unint64_t v7 = *(void **)(a1 + 32);
      if (!v7)
      {
        unint64_t v7 = operator new(0x20uLL);
        v7[1] = 0LL;
        v7[2] = 0LL;
        *unint64_t v7 = off_101846C28;
        *((_DWORD *)v7 + 6) = 0;
        *(void *)(a1 + 32) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 32);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A14B0 + 32);
      }
      sub_1006458E8(v7, v8);
      int64_t v5 = *(_DWORD *)(a2 + 64);
    }
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    unint64_t v15 = *(_BYTE *)(a2 + 57);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_BYTE *)(a1 + 57) = v15;
    int64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x200) == 0)
    {
LABEL_21:
      if ((v5 & 0x400) == 0) {
        goto LABEL_22;
      }
LABEL_38:
      unint64_t v18 = *(_BYTE *)(a2 + 58);
      *(_DWORD *)(a1 + 64) |= 0x400u;
      *(_BYTE *)(a1 + 58) = v18;
      if ((*(_DWORD *)(a2 + 64) & 0x800) == 0) {
        return;
      }
      goto LABEL_39;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_21;
  }

  *(_DWORD *)(a1 + 64) |= 0x200u;
  uint64_t v16 = *(void **)(a1 + 40);
  if (!v16)
  {
    uint64_t v16 = operator new(0x18uLL);
    v16[1] = 0LL;
    v16[2] = 0LL;
    *uint64_t v16 = off_101846CA0;
    *(void *)(a1 + 40) = v16;
  }

  double v17 = *(void *)(a2 + 40);
  if (!v17) {
    double v17 = *(void *)(qword_1019A14B0 + 40);
  }
  sub_100645DF4(v16, v17);
  int64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x400) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v5 & 0x800) == 0) {
    return;
  }
LABEL_39:
  *(_DWORD *)(a1 + 64) |= 0x800u;
  BOOL v19 = *(void **)(a1 + 48);
  if (!v19)
  {
    BOOL v19 = operator new(0x18uLL);
    v19[1] = 0LL;
    v19[2] = 0LL;
    *BOOL v19 = off_101846D18;
    *(void *)(a1 + 48) = v19;
  }

  char v20 = *(void *)(a2 + 48);
  if (!v20) {
    char v20 = *(void *)(qword_1019A14B0 + 48);
  }
  sub_100646204(v19, v20);
}

      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        double v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }

      goto LABEL_33;
    }

  uint64_t v36 = *(unsigned __int8 *)(a1 + 7814);
  v76[0] = 0;
  sub_1012049AC(buf, "FallGateAlertsOnWaterLock", v76, 0);
  if (buf[1]) {
    unint64_t v37 = *(unsigned __int8 *)(a1 + 7809);
  }
  else {
    unint64_t v37 = 0;
  }
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10184D4F8);
  }
  double v38 = v37 | v36;
  BOOL v39 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Checking impact against system state, should cancel:%{private}d}",  buf,  0x18u);
  }

  if (v38)
  {
    sub_100728FEC(*(void *)(a2 + 19));
    sub_10071F480(a1, a2, 8);
    *(_BYTE *)(a1 + 447) = 1;
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    unint64_t v40 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *(void *)(a1 + 7792);
      uint64_t v42 = *(unsigned __int8 *)(a1 + 7808);
      uint64_t v43 = *(unsigned __int8 *)(a1 + 7809);
      __int128 v44 = *(unsigned __int8 *)(a1 + 7810);
      v45 = *(unsigned __int8 *)(a1 + 7811);
      __int16 v46 = *(unsigned __int8 *)(a1 + 7812);
      int v47 = *(unsigned __int8 *)(a1 + 7813);
      __int16 v48 = *(unsigned __int8 *)(a1 + 7814);
      *(_DWORD *)buf = 68291074;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v41;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v42;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v43;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v44;
      *(_WORD *)&buf[46] = 1026;
      LODWORD(v78) = v45;
      WORD2(v78) = 1026;
      *(_DWORD *)((char *)&v78 + 6) = v46;
      WORD5(v78) = 1026;
      HIDWORD(v78) = v47;
      LOWORD(v79) = 1026;
      *(_DWORD *)((char *)&v79 + 2) = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:current system state details, absoluteTimestamp:%{public}f, isPasscodeLockEna bled:%{public}hhd, isWaterLockEnabled:%{public}hhd, isSchoolModeEnabled:%{public}hhd, isSleepLockEna bled:%{public}hhd, isTheaterModeEnabled:%{public}hhd, isTourModeEnabled:%{public}hhd, isDepthModeEna bled:%{public}hhd}",  buf,  0x46u);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10184D4F8);
      }
    }

    unint64_t v49 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Fall detection feature is disabled during this system state configuration, avoided dispatching event",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    *(_WORD *)uint64_t v76 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "Fall detection feature is disabled during this system state configuration, avoided dispatching event",  v76,  2);
    double v51 = (char *)v50;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)",  "%s\n",  v50);
LABEL_48:
    if (v51 != buf) {
      free(v51);
    }
    return;
  }

  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10184D4F8);
  }
  __int16 v52 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    double v53 = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v53;
    *(_WORD *)&buf[24] = 2049;
    *(double *)&buf[26] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Checking impact against threshold, age:%{private}d, feature:%{private}f}",  buf,  0x22u);
  }

  if (v16 >= *(float *)(a1 + 7476) || *(_BYTE *)(a2 + 18))
  {
    if ((a3 & 1) == 0 && *(_BYTE *)(a2 + 13) == 1)
    {
      *(_WORD *)(a1 + 446) = 1;
      *(_BYTE *)(a1 + 448) = 0;
    }

    if ((sub_10071F09C() & 1) != 0)
    {
      *(_DWORD *)buf = 1;
      if (!sub_100247620(a1, (int *)buf, 1LL))
      {
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_10184D4F8);
        }
        v59 = (os_log_s *)qword_1019345D8;
        if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_FAULT,  "No client was connected when event needed to be dispatched",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345D0 != -1) {
            dispatch_once(&qword_1019345D0, &stru_10184D4F8);
          }
          *(_WORD *)uint64_t v76 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  17LL,  "No client was connected when event needed to be dispatched",  v76,  2);
          v75 = (char *)v74;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)",  "%s\n",  v74);
          if (v75 != buf) {
            free(v75);
          }
        }
      }

      memset(v87, 0, sizeof(v87));
      __int16 v60 = *(_OWORD *)(a2 + 112);
      v81 = *(_OWORD *)(a2 + 96);
      uint64_t v82 = v60;
      *(_OWORD *)v83 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v83[10] = *(_OWORD *)(a2 + 138);
      uint64_t v61 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
      v78 = v61;
      __int16 v62 = *(_OWORD *)(a2 + 80);
      unint64_t v79 = *(_OWORD *)(a2 + 64);
      v80 = v62;
      uint64_t v63 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)buf = *(_OWORD *)a2;
      *(_OWORD *)&buf[16] = v63;
      v84 = *(_WORD *)(a2 + 156);
      v85 = *(_OWORD *)(a2 + 158);
      v86 = *(void *)(a2 + 174);
      *(_DWORD *)uint64_t v76 = 1;
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v76,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      if (*(void *)&v87[9])
      {
        *(void *)&v87[17] = *(void *)&v87[9];
        operator delete(*(void **)&v87[9]);
      }

      return;
    }

    sub_100728FEC(*(void *)(a2 + 19));
    sub_10071F480(a1, a2, 8);
    *(_BYTE *)(a1 + 447) = 1;
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    v70 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Fall detection feature is disabled, avoided dispatching event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10184D4F8);
      }
      *(_WORD *)uint64_t v76 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "Fall detection feature is disabled, avoided dispatching event",  v76,  2);
      double v51 = (char *)v73;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)",  "%s\n",  v73);
      goto LABEL_48;
    }
  }

  else
  {
    sub_100728FEC(*(void *)(a2 + 19));
    sub_10071F480(a1, a2, 7);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    __int16 v54 = qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = *(void *)(a2 + 19);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v55;
      *(_WORD *)&buf[28] = 2049;
      *(double *)&buf[30] = v16;
      v56 = "{msg%{public}.0s:Avoided event dispatch not meeting threshold requirement, identifier:%{public}l"
            "lu, feature:%{private}f}";
      unint64_t v57 = (os_log_s *)v54;
      v58 = 38;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, v56, buf, v58);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A6F64(*(uint64_t *)buf, "EEDSendFullADR", v2);
  double v17 = (std::__shared_weak_count *)v29[0];
  if (v29[0])
  {
    unint64_t v18 = (unint64_t *)(v29[0] + 8LL);
    do
      BOOL v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return a1;
}

  sub_1006A8BD8((uint64_t)v7, (char *)v25, v12);
  uint64_t v28 = a1[21];
  uint64_t v29 = a1[22];
  if (v28 == v29) {
    return 1LL;
  }
  unint64_t v30 = 0;
  do
  {
    unint64_t v30 = (int)(*(double *)(v28 + 8) + (double)v30);
    v28 += 16LL;
  }

  while (v28 != v29);
  return v30 < 10;
}

  *(_DWORD *)buf = 141;
  uint64_t v9 = (__CFString *)sub_1007D2730(a1, (int *)buf);
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  uint64_t v16 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    double v17 = -[__CFString intValue](v9, "intValue");
    *(_DWORD *)buf = 67109120;
    v153 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ca,EED,simInstance,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v131 = qword_101934A48;
    v132 = -[__CFString intValue](v9, "intValue");
    v150 = 67109120;
    v151 = v132;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v131,  0LL,  "#ca,EED,simInstance,%d",  &v150);
    unint64_t v15 = (uint8_t *)v133;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v133);
LABEL_188:
    if (v15 != buf) {
      free(v15);
    }
  }

  unint64_t v15 = *(double *)result;
  uint64_t v16 = *(double *)a3;
  if (*(double *)result == *(double *)a3)
  {
    double v17 = *a2;
    unint64_t v18 = *a4;
    if (*a2 <= *a4) {
      return result;
    }
    goto LABEL_37;
  }

  if (v6 || v10) {
    sub_10124CB18();
  }
  if (v15 > v16)
  {
    *(double *)float result = v16;
    *(double *)a3 = v15;
    BOOL v19 = *a2;
    *a2 = *a4;
    *a4 = v19;
    unint64_t v15 = *(double *)result;
    uint64_t v16 = *(double *)a3;
  }

  if (vabdd_f64(v15, v16) > 180.0)
  {
    char v20 = v15 + 360.0;
    *(double *)float result = v20;
    char *result = *a3;
    *(double *)a3 = v20;
    double v17 = *a2;
    unint64_t v18 = *a4;
LABEL_37:
    *a2 = v18;
    *a4 = v17;
  }

  return result;
}

      if (v30 != v29)
      {
        unint64_t v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            double v33 = (uint64_t *)v60;
            if (v60 != v32) {
              break;
            }
LABEL_35:
            if (++v30 == v29) {
              goto LABEL_44;
            }
          }

          while ((sub_10084CBD8(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              uint64_t v29 = v67;
              unint64_t v32 = v33;
              goto LABEL_35;
            }
          }

          goto LABEL_95;
        }
      }

      goto LABEL_44;
    }

    double v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v80 = v34;
    v81 = v35;
    if (v66 != v67)
    {
      do
        sub_10084CE24((double *)v80.i64, (double *)(*v30++ + 32));
      while (v30 != v67);
      double v34 = v80;
      uint64_t v35 = v81;
    }

    uint64_t v55 = v34;
    v56 = v35;
    if (!sub_10084E2F8( (double *)v55.i64,  (uint64_t **)&v66,  (uint64_t **)&v63,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11)
      || (sub_10084E2F8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }

      if (v31 != v30)
      {
        double v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            double v34 = (uint64_t *)v61;
            if (v61 != v33) {
              break;
            }
LABEL_35:
            if (++v31 == v30) {
              goto LABEL_44;
            }
          }

          while ((sub_10084CBD8(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              unint64_t v30 = v68;
              double v33 = v34;
              goto LABEL_35;
            }
          }

          goto LABEL_95;
        }
      }

      goto LABEL_44;
    }

    uint64_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v81 = v35;
    uint64_t v82 = v36;
    if (v67 != v68)
    {
      do
        sub_10084CE24((double *)v81.i64, (double *)(*v31++ + 32));
      while (v31 != v68);
      uint64_t v35 = v81;
      uint64_t v36 = v82;
    }

    v56 = v35;
    unint64_t v57 = v36;
    if (!sub_10084DB1C(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_10084DB1C(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }

  unint64_t v32 = v89;
  if (a5 > ((char *)v89 - (_BYTE *)v88) >> 3)
  {
    double v34 = (uint64_t *)v91;
    double v33 = v92;
    goto LABEL_32;
  }

  double v34 = (uint64_t *)v91;
  double v33 = v92;
  if (a5 > ((char *)v86 - (_BYTE *)v85) >> 3 || a4 > 0x63 || ((char *)v92 - (_BYTE *)v91) >> 3 < a5)
  {
LABEL_32:
    if (v88 != v89 && v34 != v33)
    {
      while (v88 == v32)
      {
LABEL_49:
        if (++v34 == v33)
        {
          double v34 = (uint64_t *)v91;
          goto LABEL_51;
        }
      }

      unint64_t v32 = (double ****)v88;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          uint64_t v35 = *(double ***)*v34;
          uint64_t v36 = **v32;
          unint64_t v37 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100858868(v35, v36, (unsigned __int8 *)&v105, v37);
          if (!v105.i8[9])
          {
            double v38 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v38
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }

        if (++v32 == v89)
        {
          double v33 = v92;
          goto LABEL_49;
        }
      }
    }

  double v33 = v90;
  if (a5 > ((char *)v90 - (_BYTE *)v89) >> 3)
  {
    uint64_t v35 = (uint64_t *)v92;
    double v34 = v93;
    goto LABEL_32;
  }

  uint64_t v35 = (uint64_t *)v92;
  double v34 = v93;
  if (a5 > ((char *)v87 - (_BYTE *)v86) >> 3 || a4 > 0x63 || ((char *)v93 - (_BYTE *)v92) >> 3 < a5)
  {
LABEL_32:
    if (v89 != v90 && v35 != v34)
    {
      while (v89 == v33)
      {
LABEL_49:
        if (++v35 == v34)
        {
          uint64_t v35 = (uint64_t *)v92;
          goto LABEL_51;
        }
      }

      double v33 = (double ****)v89;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          uint64_t v36 = *(double ***)*v35;
          unint64_t v37 = **v33;
          double v38 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100858868(v36, v37, (unsigned __int8 *)&v106, v38);
          if (!v106.i8[9])
          {
            BOOL v39 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v39
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }

        if (++v33 == v90)
        {
          double v34 = v93;
          goto LABEL_49;
        }
      }
    }

      if (v30 != v29)
      {
        unint64_t v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            double v33 = (double **)v60;
            if (v60 != v32) {
              break;
            }
LABEL_35:
            if (++v30 == v29) {
              goto LABEL_44;
            }
          }

          while ((sub_10085A3D8(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              uint64_t v29 = v67;
              unint64_t v32 = v33;
              goto LABEL_35;
            }
          }

          goto LABEL_95;
        }
      }

      goto LABEL_44;
    }

    double v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v80 = v34;
    v81 = v35;
    if (v66 != v67)
    {
      do
        sub_10084CE24((double *)v80.i64, *v30++ + 4);
      while (v30 != v67);
      double v34 = v80;
      uint64_t v35 = v81;
    }

    uint64_t v55 = v34;
    v56 = v35;
    if (!sub_10085A614( (double *)v55.i64,  (uint64_t **)&v66,  (uint64_t **)&v63,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11)
      || (sub_10085A614((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }

      if (v31 != v30)
      {
        double v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            double v34 = (double **)v61;
            if (v61 != v33) {
              break;
            }
LABEL_35:
            if (++v31 == v30) {
              goto LABEL_44;
            }
          }

          while ((sub_10085A3D8(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              unint64_t v30 = v68;
              double v33 = v34;
              goto LABEL_35;
            }
          }

          goto LABEL_95;
        }
      }

      goto LABEL_44;
    }

    uint64_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v81 = v35;
    uint64_t v82 = v36;
    if (v67 != v68)
    {
      do
        sub_10084CE24((double *)v81.i64, *v31++ + 4);
      while (v31 != v68);
      uint64_t v35 = v81;
      uint64_t v36 = v82;
    }

    v56 = v35;
    unint64_t v57 = v36;
    if (!sub_100859BFC(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_100859BFC(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }

          v27 -= 200LL;
        }

        unint64_t v40 = v54;
        *(_OWORD *)(v27 - 56) = v55;
        uint64_t v41 = v57;
        *(_OWORD *)(v27 - 40) = v56;
        *(_OWORD *)(v27 - 24) = v41;
        uint64_t v42 = v50;
        *(_OWORD *)(v27 - 120) = v51;
        uint64_t v43 = v53;
        *(_OWORD *)(v27 - 104) = v52;
        *(_OWORD *)(v27 - 88) = v43;
        *(_OWORD *)(v27 - 72) = v40;
        __int128 v44 = v46;
        *(_OWORD *)(v27 - 184) = v47;
        float result = *(double *)&v48;
        v45 = v49;
        *(_OWORD *)(v27 - 168) = v48;
        *(_OWORD *)(v27 - 152) = v45;
        *(_OWORD *)(v27 - 136) = v42;
        *(void *)(v27 - 8) = v58;
        *(_OWORD *)(v27 - 200) = v44;
      }
    }
  }

  return result;
}

          v27 -= 200LL;
        }

        unint64_t v40 = v54;
        *(_OWORD *)(v27 - 56) = v55;
        uint64_t v41 = v57;
        *(_OWORD *)(v27 - 40) = v56;
        *(_OWORD *)(v27 - 24) = v41;
        uint64_t v42 = v50;
        *(_OWORD *)(v27 - 120) = v51;
        uint64_t v43 = v53;
        *(_OWORD *)(v27 - 104) = v52;
        *(_OWORD *)(v27 - 88) = v43;
        *(_OWORD *)(v27 - 72) = v40;
        __int128 v44 = v46;
        *(_OWORD *)(v27 - 184) = v47;
        float result = *(double *)&v48;
        v45 = v49;
        *(_OWORD *)(v27 - 168) = v48;
        *(_OWORD *)(v27 - 152) = v45;
        *(_OWORD *)(v27 - 136) = v42;
        *(void *)(v27 - 8) = v58;
        *(_OWORD *)(v27 - 200) = v44;
      }
    }
  }

  return result;
}

  *((_BYTE *)result + 74) = self->_isStroller;
  *((_WORD *)result + 38) |= 0x2000u;
  if ((*(_WORD *)&self->_has & 4) == 0) {
    return result;
  }
LABEL_15:
  *((void *)result + 3) = *(void *)&self->_hrTime;
  *((_WORD *)result + 38) |= 4u;
  return result;
}

  double v12 = *(void *)(v5 + 48);
  if (!v12) {
    double v12 = *(void *)(qword_1019A1A48 + 48);
  }
  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v12,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1A88 + 32);
  }
  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  unint64_t v13 = *(void *)(a1 + 32);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A1A88 + 32);
  }
  BOOL v14 = *(unsigned __int8 *)(v13 + 24);
  unint64_t v15 = (v14 << 31 >> 31) & 5;
  if ((v14 & 2) != 0) {
    v15 += 5;
  }
  if ((v14 & 4) != 0) {
    v15 += 5;
  }
  if (*(_BYTE *)(v13 + 24)) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  *(_DWORD *)(v13 + 20) = v16;
  v4 += v16 + 2;
  unint64_t v3 = *(_DWORD *)(a1 + 116);
  if ((v3 & 0x20) == 0)
  {
LABEL_9:
    if ((v3 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

        *(_BYTE *)(v1 + 577) = 1;
        goto LABEL_32;
      }

      float result = memcmp(*v2, v7, v4);
      if (!(_DWORD)result) {
        goto LABEL_29;
      }
    }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrMax),  @"hrMax");
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_8:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  PBDataWriterWriteDoubleField(a3, 7LL, self->_hrMean);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  *((void *)a3 + 10) = *(void *)&self->_hrMean;
  *((_DWORD *)a3 + 41) |= 0x200u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  *((void *)result + 9) = *(void *)&self->_hrMax;
  *((_DWORD *)result + 41) |= 0x100u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_8:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  if ((*(_WORD *)&has & 0x100) != 0)
  {
    hrMax = self->_hrMax;
    unint64_t v21 = -hrMax;
    if (hrMax >= 0.0) {
      unint64_t v21 = self->_hrMax;
    }
    unint64_t v22 = floor(v21 + 0.5);
    BOOL v23 = (v21 - v22) * 1.84467441e19;
    BOOL v19 = 2654435761u * (unint64_t)fmod(v22, 1.84467441e19);
    if (v23 >= 0.0)
    {
      if (v23 > 0.0) {
        v19 += (unint64_t)v23;
      }
    }

    else
    {
      v19 -= (unint64_t)fabs(v23);
    }
  }

  else
  {
    BOOL v19 = 0LL;
  }

  if ((*(_WORD *)&has & 0x200) != 0)
  {
    hrMean = self->_hrMean;
    double v26 = -hrMean;
    if (hrMean >= 0.0) {
      double v26 = self->_hrMean;
    }
    double v27 = floor(v26 + 0.5);
    uint64_t v28 = (v26 - v27) * 1.84467441e19;
    uint64_t v24 = 2654435761u * (unint64_t)fmod(v27, 1.84467441e19);
    if (v28 >= 0.0)
    {
      if (v28 > 0.0) {
        v24 += (unint64_t)v28;
      }
    }

    else
    {
      v24 -= (unint64_t)fabs(v28);
    }
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  if ((*(_BYTE *)&has & 0x40) != 0)
  {
    hrConfidenceMean = self->_hrConfidenceMean;
    uint64_t v31 = -hrConfidenceMean;
    if (hrConfidenceMean >= 0.0) {
      uint64_t v31 = self->_hrConfidenceMean;
    }
    unint64_t v32 = floor(v31 + 0.5);
    double v33 = (v31 - v32) * 1.84467441e19;
    uint64_t v29 = 2654435761u * (unint64_t)fmod(v32, 1.84467441e19);
    if (v33 >= 0.0)
    {
      if (v33 > 0.0) {
        v29 += (unint64_t)v33;
      }
    }

    else
    {
      v29 -= (unint64_t)fabs(v33);
    }
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  if ((*(_BYTE *)&has & 0x10) != 0)
  {
    hrCadenceAgreementMean = self->_hrCadenceAgreementMean;
    uint64_t v36 = -hrCadenceAgreementMean;
    if (hrCadenceAgreementMean >= 0.0) {
      uint64_t v36 = self->_hrCadenceAgreementMean;
    }
    unint64_t v37 = floor(v36 + 0.5);
    double v38 = (v36 - v37) * 1.84467441e19;
    double v34 = 2654435761u * (unint64_t)fmod(v37, 1.84467441e19);
    if (v38 >= 0.0)
    {
      if (v38 > 0.0) {
        v34 += (unint64_t)v38;
      }
    }

    else
    {
      v34 -= (unint64_t)fabs(v38);
    }
  }

  else
  {
    double v34 = 0LL;
  }

  if ((*(_DWORD *)&has & 0x10000) != 0)
  {
    vo2Mean = self->_vo2Mean;
    uint64_t v41 = -vo2Mean;
    if (vo2Mean >= 0.0) {
      uint64_t v41 = self->_vo2Mean;
    }
    uint64_t v42 = floor(v41 + 0.5);
    uint64_t v43 = (v41 - v42) * 1.84467441e19;
    BOOL v39 = 2654435761u * (unint64_t)fmod(v42, 1.84467441e19);
    if (v43 >= 0.0)
    {
      if (v43 > 0.0) {
        v39 += (unint64_t)v43;
      }
    }

    else
    {
      v39 -= (unint64_t)fabs(v43);
    }
  }

  else
  {
    BOOL v39 = 0LL;
  }

  v98 = v39;
  if ((*(_WORD *)&has & 0x2000) != 0)
  {
    speedMean = self->_speedMean;
    __int16 v46 = -speedMean;
    if (speedMean >= 0.0) {
      __int16 v46 = self->_speedMean;
    }
    int v47 = floor(v46 + 0.5);
    __int16 v48 = (v46 - v47) * 1.84467441e19;
    __int128 v44 = 2654435761u * (unint64_t)fmod(v47, 1.84467441e19);
    if (v48 >= 0.0)
    {
      if (v48 > 0.0) {
        v44 += (unint64_t)v48;
      }
    }

    else
    {
      v44 -= (unint64_t)fabs(v48);
    }
  }

  else
  {
    __int128 v44 = 0LL;
  }

  v97 = v44;
  if ((*(_BYTE *)&has & 4) != 0)
  {
    gradeMean = self->_gradeMean;
    double v51 = -gradeMean;
    if (gradeMean >= 0.0) {
      double v51 = self->_gradeMean;
    }
    __int16 v52 = floor(v51 + 0.5);
    double v53 = (v51 - v52) * 1.84467441e19;
    unint64_t v49 = 2654435761u * (unint64_t)fmod(v52, 1.84467441e19);
    if (v53 >= 0.0)
    {
      if (v53 > 0.0) {
        v49 += (unint64_t)v53;
      }
    }

    else
    {
      v49 -= (unint64_t)fabs(v53);
    }
  }

  else
  {
    unint64_t v49 = 0LL;
  }

  v96 = v49;
  if ((*(_BYTE *)&has & 1) != 0)
  {
    cadenceMean = self->_cadenceMean;
    v56 = -cadenceMean;
    if (cadenceMean >= 0.0) {
      v56 = self->_cadenceMean;
    }
    unint64_t v57 = floor(v56 + 0.5);
    v58 = (v56 - v57) * 1.84467441e19;
    __int16 v54 = 2654435761u * (unint64_t)fmod(v57, 1.84467441e19);
    if (v58 >= 0.0)
    {
      if (v58 > 0.0) {
        v54 += (unint64_t)v58;
      }
    }

    else
    {
      v54 -= (unint64_t)fabs(v58);
    }
  }

  else
  {
    __int16 v54 = 0LL;
  }

  v95 = v54;
  if ((*(_WORD *)&has & 0x800) != 0)
  {
    hrVariance = self->_hrVariance;
    uint64_t v61 = -hrVariance;
    if (hrVariance >= 0.0) {
      uint64_t v61 = self->_hrVariance;
    }
    __int16 v62 = floor(v61 + 0.5);
    uint64_t v63 = (v61 - v62) * 1.84467441e19;
    v59 = 2654435761u * (unint64_t)fmod(v62, 1.84467441e19);
    if (v63 >= 0.0)
    {
      if (v63 > 0.0) {
        v59 += (unint64_t)v63;
      }
    }

    else
    {
      v59 -= (unint64_t)fabs(v63);
    }
  }

  else
  {
    v59 = 0LL;
  }

  v94 = v59;
  v102 = v18;
  if ((*(_BYTE *)&has & 0x80) != 0)
  {
    hrConfidenceVariance = self->_hrConfidenceVariance;
    __int16 v66 = -hrConfidenceVariance;
    if (hrConfidenceVariance >= 0.0) {
      __int16 v66 = self->_hrConfidenceVariance;
    }
    uint64_t v67 = floor(v66 + 0.5);
    int v68 = (v66 - v67) * 1.84467441e19;
    __int16 v64 = 2654435761u * (unint64_t)fmod(v67, 1.84467441e19);
    if (v68 >= 0.0)
    {
      if (v68 > 0.0) {
        v64 += (unint64_t)v68;
      }
    }

    else
    {
      v64 -= (unint64_t)fabs(v68);
    }
  }

  else
  {
    __int16 v64 = 0LL;
  }

  v100 = v29;
  v101 = v19;
  v99 = v13;
  if ((*(_BYTE *)&has & 0x20) != 0)
  {
    hrCadenceAgreementVariance = self->_hrCadenceAgreementVariance;
    v71 = -hrCadenceAgreementVariance;
    if (hrCadenceAgreementVariance >= 0.0) {
      v71 = self->_hrCadenceAgreementVariance;
    }
    v72 = floor(v71 + 0.5);
    uint64_t v73 = (v71 - v72) * 1.84467441e19;
    v69 = 2654435761u * (unint64_t)fmod(v72, 1.84467441e19);
    if (v73 >= 0.0)
    {
      if (v73 > 0.0) {
        v69 += (unint64_t)v73;
      }
    }

    else
    {
      v69 -= (unint64_t)fabs(v73);
    }
  }

  else
  {
    v69 = 0LL;
  }

  v74 = v4;
  if ((*(_DWORD *)&has & 0x20000) != 0)
  {
    vo2Variance = self->_vo2Variance;
    v78 = -vo2Variance;
    if (vo2Variance >= 0.0) {
      v78 = self->_vo2Variance;
    }
    unint64_t v79 = floor(v78 + 0.5);
    v80 = (v78 - v79) * 1.84467441e19;
    uint64_t v76 = 2654435761u * (unint64_t)fmod(v79, 1.84467441e19);
    v75 = v34;
    if (v80 >= 0.0)
    {
      if (v80 > 0.0) {
        v76 += (unint64_t)v80;
      }
    }

    else
    {
      v76 -= (unint64_t)fabs(v80);
    }
  }

  else
  {
    v75 = v34;
    uint64_t v76 = 0LL;
  }

  if ((*(_WORD *)&has & 0x4000) != 0)
  {
    speedVariance = self->_speedVariance;
    v83 = -speedVariance;
    if (speedVariance >= 0.0) {
      v83 = self->_speedVariance;
    }
    v84 = floor(v83 + 0.5);
    v85 = (v83 - v84) * 1.84467441e19;
    v81 = 2654435761u * (unint64_t)fmod(v84, 1.84467441e19);
    if (v85 >= 0.0)
    {
      if (v85 > 0.0) {
        v81 += (unint64_t)v85;
      }
    }

    else
    {
      v81 -= (unint64_t)fabs(v85);
    }
  }

  else
  {
    v81 = 0LL;
  }

  if ((*(_BYTE *)&has & 8) != 0)
  {
    gradeVariance = self->_gradeVariance;
    v88 = -gradeVariance;
    if (gradeVariance >= 0.0) {
      v88 = self->_gradeVariance;
    }
    v89 = floor(v88 + 0.5);
    v90 = (v88 - v89) * 1.84467441e19;
    v86 = 2654435761u * (unint64_t)fmod(v89, 1.84467441e19);
    if (v90 >= 0.0)
    {
      if (v90 > 0.0) {
        v86 += (unint64_t)v90;
      }
    }

    else
    {
      v86 -= (unint64_t)fabs(v90);
    }
  }

  else
  {
    v86 = 0LL;
  }

  if ((*(_DWORD *)&has & 0x80000) != 0)
  {
    v91 = 2654435761LL * self->_vo2MaxModelSource;
    if ((*(_DWORD *)&has & 0x40000) != 0) {
      goto LABEL_143;
    }
LABEL_145:
    v92 = 0LL;
    return v104 ^ v74 ^ v99 ^ v103 ^ v102 ^ v101 ^ v24 ^ v100 ^ v75 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v64 ^ v69 ^ v76 ^ v81 ^ v86 ^ v91 ^ v92;
  }

  v91 = 0LL;
  if ((*(_DWORD *)&has & 0x40000) == 0) {
    goto LABEL_145;
  }
LABEL_143:
  v92 = 2654435761LL * self->_sessionType;
  return v104 ^ v74 ^ v99 ^ v103 ^ v102 ^ v101 ^ v24 ^ v100 ^ v75 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v64 ^ v69 ^ v76 ^ v81 ^ v86 ^ v91 ^ v92;
}

  self->_hrMean = *((double *)a3 + 10);
  *(_DWORD *)&self->_has |= 0x200u;
  unint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x40) == 0)
  {
LABEL_9:
    if ((v3 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((char *)a4 + 32))
  {
    char v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(char *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          char v20 = *v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

    sub_1000F0D38((void *)(a1 + 64));
    return;
  }

  [*(id *)(a1 + 16) setNextFireDelay:v7 - v5];
  if (v6 >= 1.79769313e308)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    BOOL v19 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      char v20 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      unint64_t v40 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s WIFI SCAN EFFECTIVELY NOT SCHEDULED",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v28 = qword_101934A78;
      uint64_t v29 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      double v33 = 136315138;
      double v34 = v29;
      unint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "%s WIFI SCAN EFFECTIVELY NOT SCHEDULED",  (const char *)&v33);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)",  "%s\n",  v30);
    }

    goto LABEL_29;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101879D80);
  }
  uint64_t v16 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v17 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    [*(id *)(a1 + 16) nextFireTime];
    *(_DWORD *)buf = 136315394;
    unint64_t v40 = v17;
    uint64_t v41 = 2048;
    uint64_t v42 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN SCHEDULED FOR %f", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v24 = qword_101934A78;
    unint64_t v25 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    [*(id *)(a1 + 16) nextFireTime];
    double v33 = 136315394;
    double v34 = v25;
    uint64_t v35 = 2048;
    uint64_t v36 = v26;
    LODWORD(v31) = 22;
    double v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  2LL,  "%s WIFI SCAN SCHEDULED FOR %f",  (const char *)&v33,  v31);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)",  "%s\n",  v27);
  }

  sub_1000F2F30((void *)(a1 + 64), a2);
}

  unint64_t v22 = *(double *)(a1 + 64);
  BOOL v23 = *(void *)(a1 + 448);
  if (v23)
  {
    uint64_t v24 = 0LL;
    unint64_t v25 = *(void *)(a1 + 440);
    double v26 = *(void *)(a1 + 416);
    while (v10 - *(double *)(*(void *)(v26 + 8 * ((v25 + v24) / 0x33)) + 80 * ((v25 + v24) % 0x33)) <= v22)
    {
      if (v23 == ++v24)
      {
        uint64_t v24 = *(void *)(a1 + 448);
        break;
      }
    }

    double v27 = (void *)(v26 + 8 * (v25 / 0x33));
    if (*(void *)(a1 + 424) == v26) {
      uint64_t v28 = 0LL;
    }
    else {
      uint64_t v28 = *v27 + 80 * (v25 % 0x33);
    }
    *(void *)&v105 = v27;
    *((void *)&v105 + 1) = v28;
    sub_1005AB848(&v105, v24);
    uint64_t v29 = *(void *)(a1 + 440) + *(void *)(a1 + 448);
    unint64_t v30 = *(void *)(a1 + 416);
    uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x33));
    if (*(void *)(a1 + 424) == v30) {
      unint64_t v32 = 0LL;
    }
    else {
      unint64_t v32 = (char *)(*v31 + 80 * (v29 % 0x33));
    }
    uint64_t v16 = sub_100C6981C((void *)(a1 + 408), (void *)v105, *((char **)&v105 + 1), v31, v32);
  }

  double v33 = *(void *)(a1 + 400);
  if (v33)
  {
    double v34 = 0LL;
    uint64_t v35 = *(void *)(a1 + 392);
    uint64_t v36 = *(void *)(a1 + 368);
    while (v10 - *(double *)(*(void *)(v36 + 8 * ((v35 + v34) / 0x66)) + 40 * ((v35 + v34) % 0x66)) <= *(double *)(a1 + 64))
    {
      if (v33 == ++v34)
      {
        double v34 = *(void *)(a1 + 400);
        break;
      }
    }

    unint64_t v37 = (void *)(v36 + 8 * (v35 / 0x66));
    if (*(void *)(a1 + 376) == v36) {
      double v38 = 0LL;
    }
    else {
      double v38 = *v37 + 40 * (v35 % 0x66);
    }
    *(void *)&v105 = v37;
    *((void *)&v105 + 1) = v38;
    sub_10025BF98(&v105, v34);
    BOOL v39 = *(void *)(a1 + 392) + *(void *)(a1 + 400);
    unint64_t v40 = *(void *)(a1 + 368);
    uint64_t v41 = (void *)(v40 + 8 * (v39 / 0x66));
    if (*(void *)(a1 + 376) == v40) {
      uint64_t v42 = 0LL;
    }
    else {
      uint64_t v42 = (char *)(*v41 + 40 * (v39 % 0x66));
    }
    uint64_t v16 = sub_100C69A9C((void *)(a1 + 360), (void *)v105, *((char **)&v105 + 1), v41, v42);
  }

  if (*(_DWORD *)(a1 + 48) == 2)
  {
    uint64_t v43 = *(double *)(a1 + 64);
    if (v10 - *(double *)(a1 + 40) > v43)
    {
      *(_BYTE *)(a1 + 58) = 1;
      *(_WORD *)(a1 + 56) = 257;
      *(double *)(a1 + 8) = v10 - v43 + 60.0;
      goto LABEL_57;
    }
  }

  __int128 v44 = 0.0;
  if (!*(void *)(a1 + 448))
  {
    __int16 v52 = 0;
    unint64_t v49 = 1;
    __int16 v50 = 1;
    goto LABEL_76;
  }

  v45 = 0LL;
  LODWORD(v105) = 0;
  LODWORD(v110) = 0;
  v104 = 0LL;
  v103 = 0;
  do
  {
    sub_100C68324( v16,  *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 8 * ((v45 + *(void *)(a1 + 440)) / 0x33))
                + 80 * ((v45 + *(void *)(a1 + 440)) % 0x33)
                + 72),
      &v105,
      &v110,
      (_DWORD *)&v104 + 1,
      &v104,
      &v103);
    ++v45;
    __int16 v46 = *(void *)(a1 + 448);
  }

  while (v46 > v45);
  int v47 = (double)(HIDWORD(v104) + (int)v110) / (double)v46 * 100.0;
  __int16 v48 = (double)(int)v104 / (double)v46 * 100.0;
  unint64_t v49 = v48 <= 25.0;
  if (v48 > 25.0)
  {
    *(_BYTE *)(a1 + 57) = 0;
    *a3 = 1;
  }

  __int16 v50 = v47 <= 25.0;
  if (v47 > 25.0)
  {
    *(_BYTE *)(a1 + 56) = 0;
    *a3 = 1;
  }

  double v51 = *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 8 * (*(void *)(a1 + 440) / 0x33uLL))
                  + 80 * (*(void *)(a1 + 440) % 0x33uLL)
                  + 72);
  if (v51 != 8)
  {
    if (v51 == 5)
    {
      unint64_t v49 = 0;
      *(_BYTE *)(a1 + 57) = 0;
      goto LABEL_71;
    }

    if (v51 != 4) {
      goto LABEL_72;
    }
  }

  __int16 v50 = 0;
  *(_BYTE *)(a1 + 56) = 0;
LABEL_71:
  *a3 = 1;
LABEL_72:
  __int16 v52 = 0;
  if (v46)
  {
    double v53 = *(void *)(a1 + 440);
    __int16 v54 = 0.0;
    __int128 v44 = 0.0;
    do
    {
      uint64_t v55 = *(void *)(*(void *)(a1 + 416) + 8 * (v53 / 0x33)) + 80 * (v53 % 0x33);
      v56 = *(_DWORD *)(v55 + 56);
      __int16 v54 = v54 + *(double *)(v55 + 8) * (double)v56;
      __int128 v44 = v44 + *(double *)(v55 + 16) * (double)v56;
      v52 += v56;
      ++v53;
      --v46;
    }

    while (v46);
    goto LABEL_77;
  }

  BOOL v14 = *(double *)(a2 + 4);
  unint64_t v15 = *(double *)(a2 + 12);
  uint64_t v16 = *(double *)(a3 + 4);
  double v17 = *(double *)(a3 + 12);
  if (sub_100D2D9C0(v14, v15, v16, v17)) {
    sub_100D2D43C(v14, v15, v16, v17);
  }
  else {
    sub_100D2DBDC(a1, v14, v15, v16, v17, v9);
  }
}

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018817F0);
    }
    unint64_t v30 = qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    unint64_t v32 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    else {
      double v33 = (uint64_t *)*v32;
    }
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    __int16 v60 = 2082;
    uint64_t v61 = "";
    __int16 v62 = 2114;
    uint64_t v63 = v31;
    __int16 v64 = 2082;
    *(void *)double v65 = v33;
    *(_WORD *)&v65[8] = 2050;
    *(void *)&v65[10] = a1;
    unint64_t v18 = "{msg%{public}.0s:disconnected #dic skip sending diagnostic mask, ClientKeyPath:%{public, location:"
          "escape_only}@, msg:%{public, location:escape_only}s, self:%{public}p}";
    BOOL v19 = (os_log_s *)v30;
    char v20 = OS_LOG_TYPE_DEFAULT;
LABEL_36:
    unint64_t v21 = 48;
    goto LABEL_37;
  }

  uint64_t v11 = (const std::string *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  double v12 = std::string::compare(v11, "kCLConnectionMessageLocationUnavailable");
  unint64_t v13 = v12;
  BOOL v14 = (uint64_t *)(a1 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v12)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
      double v26 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = *(void *)(a1 + 16);
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        __int16 v60 = 2082;
        uint64_t v61 = "";
        __int16 v62 = 2114;
        uint64_t v63 = v27;
        __int16 v64 = 1026;
        *(_DWORD *)double v65 = v28;
        *(_WORD *)&v65[4] = 2050;
        *(void *)&v65[6] = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic sending message to disconnected client. skip messageSending and performAppLaunch , ClientKeyPath:%{public, location:escape_only}@, dicType:%{public}d, this:%{public}p}",  buf,  0x2Cu);
      }

      objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLApplicationLifecycleManager"),  "launchApplication:requiringAuthForServiceMask:",  objc_msgSend(*(id *)(a1 + 16), "legacyClientKey"),  a3);
      if (!*(void *)(a1 + 104)) {
        *(void *)(a1 + 104) = mach_continuous_time();
      }
      uint64_t v29 = *(char ***)(a1 + 144);
      if (v29) {
        sub_1000E8F38(v29, (__int128 *)a2);
      }
      return;
    }

    goto LABEL_29;
  }

  if (([*(id *)(a1 + 40) isNonProvisionallyAuthorizedForServiceTypeMask:a3] & 1) == 0)
  {
LABEL_13:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    unint64_t v22 = qword_101934978;
    if (!os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO)) {
      return;
    }
    BOOL v23 = *(void *)(a1 + 16);
    uint64_t v24 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    else {
      unint64_t v25 = (uint64_t *)*v24;
    }
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    __int16 v60 = 2082;
    uint64_t v61 = "";
    __int16 v62 = 2114;
    uint64_t v63 = v23;
    __int16 v64 = 2050;
    *(void *)double v65 = a1;
    *(_WORD *)&v65[8] = 2082;
    *(void *)&v65[10] = v25;
    unint64_t v18 = "{msg%{public}.0s:Client not NonProvisionally authorized for message., ClientKeyPath:%{public, loca"
          "tion:escape_only}@, this:%{public}p, message:%{public, location:escape_only}s}";
    BOOL v19 = (os_log_s *)v22;
    char v20 = OS_LOG_TYPE_INFO;
    goto LABEL_36;
  }

  if (v13) {
    goto LABEL_38;
  }
LABEL_8:
  if (*(void *)(a1 + 152) != objc_msgSend( objc_msgSend( (id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2),  "objectForKeyedSubscript:",  @"kCLConnectionMessageDiagnosticsKey"),  "unsignedIntValue"))
  {
LABEL_38:
    if (objc_msgSend( objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "allKeys"),  "containsObject:",  @"kCLConnectionMessageDiagnosticsKey")) {
      *(void *)(a1 + 152) = objc_msgSend( objc_msgSend( (id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2),  "objectForKeyedSubscript:",  @"kCLConnectionMessageDiagnosticsKey"),  "unsignedIntValue");
    }
    sub_1010DDBC0(buf, "Location");
    sub_1010DDBC0(__p, "Location subscription");
    sub_100D55A48(a1, (uint64_t *)buf, (uint64_t *)__p);
    if (v58 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE3(v63) < 0) {
      operator delete(*(void **)buf);
    }
    double v34 = *v14;
    uint64_t v35 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v55 = *(CLConnectionMessage **)a2;
    v56 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        unint64_t v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }

    CLConnection::sendMessage(v34, &v55);
    double v38 = v56;
    if (!v56) {
      goto LABEL_51;
    }
    BOOL v39 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if ((a4 & 1) != 0) {
        return;
      }
    }

    else
    {
LABEL_51:
      if ((a4 & 1) != 0) {
        return;
      }
    }

    if ((a3 & 0x13) == 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
      __int16 v50 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        double v51 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        __int16 v60 = 2082;
        uint64_t v61 = "";
        __int16 v62 = 2114;
        uint64_t v63 = v51;
        __int16 v64 = 2050;
        *(void *)double v65 = a1;
        *(_WORD *)&v65[8] = 1026;
        *(_DWORD *)&v65[10] = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:passed in service type mask is not supported for #dic, ClientKeyPath:%{public, lo cation:escape_only}@, this:%{public}p, serviceTypeMask:%{public}d}",  buf,  0x2Cu);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
      }

      __int16 v52 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        double v53 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        __int16 v60 = 2082;
        uint64_t v61 = "";
        __int16 v62 = 2114;
        uint64_t v63 = v53;
        __int16 v64 = 2050;
        *(void *)double v65 = a1;
        *(_WORD *)&v65[8] = 1026;
        *(_DWORD *)&v65[10] = a3;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v52,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "passed in service type mask is not supported for #dic",  "{msg%{public}.0s:passed in service type mask is not supported for #dic, ClientKeyPath:%{public, lo cation:escape_only}@, this:%{public}p, serviceTypeMask:%{public}d}",  buf,  0x2Cu);
      }

      return;
    }

    if ((a3 & 2) != 0) {
      uint64_t v41 = 1LL;
    }
    else {
      uint64_t v41 = ~(4 * (_BYTE)a3) & 4;
    }
    uint64_t v42 = *(unsigned __int8 *)(a1 + 160);
    if (!*(_BYTE *)(a1 + 160)) {
      *(_BYTE *)(a1 + 160) = 1;
    }
    __int128 v44 = *(void *)(a1 + 24);
    uint64_t v43 = (uint64_t *)(a1 + 24);
    v45 = v43 - 1;
    sub_10054FF68(v44, *(v43 - 1), v41, v42 == 0, a5);
    __int16 v46 = *v43;
    int v47 = *v45;
    __int16 v48 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    unint64_t v49 = *((char *)v48 + 23);
    if (v49 < 0)
    {
      if (v48[1] != 39LL)
      {
LABEL_73:
        __int16 v54 = 1LL;
        goto LABEL_74;
      }

      __int16 v48 = (void *)*v48;
    }

    else if (v49 != 39)
    {
      goto LABEL_73;
    }

    __int16 v54 = memcmp(v48, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_74:
    sub_10055AF98(v46, v47, v54, 1);
    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018817F0);
  }
  unint64_t v15 = qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 16);
    double v17 = *(void *)(a1 + 152);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    __int16 v60 = 2082;
    uint64_t v61 = "";
    __int16 v62 = 2114;
    uint64_t v63 = v16;
    __int16 v64 = 2050;
    *(void *)double v65 = a1;
    *(_WORD *)&v65[8] = 1026;
    *(_DWORD *)&v65[10] = v17;
    unint64_t v18 = "{msg%{public}.0s:#dic skip sending diagnostic mask - same as last one, ClientKeyPath:%{public, loc"
          "ation:escape_only}@, self:%{public}p, DiagnosticMask:%{public}d}";
    BOOL v19 = (os_log_s *)v15;
    char v20 = OS_LOG_TYPE_DEFAULT;
    unint64_t v21 = 44;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101883C20);
  }
  BOOL v23 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v8 + 16LL))(buf, v8);
    uint64_t v24 = v56 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)__int128 v44 = 136380675;
    *(void *)&v44[4] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe",  v44,  0xCu);
    if (SHIBYTE(v56) < 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101883C20);
    }
    double v34 = qword_101934858;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v8 + 16LL))(v44, v8);
    if (v47 >= 0) {
      uint64_t v35 = v44;
    }
    else {
      uint64_t v35 = *(_BYTE **)v44;
    }
    uint64_t v42 = 136380675;
    uint64_t v43 = v35;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  16LL,  "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe",  &v42,  12,  v38,  v39,  __p,  v41);
    unint64_t v37 = v36;
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)v44);
    }
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)",  "%s\n",  v37);
    if (v37 != buf) {
      free(v37);
    }
  }

  *(_DWORD *)(a1 + 84) |= 8u;
  unint64_t v13 = *(void **)(a1 + 32);
  if (!v13)
  {
    unint64_t v13 = operator new(0x90uLL);
    v13[5] = 0LL;
    v13[6] = 0LL;
    *((_DWORD *)v13 + 14) = 0;
    v13[8] = 0LL;
    v13[9] = 0LL;
    *((_DWORD *)v13 + 20) = 0;
    v13[11] = 0LL;
    v13[12] = 0LL;
    *((_DWORD *)v13 + 26) = 0;
    v13[14] = 0LL;
    v13[15] = 0LL;
    *((_DWORD *)v13 + 32) = 0;
    v13[17] = 0LL;
    *unint64_t v13 = off_101887620;
    v13[1] = 0LL;
    v13[2] = 0LL;
    v13[3] = 0LL;
    *((_DWORD *)v13 + 8) = 0;
    *(void *)(a1 + 32) = v13;
  }

  BOOL v14 = *(void *)(a2 + 32);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A20E0 + 32);
  }
  float result = sub_100E3A58C((uint64_t)v13, v14);
  unint64_t v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  unint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A20E0 + 56);
  }
  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v13,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    goto LABEL_35;
  }

  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

        if (v16 <= a2) {
          int64_t v5 = v16 + 1;
        }
        else {
          unint64_t v3 = v16;
        }
      }
    }

    while (v3 != a2);
  }

  return result;
}

  *(_BYTE *)a1 = 1;
}

  double v12 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 24) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isNearFall", *(_BYTE *)(a1 + 70));
  int64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 56), 0xAu);
  unint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "inclination", *(double *)(a1 + 32));
  int64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
  unint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "averagePower", *(float *)(a1 + 44));
  int64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 108), 5u);
  unint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 48));
  int64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  unint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

  uint64_t v8 = *(_BYTE *)(a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "currentHorzRotRateMax", *(float *)(a1 + 76));
  int64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 6u);
  unint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v10;
  if ((*(_WORD *)(a2 + 88) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

  float result = PB::Writer::write(this, *(double *)(v3 + 152), 0xBu);
  unint64_t v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) == 0)
  {
LABEL_25:
    if ((v18 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  }

  uint64_t v28 = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 48) |= 0x100u;
  *(_BYTE *)(a1 + 42) = v28;
  BOOL v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 0x10) != 0) {
    goto LABEL_30;
  }
LABEL_20:
  if ((v19 & 0x400) != 0)
  {
LABEL_21:
    char v20 = *(_BYTE *)(a2 + 44);
    *(_WORD *)(a1 + 48) |= 0x400u;
    *(_BYTE *)(a1 + 44) = v20;
  }

  return a1;
}

  uint64_t v16 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v16;
  if ((*(_WORD *)(a2 + 68) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return result;
}

  uint64_t v10 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 68) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "negPeakTimestampUs", *(void *)(a1 + 8));
  int64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 8u);
  unint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0xBu);
  BOOL v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) == 0)
  {
LABEL_20:
    if ((v14 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0xDu);
  }

  BOOL v14 = *(_DWORD *)(a2 + 112);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 112) = v14;
  int64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "combinedY", *(float *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 144) & 0x80) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "combinedZ", *(float *)(a1 + 100));
LABEL_6:
  unint64_t v6 = *(float **)(a1 + 8);
  unint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "inerAccelApproachMx", v8);
  }

  uint64_t v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "inerAccelCount", *(_DWORD *)(a1 + 104));
    uint64_t v9 = *(_DWORD *)(a1 + 144);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0) {
        goto LABEL_11;
      }
      goto LABEL_33;
    }
  }

  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }

  PB::TextFormatter::format(this, "inertialApproachUnc", *(float *)(a1 + 108));
  uint64_t v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  unint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  BOOL v19 = *(_DWORD *)(a2 + 180);
  v8 |= 0x100u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 180) = v19;
  unint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x80) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 64);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isBaro", *(_BYTE *)(a1 + 58));
  int64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xC9u);
  unint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 56) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "movingGpsCount", *(_DWORD *)(a1 + 56));
  int64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 90), 0x69u);
  unint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 76);
  v3 |= 0x400u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 76) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "nextTimestamp", *(void *)(a1 + 48));
  int64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 88), 9u);
  unint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  unint64_t v15 = *(_DWORD *)(a2 + 140);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 140) = v15;
  int64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "magnitudePercentileThreshold", *(float *)(a1 + 116));
  uint64_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x200) == 0)
  {
LABEL_12:
    if ((v11 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 3u);
  unint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  BOOL v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 48) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "lastTriggerTimestamp", *(void *)(a1 + 56));
  int64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x130u);
  unint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  BOOL v19 = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 192) |= 8u;
  *(void *)(a1 + 104) = v19;
  uint64_t v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x20) == 0)
  {
LABEL_17:
    if ((v11 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 96));
  int64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

        PB::Reader::recallMark(this, v61);
        goto LABEL_81;
      }

      if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_81:
      unint64_t v4 = *((void *)this + 1);
      int64_t v5 = *((void *)this + 2);
      unint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v24 != 2)
    {
      unint64_t v49 = *(char **)(a1 + 16);
      __int16 v48 = *(void *)(a1 + 24);
      if ((unint64_t)v49 >= v48)
      {
        double v51 = (char *)*v10;
        __int16 v52 = (v49 - (_BYTE *)*v10) >> 2;
        double v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_89:
        }
          sub_100007008();
        __int16 v54 = v48 - (void)v51;
        if (v54 >> 1 > v53) {
          double v53 = v54 >> 1;
        }
        else {
          uint64_t v55 = v53;
        }
        if (v55)
        {
          v56 = (char *)sub_10000956C(v11, v55);
          double v51 = *(char **)(a1 + 8);
          unint64_t v49 = *(char **)(a1 + 16);
        }

        else
        {
          v56 = 0LL;
        }

        unint64_t v57 = &v56[4 * v52];
        *(_DWORD *)unint64_t v57 = 0;
        __int16 v50 = v57 + 4;
        while (v49 != v51)
        {
          v58 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }

        *(void *)(a1 + 8) = v57;
        *(void *)(a1 + 16) = v50;
        *(void *)(a1 + 24) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }

      else
      {
        *(_DWORD *)unint64_t v49 = 0;
        __int16 v50 = v49 + 4;
      }

      *(void *)(a1 + 16) = v50;
      v59 = *((void *)this + 1);
      if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((void *)this + 2))
      {
        *(v50 - 1) = *(_DWORD *)(*(void *)this + v59);
        *((void *)this + 1) += 4LL;
      }

      else
      {
        *((_BYTE *)this + 24) = 1;
      }

      goto LABEL_81;
    }

    if ((PB::Reader::placeMark(this, v61, v24, a4) & 1) != 0) {
      return 0LL;
    }
    unint64_t v30 = *((void *)this + 1);
    uint64_t v31 = *((void *)this + 2);
    while (v30 < v31 && !*((_BYTE *)this + 24))
    {
      double v33 = *(char **)(a1 + 16);
      unint64_t v32 = *(void *)(a1 + 24);
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v35 = (char *)*v10;
        uint64_t v36 = (v33 - (_BYTE *)*v10) >> 2;
        unint64_t v37 = v36 + 1;
        double v38 = v32 - (void)v35;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        else {
          BOOL v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_10000956C(v11, v39);
          uint64_t v35 = *(char **)(a1 + 8);
          double v33 = *(char **)(a1 + 16);
        }

        else
        {
          unint64_t v40 = 0LL;
        }

        uint64_t v41 = &v40[4 * v36];
        *(_DWORD *)uint64_t v41 = 0;
        double v34 = v41 + 4;
        while (v33 != v35)
        {
          uint64_t v42 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }

        *(void *)(a1 + 8) = v41;
        *(void *)(a1 + 16) = v34;
        *(void *)(a1 + 24) = &v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }

      else
      {
        *(_DWORD *)double v33 = 0;
        double v34 = v33 + 4;
      }

      *(void *)(a1 + 16) = v34;
      uint64_t v43 = *((void *)this + 1);
      if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
      {
        *((_BYTE *)this + 24) = 1;
        goto LABEL_29;
      }

      *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
      uint64_t v31 = *((void *)this + 2);
      unint64_t v30 = *((void *)this + 1) + 4LL;
      *((void *)this + 1) = v30;
    }

    goto LABEL_29;
  }

  return v6 == 0;
}

  unint64_t v21 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 116) |= 1u;
  *(void *)(a1 + 56) = v21;
  uint64_t v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 8) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "sampleLatency", *(float *)(a1 + 100));
  double v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 9u);
  uint64_t v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_14:
  if ((v8 & 0x80) != 0) {
LABEL_15:
  }
    float result = PB::Writer::write(this, *(float *)(v3 + 100), 0xBu);
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  uint64_t v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    float result = PB::Writer::write(this, v11, 0xCu);
  }

  double v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xDu);
    double v12 = *(_WORD *)(v3 + 116);
  }

  if ((v12 & 0x400) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xEu);
  }
  return result;
}

  uint64_t v8 = *(_DWORD *)(a2 + 16);
  v3 |= 4u;
  *(_WORD *)(a1 + 64) = v3;
  *(_DWORD *)(a1 + 16) = v8;
  if ((*(_WORD *)(a2 + 64) & 1) != 0) {
    goto LABEL_30;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  if ((*(_WORD *)(a2 + 68) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_WORD *)(a1 + 68) = v3 | 0x40;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "hasConsistency", *(_BYTE *)(a1 + 77));
  int64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  unint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 48));
  int64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0xBu);
  unint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isRotating", *(_DWORD *)(a1 + 76));
  if ((*(_DWORD *)(a1 + 124) & 0x10000) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "isTraversingSphere", *(_BYTE *)(a1 + 121));
LABEL_11:
  uint64_t v9 = *(float **)(a1 + 32);
  uint64_t v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    PB::TextFormatter::format(this, "predictedField", v11);
  }

  double v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "scale", *(float *)(a1 + 80));
    double v12 = *(_DWORD *)(a1 + 124);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_33;
    }
  }

  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "timerUnitDistanceThreshold", *(float *)(a1 + 84));
  double v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 56) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed", *(_DWORD *)(a1 + 40));
  int64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 8u);
  unint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isGyroOn", *(_BYTE *)(a1 + 120));
  int64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  unint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

  unint64_t v13 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 64) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isWorkoutElevationFusion", *(_BYTE *)(a1 + 89));
  int64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  unint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  double v12 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 64) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  int64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 68), 0xAu);
  unint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

    sub_100BFC1C0();
  }

  if (v6 == 40)
  {
    if (a2 + 1 == a3) {
      goto LABEL_30;
    }
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      uint64_t v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      double v12 = (unsigned __int8 *)sub_10111DB90(a1, a2 + 3, a3);
      if (v12 == a3) {
        goto LABEL_30;
      }
      unint64_t v3 = v12;
      if (*v12 != 41) {
        goto LABEL_30;
      }
    }

    else
    {
      sub_10111F720((void *)a1);
      unint64_t v13 = *(_DWORD *)(a1 + 28);
      uint64_t v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      BOOL v14 = (unsigned __int8 *)sub_10111DB90(a1, v3 + 1, a3);
      if (v14 == a3 || (unint64_t v3 = v14, *v14 != 41)) {
LABEL_30:
      }
        sub_100BFB3E0();
      sub_10111F784((void *)a1, v13);
    }

    --*v11;
    return ++v3;
  }

  if (v6 == 46)
  {
    unint64_t v7 = operator new(0x10uLL);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *unint64_t v7 = &off_101877D10;
    v7[1] = v9;
    *(void *)(v8 + 8) = v7;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    return ++v3;
  }

  return sub_100BFC20C(a1, a2, a3);
}

  float result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  unint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 48));
  int64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  unint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  uint64_t v10 = *(_BYTE *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 86) = v10;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0) {
    goto LABEL_30;
  }
  return result;
}

  uint64_t v11 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 52) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "isMovingFiltered", *(float *)(a1 + 44));
  int64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 56), 9u);
  unint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  double v12 = *(_BYTE *)(a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 78) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "hostWakeDelay", *(double *)(a1 + 16));
  int64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 82), 0xAu);
  unint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  unint64_t v15 = *(_BYTE *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v15;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(float *)(a1 + 44));
  int64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
LABEL_31:
    PB::TextFormatter::format(this, "thetaYawFaceDeg", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_16;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 16), 0xDu);
  unint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0xFu);
  }

  uint64_t v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v16;
  if ((*(_WORD *)(a2 + 100) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return result;
}

  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  int64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 100), 5u);
  unint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  BOOL v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 48) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  int64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 88), 0xCu);
  unint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

        PB::Reader::recallMark(this, v61);
        goto LABEL_81;
      }

      if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_81:
      unint64_t v4 = *((void *)this + 1);
      int64_t v5 = *((void *)this + 2);
      unint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v24 != 2)
    {
      unint64_t v49 = *(char **)(a1 + 16);
      __int16 v48 = *(void *)(a1 + 24);
      if ((unint64_t)v49 >= v48)
      {
        double v51 = (char *)*v10;
        __int16 v52 = (v49 - (_BYTE *)*v10) >> 3;
        double v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61) {
LABEL_89:
        }
          sub_100007008();
        __int16 v54 = v48 - (void)v51;
        if (v54 >> 2 > v53) {
          double v53 = v54 >> 2;
        }
        else {
          uint64_t v55 = v53;
        }
        if (v55)
        {
          v56 = (char *)sub_1000071BC(v11, v55);
          double v51 = *(char **)(a1 + 8);
          unint64_t v49 = *(char **)(a1 + 16);
        }

        else
        {
          v56 = 0LL;
        }

        unint64_t v57 = &v56[8 * v52];
        *(void *)unint64_t v57 = 0LL;
        __int16 v50 = v57 + 8;
        while (v49 != v51)
        {
          v58 = *((void *)v49 - 1);
          v49 -= 8;
          *((void *)v57 - 1) = v58;
          v57 -= 8;
        }

        *(void *)(a1 + 8) = v57;
        *(void *)(a1 + 16) = v50;
        *(void *)(a1 + 24) = &v56[8 * v55];
        if (v51) {
          operator delete(v51);
        }
      }

      else
      {
        *(void *)unint64_t v49 = 0LL;
        __int16 v50 = v49 + 8;
      }

      *(void *)(a1 + 16) = v50;
      v59 = *((void *)this + 1);
      if (v59 <= 0xFFFFFFFFFFFFFFF7LL && v59 + 8 <= *((void *)this + 2))
      {
        *(v50 - 1) = *(void *)(*(void *)this + v59);
        *((void *)this + 1) += 8LL;
      }

      else
      {
        *((_BYTE *)this + 24) = 1;
      }

      goto LABEL_81;
    }

    if ((PB::Reader::placeMark(this, v61, v24, a4) & 1) != 0) {
      return 0LL;
    }
    double v34 = *((void *)this + 1);
    uint64_t v35 = *((void *)this + 2);
    while (v34 < v35 && !*((_BYTE *)this + 24))
    {
      unint64_t v37 = *(char **)(a1 + 16);
      uint64_t v36 = *(void *)(a1 + 24);
      if ((unint64_t)v37 >= v36)
      {
        BOOL v39 = (char *)*v10;
        unint64_t v40 = (v37 - (_BYTE *)*v10) >> 3;
        uint64_t v41 = v40 + 1;
        uint64_t v42 = v36 - (void)v39;
        if (v42 >> 2 > v41) {
          uint64_t v41 = v42 >> 2;
        }
        else {
          uint64_t v43 = v41;
        }
        if (v43)
        {
          __int128 v44 = (char *)sub_1000071BC(v11, v43);
          BOOL v39 = *(char **)(a1 + 8);
          unint64_t v37 = *(char **)(a1 + 16);
        }

        else
        {
          __int128 v44 = 0LL;
        }

        v45 = &v44[8 * v40];
        *(void *)v45 = 0LL;
        double v38 = v45 + 8;
        while (v37 != v39)
        {
          __int16 v46 = *((void *)v37 - 1);
          v37 -= 8;
          *((void *)v45 - 1) = v46;
          v45 -= 8;
        }

        *(void *)(a1 + 8) = v45;
        *(void *)(a1 + 16) = v38;
        *(void *)(a1 + 24) = &v44[8 * v43];
        if (v39) {
          operator delete(v39);
        }
      }

      else
      {
        *(void *)unint64_t v37 = 0LL;
        double v38 = v37 + 8;
      }

      *(void *)(a1 + 16) = v38;
      int v47 = *((void *)this + 1);
      if (v47 > 0xFFFFFFFFFFFFFFF7LL || v47 + 8 > *((void *)this + 2))
      {
        *((_BYTE *)this + 24) = 1;
        goto LABEL_29;
      }

      *(v38 - 1) = *(void *)(*(void *)this + v47);
      uint64_t v35 = *((void *)this + 2);
      double v34 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v34;
    }

    goto LABEL_29;
  }

  return v6 == 0;
}

  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  int64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_31:
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
    if ((*(_WORD *)(a1 + 80) & 0x4000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_16;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 72), 0xDu);
  unint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xFu);
  }

          PB::Reader::recallMark(this, v58);
          goto LABEL_81;
        }

        __int16 v46 = *(char **)(a1 + 16);
        v45 = *(void *)(a1 + 24);
        if ((unint64_t)v46 >= v45)
        {
          __int16 v48 = (char *)*v10;
          unint64_t v49 = (v46 - (_BYTE *)*v10) >> 3;
          __int16 v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61) {
LABEL_89:
          }
            sub_100007008();
          double v51 = v45 - (void)v48;
          if (v51 >> 2 > v50) {
            __int16 v50 = v51 >> 2;
          }
          else {
            __int16 v52 = v50;
          }
          if (v52)
          {
            double v53 = (char *)sub_1000071BC(v11, v52);
            __int16 v48 = *(char **)(a1 + 8);
            __int16 v46 = *(char **)(a1 + 16);
          }

          else
          {
            double v53 = 0LL;
          }

          __int16 v54 = &v53[8 * v49];
          *(void *)__int16 v54 = 0LL;
          int v47 = v54 + 8;
          while (v46 != v48)
          {
            uint64_t v55 = *((void *)v46 - 1);
            v46 -= 8;
            *((void *)v54 - 1) = v55;
            v54 -= 8;
          }

          *(void *)(a1 + 8) = v54;
          *(void *)(a1 + 16) = v47;
          *(void *)(a1 + 24) = &v53[8 * v52];
          if (v48) {
            operator delete(v48);
          }
        }

        else
        {
          *(void *)__int16 v46 = 0LL;
          int v47 = v46 + 8;
        }

        *(void *)(a1 + 16) = v47;
        v56 = *((void *)this + 1);
        if (v56 > 0xFFFFFFFFFFFFFFF7LL || v56 + 8 > *((void *)this + 2))
        {
LABEL_78:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_81;
        }

        *(v47 - 1) = *(void *)(*(void *)this + v56);
        goto LABEL_80;
      }

      if ((_DWORD)v25 == 1)
      {
        uint64_t v28 = (char *)operator new(0x48uLL);
        *(void *)uint64_t v28 = &off_1018A06C0;
        *((_DWORD *)v28 + 16) = 0;
        *(_OWORD *)(v28 + 8) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_OWORD *)(v28 + 40) = 0u;
        uint64_t v29 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
          uint64_t v28 = *(char **)(a1 + 40);
        }

        if (!PB::Reader::placeMark(this, v58, v26, v27)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v28 + 16LL))(v28, this) & 1) == 0)
        {
          return 0LL;
        }

        goto LABEL_29;
      }

      if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_81:
      unint64_t v4 = *((void *)this + 1);
      int64_t v5 = *((void *)this + 2);
      unint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    *(_BYTE *)(a1 + 48) |= 1u;
    unint64_t v30 = *((void *)this + 1);
    if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2)) {
      goto LABEL_78;
    }
    *(void *)(a1 + 32) = *(void *)(*(void *)this + v30);
LABEL_80:
    *((void *)this + 1) += 8LL;
    goto LABEL_81;
  }

  return v6 == 0;
}

  unint64_t v6 = *(_BYTE *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v6;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  int64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  unint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 120) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

  uint64_t v8 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 96) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "elevationSource", *(_DWORD *)(a1 + 112));
  int64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 88), 6u);
  unint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

  float result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 104) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }

  PB::TextFormatter::format(this, "rotationRateMagnitudeMin", *(double *)(a1 + 64));
  int64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 96), 0xBu);
  unint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

  double v26 = *(float **)(a1 + 288);
  unint64_t v25 = *(float **)(a1 + 296);
  if (v26 == v25)
  {
    v8.n128_u64[0] = 0LL;
  }

  else
  {
    double v27 = v26 + 8;
    if (v26 + 8 == v25)
    {
      uint64_t v29 = *(float **)(a1 + 288);
      double v27 = v29;
    }

    else
    {
      uint64_t v28 = v26[8];
      if (v28 >= *v26) {
        uint64_t v29 = *(float **)(a1 + 288);
      }
      else {
        uint64_t v29 = v26 + 8;
      }
      if (v28 < *v26) {
        double v27 = *(float **)(a1 + 288);
      }
      unint64_t v30 = v26 + 16;
      if (v26 + 16 != v25)
      {
        if (v28 >= *v26) {
          uint64_t v28 = *v26;
        }
        while (1)
        {
          uint64_t v31 = v30;
          unint64_t v32 = v30 + 8;
          if (v32 == v25) {
            break;
          }
          double v33 = v31[8];
          double v34 = *v31;
          if (v33 >= *v31)
          {
            uint64_t v35 = v26 + 24;
            if (v34 < v28)
            {
              uint64_t v28 = *v31;
              uint64_t v29 = v31;
            }

            if (v33 >= *v27) {
              double v27 = v35;
            }
          }

          else
          {
            uint64_t v28 = *v29;
            if (v33 < *v29)
            {
              uint64_t v28 = v31[8];
              uint64_t v29 = v32;
            }

            if (v34 >= *v27) {
              double v27 = v31;
            }
          }

          unint64_t v30 = v31 + 16;
          double v26 = v31;
          if (v31 + 16 == v25) {
            goto LABEL_58;
          }
        }

        if (*v31 >= *v29)
        {
          if (*v31 >= *v27) {
            double v27 = v31;
          }
        }

        else
        {
          uint64_t v29 = v31;
        }
      }
    }

LABEL_48:
    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

      ++v21;
    }

    while (v21 != v20);
LABEL_56:
    if (v22 != v20 && v22 == v11) {
      return 2LL;
    }
  }

  double v26 = 19LL;
  if (v1 < 0x13) {
    double v26 = v1;
  }
  if (v26)
  {
    double v27 = &v11[v26];
    uint64_t v28 = v11;
    uint64_t v29 = v27;
    do
    {
      if (*v28 == 73)
      {
        unint64_t v30 = &_mh_execute_header.magic + 1;
        while (v30 != 19)
        {
          if (&v28[v30] == v27) {
            goto LABEL_71;
          }
          uint64_t v31 = v28[v30];
          unint64_t v32 = aInternalclient_1[v30++];
          if (v31 != v32) {
            goto LABEL_63;
          }
        }

        uint64_t v29 = v28;
      }

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

  float result = *(double *)(a2 + 104);
  *(_DWORD *)(a1 + 160) |= 0x4000u;
  *(double *)(a1 + 104) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x8000) != 0)
  {
LABEL_22:
    float result = *(double *)(a2 + 112);
    *(_DWORD *)(a1 + 160) |= 0x8000u;
    *(double *)(a1 + 112) = result;
    unint64_t v6 = *(_DWORD *)(a2 + 160);
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(v5 + 48),  (unint64_t)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  (int)a2,  *(double *)(v5 + 96),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

  double v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  int64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x800) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  (int)a2,  *(double *)(v5 + 136),  a3);
  if ((*(_DWORD *)(v5 + 152) & 0x200000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(unsigned __int8 *)(v5 + 144),  (BOOL)a2,  a4);
  }
  return result;
}

  double v27 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 364) |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v27;
  unint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x2000) == 0)
  {
LABEL_31:
    if ((v13 & 0x4000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_50;
  }

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

        i = v30;
        if (v30 < (unint64_t)v33)
        {
          BOOL v39 = v33;
          do
          {
            v226 = *(_OWORD *)i;
            v234 = *(_OWORD *)(i + 16);
            *(_OWORD *)v249 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v249[16] = *(_OWORD *)(i + 80);
            v239 = *(_OWORD *)(i + 32);
            v244 = *(_OWORD *)(i + 48);
            uint64_t v41 = *((_OWORD *)v39 + 3);
            unint64_t v40 = *((_OWORD *)v39 + 4);
            uint64_t v42 = *((_OWORD *)v39 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v39 + 73);
            *(_OWORD *)(i + 48) = v41;
            *(_OWORD *)(i + 64) = v40;
            *(_OWORD *)(i + 32) = v42;
            uint64_t v43 = *((_OWORD *)v39 + 1);
            *(_OWORD *)i = *(_OWORD *)v39;
            *(_OWORD *)(i + 16) = v43;
            *(_OWORD *)BOOL v39 = v226;
            *((_OWORD *)v39 + 1) = v234;
            *(_OWORD *)((char *)v39 + 73) = *(_OWORD *)&v249[9];
            *((_OWORD *)v39 + 3) = v244;
            *((_OWORD *)v39 + 4) = *(_OWORD *)v249;
            *((_OWORD *)v39 + 2) = v239;
            do
            {
              do
              {
                i += 96LL;
                __int128 v44 = *(_DWORD *)(i + 56);
              }

              while (v44 > v21);
              if (v44 != v21) {
                break;
              }
              v45 = *(_DWORD *)(i + 24);
            }

            while (v45 > v25 || v45 == v25 && *(double *)(i + 40) < v26);
            __int16 v46 = v39 - 12;
            int v47 = *((_DWORD *)v39 - 10);
            if (v47 <= v21)
            {
              __int16 v48 = v39 - 7;
              do
              {
                if (v47 == v21)
                {
                  unint64_t v49 = *((_DWORD *)v48 - 4);
                  if (v49 > v25) {
                    break;
                  }
                  if (v49 == v25 && *v48 < v26) {
                    goto LABEL_64;
                  }
                }

                v46 -= 12;
                int v47 = *((_DWORD *)v48 - 20);
                v48 -= 12;
              }

              while (v47 <= v21);
              __int16 v46 = v48 - 5;
            }

        i = v29;
        if (v29 < (unint64_t)v32)
        {
          double v38 = v32;
          do
          {
            v222 = *(_OWORD *)i;
            v230 = *(_OWORD *)(i + 16);
            *(_OWORD *)v245 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v245[16] = *(_OWORD *)(i + 80);
            v235 = *(_OWORD *)(i + 32);
            v240 = *(_OWORD *)(i + 48);
            unint64_t v40 = *((_OWORD *)v38 + 3);
            BOOL v39 = *((_OWORD *)v38 + 4);
            uint64_t v41 = *((_OWORD *)v38 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v38 + 73);
            *(_OWORD *)(i + 48) = v40;
            *(_OWORD *)(i + 64) = v39;
            *(_OWORD *)(i + 32) = v41;
            uint64_t v42 = *((_OWORD *)v38 + 1);
            *(_OWORD *)i = *(_OWORD *)v38;
            *(_OWORD *)(i + 16) = v42;
            *(_OWORD *)double v38 = v222;
            *((_OWORD *)v38 + 1) = v230;
            *(_OWORD *)((char *)v38 + 73) = *(_OWORD *)&v245[9];
            *((_OWORD *)v38 + 3) = v240;
            *((_OWORD *)v38 + 4) = *(_OWORD *)v245;
            *((_OWORD *)v38 + 2) = v235;
            do
            {
              do
              {
                i += 96LL;
                uint64_t v43 = *(_DWORD *)(i + 56);
              }

              while (v43 > v21);
              if (v43 != v21) {
                break;
              }
              __int128 v44 = *(_DWORD *)(i + 24);
            }

            while (v44 > (int)v25 || v44 == (_DWORD)v25 && *(double *)(i + 32) < v26);
            v45 = v38 - 12;
            __int16 v46 = *((_DWORD *)v38 - 10);
            if (v46 <= v21)
            {
              int v47 = v38 - 8;
              do
              {
                if (v46 == v21)
                {
                  __int16 v48 = *((_DWORD *)v47 - 2);
                  if (v48 == (_DWORD)v25 && *v47 < v26) {
                    goto LABEL_64;
                  }
                }

                v45 -= 12;
                __int16 v46 = *((_DWORD *)v47 - 18);
                v47 -= 12;
              }

              while (v46 <= v21);
              v45 = v47 - 4;
            }

  __int16 v50 = 0LL;
LABEL_49:
  unint64_t v57 = v72;
  v72 = 0LL;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
  }
  return v50;
}

      *((void *)&v117 + 1) = 0xBFF0000000000000LL;
      v118 = 0;
      v120 = 0;
      *(double *)&v117 = sub_100425654(a1);
      v119 = sub_10047D7E8(a1, 0);
      uint64_t v41 = *(int **)(a1 + 264);
      uint64_t v42 = (int *)(a1 + 272);
      if (v41 != (int *)(a1 + 272))
      {
        uint64_t v43 = a1 + 240;
        do
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          __int128 v44 = (os_log_s *)p_vtable[263];
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            v45 = v117;
            __int16 v46 = sub_10000C6DC(v43, v41 + 8);
            unint64_t v49 = v46[1];
            int v47 = v46 + 1;
            __int16 v48 = v49;
            else {
              __int16 v50 = (uint64_t *)v48;
            }
            double v51 = *((unsigned __int8 *)sub_10000C6DC(v43, v41 + 8) + 863);
            *(_DWORD *)buf = 134349826;
            *(void *)&buf[4] = v45;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v50;
            p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
            *(_WORD *)&buf[22] = 1026;
            *(_DWORD *)&buf[24] = v51;
            *(_WORD *)&buf[28] = 1026;
            *(_DWORD *)&buf[30] = v119;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{pu blic}d,operating mode,%{public}d",  buf,  0x22u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101838C20);
            }
            uint64_t v55 = p_vtable[263];
            v56 = v117;
            unint64_t v57 = sub_10000C6DC(v43, v41 + 8);
            __int16 v60 = v57[1];
            v58 = v57 + 1;
            v59 = v60;
            else {
              uint64_t v61 = (uint64_t *)v59;
            }
            __int16 v62 = *((unsigned __int8 *)sub_10000C6DC(v43, v41 + 8) + 863);
            *(_DWORD *)v113 = 134349826;
            *(void *)&v113[4] = v56;
            *(_WORD *)&v113[12] = 2082;
            *(void *)&v113[14] = v61;
            *(_WORD *)&v113[22] = 1026;
            v114 = v62;
            v115 = 1026;
            v116 = v119;
            LODWORD(v110) = 34;
            uint64_t v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v55,  2LL,  "CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public }s,active,%{public}d,operating mode,%{public}d",  v113,  v110);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v63);
            if (v63 != buf) {
              free(v63);
            }
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }

          __int16 v52 = *((void *)v41 + 5);
          *(_DWORD *)buf = 0;
          sub_10047DC04(v52, (unsigned int *)buf, &v117);
          double v53 = (int *)*((void *)v41 + 1);
          if (v53)
          {
            do
            {
              __int16 v54 = v53;
              double v53 = *(int **)v53;
            }

            while (v53);
          }

          else
          {
            do
            {
              __int16 v54 = (int *)*((void *)v41 + 2);
              _ZF = *(void *)v54 == (void)v41;
              uint64_t v41 = v54;
            }

            while (!_ZF);
          }

          uint64_t v41 = v54;
        }

        while (v54 != v42);
      }

      return 1LL;
    case 0xFu:
      if (*(_DWORD *)(a1 + 320))
      {
        __asm { FMOV            V0.2D, #-1.0 }

        *(_OWORD *)buf = _Q0;
        *(_WORD *)&buf[16] = 0;
        *(_DWORD *)&buf[24] = 0;
        *(_DWORD *)&buf[20] = sub_10047D7E8(a1, 15);
        *(void *)v113 = a1 + 320;
        double v65 = sub_10000C858((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_1012CF090, (_DWORD **)v113)[5];
        __int16 v66 = sub_100419014(buf);
        int v68 = v65[1];
        uint64_t v67 = (void *)v65[2];
        v69 = 15LL;
        goto LABEL_117;
      }

      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v99 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_FAULT, "BATCH:unsupported platform", buf, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        return 1LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      *(_WORD *)v113 = 0;
      LODWORD(v110) = 2;
      v100 = (_BYTE *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "BATCH:unsupported platform",  v113,  v110);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n");
      goto LABEL_145;
    case 0x11u:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v70 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned on", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        *(_WORD *)v113 = 0;
        LODWORD(v110) = 2;
        v109 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "CLMM,RunMapMatching is turned on",  v113,  v110);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v109);
        if (v109 != buf) {
          free(v109);
        }
      }

      *(_BYTE *)(a1 + 660) = 1;
      (*(void (**)(void))(**(void **)(a1 + 288) + 160LL))(*(void *)(a1 + 288));
      return 1LL;
    case 0x16u:
      if (*(_DWORD *)(a1 + 312))
      {
        *(void *)buf = a1 + 312;
        v71 = sub_10000C858((uint64_t **)(a1 + 264), (int *)(a1 + 312), (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5];
        int v68 = v71[1];
        uint64_t v67 = (void *)v71[2];
        v69 = 22LL;
LABEL_116:
        __int16 v66 = 0LL;
LABEL_117:
        [v67 register:v68 forNotification:v69 registrationInfo:v66];
      }

      else
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101838C60);
        }
        v101 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, kNotificationWifiLocationBatched unsupported",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101838C60);
          }
          *(_WORD *)v113 = 0;
          LODWORD(v110) = 2;
          v100 = (_BYTE *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbReg, kNotificationWifiLocationBatched unsupported",  v113,  v110);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n");
LABEL_145:
          if (v100 != buf) {
            free(v100);
          }
        }
      }

      return 1LL;
    case 0x1Cu:
      v72 = 0LL;
      uint64_t v73 = *(_DWORD *)(a1 + 336);
      LODWORD(v117) = *(_DWORD *)(a1 + 324);
      DWORD1(v117) = v73;
      do
      {
        if (*(_DWORD *)((char *)&v117 + v72))
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          v74 = (os_log_s *)p_vtable[263];
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            v75 = *a2;
            uint64_t v76 = sub_10000C6DC(a1 + 240, (int *)((char *)&v117 + v72));
            unint64_t v79 = v76[1];
            v77 = v76 + 1;
            v78 = v79;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v75;
            p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "registering notification,%{public}d,location provider,%{public}s",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101838C20);
            }
            v81 = p_vtable[263];
            uint64_t v82 = *a2;
            v83 = sub_10000C6DC(a1 + 240, (int *)((char *)&v117 + v72));
            v86 = v83[1];
            v84 = v83 + 1;
            v85 = v86;
            *(_DWORD *)v113 = 67240450;
            *(_DWORD *)&v113[4] = v82;
            *(_WORD *)&v113[8] = 2082;
            *(void *)&v113[10] = v85;
            LODWORD(v110) = 18;
            v87 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v81,  2LL,  "registering notification,%{public}d,location provider,%{public}s",  v113,  v110);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v87);
            if (v87 != buf) {
              free(v87);
            }
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }

          v80 = sub_10000C6DC(a1 + 264, (int *)((char *)&v117 + v72));
          [*(id *)(*v80 + 16) register:*(void *)(*v80 + 8) forNotification:28 registrationInfo:0];
        }

        v72 += 4LL;
      }

      while (v72 != 8);
      if (*(_DWORD *)(a1 + 320))
      {
        v93 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v93 + 16) register:*(void *)(*v93 + 8) forNotification:28 registrationInfo:0];
      }

      v94 = *(void *)(a1 + 288);
      if (!v94) {
        return 1LL;
      }
      v95 = *(void (**)(void))(*(void *)v94 + 248LL);
LABEL_127:
      v95();
      return 1LL;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 320))
      {
        v96 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v96 + 16) register:*(void *)(*v96 + 8) forNotification:29 registrationInfo:0];
      }

      if (*(_DWORD *)(a1 + 328))
      {
        v97 = sub_10000C6DC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v97 + 16) register:*(void *)(*v97 + 8) forNotification:29 registrationInfo:0];
      }

      v95 = *(void (**)(void))(**(void **)(a1 + 288) + 240LL);
      goto LABEL_127;
    case 0x22u:
      if (!*(_DWORD *)(a1 + 320)) {
        return 1LL;
      }
      v88 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
      int v68 = *(void *)(*v88 + 8);
      uint64_t v67 = *(void **)(*v88 + 16);
      v69 = 34LL;
      goto LABEL_116;
    case 0x23u:
      if (!*(_DWORD *)(a1 + 320)) {
        return 1LL;
      }
      v89 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
      int v68 = *(void *)(*v89 + 8);
      uint64_t v67 = *(void **)(*v89 + 16);
      v69 = 35LL;
      goto LABEL_116;
    case 0x28u:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v90 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:register kNotificationExternalLocationDisablementAssert}",  buf,  0x12u);
      }

      if (!*(_DWORD *)(a1 + 328)) {
        return 1LL;
      }
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v91 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:registering kNotificationExternalLocationDisablementAssert w/ accessory provider}",  buf,  0x12u);
      }

      v92 = sub_10000C6DC(a1 + 264, (int *)(a1 + 328));
      int v68 = *(void *)(*v92 + 8);
      uint64_t v67 = *(void **)(*v92 + 16);
      v69 = 40LL;
      goto LABEL_116;
    default:
      return 1LL;
  }

  float result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[13],  a2,  a4);
  unint64_t v6 = v5[37];
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }

  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
}

  v45 = a4->rawDistance;
  v102 = v29;
  v103 = v27;
  v111 = v28 * v45;
  a4->distance = v28 * v45;
  a4->distanceMobility = v27 * v45;
  a4->distanceFused = v29 * v45;
  a4->currentPace = currentPace / v28;
  v106 = 0.000001;
  v108 = fabs(v28 + -1.0);
  if (v108 <= 0.000001) {
    __int16 v46 = 3;
  }
  else {
    __int16 v46 = 2;
  }
  *(&a4->falseStepDetectorState.data + 2) = v46;
  int v47 = +[CMPedometerTableStepCadenceToStrideLength sharedInstance]( &OBJC_CLASS___CMPedometerTableStepCadenceToStrideLength,  "sharedInstance");
  __int16 v48 = v47;
  currentCadence = a4->currentCadence;
  __int16 v50 = v20 / v16;
  if (v16 <= 0.0) {
    __int16 v50 = 0.0;
  }
  v101 = v50;
  if (currentCadence <= 0.0) {
    double v51 = v50;
  }
  else {
    double v51 = a4->currentCadence;
  }
  if (v51 > 0.0)
  {
    -[CMPedometerTableStepCadenceToStrideLength strideLengthForStepCadence:](v47, "strideLengthForStepCadence:", v51);
    BOOL v23 = v52;
  }

  double v53 = -[CMPedometerTableStepCadenceToStrideLength isCalibrationAvailableForStepCadence:]( v48,  "isCalibrationAvailableForStepCadence:",  v51);
  __int16 v54 = v53;
  uint64_t v55 = v23 * v20;
  if (v12) {
    v56 = a4->pedometerArmConstrainedState == 0;
  }
  else {
    v56 = 1;
  }
  unint64_t v57 = !v56;
  if (v23 > 0.0) {
    v58 = v57;
  }
  else {
    v58 = 0LL;
  }
  v59 = v109;
  if ((_DWORD)v58 == 1)
  {
    a4->distance = v55;
    __int16 v60 = 0.0;
    if (v51 > 0.0) {
      __int16 v60 = 1.0 / (v51 * v23);
    }
    a4->currentPace = v60;
    if (v53) {
      uint64_t v61 = 4;
    }
    else {
      uint64_t v61 = 5;
    }
    *(&a4->falseStepDetectorState.data + 2) = v61;
  }

  else
  {
    __int16 v60 = a4->currentPace;
  }

  a4->accelerometerPace.calibrated = v60;
  if (v60 != 0.0)
  {
    -[CLStepDistanceEstimator computeWalkRunSigma:](self, "computeWalkRunSigma:", 1.0 / v60 * 2.23693991);
    calibrated = a4->accelerometerPace.calibrated;
    a4->accelerometerPace.lowerBound = calibrated / (v63 + 1.0);
    a4->accelerometerPace.upperBound = calibrated / (1.0 - v63);
  }

  totalCalibratedDistanceMobility = self->_totalCalibratedDistanceMobility;
  self->_totalCalibratedDistance = a4->distance + self->_totalCalibratedDistance;
  self->_totalCalibratedDistanceMobility = a4->distanceMobility + totalCalibratedDistanceMobility;
  self->_totalCalibratedDistanceFused = a4->distanceFused + self->_totalCalibratedDistanceFused;
  if (-[CLStepDistanceEstimator checkCoreAnalyticsPermissions:rawPaceForLUT:]( self,  "checkCoreAnalyticsPermissions:rawPaceForLUT:",  v58,  v26))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10185FCE8);
    }
    double v65 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_INFO,  "Distance Estimate, not in arm constrain and looking to send core analytics.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10185FCE8);
      }
      LOWORD(v112) = 0;
      LODWORD(v99) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Distance Estimate, not in arm constrain and looking to send core analytics.",  &v112,  *(void *)&v99);
      v98 = (char *)v97;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLStepDistanceEstimator updateEntryDistanceAndPace:]", "%s\n", v97);
      if (v98 != buf) {
        free(v98);
      }
    }

    -[CLStepDistanceEstimator checkToSendDistancePercentageCoreAnalytics:mobilityDistance:rawSpeed:rawDist:]( self,  "checkToSendDistancePercentageCoreAnalytics:mobilityDistance:rawSpeed:rawDist:",  self->_totalCalibratedDistance,  self->_totalCalibratedDistanceMobility,  1.0 / v26,  a4->rawDistance);
  }

  if (self->_supportsFirstStepTime) {
    p_firstStepTime = (CLExtendedStepCountEntry *)&a4->firstStepTime;
  }
  else {
    p_firstStepTime = &self->_lastEntry;
  }
  startTime = p_firstStepTime->startTime;
  if (self->_supportsFirstStepTime) {
    int v68 = v109 + a4->firstStepTime;
  }
  else {
    int v68 = a4->startTime;
  }
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10185FCE8);
  }
  v69 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    v71 = a4->timestamp;
    v70 = a4->startTime;
    distance = a4->distance;
    uint64_t v73 = a4->currentPace;
    pedometerArmConstrainedState = a4->pedometerArmConstrainedState;
    pushCount = a4->pushCount;
    uint64_t v76 = *((unsigned __int8 *)&a4->falseStepDetectorState.falseStepDetectorState + 1);
    *(_DWORD *)buf = 134223872;
    *(double *)&buf[4] = v70;
    *(_WORD *)&buf[12] = 2048;
    v160 = v71;
    v161 = 2048;
    v162 = startTime;
    v163 = 2048;
    v164 = v68;
    v165 = 1024;
    v166 = v12;
    v167 = 2048;
    v168 = distance;
    v169 = 2048;
    v170 = v73;
    v171 = 2048;
    v172 = v105;
    v173 = 2048;
    v174 = v109;
    v175 = 2048;
    v176 = currentPace;
    v177 = 2048;
    v178 = v104;
    v179 = 1024;
    v180 = v8;
    v181 = 2048;
    v182 = currentCadence;
    v183 = 2048;
    v184 = v101;
    v185 = 2048;
    v186 = v28;
    v187 = 2048;
    v188 = v103;
    v189 = 2048;
    v190 = v102;
    v191 = 1024;
    v192 = pedometerArmConstrainedState;
    v193 = 2048;
    v194 = v23;
    v195 = 1024;
    v196 = v58;
    v197 = 1024;
    v198 = pushCount;
    v199 = 1024;
    v200 = v76;
    v201 = 2048;
    v202 = v55;
    v203 = 2048;
    v204 = v111;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "startTime,%f,timestamp,%f,firstStepTime,%f,lastStepTime,%f,stepsDelta,%u,calibratedDistanceDelta,%f,calibratedPace ,%f,rawStrideLength,%f,activeTimeDelta,%f,rawPaceCurrent,%f,rawPaceActive,%f,rawPaceDidJump,%d,stepCadenceCurrent, %f,stepCadenceActive,%f,kValue,%f,kValueMobility,%f,KValueFused,%f,pedometerArmConstrainedState,%d,strideLengthFro mStepCadence,%f,useStrideLengthFromStepCadence,%d,pushCount,%u,falseStepsSuppressed,%d,stepCadenceDeltaDistance,%. 3f,energyDeltaDistance,%.3f,",  buf,  0xDAu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10185FCE8);
    }
    v85 = a4->timestamp;
    v84 = a4->startTime;
    v86 = a4->distance;
    v87 = a4->currentPace;
    v88 = a4->pedometerArmConstrainedState;
    v89 = a4->pushCount;
    v90 = *((unsigned __int8 *)&a4->falseStepDetectorState.falseStepDetectorState + 1);
    v112 = 134223872;
    *(double *)v113 = v84;
    *(_WORD *)&v113[8] = 2048;
    v114 = v85;
    v115 = 2048;
    v116 = startTime;
    v117 = 2048;
    v118 = v68;
    v119 = 1024;
    v120 = v12;
    v121 = 2048;
    v122 = v86;
    v123 = 2048;
    v124 = v87;
    v125 = 2048;
    v126 = v105;
    v127 = 2048;
    v128 = v109;
    v129 = 2048;
    v130 = currentPace;
    v131 = 2048;
    v132 = v104;
    v133 = 1024;
    v134 = v8;
    v135 = 2048;
    v136 = currentCadence;
    v137 = 2048;
    v138 = v101;
    v139 = 2048;
    v140 = v28;
    v141 = 2048;
    v142 = v103;
    v143 = 2048;
    v144 = v102;
    v145 = 1024;
    v146 = v88;
    v147 = 2048;
    v148 = v23;
    v149 = 1024;
    v150 = v58;
    v151 = 1024;
    v152 = v89;
    v153 = 1024;
    v154 = v90;
    v155 = 2048;
    v156 = v55;
    v157 = 2048;
    v158 = v111;
    LODWORD(v99) = 218;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "startTime,%f,timestamp,%f,firstStepTime,%f,lastStepTime,%f,stepsDelta,%u,calibratedDistanceDelta,%f,calibratedPace ,%f,rawStrideLength,%f,activeTimeDelta,%f,rawPaceCurrent,%f,rawPaceActive,%f,rawPaceDidJump,%d,stepCadenceCurrent, %f,stepCadenceActive,%f,kValue,%f,kValueMobility,%f,KValueFused,%f,pedometerArmConstrainedState,%d,strideLengthFro mStepCadence,%f,useStrideLengthFromStepCadence,%d,pushCount,%u,falseStepsSuppressed,%d,stepCadenceDeltaDistance,%. 3f,energyDeltaDistance,%.3f,",  COERCE_DOUBLE(&v112),  v99,  v100,  v101,  LODWORD(v102),  v103,  v104,  v105,  0.000001,  v108,  v109,  LODWORD(v111));
    v92 = (char *)v91;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLStepDistanceEstimator updateEntryDistanceAndPace:]", "%s\n", v91);
    if (v92 != buf) {
      free(v92);
    }
  }

  v77 = *(_OWORD *)&a4->accelerometerPace.lowerBound;
  *(_OWORD *)&retstr->base.isOdometerDistance = *(_OWORD *)&a4->isOdometerDistance;
  *(_OWORD *)&retstr->base.accelerometerPace.lowerBound = v77;
  v78 = *(_OWORD *)&a4->elevationDescended;
  *(_OWORD *)&retstr->base.pushCount = *(_OWORD *)&a4->pushCount;
  *(_OWORD *)&retstr->base.elevationDescended = v78;
  unint64_t v79 = *(_OWORD *)&a4->floorsAscended;
  *(_OWORD *)&retstr->base.distanceMobility = *(_OWORD *)&a4->distanceMobility;
  *(_OWORD *)&retstr->base.floorsAscended = v79;
  v80 = *(_OWORD *)&a4->recordId;
  *(_OWORD *)&retstr->base.currentCadence = *(_OWORD *)&a4->currentCadence;
  *(_OWORD *)&retstr->base.recordId = v80;
  *(_OWORD *)&retstr->base.timestamp = *(_OWORD *)&a4->timestamp;
  v81 = *(_OWORD *)&a4->distance;
  *(_OWORD *)&retstr->base.firstStepTime = *(_OWORD *)&a4->firstStepTime;
  uint64_t v82 = a4->startTime;
  retstr->startTime = v82;
  *(_OWORD *)&retstr->base.distance = v81;
  *(_OWORD *)&retstr->addition.totalCalibratedDistance = *(_OWORD *)&self->_totalCalibratedDistance;
  retstr->addition.totalCalibratedDistanceFused = self->_totalCalibratedDistanceFused;
  retstr->addition.rawPace = currentPace;
  retstr->addition.incrementalSteps = v12;
  if (!self->_supportsFirstStepTime) {
    v59 = v82 - self->_lastEntry.startTime;
  }
  retstr->addition.incrementalActiveTime = v59;
  retstr->addition.lastStepTime = v68;
  retstr->addition.odometerSpeed = -1.0;
  retstr->addition.rawPaceDidJump = v8;
  retstr->addition.calibratedDistance = a4->distance;
  retstr->addition.stepCadenceDeltaDistance = v55;
  retstr->addition.stepCadenceIsCalibrated = v54;
  retstr->addition.energyDeltaDistance = v111;
  retstr->addition.energyIsCalibrated = v108 > v106;
  retstr->addition.timestampOfFirstStep = 0LL;
  retstr->addition.timestampOfLastStepStrict = 0LL;
  retstr->addition.firstStepTime = startTime;
  return (CLExtendedStepCountEntry *)memcpy(&self->_lastEntry, retstr, sizeof(self->_lastEntry));
}

  if (SHIBYTE(v36) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v33[3]) < 0) {
    operator delete(v33[1]);
  }
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v29);
  }
  return 1LL;
}

        if (!memcmp(v11, v10, v12)) {
          goto LABEL_73;
        }
        goto LABEL_49;
      }

      uint64_t v11 = &__s1;
    }

    uint64_t v10 = "com.apple.locationd.bundle-/System/Library/LocationBundles/LocationFenceSync.bundle";
    double v12 = 83LL;
    goto LABEL_48;
  }

  return v12;
}

    uint64_t v9 = 2;
    goto LABEL_55;
  }

  if (v6 != 0x200000 && v6 != 0x100000)
  {
    unint64_t v7 = 917516;
    goto LABEL_47;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "isFall", *(_BYTE *)(a1 + 152));
  int64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  unint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }

        *(void *)(a1 + 8) = v25;
      }

      else
      {
        float result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }

      unint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    unint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(result) = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "isActive", *(_BYTE *)(a1 + 153));
  int64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 140), 0xBu);
  unint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }

  BOOL v23 = *(void *)(a2 + 280);
  v10 |= 0x80u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 280) = v23;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }

  BOOL v14 = *(_BYTE *)(a2 + 92);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 92) = v14;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_50:
    float result = *(float *)(a2 + 72);
    *(_DWORD *)(a1 + 100) = v3 | 0x1000;
    *(float *)(a1 + 72) = result;
    return result;
  }

  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 80));
  int64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) != 0) {
    goto LABEL_49;
  }
LABEL_24:
  if ((v5 & 0x10000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x17u);
  if ((*(_DWORD *)(v3 + 100) & 0x1000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 72), 0x18u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 116));
  int64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 120), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  char v20 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 212) |= 0x10000u;
  *(_DWORD *)(a1 + 160) = v20;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x8000) == 0)
  {
LABEL_19:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "enableMode", *(_DWORD *)(a1 + 124));
  if ((*(_DWORD *)(a1 + 212) & 0x100) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 128));
LABEL_9:
  unint64_t v6 = *(double **)(a1 + 8);
  unint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }

  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(this, "isMounted", *(_BYTE *)(a1 + 208));
    uint64_t v9 = *(_DWORD *)(a1 + 212);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0) {
        goto LABEL_14;
      }
      goto LABEL_52;
    }
  }

  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "isSimulated", *(_BYTE *)(a1 + 209));
  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }

  float result = *(float *)(a2 + 52);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 52) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "isTauBarWithinRange", *(_BYTE *)(a1 + 104));
  int64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x13u);
  unint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  float result = *(float *)(a2 + 80);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 80) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x800) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 100));
  int64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 76), 0x11u);
  unint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  char v20 = *(_BYTE *)(a2 + 124);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 132) = v3;
  *(_BYTE *)(result + 124) = v20;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "loggedAtEpoch", *(_BYTE *)(a1 + 128));
  int64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xCBu);
  unint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }

  uint64_t v16 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 24) = v16;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "debugMaxTimeBetweenDmSample", *(float *)(a1 + 104));
  int64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xEu);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 56));
  int64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 44), 9u);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 112) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 108));
  int64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200000) != 0) {
    goto LABEL_49;
  }
LABEL_24:
  if ((v5 & 0x400000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "visionCompassBias", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0x17u);
  if ((*(_DWORD *)(v3 + 124) & 0x400000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "reflectanceEstimate", *(float *)(a1 + 88));
  int64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 44), 0x14u);
  unint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  unint64_t v15 = *(_DWORD *)(a2 + 140);
  v3 |= 0x10000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 140) = v15;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "pearlScanWindowOnTs", *(void *)(a1 + 8));
  int64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0xDu);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 80));
  int64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x10u);
  unint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  float result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 184) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "userAccelMean", *(double *)(a1 + 168));
  int64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 152), 0x16u);
  unint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 136);
  v3 |= 0x100000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 136) = v9;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "epochMinTimestamp", *(void *)(a1 + 40));
  int64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 7u);
  unint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }

  float result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 128) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApCv", *(double *)(a1 + 128));
  int64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 136), 0x11u);
  unint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  float result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 88) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthEntropyMean", *(double *)(a1 + 160));
  int64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 120), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  double v34 = *(void *)(a2 + 56);
  if (v34)
  {
    uint64_t v35 = operator new(0x10uLL);
    uint64_t v36 = sub_1011844BC((uint64_t)v35, v34);
    unint64_t v37 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v38;
    if (v37) {
      (*(void (**)(uint64_t, float))(*(void *)v37 + 8LL))(v37, v36);
    }
  }

  if ((*(_BYTE *)(a2 + 154) & 1) != 0)
  {
    BOOL v39 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 152) |= 0x10000u;
    *(_DWORD *)(a1 + 128) = v39;
  }

  return a1;
}

        *(void *)(a1 + 8) = v25;
      }

      else
      {
        float result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }

      unint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    unint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  float result = *(float *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 92) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "pressureFFTBin2", *(float *)(a1 + 92));
  int64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 96), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  unint64_t v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v22;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "vehicularBasebandHint", *(_BYTE *)(a1 + 110));
  int64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 56), 0x14u);
  unint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  double v27 = *(_DWORD *)(a2 + 168);
  v5 |= 0x1000000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 168) = v27;
  unint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 72));
  int64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 148), 0x10u);
  unint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }

  double v17 = *(_DWORD *)(a2 + 212);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 212) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 80));
  int64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 176), 0xFu);
  unint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 80));
  int64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 6u);
  unint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }

  double v17 = *(_BYTE *)(a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 125) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  int64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 92), 0xFu);
  unint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

  char v20 = *(_DWORD *)(a2 + 148);
  v6 |= 0x200000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 148) = v20;
  int64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "centeredBoresightInHighDynamics", *(_BYTE *)(a1 + 155));
  int64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 140), 8u);
  unint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }

  float result = *(double *)(a2 + 128);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 128) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "groundContactTimeReportingStatus", *(_DWORD *)(a1 + 204));
  int64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 152), 0xCu);
  unint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }

  unint64_t v21 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 80) = v21;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "kalmanGainOdometer", *(double *)(a1 + 88));
  int64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 24), 0x13u);
  unint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }

  BOOL v23 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 136) = v23;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 152));
  int64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 64), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

uint64_t *sub_1000085FC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  int64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  float result = sub_100008650(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_100008650(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

uint64_t *sub_1000087E8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    unint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100008858(v6, a2);
  return v3;
}

uint64_t *sub_100008858(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }

    do
    {
      unint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0LL;
      float result = (uint64_t *)v2;
    }

    else
    {
      uint64_t v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      float result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }

    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }

      else
      {
        unint64_t v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }

    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    double v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      double v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    uint64_t v7 = *(uint64_t **)v12;
  }

  BOOL v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  char v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    double v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    char v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *char v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    BOOL v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_100008BDC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_101818778;
}

void sub_100008C14(std::exception *a1)
{
}

void sub_100008C28(void **a1, unint64_t a2, void *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8LL;
      }

      while (v16);
      uint64_t v9 = v17;
    }

    a1[1] = v9;
  }

  else
  {
    uint64_t v10 = (char *)v9 - (_BYTE *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_100007008();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_1000071BC(v6, v14);
    }
    else {
      unint64_t v15 = 0LL;
    }
    uint64_t v18 = &v15[8 * v12];
    BOOL v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    BOOL v21 = v18;
    do
    {
      *(void *)BOOL v21 = *a3;
      v21 += 8;
      v20 -= 8LL;
    }

    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }

    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }

void sub_100008D90( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

BOOL sub_100008DAC()
{
  return os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT);
}

void sub_100008DC0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100008DD0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

BOOL sub_100008DE0()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2632), OS_LOG_TYPE_INFO);
}

BOOL sub_100008DF0()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2632));
}

BOOL sub_100008DFC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  __p = 0LL;
  int v8 = 0LL;
  uint64_t v9 = 0LL;
  BOOL v5 = sub_100008E60(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    int v8 = __p;
    operator delete(__p);
  }

  return v5;
}

void sub_100008E44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100008E60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v15 = 0x3FF0000000000000LL;
  uint64_t v12 = sub_1000070FC(__p, v11, &v15);
  BOOL v13 = sub_100008F20((uint64_t)v12, a2, (uint64_t **)a3, __p, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v13;
}

void sub_100008F04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100008F20( uint64_t a1, uint64_t a2, uint64_t **a3, void *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  int v8 = *(void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  if ((void *)v9 == v8) {
    return 0LL;
  }
  if (v8[1] == *v8) {
    return 0LL;
  }
  if (a3[1] == *a3) {
    return 0LL;
  }
  uint64_t v11 = **a3;
  uint64_t v12 = (*a3)[1];
  unint64_t v13 = v12 - v11;
  if (v12 == v11) {
    return 0LL;
  }
  uint64_t v76 = 0LL;
  v77 = 0LL;
  uint64_t v78 = 0LL;
  sub_1000094E8(&v76, (uint64_t)v8, v9, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v8) >> 3));
  uint64_t v63 = a3;
  uint64_t v15 = -1431655765 * ((unint64_t)((char *)a3[1] - (char *)*a3) >> 3);
  uint64_t v67 = (void *)(a7 + 16);
  uint64_t v16 = v13 & 0x7FFFFFFF8LL;
  unsigned int v17 = 0;
  do
  {
    unsigned int v62 = v17;
    uint64_t v18 = *(_DWORD **)a7;
    *(void *)(a7 + 8) = *(void *)a7;
    BOOL v19 = v63;
    BOOL v21 = *v63;
    uint64_t v20 = v63[1];
    __int16 v64 = v20;
    while (v21 != v20)
    {
      if (a5)
      {
        int v22 = 0;
        uint64_t v23 = 0LL;
        int v24 = 0;
        double v25 = 1.0e10;
        do
        {
          __src = &off_1018187B0;
          double v26 = sqrt(sub_10000947C((uint64_t)&__src, v21, &v76[v23]));
          if (v26 < v25)
          {
            int v24 = v22;
            double v25 = v26;
          }

          v23 += 3LL;
          ++v22;
        }

        while (3LL * a5 != v23);
        uint64_t v18 = *(_DWORD **)(a7 + 8);
        BOOL v19 = v63;
      }

      else
      {
        int v24 = 0;
      }

      if ((unint64_t)v18 >= *v67)
      {
        uint64_t v28 = *(_DWORD **)a7;
        uint64_t v29 = ((uint64_t)v18 - *(void *)a7) >> 2;
        unint64_t v30 = v29 + 1;
        uint64_t v31 = *v67 - (void)v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          double v33 = (char *)sub_10000956C((uint64_t)v67, v32);
          uint64_t v28 = *(_DWORD **)a7;
          uint64_t v18 = *(_DWORD **)(a7 + 8);
        }

        else
        {
          double v33 = 0LL;
        }

        double v34 = &v33[4 * v29];
        *(_DWORD *)double v34 = v24;
        uint64_t v27 = v34 + 4;
        while (v18 != v28)
        {
          int v35 = *--v18;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }

        *(void *)a7 = v34;
        *(void *)(a7 + 8) = v27;
        *(void *)(a7 + 16) = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        *uint64_t v18 = v24;
        uint64_t v27 = v18 + 1;
      }

      *(void *)(a7 + 8) = v27;
      v21 += 3;
      uint64_t v18 = v27;
      uint64_t v20 = v64;
    }

    uint64_t v73 = 0LL;
    v74 = 0LL;
    uint64_t v75 = 0LL;
    sub_1000094E8(&v73, (uint64_t)v76, (uint64_t)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
    if (!a5) {
      goto LABEL_55;
    }
    uint64_t v36 = 0LL;
    do
    {
      __p = 0LL;
      sub_1000070FC(&__src, (v13 >> 3), &__p);
      if (!v15)
      {
LABEL_45:
        __int16 v46 = (char **)&v76[3 * v36];
        goto LABEL_50;
      }

      uint64_t v37 = 0LL;
      double v38 = 0.0;
      do
      {
        if (v36 != *(_DWORD *)(*(void *)a7 + 4 * v37)) {
          goto LABEL_43;
        }
        uint64_t v39 = (uint64_t)&(*v19)[3 * v37];
        v69 = 0LL;
        uint64_t v70 = 0LL;
        __p = 0LL;
        sub_100007590( &__p,  *(const void **)v39,  *(void *)(v39 + 8),  (uint64_t)(*(void *)(v39 + 8) - *(void *)v39) >> 3);
        double v40 = *(double *)(*a4 + 8 * v37);
        uint64_t v41 = __p;
        if (v16)
        {
          double v38 = v38 + v40;
          uint64_t v42 = (double *)__src;
          uint64_t v43 = (v13 >> 3);
          __int128 v44 = (double *)__p;
          do
          {
            double v45 = *v44++;
            double *v42 = *v42 + v40 * v45;
            ++v42;
            --v43;
          }

          while (v43);
        }

        else
        {
          double v38 = v38 + v40;
          if (!__p) {
            goto LABEL_43;
          }
        }

        v69 = v41;
        operator delete(v41);
LABEL_43:
        ++v37;
      }

      while (v37 != v15);
      if (v38 == 0.0) {
        goto LABEL_45;
      }
      if (v16)
      {
        int v47 = (double *)__src;
        uint64_t v48 = (v13 >> 3);
        do
        {
          *int v47 = *v47 / v38;
          ++v47;
          --v48;
        }

        while (v48);
      }

LABEL_50:
      unint64_t v49 = (char *)&v76[3 * v36];
      __int16 v50 = __src;
      if (v49 != (char *)&__src)
      {
        sub_1000F9040(v49, (char *)__src, (uint64_t)v72, (v72 - (_BYTE *)__src) >> 3);
        __int16 v50 = __src;
      }

      if (v50)
      {
        v72 = v50;
        operator delete(v50);
      }

      ++v36;
    }

    while (v36 != a5);
LABEL_55:
    double v51 = v76;
    uint64_t v65 = (uint64_t)v77;
    if (v76 == v77)
    {
      int v52 = 0;
      uint64_t v55 = (uint64_t)v76;
    }

    else
    {
      int v52 = 0;
      do
      {
        __int16 v54 = (uint64_t *)v73;
        double v53 = v74;
        while (v54 != v53)
        {
          __p = &off_1018187B0;
          v54 += 3;
        }

        v51 += 3;
      }

      while (v51 != (void *)v65);
      double v51 = v76;
      uint64_t v55 = (uint64_t)v77;
    }

    unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v51) >> 3);
    __src = &v73;
    sub_100006BC8((void ***)&__src);
    BOOL v57 = v56 == v52;
    if (v56 == v52) {
      unsigned int v58 = v62;
    }
    else {
      unsigned int v58 = v62 + 1;
    }
    if (v56 == v52) {
      break;
    }
    unsigned int v17 = v58;
  }

  while (v62 <= 0x31);
  if (&v76 != (void **)a6 && v56 == v52) {
    sub_100006C5C((uint64_t)a6, (uint64_t)v76, (uint64_t)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
  }
  uint64_t v73 = (void **)&v76;
  sub_100006BC8(&v73);
  return v57;
}

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(_DWORD *)(v5 + 160),  a2,  a4);
  uint64_t v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x20000) == 0)
  {
LABEL_29:
    if ((v12 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_52;
  }

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  if ((v3 & 0x20) != 0) {
    float result = v4 + 2;
  }
  else {
    float result = v4;
  }
LABEL_53:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

  if ((v6 & 0xFF00) == 0) {
    return;
  }
  if ((v6 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 128) |= 0x100u;
    BOOL v21 = *(_DWORD **)(a1 + 64);
    if (!v21)
    {
      BOOL v21 = operator new(0x58uLL);
      v21[12] = 10;
      *(void *)BOOL v21 = off_10181B2D8;
      *((void *)v21 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_WORD *)v21 + 26) = 0;
      *((void *)v21 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v21 + 10) = 0LL;
      *(void *)(a1 + 64) = v21;
    }

    int v22 = *(void *)(a2 + 64);
    if (!v22) {
      int v22 = *(void *)(qword_1019A0980 + 64);
    }
    sub_10007636C((uint64_t)v21, v22);
    uint64_t v6 = *(_DWORD *)(a2 + 128);
    if ((v6 & 0x200) == 0)
    {
LABEL_53:
      if ((v6 & 0x400) == 0) {
        goto LABEL_54;
      }
      goto LABEL_69;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_53;
  }

  *(_DWORD *)(a1 + 128) |= 0x200u;
  uint64_t v23 = *(void **)(a1 + 80);
  if (!v23)
  {
    uint64_t v23 = operator new(0x48uLL);
    v23[5] = 0LL;
    *((_DWORD *)v23 + 12) = 0;
    char *v23 = off_10181B3C8;
    v23[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v23[2] = 12LL;
    v23[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v23[4] = 0LL;
    v23[7] = 0LL;
    v23[8] = 0LL;
    *(void *)(a1 + 80) = v23;
  }

  int v24 = *(void *)(a2 + 80);
  if (!v24) {
    int v24 = *(void *)(qword_1019A0980 + 80);
  }
  sub_100077CB0((uint64_t)v23, v24);
  uint64_t v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x400) == 0)
  {
LABEL_54:
    if ((v6 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_74;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(unsigned __int8 *)(v5 + 76),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B,  (int)a2,  *(double *)(v5 + 112),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  BOOL v19 = *(_DWORD *)(a2 + 104);
  if (v19 >= 0xE) {
    sub_10122F9DC();
  }
  *(_DWORD *)(a1 + 152) |= 0x1000u;
  *(_DWORD *)(a1 + 104) = v19;
  BOOL v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x2000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  uint64_t v29 = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(a1 + 364) |= 0x4000u;
  *(_BYTE *)(a1 + 113) = v29;
  unint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x8000) == 0) {
    goto LABEL_56;
  }
LABEL_51:
  *(_DWORD *)(a1 + 364) |= 0x8000u;
  unint64_t v30 = *(void **)(a1 + 88);
  if (!v30)
  {
    unint64_t v30 = operator new(0x20uLL);
    const char *v30 = off_101828030;
    v30[1] = 0LL;
    v30[2] = 0LL;
    v30[3] = 0LL;
    *(void *)(a1 + 88) = v30;
  }

  uint64_t v31 = *(void *)(a2 + 88);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_1019A0BA0 + 88);
  }
  sub_1001D8178((uint64_t)v30, v31);
  unint64_t v13 = *(_DWORD *)(a2 + 364);
LABEL_56:
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_73;
  }
  if ((v13 & 0x10000) != 0)
  {
    unint64_t v32 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 364) |= 0x10000u;
    *(_DWORD *)(a1 + 96) = v32;
    unint64_t v13 = *(_DWORD *)(a2 + 364);
  }

  if ((v13 & 0x20000) != 0)
  {
    double v38 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 364) |= 0x20000u;
    *(_DWORD *)(a1 + 100) = v38;
    unint64_t v13 = *(_DWORD *)(a2 + 364);
    if ((v13 & 0x40000) == 0)
    {
LABEL_62:
      if ((v13 & 0x80000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_107;
    }
  }

  else if ((v13 & 0x40000) == 0)
  {
    goto LABEL_62;
  }

  *(_DWORD *)(a1 + 364) |= 0x40000u;
  uint64_t v39 = *(void **)(a1 + 104);
  if (!v39)
  {
    uint64_t v39 = operator new(0x20uLL);
    *uint64_t v39 = off_101827EC8;
    v39[1] = 0LL;
    v39[2] = 0LL;
    v39[3] = 0LL;
    *(void *)(a1 + 104) = v39;
  }

  double v40 = *(void *)(a2 + 104);
  if (!v40) {
    double v40 = *(void *)(qword_1019A0BA0 + 104);
  }
  sub_1001D60C0((uint64_t)v39, v40);
  unint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x80000) == 0)
  {
LABEL_63:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_108;
  }

  uint64_t v23 = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 148) |= 0x2000u;
  *(_BYTE *)(a1 + 96) = v23;
  BOOL v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_52;
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(_DWORD *)(v5 + 100),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101839510);
  }
  uint64_t v37 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    double v38 = *a2;
    uint64_t v39 = *((_DWORD *)a3 + 2);
    double v40 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 134349824;
    *(void *)&buf[4] = v38;
    __int16 v60 = 1026;
    uint64_t v61 = v39;
    unsigned int v62 = 1026;
    uint64_t v63 = v8;
    __int16 v64 = 1026;
    uint64_t v65 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "#workout,dynamics mode on workout update,mct,%{public}.3f,workoutType,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101839510);
    }
    double v45 = *a2;
    __int16 v46 = *((_DWORD *)a3 + 2);
    int v47 = *(_DWORD *)(a1 + 72);
    double v51 = 134349824;
    int v52 = v45;
    double v53 = 1026;
    __int16 v54 = v46;
    uint64_t v55 = 1026;
    unint64_t v56 = v8;
    BOOL v57 = 1026;
    unsigned int v58 = v47;
    LODWORD(v50) = 30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#workout,dynamics mode on workout update,mct,%{public}.3f,workoutType,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d",  &v51,  v50);
    unint64_t v49 = (char *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::LCFusionMotionActivity::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)",  "%s\n",  v48);
    if (v49 != buf) {
      free(v49);
    }
  }

  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v71 = sub_100558440;
  v72 = &unk_10183FC10;
  uint64_t v73 = a3;
  if (*(void *)(a1 + 1080))
  {
    if (*(double *)(a1 + 1116) == -1.0
      || vabdd_f64(*(double *)(a1 + 1172), *(double *)((char *)a2 + 76)) > 604800.0
      || sub_100D2EC74( *(double *)(a1 + 1100),  *(double *)(a1 + 1108),  *(double *)((char *)a2 + 4),  *(double *)((char *)a2 + 12)) > 500.0)
    {
      double v26 = a2[7];
      uint64_t v27 = a2[8];
      uint64_t v28 = a2[5];
      uint64_t v65 = a2[6];
      __int16 v66 = v26;
      v67[0] = v27;
      *(_OWORD *)((char *)v67 + 12) = *(__int128 *)((char *)a2 + 140);
      uint64_t v29 = a2[3];
      unint64_t v30 = a2[4];
      uint64_t v31 = a2[1];
      uint64_t v61 = a2[2];
      unsigned int v62 = v29;
      uint64_t v63 = v30;
      __int16 v64 = v28;
      v59 = *a2;
      __int16 v60 = v31;
      unint64_t v32 = *(void **)(a1 + 1488);
      *(void *)&uint64_t v29 = *(void *)((char *)a2 + 4);
      *(void *)&unint64_t v30 = *(void *)((char *)a2 + 12);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_100558854;
      v58[3] = &unk_10183FC58;
      v58[4] = v70;
      v58[5] = a1;
      return objc_msgSend( v32,  "getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:",  v58,  *(double *)&v29,  *(double *)&v30);
    }

    else
    {
      uint64_t v39 = *(void **)(a1 + 1256);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      double v40 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 134217984;
        *(void **)((char *)__p + 4) = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "DAR: applying cached quantization %f",  (uint8_t *)__p,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        LODWORD(v81.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
        uint64_t v55 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "DAR: applying cached quantization %f",  COERCE_DOUBLE(&v81));
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)",  "%s\n",  v55);
      }

      uint64_t v41 = a2[7];
      v56[6] = a2[6];
      v56[7] = v41;
      v57[0] = a2[8];
      *(_OWORD *)((char *)v57 + 12) = *(__int128 *)((char *)a2 + 140);
      uint64_t v42 = a2[3];
      v56[2] = a2[2];
      v56[3] = v42;
      uint64_t v43 = a2[5];
      v56[4] = a2[4];
      v56[5] = v43;
      __int128 v44 = a2[1];
      v56[0] = *a2;
      v56[1] = v44;
      return (id)v71((uint64_t)v70, (uint64_t)v56, *(double *)&v39);
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    double v34 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = (void *)0x3FB999999999999ALL;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "#Warning DAR: applying default quantization %f",  (uint8_t *)__p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = 0x3FB999999999999ALL;
      double v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning DAR: applying default quantization %f",  COERCE_DOUBLE(&v81));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)",  "%s\n",  v45);
    }

    int v35 = a2[7];
    v68[6] = a2[6];
    v68[7] = v35;
    v69[0] = a2[8];
    *(_OWORD *)((char *)v69 + 12) = *(__int128 *)((char *)a2 + 140);
    uint64_t v36 = a2[3];
    v68[2] = a2[2];
    v68[3] = v36;
    uint64_t v37 = a2[5];
    v68[4] = a2[4];
    v68[5] = v37;
    double v38 = a2[1];
    v68[0] = *a2;
    v68[1] = v38;
    return (id)v71((uint64_t)v70, (uint64_t)v68, 0.1);
  }

  BOOL v21 = *(_DWORD *)(a1 + 32);
  int v22 = (v21 + v4);
  if (v21 >= 1)
  {
    uint64_t v23 = 0LL;
    do
    {
      int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10063CA48( *(void *)(*(void *)(a1 + 24) + 8 * v23),  a2);
      double v25 = (int)v24;
      else {
        double v26 = 1;
      }
      int v22 = (v25 + v22 + v26);
      ++v23;
    }

    while (v23 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 64) = v22;
  return v22;
}

  unint64_t v14 = *(_DWORD *)(a2 + 16);
  a1[37] |= 4u;
  a1[4] = v14;
  BOOL v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }

  float result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v5[15],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }

  __int16 v50 = sub_1006E27E8();
  sub_100413284(v50, buf);
  double v51 = (uint64_t *)(a1 + 368);
  int v52 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_MinExplainedVarianceScore", (void *)(a1 + 368));
  double v53 = v52;
  __int16 v54 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_54;
  }
  uint64_t v55 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (!v53) {
      goto LABEL_60;
    }
  }

  else
  {
LABEL_54:
    if (!v52) {
      goto LABEL_60;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  BOOL v57 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v58 = *v51;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Estimator,fMinExplainedVarianceScore overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    v90 = *v51;
    v100 = 134349056;
    v101 = v90;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fMinExplainedVarianceScore overridden (%{public}f)",  &v100,  v99);
    v92 = (char *)v91;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v91);
  }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v18 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "#EED2,canHandleAPNSMessage,receivedCallID doesn't match native or companion number, early return",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v29[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,canHandleAPNSMessage,receivedCallID doesn't match native or companion number, early return",  v29,  2);
      uint64_t v28 = (uint8_t *)v27;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    sub_10077A6A0(a1, 11LL);

LABEL_19:
    float result = 0LL;
    *(void *)(a1 + 1832) = 0LL;
    return result;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v12 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "#EED2,canHandleAPNSMessage,nil fAPNSMessage early return",  buf,  2u);
  }

  float result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v29[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,canHandleAPNSMessage,nil fAPNSMessage early return",  v29,  2);
    int v22 = (uint8_t *)v21;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v21);
    if (v22 != buf) {
      free(v22);
    }
    return 0LL;
  }

  return result;
}

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 96) |= 0x100u;
    BOOL v21 = *(_DWORD **)(a1 + 64);
    if (!v21)
    {
      BOOL v21 = operator new(0x20uLL);
      v21[5] = 0;
      v21[6] = 0;
      *(void *)BOOL v21 = off_101868E70;
      *((void *)v21 + 1) = 0LL;
      *((_WORD *)v21 + 8) = 0;
      *(void *)(a1 + 64) = v21;
    }

    int v22 = *(void *)(a2 + 64);
    if (!v22) {
      int v22 = *(void *)(qword_1019A1A48 + 64);
    }
    sub_100A44E48((uint64_t)v21, v22);
    BOOL v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x200) == 0)
    {
LABEL_53:
      if ((v5 & 0x400) == 0) {
        return;
      }
      goto LABEL_65;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_53;
  }

  *(_DWORD *)(a1 + 96) |= 0x200u;
  uint64_t v23 = *(_WORD **)(a1 + 72);
  if (!v23)
  {
    uint64_t v23 = operator new(0x18uLL);
    *(void *)uint64_t v23 = off_101868EE8;
    v23[4] = 0;
    *((_BYTE *)v23 + 10) = 0;
    *((_DWORD *)v23 + 3) = 0;
    *((_DWORD *)v23 + 4) = 0;
    *(void *)(a1 + 72) = v23;
  }

  int v24 = *(_BYTE **)(a2 + 72);
  if (!v24) {
    int v24 = *(_BYTE **)(qword_1019A1A48 + 72);
  }
  sub_100A45878((uint64_t)v23, v24);
  if ((*(_DWORD *)(a2 + 96) & 0x400) != 0)
  {
LABEL_65:
    *(_DWORD *)(a1 + 96) |= 0x400u;
    double v25 = *(void **)(a1 + 80);
    if (!v25)
    {
      double v25 = operator new(0x18uLL);
      uint64_t *v25 = off_101868B28;
      v25[1] = 0LL;
      *((_DWORD *)v25 + 4) = 0;
      *(void *)(a1 + 80) = v25;
    }

    double v26 = *(_BYTE **)(a2 + 80);
    if (!v26) {
      double v26 = *(_BYTE **)(qword_1019A1A48 + 80);
    }
    sub_100A42688((uint64_t)v25, v26);
  }

  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 140),  (int)a2,  a4);
  uint64_t v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x40000) == 0)
  {
LABEL_26:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }

    BOOL v21 = *(double *)(a2 + 80);
    *(_DWORD *)(a1 + 132) |= 0x20u;
    *(double *)(a1 + 80) = v21;
    unint64_t v30 = *(_DWORD *)(a2 + 132);
    if ((v30 & 0x40) == 0)
    {
LABEL_33:
      if ((v30 & 0x80) == 0) {
        return *(float *)&v21;
      }
LABEL_52:
      *(_DWORD *)(a1 + 132) |= 0x80u;
      uint64_t v37 = *(char **)(a1 + 96);
      if (!v37)
      {
        uint64_t v37 = (char *)operator new(0x38uLL);
        *(void *)uint64_t v37 = off_101869E60;
        *(_OWORD *)(v37 + 8) = 0u;
        *(_OWORD *)(v37 + 24) = 0u;
        *(_OWORD *)(v37 + 40) = 0u;
        *(void *)(a1 + 96) = v37;
      }

      double v38 = *(void *)(a2 + 96);
      if (!v38) {
        double v38 = *(void *)(qword_1019A1B68 + 96);
      }
      *(float *)&BOOL v21 = sub_100A57DA8((uint64_t)v37, v38);
      return *(float *)&v21;
    }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_100;
  }
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x100u;
    BOOL v21 = *(void **)(a1 + 64);
    if (!v21)
    {
      BOOL v21 = operator new(0x20uLL);
      *BOOL v21 = &off_101871708;
      v21[1] = 0LL;
      v21[2] = 0LL;
      v21[3] = 0LL;
      *(void *)(a1 + 64) = v21;
    }

    int v22 = *(void *)(a2 + 64);
    if (!v22) {
      int v22 = *(void *)(qword_1019A1CE8 + 64);
    }
    sub_100B264A0((uint64_t)v21, v22);
    BOOL v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x200) == 0)
    {
LABEL_53:
      if ((v5 & 0x400) == 0) {
        goto LABEL_54;
      }
      goto LABEL_70;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_53;
  }

  *(_DWORD *)(a1 + 184) |= 0x200u;
  uint64_t v23 = *(void **)(a1 + 72);
  if (!v23)
  {
    uint64_t v23 = operator new(0x20uLL);
    char *v23 = &off_101871870;
    v23[1] = 0LL;
    v23[2] = 0LL;
    v23[3] = 0LL;
    *(void *)(a1 + 72) = v23;
  }

  int v24 = *(void *)(a2 + 72);
  if (!v24) {
    int v24 = *(void *)(qword_1019A1CE8 + 72);
  }
  sub_100B27BA0((uint64_t)v23, v24);
  BOOL v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_54:
    if ((v5 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_75;
  }

      free(v14);
      goto LABEL_56;
    }
  }

  uint64_t v16 = sub_100B7FE30(v8, (void *)v35[5]);
  unsigned int v17 = v16;
  if (!v16)
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v23 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Failed to convert parameter (%@) to dict",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_56;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    double v40 = 138412290;
    uint64_t v41 = a2;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Failed to convert parameter (%@) to dict",  &v40,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v14);
    goto LABEL_49;
  }

  if (![v16 objectForKey:a2])
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    int v24 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Configuration doesn't modify parameter %@.",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_56;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    double v40 = 138412290;
    uint64_t v41 = a2;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Configuration doesn't modify parameter %@.",  &v40,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v14);
    goto LABEL_49;
  }

  uint64_t v18 = [v17 objectForKeyedSubscript:a2];
  if ((sub_100B80038((uint64_t)v18, a2, v18) & 1) == 0)
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    double v25 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      double v26 = [v17 objectForKeyedSubscript:a2];
      *(_DWORD *)buf = 138412547;
      *(void *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2113;
      *(void *)&buf[14] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Sanity check failed for key %@ with retrieved value %{private}@.",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_56;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v28 = qword_101934738;
    uint64_t v29 = [v17 objectForKeyedSubscript:a2];
    double v40 = 138412547;
    uint64_t v41 = a2;
    uint64_t v42 = 2113;
    uint64_t v43 = v29;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "[Dynamic Config] Sanity check failed for key %@ with retrieved value %{private}@.",  &v40,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_56;
    }
    goto LABEL_50;
  }

  objc_msgSend(objc_msgSend(v17, "objectForKeyedSubscript:", a2), "doubleValue");
  *a3 = v19;
  if (qword_101934730 != -1) {
    dispatch_once(&qword_101934730, &stru_101874040);
  }
  uint64_t v20 = (os_log_s *)qword_101934738;
  if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v21 = *a3;
    *(_DWORD *)buf = 138412547;
    *(void *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2049;
    *(void *)&buf[14] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[Dynamic Config] Overriding %@ to %{private}f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    unint64_t v30 = *a3;
    double v40 = 138412547;
    uint64_t v41 = a2;
    uint64_t v42 = 2049;
    uint64_t v43 = v30;
    uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  0LL,  "[Dynamic Config] Overriding %@ to %{private}f",  &v40,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v31);
    if (v31 != buf) {
      free(v31);
    }
  }

  int v22 = 1LL;
LABEL_57:
  _Block_object_dispose(&v34, 8);
  return v22;
}

  uint64_t v12 = *(void *)(v5 + 64);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A1D48 + 64);
  }
  float result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v12,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }

      sub_100007008();
    }

    goto LABEL_22;
  }

  uint64_t v6 = (unint64_t *)(a1 + 40);
  BOOL v5 = *(_BYTE **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      int v24 = *v6;
      double v25 = &v5[-*v6];
      double v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        uint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          double v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v28 = v26;
        }
        if (v28) {
          uint64_t v12 = operator new(v28);
        }
        else {
          uint64_t v12 = 0LL;
        }
        uint64_t v20 = &v25[(void)v12];
        BOOL v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        BOOL v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          uint64_t v31 = &v5[~v24];
          do
          {
            unint64_t v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }

          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }

        goto LABEL_46;
      }

      goto LABEL_50;
    }

      sub_100007008();
    }

    goto LABEL_22;
  }

  uint64_t v6 = (unint64_t *)(a1 + 64);
  BOOL v5 = *(_BYTE **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      int v24 = *v6;
      double v25 = &v5[-*v6];
      double v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        uint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          double v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v28 = v26;
        }
        if (v28) {
          uint64_t v12 = operator new(v28);
        }
        else {
          uint64_t v12 = 0LL;
        }
        uint64_t v20 = &v25[(void)v12];
        BOOL v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        BOOL v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          uint64_t v31 = &v5[~v24];
          do
          {
            unint64_t v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }

          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }

        goto LABEL_46;
      }

      goto LABEL_50;
    }

  if (!v61) {
    goto LABEL_56;
  }
  if (v60 == v59)
  {
    uint64_t v36 = 4LL;
  }

  else
  {
    if (!v60) {
      goto LABEL_56;
    }
    uint64_t v36 = 5LL;
    unint64_t v13 = v60;
  }

  (*(void (**)(void *))(*v13 + 8 * v36))(v13);
LABEL_56:
  if (v51)
  {
    uint64_t v37 = v50;
    if (v50 == v49)
    {
      double v38 = 4LL;
      uint64_t v37 = v49;
      goto LABEL_61;
    }

    if (v50)
    {
      double v38 = 5LL;
LABEL_61:
      (*(void (**)(void))(*v37 + 8 * v38))();
    }
  }

  return sub_1000ECEDC(&v46);
}

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_1018821A8);
  }
  double v34 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = *(_DWORD *)(a2 + 96);
    uint64_t v36 = *(void *)(a2 + 20);
    uint64_t v37 = *(_DWORD *)(a2 + 140);
    LODWORD(buf[0]) = 67109888;
    DWORD1(buf[0]) = v35;
    WORD4(buf[0]) = 2048;
    *(double *)((char *)buf + 10) = v22;
    WORD1(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 4) = v36;
    WORD6(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 14) = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "#LCStats,homeVisit,posType,%d,distFromCentroid,%0.2f m,estAcc,%0.2f m,sigEnv,%d",  (uint8_t *)buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_1018821A8);
    }
    unint64_t v49 = *(_DWORD *)(a2 + 96);
    __int16 v50 = *(void *)(a2 + 20);
    double v51 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)uint64_t v55 = 67109888;
    *(_DWORD *)&v55[4] = v49;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v22;
    *(_WORD *)&v55[18] = 2048;
    *(void *)&v55[20] = v50;
    unint64_t v56 = 1024;
    BOOL v57 = v51;
    LODWORD(v52) = 34;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#LCStats,homeVisit,posType,%d,distFromCentroid,%0.2f m,estAcc,%0.2f m,sigEnv,%d",  v55,  v52,  v53,  LODWORD(v54));
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerCAStats::calcHomeVisitStats(const CLDaemonLocation &)",  "%s\n",  v14);
    goto LABEL_82;
  }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101884578);
    }
    double v26 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(unsigned __int8 *)(a1 + 192);
      uint64_t v28 = *(unsigned __int8 *)(a1 + 160);
      uint64_t v29 = *(void *)(a1 + 176) == 0LL;
      unint64_t v30 = *(void *)(a1 + 208) == 0LL;
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)&buf[4] = v120;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v27;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v28;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v29;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "WIFITILE: checkDownloadSchedule, skip, active, %{public}d, inprogress, %{public}d, %{public}d, shutdown, %{public}d, %{public}d",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101884578);
      }
      uint64_t v31 = *(unsigned __int8 *)(a1 + 192);
      unint64_t v32 = *(unsigned __int8 *)(a1 + 160);
      double v33 = *(void *)(a1 + 176) == 0LL;
      double v34 = *(void *)(a1 + 208) == 0LL;
      *(_DWORD *)v127 = 67241216;
      *(_DWORD *)&v127[4] = v120;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v31;
      *(_WORD *)&v127[14] = 1026;
      *(_DWORD *)&v127[16] = v32;
      *(_WORD *)&v127[20] = 1026;
      *(_DWORD *)&v127[22] = v33;
      *(_WORD *)&v127[26] = 1026;
      *(_DWORD *)&v127[28] = v34;
      LODWORD(v118) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WIFITILE: checkDownloadSchedule, skip, active, %{public}d, inprogress, %{public}d, %{public}d, shutdown, %{public}d, %{public}d",  v127,  v118);
      uint64_t v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v35);
LABEL_193:
      if (v36 != buf) {
        free(v36);
      }
      return;
    }

    return;
  }

  if (!*(void *)(a1 + 176) && !*(void *)(a1 + 208))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    v95 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "WIFITILE: checkDownloadSchedule, both download requests null, shutdown?",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      *(_WORD *)v127 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WIFITILE: checkDownloadSchedule, both download requests null, shutdown?",  v127,  2);
      unint64_t v14 = (char *)v96;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v96);
      goto LABEL_218;
    }

    goto LABEL_50;
  }

  uint64_t v37 = *(int *)(a1 + 408) > 1 || *(_BYTE *)(a1 + 412) != 0;
  v119 = v37;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101884538);
  }
  double v51 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    sub_100832C64(a1 + 232, (std::stringbuf::string_type *)buf);
    int v52 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v127 = 67240451;
    *(_DWORD *)&v127[4] = a2;
    *(_WORD *)&v127[8] = 2081;
    *(void *)&v127[10] = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, priority, %{public}d, lastLocation, %{private}s",  v127,  0x12u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    v106 = qword_101934858;
    sub_100832C64(a1 + 232, (std::stringbuf::string_type *)v127);
    if (v127[23] >= 0) {
      v107 = v127;
    }
    else {
      v107 = *(_BYTE **)v127;
    }
    v123 = 67240451;
    v124 = a2;
    v125 = 2081;
    v126 = v107;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v106,  2LL,  "WIFITILE: checkDownloadSchedule, priority, %{public}d, lastLocation, %{private}s",  &v123,  18);
    v109 = v108;
    if ((v127[23] & 0x80000000) != 0) {
      operator delete(*(void **)v127);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v109);
    if (v109 != buf) {
      free(v109);
    }
  }

  uint64_t v6 = *(void **)(a1 + 128);
  if (v6 != (void *)(a1 + 136))
  {
    while (1)
    {
      if (*(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 192)) {
        goto LABEL_167;
      }
      double v53 = v6[10];
      uint64_t v9 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
      v122 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, v53);
      if (*(_DWORD *)(v53 + 48))
      {
        sub_101271770();
        __break(1u);
        goto LABEL_196;
      }

      if (sub_100C0DB30(v53)) {
        break;
      }
      if (!sub_100C0D05C(v53, v119, *((float *)v9 + 32), a3))
      {
        __int16 v54 = 65;
        goto LABEL_139;
      }

      v121 = 0;
      uint64_t v55 = sub_100DF75B0(a1, (_BYTE *)v53);
      if (v55 == 2)
      {
        unint64_t v56 = a1 + 184;
        if (!a2)
        {
          unint64_t v56 = a1 + 184;
          if (!v121)
          {
            __int16 v54 = 76;
            goto LABEL_139;
          }
        }
      }

      else
      {
        if (v55 != 1)
        {
          __int16 v54 = 67;
          goto LABEL_139;
        }

        v121 = 1;
        unint64_t v56 = a1 + 152;
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      BOOL v57 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v58 = *(void *)v56;
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, chose, downloadState, %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101884538);
        }
        uint64_t v75 = *(void *)v56;
        *(_DWORD *)v127 = 136446210;
        *(void *)&v127[4] = v75;
        LODWORD(v118) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WIFITILE: checkDownloadSchedule, chose, downloadState, %{public}s",  v127,  v118);
        v77 = (char *)v76;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v76);
        if (v77 != buf) {
          free(v77);
        }
      }

      v59 = *(void *)(v56 + 24);
      *(_BYTE *)(v59 + 80) = v121;
      *(_BYTE *)(v59 + 81) = 1;
      else {
        __int16 v60 = (void **)v9[7];
      }
      p_vtable = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v60);
      if (!*((_BYTE *)v9 + 80))
      {
        uint64_t v61 = +[GEOCountryConfiguration sharedConfiguration]( &OBJC_CLASS___GEOCountryConfiguration,  "sharedConfiguration");
        else {
          unsigned int v62 = (void **)v9[11];
        }
        p_vtable = (void **)objc_msgSend( v61,  "defaultForKey:defaultValue:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v62),  p_vtable);
      }

      sub_1010DDBC0(buf, (char *)[p_vtable UTF8String]);
      uint64_t v63 = sub_100C0DB80(v53, (uint64_t)buf, *(void *)(v56 + 24));
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v63)
      {
        *(_BYTE *)(v56 + 8) = 1;
        *(double *)(v56 + 16) = a3;
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101884538);
        }
        ++v120;
        __int16 v64 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v53 + 16LL))(buf, v53);
          uint64_t v65 = buf;
          if (buf[23] < 0) {
            uint64_t v65 = *(_BYTE **)buf;
          }
          *(_DWORD *)v127 = 67240451;
          *(_DWORD *)&v127[4] = v120;
          *(_WORD *)&v127[8] = 2081;
          *(void *)&v127[10] = v65;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %{public}d, tile, %{private}s",  v127,  0x12u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101884538);
          }
          uint64_t v78 = qword_101934858;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v53 + 16LL))(v127, v53);
          unint64_t v79 = v127;
          if (v127[23] < 0) {
            unint64_t v79 = *(_BYTE **)v127;
          }
          v123 = 67240451;
          v124 = v120;
          v125 = 2081;
          v126 = v79;
          LODWORD(v118) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v78,  2LL,  "WIFITILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %{public}d, tile, %{private}s",  &v123,  v118);
          v81 = v80;
          if ((v127[23] & 0x80000000) != 0) {
            operator delete(*(void **)v127);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v81);
          if (v81 != buf) {
            free(v81);
          }
        }

        (*((void (**)(void **))v9[29] + 2))(v9 + 29);
        ++*((_DWORD *)v9 + 70);
        (*((void (**)(void **))v9[29] + 3))(v9 + 29);
        sub_1010DDBC0(buf, "startDownloading");
        sub_100987188((uint64_t)(v9 + 29), (uint64_t *)buf, *(_DWORD *)(a1 + 408));
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (sub_100E575B0())
        {
          sub_1002A5370(buf);
          __int16 v66 = (char *)(v53 + 8);
          sub_1002ACA84((uint64_t)buf, "getTile", v66);
          sub_1002AB3FC((uint64_t)buf, "protection", (_BYTE *)(a1 + 216));
          sub_1002AB3FC((uint64_t)buf, "isCurrentTile", &v122);
          sub_1002AB3FC((uint64_t)buf, "isAllowCellular", &v121);
          sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
          sub_1002A5590(buf);
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101884538);
        }
        uint64_t v67 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          int v68 = sub_1008ADB4C(v53 + 48);
          v69 = sub_1008ADB70(v53 + 48);
          uint64_t v70 = *(_DWORD *)(a1 + 408);
          v71 = [p_vtable UTF8String];
          *(_DWORD *)buf = 134284291;
          *(double *)&buf[4] = v68;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v69;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v70;
          *(_WORD *)&buf[28] = 2081;
          *(void *)&buf[30] = v71;
          _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101884538);
          }
          uint64_t v82 = qword_101934858;
          v83 = sub_1008ADB4C(v53 + 48);
          v84 = sub_1008ADB70(v53 + 48);
          v85 = *(_DWORD *)(a1 + 408);
          v86 = [p_vtable UTF8String];
          *(_DWORD *)v127 = 134284291;
          *(double *)&v127[4] = v83;
          *(_WORD *)&v127[12] = 2049;
          *(double *)&v127[14] = v84;
          *(_WORD *)&v127[22] = 1026;
          *(_DWORD *)&v127[24] = v85;
          *(_WORD *)&v127[28] = 2081;
          *(void *)&v127[30] = v86;
          LODWORD(v118) = 38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v82,  0LL,  "@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s",  v127,  v118);
          v88 = (char *)v87;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v87);
          if (v88 != buf) {
            free(v88);
          }
        }

        sub_100C15888(v53, 68);
        if (v120 > 1) {
          goto LABEL_167;
        }
      }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101887EC0);
  }
  double v34 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    int v35 = *(_DWORD *)a1;
    if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v37 = a4;
    }
    else {
      uint64_t v37 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)double v53 = 2082;
    *(void *)&v53[2] = "";
    __int16 v54 = 1026;
    uint64_t v55 = v16;
    unint64_t v56 = 1026;
    BOOL v57 = v35;
    unsigned int v58 = 2082;
    v59 = v36;
    __int16 v60 = 2082;
    uint64_t v61 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#AMLCfg updated CB info, changed:%{public}d, sim:%{public}d, version:%{public , location:escape_only}s, id:%{public, location:escape_only}s}",  buf,  0x32u);
  }

  sub_100E47714((int *)a1);
  return v16;
}

  sub_100527B44(&v21);
}

  *(_DWORD *)(a2 + 128) = 50;
LABEL_6:
  if ((*(_DWORD *)(a1 + 336) & 0xFFFFFFFE) != 4) {
    return 0LL;
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10188CFE8);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(_DWORD *)(a2 + 96);
    int v8 = *(void *)(a2 + 4);
    uint64_t v9 = *(void *)(a2 + 12);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)BOOL v57 = v7;
    *(_WORD *)&v57[4] = 2048;
    *(void *)&v57[6] = v8;
    *(_WORD *)&v57[14] = 2048;
    *(void *)&v57[16] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10188CFE8);
    }
    uint64_t v41 = *(_DWORD *)(a2 + 96);
    uint64_t v42 = *(void *)(a2 + 4);
    uint64_t v43 = *(void *)(a2 + 12);
    __int16 v54 = 67109632;
    *(_DWORD *)uint64_t v55 = v41;
    *(_WORD *)&v55[4] = 2048;
    *(void *)&v55[6] = v42;
    *(_WORD *)&v55[14] = 2048;
    *(void *)&v55[16] = v43;
    LODWORD(v47) = 28;
    __int128 v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf",  &v54,  v47,  v48[0]);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v44);
  }

  if (*(_BYTE *)(a1 + 312))
  {
    uint64_t v10 = *(double *)(a1 + 328);
    if (v10 > *(double *)(a1 + 320) + *(double *)(a1 + 320))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10188CFE8);
      }
      uint64_t v11 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)BOOL v57 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Location rejected by IM,Reason,disagrees with GPS,location type,%d",  buf,  8u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 1LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10188CFE8);
      }
      double v45 = *(_DWORD *)(a2 + 96);
      __int16 v54 = 67109120;
      *(_DWORD *)uint64_t v55 = v45;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Location rejected by IM,Reason,disagrees with GPS,location type,%d",  &v54);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
LABEL_99:
      return 1LL;
    }

    unint64_t v32 = fabs(v10) / 3.5;
    *(double *)(a2 + 20) = v32 + *(double *)(a2 + 20);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10188CFE8);
    }
    double v33 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      double v34 = *(double *)(a2 + 20);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v57 = v34 - v32;
      *(_WORD *)&v57[8] = 2048;
      *(double *)&v57[10] = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "huncBump,fromHunc,%.1lf,toHunc,%.1lf",  buf,  0x16u);
    }

    float result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 == -1) {
        goto LABEL_68;
      }
      goto LABEL_106;
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 288) || !*(_BYTE *)(a1 + 289))
    {
      if (*(_DWORD *)(a2 + 96) == 4 && *v3 && !*(_BYTE *)(a1 + 289) && *(double *)(a1 + 280) > 5000.0)
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10188CFE8);
        }
        uint64_t v36 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)BOOL v57 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 1LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10188CFE8);
        }
        double v38 = *(_DWORD *)(a2 + 96);
        __int16 v54 = 67109120;
        *(_DWORD *)uint64_t v55 = v38;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d",  &v54);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
        goto LABEL_99;
      }

      return 0LL;
    }

    uint64_t v27 = *(double *)(a1 + 304);
    if (v27 > *(double *)(a1 + 296) + *(double *)(a1 + 296))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10188CFE8);
      }
      uint64_t v28 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)BOOL v57 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d",  buf,  8u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 1LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10188CFE8);
      }
      unint64_t v30 = *(_DWORD *)(a2 + 96);
      __int16 v54 = 67109120;
      *(_DWORD *)uint64_t v55 = v30;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d",  &v54);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
      goto LABEL_99;
    }

    unint64_t v32 = fabs(v27) / 3.5;
    *(double *)(a2 + 20) = v32 + *(double *)(a2 + 20);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10188CFE8);
    }
    uint64_t v39 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      double v40 = *(double *)(a2 + 20);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v57 = v40 - v32;
      *(_WORD *)&v57[8] = 2048;
      *(double *)&v57[10] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "huncBump,fromHunc,%.1lf,toHunc,%.1lf",  buf,  0x16u);
    }

    float result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 == -1)
      {
LABEL_68:
        int v35 = *(double *)(a2 + 20);
        __int16 v54 = 134218240;
        *(double *)uint64_t v55 = v35 - v32;
        *(_WORD *)&v55[8] = 2048;
        *(double *)&v55[10] = v35;
        LODWORD(v47) = 22;
        unsigned int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "huncBump,fromHunc,%.1lf,toHunc,%.1lf",  COERCE_DOUBLE(&v54),  v47);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v17);
LABEL_69:
        return 0LL;
      }

    if ((unint64_t)-[NSMutableArray count](self->_recentMeanSeaLevelPressureArray, "count") >= 0xF)
    {
      -[NSMutableArray removeObjectAtIndex:](self->_recentMeanSeaLevelPressureArray, "removeObjectAtIndex:", 0LL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101894348);
      }
      double v51 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v124 = "recentMslpArrayCount";
        v125 = 1024;
        *(_DWORD *)v126 = (_DWORD)v92 - 1;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "remove the oldest recent mslp,%s,%d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_101894348);
        }
        v104 = 136315394;
        v105 = "recentMslpArrayCount";
        v106 = 1024;
        *(_DWORD *)v107 = (_DWORD)v92 - 1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "remove the oldest recent mslp,%s,%d",  (const char *)&v104,  18);
        uint64_t v75 = (uint8_t *)v74;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator updateHistoricalMslpArray:from:]",  "%s\n",  v74);
        if (v75 != buf) {
          free(v75);
        }
      }
    }

    -[NSMutableArray addObject:](self->_recentMeanSeaLevelPressureArray, "addObject:", a3);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101894348);
    }
    int v52 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      double v53 = -[NSMutableArray count](self->_recentMeanSeaLevelPressureArray, "count");
      [a3 meanSeaLevelPressure];
      uint64_t v55 = v54;
      [a3 uncertainty];
      BOOL v57 = v56;
      [a3 timestamp];
      v59 = v58;
      [a3 pressureMeasurement];
      *(_DWORD *)buf = 136317442;
      v124 = "count";
      v125 = 1024;
      *(_DWORD *)v126 = v53;
      *(_WORD *)&v126[4] = 2080;
      *(void *)&v126[6] = "meanSeaLevelPressure";
      v127 = 2048;
      v128 = v55;
      v129 = 2080;
      v130 = "uncertainty";
      v131 = 2048;
      v132 = v57;
      v133 = 2080;
      v134 = "timestamp";
      v135 = 2048;
      v136 = v59;
      v137 = 2080;
      v138 = "measurePressure";
      v139 = 2048;
      v140 = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "add mslp to recent mslp array,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f",  buf,  0x62u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101894348);
      }
      uint64_t v63 = qword_1019346A8;
      __int16 v64 = -[NSMutableArray count](self->_recentMeanSeaLevelPressureArray, "count");
      [a3 meanSeaLevelPressure];
      __int16 v66 = v65;
      [a3 uncertainty];
      int v68 = v67;
      [a3 timestamp];
      uint64_t v70 = v69;
      [a3 pressureMeasurement];
      v104 = 136317442;
      v105 = "count";
      v106 = 1024;
      *(_DWORD *)v107 = v64;
      *(_WORD *)&v107[4] = 2080;
      *(void *)&v107[6] = "meanSeaLevelPressure";
      v108 = 2048;
      v109 = v66;
      v110 = 2080;
      v111 = "uncertainty";
      v112 = 2048;
      v113 = v68;
      v114 = 2080;
      v115 = "timestamp";
      v116 = 2048;
      v117 = v70;
      v118 = 2080;
      v119 = "measurePressure";
      v120 = 2048;
      v121 = v71;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v63,  0LL,  "add mslp to recent mslp array,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f",  (const char *)&v104,  98,  v91,  *(double *)&v92,  (const char *)v93,  v94,  v95,  *(double *)&__p,  v97,  v98);
      uint64_t v73 = (uint8_t *)v72;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator updateHistoricalMslpArray:from:]",  "%s\n",  v72);
      if (v73 != buf) {
        free(v73);
      }
    }

    lastTimestampSavedRecentMslpForRecovery = self->_lastTimestampSavedRecentMslpForRecovery;
    if (lastTimestampSavedRecentMslpForRecovery == 1.79769313e308
      || vabdd_f64(Current, lastTimestampSavedRecentMslpForRecovery) > 180.0)
    {
      -[CLMeanSeaLevelPressureEstimator saveRecentMeanSeaLevelPressureArrayToPlist]( self,  "saveRecentMeanSeaLevelPressureArrayToPlist");
    }

    unsigned int v62 = self->_recentMeanSeaLevelPressureArray;
    sub_1010DDBC0(&v93, "recent mslp array updates to:");
    -[CLMeanSeaLevelPressureEstimator printMeanSeaLevelPressureArray:withPrePhrase:]( self,  "printMeanSeaLevelPressureArray:withPrePhrase:",  v62,  &v93);
    if (SHIBYTE(v95) < 0) {
      operator delete(v93);
    }
    -[CLMeanSeaLevelPressureEstimator getAndSendCurrentEstimateMeanSeaLevelPressureFrom:]( self,  "getAndSendCurrentEstimateMeanSeaLevelPressureFrom:",  v4);
    LOBYTE(v7) = 1;
    return v7;
  }

  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_101894348);
  }
  uint64_t v12 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    [a3 timestamp];
    cumulativeStartTime = self->_cumulativeStartTime;
    *(_DWORD *)buf = 134218240;
    v124 = v14;
    v125 = 2048;
    *(double *)v126 = cumulativeStartTime;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "return early in update historical mslp array due to fall back timestamp,sampleTimestamp,%f,cumulativeStartTime,%f",  buf,  0x16u);
  }

  uint64_t v7 = sub_1002921D0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101894348);
    }
    uint64_t v15 = qword_1019346A8;
    [a3 timestamp];
    uint64_t v16 = self->_cumulativeStartTime;
    v104 = 134218240;
    v105 = v17;
    v106 = 2048;
    *(double *)v107 = v16;
    LODWORD(v90) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  0LL,  "return early in update historical mslp array due to fall back timestamp,sampleTimestamp,%f,cumulativeStartTime,%f",  COERCE_DOUBLE(&v104),  v90);
    BOOL v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator updateHistoricalMslpArray:from:]",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
    LOBYTE(v7) = 0;
  }

  return v7;
}

  if ((_BYTE)v108) {
    pthread_mutex_unlock(v107);
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v106 + 24LL))(v106);
  }
}

  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "maxAbsX", *(float *)(a1 + 60));
  BOOL v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 76), 0xCu);
  unint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfChargerState", *(void *)(a1 + 24));
  uint64_t v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 168), 0x16u);
  BOOL v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 60));
  BOOL v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0xDu);
  unint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }

  double v25 = *(void *)(a2 + 320);
  v10 |= 0x1000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 320) = v25;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 124));
  BOOL v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 24), 0x17u);
  unint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

  int v22 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 212) |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v22;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x2000) == 0)
  {
LABEL_21:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 112), 0xAu);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  unint64_t v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "peakEnergy", *(float *)(a1 + 64));
  BOOL v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 32), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  float result = *(float *)(a2 + 72);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "maxAccelNormOverEpochTimestamp", *(void *)(a1 + 32));
  BOOL v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 68), 0x13u);
  unint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  int v22 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 132) = v3;
  *(void *)(result + 40) = v22;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 88));
  BOOL v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 116), 0xCDu);
  unint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x20000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 100) = v18;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  BOOL v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x10u);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 140), 3u);
  unint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_52;
  }

  unint64_t v4 = *(void *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(a1 + 164) = v3;
  *(void *)(a1 + 16) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000000LL) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "duration", *(float *)(a1 + 64));
  BOOL v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 162), 0xBu);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "signalRateBaselineKcpss", *(float *)(a1 + 96));
  BOOL v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x16u);
  unint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  unsigned int v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 84) = v17;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "pearlScanWindownOffTs", *(void *)(a1 + 16));
  BOOL v5 = *(void *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0xFu);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }

  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 40) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "qw", *(float *)(a1 + 88));
  BOOL v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 8), 0x12u);
  unint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  float result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 144) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_52:
    float result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 208) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "userAccelProjectedGravityAmplitudeCadence", *(double *)(a1 + 184));
  BOOL v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800000) != 0) {
    goto LABEL_51;
  }
LABEL_25:
  if ((v5 & 0x1000000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

  float result = PB::Writer::write(this, *(double *)(v3 + 72), 0x18u);
  if ((*(_DWORD *)(v3 + 208) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x19u);
  }
  return result;
}

  uint64_t v11 = *(_DWORD *)(a2 + 128);
  v3 |= 0x40000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 128) = v11;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "numPointsInEpoch", *(_DWORD *)(a1 + 112));
  BOOL v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 148), 9u);
  unint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }

  float result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 144) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMedian", *(double *)(a1 + 144));
  BOOL v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 152), 0x13u);
  unint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  float result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 128) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P5", *(double *)(a1 + 176));
  BOOL v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 144), 0x17u);
  unint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x14u);
  int v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x800) == 0)
  {
LABEL_27:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }

  float result = *(float *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 100) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "pressureFFTBin4", *(float *)(a1 + 100));
  BOOL v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 104), 0x17u);
  unint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "asymmetryPercentageRejectionStatus", *(_DWORD *)(a1 + 36));
  BOOL v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 164), 4u);
  unint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100000000000LL) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }

  int v24 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 52) = v24;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "vehicularConfidence", *(_DWORD *)(a1 + 100));
  BOOL v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 84), 0x16u);
  unint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  uint64_t v29 = *(_DWORD *)(a2 + 140);
  v5 |= 0x20000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 140) = v29;
  unint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 160));
  BOOL v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 72), 0x12u);
  unint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }

  BOOL v19 = *(_DWORD *)(a2 + 184);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 184) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 88));
  BOOL v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 180), 0x11u);
  unint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 84);
  v5 |= 0x800uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 84) = v18;
  unint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "hidTimestamp", *(double *)(a1 + 8));
  BOOL v5 = *(void *)(a1 + 192);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 8u);
  unint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }

  BOOL v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 40) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  BOOL v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 88), 0x11u);
  unint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }

  int v22 = *(_DWORD *)(a2 + 100);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 100) = v22;
  BOOL v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 148), 0xAu);
  unint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }

  float result = *(double *)(a2 + 120);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 120) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "groundContactTimeWindowEndTime", *(double *)(a1 + 56));
  BOOL v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0xEu);
  unint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }

  uint64_t v23 = *(_DWORD *)(a2 + 176);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v23;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "kalmanMeasurementNoiseOdometer", *(double *)(a1 + 104));
  BOOL v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x15u);
  unint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }

  double v25 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 24) = v25;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }

  PB::TextFormatter::format(this, "swingAccelAmplitudeYBackwards", *(double *)(a1 + 168));
  BOOL v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

  float result = PB::Writer::write(this, *(double *)(v3 + 8), 0x17u);
  unint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }

void sub_100009418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, uint64_t a23, char *a24, uint64_t a25, uint64_t a26, char a27)
{
  a24 = &a27;
  sub_100006BC8((void ***)&a24);
  _Unwind_Resume(a1);
}

double sub_10000947C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 - *a2) >> 3;
  if (v4 == v3) {
    return 0.0;
  }
  uint64_t v6 = 0LL;
  double result = 0.0;
  do
  {
    double v8 = *(double *)(v3 + 8 * v6) - *(double *)(*a3 + 8 * v6);
    double result = result + v8 * v8;
    ++v6;
  }

  while (v5 > v6);
  return result;
}

void *sub_1000094E8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100006E1C(result, a4);
    double result = sub_100006E6C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10000954C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100006BC8(&a9);
  _Unwind_Resume(a1);
}

void *sub_10000956C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1000070D4();
  }
  return operator new(4 * a2);
}

void sub_1000095A0(uint64_t a1@<X1>, void **p_vtable@<X2>, __n128 *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7 = (__n128 *)a1;
  if (!sub_100097CA8(a1)) {
    sub_101223308();
  }
  if (v7->n128_u32[1] != 2)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818830);
    }
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    v97 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      a3 = &v126;
      sub_100103B9C(v7->n128_i32[1], &v126);
      if (v127 >= 0) {
        v98 = &v126;
      }
      else {
        v98 = (__n128 *)v126.n128_u64[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      __int16 v139 = 2082;
      uint64_t v140 = (uint64_t)v98;
      __int16 v141 = 2082;
      *(void *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(void *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, model type is not similarity list!, Model Type:%{publ ic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v127 < 0) {
        operator delete((void *)v126.n128_u64[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
    }

    v99 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      a3 = &v126;
      sub_100103B9C(v7->n128_i32[1], &v126);
      if (v127 >= 0) {
        v100 = &v126;
      }
      else {
        v100 = (__n128 *)v126.n128_u64[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      __int16 v139 = 2082;
      uint64_t v140 = (uint64_t)v100;
      __int16 v141 = 2082;
      *(void *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(void *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v99,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CosineSimilarityLocalization, model type is not similarity list!",  "{msg%{public}.0s:CosineSimilarityLocalization, model type is not similarity list!, Model Type:%{publ ic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v127 < 0) {
        operator delete((void *)v126.n128_u64[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
    }

    a4 = qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      int v101 = v7->n128_i32[1];
      uint64_t v7 = &v126;
      sub_100103B9C(v101, &v126);
      v102 = v127 >= 0 ? &v126 : (__n128 *)v126.n128_u64[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      __int16 v139 = 2082;
      uint64_t v140 = (uint64_t)v102;
      __int16 v141 = 2082;
      *(void *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(void *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)a4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CosineSimilarityLocalization, model type is not similarity list!, Model Type:%{publ ic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v127 < 0) {
        operator delete((void *)v126.n128_u64[0]);
      }
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm",  24,  "localize");
    goto LABEL_245;
  }

  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 32) = 0LL;
  uint64_t v9 = (void **)(a4 + 32);
  *(_BYTE *)(a4 + 80) = 0;
  *(void *)(a4 + 40) = 0LL;
  *(void *)(a4 + 48) = 0LL;
  *(_BYTE *)(a4 + 56) = 0;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)p_vtable + 40);
  sub_10000AEE4( a4 + 32,  0LL,  (char *)p_vtable[21],  (char *)p_vtable[22],  ((_BYTE *)p_vtable[22] - (_BYTE *)p_vtable[21]) >> 2);
  if (!v7[12].n128_u8[0] || v7[6].n128_u64[1] == v7[6].n128_u64[0])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818830);
    }
    unint64_t v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, model with empty LSL, publishing empty results}",  buf,  0x12u);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818830);
    }
    uint64_t v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      if (v7[9].n128_u8[0])
      {
        signed __int32 v11 = v7[8].n128_i32[1];
        if (v7[8].n128_u8[1]) {
          LODWORD(v12) = v7[8].n128_u32[2];
        }
        else {
          LODWORD(v12) = v7[8].n128_u32[1];
        }
        uint64_t v12 = (int)v12;
        if (!v7[8].n128_u8[1]) {
          signed __int32 v11 = v7[8].n128_i32[2];
        }
      }

      else
      {
        uint64_t v12 = 0LL;
        signed __int32 v11 = 0;
      }

      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      __int16 v139 = 2050;
      uint64_t v140 = v12;
      __int16 v141 = 2050;
      *(void *)v142 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, running localization, LSL Length:%{public}lu, LSL N um Clusters:%{public}lu}",  buf,  0x26u);
    }

    if (v7[8].n128_u8[1]) {
      unint64_t v14 = &v7[8].n128_u32[1];
    }
    else {
      unint64_t v14 = &v7[8].n128_u32[2];
    }
    sub_100093BA8(v136, 1LL, *v14 + 1);
    sub_10000C0A8((uint64_t)v133, (unsigned __int8 *)&xmmword_1019A09F0);
    sub_1000CCB00((uint64_t)v7, (uint64_t)p_vtable, (uint64_t)v133, 0LL, 0, (uint64_t)&v126);
    unint64_t v15 = v126.n128_u64[0];
    v116 = (void **)(a4 + 32);
    if (v126.n128_u64[0] != v126.n128_u64[1])
    {
      while (*(_OWORD *)v15 != 0LL)
      {
        v15 += 32LL;
        if (v15 == v126.n128_u64[1]) {
          goto LABEL_30;
        }
      }
    }

    if (v15 != v126.n128_u64[1])
    {
      double v4 = *(double *)(v15 + 16);
      goto LABEL_35;
    }

LABEL_30:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818830);
    }
    uint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "CosineSimilarityLocalization, did not find null space probability",  buf,  2u);
    }

    double v4 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 == -1) {
        goto LABEL_220;
      }
      goto LABEL_246;
    }

    while (1)
    {
LABEL_35:
      sub_1002F0B04(buf);
      v117 = p_vtable;
      CFStringRef v17 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullClusterThresholdForLowConfidence",  0x8000100u,  kCFAllocatorNull);
      sub_1002A827C(*(uint64_t *)buf, (uint64_t)v17, (float *)&__p);
      int v19 = v18;
      CFRelease(v17);
      float v20 = *(float *)&__p;
      BOOL v21 = *(std::__shared_weak_count **)v138;
      if (*(void *)v138)
      {
        int v22 = (unint64_t *)(*(void *)v138 + 8LL);
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      double v24 = v20;
      if (!v19) {
        double v24 = 0.300000012;
      }
      if (v4 > v24)
      {
        unint64_t v25 = *(void *)(a4 + 48);
        *(_DWORD *)(a4 + 24) = 0;
        double v26 = *(char **)(a4 + 40);
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = (char *)*v9;
          uint64_t v29 = (v26 - (_BYTE *)*v9) >> 2;
          unint64_t v30 = v29 + 1;
          uint64_t v31 = v25 - (void)v28;
          if (v31 >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            double v33 = (char *)sub_10000956C(a4 + 48, v32);
            uint64_t v28 = *(char **)(a4 + 32);
            double v26 = *(char **)(a4 + 40);
          }

          else
          {
            double v33 = 0LL;
          }

          double v34 = &v33[4 * v29];
          int v35 = &v33[4 * v32];
          *(_DWORD *)double v34 = 7;
          uint64_t v27 = v34 + 4;
          while (v26 != v28)
          {
            int v36 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v36;
            v34 -= 4;
          }

          *(void *)(a4 + 32) = v34;
          *(void *)(a4 + 40) = v27;
          *(void *)(a4 + 48) = v35;
          if (v28) {
            operator delete(v28);
          }
        }

        else
        {
          *(_DWORD *)double v26 = 7;
          uint64_t v27 = v26 + 4;
        }

        *(void *)(a4 + 40) = v27;
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818830);
        }
        uint64_t v37 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(void *)&v138[2] = "";
          __int16 v139 = 2049;
          uint64_t v140 = *(void *)&v4;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, setting invalid confidence due to high null cluster pro bability, nullClusterProbability:%{private}.6f}",  buf,  0x1Cu);
        }
      }

      if (a3)
      {
        unint64_t v38 = v126.n128_u64[0];
        if (v126.n128_u64[0] != v126.n128_u64[1])
        {
          for (unint64_t i = v126.n128_u64[0] + 32; i != v126.n128_u64[1]; i += 32LL)
          {
          }
        }

        if (*(_OWORD *)v38 != 0LL)
        {
          int v40 = a3[1].n128_u8[0];
          *a3 = *(__n128 *)v38;
          if (!v40) {
            a3[1].n128_u8[0] = 1;
          }
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
      uint64_t v41 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(void *)&v138[2] = "";
        __int16 v139 = 2050;
        uint64_t v140 = (uint64_t)(v126.n128_u64[1] - v126.n128_u64[0]) >> 5;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, internalLocalizer results, numInternalResults:%{public}lu}",  buf,  0x1Cu);
      }

      a3 = (__n128 *)v126.n128_u64[1];
      uint64_t v42 = v126.n128_u64[0];
      if (v126.n128_u64[1] == v126.n128_u64[0]) {
        goto LABEL_174;
      }
      do
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818830);
        }
        uint64_t v43 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v44 = operator new(0x28uLL);
          __p = v44;
          __int128 v124 = xmmword_1012C8460;
          _OWORD *v44 = 0u;
          v44[1] = 0u;
          *(void *)((char *)v44 + 29) = 0LL;
          sub_10000AE6C(v42, v44);
          double v45 = v124 >= 0 ? &__p : (void **)__p;
          uint64_t v46 = *(void *)(v42 + 16);
          uint64_t v47 = *(unsigned int *)(v42 + 24);
          *(_DWORD *)buf = 68289795;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(void *)&v138[2] = "";
          __int16 v139 = 2081;
          uint64_t v140 = (uint64_t)v45;
          __int16 v141 = 2049;
          *(void *)v142 = v46;
          *(_WORD *)&v142[8] = 2049;
          *(void *)&v142[10] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, internalLocalizer result, MicrolocationId:%{priva te, location:escape_only}s, Probability:%{private}.6f, ConfidenceLevel:%{private}lu}",  buf,  0x30u);
          if (SHIBYTE(v124) < 0) {
            operator delete(__p);
          }
        }

        if (*(_OWORD *)v42 == 0LL)
        {
          sub_100093B0C((uint64_t)v136, 0, 0, *(double *)(v42 + 16));
        }

        else
        {
          uint64_t v48 = (char *)v7[4].n128_u64[1];
          unint64_t v49 = (char *)v7[5].n128_u64[0];
          __int16 v50 = v48;
          if (v48 != v49)
          {
            while (*(void *)v50 != *(void *)v42 || *((void *)v50 + 1) != *(void *)(v42 + 8))
            {
              v50 += 16;
              if (v50 == v49)
              {
                __int16 v50 = (char *)v7[5].n128_u64[0];
                break;
              }
            }
          }

          if (v50 == v49)
          {
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101818830);
            }
            int v52 = (os_log_s *)qword_1019348D8;
            if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
            {
              double v53 = operator new(0x28uLL);
              __p = v53;
              __int128 v124 = xmmword_1012C8460;
              _OWORD *v53 = 0u;
              v53[1] = 0u;
              *(void *)((char *)v53 + 29) = 0LL;
              sub_10000AE6C(v42, v53);
              if (v124 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v138 = 2082;
              *(void *)&v138[2] = "";
              __int16 v139 = 2082;
              uint64_t v140 = (uint64_t)p_p;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CosineSimilarityLocalization, unexpected identifier, cluster ID:%{public, l ocation:escape_only}s}",  buf,  0x1Cu);
              if (SHIBYTE(v124) < 0) {
                operator delete(__p);
              }
              if (qword_1019348D0 != -1) {
                dispatch_once(&qword_1019348D0, &stru_101818830);
              }
            }

            uint64_t v55 = (os_log_s *)qword_1019348D8;
            if (os_signpost_enabled((os_log_t)qword_1019348D8))
            {
              unint64_t v56 = operator new(0x28uLL);
              __p = v56;
              __int128 v124 = xmmword_1012C8460;
              _OWORD *v56 = 0u;
              v56[1] = 0u;
              *(void *)((char *)v56 + 29) = 0LL;
              sub_10000AE6C(v42, v56);
              BOOL v57 = v124 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v138 = 2082;
              *(void *)&v138[2] = "";
              __int16 v139 = 2082;
              uint64_t v140 = (uint64_t)v57;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v55,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CosineSimilarityLocalization, unexpected identifier",  "{msg%{public}.0s:CosineSimilarityLocalization, unexpected identifier, cluster ID:%{public, l ocation:escape_only}s}",  buf,  0x1Cu);
              if (SHIBYTE(v124) < 0) {
                operator delete(__p);
              }
            }
          }

          else
          {
            sub_100093B0C((uint64_t)v136, 0, ((unint64_t)(v50 - v48) >> 4) + 1, *(double *)(v42 + 16));
          }
        }

        v42 += 32LL;
      }

      while ((__n128 *)v42 != a3);
      sub_100093D84(v136, 1u, (uint64_t)&__p);
      BYTE1(v124) = 1;
      sub_100094148((uint64_t)&v7[7].n128_i64[1], (uint64_t)&__p, (uint64_t)&v118);
      if (!v122)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818830);
        }
        v89 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(void *)&v138[2] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CosineSimilarityLocalization, multByVec failed!}",  buf,  0x12u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818830);
          }
        }

        v90 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(void *)&v138[2] = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v90,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CosineSimilarityLocalization, multByVec failed!",  "{msg%{public}.0s:CosineSimilarityLocalization, multByVec failed!}",  buf,  0x12u);
        }

        goto LABEL_168;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
      unsigned int v58 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        int v59 = v120;
        if (v119) {
          int v60 = v121;
        }
        else {
          int v60 = v120;
        }
        if (!v119) {
          int v59 = v121;
        }
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(void *)&v138[2] = "";
        __int16 v139 = 2050;
        uint64_t v140 = v60;
        __int16 v141 = 2050;
        *(void *)v142 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:cosine similarity results shape, Rows:%{public}lu, Cols:%{public}lu}",  buf,  0x26u);
      }

      if (v119) {
        uint64_t v61 = &v121;
      }
      else {
        uint64_t v61 = &v120;
      }
      uint64_t v62 = *v61;
      if (v62 == (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2)
      {
        if ((int)v62 >= 1)
        {
          uint64_t v63 = 0LL;
          do
          {
            if (*((_DWORD *)v117 + 40) >= *(_DWORD *)(v7[9].n128_u64[1] + 4 * v63)) {
              int v64 = *(_DWORD *)(v7[9].n128_u64[1] + 4 * v63);
            }
            else {
              int v64 = *((_DWORD *)v117 + 40);
            }
            sub_100093EA4((uint64_t)&v118, v63, 0, buf);
            uint64_t v65 = (uint64_t *)(v7[6].n128_u64[0] + 16 * v63);
            uint64_t v67 = *v65;
            uint64_t v66 = v65[1];
            unint64_t v68 = *(void *)(a4 + 8);
            unint64_t v69 = *(void *)(a4 + 16);
            if (v68 >= v69)
            {
              uint64_t v72 = (uint64_t)(v68 - *(void *)a4) >> 5;
              unint64_t v73 = v72 + 1;
              uint64_t v74 = v69 - *(void *)a4;
              if (v74 >> 4 > v73) {
                unint64_t v73 = v74 >> 4;
              }
              else {
                unint64_t v75 = v73;
              }
              uint64_t v76 = (char *)sub_10000835C(a4 + 16, v75);
              uint64_t v78 = &v76[32 * v72];
              uint64_t v79 = *(void *)buf;
              *(void *)uint64_t v78 = v67;
              *((void *)v78 + 1) = v66;
              *((void *)v78 + 2) = v79;
              *((_DWORD *)v78 + 6) = v64;
              v81 = *(char **)a4;
              v80 = *(char **)(a4 + 8);
              uint64_t v82 = v78;
              if (v80 != *(char **)a4)
              {
                do
                {
                  __int128 v83 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)(v82 - 20) = *(_OWORD *)(v80 - 20);
                  *((_OWORD *)v82 - 2) = v83;
                  v82 -= 32;
                  v80 -= 32;
                }

                while (v80 != v81);
                v80 = *(char **)a4;
              }

              v71 = v78 + 32;
              *(void *)a4 = v82;
              *(void *)(a4 + 8) = v78 + 32;
              *(void *)(a4 + 16) = &v76[32 * v77];
              if (v80) {
                operator delete(v80);
              }
            }

            else
            {
              uint64_t v70 = *(void *)buf;
              *(void *)unint64_t v68 = v67;
              *(void *)(v68 + 8) = v66;
              *(void *)(v68 + 16) = v70;
              *(_DWORD *)(v68 + 24) = v64;
              v71 = (char *)(v68 + 32);
            }

            *(void *)(a4 + 8) = v71;
            ++v63;
            if (v119) {
              v84 = &v121;
            }
            else {
              v84 = &v120;
            }
          }

          while (v63 < *v84);
        }

          unint64_t v13 = 0LL;
          goto LABEL_31;
        }

        unint64_t v13 = 1LL;
LABEL_31:
        if (v7 == v6) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v13;
        }
        v7 += 72LL;
        if ((v16 & 1) == 0) {
          goto LABEL_67;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      unint64_t v14 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A0F >= 0) {
          unint64_t v15 = &xmmword_1019939F8;
        }
        else {
          unint64_t v15 = (__int128 *)xmmword_1019939F8;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819A50);
        }
        if (byte_101993A0F >= 0) {
          BOOL v21 = &xmmword_1019939F8;
        }
        else {
          BOOL v21 = (__int128 *)xmmword_1019939F8;
        }
        unint64_t v30 = 136380675;
        uint64_t v31 = v21;
        LODWORD(v27) = 12;
        int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v30,  v27);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationBluetoothIdentityTable::insertOrReplace(const std::vector<CLMicroLocationBluetoothIdentity Table::Entry> &)",  "%s\n",  v22);
      }

      sqlite3_reset(v8);
      goto LABEL_30;
    }

    unint64_t v13 = 1LL;
LABEL_67:
    double v24 = v29;
    uint64_t v29 = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A50);
    }
    unint64_t v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationBluetoothIdentityTable::insertOrReplace(const std::vector<CLMicroLocationBluetoothIdentityTable::Entry> &)",  "%s\n",  v26);
    }

    return 0LL;
  }

  return v13;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(14LL, *(void *)(v5 + 96), a2);
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 15LL,  *(void *)(v5 + 104),  a2);
  }
  return result;
}

  *(_DWORD *)(a1 + 128) |= 0x10u;
  unint64_t v13 = *(void **)(a1 + 32);
  if (!v13)
  {
    unint64_t v13 = operator new(0x20uLL);
    v13[2] = 4LL;
    *unint64_t v13 = off_10181B080;
    v13[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v13 + 6) = 0;
    *(void *)(a1 + 32) = v13;
  }

  unint64_t v14 = *(void *)(a2 + 32);
  if (!v14) {
    unint64_t v14 = *(void *)(qword_1019A0980 + 32);
  }
  sub_100073388((uint64_t)v13, v14);
  uint64_t v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_16:
  if ((v6 & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_40:
  *(_DWORD *)(a1 + 128) |= 0x40u;
  CFStringRef v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    CFStringRef v17 = operator new(0x18uLL);
    *CFStringRef v17 = off_10181B1E8;
    v17[1] = 7LL;
    *((_DWORD *)v17 + 4) = 0;
    *(void *)(a1 + 48) = v17;
  }

  int v18 = *(void *)(a2 + 48);
  if (!v18) {
    int v18 = *(void *)(qword_1019A0980 + 48);
  }
  sub_100074680((uint64_t)v17, v18);
  uint64_t v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 128) |= 0x80u;
    int v19 = *(_DWORD **)(a1 + 56);
    if (!v19)
    {
      int v19 = operator new(0x78uLL);
      v19[16] = 9;
      *(void *)int v19 = off_10181B260;
      *((void *)v19 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_WORD *)v19 + 34) = 0;
      *((void *)v19 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 14) = 0LL;
      *(void *)(a1 + 56) = v19;
    }

    float v20 = *(void *)(a2 + 56);
    if (!v20) {
      float v20 = *(void *)(qword_1019A0980 + 56);
    }
    sub_100074A40((uint64_t)v19, v20);
    uint64_t v6 = *(_DWORD *)(a2 + 128);
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFFCuLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  double result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 168);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  unint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A0AF0 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v13,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 132) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_32:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 132) |= 0x20u;
    *(double *)(a1 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_33;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 132) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_32:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 132) |= 0x20u;
    *(double *)(a1 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_33;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 96),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 96),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 72),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 72),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  unint64_t v13 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 96) |= 0x10u;
  *(void *)(a1 + 40) = v13;
  unint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x20) != 0) {
    goto LABEL_31;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_32:
  unint64_t v15 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 96) |= 0x40u;
  *(void *)(a1 + 56) = v15;
  unint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v6 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 96) |= 0x80u;
    *(void *)(a1 + 64) = v6;
    unint64_t v5 = *(_DWORD *)(a2 + 96);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 90),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 96) & 0x2000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(unsigned __int8 *)(v5 + 91),  (BOOL)a2,  a4);
  }
  return result;
}

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 124) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_32:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 124) |= 0x20u;
    *(double *)(a1 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 124);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_33;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 88),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

    unint64_t v15 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 80) |= 4u;
    *(_DWORD *)(a1 + 24) = v15;
    uint64_t v7 = *(_DWORD *)(a2 + 80);
    if ((v7 & 8) == 0)
    {
LABEL_12:
      if ((v7 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 48),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

    LODWORD(result) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 68) |= 8u;
    *(_DWORD *)(a1 + 28) = LODWORD(result);
    uint64_t v6 = *(_DWORD *)(a2 + 68);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_32;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  a2,  *(float *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF70uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_estimatedHRResponseParam),  @"estimatedHRResponseParam");
  has = (__int16)self->_has;
  if ((has & 2) != 0) {
    goto LABEL_31;
  }
LABEL_15:
  if ((has & 0x80) != 0) {
LABEL_16:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_sessionVo2Max),  @"sessionVo2Max");
  return v3;
}

  PBDataWriterWriteDoubleField(a3, 14LL, self->_estimatedHRRecoveryParam);
  if ((*(_WORD *)&self->_has & 0x80) != 0) {
    goto LABEL_31;
  }
}

  *((void *)a3 + 2) = *(void *)&self->_estimatedHRRecoveryParam;
  *((_WORD *)a3 + 52) |= 2u;
  if ((*(_WORD *)&self->_has & 0x80) != 0) {
    goto LABEL_31;
  }
}

  *((void *)result + 3) = *(void *)&self->_estimatedHRResponseParam;
  *((_WORD *)result + 52) |= 4u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_15:
    if ((has & 0x80) == 0) {
      return result;
    }
    goto LABEL_16;
  }

  self->_estimatedHRRecoveryParam = *((double *)a3 + 2);
  *(_WORD *)&self->_has |= 2u;
  if ((*((_WORD *)a3 + 52) & 0x80) != 0) {
    goto LABEL_31;
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10182F8A0);
  }
  unint64_t v25 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_FAULT))
  {
    double v26 = *(void *)(v11 + 48);
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "MultiSportSim,Unsported WorkoutType: %ld! nothing will be simulated",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182F8A0);
    }
    uint64_t v37 = *(void *)(v11 + 48);
    int v40 = 134217984;
    uint64_t v41 = v37;
    unint64_t v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  17LL,  "MultiSportSim,Unsported WorkoutType: %ld! nothing will be simulated",  &v40);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutSeriesModelSimulator::buildTestSequence(const SimulationInfo &)",  "%s\n",  v38);
    if (v38 != buf) {
      free(v38);
    }
  }

  uint64_t v27 = *(void ***)(a1 + 512);
  uint64_t v28 = *(void *)(a1 + 520);
  *(void *)(a1 + 544) = 0LL;
  uint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v27 = (void **)(*(void *)(a1 + 512) + 8LL);
      *(void *)(a1 + 512) = v27;
      uint64_t v29 = *(void *)(a1 + 520) - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    unint64_t v30 = 85LL;
LABEL_41:
    *(void *)(a1 + 536) = v30;
  }

  else if (v29 >> 3 == 2)
  {
    unint64_t v30 = 170LL;
    goto LABEL_41;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

          *uint64_t v7 = v19;
          *int v18 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }

        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = (uint64_t **)i;
          double v8 = v13;
        }
      }
    }
  }

  else
  {
    signed __int32 v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0LL;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  sqlite3_close(ppDb);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF68uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFD0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1400uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      double v4 = *a2;
    }
  }

  sub_10074FD4C(v111, 1);
  v95 = v111[0];
  v92 = sub_1004AE46C(a1, &v108, &__p, &v102, &v99, &v96, (uint64_t **)&qword_1019A10A0, a3, 0, (uint64_t)&v95);
  if (v96)
  {
    v97 = (char *)v96;
    operator delete(v96);
  }

  if (v99)
  {
    v100 = (char *)v99;
    operator delete(v99);
  }

  v99 = &v102;
  sub_1003EE02C((void ***)&v99);
  if (__p)
  {
    v106 = (char *)__p;
    operator delete(__p);
  }

  if (v108)
  {
    uint64_t v109 = v108;
    operator delete(v108);
  }

  return v92;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  unint64_t v30 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  return v19;
}

  PBDataWriterWriteUint32Field(a3, self->_nInterpolatedCatherine, 8LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  *((_DWORD *)a3 + 16) = self->_nInterpolatedCatherine;
  *((_DWORD *)a3 + 26) |= 0x1000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  *((_DWORD *)result + 14) = self->_nGoodCatherine;
  *((_DWORD *)result + 26) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_8:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  self->_nInterpolatedCatherine = *((_DWORD *)a3 + 16);
  *(_DWORD *)&self->_has |= 0x1000u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x4000) == 0)
  {
LABEL_9:
    if ((v3 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 68),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 97),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[13],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v12 & 0x80000000) != 0)
  {
    unint64_t v13 = 11;
  }

  else if (v12 >= 0x80)
  {
    unint64_t v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    unint64_t v13 = 2;
  }

  double v4 = (v13 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_36:
    unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    else {
      unint64_t v15 = 2;
    }
    double v4 = (v15 + v4);
  }

  unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    uint64_t v16 = 2;
  }

  double v4 = (v16 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }

  float v20 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_DWORD *)(a1 + 20) = v20;
  unint64_t v13 = *(_DWORD *)(a2 + 76);
  if ((v13 & 0x20) != 0) {
    goto LABEL_31;
  }
LABEL_17:
  if ((v13 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_36:
  unint64_t v23 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) |= 0x40u;
  *(_DWORD *)(a1 + 56) = v23;
  unint64_t v13 = *(_DWORD *)(a2 + 76);
  if ((v13 & 0x80) != 0)
  {
LABEL_19:
    unint64_t v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 76) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v14;
    unint64_t v13 = *(_DWORD *)(a2 + 76);
  }

        unint64_t v13 = *(void *)(a1 + 48);
        if (!v13) {
          unint64_t v13 = *(void *)(qword_1019A1398 + 48);
        }
        unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006231A4(v13, a2);
        unint64_t v15 = (int)v14;
        else {
          uint64_t v16 = 1;
        }
        v4 += v15 + v16 + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 76);
        if ((v3 & 0x40) == 0)
        {
LABEL_19:
          if ((v3 & 0x80) == 0) {
            goto LABEL_20;
          }
          goto LABEL_40;
        }

  unint64_t v14 = *(_DWORD *)(a1 + 32);
  if (v14 < 1)
  {
    uint64_t v16 = 0;
  }

  else
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = 0;
    do
    {
      if (v17 >= 0x80)
      {
        int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
        unint64_t v14 = *(_DWORD *)(a1 + 32);
      }

      else
      {
        int v18 = 1;
      }

      v16 += v18;
      ++v15;
    }

    while (v15 < v14);
  }

  int v19 = *(_DWORD *)(a1 + 48);
  if (v19 < 1)
  {
    BOOL v21 = 0;
  }

  else
  {
    float v20 = 0LL;
    BOOL v21 = 0;
    do
    {
      if (v22 >= 0x80)
      {
        unint64_t v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
        int v19 = *(_DWORD *)(a1 + 48);
      }

      else
      {
        unint64_t v23 = 1;
      }

      v21 += v23;
      ++v20;
    }

    while (v20 < v19);
  }

  double result = (v16 + v4 + v19 + v14 + v21);
  *(_DWORD *)(a1 + 60) = result;
  return result;
}

  unint64_t v14 = *(_DWORD *)(a1 + 32);
  if (v14 < 1)
  {
    uint64_t v16 = 0;
  }

  else
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = 0;
    do
    {
      if (v17 >= 0x80)
      {
        int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
        unint64_t v14 = *(_DWORD *)(a1 + 32);
      }

      else
      {
        int v18 = 1;
      }

      v16 += v18;
      ++v15;
    }

    while (v15 < v14);
  }

  double result = (v16 + v4 + v14);
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

  unint64_t v14 = *(_DWORD *)(a1 + 24);
  if (v14 < 1)
  {
    uint64_t v16 = 0;
  }

  else
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = 0;
    do
    {
      if ((v17 & 0x80000000) != 0)
      {
        int v18 = 10;
      }

      else if (v17 >= 0x80)
      {
        int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
        unint64_t v14 = *(_DWORD *)(a1 + 24);
      }

      else
      {
        int v18 = 1;
      }

      v16 += v18;
      ++v15;
    }

    while (v15 < v14);
  }

  int v19 = *(_DWORD *)(a1 + 48);
  float v20 = (v16 + v19 + v4 + v14);
  if (v19 >= 1)
  {
    BOOL v21 = 0LL;
    do
    {
      int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100638014( *(void *)(*(void *)(a1 + 40) + 8 * v21),  a2);
      unint64_t v23 = (int)v22;
      else {
        double v24 = 1;
      }
      float v20 = (v23 + v20 + v24);
      ++v21;
    }

    while (v21 < *(int *)(a1 + 48));
  }

  *(_DWORD *)(a1 + 68) = v20;
  return v20;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v13 >= 0x80)
  {
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    unint64_t v14 = 2;
  }

  v4 += v14;
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  uint64_t v16 = a2[12];
  a1[16] |= 0x400u;
  a1[12] = v16;
  unint64_t v5 = a2[16];
  if ((v5 & 0x800) != 0) {
    goto LABEL_31;
  }
LABEL_18:
  if ((v5 & 0x1000) == 0) {
    return;
  }
LABEL_32:
  int v18 = a2[14];
  if (v18 >= 7) {
    sub_101241A84();
  }
  a1[16] |= 0x1000u;
  a1[14] = v18;
}

  unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if ((v15 & 0x80000000) != 0)
  {
    uint64_t v16 = 11;
  }

  else if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    uint64_t v16 = 2;
  }

  v4 += v16;
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }

  unint64_t v32 = sub_1006E27E8();
  sub_100413284(v32, buf);
  double v33 = (uint64_t *)(a1 + 344);
  double v34 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_PeakHRExertionThreshold", (void *)(a1 + 344));
  int v35 = v34;
  int v36 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_34;
  }
  uint64_t v37 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v35) {
      goto LABEL_40;
    }
  }

  else
  {
LABEL_34:
    if (!v34) {
      goto LABEL_40;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  uint64_t v39 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    int v40 = *v33;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Estimator,fPeakHRExertionThreshold overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    v84 = *v33;
    v100 = 134349056;
    int v101 = v84;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fPeakHRExertionThreshold overridden (%{public}f)",  &v100,  v99);
    v86 = (char *)v85;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v85);
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

          uint64_t v10 = (void *)((char *)v10 + 1);
        }

        while (v8 != v10);
        double result = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
        double v8 = result;
      }

      while (result);
    }
  }

  return result;
}

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      CFStringRef v17 = *(_DWORD *)(a2 + 68);
      if (v17 >= 5) {
        sub_10124384C();
      }
      *(_DWORD *)(a1 + 80) |= 0x100u;
      *(_DWORD *)(a1 + 68) = v17;
      unint64_t v5 = *(_DWORD *)(a2 + 80);
    }

    if ((v5 & 0x200) != 0)
    {
      int v18 = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 80) |= 0x200u;
      *(_BYTE *)(a1 + 72) = v18;
      unint64_t v5 = *(_DWORD *)(a2 + 80);
    }

    if ((v5 & 0x400) != 0)
    {
      int v19 = *(_BYTE *)(a2 + 73);
      *(_DWORD *)(a1 + 80) |= 0x400u;
      *(_BYTE *)(a1 + 73) = v19;
    }
  }

  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_10184C978);
    }
    signed __int32 v11 = (os_log_s *)qword_101934538;
    if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "ignoring metric for phone pick-up",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_10184C978);
      }
      LOWORD(__p[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934538,  2LL,  "ignoring metric for phone pick-up",  __p,  v30);
      unint64_t v23 = (char *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)",  "%s\n",  v22);
    }

    goto LABEL_35;
  }

  return sub_1002A5590(v31);
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}
}

  CFStringRef v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0) {
    return;
  }
LABEL_18:
  uint64_t v7 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v7;
}

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    unint64_t v14 = 2;
  }

  double v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }

  CFStringRef v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0) {
    return;
  }
LABEL_18:
  uint64_t v7 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v7;
}

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    unint64_t v14 = 2;
  }

  double v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }

  uint64_t v12 = *(void *)(v5 + 64);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A17B8 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  if ((*(_DWORD *)(v5 + 88) & 0x200) != 0)
  {
LABEL_33:
    unint64_t v13 = *(void *)(v5 + 72);
    if (!v13) {
      unint64_t v13 = *(void *)(qword_1019A17B8 + 72);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v13,  a2,  a4);
  }

  return result;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  unint64_t v14 = *a5;
LABEL_31:
  double result = (_DWORD)v10 != 0;
  *(_DWORD *)a7 = v14;
  return result;
}

    uint64_t v27 = *(double *)(v15 + v20);
    uint64_t v28 = *(double *)(*v8 + 8LL * (*((_BYTE *)v8 + 8) == 0));
    if (v27 == v28) {
      break;
    }
    if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      unint64_t v32 = vabdd_f64(v27, v28);
      double v33 = fabs(v27);
      double v34 = fabs(v28);
      if (v33 < v34) {
        double v33 = v34;
      }
      int v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
      if (v32 <= v35) {
        break;
      }
    }

    if (v27 < v28) {
      goto LABEL_67;
    }
LABEL_39:
    unint64_t v30 = *v8;
    *((_BYTE *)v21 + 8) = *((_BYTE *)v8 + 8);
    *BOOL v21 = v30;
    if (v5 < v7) {
      goto LABEL_68;
    }
  }

  if (!v13 || *((_BYTE *)v8 + 8)) {
    goto LABEL_39;
  }
LABEL_67:
  double v8 = v21;
LABEL_68:
  *double v8 = v15;
  *((_BYTE *)v8 + 8) = v13;
  return result;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  std::stringbuf::str(&v41, &v34);
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v29 = &v41;
  }
  else {
    uint64_t v29 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
  }
  sub_1010DDBC0(a2, (char *)v29);
  *(void *)((char *)v32
  double v33 = v30;
  std::streambuf::~streambuf(&v34);
  return std::ios::~ios(&v35);
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

        int v19 = 1;
LABEL_31:
        p_vtable = sub_10092097C((uint64_t)v63);
        if (p_vtable)
        {
          container_query_set_class(v6, 10LL);
          goto LABEL_33;
        }

        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101860E58);
        }
        uint64_t v16 = (NSURL *)&OBJC_METACLASS___CLPrivacyManager.vtable;
        unint64_t v49 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          p_vtable = v58;
          sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
          if (v59 >= 0) {
            __int16 v50 = v58;
          }
          else {
            __int16 v50 = (void **)v58[0];
          }
          *(void *)buf = 68289795LL;
          uint64_t v78 = 2082;
          uint64_t v79 = "";
          v80 = 2082;
          v81 = (NSURL *)v50;
          uint64_t v82 = 2082;
          __int128 v83 = "assert";
          v84 = 2081;
          v85 = "subPath";
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unable to get identifiable name from client key, name:%{public, locati on:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101860E58);
          }
        }

        double v51 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          p_vtable = v58;
          sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
          if (v59 >= 0) {
            int v52 = v58;
          }
          else {
            int v52 = (void **)v58[0];
          }
          *(void *)buf = 68289795LL;
          uint64_t v78 = 2082;
          uint64_t v79 = "";
          v80 = 2082;
          v81 = (NSURL *)v52;
          uint64_t v82 = 2082;
          __int128 v83 = "assert";
          v84 = 2081;
          v85 = "subPath";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v51,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor unable to get identifiable name from client key",  "{msg%{public}.0s:#monitor unable to get identifiable name from client key, name:%{public, locati on:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101860E58);
          }
        }

        uint64_t v6 = qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
        {
          sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
          sub_101253C28();
        }

        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDa emonConditionLedger.mm",  224,  "-[CLDaemonConditionLedger containerURLForClientWithClientKey:]");
LABEL_148:
        __break(1u);
LABEL_149:
        dispatch_once(&qword_101934980, &stru_101860E58);
LABEL_44:
        uint64_t v28 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          *(void *)buf = 68289282LL;
          uint64_t v78 = 2082;
          uint64_t v79 = "";
          v80 = 2114;
          v81 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor directory doesn't exist, contrainerURL:%{public, location:escape_only}@}",  buf,  0x1Cu);
        }

        uint64_t v29 = qword_101934988;
        if (!os_signpost_enabled((os_log_t)qword_101934988)) {
          goto LABEL_58;
        }
        *(void *)buf = 68289282LL;
        uint64_t v78 = 2082;
        uint64_t v79 = "";
        v80 = 2114;
        v81 = v16;
        unint64_t v30 = "#monitor directory doesn't exist";
        uint64_t v31 = "{msg%{public}.0s:#monitor directory doesn't exist, contrainerURL:%{public, location:escape_only}@}";
        unint64_t v32 = (os_log_s *)v29;
        double v33 = 28;
        goto LABEL_105;
      }
    }

    else if (v62)
    {
      uint64_t v7 = __p;
      goto LABEL_22;
    }

    CFStringRef v17 = 0LL;
    goto LABEL_30;
  }

  uint64_t v12 = +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  @"/var/db/locationd/CLDaemonMonitor/");
  unint64_t v13 = sub_100920664((uint64_t)v12);
  v60.receiver = self;
  v60.super_class = (Class)&OBJC_CLASS___CLDaemonConditionLedger;
  p_vtable = (void **)"directoryExists:";
  if (-[CLConditionLedger directoryExists:](&v60, "directoryExists:", v13))
  {
    unint64_t v15 = sub_10092097C((uint64_t)v63);
    if (v15)
    {
      -[NSMutableString appendString:]( v12,  "appendString:",  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@/", v15));
      uint64_t v16 = sub_100920664((uint64_t)v12);
      uint64_t v6 = 0LL;
      goto LABEL_42;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
    uint64_t v16 = (NSURL *)&OBJC_METACLASS___CLPrivacyManager.vtable;
    double v53 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      p_vtable = v58;
      sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
      if (v59 >= 0) {
        __int16 v54 = v58;
      }
      else {
        __int16 v54 = (void **)v58[0];
      }
      *(void *)buf = 68289795LL;
      uint64_t v78 = 2082;
      uint64_t v79 = "";
      v80 = 2082;
      v81 = (NSURL *)v54;
      uint64_t v82 = 2082;
      __int128 v83 = "assert";
      v84 = 2081;
      v85 = "subPath";
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unable to get identifiable name from client key, name:%{public, location:e scape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860E58);
      }
    }

    uint64_t v55 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      p_vtable = v58;
      sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
      if (v59 >= 0) {
        unint64_t v56 = v58;
      }
      else {
        unint64_t v56 = (void **)v58[0];
      }
      *(void *)buf = 68289795LL;
      uint64_t v78 = 2082;
      uint64_t v79 = "";
      v80 = 2082;
      v81 = (NSURL *)v56;
      uint64_t v82 = 2082;
      __int128 v83 = "assert";
      v84 = 2081;
      v85 = "subPath";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v55,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor unable to get identifiable name from client key",  "{msg%{public}.0s:#monitor unable to get identifiable name from client key, name:%{public, location:e scape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860E58);
      }
    }

    uint64_t v6 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
      sub_101253C28();
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon ConditionLedger.mm",  200,  "-[CLDaemonConditionLedger containerURLForClientWithClientKey:]");
    goto LABEL_148;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860E58);
  }
  uint64_t v39 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
    if (v59 >= 0) {
      int v40 = v58;
    }
    else {
      int v40 = (void **)v58[0];
    }
    *(void *)buf = 68289282LL;
    uint64_t v78 = 2082;
    uint64_t v79 = "";
    v80 = 2082;
    v81 = (NSURL *)v40;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unable to create directory to store daemon ledger in locationd path, name:%{ public, location:escape_only}s}",  buf,  0x1Cu);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
  }

  uint64_t v41 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    sub_100FE3FB4((uint64_t)v63, (uint64_t)v58);
    uint64_t v42 = v59 >= 0 ? v58 : (void **)v58[0];
    *(void *)buf = 68289282LL;
    uint64_t v78 = 2082;
    uint64_t v79 = "";
    v80 = 2082;
    v81 = (NSURL *)v42;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor unable to create directory to store daemon ledger in locationd path",  "{msg%{public}.0s:#monitor unable to create directory to store daemon ledger in locationd path, name:%{ public, location:escape_only}s}",  buf,  0x1Cu);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
  }

  uint64_t v16 = 0LL;
LABEL_59:
  if (v62 < 0) {
    operator delete(__p[0]);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  return v16;
}

  return v12;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF68uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v14 >= 0x80)
  {
    unint64_t v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    unint64_t v15 = 2;
  }

  double v4 = (v15 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }

  *(_DWORD *)(a1 + 96) |= 0x10u;
  unint64_t v13 = *(void **)(a1 + 32);
  if (!v13)
  {
    unint64_t v13 = operator new(0x18uLL);
    *unint64_t v13 = off_101868C90;
    v13[2] = 0LL;
    *((_DWORD *)v13 + 2) = 0;
    *((_BYTE *)v13 + 12) = 0;
    *(void *)(a1 + 32) = v13;
  }

  unint64_t v14 = *(_BYTE **)(a2 + 32);
  if (!v14) {
    unint64_t v14 = *(_BYTE **)(qword_1019A1A48 + 32);
  }
  sub_100A437B0((uint64_t)v13, v14);
  unint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_12:
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_40:
  *(_DWORD *)(a1 + 96) |= 0x40u;
  CFStringRef v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    CFStringRef v17 = operator new(0x18uLL);
    *CFStringRef v17 = off_101868D80;
    v17[1] = 0LL;
    *((_DWORD *)v17 + 4) = 0;
    *(void *)(a1 + 48) = v17;
  }

  int v18 = *(_BYTE **)(a2 + 48);
  if (!v18) {
    int v18 = *(_BYTE **)(qword_1019A1A48 + 48);
  }
  sub_100A44368((uint64_t)v17, v18);
  unint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 96) |= 0x80u;
    int v19 = *(void **)(a1 + 56);
    if (!v19)
    {
      int v19 = operator new(0x18uLL);
      *int v19 = off_101868DF8;
      v19[1] = 0LL;
      *((_DWORD *)v19 + 4) = 0;
      *(void *)(a1 + 56) = v19;
    }

    float v20 = *(_BYTE **)(a2 + 56);
    if (!v20) {
      float v20 = *(_BYTE **)(qword_1019A1A48 + 56);
    }
    sub_100A448D8((uint64_t)v19, v20);
    unint64_t v5 = *(_DWORD *)(a2 + 96);
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

    CFStringRef v17 = 0LL;
    goto LABEL_37;
  }

  CFStringRef v17 = v15;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  int v18 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    int v19 = -[NSData length](v17, "length");
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: Serialization complete, message size: %d bytes.",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v29 = qword_101934518;
    unint64_t v30 = -[NSData length](v17, "length");
    int v35 = 67109120;
    LODWORD(v36) = v30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  2LL,  "CLWorkoutDistanceCoreAnalyzer: Serialization complete, message size: %d bytes.",  &v35);
    unint64_t v32 = (uint8_t *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()",  "%s\n",  v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  sub_1001B4C40(v4);
LABEL_37:
  std::mutex::unlock((std::mutex *)a1);
  return v17;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  *(_DWORD *)(a1 + 184) |= 0x10u;
  unint64_t v13 = *(void **)(a1 + 32);
  if (!v13)
  {
    unint64_t v13 = operator new(0x20uLL);
    *unint64_t v13 = &off_101871348;
    v13[1] = 0LL;
    v13[2] = 0LL;
    v13[3] = 0LL;
    *(void *)(a1 + 32) = v13;
  }

  unint64_t v14 = *(void *)(a2 + 32);
  if (!v14) {
    unint64_t v14 = *(void *)(qword_1019A1CE8 + 32);
  }
  sub_100B22C10((uint64_t)v13, v14);
  unint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_17:
  if ((v5 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_40:
  *(_DWORD *)(a1 + 184) |= 0x40u;
  CFStringRef v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    CFStringRef v17 = operator new(0x20uLL);
    *CFStringRef v17 = &off_101871528;
    v17[1] = 0LL;
    v17[2] = 0LL;
    v17[3] = 0LL;
    *(void *)(a1 + 48) = v17;
  }

  int v18 = *(void *)(a2 + 48);
  if (!v18) {
    int v18 = *(void *)(qword_1019A1CE8 + 48);
  }
  sub_100B24948((uint64_t)v17, v18);
  unint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 184) |= 0x80u;
    int v19 = *(void **)(a1 + 56);
    if (!v19)
    {
      int v19 = operator new(0x20uLL);
      *int v19 = &off_101871618;
      v19[1] = 0LL;
      v19[2] = 0LL;
      v19[3] = 0LL;
      *(void *)(a1 + 56) = v19;
    }

    float v20 = *(void *)(a2 + 56);
    if (!v20) {
      float v20 = *(void *)(qword_1019A1CE8 + 56);
    }
    sub_100B25ACC((uint64_t)v19, v20);
    unint64_t v5 = *(_DWORD *)(a2 + 184);
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrMean),  @"hrMean");
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  PBDataWriterWriteDoubleField(a3, 8LL, self->_hrConfidenceMean);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  *((void *)a3 + 7) = *(void *)&self->_hrConfidenceMean;
  *((_DWORD *)a3 + 41) |= 0x40u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  *((void *)result + 10) = *(void *)&self->_hrMean;
  *((_DWORD *)result + 41) |= 0x200u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  self->_hrConfidenceMean = *((double *)a3 + 7);
  *(_DWORD *)&self->_has |= 0x40u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x10) == 0)
  {
LABEL_10:
    if ((v3 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      sub_1000C1C84(a1 + 3208, *a4);
      sub_10012B8A0(a1 + 584, *a4);
      break;
    default:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      double v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *a3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Received unhandled daemon status notification %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
        uint64_t v10 = *a3;
        LODWORD(Current_1) = 67109120;
        HIDWORD(Current_1) = v10;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Received unhandled daemon status notification %d",  &Current_1);
        uint64_t v12 = (char *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationNotifier::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }

      break;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  unint64_t v13 = *(void *)(a1 + 32);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A1D38 + 32);
  }
  unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC0398(v13, a2);
  unint64_t v15 = (int)v14;
  else {
    uint64_t v16 = 1;
  }
  v4 += v15 + v16 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

          -[NSMutableDictionary removeObjectForKey:](v4, "removeObjectForKey:", v8);
          goto LABEL_31;
        }

        sub_100FE36E4(buf);
        if (SBYTE3(v45) >= 0) {
          uint64_t v10 = buf;
        }
        else {
          uint64_t v10 = *(uint8_t **)buf;
        }
        signed __int32 v11 = objc_msgSend( v8,  "containsString:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
        uint64_t v12 = v11;
        if (SBYTE3(v45) < 0)
        {
          operator delete(*(void **)buf);
          if (v12) {
            goto LABEL_18;
          }
        }

        else if (v11)
        {
          goto LABEL_18;
        }

        uint64_t v16 = (CLClientKeyPath *)-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v8);
        objc_opt_class(&OBJC_CLASS___NSDictionary);
        if ((objc_opt_isKindOfClass(v16, v17) & 1) == 0)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          float v20 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            BOOL v21 = (CLClientKeyPath *)-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v8);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            uint64_t v42 = 2082;
            uint64_t v43 = "";
            __int128 v44 = 2114;
            double v45 = v8;
            uint64_t v46 = 2114;
            uint64_t v47 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthDatabaseMigration Top-level clients.plist value is not NSDictionary. Removing entry., key:%{public, location:escape_only}@, value:%{public, location:escape_only}@}",  buf,  0x26u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
          }

          int v22 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            unint64_t v23 = (CLClientKeyPath *)-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v8);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            uint64_t v42 = 2082;
            uint64_t v43 = "";
            __int128 v44 = 2114;
            double v45 = v8;
            uint64_t v46 = 2114;
            uint64_t v47 = v23;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthDatabaseMigration Top-level clients.plist value is not NSDictionary. Removing entry.",  "{msg%{public}.0s:#AuthDatabaseMigration Top-level clients.plist value is not NSDictionary. Removing entry., key:%{public, location:escape_only}@, value:%{public, location:escape_only}@}",  buf,  0x26u);
          }

          goto LABEL_30;
        }

        int v18 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.locationd.bundle-");
        int v19 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.locationd.executable-");
        if (([v8 isEqualToString:v18] & 1) != 0
          || [v8 isEqualToString:v19])
        {
          goto LABEL_30;
        }

        if ([v8 hasPrefix:v18])
        {
          double v24 = objc_msgSend(v8, "substringFromIndex:", -[NSString length](v18, "length"));
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          unint64_t v25 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            uint64_t v42 = 2082;
            uint64_t v43 = "";
            __int128 v44 = 2114;
            double v45 = v8;
            uint64_t v46 = 2114;
            uint64_t v47 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#AuthDatabaseMigration migration found bundle path key. Removing prefix, oldKey :%{public, location:escape_only}@, anchorDictionary:%{public, location:escape_only}@}",  buf,  0x26u);
          }

          double v26 = 112LL;
        }

        else if ([v8 hasPrefix:v19])
        {
          double v24 = objc_msgSend(v8, "substringFromIndex:", -[NSString length](v19, "length"));
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          uint64_t v27 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            uint64_t v42 = 2082;
            uint64_t v43 = "";
            __int128 v44 = 2114;
            double v45 = v8;
            uint64_t v46 = 2114;
            uint64_t v47 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#AuthDatabaseMigration migration found executable key. Removing prefix, oldKey :%{public, location:escape_only}@, anchorDictionary:%{public, location:escape_only}@}",  buf,  0x26u);
          }

          double v26 = 101LL;
        }

        else
        {
          if (objc_msgSend( v8,  "isEqualToString:",  -[CLClientKeyPath objectForKeyedSubscript:]( v16,  "objectForKeyedSubscript:",  @"BundlePath")))
          {
            double v26 = 112LL;
          }

          else if (objc_msgSend( v8,  "isEqualToString:",  -[CLClientKeyPath objectForKeyedSubscript:]( v16,  "objectForKeyedSubscript:",  @"Executable")))
          {
            double v26 = 101LL;
          }

          else
          {
            if ((objc_msgSend( v8,  "isEqualToString:",  -[CLClientKeyPath objectForKeyedSubscript:]( v16,  "objectForKeyedSubscript:",  @"BundleId")) & 1) == 0)
            {
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101879AA8);
              }
              uint64_t v28 = (os_log_s *)qword_101934988;
              if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                uint64_t v42 = 2082;
                uint64_t v43 = "";
                __int128 v44 = 2114;
                double v45 = v8;
                uint64_t v46 = 2114;
                uint64_t v47 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#AuthDatabaseMigration migration anchor type not defined in the anchor's dictio nary; defaulting to bundleId, anchor:%{public, location:escape_only}@, value:%{public, locat"
                  "ion:escape_only}@}",
                  buf,
                  0x26u);
              }
            }

            double v26 = 105LL;
          }

          double v24 = v8;
        }

        -[CLClientKeyPath removeObjectForKey:](v16, "removeObjectForKey:", @"SubIdentities");
        uint64_t v29 = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v24,  v26);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v16,  -[CLClientKeyPath clientKey](v29, "clientKey"));
        -[NSMutableDictionary removeObjectForKey:](v4, "removeObjectForKey:", v8);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101879AA8);
        }
        unint64_t v30 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          uint64_t v42 = 2082;
          uint64_t v43 = "";
          __int128 v44 = 2114;
          double v45 = v8;
          uint64_t v46 = 2114;
          uint64_t v47 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthDatabaseMigration migration from legacy clients.plist representation - successfu lly migrated client representation, oldKey:%{public, location:escape_only}@, newKey:%{public, loca tion:escape_only}@}",  buf,  0x26u);
        }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  sub_100C87634((uint64_t)a1);
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  -[CalTrackFinder _closeCurrentTrack](self, "_closeCurrentTrack");
}

        if (-[CLStreamedLocationPrivate hasTropicalSavannaProximity](v7, "hasTropicalSavannaProximity"))
        {
          signed __int32 v11 = *((_DWORD *)a3 + 67);
          if (v11 >= 1 && v11 != dword_10199DA4C)
          {
            -[CLStreamedLocationPrivate setTropicalSavannaBranchCount:](v7, "setTropicalSavannaBranchCount:");
            if (qword_101934990 != -1) {
              dispatch_once(&qword_101934990, &stru_10187D9D8);
            }
            uint64_t v12 = (os_log_s *)qword_101934998;
            if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v13 = -[CLStreamedLocationPrivate tropicalSavannaBranchCount](v7, "tropicalSavannaBranchCount");
              *(_DWORD *)buf = 67174657;
              LODWORD(v33) = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Trackrun,Sending tropicalSavannaBranchCount,%{private}u",  buf,  8u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934990 != -1) {
                dispatch_once(&qword_101934990, &stru_10187D9D8);
              }
              BOOL v21 = qword_101934998;
              int v22 = -[CLStreamedLocationPrivate tropicalSavannaBranchCount](v7, "tropicalSavannaBranchCount");
              unint64_t v30 = 67174657;
              LODWORD(v31) = v22;
              LODWORD(v29) = 8;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  0LL,  "Trackrun,Sending tropicalSavannaBranchCount,%{private}u",  &v30,  v29);
              double v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLStreamedLocationPrivate(ConversionSupport) initWithDaemonLocationPrivate:]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }
          }
        }

        if (-[CLStreamedLocationPrivate hasTropicalSavannaProximity](v7, "hasTropicalSavannaProximity"))
        {
          unint64_t v14 = *((void *)a3 + 32);
          if (v14)
          {
            if (v14 != qword_10199DA40)
            {
              -[CLStreamedLocationPrivate setTropicalSavannaTreeId:](v7, "setTropicalSavannaTreeId:");
              if (qword_101934990 != -1) {
                dispatch_once(&qword_101934990, &stru_10187D9D8);
              }
              unint64_t v15 = (os_log_s *)qword_101934998;
              if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v16 = -[CLStreamedLocationPrivate tropicalSavannaTreeId](v7, "tropicalSavannaTreeId");
                *(_DWORD *)buf = 134283521;
                double v33 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Trackrun,Sending tropicalSavannaTreeId,%{private}llu",  buf,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934990 != -1) {
                  dispatch_once(&qword_101934990, &stru_10187D9D8);
                }
                unint64_t v25 = qword_101934998;
                double v26 = -[CLStreamedLocationPrivate tropicalSavannaTreeId](v7, "tropicalSavannaTreeId");
                unint64_t v30 = 134283521;
                uint64_t v31 = v26;
                LODWORD(v29) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "Trackrun,Sending tropicalSavannaTreeId,%{private}llu",  &v30,  v29);
                uint64_t v28 = (uint8_t *)v27;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLStreamedLocationPrivate(ConversionSupport) initWithDaemonLocationPrivate:]",  "%s\n",  v27);
                if (v28 != buf) {
                  free(v28);
                }
              }
            }
          }
        }

        return v7;
      }

      uint64_t v9 = 5LL;
    }

    -[CLStreamedLocationPrivate setTropicalSavannaProximity:](v7, "setTropicalSavannaProximity:", v9);
    goto LABEL_25;
  }

  return v7;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  LOBYTE(v7) = (*((_BYTE *)a3 + 44) & 8) == 0;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    if ((*((_BYTE *)a3 + 44) & 8) == 0 || self->_algorithmVersion != *((_DWORD *)a3 + 8)) {
      goto LABEL_34;
    }
    LOBYTE(v7) = 1;
  }

  return v7;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFFCuLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v7 = *(void *)(v5 + 56) == 0LL;
      return !v7;
    }

    if (v4 == 67)
    {
LABEL_19:
      unint64_t v5 = *(void *)(a1 + 64);
      if (!v5) {
        return 0LL;
      }
      goto LABEL_30;
    }

    if (v4 != 143) {
      return result;
    }
LABEL_16:
    uint64_t v6 = *(void *)(a1 + 72);
    if (!v6 || !*(void *)(v6 + 56)) {
      return 0LL;
    }
    uint64_t v7 = *(_BYTE *)(a1 + 28) == 0;
    return !v7;
  }

  if (v4 <= 6)
  {
    if (v4 == 2)
    {
      if ((sub_1004F97F4() & 0x80) != 0)
      {
        unint64_t v5 = *(void *)(a1 + 56);
        if (!v5) {
          return 0LL;
        }
      }

      else
      {
        unint64_t v5 = *(void *)(a1 + 40);
        if (!v5) {
          return 0LL;
        }
      }

      goto LABEL_30;
    }

    if (v4 != 3) {
      return result;
    }
    goto LABEL_19;
  }

  if (v4 == 7)
  {
    double v8 = *(void *)(a1 + 72);
    if (v8 && *(void *)(v8 + 56)) {
      return *(_BYTE *)(a1 + 28) == 0;
    }
    return 0LL;
  }

  if (v4 == 15) {
    goto LABEL_16;
  }
  return result;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFD0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

    sub_10005BEB8(v11, v13, (uint64_t)buf);
    sub_100E52408((uint64_t)buf, 0LL);
    return (uint64_t *)sub_100E4B444(a1 + 1496, 6LL);
  }

  return result;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFD8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFD0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

    uint64_t v46 = 0LL;
    if (!v24) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v46 = 1LL;
  if (v24) {
LABEL_31:
  }
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
LABEL_32:
  sub_1001BA1BC(v59);
  *(void *)((char *)v60
  uint64_t v61 = v48;
  std::streambuf::~streambuf(&v62);
  std::ios::~ios(&v63);
  return v46;
}

      *(void *)buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0LL;
      *(_DWORD *)&buf[24] = 0;
      uint64_t v28 = 0;
      sub_100F04C78((uint64_t *)buf, (uint64_t)v8, (uint64_t)&v22);
      uint64_t v28 = 1;
      unint64_t v25 = 1;
      (*(void (**)(uint64_t, int *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v25,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      sub_100527B44((uint64_t *)buf);
    }

    else
    {
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188C1A8);
      }
      CFStringRef v17 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
      {
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v18 = a2;
        }
        else {
          int v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Unable to remove all fences from the database for bundle,%{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_10188C1A8);
        }
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v19 = a2;
        }
        else {
          int v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        unint64_t v25 = 136446210;
        double v26 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  17LL,  "Unable to remove all fences from the database for bundle,%{public}s",  &v25,  12);
        BOOL v21 = (char *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBeaconFenceAuthorizationManager::unlockedRemoveAllFencesForBundle(const std::string &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }
  }

  else
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    unint64_t v15 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_INFO))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:iB: Unable to get fences from database, bundle:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }
  }

  sub_100527B44(&v22);
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  double result = (5 * (a1[12] + a1[8]) + v3);
  a1[15] = result;
  return result;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int16 v54 = sub_1000071BC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&uint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFD8uLL);
  sub_1000ECB90(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000ECCA4((uint64_t)&v54, v27);
  }

  uint64_t v29 = (char *)*a1;
  unint64_t v30 = v54;
  uint64_t v31 = v55;
  *(void *)&__int16 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  unint64_t v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  uint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&uint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  unint64_t v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 56) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "metMinutePercentile90", *(float *)(a1 + 32));
  unint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 0xBu);
  double v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  double result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 104) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "instantaneousCadence", *(double *)(a1 + 40));
  unint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 120), 7u);
  double v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "averageSpeed", *(float *)(a1 + 48));
  unint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 6u);
  double v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "horizontalRotationRateMax", *(float *)(a1 + 52));
  unint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  double v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 24) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "currentImpulseMagnitude", *(float *)(a1 + 80));
  unint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 7u);
  double v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 128), 0xCu);
  if ((*(_WORD *)(v3 + 172) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  }
  return result;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 108), 3u);
  double v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }

  signed __int32 v11 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 64) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "negPeakTotalAngleDegrees", *(float *)(a1 + 52));
  unint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 9u);
  double v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0xCu);
  if ((*(_WORD *)(v3 + 120) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0xDu);
  }
  return result;
}

  unint64_t v15 = *(_DWORD *)(a2 + 116);
  v6 |= 0x800u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 116) = v15;
  unint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 4u);
  double v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  float v20 = *(_DWORD *)(a2 + 176);
  v8 |= 0x80u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 176) = v20;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  uint64_t v10 = *(_BYTE *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 56) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "isDescalationDecided", *(_BYTE *)(a1 + 59));
  unint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 63), 0x12Du);
  double v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  uint64_t v12 = *(_BYTE *)(a2 + 90);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 90) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "movingGpsCountResetRequired", *(_BYTE *)(a1 + 89));
  unint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0x6Au);
  double v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 88);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 88) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "partOfHgPath", *(_BYTE *)(a1 + 108));
  unint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 96), 0xAu);
  double v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 144);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 144) = v16;
  unint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "magnitudePeriodicityLowerPercentile", *(float *)(a1 + 120));
  signed __int32 v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x400) == 0)
  {
LABEL_13:
    if ((v11 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 88), 4u);
  double v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  unint64_t v15 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 56) = v15;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "numTriggersInEpoch", *(_DWORD *)(a1 + 76));
  unint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x131u);
  double v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  float v20 = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 192) |= 0x20u;
  *(void *)(a1 + 120) = v20;
  signed __int32 v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x800) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "locationTimestamp", *(double *)(a1 + 104));
  unint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  int v22 = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 116) |= 8u;
  *(_DWORD *)(a1 + 84) = v22;
  if ((*(_WORD *)(a2 + 116) & 0x80) != 0)
  {
LABEL_15:
    uint64_t v10 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 116) |= 0x80u;
    *(_DWORD *)(a1 + 100) = v10;
  }

  PB::TextFormatter::format(this, "sensorTimeUponReceival", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 116) & 0x100) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 104));
LABEL_17:
  unint64_t v13 = *(void *)(a1 + 72);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32LL))(v13, this, "super");
  }
  if ((*(_WORD *)(a1 + 116) & 0x200) != 0) {
    PB::TextFormatter::format(this, "timeSyncStatus", *(_DWORD *)(a1 + 108));
  }
  return PB::TextFormatter::endObject(this);
}

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 44));
  unint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  double v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  unint64_t v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 52));
  unint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  double v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning", *(_DWORD *)(a1 + 44));
  unint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 9u);
  double v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel", *(_DWORD *)(a1 + 56));
  unint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  double v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  double v26 = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 168) |= 4u;
  *(_DWORD *)(a1 + 136) = v26;
  int v19 = *(_WORD *)(a2 + 168);
  if ((v19 & 8) == 0)
  {
LABEL_19:
    if ((v19 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }

  unint64_t v14 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 40) = v14;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "predictionError", *(float *)(a1 + 68));
  unint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCu);
  double v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  unint64_t v13 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 68) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  unint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0xBu);
  double v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "centerOfMassAccelMax", *(double *)(a1 + 24));
  unint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 192), 4u);
  double v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "intermediateBoutsStepLengthCv", *(double *)(a1 + 56));
  unint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  double v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  double v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 3u);
  double v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 56) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 48));
  unint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  double v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  unint64_t v13 = *(_BYTE *)(a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 82) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "invertSensors", *(_BYTE *)(a1 + 81));
  unint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 77), 0xBu);
  double v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 16) = v16;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_32:
    int v18 = *(_DWORD *)(a2 + 40);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_DWORD *)(result + 40) = v18;
    return result;
  }

  PB::TextFormatter::format(this, "thetaRollFaceDeg", *(float *)(a1 + 48));
  unint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) != 0) {
    goto LABEL_31;
  }
LABEL_15:
  if ((v5 & 1) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 20), 0xEu);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0xFu);
  }
  return result;
}

  uint64_t v9 = *(void *)(a2 + 112);
  if (v9)
  {
    uint64_t v10 = operator new(0x30uLL);
    signed __int32 v11 = sub_1011555C0((uint64_t)v10, v9);
    uint64_t v12 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  unint64_t v13 = *(_DWORD *)(a2 + 180);
  if ((v13 & 0x8000) != 0)
  {
    unint64_t v14 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 180) |= 0x8000u;
    *(_DWORD *)(a1 + 132) = v14;
    unint64_t v13 = *(_DWORD *)(a2 + 180);
  }

  if ((v13 & 0x4000) != 0)
  {
    unint64_t v15 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 180) |= 0x4000u;
    *(_DWORD *)(a1 + 128) = v15;
  }

  return a1;
}

  LODWORD(result) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 100) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  unint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 6u);
  double v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  unint64_t v15 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 88) = v15;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "steps", *(_DWORD *)(a1 + 108));
  unint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 0xDu);
  double v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_32:
    double result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 80) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  unint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) != 0) {
    goto LABEL_31;
  }
LABEL_15:
  if ((v5 & 0x4000) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "useForwardPrediction", *(_BYTE *)(a1 + 76));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0xEu);
  if ((*(_WORD *)(v3 + 80) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xFu);
  }
  return result;
}

  double result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 68) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  unint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  double v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  uint64_t v9 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 88) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "eta", *(double *)(a1 + 24));
  unint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 7u);
  double v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  double result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 96) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 72));
  unint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 112), 0xCu);
  double v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  double v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
}

  qword_1019A07B8 = (uint64_t)v2;
}

LABEL_168:
        if (v122)
        {
          v91 = v118;
          v118 = 0LL;
          if (v91) {
            operator delete[](v91);
          }
        }

        if (v125)
        {
          v92 = __p;
          __p = 0LL;
          if (v92) {
            operator delete[](v92);
          }
        }

  sub_100352B38(v88);
  if (HIBYTE(v92))
  {
    if ((_BYTE)v92) {
      pthread_mutex_unlock(v91);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v90 + 24LL))(v90);
    }
  }

  uint64_t v43 = *(void *)(v5 + 288);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_1019A11B8 + 288);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EC,  v43,  a2,  a4);
  uint64_t v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x10) == 0)
  {
LABEL_135:
    if ((v39 & 0x20) == 0) {
      goto LABEL_136;
    }
    goto LABEL_174;
  }

  v100 = *(void *)v263;
  int v101 = *(void *)&v263[8];
  v102 = v226;
  v103 = v224;
  if (v224 < 0)
  {
    do
    {
      v102 = (__n128 **)*v102;
      _CF = __CFADD__(v103++, 1LL);
    }

    while (!_CF);
  }

  else if (v224)
  {
    v104 = v224 + 1LL;
    do
    {
      v102 = (__n128 **)v102[1];
      --v104;
    }

    while (v104 > 1);
  }

  uint64_t v39 = a3;
  uint64_t v105 = sub_100D2DBDC( (double *)(v5 + 168),  *(double *)v263,  *(double *)&v263[8],  *((double *)v102 + 6),  *((double *)v102 + 7),  0.0);
  memset(v250, 0, 24);
  *(_OWORD *)&v250[24] = xmmword_1012E0070;
  v250[40] = 0;
  *(_OWORD *)&v250[48] = 0u;
  *(_OWORD *)v251 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }

  v255 = _Q1;
  *(void *)&v256[0] = 0xBFF0000000000000LL;
  v257 = 0LL;
  v258 = 0LL;
  LODWORD(v259) = 0;
  WORD2(v259) = 1;
  DWORD2(v259) = 0;
  v261 = 0LL;
  v260 = 0uLL;
  *(void *)&v251[16] = v100;
  *(void *)&v251[24] = v101;
  *(void *)&v252 = *(void *)(a2 + 448);
  *((double *)&v252 + 1) = v32;
  if (v105 < 8.0) {
    uint64_t v105 = 8.0;
  }
  *(double *)v253 = v105;
  *((double *)v253 + 1) = v33;
  *(void *)&v253[1] = 0x3FF0000000000000LL;
  v108 = *(void *)(a2 + 560);
  *((void *)&v253[1] + 1) = *(void *)(a2 + 472);
  *(void *)&v254 = v108;
  BYTE8(v254) = *(_BYTE *)(a2 + 604);
  *(int8x16_t *)((char *)v256 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
  *((void *)&v256[1] + 1) = *(void *)(a2 + 384);
  sub_100D725E4((uint64_t)v250, 0);
  sub_1000F2F30(&v257, (uint64_t *)v262);
  v259 = *(_OWORD *)&v262[16];
  v260 = *(_OWORD *)v263;
  v261 = *(void *)&v263[16];
  sub_100D726F0((uint64_t *)&v231, (uint64_t)v250);
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  uint64_t v109 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    v110 = 0xF83E0F83E0F83E1LL * ((uint64_t)(*(void *)(v5 + 1912) - *(void *)(v5 + 1904)) >> 3);
    *(_DWORD *)buf = 134350593;
    *(void *)&buf[4] = v10;
    v269 = 2049;
    *(void *)v270 = *(void *)&v251[16];
    *(_WORD *)&v270[8] = 2049;
    *(void *)&v270[10] = *(void *)&v251[24];
    *(_WORD *)&v270[18] = 2050;
    *(void *)&v270[20] = *((void *)&v252 + 1);
    v271 = 2050;
    v272 = *(double *)v253;
    v273 = 2050;
    v274 = *((double *)v253 + 1);
    v275 = 2050;
    v276 = *(double *)&v110;
    _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc, %{public}.3lf,cunc,%{public}.3lf,count,%{public}lu",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    v211 = 0xF83E0F83E0F83E1LL * ((uint64_t)(*(void *)(v221 + 1912) - *(void *)(v221 + 1904)) >> 3);
    v236 = 134350593;
    v237 = v10;
    v238 = 2049;
    v239 = *(void *)&v251[16];
    v240 = 2049;
    v241 = *(void *)&v251[24];
    v242 = 2050;
    v243 = *((void *)&v252 + 1);
    v244 = 2050;
    v245 = *(void *)&v253[0];
    v246 = 2050;
    v247 = *((void *)&v253[0] + 1);
    v248 = 2050;
    v249 = v211;
    LODWORD(v216) = 72;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc, %{public}.3lf,cunc,%{public}.3lf,count,%{public}lu",  &v236,  v216);
    v213 = (char *)v212;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)",  "%s\n",  v212);
    if (v213 != buf) {
      free(v213);
    }
    unint64_t v5 = v221;
  }

  sub_10000AE14((uint64_t)&v257);
LABEL_183:
  sub_100890314((uint64_t *)&v225);
  sub_100BDC958((uint64_t)v262);
  a3 = v39;
LABEL_184:
  int v111 = (uint64_t)v231;
  v220 = v232;
  if (v232 != v231) {
    goto LABEL_249;
  }
  uint64_t v112 = *(void *)(v5 + 1880);
  v223 = *(void *)(v5 + 1888);
  if (v112 == v223)
  {
LABEL_248:
    int v111 = (uint64_t)v231;
    v220 = v232;
    unint64_t v5 = v221;
    goto LABEL_249;
  }

  v113 = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  v217 = _Q0;
  do
  {
    uint64_t v115 = sub_100D2DBDC( (double *)(v221 + 168),  *(double *)(v112 + 32),  *(double *)(v112 + 40),  *(double *)(a2 + 408),  *(double *)(a2 + 416),  0.0);
    memset(v250, 0, 24);
    *(_OWORD *)&v250[24] = xmmword_1012E0070;
    v250[40] = 0;
    *(_OWORD *)&v250[48] = 0u;
    *(_OWORD *)v251 = 0u;
    v255 = v217;
    *(void *)&v256[0] = 0xBFF0000000000000LL;
    LODWORD(v259) = 0;
    v257 = 0LL;
    v258 = 0LL;
    WORD2(v259) = 1;
    DWORD2(v259) = 0;
    v261 = 0LL;
    v260 = 0uLL;
    *(_OWORD *)&v251[16] = *(_OWORD *)(v112 + 32);
    *(void *)&v252 = *(void *)(a2 + 448);
    if (v115 < 8.0) {
      uint64_t v115 = 8.0;
    }
    *((double *)&v252 + 1) = *(float *)(v112 + 24);
    *(double *)v253 = v115;
    *(_OWORD *)((char *)v253 + 8) = xmmword_1012E6890;
    v116 = *(void *)(a2 + 560);
    *((void *)&v253[1] + 1) = *(void *)(a2 + 472);
    *(void *)&v254 = v116;
    BYTE8(v254) = *(_BYTE *)(a2 + 604);
    *(int8x16_t *)((char *)v256 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
    *((void *)&v256[1] + 1) = *(void *)(a2 + 384);
    sub_100D725E4((uint64_t)v250, 0);
    *(double *)&v253[1] = 1.0 / *((double *)v253 + 1);
    sub_1000F2F30(&v257, (uint64_t *)v112);
    v117 = *(void *)(v112 + 48);
    v118 = *(_OWORD *)(v112 + 32);
    v259 = *(_OWORD *)(v112 + 16);
    v260 = v118;
    v261 = v117;
    if (*(double *)(a2 + 568) <= 0.0 || (char v119 = *(double *)(a2 + 480), v119 < 0.0))
    {
      if (!*(_BYTE *)(a3 + 746)) {
        goto LABEL_209;
      }
      char v119 = *(double *)(a3 + 408);
      if (v119 < 0.0) {
        goto LABEL_209;
      }
    }

    int v120 = fmod(v119 - *((double *)&v252 + 1), 360.0);
    if (v120 < 0.0) {
      int v120 = v120 + 360.0;
    }
    int v121 = v120 + -360.0;
    if (v120 <= 180.0) {
      int v121 = v120;
    }
    char v122 = fabs(v121);
    if (v122 < 135.0
      && (v122 > 60.0 ? (v123 = *(_DWORD *)(v221 + 2072) <= 0) : (v123 = 1),
          v123
       && (v122 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7LL
                                   * ((uint64_t)(*(void *)(v221 + 1888) - *(void *)(v221 + 1880)) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v121 == 0.0) {
        char v125 = *(double *)&v253[1];
      }
      else {
        char v125 = 1.0 / v122;
      }
      *(double *)&v253[1] = v125;
      sub_100D725E4((uint64_t)v250, 0);
      v133 = v232;
      if ((unint64_t)v232 >= v233)
      {
        v148 = sub_100D7466C((uint64_t *)&v231, (uint64_t)v250);
      }

      else
      {
        *v232 = *(_OWORD *)v250;
        v134 = *(_OWORD *)&v250[16];
        v135 = *(_OWORD *)&v250[32];
        v136 = *(_OWORD *)v251;
        v133[3] = *(_OWORD *)&v250[48];
        v133[4] = v136;
        v133[1] = v134;
        v133[2] = v135;
        v137 = *(_OWORD *)&v251[16];
        v138 = v252;
        __int16 v139 = v253[1];
        v133[7] = v253[0];
        char v133[8] = v139;
        v133[5] = v137;
        v133[6] = v138;
        uint64_t v140 = v254;
        __int16 v141 = v255;
        v142 = v256[1];
        v133[11] = v256[0];
        v133[12] = v142;
        v133[9] = v140;
        v133[10] = v141;
        *((void *)v133 + 26) = v257;
        v143 = v258;
        *((void *)v133 + 27) = v258;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }

        v146 = v259;
        v147 = v260;
        *((void *)v133 + 32) = v261;
        v133[14] = v146;
        v133[15] = v147;
        v148 = (uint64_t)v133 + 264;
      }

      v232 = (_OWORD *)v148;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v149 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        v150 = 0xF83E0F83E0F83E1LL * ((uint64_t)(*(void *)(v221 + 1912) - *(void *)(v221 + 1904)) >> 3);
        *(_DWORD *)buf = 134350849;
        *(void *)&buf[4] = v10;
        v269 = 2049;
        *(void *)v270 = *(void *)&v251[16];
        *(_WORD *)&v270[8] = 2049;
        *(void *)&v270[10] = *(void *)&v251[24];
        *(_WORD *)&v270[18] = 2050;
        *(void *)&v270[20] = *((void *)&v252 + 1);
        v271 = 2050;
        v272 = *(double *)v253;
        v273 = 2050;
        v274 = *((double *)v253 + 1);
        v275 = 2050;
        v276 = *(double *)&v150;
        v277 = 2050;
        v278 = *(double *)&v253[1];
        _os_log_impl( (void *)&_mh_execute_header,  v149,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{ public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf",  buf,  0x52u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        v151 = 0xF83E0F83E0F83E1LL * ((uint64_t)(*(void *)(v221 + 1912) - *(void *)(v221 + 1904)) >> 3);
        *(_DWORD *)v262 = 134350849;
        *(void *)&v262[4] = v10;
        *(_WORD *)&v262[12] = 2049;
        *(void *)&v262[14] = *(void *)&v251[16];
        *(_WORD *)&v262[22] = 2049;
        *(void *)&v262[24] = *(void *)&v251[24];
        *(_WORD *)v263 = 2050;
        *(void *)&v263[2] = *((void *)&v252 + 1);
        *(_WORD *)&v263[10] = 2050;
        *(void *)&v263[12] = *(void *)&v253[0];
        *(_WORD *)&v263[20] = 2050;
        *(void *)&v263[22] = *((void *)&v253[0] + 1);
        v264 = 2050;
        v265 = v151;
        v266 = 2050;
        v267 = *(void *)&v253[1];
        LODWORD(v216) = 82;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{ public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf",  v262,  v216);
        v153 = (char *)v152;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, co nst MMSnapData &)",  "%s\n",  v152);
LABEL_239:
        if (v153 != buf) {
          free(v153);
        }
      }
    }

    else
    {
LABEL_209:
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      __n128 v126 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        char v127 = *(float *)(v112 + 24);
        v128 = *(void *)(a2 + 480);
        v129 = *(_DWORD *)(v221 + 2072);
        *(_DWORD *)buf = 134349824;
        *(void *)&buf[4] = v10;
        v269 = 2050;
        *(double *)v270 = v127;
        *(_WORD *)&v270[8] = 2050;
        *(void *)&v270[10] = v128;
        *(_WORD *)&v270[18] = 1026;
        *(_DWORD *)&v270[20] = v129;
        _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb c ourse,%{public}.1lf,rejection,%{public}d",  buf,  0x26u);
      }

      ++v113;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        v154 = *(float *)(v112 + 24);
        v155 = *(void *)(a2 + 480);
        v156 = *(_DWORD *)(v221 + 2072);
        *(_DWORD *)v262 = 134349824;
        *(void *)&v262[4] = v10;
        *(_WORD *)&v262[12] = 2050;
        *(double *)&v262[14] = v154;
        *(_WORD *)&v262[22] = 2050;
        *(void *)&v262[24] = v155;
        *(_WORD *)v263 = 1026;
        *(_DWORD *)&v263[2] = v156;
        LODWORD(v216) = 38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb c ourse,%{public}.1lf,rejection,%{public}d",  v262,  v216);
        v153 = (char *)v157;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, co nst MMSnapData &)",  "%s\n",  v157);
        goto LABEL_239;
      }
    }

    v130 = v258;
    if (v258)
    {
      v131 = (unint64_t *)&v258->__shared_owners_;
      do
        char v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }

    v112 += 56LL;
  }

  while (v112 != v223);
  if (v113 <= 0) {
    goto LABEL_248;
  }
  unint64_t v5 = v221;
  int v111 = (uint64_t)v231;
  v220 = v232;
  if (0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(v221 + 1888) - *(void *)(v221 + 1880)) >> 3) == v113
    && v232 == v231)
  {
    unint64_t v23 = 0LL;
    ++*(_DWORD *)(v221 + 2072);
    goto LABEL_301;
  }

              *(void *)(a1 + 24) = v24;
              goto LABEL_209;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v79 = 0;
                v80 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }

                  v81 = v27++;
                  uint64_t v82 = *(_BYTE *)(v28 + v81);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  unint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_172:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_172;
              }

              uint64_t v29 = 0;
              unint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                unint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v29 += 7;
                uint64_t v27 = v2;
                unint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_173:
              *(void *)(a1 + 16) = v31;
              goto LABEL_209;
            case 3u:
              *(_WORD *)(a1 + 80) |= 1u;
              double v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              double v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                __int128 v83 = 0;
                v84 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }

                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  unint64_t v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_177:
                    uint64_t v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_177;
              }

              int v35 = 0;
              int v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v35 += 7;
                double v33 = v2;
                unint64_t v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_178:
              *(void *)(a1 + 8) = v37;
              goto LABEL_209;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                int v87 = 0;
                int v88 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }

                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  unint64_t v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    uint64_t v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_182;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                __int128 v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v41 += 7;
                uint64_t v39 = v2;
                unint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 64) = v43;
              goto LABEL_209;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              double v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                unint64_t v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }

                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  unint64_t v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    uint64_t v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_187;
              }

              uint64_t v47 = 0;
              uint64_t v48 = 0;
              unint64_t v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                __int16 v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v47 += 7;
                double v45 = v2;
                unint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_209;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
LABEL_163:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_70:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_209;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 0x100u;
              double v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }

                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  unint64_t v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    uint64_t v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_192;
              }

              double v53 = 0;
              __int16 v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                unint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v53 += 7;
                double v51 = v2;
                unint64_t v14 = v54++ > 8;
              }

              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_209;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 0x10u;
              BOOL v57 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5LL || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                uint64_t v61 = 0LL;
                if (v2 <= v57) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    uint64_t v61 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }

                  int v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  unint64_t v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v61 = 0LL;
LABEL_197:
                    uint64_t v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v61 = 0LL;
                }
                goto LABEL_197;
              }

              int v59 = 0;
              int v60 = 0;
              uint64_t v61 = 0LL;
              do
              {
                uint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                uint64_t v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v59 += 7;
                BOOL v57 = v2;
                unint64_t v14 = v60++ > 8;
              }

              while (!v14);
              uint64_t v61 = 0LL;
LABEL_198:
              *(void *)(a1 + 40) = v61;
              goto LABEL_209;
            case 0xCu:
              *(_WORD *)(a1 + 80) |= 8u;
              uint64_t v63 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v64 = *(void *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5LL || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                uint64_t v67 = 0LL;
                if (v2 <= v63) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    uint64_t v67 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }

                  uint64_t v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((void *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v103 += 7;
                  unint64_t v14 = v104++ > 8;
                  if (v14)
                  {
                    uint64_t v67 = 0LL;
LABEL_202:
                    uint64_t v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v67 = 0LL;
                }
                goto LABEL_202;
              }

              uint64_t v65 = 0;
              uint64_t v66 = 0;
              uint64_t v67 = 0LL;
              do
              {
                uint64_t v2 = v63 + 1;
                *((void *)this + 1) = v63 + 1;
                unint64_t v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v65 += 7;
                uint64_t v63 = v2;
                unint64_t v14 = v66++ > 8;
              }

              while (!v14);
              uint64_t v67 = 0LL;
LABEL_203:
              *(void *)(a1 + 32) = v67;
              goto LABEL_209;
            case 0xDu:
              *(_WORD *)(a1 + 80) |= 0x80u;
              unint64_t v69 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v70 = *(void *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5LL || v69 + 10 > v2)
              {
                int v107 = 0;
                v108 = 0;
                unint64_t v73 = 0LL;
                if (v2 <= v69) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }

                  uint64_t v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((void *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0) {
                    break;
                  }
                  v107 += 7;
                  unint64_t v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    uint64_t v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_207;
              }

              v71 = 0;
              uint64_t v72 = 0;
              unint64_t v73 = 0LL;
              do
              {
                uint64_t v2 = v69 + 1;
                *((void *)this + 1) = v69 + 1;
                uint64_t v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v71 += 7;
                unint64_t v69 = v2;
                unint64_t v14 = v72++ > 8;
              }

              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *(_DWORD *)(a1 + 56) = v73;
LABEL_209:
              uint64_t v3 = *((void *)this + 2);
              double v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }

        double v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  BOOL v57 = *(_DWORD *)(a2 + 148);
  v5 |= 0x8000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 148) = v57;
  double v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x2000) == 0)
  {
LABEL_63:
    if ((v7 & 0x400) == 0) {
      goto LABEL_64;
    }
    goto LABEL_170;
  }

  PB::TextFormatter::format(this, "numUshaCPEpoch", *(_DWORD *)(a1 + 200));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x20000000000LL) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_170;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x194u);
  unint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_63:
    if ((v6 & 0x400) == 0) {
      goto LABEL_64;
    }
    goto LABEL_170;
  }

LABEL_174:
        sub_10000AD00(a4 + 56, &v126);
        int v88 = 0;
        int v87 = 1;
        goto LABEL_175;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
      v104 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v105 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v106 = v119 ? &v121 : &v120;
        int v107 = *v106;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(void *)&v138[2] = "";
        __int16 v139 = 2050;
        uint64_t v140 = v105;
        __int16 v141 = 1026;
        *(_DWORD *)v142 = v107;
        *(_WORD *)&v142[4] = 2082;
        *(void *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(void *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CosineSimilarityLocalization, confidence vector size not equal to prob matrix row numbe r!, confidence vector size:%{public}lu, number of prob matrix rows:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x36u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818830);
        }
      }

      v108 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        uint64_t v109 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v110 = v119 ? &v121 : &v120;
        int v111 = *v110;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(void *)&v138[2] = "";
        __int16 v139 = 2050;
        uint64_t v140 = v109;
        __int16 v141 = 1026;
        *(_DWORD *)v142 = v111;
        *(_WORD *)&v142[4] = 2082;
        *(void *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(void *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v108,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!",  "{msg%{public}.0s:CosineSimilarityLocalization, confidence vector size not equal to prob matrix row numbe r!, confidence vector size:%{public}lu, number of prob matrix rows:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x36u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818830);
        }
      }

      p_vtable = (void **)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v112 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        if (v119) {
          v113 = &v121;
        }
        else {
          v113 = &v120;
        }
        int v114 = *v113;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(void *)&v138[2] = "";
        __int16 v139 = 2050;
        uint64_t v140 = v112;
        __int16 v141 = 1026;
        *(_DWORD *)v142 = v114;
        *(_WORD *)&v142[4] = 2082;
        *(void *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(void *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_vtable,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CosineSimilarityLocalization, confidence vector size not equal to prob matrix row numbe r!, confidence vector size:%{public}lu, number of prob matrix rows:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x36u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm",  125,  "localize");
LABEL_245:
      __break(1u);
LABEL_246:
      dispatch_once(&qword_1019348D0, &stru_101818830);
LABEL_220:
      LOWORD(__p) = 0;
      LODWORD(v115) = 2;
      v103 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "CosineSimilarityLocalization, did not find null space probability",  &__p,  v115);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLMicroLocationAlgorithms::LocalizerResults CLMicroLocationCosineSimilarityLocalizationAlgorithm::locali ze(const CLMicroLocationModel &, const CLMicroLocationFingerprint &, const std::optional<CLMicroLocationFingerpr intDistanceFunction::Signature> &, const CLMicroLocationLocalizationSettings &, std::optional<boost::uuids::uuid> *) const",  "%s\n",  v103);
      uint64_t v9 = v116;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818830);
    }
    v85 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CosineSimilarityLocalization, error normalizing currentLocalizationVec!}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
    }

    v86 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(void *)&v138[2] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v86,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CosineSimilarityLocalization, error normalizing currentLocalizationVec!",  "{msg%{public}.0s:CosineSimilarityLocalization, error normalizing currentLocalizationVec!}",  buf,  0x12u);
    }

    int v87 = 0;
    int v88 = 1;
LABEL_175:
    if (v132 && v130)
    {
      v131 = v130;
      operator delete(v130);
    }

    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }

    if (v126.n128_u64[0])
    {
      v126.n128_u64[1] = v126.n128_u64[0];
      operator delete((void *)v126.n128_u64[0]);
    }

    sub_1002A5554(v135);
    sub_100008390((uint64_t)v133, v134);
    v93 = v136[0];
    v136[0] = 0LL;
    if (v93) {
      operator delete[](v93);
    }
    if (((v87 | v88) & 1) == 0)
    {
      if (*(_BYTE *)(a4 + 80))
      {
        v94 = *(void **)(a4 + 56);
        if (v94)
        {
          *(void *)(a4 + 64) = v94;
          operator delete(v94);
        }
      }

      v95 = *v116;
      if (*v116)
      {
        *(void *)(a4 + 40) = v95;
        operator delete(v95);
      }

      v96 = *(char **)a4;
      if (*(void *)a4)
      {
        *(void *)(a4 + 8) = v96;
        operator delete(v96);
      }
    }
  }
}

  double v45 = *(void *)(v5 + 304);
  if (!v45) {
    double v45 = *(void *)(qword_1019A11B8 + 304);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF,  v45,  a2,  a4);
  uint64_t v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x40) == 0)
  {
LABEL_137:
    if ((v39 & 0x80) == 0) {
      goto LABEL_138;
    }
    goto LABEL_180;
  }

  if (!HIBYTE(v3)) {
    goto LABEL_234;
  }
  if ((v3 & 0x1000000) != 0)
  {
    v91 = *(void *)(a1 + 192);
    if (!v91) {
      v91 = *(void *)(qword_1019A1D38 + 192);
    }
    v92 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC439C(v91, a2);
    v93 = (int)v92;
    else {
      v94 = 1;
    }
    v4 += v93 + v94 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_177:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_178;
      }
      goto LABEL_196;
    }
  }

  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_177;
  }

  v95 = *(void *)(a1 + 200);
  if (!v95) {
    v95 = *(void *)(qword_1019A1D38 + 200);
  }
  v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC4638(v95, a2);
  v97 = (int)v96;
  else {
    v98 = 1;
  }
  v4 += v97 + v98 + 2;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_178:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_179;
    }
    goto LABEL_202;
  }

  double result = *(float *)(a2 + 288);
  v5 |= 0x4000000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 288) = result;
  double v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x8000000000000000LL) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_176;
  }

  PB::TextFormatter::format(this, "quiescenceMaxPulseHarmonicMeanThreshold", *(float *)(a1 + 224));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x800000000000LL) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_176;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 288), 0x1F5u);
  unint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000000000000000LL) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_176;
  }

          *(_DWORD *)(a1 + 76) = v69;
          goto LABEL_198;
        case 0xCu:
          *(_DWORD *)(a1 + 124) |= 8u;
          uint64_t v72 = *((void *)this + 1);
          unint64_t v73 = *((void *)this + 2);
          uint64_t v74 = *(void *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5LL && v72 + 10 <= v73)
          {
            unint64_t v75 = 0;
            uint64_t v76 = 0;
            uint64_t v77 = 0LL;
            do
            {
              uint64_t v78 = v72 + 1;
              *((void *)this + 1) = v72 + 1;
              uint64_t v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_177;
              }
              v75 += 7;
              uint64_t v72 = v78;
              float v20 = v76++ > 8;
            }

            while (!v20);
LABEL_147:
            LODWORD(v77) = 0;
            goto LABEL_177;
          }

          v102 = 0;
          v103 = 0;
          uint64_t v77 = 0LL;
          if (v73 <= v72) {
            unint64_t v73 = *((void *)this + 1);
          }
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v104 = v72 + 1;
              uint64_t v105 = *(_BYTE *)(v74 + v72);
              *((void *)this + 1) = v104;
              v77 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                uint64_t v72 = v104;
                float v20 = v103++ > 8;
                if (v20) {
                  goto LABEL_147;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v77) = 0;
              }
            }

            break;
          }

  v89 = *(unsigned __int8 *)(v20 + 42);
  *(_BYTE *)(a1 + 210) = v89;
  if (!v89) {
    goto LABEL_202;
  }
  v90 = v1;
  if (v4 != v2) {
    goto LABEL_176;
  }
LABEL_201:
  *(void *)(a1 + 216) = *(void *)(v90 + 48);
LABEL_202:
  if (v4 == v2)
  {
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(v1 + 64);
    goto LABEL_242;
  }

void sub_10000AC0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, char a24, void *a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, void *__p, uint64_t a49, uint64_t a50,char a51)
{
  double v53 = __p;
  __p = 0LL;
  if (v53) {
    operator delete[](v53);
  }
  sub_10000AD5C(v51);
  _Unwind_Resume(a1);
}

uint64_t sub_10000AD00(uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    sub_100007664(a1, a2);
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

uint64_t sub_10000AD5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }

  double v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t sub_10000ADB4(uint64_t a1)
{
  return a1;
}

void sub_10000ADE8(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10000AE14(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

_BYTE *sub_10000AE6C(uint64_t a1, _BYTE *a2)
{
  for (unint64_t i = 0LL; i != 16; ++i)
  {
    uint64_t v3 = a2;
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1LL << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }

  return a2;
}

char *sub_10000AEE4(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_100007008();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)sub_10000956C(v9, v17);
    }
    else {
      int v18 = 0LL;
    }
    uint64_t v28 = &v18[4 * v15];
    __p = v18;
    double v34 = v28;
    int v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    unint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4LL;
    }

    while (v29);
    int v35 = v30;
    unsigned int v5 = sub_10000B0F0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }

  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    BOOL v21 = &__src[4 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[4 * a5];
    unint64_t v25 = &v23[-4 * a5];
    double v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      double v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)double v26 = v27;
        v26 += 4;
      }

      while ((unint64_t)v25 < v12);
    }

    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }

  BOOL v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_10000B0B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10000B0F0(void **a1, uint64_t a2, char *__src)
{
  unsigned int v5 = *(char **)(a2 + 8);
  char v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    double v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_10000B1B4(uint64_t a1, unsigned __int8 *a2, unsigned int a3, void *a4)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v8 = a1 + 24;
  sub_10000C194((void *)(a1 + 24));
  v108[1] = 0LL;
  int v9 = &xmmword_1019A0A08;
  int v107 = v108;
  v108[0] = 0LL;
  uint64_t v10 = byte_1019A0A1F;
  if (byte_1019A0A1F >= 0) {
    uint64_t v11 = byte_1019A0A1F;
  }
  else {
    uint64_t v11 = *((void *)&xmmword_1019A0A08 + 1);
  }
  int v12 = (char)a2[23];
  if (v12 >= 0) {
    uint64_t v13 = a2[23];
  }
  else {
    uint64_t v13 = *((void *)a2 + 1);
  }
  if (v11 != v13) {
    goto LABEL_17;
  }
  if (v12 >= 0) {
    unint64_t v14 = a2;
  }
  else {
    unint64_t v14 = *(unsigned __int8 **)a2;
  }
  if (byte_1019A0A1F < 0)
  {
LABEL_29:
    if (a3 == 3) {
      goto LABEL_104;
    }
    if (a3 != 4)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818850);
      }
      uint64_t v72 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v113 = 2050;
        uint64_t v114 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!, Generation Algorithm:%{public}lu}",  buf,  0x1Cu);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818850);
        }
      }

      unint64_t v73 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v113 = 2050;
        uint64_t v114 = a3;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v73,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!",  "{msg%{public}.0s:Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!, Generation Algorithm:%{public}lu}",  buf,  0x1Cu);
      }

      goto LABEL_151;
    }

    *(_DWORD *)(a1 + 40) = 2;
    sub_1002F0B04(buf);
    CFStringRef v19 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsBinaryModelRoiReductionPercentile",  0x8000100u,  kCFAllocatorNull);
    int v20 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v19, &v110);
    CFRelease(v19);
    uint64_t v21 = v110;
    int64_t v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unint64_t v23 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    LODWORD(v110) = 2;
    *(void *)buf = &v110;
    unint64_t v25 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    double v26 = 0.15;
    if (v20) {
      double v26 = *(double *)&v21;
    }
    *((double *)v25 + 5) = v26;
    sub_1002F0B04(buf);
    CFStringRef v27 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsBinaryModelNotRoiReductionPercentile",  0x8000100u,  kCFAllocatorNull);
    int v28 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v27, &v110);
    CFRelease(v27);
    uint64_t v29 = v110;
    unint64_t v30 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v31 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    LODWORD(v110) = 3;
    *(void *)buf = &v110;
    double v33 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    double v34 = 0.06;
    if (v28) {
      double v34 = *(double *)&v29;
    }
    *((double *)v33 + 5) = v34;
    sub_10000C674(a4, "", buf);
    if (SBYTE3(v114) < 0)
    {
      if (*(void *)&buf[8] != 14LL)
      {
        operator delete(*(void **)buf);
LABEL_141:
        sub_10000C194(buf);
        sub_1002A576C(v8, (uint64_t)buf);
        sub_1002A5554(buf);
        sub_1002F0B04(buf);
        CFStringRef v88 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsBinaryModelDetectionThreshold",  0x8000100u,  kCFAllocatorNull);
        int v89 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v88, &v110);
        CFRelease(v88);
        uint64_t v90 = v110;
        v91 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          v92 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }

        LODWORD(v110) = 4;
        *(void *)buf = &v110;
        v94 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        BOOL v95 = v89 == 0;
        double v96 = 0.5;
LABEL_147:
        if (!v95) {
          double v96 = *(double *)&v90;
        }
        *((double *)v94 + 5) = v96;
        int v71 = sub_10000C59C();
        goto LABEL_150;
      }

      BOOL v85 = **(void **)buf != 0x6F2D726F6F646E69LL || *(void *)(*(void *)buf + 6LL) != 0x726F6F6474756F2DLL;
      operator delete(*(void **)buf);
      if (v85) {
        goto LABEL_141;
      }
    }

    else
    {
      if (SBYTE3(v114) != 14) {
        goto LABEL_141;
      }
      if (*(void *)buf != 0x6F2D726F6F646E69LL || *(void *)&buf[6] != 0x726F6F6474756F2DLL) {
        goto LABEL_141;
      }
    }

    sub_1002F0B04(&v110);
    sub_1002A5370(v109);
    CFStringRef v86 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceKernelFunction_IndoorOutdoor",  0x8000100u,  kCFAllocatorNull);
    BOOL v87 = sub_1002A8FFC(v110, (uint64_t)v86, v109);
    CFRelease(v86);
    if (v87)
    {
      sub_1002A5768(buf, (uint64_t)v109);
      sub_1002A55A8(v106, (uint64_t)buf);
      v106[0] = &off_1018201E0;
      sub_1002A5590(buf);
    }

    else
    {
      sub_1010DDBC0(buf, "{type : 2, sigma : 0.375, power : 3.0}");
      sub_10012F48C(v106, buf);
      if (SBYTE3(v114) < 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_1002A5590(v109);
    v98 = v111;
    if (v111)
    {
      p_shared_owners = (unint64_t *)&v111->__shared_owners_;
      do
        unint64_t v100 = __ldaxr(p_shared_owners);
      while (__stlxr(v100 - 1, p_shared_owners));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }

    sub_1002A576C(v8, (uint64_t)v106);
    sub_1002A5554(v106);
    sub_1002F0B04(buf);
    CFStringRef v101 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsBinaryModelDetectionThreshold_IndoorOutdoor",  0x8000100u,  kCFAllocatorNull);
    int v102 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v101, &v110);
    CFRelease(v101);
    uint64_t v90 = v110;
    v103 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      v104 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }

    LODWORD(v110) = 4;
    *(void *)buf = &v110;
    v94 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    BOOL v95 = v102 == 0;
    double v96 = 0.35;
    goto LABEL_147;
  }

  if (!byte_1019A0A1F) {
    goto LABEL_29;
  }
  while (*(unsigned __int8 *)v9 == *v14)
  {
    int v9 = (__int128 *)((char *)v9 + 1);
    ++v14;
    if (!--v10) {
      goto LABEL_29;
    }
  }

LABEL_17:
  uint64_t v15 = &xmmword_1019A09F0;
  uint64_t v16 = byte_1019A0A07;
  if (byte_1019A0A07 >= 0) {
    uint64_t v17 = byte_1019A0A07;
  }
  else {
    uint64_t v17 = *((void *)&xmmword_1019A09F0 + 1);
  }
  if (v17 != v13) {
    goto LABEL_54;
  }
  if (v12 >= 0) {
    int v18 = a2;
  }
  else {
    int v18 = *(unsigned __int8 **)a2;
  }
  if (byte_1019A0A07 < 0)
  {
    goto LABEL_104;
  }

  if (!byte_1019A0A07)
  {
LABEL_104:
    *(_DWORD *)(a1 + 40) = sub_10000C310();
    sub_10000C3E4();
    LODWORD(v110) = 0;
    *(void *)buf = &v110;
    sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5] = v69;
    sub_10000C4C0();
    LODWORD(v110) = 1;
    *(void *)buf = &v110;
    sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5] = v70;
    sub_10000C194(buf);
    sub_1002A576C(v8, (uint64_t)buf);
    sub_1002A5554(buf);
    int v71 = sub_10000C59C();
LABEL_150:
    *(_DWORD *)(a1 + 44) = v71;
    goto LABEL_151;
  }

  while (*(unsigned __int8 *)v15 == *v18)
  {
    uint64_t v15 = (__int128 *)((char *)v15 + 1);
    ++v18;
    if (!--v16) {
      goto LABEL_104;
    }
  }

  int v9 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  uint64_t v10 = *(std::string **)(a1 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v10 = (std::string *)operator new(0x18uLL);
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  std::string::operator=(v10, v9);
  unsigned int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    int v12 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(void *)(a1 + 32) = v12;
    unsigned int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_25;
    }

    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 48),  a3);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5LL, *(void *)(v5 + 32), a2);
  char v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      uint64_t v8 = *(_DWORD *)(a2 + 56);
      if (v8 >= 2) {
        sub_1012281DC();
      }
      *(_DWORD *)(a1 + 80) |= 0x100u;
      *(_DWORD *)(a1 + 56) = v8;
      unsigned int v5 = *(_DWORD *)(a2 + 80);
    }

    if ((v5 & 0x200) != 0)
    {
      int v9 = *(_DWORD *)(a2 + 60);
      if (v9 >= 6) {
        sub_1012281B4();
      }
      *(_DWORD *)(a1 + 80) |= 0x200u;
      *(_DWORD *)(a1 + 60) = v9;
      unsigned int v5 = *(_DWORD *)(a2 + 80);
    }

    if ((v5 & 0x400) != 0)
    {
      uint64_t v10 = *(_DWORD *)(a2 + 72);
      if (v10 >= 6) {
        sub_10122818C();
      }
      *(_DWORD *)(a1 + 80) |= 0x400u;
      *(_DWORD *)(a1 + 72) = v10;
      unsigned int v5 = *(_DWORD *)(a2 + 80);
    }

    if ((v5 & 0x800) != 0)
    {
      uint64_t v11 = *(const std::string **)(a2 + 64);
      *(_DWORD *)(a1 + 80) |= 0x800u;
      int v12 = *(std::string **)(a1 + 64);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v12 = (std::string *)operator new(0x18uLL);
        v12->__r_.__value_.__l.__size_ = 0LL;
        v12->__r_.__value_.__l.__cap_ = 0LL;
        v12->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 64) = v12;
      }

      std::string::operator=(v12, v11);
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 16), a2);
  char v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

    *(_DWORD *)(a1 + 28) |= 2u;
    uint64_t v11 = *(void **)(a1 + 16);
    if (v11 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v11 = operator new(0x18uLL);
      v11[1] = 0LL;
      void v11[2] = 0LL;
      *uint64_t v11 = 0LL;
      *(void *)(a1 + 16) = v11;
    }

    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
    if (!(_DWORD)result) {
      return result;
    }
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  double result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0AA8 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    goto LABEL_23;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  *(void *)(v108 + 8) = v107;
  uint64_t v109 = qword_1019A0BF8;
  if (!qword_1019A0BF8)
  {
    unint64_t v105 = sub_1001D0A48(v105);
    int v107 = qword_1019A0B40;
    uint64_t v109 = qword_1019A0BF8;
  }

  *(void *)(v108 + 16) = v109;
  uint64_t v110 = qword_1019A0C08;
  if (v107)
  {
    *(void *)(qword_1019A0C08 + 24) = v107;
    int v111 = qword_1019A0C10;
  }

  else
  {
    unint64_t v105 = sub_1001D0A48(v105);
    int v107 = qword_1019A0B40;
    *(void *)(v110 + 24) = qword_1019A0B40;
    int v111 = qword_1019A0C10;
    if (!v107)
    {
      unint64_t v105 = sub_1001D0A48(v105);
      int v107 = qword_1019A0B40;
    }
  }

  *(void *)(v111 + 8) = v107;
  uint64_t v112 = qword_1019A0C08;
  if (!qword_1019A0C08)
  {
    sub_1001D0A48(v105);
    uint64_t v112 = qword_1019A0C08;
  }

  *(void *)(v111 + 16) = v112;
  __int16 v113 = sub_1001D2D08(qword_1019A0C20);
  uint64_t v114 = qword_1019A0C28;
  uint64_t v115 = qword_1019A0B40;
  if (!qword_1019A0B40)
  {
    __int16 v113 = sub_1001D0A48(v113);
    uint64_t v115 = qword_1019A0B40;
  }

  *(void *)(v114 + 8) = v115;
  v116 = qword_1019A0C20;
  if (!qword_1019A0C20)
  {
    __int16 v113 = sub_1001D0A48(v113);
    v116 = qword_1019A0C20;
  }

  *(void *)(v114 + 16) = v116;
  v117 = qword_1019A0C30;
  v118 = qword_1019A0BF8;
  if (!qword_1019A0BF8)
  {
    __int16 v113 = sub_1001D0A48(v113);
    v118 = qword_1019A0BF8;
  }

  *(void *)(v117 + 16) = v118;
  char v119 = qword_1019A0C40;
  int v120 = qword_1019A0B40;
  if (!qword_1019A0B40)
  {
    __int16 v113 = sub_1001D0A48(v113);
    int v120 = qword_1019A0B40;
  }

  *(void *)(v119 + 8) = v120;
  int v121 = qword_1019A0C38;
  if (!qword_1019A0C38)
  {
    __int16 v113 = sub_1001D0A48(v113);
    int v120 = qword_1019A0B40;
    int v121 = qword_1019A0C38;
  }

  *(void *)(v119 + 16) = v121;
  char v122 = qword_1019A0C48;
  if (v120)
  {
    *(void *)(qword_1019A0C48 + 8) = v120;
    v123 = qword_1019A0C50;
LABEL_38:
    *(void *)(v123 + 8) = v120;
    __int128 v124 = qword_1019A0C58;
    *(void *)(qword_1019A0C58 + 8) = v120;
    char v125 = qword_1019A0C60;
    *(void *)(qword_1019A0C60 + 8) = v120;
    *(void *)(v125 + 16) = v124;
    __n128 v126 = qword_1019A0C68;
LABEL_39:
    *(void *)(v126 + 8) = v120;
    char v127 = qword_1019A0C70;
    goto LABEL_40;
  }

  __int16 v113 = sub_1001D0A48(v113);
  int v120 = qword_1019A0B40;
  *(void *)(v122 + 8) = qword_1019A0B40;
  v123 = qword_1019A0C50;
  if (v120) {
    goto LABEL_38;
  }
  __int16 v113 = sub_1001D0A48(v113);
  int v120 = qword_1019A0B40;
  *(void *)(v123 + 8) = qword_1019A0B40;
  v173 = qword_1019A0C58;
  if (v120)
  {
    *(void *)(qword_1019A0C58 + 8) = v120;
    v174 = qword_1019A0C60;
  }

  else
  {
    __int16 v113 = sub_1001D0A48(v113);
    int v120 = qword_1019A0B40;
    *(void *)(v173 + 8) = qword_1019A0B40;
    v174 = qword_1019A0C60;
    if (!v120)
    {
      __int16 v113 = sub_1001D0A48(v113);
      int v120 = qword_1019A0B40;
    }
  }

  v198 = qword_1019A0C58;
  *(void *)(v174 + 8) = v120;
  if (!v198)
  {
    __int16 v113 = sub_1001D0A48(v113);
    int v120 = qword_1019A0B40;
    v198 = qword_1019A0C58;
  }

  *(void *)(v174 + 16) = v198;
  __n128 v126 = qword_1019A0C68;
  if (v120) {
    goto LABEL_39;
  }
  __int16 v113 = sub_1001D0A48(v113);
  int v120 = qword_1019A0B40;
  *(void *)(v126 + 8) = qword_1019A0B40;
  char v127 = qword_1019A0C70;
  if (!v120)
  {
    __int16 v113 = sub_1001D0A48(v113);
    int v120 = qword_1019A0B40;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(float *)(v5 + 24),  a3);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 41),  (BOOL)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 43),  (BOOL)a2,  a4);
  }

    uint64_t v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    unsigned int v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }

  int v9 = *(void *)(v5 + 24);
  if (!v9) {
    int v9 = *(void *)(qword_1019A0D28 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x10u;
    *(double *)(a1 + 40) = result;
    char v6 = *(_DWORD *)(a2 + 76);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(float *)(v5 + 36),  a3);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 64),  a3);
  if ((*(_DWORD *)(v5 + 88) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 72),  a3);
  }
  return result;
}

  int v9 = *(void *)(v5 + 56);
  if (!v9) {
    int v9 = *(void *)(qword_1019A0DB0 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  if ((*(_DWORD *)(v5 + 76) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(v5 + 64),  (unint64_t)a2,  a4);
  }
  return result;
}

  if ((sub_100ACA7BC(a1) & 1) == 0) {
    goto LABEL_23;
  }
  int v18 = 0;
  CFStringRef v19 = (unsigned int *)&v18;
  uint64_t v11 = *((_DWORD *)sub_100228E48((uint64_t **)(v2 + 40), &v18, (uint64_t)&unk_1012CF090, &v19) + 8);
  int v12 = v2;
  if (v11 == 1) {
    uint64_t v13 = 4;
  }
  else {
    uint64_t v13 = 5;
  }
LABEL_26:
  sub_1002270D4(v12, v13);
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_tileY),  @"tileY");
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  PBDataWriterWriteUint64Field(a3, self->_securityKey, 4LL);
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  *((void *)a3 + 3) = self->_securityKey;
  *((_BYTE *)a3 + 68) |= 4u;
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if ((has & 8) != 0) {
    uint64_t v13 = 2654435761LL * self->_expirationAgeSecs;
  }
  else {
    uint64_t v13 = 0LL;
  }
  unint64_t v14 = -[TRANSITPbLocationFingerprintsV1 hash](self->_dEPRECATEDFingerprints, "hash");
  if ((*(_BYTE *)&self->_has & 2) != 0) {
    uint64_t v15 = 2654435761u * self->_marketId;
  }
  else {
    uint64_t v15 = 0LL;
  }
  return v5 ^ v4 ^ v6 ^ v7 ^ v12 ^ v13 ^ v15 ^ v14 ^ -[TRANSITPbLocationFingerprints hash](self->_fingerprints, "hash");
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  a2,  a4);
  char v6 = v5[12];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[10],  a2,  a4);
  }

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_zoneType),  @"zoneType");
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_7:
    if ((has & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PBDataWriterWriteDoubleField(a3, 6LL, self->_longitude);
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_8:
    if ((has & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  *((void *)a3 + 2) = *(void *)&self->_longitude;
  *((_WORD *)a3 + 36) |= 2u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_7:
    if ((has & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  v5[2] = *(id *)&self->_longitude;
  *((_WORD *)v5 + 36) |= 2u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_7:
    if ((has & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  self->_zoneType = *((_DWORD *)a3 + 16);
  *(_WORD *)&self->_has |= 0x100u;
  unsigned int v5 = *((_WORD *)a3 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

    uint64_t v10 = (void *)v5[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (void *)*v10;
      }

      while (v10);
    }

    else
    {
      do
      {
        uint64_t v11 = (void *)v5[2];
        int v12 = *v11 == (void)v5;
        unsigned int v5 = v11;
      }

      while (!v12);
    }

    unsigned int v5 = v11;
  }

  while (v11 != (void *)(a1 + 248));
  if ((v6 & 1) != 0)
  {
    uint64_t v15 = 1;
    goto LABEL_43;
  }

  sub_1004772C0((void *)(a1 + 16), (uint64_t)&v18);
  unint64_t v14 = v20;
  *(double *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 104) = v19;
  *(void *)(a1 + 120) = v14;
  uint64_t v15 = v22;
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = v15;
  *(void *)(a1 + 160) = v23;
}

  sub_100477698((__n128 *)a1[1].n128_u64, &v15);
  a1[6] = v15;
}

  sub_100477A34((void *)(a1 + 16), (uint64_t)&v17);
  unint64_t v14 = v18;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v14;
  *(_DWORD *)(a1 + 128) = v19;
}

  sub_100477DFC((void *)(a1 + 16), &v27);
  CFStringRef v19 = v36;
  *(_OWORD *)(a1 + 224) = v35;
  *(_OWORD *)(a1 + 240) = v19;
  int v20 = v38;
  *(_OWORD *)(a1 + 256) = v37;
  *(_OWORD *)(a1 + 272) = v20;
  uint64_t v21 = v32;
  *(_OWORD *)(a1 + 160) = v31;
  *(_OWORD *)(a1 + 176) = v21;
  int64_t v22 = v34;
  *(_OWORD *)(a1 + 192) = v33;
  *(_OWORD *)(a1 + 208) = v22;
  unint64_t v23 = v28;
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v23;
  unint64_t v24 = v30;
  *(_OWORD *)(a1 + 128) = v29;
  *(_OWORD *)(a1 + 144) = v24;
}

  sub_1004781EC(a1 + 2, __dst);
  return memcpy(a1 + 12, __dst, 0x140uLL);
}

  sub_100478594((__n128 *)a1[1].n128_u64, &v15);
  a1[6] = v15;
  a1[7].n128_u64[0] = v16;
}

  sub_10020FFB4((void *)(a1 + 16), (uint64_t)&v31);
  uint64_t v17 = v38;
  *(_OWORD *)(a1 + 192) = v37;
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 224) = v39;
  *(void *)(a1 + 240) = v40;
  int v18 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v18;
  CFStringRef v19 = v36;
  *(_OWORD *)(a1 + 160) = v35;
  *(_OWORD *)(a1 + 176) = v19;
  int v20 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v20;
}

  sub_10046CDA4((void *)(a1 + 16), &v25);
  int v18 = v34;
  *(_OWORD *)(a1 + 224) = v33;
  *(_OWORD *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 256) = v35;
  CFStringRef v19 = v30;
  *(_OWORD *)(a1 + 160) = v29;
  *(_OWORD *)(a1 + 176) = v19;
  int v20 = v32;
  *(_OWORD *)(a1 + 192) = v31;
  *(_OWORD *)(a1 + 208) = v20;
  uint64_t v21 = v26;
  *(_OWORD *)(a1 + 96) = v25;
  *(_OWORD *)(a1 + 112) = v21;
  int64_t v22 = v28;
  *(_OWORD *)(a1 + 128) = v27;
  *(_OWORD *)(a1 + 144) = v22;
}

  sub_1002D6A78((void *)(a1 + 16), (uint64_t)&v19);
  uint64_t v15 = v20;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v15;
  uint64_t v16 = v22;
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = v16;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  char v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(double *)(v5 + 40),  a3);
  char v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(void *)(v5 + 56),  a2,  a4);
  }

    uint64_t v10 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(void *)(a1 + 24) = v10;
    unsigned int v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  PBDataWriterWriteInt32Field(a3, self->_tileY, 3LL);
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  *((_DWORD *)v5 + 9) = self->_tileY;
  *((_BYTE *)v5 + 44) |= 8u;
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  self->_tileY = *((_DWORD *)a3 + 9);
  *(_BYTE *)&self->_has |= 8u;
  char v4 = *((_BYTE *)a3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

    uint64_t v10 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 124) |= 0x10u;
    *(void *)(a1 + 40) = v10;
    unsigned int v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }

    uint64_t v11 = *(_BYTE *)(a2 + 21);
    *(_DWORD *)(a1 + 28) |= 8u;
    *(_BYTE *)(a1 + 21) = v11;
    unsigned int v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  char v6 = v5[13];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 20) = v10;
  unsigned int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_19:
    int v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v12;
    unsigned int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }

    goto LABEL_20;
  }

      if (v7 == 4) {
        return 1LL;
      }
    }

    uint64_t v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    uint64_t v10 = *(_BYTE **)(a1 + 8);
    if (!v10)
    {
      uint64_t v10 = operator new(0x30uLL);
      *(void *)uint64_t v10 = off_101844798;
      v10[8] = 0;
      *((_DWORD *)v10 + 3) = 0;
      *((void *)v10 + 4) = 0LL;
      *((void *)v10 + 5) = 0LL;
      *((void *)v10 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v10 + 3) = 0LL;
      *(void *)(a1 + 8) = v10;
    }

    uint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
    }

    else
    {
      unint64_t v23 = *v11;
      *((void *)this + 1) = v11 + 1;
    }

    int v12 = *((_DWORD *)this + 14);
    uint64_t v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0LL;
    }
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    uint64_t v16 = *((_DWORD *)this + 14);
    uint64_t v17 = __OFSUB__(v16, 1);
    int v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    CFStringRef v19 = (_BYTE *)*((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      int v9 = v19 + 1;
      *((void *)this + 1) = v9;
LABEL_29:
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result) {
          return result;
        }
        int v20 = v22;
      }

      else
      {
        int v20 = *v9;
        *((void *)this + 1) = v9 + 1;
      }

      if (v20 <= 3)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        double result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

    uint64_t v11 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(void *)(a1 + 40) = v11;
    unsigned int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_11;
    }

    uint64_t v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 8u;
    *(_DWORD *)(a1 + 24) = v10;
    if ((*(_DWORD *)(a2 + 36) & 0x10) == 0) {
      return;
    }
    goto LABEL_18;
  }

  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A12D0 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v7,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

    uint64_t v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    unsigned int v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  char v6 = v5[12];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  }

  if ((v3 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if (v9 >= 0x80)
    {
      uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      uint64_t v3 = a1[12];
    }

    else
    {
      uint64_t v10 = 2;
    }

    char v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_19:
      if ((v3 & 0x10) == 0) {
        goto LABEL_20;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_19;
  }

  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = a1[12];
  }

  else
  {
    int v12 = 2;
  }

  char v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_20:
    if ((v3 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }

    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_DWORD *)(a1 + 20) = v9;
    unsigned int v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  char v6 = v5[12];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  }

  if ((v3 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if (v9 >= 0x80)
    {
      uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      uint64_t v3 = a1[12];
    }

    else
    {
      uint64_t v10 = 2;
    }

    char v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_19:
      if ((v3 & 0x10) == 0) {
        goto LABEL_20;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_19;
  }

  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = a1[12];
  }

  else
  {
    int v12 = 2;
  }

  char v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_20:
    if ((v3 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  int v9 = *(void *)(v5 + 32);
  if (!v9) {
    int v9 = *(void *)(qword_1019A13A0 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  }

    uint64_t v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(_DWORD *)(a1 + 16) = v11;
    uint64_t v7 = *(_DWORD *)(a2 + 64);
    if ((v7 & 8) == 0)
    {
LABEL_12:
      if ((v7 & 0x40) == 0) {
        return;
      }
      goto LABEL_13;
    }

    uint64_t v11 = *(_DWORD *)(a2 + 24);
    a1[10] |= 0x10u;
    a1[6] = v11;
    unsigned int v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_11;
    }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  char v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  int v9 = *(void *)(v5 + 32);
  if (!v9) {
    int v9 = *(void *)(qword_1019A14B8 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 14),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 16),  a2,  a4);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  char v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  *(int32x2_t *)&uint64_t v8 = vadd_s32(*(int32x2_t *)(a1 + 236), (int32x2_t)0x100000001LL);
  *(void *)(a1 + 236) = v8;
  uint64_t v13 = *(void *)(a1 + 1000);
  unint64_t v14 = *(void *)(v13 + 64);
  LODWORD(v8) = 0;
  v94 = v8;
  uint64_t v15 = 0.0;
  uint64_t v16 = 0.0;
  if (v14)
  {
    uint64_t v17 = *(float *)(v13 + 16);
    uint64_t v15 = v17 / (float)v14;
    if (v14 != 1)
    {
      int v18 = (float)((float)v14 * *(float *)(v13 + 20)) - (float)(v17 * v17);
      if (v18 >= 0.0) {
        uint64_t v16 = v18 / (float)((v14 - 1) * v14);
      }
    }
  }

  CFStringRef v19 = v16 <= 6.0 && v15 <= 4.7124;
  int v20 = v16 <= 0.8 && v15 <= 1.5708;
  sub_10074DC40(a1 + 552, a2 + 2);
  sub_10074DC40(a1 + 624, a2 + 3);
  sub_10074DC40(a1 + 696, a2 + 4);
  unint64_t v23 = *(void *)(a1 + 616);
  if (v23)
  {
    *(float *)&uint64_t v21 = *(float *)(a1 + 568) / (float)v23;
    v94 = v21;
  }

  unint64_t v24 = *(void *)(a1 + 688);
  unint64_t v25 = 0.0;
  LODWORD(v22) = 0;
  if (v24) {
    *(float *)&int64_t v22 = *(float *)(a1 + 640) / (float)v24;
  }
  double v26 = *(void *)(a1 + 760);
  if (v26) {
    unint64_t v25 = *(float *)(a1 + 712) / (float)v26;
  }
  unint64_t v105 = &off_10184D7B0;
  v106 = v94;
  int v107 = v22;
  v108 = v25;
  CFStringRef v101 = &off_10184D7B0;
  int v102 = *(float *)&v94;
  v103 = *(float *)&v22;
  unint64_t v93 = v22;
  v104 = v25;
  CFStringRef v27 = sub_1007B1EDC((float32x2_t *)a1, (float32x2_t *)&v101);
  if ((*(unsigned int (**)(uint64_t, float32_t))(*(void *)a1 + 72LL))(a1, v27))
  {
    if (*(_BYTE *)(a1 + 60))
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v28 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "Compass-withFusion";
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Type,%s,Updating reference frame.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        __int16 v113 = 136315138;
        *(void *)uint64_t v114 = "Compass-withFusion";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Type,%s,Updating reference frame.",  (const char *)&v113);
        v81 = (char *)v80;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v80);
        if (v81 != buf) {
          free(v81);
        }
      }

      *(_BYTE *)(a1 + 60) = 0;
    }

    if (*(_BYTE *)(a1 + 184))
    {
      HIDWORD(v29) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
      LODWORD(v29) = HIDWORD(v29);
      if ((v29 >> 1) <= 0x19999998)
      {
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        unint64_t v30 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          int v31 = *(unsigned __int8 *)(a1 + 333);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "Updating during coasting, fIsResetInternal(%d)",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10184F718);
          }
          int v83 = *(unsigned __int8 *)(a1 + 333);
          __int16 v113 = 67109120;
          *(_DWORD *)uint64_t v114 = v83;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Updating during coasting, fIsResetInternal(%d)",  &v113);
          BOOL v85 = (char *)v84;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v84);
          if (v85 != buf) {
            free(v85);
          }
        }
      }
    }

    if (*(_BYTE *)(a1 + 185)) {
      unint64_t v32 = v20;
    }
    else {
      unint64_t v32 = 0;
    }
    if (v32 == 1)
    {
      double v33 = *(_DWORD *)(a1 + 324);
      double v34 = v15 > 0.15;
      if (v16 >= 0.01) {
        double v34 = 0;
      }
      if (*(_BYTE *)(a1 + 313)) {
        goto LABEL_64;
      }
      int v35 = fabsf(*(float *)(a1 + 308));
      int v36 = *(_DWORD *)(a1 + 304);
      if (v36 >= 6 && v35 > 100.0) {
        goto LABEL_64;
      }
      uint64_t v37 = !v34;
      if (v36 < 7) {
        uint64_t v37 = 1;
      }
      if ((v37 & 1) != 0 || v35 <= 70.0)
      {
        *(float32x2_t *)(a1 + 120) = vmla_n_f32( vmla_n_f32( vmul_n_f32(*(float32x2_t *)(a1 + 376), v103),  *(float32x2_t *)(a1 + 352),  v102),  *(float32x2_t *)(a1 + 400),  v104);
        *(float *)(a1 + 128) = v76;
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        CFStringRef v77 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "resync coasting vector. rotM,%.3f,rotV,%.3f",  buf,  0x16u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_71;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        __int16 v113 = 134218240;
        *(double *)uint64_t v114 = v15;
        *(_WORD *)&v114[8] = 2048;
        *(double *)&v114[10] = v16;
        LODWORD(v92) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "resync coasting vector. rotM,%.3f,rotV,%.3f",  COERCE_DOUBLE(&v113),  v92);
        int v79 = (char *)v78;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v78);
      }

      else
      {
LABEL_64:
        *(void *)(a1 + 72) = *(void *)(a1 + 264);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 272);
        uint64_t v38 = *(float *)(a1 + 288);
        uint64_t v39 = *(float *)(a1 + 292);
        *(float *)(a1 + 120) = v38;
        *(float *)(a1 + 124) = v39;
        int v40 = *(float *)(a1 + 296);
        *(float *)(a1 + 128) = v40;
        *(_DWORD *)(a1 + 328) = v33;
        *(void *)(a1 + 264) = 0LL;
        *(_DWORD *)(a1 + 272) = 0;
        *(void *)(a1 + 288) = 0LL;
        *(_DWORD *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0LL;
        *(_WORD *)(a1 + 312) = 0;
        if (!*(_BYTE *)(a1 + 333))
        {
          *(void *)buf = &off_10184D7B0;
          *(float *)&uint8_t buf[8] = v41;
          *(float *)&buf[12] = v42;
          *(float *)&buf[16] = v43;
          sub_1007AA3DC((float64x2_t *)a1, (float *)buf, (float32x2_t *)(a1 + 336), 3);
        }

        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        CFStringRef v44 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "BACKUP resync coasting vector", buf, 2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_71;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        LOWORD(v113) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "BACKUP resync coasting vector",  &v113,  2);
        int v79 = (char *)v82;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v82);
      }

      if (v79 != buf) {
        free(v79);
      }
LABEL_71:
      sub_1007AA040(a1, 1);
      goto LABEL_78;
    }

    HIDWORD(v45) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v45) = HIDWORD(v45);
    if ((v45 >> 1) <= 0x19999998)
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      int v46 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v47 = *(double *)a3;
        uint64_t v48 = *(void *)(a3 + 8);
        unint64_t v49 = *(void *)(a3 + 16);
        int v50 = *(void *)(a3 + 24);
        *(_DWORD *)buf = 67110912;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v20;
        *(_WORD *)&buf[14] = 2048;
        *(double *)&buf[16] = v15;
        *(_WORD *)&buf[24] = 2048;
        *(double *)&buf[26] = v16;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = v47;
        *(_WORD *)&buf[44] = 2048;
        *(void *)&buf[46] = v48;
        *(_WORD *)&buf[54] = 2048;
        *(void *)&buf[56] = v49;
        v118 = 2048;
        char v119 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)",  buf,  0x4Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        CFStringRef v86 = *(double *)a3;
        BOOL v87 = *(void *)(a3 + 8);
        CFStringRef v88 = *(void *)(a3 + 16);
        int v89 = *(void *)(a3 + 24);
        __int16 v113 = 67110912;
        *(_DWORD *)uint64_t v114 = v19;
        *(_WORD *)&v114[4] = 1024;
        *(_DWORD *)&v114[6] = v20;
        *(_WORD *)&v114[10] = 2048;
        *(double *)&v114[12] = v15;
        *(_WORD *)&v114[20] = 2048;
        *(double *)&v114[22] = v16;
        *(_WORD *)&v114[30] = 2048;
        *(double *)&v114[32] = v86;
        *(_WORD *)&v114[40] = 2048;
        *(void *)&v114[42] = v87;
        *(_WORD *)&v114[50] = 2048;
        *(void *)&v114[52] = v88;
        uint64_t v115 = 2048;
        v116 = v89;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)",  &v113,  74,  *(double *)&v93,  *((double *)&v93 + 1),  *(double *)&v94,  *((double *)&v94 + 1),  v95,  v96);
        v91 = (char *)v90;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v90);
        if (v91 != buf) {
          free(v91);
        }
      }
    }
  }

  *(void *)(a1 + 16) = 0LL;
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  v4,  a4);
  char v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  v4,  a4);
  char v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1818 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_21:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A1818 + 40);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v11,  a2,  a4);
}

  unint64_t v24 = 1LL;
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  return v24;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1A48 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 56) |= 4u;
  uint64_t v10 = *(char **)(a1 + 16);
  if (!v10)
  {
    uint64_t v10 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v10 = off_101869C08;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(void *)(a1 + 16) = v10;
  }

  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A1B28 + 16);
  }
  double result = sub_100A54ED8((uint64_t)v10, v11);
  char v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v6 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_27:
  *(_DWORD *)(a1 + 56) |= 0x10u;
  unint64_t v14 = *(char **)(a1 + 32);
  if (!v14)
  {
    unint64_t v14 = (char *)operator new(0x28uLL);
    *(void *)unint64_t v14 = off_101869C08;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(void *)(a1 + 32) = v14;
  }

  uint64_t v15 = *(void *)(a2 + 32);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A1B28 + 32);
  }
  double result = sub_100A54ED8((uint64_t)v14, v15);
  if ((*(_DWORD *)(a2 + 56) & 0x20) != 0)
  {
LABEL_32:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    uint64_t v16 = *(char **)(a1 + 40);
    if (!v16)
    {
      uint64_t v16 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v16 = off_101869C08;
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(void *)(a1 + 40) = v16;
    }

    uint64_t v17 = *(void *)(a2 + 40);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_1019A1B28 + 40);
    }
    return sub_100A54ED8((uint64_t)v16, v17);
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v4,  *(float *)(v5 + 36),  a3);
  char v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v4,  *(float *)(v5 + 44),  a3);
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10186A5E8);
  }
  uint64_t v10 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240706;
    int v20 = v5;
    uint64_t v21 = 1026;
    int64_t v22 = a3;
    unint64_t v23 = 2082;
    unint64_t v24 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "WifiTimer, nextscan, %{public}d, haveLoc, %{public}d, codepath, %{public}s",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186A5E8);
    }
    v14[0] = 67240706;
    v14[1] = v5;
    uint64_t v15 = 1026;
    uint64_t v16 = a3;
    uint64_t v17 = 2082;
    int v18 = v4;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WifiTimer, nextscan, %{public}d, haveLoc, %{public}d, codepath, %{public}s",  v14,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::secondsf CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::selectNextScanInterval(C LMotionActivity::Type, BOOL) const",  "%s\n",  v13);
  }

  return (double)v5;
}

    uint64_t v11 = 0;
    uint64_t v13 = -1.0;
    unint64_t v14 = -1.0;
    goto LABEL_18;
  }

  if (a3)
  {
    uint64_t v8 = (double *)(a1 + 528);
    int v9 = (_BYTE *)(a1 + 536);
    uint64_t v10 = *(_BYTE *)(a1 + 536);
    if (*(_BYTE *)(a1 + 568))
    {
      uint64_t v11 = 0;
      int v12 = (_BYTE *)(a1 + 568);
      uint64_t v13 = v6 - *(double *)(a1 + 560);
      unint64_t v14 = -1.0;
LABEL_12:
      uint64_t v16 = -1.0;
LABEL_16:
      *int v12 = 0;
      goto LABEL_19;
    }

    goto LABEL_17;
  }

  uint64_t v8 = (double *)(a1 + 544);
  int v9 = (_BYTE *)(a1 + 552);
  uint64_t v10 = *(_BYTE *)(a1 + 552);
  uint64_t v11 = *(_BYTE *)(a1 + 536) != 0;
  uint64_t v13 = -1.0;
  unint64_t v14 = -1.0;
  if (*(_BYTE *)(a1 + 536)) {
    unint64_t v14 = v6 - *(double *)(a1 + 528);
  }
  if (*(_BYTE *)(a1 + 584))
  {
    int v12 = (_BYTE *)(a1 + 584);
    uint64_t v13 = v6 - *(double *)(a1 + 576);
    goto LABEL_12;
  }

  sub_100AF50A0((void *)(a1 + 16), (uint64_t)&v25);
  int v18 = v32;
  *(_OWORD *)(a1 + 192) = v31;
  *(_OWORD *)(a1 + 208) = v18;
  CFStringRef v19 = v34;
  *(_OWORD *)(a1 + 224) = v33;
  *(_OWORD *)(a1 + 240) = v19;
  int v20 = v28;
  *(_OWORD *)(a1 + 128) = v27;
  *(_OWORD *)(a1 + 144) = v20;
  uint64_t v21 = v30;
  *(_OWORD *)(a1 + 160) = v29;
  *(_OWORD *)(a1 + 176) = v21;
  int64_t v22 = v26;
  *(_OWORD *)(a1 + 96) = v25;
  *(_OWORD *)(a1 + 112) = v22;
}

  sub_100AF54B4((__n128 *)a1[1].n128_u64, &v16);
  a1[6] = v16;
}

  sub_100AF5850((__n128 *)a1[1].n128_u64, &v16);
  a1[6] = v16;
}

  sub_100AF6050((void *)(a1 + 16), (uint64_t)&v18);
  unint64_t v14 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v14;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  (BOOL)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 29),  (BOOL)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 31),  (BOOL)a2,  a4);
  }

    uint64_t v10 = *(_BYTE *)(a2 + 33);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(_BYTE *)(a1 + 33) = v10;
    unsigned int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 34),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_nid),  @"nid");
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_5:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_bsid),  @"bsid");
LABEL_6:
  location = self->_location;
  if (location) {
    objc_msgSend( v3,  "setObject:forKey:",  -[ALSLocation dictionaryRepresentation](location, "dictionaryRepresentation"),  @"location");
  }
  char v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000000) == 0)
  {
    if ((*(_BYTE *)&v6 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_zoneid),  @"zoneid");
  *(_BYTE *)&char v6 = self->_has;
  if ((*(_BYTE *)&v6 & 1) != 0)
  {
LABEL_10:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_bandclass),  @"bandclass");
    *(_BYTE *)&char v6 = self->_has;
  }

  *((_DWORD *)a3 + 9) = self->_nid;
  *((_BYTE *)a3 + 52) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
LABEL_5:
    *((_DWORD *)a3 + 3) = self->_bsid;
    *((_BYTE *)a3 + 52) |= 2u;
  }

  PBDataWriterWriteInt32Field(a3, self->_wifiGranularity, 31LL);
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_6:
  }
    PBDataWriterWriteInt32Field(a3, self->_radius, 32LL);
LABEL_7:
  if (self->_wifiBands.count)
  {
    char v6 = 0LL;
    do
      PBDataWriterWriteInt32Field(a3, self->_wifiBands.list[v6++], 33LL);
    while (v6 < self->_wifiBands.count);
  }

  if ((*(_BYTE *)&self->_has & 8) != 0) {
    PBDataWriterWriteInt32Field(a3, self->_wifiAltitudeScale, 34LL);
  }
  meta = self->_meta;
  if (meta) {
    PBDataWriterWriteSubmessage(a3, meta, 35LL);
  }
}

  *((_DWORD *)a3 + 16) = self->_technology;
  *((_BYTE *)a3 + 80) |= 4u;
  has = (char)self->_has;
  if ((has & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((has & 2) != 0)
  {
LABEL_6:
    *((_DWORD *)a3 + 15) = self->_radius;
    *((_BYTE *)a3 + 80) |= 2u;
  }

  self->_technology = *((_DWORD *)a3 + 16);
  *(_BYTE *)&self->_has |= 4u;
  unsigned int v5 = *((_BYTE *)a3 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(double *)(v5 + 24),  a3);
  char v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 24),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

    uint64_t v10 = 0;
    goto LABEL_25;
  }

  if (v4 == v2)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        char v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v6) & 0x500) != 0)
        {
          uint64_t v10 = 1;
          goto LABEL_25;
        }

        goto LABEL_17;
      }

      goto LABEL_17;
    }
  }

  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v7) & 0x500) != 0;
  uint64_t v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v8) & 0x500) != 0;
  uint64_t v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    int v12 = 0LL;
    uint64_t v13 = -993;
  }

  else
  {
    int v12 = *(void *)(result + 8);
    uint64_t v13 = -994;
  }

  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

            BOOL v87 = 0u;
            CFStringRef v88 = 0u;
            BOOL v85 = 0u;
            CFStringRef v86 = 0u;
            uint64_t v21 = -[NSArray reverseObjectEnumerator](v10, "reverseObjectEnumerator");
            int64_t v22 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v85,  v95,  16LL);
            if (v22)
            {
              unint64_t v23 = v22;
              unint64_t v24 = *(void *)v86;
              unint64_t v76 = v3;
              while (2)
              {
                for (j = 0LL; j != v23; j = (char *)j + 1)
                {
                  if (*(void *)v86 != v24) {
                    objc_enumerationMutation(v21);
                  }
                  double v26 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)j);
                  objc_msgSend(objc_msgSend(v26, "timestamp"), "timeIntervalSinceReferenceDate");
                  int v28 = v27;
                  [v4 timeIntervalSinceReferenceDate];
                  if (v28 >= v29)
                  {
                    objc_msgSend(objc_msgSend(v26, "timestamp"), "timeIntervalSinceReferenceDate");
                    int v31 = v30;
                    [v6 timeIntervalSinceReferenceDate];
                    if (v31 <= v32)
                    {
                      double v33 = [v26 timestamp];
                      if (v11)
                      {
                        double v34 = v33;
                        if (v33)
                        {
                          [v11 timeIntervalSinceReferenceDate];
                          int v36 = v35;
                          [v34 timeIntervalSinceReferenceDate];
                          if (v36 < v37)
                          {
                            uint64_t v38 = +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  2048LL);
                            v81 = 0u;
                            unint64_t v82 = 0u;
                            int v83 = 0u;
                            v84 = 0u;
                            uint64_t v39 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v81,  v94,  16LL);
                            if (v39)
                            {
                              int v40 = v39;
                              uint64_t v41 = *(void *)v82;
                              do
                              {
                                for (k = 0LL; k != v40; k = (char *)k + 1)
                                {
                                  if (*(void *)v82 != v41) {
                                    objc_enumerationMutation(v10);
                                  }
                                  uint64_t v43 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)k);
                                  objc_msgSend(objc_msgSend(v43, "timestamp"), "timeIntervalSinceReferenceDate");
                                  int v45 = v44;
                                  [v11 timeIntervalSinceReferenceDate];
                                  if (v45 >= v46)
                                  {
                                    objc_msgSend(objc_msgSend(v43, "timestamp"), "timeIntervalSinceReferenceDate");
                                    uint64_t v48 = v47;
                                    [v34 timeIntervalSinceReferenceDate];
                                    if (v48 <= v49) {
                                      -[NSMutableArray addObject:](v38, "addObject:", v43);
                                    }
                                  }
                                }

                                int v40 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v81,  v94,  16LL);
                              }

                              while (v40);
                            }

                            if ((unint64_t)-[NSMutableArray count](v38, "count") >= 2)
                            {
                              +[CLPolygonSimplifier simplifiedLength:threshold:]( &OBJC_CLASS___CLPolygonSimplifier,  "simplifiedLength:threshold:",  v38,  6.7);
                              -[CalTrackFinder setDistanceGps:](self, "setDistanceGps:");
                              -[CalTrackFinder setTimeStart:](self, "setTimeStart:", v11);
                              -[CalTrackFinder setTimeEnd:](self, "setTimeEnd:", v34);
                              int v79 = 0u;
                              v80 = 0u;
                              CFStringRef v77 = 0u;
                              int v78 = 0u;
                              int v50 = -[NSArray countByEnumeratingWithState:objects:count:]( v76,  "countByEnumeratingWithState:objects:count:",  &v77,  v93,  16LL);
                              CFStringRef v51 = 0.0;
                              int v52 = 0.0;
                              uint64_t v53 = 0.0;
                              if (v50)
                              {
                                __int16 v54 = v50;
                                uint64_t v55 = *(void *)v78;
                                do
                                {
                                  for (m = 0LL; m != v54; m = (char *)m + 1)
                                  {
                                    if (*(void *)v78 != v55) {
                                      objc_enumerationMutation(v76);
                                    }
                                    BOOL v57 = *(void **)(*((void *)&v77 + 1) + 8LL * (void)m);
                                    objc_msgSend(objc_msgSend(v57, "firstStepTime"), "timeIntervalSinceReferenceDate");
                                    CFStringRef v59 = v58;
                                    -[NSDate timeIntervalSinceReferenceDate]( -[CalTrackFinder timeStart](self, "timeStart"),  "timeIntervalSinceReferenceDate");
                                    if (v59 >= v60)
                                    {
                                      objc_msgSend(objc_msgSend(v57, "lastStepTime"), "timeIntervalSinceReferenceDate");
                                      uint64_t v62 = v61;
                                      -[NSDate timeIntervalSinceReferenceDate]( -[CalTrackFinder timeEnd](self, "timeEnd"),  "timeIntervalSinceReferenceDate");
                                      if (v62 <= v63)
                                      {
                                        [v57 speedCurrent];
                                        uint64_t v65 = v64;
                                        [v57 deltaActiveTime];
                                        CFStringRef v51 = v51 + v65 * v66;
                                        [v57 deltaActiveTime];
                                        int v52 = v52 + v67;
                                        [v57 stepCadenceCurrent];
                                        unint64_t v69 = v68;
                                        [v57 deltaActiveTime];
                                        uint64_t v53 = v53 + v69 * v70;
                                      }
                                    }
                                  }

                                  __int16 v54 = -[NSArray countByEnumeratingWithState:objects:count:]( v76,  "countByEnumeratingWithState:objects:count:",  &v77,  v93,  16LL);
                                }

                                while (v54);
                              }

                              -[NSDate timeIntervalSinceDate:]( -[CalTrackFinder timeEnd](self, "timeEnd"),  "timeIntervalSinceDate:",  -[CalTrackFinder timeStart](self, "timeStart"));
                              if (v52 <= 0.01) {
                                uint64_t v72 = 0.0;
                              }
                              else {
                                uint64_t v72 = v51 / v52;
                              }
                              unint64_t v73 = v72 * v71;
                              if (v52 <= 0.01) {
                                uint64_t v74 = 0.0;
                              }
                              else {
                                uint64_t v74 = v53 / v52;
                              }
                              -[CalTrackFinder setDistanceRawPed:](self, "setDistanceRawPed:", v73);
                              -[NSDate timeIntervalSinceDate:]( -[CalTrackFinder timeEnd](self, "timeEnd"),  "timeIntervalSinceDate:",  -[CalTrackFinder timeStart](self, "timeStart"));
                              -[CalTrackFinder setSteps:](self, "setSteps:", v74 * v75);
                            }
                          }
                        }
                      }

                      return;
                    }
                  }
                }

                unint64_t v23 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v85,  v95,  16LL);
                if (v23) {
                  continue;
                }
                break;
              }
            }
          }
        }
      }
    }
  }

  sub_1002D636C((void *)(a1 + 16), (uint64_t)&v19);
  uint64_t v15 = v22;
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = v15;
  *(void *)(a1 + 160) = v23;
  uint64_t v16 = v20;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v16;
}

  sub_100CE3EBC((void *)(a1 + 16), (uint64_t)&v18);
  unint64_t v14 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v14;
  *(void *)(a1 + 128) = v20;
}

  sub_100CE4284((__n128 *)a1[1].n128_u64, &v15);
  a1[6] = v15;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_timestampGps),  @"timestampGps");
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  PBDataWriterWriteDoubleField(a3, 5LL, self->_slope);
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  *((void *)a3 + 7) = *(void *)&self->_slope;
  *((_WORD *)a3 + 44) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  *((void *)result + 8) = *(void *)&self->_timestampGps;
  *((_WORD *)result + 44) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  self->_slope = *((double *)a3 + 7);
  *(_WORD *)&self->_has |= 0x40u;
  uint64_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  if (*(void *)v6 != 0x656C636974726170LL) {
    goto LABEL_33;
  }
  uint64_t v13 = operator new(0x1028uLL);
  unint64_t v14 = (uint64_t)v13;
  uint64_t v15 = a1[1];
  uint64_t v43 = *a1;
  CFStringRef v44 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)(v15 + 8);
    do
      uint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  sub_100D5B1D4((uint64_t)v13, &v43, (__int128 *)a2);
  sub_100D4BB1C(a3, v14);
  int v18 = v44;
  if (v44)
  {
    CFStringRef v19 = (unint64_t *)&v44->__shared_owners_;
    do
      int v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_39;
  }

        uint64_t v16 = 0LL;
        goto LABEL_38;
      }
    }
  }

  *(void *)v104 = 0LL;
  *(void *)&v104[8] = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)&v104[16] = _Q0;
  unint64_t v105 = 0uLL;
  *(void *)v106 = 0xBFF0000000000000LL;
  v108[15] = 0LL;
  LODWORD(v108[16]) = 0;
  memset(&v108[10], 0, 34);
  memset(&v108[17], 0, 75);
  memset(&v108[27], 0, 56);
  memset(v108, 0, 78);
  int v107 = 0u;
  memset(&v106[8], 0, 80);
  v108[34] = 0xBFF0000000000000LL;
  int64_t v22 = sub_101171D4C();
  if ((sub_100D7D0B4((CLMotionActivity *)a1, a2, a3, (uint64_t)v104) & 1) != 0)
  {
    sub_1010DDBC0(__p, "aPriori");
    sub_100F1F648((uint64_t *)v104, (uint64_t *)__p, -1.0);
    if (v90 < 0) {
      operator delete(__p[0]);
    }
    switch(*(_DWORD *)(a1 + 436))
    {
      case 0:
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881F60);
        }
        unint64_t v23 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v24 = *(void *)(a2 + 76);
          unint64_t v25 = *v10;
          double v26 = *v11;
          *(_DWORD *)buf = 134349568;
          *(void *)uint64_t v110 = v24;
          *(_WORD *)&v110[8] = 1026;
          *(_DWORD *)int v111 = v25;
          *(_WORD *)&v111[4] = 1026;
          *(_DWORD *)&v111[6] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,Unknown dynamics,no matching,activity,%{public}d,fitness,%{public}d",  buf,  0x18u);
        }

        if (!sub_1002921D0(115, 2)) {
          break;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881F60);
        }
        CFStringRef v27 = *(void *)(a2 + 76);
        int v28 = *v10;
        uint64_t v29 = *v11;
        v94 = 134349568;
        BOOL v95 = v27;
        double v96 = 1026;
        *(_DWORD *)v97 = v28;
        *(_WORD *)&v97[4] = 1026;
        *(_DWORD *)&v97[6] = v29;
        LODWORD(v86) = 24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,Unknown dynamics,no matching,activity,%{public}d,fitness,%{public}d",  &v94,  v86);
        int v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v30);
        goto LABEL_131;
      case 1:
        if (*(_DWORD *)(a2 + 96) == 11)
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881F60);
          }
          uint64_t v53 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
          {
            __int16 v54 = *(void *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(void *)uint64_t v110 = v54;
            _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "CLMM,%{public}.1lf,vehicle dynamics,wifi2 fix ignored",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881F60);
            }
            uint64_t v55 = *(void *)(a2 + 76);
            v94 = 134349056;
            BOOL v95 = v55;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  1LL,  "CLMM,%{public}.1lf,vehicle dynamics,wifi2 fix ignored",  &v94,  v86);
            int v31 = (uint8_t *)v56;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v56);
            goto LABEL_131;
          }
        }

        else
        {
          if (*(void *)(a1 + 240) && *(void *)(a1 + 256))
          {
            int v36 = sub_100D7D658((void *)a1, a2, a3, (uint64_t)v104);
            goto LABEL_49;
          }

          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881F60);
          }
          uint64_t v65 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            double v66 = *(void *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(void *)uint64_t v110 = v66;
            _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,null pointers for matcher or geometry",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881F60);
            }
            CFStringRef v67 = *(void *)(a2 + 76);
            v94 = 134349056;
            BOOL v95 = v67;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,null pointers for matcher or geometry",  &v94,  v86);
            int v31 = (uint8_t *)v68;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v68);
            goto LABEL_131;
          }
        }

        break;
      case 2:
        int v35 = *(uint64_t **)(a1 + 608);
        if (v35)
        {
          goto LABEL_45;
        }

        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881F60);
        }
        BOOL v57 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          double v58 = *(void *)(a2 + 76);
          *(_DWORD *)buf = 134349056;
          *(void *)uint64_t v110 = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,null pointers for pedestrian matcher",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881F60);
          }
          CFStringRef v59 = *(void *)(a2 + 76);
          v94 = 134349056;
          BOOL v95 = v59;
          LODWORD(v86) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,null pointers for pedestrian matcher",  &v94,  v86);
          int v31 = (uint8_t *)v60;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v60);
          goto LABEL_131;
        }

        break;
      case 3:
        uint64_t v37 = *(uint64_t **)(a1 + 632);
        if (v37)
        {
          if (sub_100EB3A6C(v37, (uint64_t)v104))
          {
LABEL_45:
            sub_100D7D5E8(a1, (uint64_t)v104, a2, a3);
            int v36 = 1;
          }

          else
          {
LABEL_48:
            int v36 = 0;
          }

  int v9 = *(void *)(v5 + 24);
  if (!v9) {
    int v9 = *(void *)(qword_1019A20E0 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

      if (v7 == 4) {
        return 1LL;
      }
    }

    uint64_t v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    uint64_t v10 = *(char **)(a1 + 8);
    if (!v10)
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v10 = off_1018873C8;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(void *)(a1 + 8) = v10;
    }

    uint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
    }

    else
    {
      unint64_t v23 = *v11;
      *((void *)this + 1) = v11 + 1;
    }

    int v12 = *((_DWORD *)this + 14);
    uint64_t v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0LL;
    }
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    uint64_t v16 = *((_DWORD *)this + 14);
    uint64_t v17 = __OFSUB__(v16, 1);
    int v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    CFStringRef v19 = (_BYTE *)*((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      int v9 = v19 + 1;
      *((void *)this + 1) = v9;
LABEL_29:
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result) {
          return result;
        }
        int v20 = v22;
      }

      else
      {
        int v20 = *v9;
        *((void *)this + 1) = v9 + 1;
      }

      if (v20 <= 5)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        double result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 18),  (BOOL)a2,  a4);
  char v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

      if (v7 == 4) {
        return 1LL;
      }
    }

    uint64_t v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    uint64_t v10 = *(char **)(a1 + 8);
    if (!v10)
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v10 = off_1018873C8;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(void *)(a1 + 8) = v10;
    }

    uint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
    }

    else
    {
      unint64_t v23 = *v11;
      *((void *)this + 1) = v11 + 1;
    }

    int v12 = *((_DWORD *)this + 14);
    uint64_t v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0LL;
    }
    unint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    uint64_t v16 = *((_DWORD *)this + 14);
    uint64_t v17 = __OFSUB__(v16, 1);
    int v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    CFStringRef v19 = (_BYTE *)*((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      int v9 = v19 + 1;
      *((void *)this + 1) = v9;
LABEL_29:
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!(_DWORD)result) {
          return result;
        }
        int v20 = v22;
      }

      else
      {
        int v20 = *v9;
        *((void *)this + 1) = v9 + 1;
      }

      if (v20 <= 0x1B)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        double result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

        unint64_t v14 = v11 == st_size;
        fflush(v10);
        fclose(v10);
      }

      else
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v15 = &__p;
        }
        else {
          uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", (const char *)v15);
        unint64_t v14 = 0LL;
      }

      fclose(v8);
    }

    else
    {
      syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", v4);
      unint64_t v14 = 0LL;
    }
  }

  (*(void (**)(char *))(*(void *)v3 + 24LL))(v3);
  return v14;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 32),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 40),  a3);
  }

  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  char v6 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 184);
    uint64_t v8 = *(void *)(a1 + 192);
    int v9 = *(void *)(a1 + 200);
    uint64_t v10 = *(void *)(a1 + 208);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 232);
    int v12 = *(void *)(a1 + 216);
    uint64_t v13 = *(void *)(a1 + 224);
    unint64_t v14 = *(void *)(a1 + 248);
    *(_DWORD *)buf = 134219777;
    int v45 = v7;
    int v46 = 2048;
    uint64_t v47 = v8;
    uint64_t v48 = 2049;
    unint64_t v49 = v9;
    int v50 = 2049;
    CFStringRef v51 = v10;
    int v52 = 2049;
    uint64_t v53 = v12;
    __int16 v54 = 1025;
    uint64_t v55 = v11;
    unint64_t v56 = 2049;
    BOOL v57 = v13;
    double v58 = 2048;
    CFStringRef v59 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_updateOutdoorEstimate,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld ,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,Es timatorTimeCfaSec,%f",  buf,  0x4Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    int v18 = *(void *)(a1 + 184);
    CFStringRef v19 = *(void *)(a1 + 192);
    int v20 = *(void *)(a1 + 200);
    uint64_t v21 = *(void *)(a1 + 208);
    int64_t v22 = *(unsigned __int8 *)(a1 + 232);
    unint64_t v23 = *(void *)(a1 + 216);
    unint64_t v24 = *(void *)(a1 + 224);
    unint64_t v25 = *(void *)(a1 + 248);
    int v28 = 134219777;
    uint64_t v29 = v18;
    unint64_t v30 = 2048;
    int v31 = v19;
    unint64_t v32 = 2049;
    double v33 = v20;
    double v34 = 2049;
    int v35 = v21;
    int v36 = 2049;
    uint64_t v37 = v23;
    uint64_t v38 = 1025;
    uint64_t v39 = v22;
    int v40 = 2049;
    uint64_t v41 = v24;
    uint64_t v42 = 2048;
    uint64_t v43 = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_updateOutdoorEstimate,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld ,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,Es timatorTimeCfaSec,%f",  &v28,  78);
    CFStringRef v27 = (uint8_t *)v26;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorEstimator::updateOutdoorEstimate()", "%s\n", v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  uint64_t v10 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int64_t v22 = (char *)&v25 + 8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "received force trigger,uid,%s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    uint64_t v17 = 136315138;
    int v18 = (char *)&v25 + 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "received force trigger,uid,%s",  (const char *)&v17);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLKappaNotifierAdapter forceTriggerIgneous:]", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  -[CLKappaNotifierAdapter adaptee](self, "adaptee");
  if (sub_100FF0BE4())
  {
    uint64_t v11 = -[CLKappaNotifierAdapter adaptee](self, "adaptee");
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    sub_100FEF7CC((uint64_t)v11, (unsigned __int8 *)&v15);
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  char v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xBu);
  char v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  char v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v10;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0) {
    goto LABEL_18;
  }
  return result;
}

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "leftGroundContactTime", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  char v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 20));
  unsigned int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  char v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  int v9 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 20) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "triggerOn", *(_BYTE *)(a1 + 41));
  unsigned int v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 32));
    if ((*(_WORD *)(a1 + 44) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 7u);
  char v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 9u);
  }

  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 32) = result;
  if ((*(_BYTE *)(a2 + 44) & 0x40) != 0) {
    goto LABEL_18;
  }
  return result;
}

  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 44));
  unsigned int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  char v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 48));
  unsigned int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 80) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  char v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  }

  PB::TextFormatter::format(this, "bodyAccelZ", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  char v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  int v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 48));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "stepCountEventTimestamp", *(void *)(a1 + 24));
    if ((*(_WORD *)(a1 + 60) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x6Bu);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCAu);
  }

  PB::TextFormatter::format(this, "autocorrelationTimeVariationCriticalThreshold", *(_DWORD *)(a1 + 40));
  unsigned int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 0x68u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "validY", *(_BYTE *)(a1 + 49));
  unsigned int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  char v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  uint64_t v8 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 56) = v3;
  *(void *)(result + 16) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "sensor", *(_DWORD *)(a1 + 40));
  unsigned int v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 6u);
  char v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 16) = v10;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0) {
    goto LABEL_18;
  }
  return result;
}

  PB::TextFormatter::format(this, "impulseStartTime", *(double *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 60) & 4) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "imuTimestamp", *(double *)(a1 + 32));
LABEL_11:
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "stepLikelihoodFeatures");
  }
  return PB::TextFormatter::endObject(this);
}

  PB::TextFormatter::format(this, "compensate", *(_BYTE *)(a1 + 60));
  unsigned int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "gradient", *(float *)(a1 + 28));
  unsigned int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 47), 5u);
  char v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  int v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "entropyTragus", *(float *)(a1 + 36));
  unsigned int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "tapInterval", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 48) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  char v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 9u);
  }

  PB::TextFormatter::format(this, "elevationDescended", *(_DWORD *)(a1 + 36));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 5u);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  uint64_t v11 = *(_BYTE *)(a2 + 92);
  *(_WORD *)(a1 + 96) |= 0x80u;
  *(_BYTE *)(a1 + 92) = v11;
  char v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  if ((*(_BYTE *)(a2 + 44) & 0x20) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = v3 | 0x20;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

  PB::TextFormatter::format(this, "percentLow", *(double *)(a1 + 8));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 5u);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 80) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "intermediateBoutsStepLengthQ95Heightnorm", *(double *)(a1 + 40));
  unsigned int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 6u);
  char v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 44) = v10;
  if ((*(_BYTE *)(a2 + 52) & 0x20) != 0) {
    goto LABEL_18;
  }
  return result;
}

  uint64_t v10 = *(__int128 **)(a2 + 72);
  if (v10)
  {
    uint64_t v11 = (void **)operator new(0x18uLL);
    int v12 = v11;
    if (*((char *)v10 + 23) < 0)
    {
      sub_1010DD48C(v11, *(void **)v10, *((void *)v10 + 1));
      unint64_t v23 = *v4;
      *char v4 = v12;
      if (v23) {
        sub_10058A4FC((int)v4, v23);
      }
    }

    else
    {
      uint64_t v13 = *v10;
      void v11[2] = (void *)*((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v13;
      *char v4 = v11;
    }
  }

  unint64_t v24 = *(_DWORD *)(a2 + 152);
  if ((v24 & 0x200000) != 0)
  {
    unint64_t v25 = *(_BYTE *)(a2 + 148);
    *(_DWORD *)(a1 + 152) |= 0x200000u;
    *(_BYTE *)(a1 + 148) = v25;
    unint64_t v24 = *(_DWORD *)(a2 + 152);
  }

  if ((v24 & 0x400000) != 0)
  {
    double v26 = *(_BYTE *)(a2 + 149);
    *(_DWORD *)(a1 + 152) |= 0x400000u;
    *(_BYTE *)(a1 + 149) = v26;
  }

  CFStringRef v27 = *(void *)(a2 + 8);
  if (v27)
  {
    int v28 = operator new(0x28uLL);
    uint64_t v29 = sub_1010E18FC((uint64_t)v28, v27);
    unint64_t v30 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v31;
    if (v30) {
      (*(void (**)(uint64_t, double))(*(void *)v30 + 8LL))(v30, v29);
    }
  }

  unint64_t v32 = *(_DWORD *)(a2 + 152);
  if ((v32 & 0x40000) != 0)
  {
    uint64_t v41 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 152) |= 0x40000u;
    *(_DWORD *)(a1 + 136) = v41;
    unint64_t v32 = *(_DWORD *)(a2 + 152);
    if ((v32 & 0x100000) == 0)
    {
LABEL_41:
      if ((v32 & 0x20000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_56;
    }
  }

  else if ((v32 & 0x100000) == 0)
  {
    goto LABEL_41;
  }

  uint64_t v42 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) |= 0x100000u;
  *(_DWORD *)(a1 + 144) = v42;
  unint64_t v32 = *(_DWORD *)(a2 + 152);
  if ((v32 & 0x20000) == 0)
  {
LABEL_42:
    if ((v32 & 0x400) == 0) {
      goto LABEL_43;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "incrementalActiveTime", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  char v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "deltaInertialZVel", *(double *)(a1 + 32));
  unsigned int v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  char v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "gpsSource", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  char v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "maxMinPressure", *(float *)(a1 + 28));
  unsigned int v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  char v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "direction", *(_DWORD *)(a1 + 32));
  unsigned int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  int v9 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 40) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "sessionType", *(_DWORD *)(a1 + 64));
  unsigned int v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "variance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  char v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 9u);
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "estimatedHeading", *(float *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x20) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "globalReferenceFrame", *(_DWORD *)(a1 + 60));
LABEL_6:
  char v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }

  int v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "lslHeadingAccuracy", *(float *)(a1 + 64));
    int v9 = *(_WORD *)(a1 + 76);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }

  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }

  PB::TextFormatter::format(this, "lslHeadingConfidence", *(float *)(a1 + 68));
  int v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
LABEL_22:
    PB::TextFormatter::format(this, "roadID", *(_DWORD *)(a1 + 72));
    if ((*(_WORD *)(a1 + 76) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  char v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 8) != 0) {
LABEL_6:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 52), 5u);
LABEL_7:
  unsigned int v5 = *(float **)(v3 + 8);
  char v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    double result = PB::Writer::write(this, v7, 6u);
  }

  uint64_t v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
    uint64_t v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
  }

  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 68), 8u);
  uint64_t v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  }

  PB::TextFormatter::format(this, "longitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 100) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
LABEL_12:
  uint64_t v10 = *(double **)(a1 + 32);
  uint64_t v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    int v12 = *v10++;
    PB::TextFormatter::format(this, "transformMatrixFromCameraToEcefCoordinate", v12);
  }

  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
  char v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 64), 5u);
LABEL_7:
  unsigned int v5 = *(double **)(v3 + 32);
  char v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    double result = PB::Writer::write(this, v7, 6u);
  }

  uint64_t v8 = *(float **)(v3 + 8);
  int v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    double result = PB::Writer::write(this, v10, 7u);
  }

  if ((*(_BYTE *)(v3 + 100) & 0x20) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 96), 8u);
  }
  return result;
}

  uint64_t v10 = *(_BYTE *)(a2 + 38);
  v3 |= 0x80u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 38) = v10;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0) {
    goto LABEL_18;
  }
  return result;
}

  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 8) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 6u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  char v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 3u);
  char v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  int v9 = *(_BYTE *)(a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 12) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "isStepTypeBicycle", *(_BYTE *)(a1 + 13));
  unsigned int v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "isVehicularRouting", *(_BYTE *)(a1 + 15));
    if ((*(_WORD *)(a1 + 20) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 16), 7u);
  char v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 8), 9u);
  }

  int v9 = *(_BYTE *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 32) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "workoutResume", *(_BYTE *)(a1 + 33));
  unsigned int v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "workoutStop", *(_BYTE *)(a1 + 35));
    if ((*(_WORD *)(a1 + 36) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 33), 0xDu);
  char v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x16u);
  }

  PB::TextFormatter::format(this, "confidenceOfGeoLocation", *(double *)(a1 + 16));
  unsigned int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  char v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "fractionalGrade", *(double *)(a1 + 16));
  unsigned int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 5u);
  char v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  unsigned int v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  char v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  unsigned int v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  }

  uint64_t v8 = *(_BYTE *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  unsigned int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  char v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  char v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 48) & 2) != 0) {
    goto LABEL_18;
  }
  return result;
}

  uint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 64) = v3;
  *(void *)(result + 16) = v10;
  if ((*(_BYTE *)(a2 + 64) & 0x80) != 0) {
    goto LABEL_18;
  }
  return result;
}

  int v9 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 16) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  unsigned int v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  char v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 72), 9u);
  }

  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  unsigned int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  char v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "header", *(_DWORD *)(a1 + 76));
  unsigned int v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  char v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  char v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 44) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 44) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  int v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 24) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  unsigned int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
    if ((*(_WORD *)(a1 + 60) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 58), 7u);
  char v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 57), 9u);
  }

  uint64_t v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  unsigned int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  char v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "isAvgGrav", *(_BYTE *)(a1 + 44));
  unsigned int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    PB::TextFormatter::format(this, "measNoiseVar", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 7u);
  char v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  }

    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 8u;
    *(double *)(a1 + 32) = result;
    char v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  char v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

LABEL_54:
  int v36 = &qword_1019A0A20;
  uint64_t v37 = byte_1019A0A37;
  if (byte_1019A0A37 >= 0) {
    uint64_t v38 = byte_1019A0A37;
  }
  else {
    uint64_t v38 = qword_1019A0A28;
  }
  if (v38 != v13) {
    goto LABEL_68;
  }
  if (v12 >= 0) {
    uint64_t v39 = a2;
  }
  else {
    uint64_t v39 = *(unsigned __int8 **)a2;
  }
  if (byte_1019A0A37 < 0)
  {
LABEL_80:
    sub_1002F0B04(buf);
    CFStringRef v44 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizerAlgorithm_HomeLOI", 0x8000100u, kCFAllocatorNull);
    int v45 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v44, &v110);
    CFRelease(v44);
    int v46 = v110;
    uint64_t v47 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (v45) {
      int v50 = v46;
    }
    else {
      int v50 = 3;
    }
    *(_DWORD *)(a1 + 40) = v50;
    sub_1002F0B04(buf);
    CFStringRef v51 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile_HomeLOI",  0x8000100u,  kCFAllocatorNull);
    int v52 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v51, &v110);
    CFRelease(v51);
    uint64_t v53 = v110;
    __int16 v54 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v55 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    LODWORD(v110) = 0;
    *(void *)buf = &v110;
    BOOL v57 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    double v58 = 0.1;
    if (v52) {
      double v58 = *(double *)&v53;
    }
    *((double *)v57 + 5) = v58;
    sub_1002F0B04(buf);
    CFStringRef v59 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile_HomeLOI",  0x8000100u,  kCFAllocatorNull);
    int v60 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v59, &v110);
    CFRelease(v59);
    uint64_t v61 = v110;
    uint64_t v62 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v63 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }

    LODWORD(v110) = 1;
    *(void *)buf = &v110;
    uint64_t v65 = sub_10000C858((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    double v66 = 0.2;
    if (v60) {
      double v66 = *(double *)&v61;
    }
    *((double *)v65 + 5) = v66;
    sub_1002F0B04(&v110);
    sub_1002A5370(v109);
    CFStringRef v67 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceKernelFunction_HomeLOI",  0x8000100u,  kCFAllocatorNull);
    BOOL v68 = sub_1002A8FFC(v110, (uint64_t)v67, v109);
    CFRelease(v67);
    if (v68)
    {
      sub_1002A5768(buf, (uint64_t)v109);
      sub_1002A55A8(v106, (uint64_t)buf);
      v106[0] = &off_1018201E0;
      sub_1002A5590(buf);
    }

    else
    {
      sub_1010DDBC0(buf, "{type : 2, sigma : 0.6, power : 3.5}");
      sub_10012F48C(v106, buf);
      if (SBYTE3(v114) < 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_1002A5590(v109);
    uint64_t v74 = v111;
    if (v111)
    {
      unint64_t v75 = (unint64_t *)&v111->__shared_owners_;
      do
        unint64_t v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }

    sub_1002A576C(v8, (uint64_t)v106);
    sub_1002A5554(v106);
    sub_1002F0B04(buf);
    CFStringRef v77 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsHomeLoiLocalizerFingerprintDistanceFunctionType",  0x8000100u,  kCFAllocatorNull);
    int v78 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v77, &v110);
    CFRelease(v77);
    int v79 = v110;
    v80 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      v81 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }

    if (v78) {
      int v83 = v79;
    }
    else {
      int v83 = 5;
    }
    *(_DWORD *)(a1 + 44) = v83;
    goto LABEL_151;
  }

  if (!byte_1019A0A37) {
    goto LABEL_80;
  }
  while (*(unsigned __int8 *)v36 == *v39)
  {
    int v36 = (uint64_t *)((char *)v36 + 1);
    ++v39;
    if (!--v37) {
      goto LABEL_80;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  *(_DWORD *)(v5 + 184),  a2,  a4);
  if ((*(_DWORD *)(v5 + 192) & 0x200000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 22LL,  *(void *)(v5 + 176),  a2);
  }
  return result;
}

  double v26 = *(_BYTE *)(a2 + 69);
  *(_DWORD *)(a1 + 116) |= 0x800u;
  *(_BYTE *)(a1 + 69) = v26;
  unsigned int v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_58;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(unsigned __int8 *)(v5 + 77),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 128) & 0x4000) != 0) {
LABEL_16:
  }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 120),  (int)a2,  a4);
LABEL_17:
  if (*(int *)(v5 + 112) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(_DWORD *)(*(void *)(v5 + 104) + 4 * v7++),  (int)a2,  a4);
    while (v7 < *(int *)(v5 + 112));
  }

  return result;
}

  uint64_t v38 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) |= 0x2000u;
  *(_DWORD *)(a1 + 160) = v38;
  if ((*(_DWORD *)(a2 + 168) & 0x4000) != 0)
  {
LABEL_49:
    double v34 = *(void *)(a2 + 152);
    *(_DWORD *)(a1 + 168) |= 0x4000u;
    *(void *)(a1 + 152) = v34;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(double *)(v5 + 96),  a3);
  if ((*(_DWORD *)(v5 + 292) & 0x2000) != 0) {
LABEL_15:
  }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  (int)a2,  *(double *)(v5 + 104),  a3);
LABEL_16:
  if (*(int *)(v5 + 120) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(void *)(*(void *)(v5 + 112) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 120));
  }

  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(void *)(*(void *)(v5 + 136) + 8 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 144));
  }

  int v9 = *(_DWORD *)(v5 + 292);
  if ((v9 & 0x10000) != 0)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  (int)a2,  *(double *)(v5 + 160),  a3);
    int v9 = *(_DWORD *)(v5 + 292);
    if ((v9 & 0x20000) == 0)
    {
LABEL_24:
      if ((v9 & 0x40000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_58;
    }
  }

  else if ((v9 & 0x20000) == 0)
  {
    goto LABEL_24;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  (int)a2,  *(double *)(v5 + 168),  a3);
  int v9 = *(_DWORD *)(v5 + 292);
  if ((v9 & 0x40000) == 0)
  {
LABEL_25:
    if ((v9 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33,  (int)a2,  *(double *)(v5 + 152),  a3);
  char v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  v138[1] = v120;
  __int16 v139 = *((void *)v134 + 404);
  if (!v139)
  {
    __int16 v113 = sub_1001D0A48(v113);
    __int16 v139 = *((void *)v134 + 404);
  }

  v138[3] = v139;
  uint64_t v140 = *((void *)v133 + 405);
  if (!v140)
  {
    __int16 v113 = sub_1001D0A48(v113);
    uint64_t v140 = *((void *)v133 + 405);
  }

  v138[4] = v140;
  __int16 v141 = qword_1019A0CB8;
  v142 = qword_1019A0B40;
  if (qword_1019A0B40)
  {
    *(void *)(qword_1019A0CB8 + 8) = qword_1019A0B40;
    *(void *)(qword_1019A0CC8 + 8) = v142;
    v143 = qword_1019A0CD0;
    v144 = &dword_1019A0000;
    v145 = &dword_1019A0000;
LABEL_60:
    *(void *)(v143 + 8) = v142;
    v146 = *((void *)v144 + 411);
    goto LABEL_63;
  }

  v147 = sub_1001D0A48(v113);
  v142 = qword_1019A0B40;
  *(void *)(v141 + 8) = qword_1019A0B40;
  v148 = qword_1019A0CC8;
  if (v142)
  {
    *(void *)(qword_1019A0CC8 + 8) = v142;
    *(void *)(qword_1019A0CD0 + 8) = v142;
    v146 = qword_1019A0CD8;
    v145 = &dword_1019A0000;
  }

  else
  {
    v175 = sub_1001D0A48(v147);
    v142 = qword_1019A0B40;
    *(void *)(v148 + 8) = qword_1019A0B40;
    v143 = qword_1019A0CD0;
    v145 = &dword_1019A0000;
    if (v142)
    {
      v144 = &dword_1019A0000;
      goto LABEL_60;
    }

    v199 = sub_1001D0A48(v175);
    v142 = qword_1019A0B40;
    *(void *)(v143 + 8) = qword_1019A0B40;
    v146 = qword_1019A0CD8;
    if (!v142)
    {
      sub_1001D0A48(v199);
      v142 = qword_1019A0B40;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  *(_DWORD *)(v5 + 124),  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
LABEL_56:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  *(_DWORD *)(v5 + 132),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 148) & 0x800000) == 0) {
      return result;
    }
    goto LABEL_57;
  }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v20 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "EnableHarvestingForLocationSimulation not set to True.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      LOWORD(__p[0]) = 0;
      double v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "EnableHarvestingForLocationSimulation not set to True.",  __p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const",  "%s\n",  v26);
      if (v26 != buf) {
        free(v26);
      }
    }

    return 0LL;
  }

  return v16;
}

    if (*(void *)values) {
      CFRelease(*(CFTypeRef *)values);
    }
    return sub_1002A5590(v28);
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101832E18);
  }
  uint64_t v11 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning,#cts,state,keyNotPresent",  (uint8_t *)buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101832E18);
    }
    LOWORD(v30.__r_.__value_.__l.__data_) = 0;
    LODWORD(v26) = 2;
    int v12 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#Warning,#cts,state,keyNotPresent",  &v30,  v26);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v12);
    if (v12 != buf) {
      free(v12);
    }
  }

  return sub_1002A5590(v28);
}

            unint64_t v25 = *(uint64_t **)(v16 + 8);
            if (v25)
            {
              do
              {
                unint64_t v24 = v25;
                unint64_t v25 = (uint64_t *)*v25;
              }

              while (v25);
            }

            else
            {
              do
              {
                unint64_t v24 = *(uint64_t **)(v16 + 16);
                double v26 = *v24 == v16;
                uint64_t v16 = (uint64_t)v24;
              }

              while (!v26);
            }

            goto LABEL_59;
          }
        }

        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        int v20 = (void *)v11[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = (void *)*v20;
          }

          while (v20);
        }

        else
        {
          do
          {
            uint64_t v21 = (void *)v11[2];
            int64_t v22 = *v21 == (void)v11;
            uint64_t v11 = v21;
          }

          while (!v22);
        }

        uint64_t v11 = v21;
      }

      while (v21 != (void *)(v4 + 48));
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    unint64_t v23 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)unint64_t v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      int v31 = 2114;
      unint64_t v32 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:fetched reset-identifiers, ResetIdentifiers:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    return -[NSMutableSet allObjects](v10, "allObjects");
  }

  else
  {
LABEL_11:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    uint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "No registered clients for kNotificationReset.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      LOWORD(__p[0]) = 0;
      unint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "No registered clients for kNotificationReset.",  __p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSArray *CLClientManager::resetIdentifiersForRegisteredClients()",  "%s\n",  v24);
    }

    return 0LL;
  }

        CFRelease(v26);
        goto LABEL_55;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      LOWORD(v49) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "Invalid back camera serial number data.",  &v49,  2);
      uint64_t v47 = (uint8_t *)v46;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()",  "%s\n",  v46);
      if (v47 != buf) {
        free(v47);
      }
LABEL_103:
      uint64_t v15 = 0LL;
      goto LABEL_63;
    }

    if (CFDataGetLength(v26) == v20)
    {
      int v28 = CFDataGetBytePtr(v26);
      if (v28)
      {
        if (*v24 == *v28)
        {
          uint64_t v29 = 1LL;
          do
          {
            unint64_t v30 = v29;
            if (v20 == v29) {
              break;
            }
            int v31 = v24[v29];
            unint64_t v32 = v28[v29++];
          }

          while (v31 == v32);
          uint64_t v15 = v30 >= v20;
          goto LABEL_63;
        }

        goto LABEL_103;
      }

      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      uint64_t v43 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_FAULT,  "Current serial number data is NULL.",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_88;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      LOWORD(v49) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "Current serial number data is NULL.",  &v49,  2);
      uint64_t v42 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()",  "%s\n",  v48);
      if (v42 == buf)
      {
LABEL_88:
        CFRelease(v2);
        uint64_t v15 = 0LL;
        goto LABEL_54;
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      uint64_t v39 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        __int16 v54 = CFDataGetLength(v26);
        uint64_t v55 = 2048;
        unint64_t v56 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_88;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      int v40 = qword_101934588;
      unint64_t v49 = 134218240;
      int v50 = CFDataGetLength(v26);
      CFStringRef v51 = 2048;
      int v52 = v20;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  17LL,  "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.",  &v49,  22);
      uint64_t v42 = (uint8_t *)v41;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()",  "%s\n",  v41);
      if (v42 == buf) {
        goto LABEL_88;
      }
    }

    free(v42);
    goto LABEL_88;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_101842918);
  }
  unint64_t v14 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Cpas data is NULL.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101842918);
    }
    LOWORD(v49) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning Cpas data is NULL.",  &v49,  2);
    int v45 = (uint8_t *)v44;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()",  "%s\n",  v44);
    if (v45 != buf) {
      free(v45);
    }
  }

  return 0LL;
}

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  v5[19],  a2,  a4);
  char v6 = v5[37];
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

      int v40 = *(double *)(v8 + 64);
      uint64_t v41 = *(double *)(v6 + 64);
      if (v40 == -1.0)
      {
        if (v41 == -1.0)
        {
          *(double *)(v8 + 64) = *(float *)(a1 + 72);
          if (qword_1019347A0 != -1) {
            dispatch_once(&qword_1019347A0, &stru_10184C330);
          }
          CFStringRef v51 = (os_log_s *)qword_1019347A8;
          if (os_log_type_enabled((os_log_t)qword_1019347A8, OS_LOG_TYPE_DEBUG))
          {
            int v52 = *(void *)(v8 + 64);
            *(_DWORD *)buf = 134217984;
            unint64_t v64 = v52;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "No recorded HRMin, computing from body metrics, %f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019347A0 != -1) {
              dispatch_once(&qword_1019347A0, &stru_10184C330);
            }
            uint64_t v53 = *(void *)(v8 + 64);
            *(_DWORD *)dst = 134217984;
            *(void *)&dst[4] = v53;
            __int16 v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347A8,  2LL,  "No recorded HRMin, computing from body metrics, %f",  COERCE_DOUBLE(dst));
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector< CLCyclingSessionSummaryDbRow> &) const",  "%s\n",  v54);
          }

          goto LABEL_61;
        }
      }

      else
      {
        if (v41 == -1.0) {
          goto LABEL_61;
        }
        if (v41 >= v40) {
          uint64_t v41 = *(double *)(v8 + 64);
        }
      }

      *(double *)(v8 + 64) = v41;
LABEL_61:
      if (*(float *)(v6 + 72) > 0.0)
      {
        if (qword_1019347A0 != -1) {
          dispatch_once(&qword_1019347A0, &stru_10184C330);
        }
        uint64_t v42 = (os_log_s *)qword_1019347A8;
        if (os_log_type_enabled((os_log_t)qword_1019347A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          unint64_t v64 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Two sessions with the same UUID, %s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019347A0 != -1) {
            dispatch_once(&qword_1019347A0, &stru_10184C330);
          }
          *(_DWORD *)dst = 136315138;
          *(void *)&dst[4] = v8;
          double v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347A8,  16LL,  "Two sessions with the same UUID, %s",  dst);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CL CyclingSessionSummaryDbRow> &) const",  "%s\n",  v58);
        }

        uint64_t v43 = *(double *)(v8 + 80);
        *(double *)(v8 + 80) = v43;
      }

  if (sub_10088FAF0(v1, "kCLConnectionMessageRegionMonitoringSetupCompleted")
    || sub_10088FAF0(v1, "LocationManager/kCLConnectionMessageRegistration")
    || sub_10088FAF0(v1, "kCLConnectionMessageError")
    || sub_10088FAF0(v1, "kCLConnectionMessageBatch")
    || sub_10088FAF0(v1, "kCLConnectionMessageAutopauseStatus")
    || sub_10088FAF0(v1, "kCLConnectionMessageSignificantLocationVisit")
    || sub_10088FAF0(v1, "kCLConnectionMessageSignificantLocationVisitState")
    || sub_10088FAF0(v1, "kCLConnectionMessageLocationPush"))
  {
    return 1LL;
  }

  return sub_10088FAF0(v1, "kCLConnectionMessageTranscriptSession");
}

  *(_BYTE *)(a1 + 538) |= 4u;
  if ((v26 & 8) == 0)
  {
LABEL_49:
    if ((v26 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_56;
  }

    dispatch_once(&qword_101934850, &stru_1018628A8);
    goto LABEL_42;
  }

  uint64_t v15 = v45;
  *(_OWORD *)__int16 v54 = *((_OWORD *)v45 + 3);
  *(void *)&v54[16] = v45[8];
  if (*((char *)v45 + 95) < 0)
  {
    sub_1010DD48C(&__p, (void *)v45[9], v45[10]);
    uint64_t v15 = v45;
  }

  else
  {
    __p = *(_OWORD *)(v45 + 9);
    unint64_t v56 = v45[11];
  }

  sub_100DD9DDC((uint64_t)v15, v12, (uint64_t)"lister");
  uint64_t v21 = v12 + 184;
  int64_t v22 = sub_100603294((uint64_t **)(v12 + 184), (unsigned int *)v54);
  unint64_t v23 = v45;
  int v45 = 0LL;
  unint64_t v24 = *v22;
  std::__shared_weak_count *v22 = (uint64_t)v23;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018628A8);
  }
  unint64_t v25 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    double v26 = sub_100DD8CC8(v5);
    CFStringRef v27 = sub_1008ADB4C((uint64_t)v54);
    int v28 = sub_1008ADB70((uint64_t)v54);
    uint64_t v29 = sub_100019240(v21);
    *(_DWORD *)buf = 136446979;
    double v58 = v26;
    CFStringRef v59 = 2049;
    int v60 = v27;
    uint64_t v61 = 2049;
    uint64_t v62 = v28;
    uint64_t v63 = 2050;
    unint64_t v64 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018628A8);
    }
    uint64_t v38 = qword_101934858;
    uint64_t v39 = sub_100DD8CC8(v5);
    int v40 = sub_1008ADB4C((uint64_t)v54);
    uint64_t v41 = sub_1008ADB70((uint64_t)v54);
    uint64_t v42 = sub_100019240(v21);
    int v46 = 136446979;
    uint64_t v47 = v39;
    uint64_t v48 = 2049;
    unint64_t v49 = v40;
    int v50 = 2049;
    CFStringRef v51 = v41;
    int v52 = 2050;
    uint64_t v53 = v42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  1LL,  "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu",  &v46,  42);
    CFStringRef v44 = (uint8_t *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<BOOL, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
  }

  sub_1006025CC(v21, (unsigned int *)v54);
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)__p);
  }
  int v20 = 1LL;
LABEL_38:
  unint64_t v30 = v45;
  int v45 = 0LL;
  if (v30) {
    (*(void (**)(uint64_t *))(*v30 + 8))(v30);
  }
  return v20;
}

  uint64_t v65 = *v12 + (unint64_t)v12[1] - 1;
  double v66 = *((unsigned int *)v12 + 1);
  if (v65 < v66) {
    double v66 = 0LL;
  }
  CFStringRef v67 = (float32x2_t *)&v14[16 * (v65 - v66)];
  BOOL v68 = v67[3].f32[0] / v80;
  BOOL v85 = vdiv_f32(v67[2], v29);
  CFStringRef v86 = v68;
  unint64_t v69 = *v7 + (unint64_t)v7[1] - 1;
  uint64_t v70 = *((unsigned int *)v7 + 1);
  if (v69 < v70) {
    uint64_t v70 = 0LL;
  }
  int v71 = (float32x2_t *)(v24 + 32 * (v69 - v70));
  uint64_t v72 = v71[3].f32[0] / v80;
  int v83 = vdiv_f32(v71[2], v29);
  v84 = v72;
  double result = sub_100DEA678((float *)&v85, (float *)&v83, 0.017453);
  if (result) {
    goto LABEL_59;
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  (int)a2,  *(double *)(v5 + 152),  a3);
  if ((*(_DWORD *)(v5 + 172) & 0x400000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  *(_DWORD *)(v5 + 164),  (int)a2,  a4);
  }
  return result;
}

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_112;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v29 = *(void *)(a1 + 64);
    if (!v29) {
      uint64_t v29 = *(void *)(qword_1019A1D38 + 64);
    }
    unint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC1668(v29, a2);
    int v31 = (int)v30;
    else {
      unint64_t v32 = 1;
    }
    v4 += v31 + v32 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x200) == 0)
    {
LABEL_57:
      if ((v3 & 0x400) == 0) {
        goto LABEL_58;
      }
      goto LABEL_76;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_57;
  }

  double v33 = *(void *)(a1 + 72);
  if (!v33) {
    double v33 = *(void *)(qword_1019A1D38 + 72);
  }
  double v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC1F54(v33, a2);
  int v35 = (int)v34;
  else {
    int v36 = 1;
  }
  v4 += v35 + v36 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x400) == 0)
  {
LABEL_58:
    if ((v3 & 0x800) == 0) {
      goto LABEL_59;
    }
    goto LABEL_82;
  }

    if (a2 != v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
    }
    goto LABEL_61;
  }

  if (a2 <= 2009)
  {
    if (a2 <= 0x38)
    {
      if (((1LL << a2) & 0x2000000029FLL) != 0) {
        goto LABEL_61;
      }
      if (((1LL << a2) & 0x110000000000C60LL) != 0)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 577) = 1;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 576) = 1;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
      }

      if (a2 == 8LL)
      {
LABEL_57:
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 577) = 1;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 576) = 0;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
      }
    }

    uint64_t v8 = 1LL << (a2 - 61);
    int v9 = 0x800000043FLL;
    goto LABEL_60;
  }

  if ((a2 - 2010) <= 0x3D && ((1LL << (a2 + 38)) & 0x2488004000005401LL) != 0
    || (a2 - 2101) <= 0x31 && ((1LL << (a2 - 53)) & 0x2000000000011LL) != 0
    || (a2 - 3015) < 2)
  {
    goto LABEL_61;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

    dispatch_once(&qword_1019344D0, &stru_10188EF48);
    goto LABEL_39;
  }

  return result;
}

  uint64_t v55 = v109;
  if (v109)
  {
    unint64_t v56 = (unint64_t *)&v109->__shared_owners_;
    do
      BOOL v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }

  int v9 = 1;
LABEL_55:
  uint64_t v11 = *(unsigned __int8 *)(a2 + 13);
  int v12 = *(unsigned __int8 *)(a2 + 14);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 15);
  switch(*(_BYTE *)(a2 + 13))
  {
    case 1:
      unint64_t v14 = "Portrait";
      break;
    case 2:
      unint64_t v14 = "PortraitUpsideDown";
      break;
    case 3:
      unint64_t v14 = "LandscapeLeft";
      break;
    case 4:
      unint64_t v14 = "LandscapeRight";
      break;
    case 5:
      unint64_t v14 = "FaceUp";
      break;
    case 6:
      unint64_t v14 = "FaceDown";
      break;
    case 7:
      sub_10127D52C((uint64_t)&OBJC_CLASS___NSString, v3, v4);
    default:
      unint64_t v14 = "Ambiguous";
      break;
  }

  switch(*(_BYTE *)(a2 + 14))
  {
    case 1:
      uint64_t v15 = "Portrait";
      break;
    case 2:
      uint64_t v15 = "PortraitUpsideDown";
      break;
    case 3:
      uint64_t v15 = "LandscapeLeft";
      break;
    case 4:
      uint64_t v15 = "LandscapeRight";
      break;
    case 5:
      uint64_t v15 = "FaceUp";
      break;
    case 6:
      uint64_t v15 = "FaceDown";
      break;
    case 7:
      sub_10127D52C((uint64_t)&OBJC_CLASS___NSString, v3, v4);
    default:
      uint64_t v15 = "Ambiguous";
      break;
  }

  *(double *)&uint64_t v16 = COERCE_DOUBLE( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%sTo%s",  v14,  v15));
  uint64_t v17 = (unsigned __int128)(*(uint64_t *)(a2 + 5) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (qword_101934520 != -1) {
    dispatch_once(&qword_101934520, &stru_101892498);
  }
  int v18 = Current * 1000000.0;
  CFStringRef v19 = (v17 >> 18) + ((unint64_t)v17 >> 63);
  int v20 = (os_log_s *)qword_101934528;
  uint64_t v21 = os_log_type_enabled((os_log_t)qword_101934528, OS_LOG_TYPE_DEBUG);
  if (v21)
  {
    switch(*(_BYTE *)(a2 + 13))
    {
      case 1:
        unint64_t v24 = "Portrait";
        break;
      case 2:
        unint64_t v24 = "PortraitUpsideDown";
        break;
      case 3:
        unint64_t v24 = "LandscapeLeft";
        break;
      case 4:
        unint64_t v24 = "LandscapeRight";
        break;
      case 5:
        unint64_t v24 = "FaceUp";
        break;
      case 6:
        unint64_t v24 = "FaceDown";
        break;
      case 7:
        sub_10127D52C(v21, v22, v23);
      default:
        unint64_t v24 = "Ambiguous";
        break;
    }

    switch(*(_BYTE *)(a2 + 14))
    {
      case 1:
        unint64_t v25 = "Portrait";
        break;
      case 2:
        unint64_t v25 = "PortraitUpsideDown";
        break;
      case 3:
        unint64_t v25 = "LandscapeLeft";
        break;
      case 4:
        unint64_t v25 = "LandscapeRight";
        break;
      case 5:
        unint64_t v25 = "FaceUp";
        break;
      case 6:
        unint64_t v25 = "FaceDown";
        break;
      case 7:
        sub_10127D52C(v21, v22, v23);
      default:
        unint64_t v25 = "Ambiguous";
        break;
    }

    double v26 = *(unsigned __int8 *)(a2 + 16);
    *(_DWORD *)buf = 136316674;
    uint64_t v65 = v24;
    double v66 = 2080;
    CFStringRef v67 = v25;
    BOOL v68 = 1024;
    unint64_t v69 = v13;
    uint64_t v70 = 1024;
    int v71 = v26;
    uint64_t v72 = 2048;
    unint64_t v73 = v19;
    uint64_t v74 = 1024;
    unint64_t v75 = v9;
    unint64_t v76 = 2048;
    CFStringRef v77 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "[CLOrientationStatisticsRecorder] fromOrientation: %s, toOrientation: %s, displayState: %u, isAPAwake: %u, timeSin ceLastOrientationChange: %llu, generalMotionState: %u, timestamp: %.3f",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934520 != -1) {
      dispatch_once(&qword_101934520, &stru_101892498);
    }
    unint64_t v30 = qword_101934528;
    int v31 = sub_100FC0C60(*(unsigned __int8 *)(a2 + 13), v28, v29);
    double v34 = sub_100FC0C60(*(unsigned __int8 *)(a2 + 14), v32, v33);
    int v35 = *(unsigned __int8 *)(a2 + 16);
    int v50 = 136316674;
    CFStringRef v51 = v31;
    int v52 = 2080;
    uint64_t v53 = v34;
    __int16 v54 = 1024;
    uint64_t v55 = v13;
    unint64_t v56 = 1024;
    BOOL v57 = v35;
    double v58 = 2048;
    CFStringRef v59 = v19;
    int v60 = 1024;
    uint64_t v61 = v9;
    uint64_t v62 = 2048;
    uint64_t v63 = v18;
    LODWORD(v37) = 60;
    int v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  2LL,  "[CLOrientationStatisticsRecorder] fromOrientation: %s, toOrientation: %s, displayState: %u, isAPAwak e: %u, timeSinceLastOrientationChange: %llu, generalMotionState: %u, timestamp: %.3f",  (const char *)&v50,  v37,  (_DWORD)v38,  v39,  v40,  (_DWORD)v41,  v42);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOrientationStatisticsLogger::feedOrientationStatistics(const OrientationStatistics &)",  "%s\n",  v36);
  }

  uint64_t v38 = _NSConcreteStackBlock;
  uint64_t v39 = 3221225472LL;
  int v40 = sub_100FC0CE4;
  uint64_t v41 = &unk_101892478;
  uint64_t v43 = v18;
  int v46 = v11;
  uint64_t v47 = v12;
  CFStringRef v44 = a2;
  int v45 = v19;
  uint64_t v48 = v13;
  unint64_t v49 = v9;
  uint64_t v42 = *(double *)&v16;
  return AnalyticsSendEventLazy(@"com.apple.CoreMotion.DeviceOrientationChanged", &v38);
}

  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 76));
  unsigned int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 136), 0x10u);
  char v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }

  int v12 = *(void *)(a2 + 344);
  v5 |= 0x40000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 344) = v12;
  char v4 = *v3;
  if ((*v3 & 0x10000000000LL) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfHighFrequencyFFT", *(void *)(a1 + 56));
  char v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 328), 0x2Fu);
  unsigned int v5 = *v4;
  if ((*v4 & 0x20000000000LL) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }

  int v12 = *(_BYTE *)(a2 + 154);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 154) = v12;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "nominalQuiescentThreshold", *(_DWORD *)(a1 + 76));
  unsigned int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 153), 0x11u);
  char v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }

  uint64_t v29 = *(void *)(a2 + 344);
  v10 |= 0x8000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 344) = v29;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "accelPathLengthWithPeak", *(float *)(a1 + 40));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 88), 4u);
  char v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000000LL) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000LL) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }

        *(_DWORD *)(a1 + 40) = v27;
        goto LABEL_55;
      case 3u:
        unint64_t v30 = operator new(0x18uLL);
        sub_101103644((uint64_t)v30);
        double v33 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v30;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
          unint64_t v30 = *(void **)(a1 + 24);
        }

        goto LABEL_40;
      case 4u:
        unint64_t v30 = operator new(0x18uLL);
        sub_101103644((uint64_t)v30);
        double v34 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v30;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
          unint64_t v30 = *(void **)(a1 + 8);
        }

        goto LABEL_40;
      case 5u:
        unint64_t v30 = operator new(0x18uLL);
        sub_101103644((uint64_t)v30);
        int v35 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v30;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
          unint64_t v30 = *(void **)(a1 + 16);
        }

  double v26 = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 212) |= 0x1000000u;
  *(_DWORD *)(a1 + 192) = v26;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x20) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "martyIsBicycle", *(_BYTE *)(a1 + 210));
  int v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0xEu);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  double result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 16) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "rmsClipSum", *(float *)(a1 + 80));
  unsigned int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 8), 0x19u);
  char v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }

  double result = *(float *)(a2 + 100);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 100) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 40));
  unsigned int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x17u);
  char v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  double v26 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 132) = v3;
  *(void *)(result + 16) = v26;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "transitionBaseDuration", *(float *)(a1 + 100));
  unsigned int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 0xD1u);
  char v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }

  int64_t v22 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 56) = v22;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "metaCountOfSigImpact", *(_DWORD *)(a1 + 116));
  unsigned int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x14u);
  char v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  char v6 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 124) = v6;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet", *(_BYTE *)(a1 + 159));
  unsigned int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 132), 7u);
  char v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 128) = v7;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "heartRateConfidence", *(float *)(a1 + 80));
  unsigned int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 124), 0xFu);
  char v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "signalRateTriggerThresholdNCounts", *(float *)(a1 + 112));
  unsigned int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000000) != 0) {
    goto LABEL_55;
  }
LABEL_27:
  if ((v5 & 1) != 0) {
LABEL_28:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x1Au);
  if ((*(_DWORD *)(v3 + 120) & 0x40000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x1Bu);
  }
  return result;
}

  uint64_t v21 = *(_DWORD *)(a2 + 132);
  v3 |= 0x4000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 132) = v21;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "pearlSessionType", *(_DWORD *)(a1 + 100));
  unsigned int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x13u);
  char v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "right_eye_x", *(float *)(a1 + 104));
  unsigned int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0x16u);
  char v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 124);
  v3 |= 0x20000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 124) = v15;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "planarEnergyAtMaxChaos", *(float *)(a1 + 128));
  unsigned int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 132), 0xDu);
  char v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }

  double result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 176) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMean", *(double *)(a1 + 176));
  unsigned int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 184), 0x17u);
  char v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 177);
  v3 |= 0x10000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 177) = v7;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000LL) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "cycleTimePoincareSD1", *(float *)(a1 + 52));
  unsigned int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 120), 8u);
  char v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000000LL) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }

  int v28 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 40) = v28;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0) {
      return result;
    }
LABEL_56:
    unint64_t v30 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(result + 116) = v3 | 0x2000;
    *(_DWORD *)(result + 80) = v30;
    return result;
  }

  PB::TextFormatter::format(this, "workoutDetectionTime", *(double *)(a1 + 32));
  unsigned int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) != 0) {
    goto LABEL_55;
  }
LABEL_27:
  if ((v5 & 0x10) != 0) {
LABEL_28:
  }
    PB::TextFormatter::format(this, "workoutEscalationTime", *(void *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x1Au);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x1Bu);
  }
  return result;
}

  double v33 = *(void *)(a2 + 32);
  v5 |= 8u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 32) = v33;
  char v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x16u);
  char v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  unint64_t v23 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 40) = v23;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "rawUndulation", *(double *)(a1 + 112));
  unsigned int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x15u);
  char v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  int64_t v22 = *(_DWORD *)(a2 + 136);
  v5 |= 0x1000000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 136) = v22;
  char v4 = *(void *)(a2 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 100));
  unsigned int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0xCu);
  char v4 = *(void *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 108), 3u);
  char v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }

  unint64_t v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v23;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 126), 0x15u);
  char v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "qHat_Y", *(float *)(a1 + 100));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 192);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 192) = v13;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 72));
  unsigned int v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 104), 0x12u);
  char v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

  CFStringRef v27 = *(void *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 104) = v27;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }

  PB::TextFormatter::format(this, "odometerQuality", *(_DWORD *)(a1 + 176));
  unsigned int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 112), 0x19u);
  char v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }

LABEL_68:
  int v40 = &xmmword_1019A0A38;
  uint64_t v41 = byte_1019A0A4F;
  if (byte_1019A0A4F >= 0) {
    uint64_t v42 = byte_1019A0A4F;
  }
  else {
    uint64_t v42 = *((void *)&xmmword_1019A0A38 + 1);
  }
  if (v42 != v13) {
    goto LABEL_151;
  }
  if (v12 >= 0) {
    uint64_t v43 = a2;
  }
  else {
    uint64_t v43 = *(unsigned __int8 **)a2;
  }
  if (byte_1019A0A4F < 0)
  {
LABEL_129:
    *(_DWORD *)(a1 + 40) = 4;
    goto LABEL_151;
  }

  if (!byte_1019A0A4F) {
    goto LABEL_129;
  }
  while (*(unsigned __int8 *)v40 == *v43)
  {
    int v40 = (__int128 *)((char *)v40 + 1);
    ++v43;
    if (!--v41) {
      goto LABEL_129;
    }
  }

    unint64_t v76 = 0u;
    CFStringRef v77 = 0u;
    int v78 = 1065353216;
    while (v66)
    {
      int v40 = *(_OWORD *)(v64 + 7);
      *(_OWORD *)__p = *(_OWORD *)(v64 + 5);
      unint64_t v75 = v40;
      sub_10009B860((uint64_t)&v76, __p, __p);
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
      int v60 = (uint64_t *)&v61;
      uint64_t v41 = v64;
      v73[0] = &v60;
      v73[1] = &v61;
      if (v64 == (uint64_t *)&v65)
      {
        unint64_t v49 = 0LL;
        uint64_t v47 = 0LL;
        uint64_t v48 = (uint64_t *)&v61;
        int v46 = (uint64_t *)&v65;
      }

      else
      {
        do
        {
          if (((void *)v41[5] != __p[0] || (void *)v41[6] != __p[1])
            && (v41[7] != (void)v75 || v41[8] != *((void *)&v75 + 1)))
          {
            sub_10009BB4C((uint64_t)v73, (uint64_t)(v41 + 4));
          }

          CFStringRef v44 = (uint64_t *)v41[1];
          if (v44)
          {
            do
            {
              int v45 = v44;
              CFStringRef v44 = (uint64_t *)*v44;
            }

            while (v44);
          }

          else
          {
            do
            {
              int v45 = (uint64_t *)v41[2];
              int v36 = *v45 == (void)v41;
              uint64_t v41 = v45;
            }

            while (!v36);
          }

          uint64_t v41 = v45;
        }

        while (v45 != (uint64_t *)&v65);
        int v46 = v64;
        uint64_t v48 = v60;
        uint64_t v47 = v61;
        unint64_t v49 = v62;
      }

      int v50 = v65;
      CFStringRef v51 = v66;
      unint64_t v64 = v48;
      uint64_t v65 = v47;
      int v60 = v46;
      uint64_t v61 = v50;
      double v66 = v49;
      uint64_t v62 = v51;
      int v52 = (uint64_t **)(v47 + 2);
      if (v49) {
        uint64_t v53 = v52;
      }
      else {
        uint64_t v53 = &v64;
      }
      void *v53 = (uint64_t *)&v65;
      __int16 v54 = (uint64_t **)(v50 + 2);
      if (!v51) {
        __int16 v54 = &v60;
      }
      std::__shared_weak_count *v54 = (uint64_t *)&v61;
      sub_100008390((uint64_t)&v60, v50);
    }

    sub_100097D84((void *)a1, &v76);
    sub_100019CEC((uint64_t)&v76);
    uint64_t v55 = (__int128 *)*((void *)&v82 + 1);
    if (*((__int128 **)&v82 + 1) == &v81)
    {
      unint64_t v56 = 4LL;
      uint64_t v55 = &v81;
    }

    else
    {
      if (!*((void *)&v82 + 1))
      {
LABEL_98:
        sub_1002A5554(v63);
        sub_100008390((uint64_t)&v64, v65);
        goto LABEL_99;
      }

      unint64_t v56 = 5LL;
    }

    (*(void (**)(void))(*(void *)v55 + 8 * v56))();
    goto LABEL_98;
  }

      sub_1000165E8(a3, (uint64_t)v48, *(__int128 **)(a3 + 8));
      sub_100019CEC((uint64_t)buf);
    }

    sub_1002F0B04(buf);
    uint64_t v55 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
    unint64_t v56 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v55, &v176);
    CFRelease(v55);
    BOOL v57 = v176;
    double v58 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      CFStringRef v59 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        int v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }

    if (v56) {
      uint64_t v61 = v57;
    }
    else {
      uint64_t v61 = 1;
    }
    sub_10001A504((uint64_t)v181, a4);
    uint64_t v62 = (uint64_t)v184;
    if (!v184) {
      goto LABEL_80;
    }
    if (v184 != v183)
    {
      uint64_t v62 = (*(uint64_t (**)(void))(*v184 + 16LL))();
LABEL_80:
      v180 = (void *)v62;
      goto LABEL_82;
    }

    v180 = v179;
    (*(void (**)(uint64_t, void *))(v183[0] + 24LL))((uint64_t)v183, v179);
LABEL_82:
    sub_1000E2848(v61, (uint64_t)v181, (uint64_t)v179, a3, *(void *)(a1 + 8), &v140);
    sub_1000EFC74(&v141, &v140);
    uint64_t v63 = v140;
    uint64_t v140 = 0LL;
    if (v63) {
      (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
    }
    unint64_t v64 = v180;
    if (v180 == v179)
    {
      unint64_t v64 = v179;
      uint64_t v65 = 4LL;
    }

    else
    {
      if (!v180) {
        goto LABEL_89;
      }
      uint64_t v65 = 5LL;
    }

    (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_89:
    double v66 = v182;
    if (v182 == v181)
    {
      double v66 = v181;
      CFStringRef v67 = 4LL;
    }

    else
    {
      if (!v182) {
        goto LABEL_94;
      }
      CFStringRef v67 = 5LL;
    }

    (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_94:
    if (!(_DWORD)v43)
    {
      BOOL v68 = sub_1000EFCD4(&v141);
      char v125 = sub_1000EFCD4(&v141);
      v133 = v68;
    }

    if (!v132) {
      char v132 = sub_100116088(&v141);
    }
    unint64_t v69 = sub_1000EFCD4(&v141);
    uint64_t v70 = v69;
    int v71 = v171;
    if (v171 >= v172)
    {
      unint64_t v73 = (char *)v170;
      uint64_t v74 = (v171 - (_BYTE *)v170) >> 3;
      unint64_t v75 = v74 + 1;
      unint64_t v76 = v172 - (_BYTE *)v170;
      if ((v172 - (_BYTE *)v170) >> 2 > v75) {
        unint64_t v75 = v76 >> 2;
      }
      else {
        CFStringRef v77 = v75;
      }
      if (v77)
      {
        int v78 = (char *)sub_1000071BC((uint64_t)&v172, v77);
        int v71 = v171;
        unint64_t v73 = (char *)v170;
      }

      else
      {
        int v78 = 0LL;
      }

      int v79 = (uint64_t *)&v78[8 * v74];
      *int v79 = v70;
      uint64_t v72 = (char *)(v79 + 1);
      while (v71 != v73)
      {
        v80 = *((void *)v71 - 1);
        v71 -= 8;
        *--int v79 = v80;
      }

      v170 = v79;
      v171 = v72;
      v172 = &v78[8 * v77];
      if (v73) {
        operator delete(v73);
      }
    }

    else
    {
      *(void *)v171 = v69;
      uint64_t v72 = v71 + 8;
    }

    v171 = v72;
    v81 = *(void *)(a4 + 24);
    if (!v81) {
      sub_100008BDC();
    }
    if (sub_1000EFCE4(&v141))
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CBC8);
      }
      int v111 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = a11;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "#Warning Fingerprint vector empty for model type %d at iteration %d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CBC8);
        }
        LODWORD(v176) = 67109376;
        HIDWORD(v176) = a11;
        LOWORD(v177[0]) = 1024;
        *(_DWORD *)((char *)v177 + 2) = v43;
        v118 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Fingerprint vector empty for model type %d at iteration %d",  &v176,  14);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationModel> CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictiona ry *, std::vector<CLMicroLocationRecordingEventsTable::Entry> &, const CLMicroLocationLearner::ShouldCancelFun ction &, const CLMicroLocationAnchorAppearanceMap &, CLMicroLocationFingerprintPool &, cl::chrono::CFAbsoluteT imeClock::time_point, const boost::uuids::uuid &, const std::optional<CLMicroLocationModelTable::Entry> &, con st CLMicroLocationProto::Model::ModelType)",  "%s\n",  v118);
        if (v118 != buf) {
          free(v118);
        }
      }

      goto LABEL_207;
    }

    if (v129)
    {
      if ((_DWORD)v43) {
        sub_100090B04(v129, (uint64_t *)&v170, v43);
      }
      else {
        sub_10008EC40((uint64_t)v129, &v141, 0LL, 0, v174);
      }
    }

    if (sub_100097CA8((uint64_t)&v157))
    {
      if ((v134 & 1) != 0) {
        unint64_t v82 = 1LL;
      }
      else {
        unint64_t v82 = sub_1000954B4((uint64_t)&v157);
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v173 + 16LL))( buf,  v173,  &v141,  a11,  v82,  a5,  a6,  v133);
      v142 = *(_OWORD *)buf;
      v144 = *(_DWORD *)v186;
      sub_1000193A0(v143, *(uint64_t **)&buf[32], 0LL);
      v145 = v188;
      sub_1000A88FC((uint64_t)v146, (uint64_t)v189);
      *(_OWORD *)v147 = v190[0];
      *(_OWORD *)&v147[12] = *(_OWORD *)((char *)v190 + 12);
      sub_1000A8A0C((void **)&v148);
      v148 = v191;
      v149 = v192;
      v192 = 0LL;
      v191 = 0uLL;
      sub_1000A8A68((uint64_t)v150, v193);
      v152 = v194;
      if ((void)v153)
      {
        *((void *)&v153 + 1) = v153;
        operator delete((void *)v153);
      }

      v153 = v195;
      v154 = v196;
      v196 = 0LL;
      v195 = 0uLL;
      if (SHIBYTE(v156) < 0)
      {
        operator delete((void *)v155);
        v155 = v197;
        v156 = v198;
        HIBYTE(v198) = 0;
        LOBYTE(v197) = 0;
        if ((void)v195)
        {
          *((void *)&v195 + 1) = v195;
          operator delete((void *)v195);
        }
      }

      else
      {
        v155 = v197;
        v156 = v198;
        HIBYTE(v198) = 0;
        LOBYTE(v197) = 0;
      }

      sub_100019B90((uint64_t)v193);
      v176 = &v191;
      sub_100019C0C((void ***)&v176);
      sub_100019C7C((uint64_t)v189);
      sub_100019CEC((uint64_t)&buf[16]);
      int v83 = sub_1000954B4((uint64_t)&v142);
      *(void *)buf = &v157;
      uint8_t buf[8] = 1;
      sub_100098C2C((uint64_t *)&v142, (uint64_t)buf, v134, v129);
      sub_10009773C(&v142, (uint64_t)&v176);
      sub_10009773C(&v157, (uint64_t)&v138);
      v84 = (void *)*((void *)&v139 + 1);
      if (*((void *)&v139 + 1))
      {
        while (sub_10004ACA4(&v176, v84 + 2))
        {
          v84 = (void *)*v84;
          if (!v84) {
            goto LABEL_141;
          }
        }

        sub_100019CEC((uint64_t)&v138);
        if ((v134 & 1) == 0)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v173 + 16LL))( buf,  v173,  &v141,  a11,  1LL,  a5,  a6,  v133);
          v142 = *(_OWORD *)buf;
          v144 = *(_DWORD *)v186;
          sub_1000193A0(v143, *(uint64_t **)&buf[32], 0LL);
          v145 = v188;
          sub_1000A88FC((uint64_t)v146, (uint64_t)v189);
          *(_OWORD *)v147 = v190[0];
          *(_OWORD *)&v147[12] = *(_OWORD *)((char *)v190 + 12);
          sub_1000A8A0C((void **)&v148);
          v148 = v191;
          v149 = v192;
          v192 = 0LL;
          v191 = 0uLL;
          sub_1000A8A68((uint64_t)v150, v193);
          v152 = v194;
          if ((void)v153)
          {
            *((void *)&v153 + 1) = v153;
            operator delete((void *)v153);
          }

          v153 = v195;
          v154 = v196;
          v196 = 0LL;
          v195 = 0uLL;
          if (SHIBYTE(v156) < 0)
          {
            operator delete((void *)v155);
            v155 = v197;
            v156 = v198;
            HIBYTE(v198) = 0;
            LOBYTE(v197) = 0;
            if ((void)v195)
            {
              *((void *)&v195 + 1) = v195;
              operator delete((void *)v195);
            }
          }

          else
          {
            v155 = v197;
            v156 = v198;
            HIBYTE(v198) = 0;
            LOBYTE(v197) = 0;
          }

          sub_100019B90((uint64_t)v193);
          v138 = &v191;
          sub_100019C0C((void ***)&v138);
          sub_100019C7C((uint64_t)v189);
          sub_100019CEC((uint64_t)&buf[16]);
          int v83 = sub_1000954B4((uint64_t)&v142);
          *(void *)buf = &v157;
          uint8_t buf[8] = 1;
          sub_100098C2C((uint64_t *)&v142, (uint64_t)buf, 0, v129);
        }
      }

      else
      {
LABEL_141:
        sub_100019CEC((uint64_t)&v138);
      }

      sub_100019CEC((uint64_t)&v176);
    }

    else
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v173 + 16LL))( buf,  v173,  &v141,  a11,  1LL,  a5,  a6,  v133);
      v142 = *(_OWORD *)buf;
      v144 = *(_DWORD *)v186;
      sub_1000193A0(v143, *(uint64_t **)&buf[32], 0LL);
      v145 = v188;
      sub_1000A88FC((uint64_t)v146, (uint64_t)v189);
      *(_OWORD *)v147 = v190[0];
      *(_OWORD *)&v147[12] = *(_OWORD *)((char *)v190 + 12);
      sub_1000A8A0C((void **)&v148);
      v148 = v191;
      v149 = v192;
      v192 = 0LL;
      v191 = 0uLL;
      sub_1000A8A68((uint64_t)v150, v193);
      v152 = v194;
      if ((void)v153)
      {
        *((void *)&v153 + 1) = v153;
        operator delete((void *)v153);
      }

      v153 = v195;
      v154 = v196;
      v196 = 0LL;
      v195 = 0uLL;
      if (SHIBYTE(v156) < 0)
      {
        operator delete((void *)v155);
        v155 = v197;
        v156 = v198;
        HIBYTE(v198) = 0;
        LOBYTE(v197) = 0;
        if ((void)v195)
        {
          *((void *)&v195 + 1) = v195;
          operator delete((void *)v195);
        }
      }

      else
      {
        v155 = v197;
        v156 = v198;
        HIBYTE(v198) = 0;
        LOBYTE(v197) = 0;
      }

      sub_100019B90((uint64_t)v193);
      v176 = &v191;
      sub_100019C0C((void ***)&v176);
      sub_100019C7C((uint64_t)v189);
      sub_100019CEC((uint64_t)&buf[16]);
      int v83 = sub_1000954B4((uint64_t)&v142);
      buf[0] = 0;
      uint8_t buf[8] = 0;
      sub_100098C2C((uint64_t *)&v142, (uint64_t)buf, v134, v129);
    }

    sub_100090DE0(v129, (uint64_t)&v142, v83, v43);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CBC8);
    }
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v85 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v86 = *((void *)&v148 + 1);
        BOOL v87 = v148;
        CFStringRef v88 = sub_1000954B4((uint64_t)&v142);
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2049;
        *(void *)&buf[20] = (v86 - v87) >> 5;
        *(_WORD *)&buf[28] = 2049;
        *(void *)&buf[30] = v88;
        *(_WORD *)&buf[38] = 1025;
        *(_DWORD *)&buf[40] = DWORD1(v142);
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:model, size:%{private}lu, numClusters:%{private}lu, type:%{private}d}",  buf,  0x2Cu);
      }

      uint64_t v90 = (uint64_t *)*((void *)&v148 + 1);
      for (k = (uint64_t *)v148; k != v90; k += 4)
      {
        if (qword_1019348E0 != -1) {
          dispatch_once(&qword_1019348E0, &stru_10181CBE8);
        }
        v91 = (os_log_s *)qword_1019348E8;
        if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEBUG))
        {
          v92 = *k;
          unint64_t v93 = operator new(0x28uLL);
          v176 = v93;
          *(_OWORD *)v177 = xmmword_1012C8460;
          void *v93 = 0u;
          v93[1] = 0u;
          *(void *)((char *)v93 + 29) = 0LL;
          sub_10000AE6C(v92 + 40, v93);
          if (SHIBYTE(v177[1]) >= 0) {
            v94 = &v176;
          }
          else {
            v94 = v176;
          }
          BOOL v95 = operator new(0x28uLL);
          v138 = v95;
          __int16 v139 = xmmword_1012C8460;
          void *v95 = 0u;
          v95[1] = 0u;
          *(void *)((char *)v95 + 29) = 0LL;
          sub_10000AE6C((uint64_t)(k + 2), v95);
          if (v139 >= 0) {
            double v96 = &v138;
          }
          else {
            double v96 = v138;
          }
          v97 = *k;
          v98 = *(void *)(*k + 24);
          v175 = 1;
          v99 = sub_10001A29C((void *)(v97 + 104), &v175);
          if (v99) {
            unint64_t v100 = *((double *)v99 + 4) - *((double *)v99 + 3);
          }
          else {
            unint64_t v100 = 0.0;
          }
          CFStringRef v101 = *(double *)(*k + 152);
          int v102 = (int)*(double *)(*k + 144);
          *(_DWORD *)buf = 68290563;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&_BYTE buf[18] = 2081;
          *(void *)&buf[20] = v94;
          *(_WORD *)&buf[28] = 2081;
          *(void *)&buf[30] = v96;
          *(_WORD *)&buf[38] = 2049;
          *(void *)&buf[40] = v98;
          *(_WORD *)v186 = 1025;
          *(_DWORD *)&v186[2] = (int)v100;
          v187 = 1025;
          LODWORD(v188) = v102;
          WORD2(v188) = 1025;
          *(_DWORD *)((char *)&v188 + 6) = (int)v101;
          _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:modelFingerprint, recordingUUID:%{private, location:escape_only}s, clusterUUI D:%{private, location:escape_only}s, size:%{private}lu, duration:%{private}d, start:%{private} d, end:%{private}d}",  buf,  0x42u);
          if (SHIBYTE(v139) < 0) {
            operator delete(v138);
          }
          if (SHIBYTE(v177[1]) < 0) {
            operator delete(v176);
          }
        }
      }
    }

    v103 = v141;
    __int16 v141 = 0LL;
    if (v103) {
      (*(void (**)(uint64_t))(*(void *)v103 + 8LL))(v103);
    }
    uint64_t v43 = (v43 + 1);
    a8 = v126;
    if ((_DWORD)v43 == (_DWORD)v131) {
      goto LABEL_180;
    }
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CBC8);
  }
  uint64_t v110 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = "MicroLocationLearning";
    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:operation cancelled, Activity:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  uint64_t v48 = v54;
  __int16 v54 = 0LL;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  unint64_t v49 = sub_10004B9B4(v15);
  operator delete(v49);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(float *)(v5 + 52),  a3);
  char v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }

    if (v13 == v15)
    {
      double v58 = *--v12;
      uint64_t v13 = v58 + 3952;
    }

    v13 -= 152LL;
    uint64_t v8 = a1[23];
    uint64_t v10 = a1[20];
    uint64_t v11 = a1[21];
  }

  CFStringRef v59 = (char *)*a4;
  int v60 = (char *)a4[1];
  uint64_t v61 = v60 - 16;
  uint64_t v62 = *a4 != v60 && v61 > v59;
  if (v62)
  {
    uint64_t v63 = (unint64_t)(v59 + 16);
    do
    {
      unint64_t v64 = *(_OWORD *)(v63 - 16);
      *(_OWORD *)(v63 - 16) = *(_OWORD *)v61;
      *(_OWORD *)uint64_t v61 = v64;
      v61 -= 16;
      uint64_t v65 = v63 >= (unint64_t)v61;
      v63 += 16LL;
    }

    while (!v65);
  }

                v75[v100] = v77[v100] + (float)(v16 * v79[v100]);
                if (!v101) {
                  goto LABEL_75;
                }
                v76[v101] = v78[v101] + (float)(v16 * v80[v101]);
                char v119 = v85 * *(float *)&v103[v100];
                goto LABEL_71;
              }

              if (v91 >= 2)
              {
                v130 = v107;
                v131 = v95;
                char v132 = v80;
                v133 = v78;
                v134 = v94;
                v135 = v81;
                v136 = v116;
                v137 = v115;
                v138 = v113;
                __int16 v139 = v111;
                uint64_t v140 = v110;
                __int16 v141 = v108;
                v142 = v96;
                if (v101 <= v105)
                {
                  v144 = v103 - 2;
                  v145 = *(float *)&v172[v100];
                  v143 = v100;
                }

                else
                {
                  v143 = v100;
                  v144 = v103 - 2;
                  v103[v100 - 2] = 0;
                  v172[v100] = 0;
                  v145 = 0.0;
                }

                v146 = *(float *)&v106[v143];
                v147 = v173[v100];
                *(float *)&v103[v143] = (float)(v87 * v146) - (float)(v147 * *(float *)&v144[v143]);
                void *v118 = (float)((float)(v146 * v88) + (float)(v87 * *(v118 - 1))) - (float)(v147 * v145);
                double v96 = v142;
                v108 = v141;
                uint64_t v110 = v140;
                int v111 = v139;
                __int16 v113 = v138;
                uint64_t v115 = v137;
                v116 = v136;
                v81 = v135;
                v94 = v134;
                int v78 = v133;
                v80 = v132;
                BOOL v95 = v131;
                int v107 = v130;
                unint64_t v49 = v171;
              }
            }
          }

          if (v18 != a10) {
            goto LABEL_68;
          }
          char v119 = v85 * *(float *)&v103[v100];
          if (!v101) {
            goto LABEL_76;
          }
LABEL_71:
          int v120 = v75[v100];
          int v121 = *(float *)&dword_101995100[v101];
          char v122 = v76[v101];
          v123 = *(float *)&v96[v101];
          __int128 v124 = (float)(v122 * v123) + (float)(v120 * v121);
          char v125 = (float)(v120 * v123) - (float)(v122 * v121);
LABEL_77:
          char v127 = *v118;
          v128 = v125 * v94[v101];
          if (v101 == 1 && v73 == 0.0)
          {
            if (v91 == 1)
            {
              v95[1] = v90;
              v129 = *((float *)v95 + 1);
            }

            else
            {
              v129 = (float)(v87 * *(float *)&v95[v107]) - (float)(*v108 * *(float *)&v95[v105]);
              *(float *)&v95[v91] = v129;
            }

            v99 = v99 + (float)(v128 * (float)(v85 * v129));
          }

          unint64_t v93 = v93 + (float)((float)(v124 * v102) * v127);
          v97 = v97 + (float)(v128 * v119);
          v98 = v98 + (float)((float)(v124 * v104) * v119);
          ++v101;
          v100 += 13LL;
          --v109;
          v118 += 13;
        }

        while (v109 > 1);
        ++v81;
        unint64_t v82 = v169 + 1;
        int v83 = v168 + 1;
        ++v91;
        CFStringRef v86 = v167 + 1;
        ++v173;
        ++v75;
        ++v79;
        ++v77;
        v76 += 13;
        v78 += 13;
        v80 += 13;
        uint64_t v74 = v170 + 1;
        v148 = v165;
        if (v166 == v165)
        {
          dword_101994394 = v101;
          a3 = v161;
          a6 = v162;
          uint64_t v17 = (float *)&unk_101995000;
          uint64_t v48 = (float *)&unk_101995000;
          int v50 = (float *)&unk_101995000;
          CFStringRef v51 = (float *)&unk_101995000;
          goto LABEL_93;
        }
      }
    }

    v148 = 1;
    v98 = 0.0;
    unint64_t v93 = 0.0;
    v99 = 0.0;
    v97 = 0.0;
LABEL_93:
    dword_101994390 = v148;
    if (v73 == 0.0) {
      v149 = v99;
    }
    else {
      v149 = v97 / v73;
    }
    v150 = v50[303];
    v151 = v51[304];
    v152 = (float)-(float)(v98 * v151) - (float)(v93 * v150);
    v153 = (float)(v93 * v151) - (float)(v98 * v150);
    v154 = sqrtf((float)(v149 * v149) + (float)(v152 * v152));
    *a5 = sqrtf((float)(v153 * v153) + (float)(v154 * v154));
    *a3 = atan2f(v149, v152) / 0.017453;
    *a4 = atan2f(v153, v154) / 0.017453;
    *a6 = -999.0;
    if (fabsf(a8) >= 55.0)
    {
      v155 = -999.0;
      if (a9 >= 0.0 && a8 > 0.0)
      {
        v155 = *a3 - a9;
        *a6 = v155;
      }

      v156 = fabsf(a9);
      if (a8 > 0.0 && a9 < 0.0)
      {
        v155 = v156 + *a3;
        *a6 = v155;
      }

      if (a9 >= 0.0 && a8 < 0.0)
      {
        v155 = *a3 + a9;
        *a6 = v155;
      }

      if (a8 < 0.0 && a9 < 0.0)
      {
        v155 = *a3 - v156;
        *a6 = v155;
      }

      if (v155 > 180.0)
      {
        v155 = v155 + -360.0;
LABEL_112:
        if (v155 < -180.0) {
          v155 = v155 + 360.0;
        }
        *a6 = v155;
        goto LABEL_115;
      }

      if (v155 < -180.0) {
        goto LABEL_112;
      }
    }

  unint64_t v30 = *(_DWORD *)(a2 + 88);
  a1[37] |= 0x100000u;
  a1[22] = v30;
  unsigned int v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }

        if (v10 == v51) {
          return result;
        }
        while (1)
        {
          __int16 v54 = *a2;
          while (1)
          {
            uint64_t v55 = *v10;
            if (v54 < *v10) {
              break;
            }
            if ((char *)++v10 - (char *)v47 == 4096)
            {
              unint64_t v56 = result[1];
              ++result;
              uint64_t v47 = v56;
              uint64_t v10 = v56;
            }
          }

          do
          {
            if (v51 == v48)
            {
              BOOL v57 = *--v49;
              uint64_t v48 = v57;
              CFStringRef v51 = v57 + 1024;
            }

            double v58 = *--v51;
            CFStringRef v59 = v58;
          }

          while (v54 < v58);
          if (result >= v49 && (result != v49 || v10 >= v51)) {
            break;
          }
          *v10++ = v59;
          *CFStringRef v51 = v55;
          if ((char *)v10 - (char *)v47 == 4096)
          {
            int v60 = result[1];
            ++result;
            uint64_t v47 = v60;
            uint64_t v10 = v60;
          }
        }

        if (result > a3 || v10 > a4 && result == a3) {
          return result;
        }
        uint64_t v70 = result;
        int v71 = v10;
        a2 = v10;
      }
    }

    while (v6 != a4);
  }

  return result;
}

    double v33 = 0LL;
    *(_BYTE *)a5 = 1;
    goto LABEL_69;
  }

  double v33 = 1LL;
LABEL_69:
  if (__p)
  {
    uint64_t v43 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v45)
  {
    int v46 = (double ****)v45;
    operator delete(v45);
  }

  if (v48)
  {
    unint64_t v49 = (double ****)v48;
    operator delete(v48);
  }

  return v33;
}

    double v34 = 0LL;
    *(_BYTE *)a5 = 1;
    goto LABEL_69;
  }

  double v34 = 1LL;
LABEL_69:
  if (__p)
  {
    CFStringRef v44 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v46)
  {
    uint64_t v47 = (double ****)v46;
    operator delete(v46);
  }

  if (v49)
  {
    int v50 = (double ****)v49;
    operator delete(v49);
  }

  return v34;
}

      if (!IOObjectRelease(v15)) {
        uint64_t v15 = IOIteratorNext(iterator);
      }
      if (!v15) {
        goto LABEL_100;
      }
    }
  }

  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  uint64_t v11 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
  {
    int v12 = (void *)(a1 + 120);
    *(_DWORD *)buf = 136446466;
    CFStringRef v67 = v12;
    BOOL v68 = 1026;
    LODWORD(v69) = ChildIterator;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] IORegistryEntryGetChildIterator failed 0x%{public}0x",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v13 = (void *)(a1 + 120);
    *(_DWORD *)name = 136446466;
    *(void *)&name[4] = v13;
    *(_WORD *)&name[12] = 1026;
    *(_DWORD *)&name[14] = ChildIterator;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] IORegistryEntryGetChildIterator failed 0x%{public}0x",  name,  18);
    int v9 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)",  "%s\n",  v14);
    goto LABEL_113;
  }

  if (!v40 && a1[22] && a1[19])
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866538);
    }
    double v33 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "Fence: first fence added, enable download timer",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866538);
      }
      *(_WORD *)__dst = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: first fence added, enable download timer",  __dst,  v39);
      uint64_t v38 = (std::stringbuf::string_type *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    sub_1006B6014(a1[19], Current + 43200.0);
  }

  sub_1009D7068((uint64_t)a1);
  objc_autoreleasePoolPop(context);
}

  if (v57)
  {
    double v58 = v57;
    operator delete(v57);
  }

  char v6 = v59;
  if (v59)
  {
LABEL_71:
    int v60 = v6;
    operator delete(v6);
  }

  return v39;
}

    if ((_DWORD)result == v6) {
      return result;
    }
    goto LABEL_71;
  }

  if ((int)result > 15254)
  {
    if ((int)result <= 15459)
    {
      char v6 = 15255;
    }

    else
    {
      if ((int)result <= 15591)
      {
        if ((_DWORD)result == 15460) {
          return result;
        }
        if ((_DWORD)result == 15560) {
          return 15562LL;
        }
        goto LABEL_71;
      }

      if ((_DWORD)result == 15592 || (_DWORD)result == 15610) {
        return result;
      }
      char v6 = 15620;
    }

    goto LABEL_68;
  }

  if ((int)result <= 15099)
  {
    if ((int)result > 15029)
    {
      if ((_DWORD)result == 15030) {
        return result;
      }
      char v6 = 15055;
    }

    else
    {
      if ((_DWORD)result == 11805) {
        return result;
      }
      char v6 = 12150;
    }

    goto LABEL_68;
  }

  if ((result - 15100) <= 0x32 && ((1LL << (result + 4)) & 0x4000000000401LL) != 0
    || (_DWORD)result == 15230)
  {
    return result;
  }

  if ((_DWORD)result == 15250) {
    return 15240LL;
  }
LABEL_71:
  if (qword_101934910 != -1) {
    dispatch_once(&qword_101934910, &stru_10188FD60);
  }
  uint64_t v7 = (os_log_s *)qword_101934918;
  if (os_log_type_enabled((os_log_t)qword_101934918, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *a1;
    *(_DWORD *)buf = 67240192;
    unint64_t v14 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Received unhandled motion activity type: %{public}d",  buf,  8u);
  }

  int v9 = sub_1002921D0(115, 0);
  double result = 0LL;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934910 != -1) {
      dispatch_once(&qword_101934910, &stru_10188FD60);
    }
    uint64_t v10 = *a1;
    v12[0] = 67240192;
    v12[1] = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934918,  16LL,  "Received unhandled motion activity type: %{public}d",  v12,  8);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLP::LogEntry::PrivateData::DominantMotionModeType ConvertCLMotionActivityTypeToProtobuf(const CLMotionActivity::Type &)",  "%s\n",  v11);
    return 0LL;
  }

  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 128));
  unsigned int v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 155), 0x1Eu);
  char v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }

  double v26 = *(void *)(a2 + 56);
  v5 |= 0x40uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 56) = v26;
  char v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "fallStatsDispatchRestoredOnAccelSensorTime", *(void *)(a1 + 168));
  char v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 0x3Fu);
  unsigned int v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0) {
      goto LABEL_36;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "sentFallAlert", *(_BYTE *)(a1 + 155));
  unsigned int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x1Fu);
  char v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }

  uint64_t v43 = *(_BYTE *)(a2 + 389);
  v10 |= 0x2000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 389) = v43;
  if ((*(_DWORD *)(a2 + 396) & 0x4000000) != 0)
  {
LABEL_36:
    uint64_t v13 = *(_BYTE *)(a2 + 390);
    *(_DWORD *)(a1 + 396) = v10 | 0x4000000;
    *(_BYTE *)(a1 + 390) = v13;
  }

  PB::TextFormatter::format(this, "gatingOffWristPreImpact", *(_BYTE *)(a1 + 392));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 264), 0x16u);
  char v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }

  double result = *(float *)(a2 + 200);
  v3 |= 0x200000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 200) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "magMax", *(float *)(a1 + 88));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x12u);
  char v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 88), 0x1Cu);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }

  uint64_t v11 = *(_BYTE *)(a2 + 156);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 156) = v11;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x200000000000LL) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_26;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "kMaxChaosRO", *(float *)(a1 + 72));
  unsigned int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 168), 0x6Cu);
  char v4 = *(void *)(v3 + 172);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "startTime", *(float *)(a1 + 120));
  unsigned int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x1Du);
  char v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }

  int v35 = *(void *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 8) = v35;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_70:
    uint64_t v37 = *(_DWORD *)(a2 + 72);
    *(void *)(result + 164) = v3 | 0x800;
    *(_DWORD *)(result + 72) = v37;
    return result;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  unsigned int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000000LL) != 0) {
    goto LABEL_69;
  }
LABEL_34:
  if ((v5 & 0x200000000LL) != 0) {
LABEL_35:
  }
    PB::TextFormatter::format(this, "vhvSetting", *(_DWORD *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x21u);
  if ((*(void *)(v3 + 164) & 0x800) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x22u);
  }
  return result;
}

  uint64_t v29 = *(_DWORD *)(a2 + 108);
  v3 |= 0x2000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 108) = v29;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "rolloverEnergyAtMaxSaturation", *(float *)(a1 + 168));
  unsigned int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x1Bu);
  char v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 184), 0xFu);
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0) {
LABEL_18:
  }
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 237), 0x10u);
LABEL_19:
  uint64_t v7 = *(const PB::Base **)(v3 + 120);
  if (v7) {
    double result = PB::Writer::writeSubmessage(this, v7, 0x11u);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 112);
  if (v8) {
    double result = PB::Writer::writeSubmessage(this, v8, 0x12u);
  }
  int v9 = *(const PB::Base **)(v3 + 104);
  if (v9) {
    double result = PB::Writer::writeSubmessage(this, v9, 0x13u);
  }
  uint64_t v10 = *(const PB::Base **)(v3 + 96);
  if (v10) {
    double result = PB::Writer::writeSubmessage(this, v10, 0x14u);
  }
  uint64_t v11 = *(const PB::Base **)(v3 + 152);
  if (v11) {
    double result = PB::Writer::writeSubmessage(this, v11, 0x15u);
  }
  int v12 = *(const PB::Base **)(v3 + 144);
  if (v12) {
    double result = PB::Writer::writeSubmessage(this, v12, 0x16u);
  }
  uint64_t v13 = *(const PB::Base **)(v3 + 168);
  if (v13) {
    double result = PB::Writer::writeSubmessage(this, v13, 0x17u);
  }
  unint64_t v14 = *(const PB::Base **)(v3 + 160);
  if (v14) {
    double result = PB::Writer::writeSubmessage(this, v14, 0x18u);
  }
  if ((*(_BYTE *)(v3 + 246) & 0x10) != 0) {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 236), 0x19u);
  }
  uint64_t v15 = *(const PB::Base **)(v3 + 88);
  if (v15) {
    double result = PB::Writer::writeSubmessage(this, v15, 0x1Au);
  }
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 1) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 8), 0x1Bu);
    uint64_t v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_72;
    }
  }

  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 0x1Cu);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_73;
  }

  int v18 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 96) = v18;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning", *(_DWORD *)(a1 + 88));
  unsigned int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x16u);
  char v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }

  int v36 = *(_DWORD *)(a2 + 160);
  v5 |= 0x40000000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 160) = v36;
  char v4 = *(void *)(a2 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_29;
    }
LABEL_70:
    uint64_t v38 = *(_DWORD *)(a2 + 116);
    v5 |= 0x80000uLL;
    *(void *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 116) = v38;
    if ((*(void *)(a2 + 192) & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "turn", *(_DWORD *)(a1 + 148));
  unsigned int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_70;
  }

  CFStringRef v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 40) = v19;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  unsigned int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 44), 0x11u);
  char v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }

  uint64_t v39 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 164) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v39;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x2000000) != 0) {
    goto LABEL_69;
  }
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    uint64_t v11 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 164) |= 0x20000u;
    *(_DWORD *)(a1 + 132) = v11;
  }

  return a1;
}

  PB::TextFormatter::format(this, "trackingScheme", *(_DWORD *)(a1 + 136));
  uint64_t v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x1Eu);
  uint64_t v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }

  double result = *(double *)(a2 + 112);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 112) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }

  PB::TextFormatter::format(this, "verticalOscillationGrade", *(double *)(a1 + 168));
  unsigned int v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 168), 0x20u);
  char v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }

  if ((v80[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1002A5370(buf);
  sub_1002F0B04(__p);
  sub_1002A8F8C((uint64_t)__p[0], "CLSilo.NameToCohortMap", buf);
  int v36 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    uint64_t v37 = (unint64_t *)((char *)__p[1] + 8);
    do
      uint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  uint64_t v39 = (void *)sub_1002A59CC((uint64_t)buf);
  if ([v39 count]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v39,  @"NameToCohortMap");
  }
  sub_1002A5590(buf);
  sub_100309D64(0, (std::string *)buf);
  if (v80[15] >= 0) {
    int v40 = buf;
  }
  else {
    int v40 = *(uint8_t **)buf;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v40),  @"AutoCohortEdgesDirectoryPath");
  if ((v80[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  +[CLSilo setGlobalConfiguration:](&OBJC_CLASS___CLSilo, "setGlobalConfiguration:", v4);

  sub_1002A5370(__p);
  sub_1002F0B04(buf);
  sub_1002A8F8C(*(uint64_t *)buf, "CLServiceVendor.RecordingTriggersFromByTo", __p);
  uint64_t v41 = *(std::__shared_weak_count **)v80;
  if (*(void *)v80)
  {
    uint64_t v42 = (unint64_t *)(*(void *)v80 + 8LL);
    do
      uint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  CFStringRef v44 = (void *)sub_1002A59CC((uint64_t)__p);
  int v45 = -[NSString UTF8String]( -[NSString stringByAppendingString:]( NSTemporaryDirectory(),  "stringByAppendingString:",  @"/intersilo_recording"),  "UTF8String");
  sub_1010DDBC0(buf, v45);
  sub_1002F0B04(&v75);
  sub_1002A8560((uint64_t)v75.__r_.__value_.__l.__data_, "CLServiceVendor.RecordingPathBase", (std::string *)buf);
  size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
  if (v75.__r_.__value_.__l.__size_)
  {
    uint64_t v47 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
    do
      uint64_t v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  sub_1002F0B04(&v75);
  unint64_t v49 = objc_msgSend((id)sub_1002A59CC((uint64_t)v75.__r_.__value_.__l.__data_), "cl_deepMutableCopy");
  int v50 = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
  if (v75.__r_.__value_.__l.__size_)
  {
    CFStringRef v51 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
    do
      int v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  if (![v49 objectForKey:@"HeartAttackStackshot"])
  {
    sub_1004F2598();
    if ((sub_1004F8A40() & 1) != 0) {
      goto LABEL_102;
    }
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG)) {
LABEL_102:
    }
      uint64_t v53 = 1LL;
    else {
      uint64_t v53 = 0LL;
    }
    objc_msgSend( v49,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v53),  @"HeartAttackStackshot");
  }

  sub_1004F2598();
  objc_msgSend( v49,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1004F8A40()),  @"IsInternalInstall");
  objc_msgSend( v49,  "setValue:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1002958AC() == 1),  @"IsLocationServicesEnabled");
  +[CLServiceVendor rereadConfiguration:](&OBJC_CLASS___CLServiceVendor, "rereadConfiguration:", v49);
  if ([v44 count])
  {
    __int16 v54 = [*(id *)(a1 + 16) vendor];
    if (v80[15] >= 0) {
      uint64_t v55 = buf;
    }
    else {
      uint64_t v55 = *(uint8_t **)buf;
    }
    objc_msgSend( v54,  "setRecordingTriggerMap:outputPathBase:",  v44,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v55));
  }

  if ((v80[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1002A5590(__p);
  sub_1004DD868();
  sub_1002F8DDC();
  sub_1003CC884((uint64_t)sub_1011C2834, a1, *(void **)(a1 + 16), buf);
  unint64_t v56 = *(void *)buf;
  *(void *)buf = 0LL;
  BOOL v57 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v56;
  if (v57)
  {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
    double v58 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
    }
  }

  sub_1002F0B04(buf);
  CFStringRef v59 = sub_1002A7CB0(*(uint64_t *)buf, "AutoShutdownDelay", (_DWORD *)(a1 + 40));
  int v60 = v59;
  uint64_t v61 = *(std::__shared_weak_count **)v80;
  if (!*(void *)v80) {
    goto LABEL_119;
  }
  uint64_t v62 = (unint64_t *)(*(void *)v80 + 8LL);
  do
    uint64_t v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if ((v60 & 1) != 0) {
      goto LABEL_124;
    }
  }

  else
  {
LABEL_119:
    if ((v59 & 1) != 0) {
      goto LABEL_124;
    }
  }

  else {
    unint64_t v64 = -1;
  }
  *(_DWORD *)(a1 + 40) = v64;
LABEL_124:
  sub_1002F0B04(buf);
  uint64_t v65 = sub_1002A82BC(*(uint64_t *)buf, "ObsoleteDataCheckDelay", (void *)(a1 + 88));
  double v66 = v65;
  CFStringRef v67 = *(std::__shared_weak_count **)v80;
  if (*(void *)v80)
  {
    BOOL v68 = (unint64_t *)(*(void *)v80 + 8LL);
    do
      unint64_t v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      if ((v66 & 1) != 0) {
        goto LABEL_130;
      }
      goto LABEL_129;
    }
  }

  if ((v65 & 1) == 0) {
LABEL_129:
  }
    *(void *)(a1 + 88) = 0x4066800000000000LL;
LABEL_130:
  uint64_t v70 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
  *(void *)(a1 + 48) = v70;
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472LL;
  v74[2] = sub_1011C2A2C;
  v74[3] = &unk_10181D3D0;
  v74[4] = a1;
  [v70 setHandler:v74];
  qword_1019A41A0 = a1;
  int v71 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
  *(void *)(a1 + 96) = v71;
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472LL;
  v73[2] = sub_1011C2B94;
  v73[3] = &unk_10181D3D0;
  v73[4] = a1;
  [v71 setHandler:v73];
  [*(id *)(a1 + 96) setNextFireDelay:*(double *)(a1 + 88)];
  return a1;
}

LABEL_151:
  sub_100008390((uint64_t)&v107, v108[0]);
  return a1;
}

      CFStringRef v77 = ++v78;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10183C380);
    }
    v80 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      sub_1003D1A48((unsigned int *)(*a2 + 32 * v77), v459);
      v81 = v459;
      if (v459[23] < 0) {
        v81 = *(_BYTE **)v459;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = v81;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = Current - *((double *)&v437 + 1);
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = 0x40DC200000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying",  buf,  0x20u);
      if ((v459[23] & 0x80000000) != 0) {
        operator delete(*(void **)v459);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_151;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10183C380);
    }
    unint64_t v82 = qword_101934A78;
    sub_1003D1A48((unsigned int *)(*a2 + 32 * v77), &__p);
    int v83 = &__p;
    if (SHIBYTE(v458) < 0) {
      int v83 = (__int128 *)__p;
    }
    *(_DWORD *)v459 = 136315650;
    *(void *)&v459[4] = v83;
    *(_WORD *)&v459[12] = 2048;
    *(double *)&v459[14] = Current - *((double *)&v437 + 1);
    *(_WORD *)&v459[22] = 2048;
    *(void *)&v459[24] = 0x40DC200000000000LL;
    LODWORD(v417) = 32;
    v84 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v82,  2LL,  "CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying",  v459,  v417,  v418);
    if (SHIBYTE(v458) < 0) {
      operator delete((void *)__p);
    }
    goto LABEL_122;
  }

  unint64_t v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
  if (v49 >= 0x80)
  {
    int v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    int v50 = 1;
  }

  char v4 = (v4 + v50 + 2);
  if ((v3 & 0x800000) != 0)
  {
LABEL_155:
    CFStringRef v51 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 100);
    if ((v51 & 0x80000000) != 0)
    {
      int v52 = 10;
    }

    else if (v51 >= 0x80)
    {
      int v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v51, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      int v52 = 1;
    }

    char v4 = (v4 + v52 + 2);
  }

  int v83 = *(void *)(a1 + 160);
  if (!v83) {
    int v83 = *(void *)(qword_1019A1CE8 + 160);
  }
  v84 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B315B0(v83, a2);
  BOOL v85 = (int)v84;
  else {
    CFStringRef v86 = 1;
  }
  char v4 = (v4 + v85 + v86 + 2);
  if ((*(_DWORD *)(a1 + 184) & 0x200000) != 0)
  {
LABEL_157:
    BOOL v87 = *(void *)(a1 + 168);
    if (!v87) {
      BOOL v87 = *(void *)(qword_1019A1CE8 + 168);
    }
    CFStringRef v88 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B32084(v87, a2);
    uint64_t v90 = (int)v88;
    else {
      v91 = 1;
    }
    char v4 = (v4 + v90 + v91 + 2);
  }

  uint64_t v42 = *(void *)(v5 + 312);
  if (!v42) {
    uint64_t v42 = *(void *)(qword_1019A1D38 + 312);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x42,  v42,  a2,  a4);
  if ((*(_DWORD *)(v5 + 400) & 0x100) != 0)
  {
LABEL_154:
    uint64_t v43 = *(void *)(v5 + 320);
    if (!v43) {
      uint64_t v43 = *(void *)(qword_1019A1D38 + 320);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x43,  v43,  a2,  a4);
  }

  unint64_t v73 = *(void *)(a1 + 152);
  if (!v73) {
    unint64_t v73 = *(void *)(qword_1019A1D48 + 152);
  }
  uint64_t v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100634454(v73, a2);
  unint64_t v75 = (int)v74;
  else {
    unint64_t v76 = 1;
  }
  char v4 = (v4 + v75 + v76 + 2);
  uint64_t v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x200000) == 0)
  {
LABEL_121:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_163;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  unint64_t v49 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v50 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfAlreadyGatedBefore";
    v193 = 2048;
    v194 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v138 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfAlreadyGatedBefore";
    v189 = 2048;
    v190 = v138;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    uint64_t v140 = (uint8_t *)v139;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v139);
    if (v140 != buf) {
      free(v140);
    }
  }

  a4[12] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200000000LL) == 0)
  {
LABEL_22:
    if ((v10 & 0x400000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_163;
  }

      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      goto LABEL_98;
    }

    if (*(_BYTE *)(a1 + 33))
    {
      uint64_t v115 = 0uLL;
      v116 = 0LL;
      sub_100C78548((char **)&v115, 3uLL);
      unint64_t v32 = *(void *)(a1 + 16);
      if (v32)
      {
        if (v109)
        {
          sub_100975E78(v32, (uint64_t *)a6, (char **)&v115, 1);
        }

        else
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v41 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v42 = *(void *)(a1 + 8);
            buf.n128_u32[0] = 134349056;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v42;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            BOOL v85 = *(void *)(a1 + 8);
            *(_DWORD *)uint64_t v114 = 134349056;
            *(void *)&v114[4] = v85;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road",  v114,  12);
            BOOL v87 = (__n128 *)v86;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQ ueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const",  "%s\n",  v86);
            if (v87 != &buf) {
              free(v87);
            }
          }
        }

        uint64_t v43 = (uint64_t *)*((void *)&v115 + 1);
        for (j = (uint64_t *)v115; j != v43; j += 2)
        {
          buf = 0uLL;
          __int128 v124 = 1;
          char v125 = 0LL;
          __n128 v126 = 0;
          sub_1000F2F30(&buf, j);
          __int128 v124 = 1;
          char v125 = 0LL;
          __n128 v126 = 0;
          int v45 = sub_100C7A00C(v98 + 6, &buf);
          int v46 = (std::__shared_weak_count *)buf.n128_u64[1];
          if (buf.n128_u64[1])
          {
            uint64_t v47 = (unint64_t *)(buf.n128_u64[1] + 8);
            do
              uint64_t v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v46->__on_zero_shared)(v46, v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }
      }

      buf.n128_u64[0] = (unint64_t)&v115;
      sub_10004CC28((void ***)&buf);
      int v31 = a4;
      goto LABEL_60;
    }

    double v33 = sub_10097496C((uint64_t **)(a1 + 2616), (__int128 *)*a6, 0);
    if (v109 && (double v34 = v33) != 0LL)
    {
      int v36 = (uint64_t *)*((void *)v33 + 4);
      int v35 = (uint64_t *)*((void *)v33 + 5);
      if (v36 != v35)
      {
        while (*v36)
        {
          if (*(void *)*v36 != v19)
          {
            buf = 0uLL;
            __int128 v124 = 1;
            char v125 = 0LL;
            __n128 v126 = 0;
            sub_1000F2F30(&buf, v36);
            __int128 v124 = 1;
            char v125 = 0LL;
            __n128 v126 = 0;
            uint64_t v37 = sub_100C7A00C(v98 + 6, &buf);
            uint64_t v38 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              uint64_t v39 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                int v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v37);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }

          v36 += 2;
          if (v36 == v35) {
            goto LABEL_111;
          }
        }

        sub_100890314((uint64_t *)v98 + 6);
      }

  unint64_t v23 = *(_BYTE *)(a2 + 278);
  v6 |= 0x400u;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 278) = v23;
  char v4 = *v3;
  if ((*v3 & 0x4000000000000000LL) == 0)
  {
LABEL_78:
    if ((v4 & 0x8000000000000000LL) == 0) {
      goto LABEL_79;
    }
    goto LABEL_153;
  }

  PB::TextFormatter::format(this, "shortAudioMet", *(_BYTE *)(a1 + 278));
  char v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000000LL) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000LL) == 0) {
      goto LABEL_78;
    }
    goto LABEL_153;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 264), 0x48u);
  unsigned int v5 = *v4;
  if ((*v4 & 0x2000000000000000LL) != 0)
  {
LABEL_77:
    double result = PB::Writer::write(this, *(float *)(v3 + 256), 0x49u);
    unsigned int v5 = *v4;
  }

  double result = *(float *)(a2 + 212);
  v5 |= 0x4000000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 212) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  char v4 = *v3;
  if ((*v3 & 0x100000000000LL) == 0)
  {
LABEL_71:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_153;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudiodvThreshold1", *(float *)(a1 + 240));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  char v6 = *v5;
  if ((*v5 & 0x400000000000000LL) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_153;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 212), 0x105u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x100000000000LL) == 0)
  {
LABEL_71:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_153;
  }

  int v40 = *(_BYTE *)(a2 + 335);
  v6 |= 0x1000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 335) = v40;
  char v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x8000) == 0)
  {
LABEL_46:
    if ((v7 & 0x8000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_153;
  }

  PB::TextFormatter::format(this, "minimumHoldDuration", *(float *)(a1 + 132));
  uint64_t v7 = *v5;
  char v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_153;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 335), 0x135u);
  unsigned int v5 = *v4;
  char v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_153;
  }

  CFStringRef v86 = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 140) = v86;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x200000000000LL) == 0)
  {
LABEL_73:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_153;
  }

  PB::TextFormatter::format(this, "maxSaturation0", *(float *)(a1 + 144));
  char v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_73;
    }
    goto LABEL_153;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 159), 0x4B9u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  char v4 = *(void *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_73:
    if ((v4 & 0x10000000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_153;
  }

        *(_DWORD *)(a1 + 48) = v63;
        goto LABEL_158;
      case 7u:
        *(_BYTE *)(a1 + 64) |= 0x20u;
        double v66 = *((void *)this + 1);
        CFStringRef v67 = *((void *)this + 2);
        BOOL v68 = *(void *)this;
        if (v66 <= 0xFFFFFFFFFFFFFFF5LL && v66 + 10 <= v67)
        {
          unint64_t v69 = 0;
          uint64_t v70 = 0;
          int v71 = 0LL;
          do
          {
            uint64_t v72 = v66 + 1;
            *((void *)this + 1) = v66 + 1;
            unint64_t v73 = *(_BYTE *)(v68 + v66);
            v71 |= (unint64_t)(v73 & 0x7F) << v69;
            if ((v73 & 0x80) == 0) {
              goto LABEL_154;
            }
            v69 += 7;
            double v66 = v72;
            uint64_t v15 = v70++ > 8;
          }

          while (!v15);
LABEL_122:
          LODWORD(v71) = 0;
          goto LABEL_154;
        }

        unint64_t v105 = 0;
        v106 = 0;
        int v71 = 0LL;
        if (v67 <= v66) {
          CFStringRef v67 = *((void *)this + 1);
        }
        while (2)
        {
          if (v67 == v66)
          {
            LODWORD(v71) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v107 = v66 + 1;
            v108 = *(_BYTE *)(v68 + v66);
            *((void *)this + 1) = v107;
            v71 |= (unint64_t)(v108 & 0x7F) << v105;
            if (v108 < 0)
            {
              v105 += 7;
              double v66 = v107;
              uint64_t v15 = v106++ > 8;
              if (v15) {
                goto LABEL_122;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v71) = 0;
            }
          }

          break;
        }

void sub_10000BF5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1002A5590(&a15);
  sub_10000AE14((uint64_t)&a17);
  sub_100008390((uint64_t)&a12, a13);
  sub_1002A5554(v25);
  sub_100008390(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10000C0A8(uint64_t a1, unsigned __int8 *a2)
{
  LOBYTE(__p) = 0;
  char v6 = 0;
  sub_10000B1B4(a1, a2, 0, &__p);
  if (v6 && v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10000C0FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10000C120(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  LOBYTE(__p) = 0;
  char v7 = 0;
  sub_10000B1B4(a1, a2, a3, &__p);
  if (v7 && v6 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10000C170( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10000C194(void *a1@<X8>)
{
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsNullSpaceKernelFunction", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1002A8FFC(v11, (uint64_t)v2, v10);
  CFRelease(v2);
  if (v3)
  {
    sub_1002A5768(v9, (uint64_t)v10);
    sub_1002A55A8(a1, (uint64_t)v9);
    *a1 = &off_1018201E0;
    sub_1002A5590(v9);
  }

  else
  {
    sub_1010DDBC0(__p, "{type : 2, sigma : 0.625, power : 3.0}");
    sub_10012F48C(a1, __p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1002A5590(v10);
  char v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10000C2BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002A5590(&a18);
  sub_10000AE14(v18 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C310()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizerAlgorithm", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  BOOL v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1LL;
  }
}

void sub_10000C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10000C3E4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile",  0x8000100u,  kCFAllocatorNull);
  sub_1002A832C(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  int v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10000C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10000C4C0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile",  0x8000100u,  kCFAllocatorNull);
  sub_1002A832C(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  int v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10000C584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10000C59C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsFingerprintDistanceFunctionType",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 4LL;
  }
}

void sub_10000C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10000C674@<X0>(void *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!*((_BYTE *)result + 24)) {
    return sub_1010DDBC0(a3, a2);
  }
  *(_OWORD *)a3 = *(_OWORD *)result;
  a3[2] = result[2];
  return result;
}

uint64_t sub_10000C6AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

double sub_10000C6B4(uint64_t a1)
{
  int v2 = 0;
  return *(double *)sub_10000C6DC(a1, &v2);
}

uint64_t *sub_10000C6DC(uint64_t a1, int *a2)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10000C918("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      int v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return v2 + 5;
    }
    int v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

double sub_10000C730(uint64_t a1)
{
  int v2 = 1;
  return *(double *)sub_10000C6DC(a1, &v2);
}

void *sub_10000C75C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = sub_1002A55A8(a2, a1 + 24);
  *a2 = &off_1018201E0;
  return result;
}

uint64_t sub_10000C794(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_10000C79C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = a1 + 8;
  do
  {
    int v3 = *(_DWORD *)(v1 + 32);
    BOOL v4 = v3 < 4;
    if (v3 >= 4) {
      unint64_t v5 = (uint64_t *)v1;
    }
    else {
      unint64_t v5 = (uint64_t *)(v1 + 8);
    }
    if (!v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = *v5;
  }

  while (*v5);
  int v7 = 4;
  return *sub_10000C6DC(a1, &v7);
}

void sub_10000C818()
{
}

void sub_10000C82C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t **sub_10000C858(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_10000C918(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10000C968(exception, a1);
}

void sub_10000C954(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10000C968(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_10000C98C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result = sub_1003B747C(a1, a4);
  if ((_DWORD)result && a3)
  {
    uint64_t v9 = 0LL;
    char v10 = 0;
    uint64_t v12 = -a3;
    while (2)
    {
      for (uint64_t i = a2 + 48 * v9++; ; i += 48LL)
      {
        uint64_t v48 = *(const char **)i;
        int v49 = 5;
        __int16 v50 = 0;
        char v51 = 0;
        char v52 = 0;
        uint64_t result = sub_1003BC790(a1, a4, v48, (uint64_t)&v48);
        if ((result & 1) == 0) {
          break;
        }
        ++v9;
        if (v12 + v9 == 1)
        {
          if ((v10 & 1) == 0) {
            return result;
          }
          return sub_1003BF200(a1, a4);
        }
      }

      sub_1003C0454(a1);
      sub_10000CE18((uint64_t)v44);
      unint64_t v14 = sub_10000CF44(&v45, (uint64_t)"ALTER TABLE ", 12LL);
      size_t v15 = strlen(a4);
      uint64_t v16 = sub_10000CF44(v14, (uint64_t)a4, v15);
      uint64_t v17 = sub_10000CF44(v16, (uint64_t)" ADD COLUMN ", 12LL);
      size_t v18 = strlen(*(const char **)i);
      CFStringRef v19 = sub_10000CF44(v17, *(void *)i, v18);
      int v20 = sub_10000CF44(v19, (uint64_t)" ", 1LL);
      uint64_t v21 = (const char *)sub_1003BCC40(*(_DWORD *)(i + 8));
      size_t v22 = strlen(v21);
      unint64_t v23 = sub_10000CF44(v20, (uint64_t)v21, v22);
      sub_10000CF44(v23, (uint64_t)";", 1LL);
      std::stringbuf::str(&v41, &v46);
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v24 = &v41;
      }
      else {
        uint64_t v24 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(a1, (char *)v24, &v39);
      uint64_t v25 = v39.__r_.__value_.__r.__words[0];
      v39.__r_.__value_.__r.__words[0] = 0LL;
      double v26 = (sqlite3_stmt *)sub_100019240(v25);
      sub_1003BB2BC(a1, v26);
      sub_10000CE18((uint64_t)&v41);
      CFStringRef v27 = sub_10000CF44(&v41.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE ", 7LL);
      size_t v28 = strlen(a4);
      uint64_t v29 = sub_10000CF44(v27, (uint64_t)a4, v28);
      unint64_t v30 = sub_10000CF44(v29, (uint64_t)" SET ", 5LL);
      int v31 = *(const char **)i;
      size_t v32 = strlen(v31);
      double v33 = sub_10000CF44(v30, (uint64_t)v31, v32);
      sub_10000CF44(v33, (uint64_t)" = '';", 6LL);
      std::stringbuf::str(&v39, &v42);
      if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v34 = &v39;
      }
      else {
        double v34 = (std::stringbuf::string_type *)v39.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(a1, (char *)v34, &v40);
      uint64_t v35 = v40;
      uint64_t v40 = 0LL;
      int v36 = (sqlite3_stmt *)sub_100019240(v35);
      sub_1003BB2BC(a1, v36);
      sub_1003C05BC(a1);
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
      }
      v41.__r_.__value_.__r.__words[0] = v11;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + *(void *)(v11 - 24)) = v38;
      v41.__r_.__value_.__l.__cap_ = v37;
      std::streambuf::~streambuf(&v42);
      std::ios::~ios(&v43);
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
      }
      v44[0] = v11;
      *(void *)((char *)v44 + *(void *)(v11 - 24)) = v38;
      std::string::size_type v45 = v37;
      std::streambuf::~streambuf(&v46);
      std::ios::~ios(&v47);
      char v10 = 1;
      if (v12 + v9) {
        continue;
      }
      break;
    }

    return sub_1003BF200(a1, a4);
  }

  return result;
}

void sub_10000CD80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a25);
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  sub_1011F8850((uint64_t)&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_10000CE18(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10000CF1C(_Unwind_Exception *a1)
{
}

void *sub_10000CF44(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      char v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10000D0A8(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_10000D04C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_10000D094(_Unwind_Exception *a1)
{
}

uint64_t sub_10000D0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_10000D1E4(__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_10000D1C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000D1E4(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000C818();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_10000D28C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934AD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934AD0))
  {
    sub_100012A60((std::string *)&xmmword_101934AB8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934AB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934AD0);
  }

  if (byte_101934ACF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934AB8, *((unint64_t *)&xmmword_101934AB8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934AB8;
    *(void *)(a1 + 16) = unk_101934AC8;
  }

void sub_10000D33C(_Unwind_Exception *a1)
{
}

void sub_10000D354(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934AF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934AF0))
  {
    sub_100012F3C((std::string *)&xmmword_101934AD8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934AD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934AF0);
  }

  if (byte_101934AEF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934AD8, *((unint64_t *)&xmmword_101934AD8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934AD8;
    *(void *)(a1 + 16) = unk_101934AE8;
  }

void sub_10000D404(_Unwind_Exception *a1)
{
}

void sub_10000D41C(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  if (!v2)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    LOWORD(v9) = 0;
    uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Database is not connected so we can't intialize our table",  &v9,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n");
LABEL_30:
    if (v6 != buf) {
      free(v6);
    }
    return;
  }

  sub_1003B59A0(*a1, "MicroLocationLabels", (const char **)&off_1018188A8, 0LL, 0);
  char v3 = sub_1003B747C(*a1, "MicroLocationLabels");
  *((_BYTE *)a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  if ((v3 & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136380675;
      int64_t v12 = "MicroLocationLabels";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %{private}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      int v9 = 136380675;
      char v10 = "MicroLocationLabels";
      size_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %{private}s",  &v9,  12);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n", v8);
    }

    sub_10000D998(a1);
    return;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }
  size_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    int64_t v12 = "MicroLocationLabels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    int v9 = 136446210;
    char v10 = "MicroLocationLabels";
    uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n");
    goto LABEL_30;
  }

uint64_t sub_10000D870(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  sub_10000D41C((uint64_t *)a1);
  return a1;
}

uint64_t sub_10000D89C( uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  __int128 v7 = *a4;
  *(void *)(result + 32) = *((void *)a4 + 2);
  *(_OWORD *)(result + 16) = v7;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *(void *)(result + 40) = a5;
  *(void *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = a6;
  *(double *)(result + 56) = a7;
  return result;
}

uint64_t sub_10000D8C4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  __int128 v7 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *(double *)(a1 + 56) = a6;
  sub_10010147C(a5, (uint64_t)&v11);
  int32x2_t v8 = vdup_n_s32(v12 == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(int8x16_t *)(a1 + 40) = vandq_s8(v11, (int8x16_t)vcgezq_s64(vshlq_n_s64(v9, 0x3FuLL)));
  return a1;
}

void sub_10000D978(_Unwind_Exception *exception_object)
{
}

BOOL sub_10000D998(uint64_t *a1)
{
  if ((sub_1003B747C(*a1, "MicroLocationRecordingLabels") & 1) != 0)
  {
    sub_1002F0B04(v71);
    CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLabelsTableMaxRowsToMigrate", 0x8000100u, kCFAllocatorNull);
    int v3 = sub_1002A77CC(*(uint64_t *)v71, (uint64_t)v2, v69);
    CFRelease(v2);
    unsigned int v4 = v69[0];
    uint64_t v5 = *(std::__shared_weak_count **)&v71[8];
    if (*(void *)&v71[8])
    {
      uint64_t v6 = (unint64_t *)(*(void *)&v71[8] + 8LL);
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    if (v3) {
      unsigned int v8 = v4;
    }
    else {
      unsigned int v8 = 250;
    }
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
    strcpy(v58.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    int64x2_t v9 = std::string::append(&v58, "MicroLocationLabels");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    int8x16_t v11 = std::string::append(&v59, " (");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D28C((uint64_t)v56);
    if ((v57 & 0x80u) == 0) {
      uint64_t v13 = v56;
    }
    else {
      uint64_t v13 = (void **)v56[0];
    }
    if ((v57 & 0x80u) == 0) {
      std::string::size_type v14 = v57;
    }
    else {
      std::string::size_type v14 = (std::string::size_type)v56[1];
    }
    uint64_t v15 = std::string::append(&v60, (const std::string::value_type *)v13, v14);
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v17 = std::string::append(&v61, ") ");
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    CFStringRef v19 = std::string::append(&v62, "SELECT ");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D28C((uint64_t)__p);
    if ((v55 & 0x80u) == 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    if ((v55 & 0x80u) == 0) {
      std::string::size_type v22 = v55;
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
    unint64_t v23 = std::string::append(&v63, (const std::string::value_type *)v21, v22);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v25 = std::string::append(&v64, " FROM ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    CFStringRef v27 = std::string::append(&v65, "MicroLocationRecordingLabels");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v29 = std::string::append(&v66, " ORDER BY ");
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    int v31 = std::string::append(&v67, "ReceivedTimestamp");
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    double v33 = std::string::append(&v68, " DESC LIMIT ");
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(void *)&v71[16] = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)int v71 = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v53, v8);
    if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v35 = &v53;
    }
    else {
      uint64_t v35 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v53.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    std::string::size_type v37 = std::string::append((std::string *)v71, (const std::string::value_type *)v35, size);
    __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    int64_t cap = v37->__r_.__value_.__l.__cap_;
    *(_OWORD *)unint64_t v69 = v38;
    v37->__r_.__value_.__l.__size_ = 0LL;
    v37->__r_.__value_.__l.__cap_ = 0LL;
    v37->__r_.__value_.__r.__words[0] = 0LL;
    if ((v71[23] & 0x80000000) != 0) {
      operator delete(*(void **)v71);
    }
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    std::stringbuf::string_type v39 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = v69;
      if (cap < 0) {
        uint64_t v40 = (void **)v69[0];
      }
      *(void *)int v71 = 68289282LL;
      *(_WORD *)&v71[8] = 2082;
      *(void *)&v71[10] = "";
      *(_WORD *)&v71[18] = 2082;
      *(void *)&v71[20] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Executing migration query, Query: :%{public, location:escape_only}s}",  v71,  0x1Cu);
    }

    if (cap >= 0) {
      std::stringbuf::string_type v41 = (char *)v69;
    }
    else {
      std::stringbuf::string_type v41 = (char *)v69[0];
    }
    sub_1003C0D54(*a1, v41, v71);
    uint64_t v42 = *(void *)v71;
    uint64_t v43 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v71);
    if (!v43)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      uint64_t v48 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Error getting a prepared statement", v71, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(v71, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818888);
        }
        LOWORD(v68.__r_.__value_.__l.__data_) = 0;
        char v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v71,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v68,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()",  "%s\n",  v52);
        if (v52 != v71) {
          free(v52);
        }
      }

      BOOL v44 = 0LL;
      goto LABEL_95;
    }

    BOOL v44 = sub_1003BB2BC(*a1, v43);
    if (v44)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      std::string::size_type v45 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v71 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Successfully migrated legacy labels table to updated schema",  v71,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_94;
      }
      bzero(v71, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v68.__r_.__value_.__l.__data_) = 0;
      std::stringbuf v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v71,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Successfully migrated legacy labels table to updated schema",  &v68,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()",  "%s\n",  v46);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      int v49 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v71 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Failed to migrate labels table to updated schema",  v71,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_94;
      }
      bzero(v71, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v68.__r_.__value_.__l.__data_) = 0;
      std::stringbuf v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v71,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to migrate labels table to updated schema",  &v68,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()",  "%s\n",  v46);
    }

    if (v46 != v71) {
      free(v46);
    }
LABEL_94:
    sub_1003C0200(*a1, "MicroLocationRecordingLabels");
LABEL_95:
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v69[0]);
    }
    return v44;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }
  uint64_t v47 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v71 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "Previous recording labels table does not exist, no need to migrate",  v71,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v71, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    LOWORD(v69[0]) = 0;
    char v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v71,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Previous recording labels table does not exist, no need to migrate",  v69,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()",  "%s\n",  v51);
    if (v51 != v71) {
      free(v51);
    }
  }

  return 0LL;
}

void sub_10000E3CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
  }
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10000E594( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  v59.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v59, "SELECT * FROM (");
  char v58 = 7;
  strcpy(__s, "SELECT ");
  __int128 v12 = std::string::append(&v59, __s, 7uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000D28C((uint64_t)__p);
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v14 = __p;
  }
  else {
    std::string::size_type v14 = (void **)__p[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v15 = v56;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  __int128 v16 = std::string::append(&v60, (const std::string::value_type *)v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v18 = std::string::append(&v61, " FROM ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  unint64_t v23 = std::string::append(&v62, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = std::string::append(&v63, " ORDER BY ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  CFStringRef v27 = std::string::append(&v68, "ReceivedTimestamp");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append(&v69, " DESC LIMIT ");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v54, a3);
  if ((v54.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v31 = &v54;
  }
  else {
    int v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v54.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  double v33 = std::string::append(&v64, (const std::string::value_type *)v31, size);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v35 = std::string::append(&__dst, ") ORDER BY ");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  int v37 = *(char *)(a4 + 23);
  if (v37 >= 0) {
    __int128 v38 = (const std::string::value_type *)a4;
  }
  else {
    __int128 v38 = *(const std::string::value_type **)a4;
  }
  if (v37 >= 0) {
    std::string::size_type v39 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v39 = *(void *)(a4 + 8);
  }
  uint64_t v40 = std::string::append(&v67, v38, v39);
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  if (v58 < 0) {
    operator delete(*(void **)__s);
  }
  if (((char)v59.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (!a5) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }

  operator delete(v59.__r_.__value_.__l.__data_);
  if (a5) {
LABEL_53:
  }
    std::string::append(&v65, " DESC");
LABEL_54:
  if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v42 = &v65;
  }
  else {
    uint64_t v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1, (char *)v42, &v67);
  std::string::size_type v43 = v67.__r_.__value_.__r.__words[0];
  BOOL v44 = (sqlite3_stmt *)sub_100019240((uint64_t)v67.__r_.__value_.__l.__data_);
  memset(&v64, 0, sizeof(v64));
  while (j__sqlite3_step(v44) == 100)
  {
    v69.__r_.__value_.__r.__words[0] = sub_100011C2C(v44, 0);
    v69.__r_.__value_.__l.__size_ = v45;
    sub_100011CB8(v44, 1, &v67);
    v68.__r_.__value_.__r.__words[0] = sub_100011C2C(v44, 2);
    v68.__r_.__value_.__l.__size_ = v46;
    double v47 = sqlite3_column_double(v44, 3);
    *(double *)&v63.__r_.__value_.__l.__data_ = v47;
    std::string::size_type v48 = v64.__r_.__value_.__l.__size_;
    if (v64.__r_.__value_.__l.__size_ >= v64.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v50 = sub_10001254C((uint64_t *)&v64, (__int128 *)&v69, (__int128 *)&v67, (__int128 *)&v68, (double *)&v63);
    }

    else
    {
      __int128 v49 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
      if ((char)v67.__r_.__value_.__s.__size_ < 0)
      {
        __int128 v53 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
        sub_1010DD48C(&__dst, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        double v47 = *(double *)&v63.__r_.__value_.__l.__data_;
        __int128 v49 = v53;
      }

      else
      {
        std::string __dst = v67;
      }

      __int128 v51 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
      *(_OWORD *)std::string::size_type v48 = v49;
      std::string::size_type cap = __dst.__r_.__value_.__l.__cap_;
      *(_OWORD *)(v48 + 16) = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v48 + 32) = cap;
      *(_OWORD *)(v48 + 40) = v51;
      *(double *)(v48 + 56) = v47;
      std::string::size_type v50 = v48 + 64;
    }

    v64.__r_.__value_.__l.__size_ = v50;
  }

  sqlite3_reset(v44);
  *a6 = v64;
  memset(&v64, 0, sizeof(v64));
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  sub_100012948((void ***)&v67);
  if (v43) {
    (*(void (**)(std::string::size_type))(*(void *)v43 + 8LL))(v43);
  }
}

void sub_10000EAA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10000EE04()
{
}

void sub_10000EE18(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x10000EC48LL);
}

uint64_t sub_10000EE28(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993847 >= 0) {
      uint64_t v5 = (char *)&xmmword_101993830;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993830;
    }
    sub_1003C0D54(v4, v5, &v31);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      while (1)
      {
        unsigned int v8 = (sqlite3_stmt *)sub_100019240(v31);
        memset(&v30, 0, sizeof(v30));
        if ((sub_100013090(v6, &v30) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        memset(&__p, 0, sizeof(__p));
        uint64_t v9 = v6 + 40;
        if ((sub_100013090(v6 + 40, &__p) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        double v10 = *(double *)(v6 + 56);
        int8x16_t v11 = (v30.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v30 : (std::string *)v30.__r_.__value_.__r.__words[0];
        __int128 v12 = (char *)(v6 + 16);
        if (!sub_1003BC1F0(v8, 2, v12)) {
          break;
        }
        __int128 v13 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818888);
          }
          __int128 v18 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993847 >= 0) {
              __int128 v19 = &xmmword_101993830;
            }
            else {
              __int128 v19 = (__int128 *)xmmword_101993830;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101818888);
            }
            if (byte_101993847 >= 0) {
              int v20 = &xmmword_101993830;
            }
            else {
              int v20 = (__int128 *)xmmword_101993830;
            }
            int v32 = 136446210;
            double v33 = v20;
            LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 12;
            uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v32,  v28);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v21);
          }

LABEL_31:
          uint64_t v14 = 0LL;
          goto LABEL_32;
        }

        uint64_t v14 = 1LL;
LABEL_32:
        uint64_t v6 = v9 + 24;
        if (v9 + 24 == v7) {
          char v17 = 0;
        }
        else {
          char v17 = v14;
        }
        if ((v17 & 1) == 0) {
          goto LABEL_70;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      std::string::size_type v15 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993847 >= 0) {
          __int128 v16 = &xmmword_101993830;
        }
        else {
          __int128 v16 = (__int128 *)xmmword_101993830;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818888);
        }
        if (byte_101993847 >= 0) {
          std::string::size_type v22 = &xmmword_101993830;
        }
        else {
          std::string::size_type v22 = (__int128 *)xmmword_101993830;
        }
        int v32 = 136380675;
        double v33 = v22;
        LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 12;
        unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  &v32,  v28);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v23);
      }

      sqlite3_reset(v8);
      goto LABEL_31;
    }

    uint64_t v14 = 1LL;
LABEL_70:
    uint64_t v25 = v31;
    uint64_t v31 = 0LL;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    __int128 v24 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v30.__r_.__value_.__l.__data_) = 0;
      CFStringRef v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v30,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingLabelsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v27);
    }

    return 0LL;
  }

  return v14;
}

  sub_1001279F4((uint64_t)p_vtable, (int)v7, (uint64_t)a2);
}

          __int128 v13 = 0LL;
          goto LABEL_32;
        }

        __int128 v13 = 1LL;
LABEL_32:
        if (SHIBYTE(v30) < 0) {
          operator delete(__dst[0]);
        }
        if (v7 + 24 == v6) {
          __int128 v16 = 0;
        }
        else {
          __int128 v16 = v13;
        }
        v7 += 48LL;
        if ((v16 & 1) == 0) {
          goto LABEL_70;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      uint64_t v14 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A9F >= 0) {
          std::string::size_type v15 = &xmmword_101993A88;
        }
        else {
          std::string::size_type v15 = (__int128 *)xmmword_101993A88;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820608);
        }
        if (byte_101993A9F >= 0) {
          uint64_t v21 = &xmmword_101993A88;
        }
        else {
          uint64_t v21 = (__int128 *)xmmword_101993A88;
        }
        int v32 = 136380675;
        double v33 = v21;
        LODWORD(v27) = 12;
        std::string::size_type v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v32,  v27);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoCustomLoiTable::insertOrReplace(const std::vector<CLMiLoCustomLoiTable::Entry> &)",  "%s\n",  v22);
      }

      sqlite3_reset(v8);
      goto LABEL_31;
    }

    __int128 v13 = 1LL;
LABEL_70:
    __int128 v24 = v31;
    uint64_t v31 = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    unint64_t v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      LOWORD(__dst[0]) = 0;
      __int128 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  __dst,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMiLoCustomLoiTable::insertOrReplace(const std::vector<CLMiLoCustomLoiTable::Entry> &)",  "%s\n",  v26);
    }

    return 0LL;
  }

  return v13;
}

          __int128 v16 = 0LL;
          goto LABEL_32;
        }

        __int128 v16 = 1LL;
LABEL_32:
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
        uint64_t v7 = v10 + 304;
        if (v7 == v6) {
          __int128 v19 = 0;
        }
        else {
          __int128 v19 = v16;
        }
        if ((v19 & 1) == 0) {
          goto LABEL_70;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      char v17 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993AB7 >= 0) {
          __int128 v18 = &xmmword_101993AA0;
        }
        else {
          __int128 v18 = (__int128 *)xmmword_101993AA0;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820780);
        }
        if (byte_101993AB7 >= 0) {
          __int128 v24 = &xmmword_101993AA0;
        }
        else {
          __int128 v24 = (__int128 *)xmmword_101993AA0;
        }
        __int128 v36 = 136380675;
        int v37 = v24;
        LODWORD(v30) = 12;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  &v36,  v30);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationLoggedEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v25);
      }

      sqlite3_reset(v8);
      goto LABEL_31;
    }

    __int128 v16 = 1LL;
LABEL_70:
    CFStringRef v27 = v35;
    uint64_t v35 = 0LL;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820780);
    }
    __int128 v26 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      LOWORD(v34.__r_.__value_.__l.__data_) = 0;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v34,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationLoggedEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v29);
    }

    return 0LL;
  }

  return v16;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 40),  (unint64_t)a2,  a4);
  if ((*(_DWORD *)(v5 + 168) & 0x40) != 0) {
LABEL_8:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(v5 + 48),  (unint64_t)a2,  a4);
LABEL_9:
  if (*(int *)(v5 + 72) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(void *)(*(void *)(v5 + 64) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 72));
  }

  if (*(int *)(v5 + 96) >= 1)
  {
    unsigned int v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(void *)(*(void *)(v5 + 88) + 8 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 96));
  }

  if (*(int *)(v5 + 120) >= 1)
  {
    uint64_t v9 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(void *)(*(void *)(v5 + 112) + 8 * v9++),  a2,  a4);
    while (v9 < *(int *)(v5 + 120));
  }

  double v10 = *(_DWORD *)(v5 + 168);
  if ((v10 & 0x400) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 136),  a3);
    double v10 = *(_DWORD *)(v5 + 168);
    if ((v10 & 0x800) == 0)
    {
LABEL_20:
      if ((v10 & 0x1000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_35;
    }
  }

  else if ((v10 & 0x800) == 0)
  {
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 144),  a3);
  double v10 = *(_DWORD *)(v5 + 168);
  if ((v10 & 0x1000) == 0)
  {
LABEL_21:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 132) |= 0x10u;
  *(double *)(a1 + 40) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_33:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 132) |= 0x40u;
  *(double *)(a1 + 56) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 132) |= 0x80u;
    *(double *)(a1 + 64) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 132) |= 0x10u;
  *(double *)(a1 + 40) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_33:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 132) |= 0x40u;
  *(double *)(a1 + 56) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 132) |= 0x80u;
    *(double *)(a1 + 64) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(double *)(v5 + 104),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 120),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(double *)(v5 + 104),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 120),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  int8x16_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    int8x16_t v11 = *(void *)(qword_1019A0BD8 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  uint64_t v7 = *(void *)(v5 + 64);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A0BF8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v7,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(_DWORD *)(v5 + 76),  (int)a2,  a4);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 124) |= 0x10u;
  *(double *)(a1 + 40) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_33:
  uint64_t v9 = *(_DWORD *)(a2 + 72);
  if (v9 >= 3) {
    sub_10122FF2C();
  }
  *(_DWORD *)(a1 + 124) |= 0x40u;
  *(_DWORD *)(a1 + 72) = v9;
  uint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 124) |= 0x80u;
    *(double *)(a1 + 56) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 124);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(double *)(v5 + 96),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 112),  a3);
  }

    __int128 v16 = *(_DWORD *)(a2 + 28);
    if (v16 >= 5) {
      sub_10122FFCC();
    }
    *(_DWORD *)(a1 + 80) |= 8u;
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v16;
    uint64_t v7 = *(_DWORD *)(a2 + 80);
    if ((v7 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    unsigned int v8 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 80) |= 0x10u;
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v8;
    uint64_t v7 = *(_DWORD *)(a2 + 80);
LABEL_14:
    if ((v7 & 0x80) != 0)
    {
      uint64_t v9 = *(_BYTE *)(a2 + 52);
      *(_DWORD *)(a1 + 80) |= 0x80u;
      *(_BYTE *)(a1 + 52) = v9;
      uint64_t v7 = *(_DWORD *)(a2 + 80);
    }
  }

  if ((v7 & 0x100) != 0)
  {
    double v10 = *(_DWORD *)(a2 + 72);
    if (v10 >= 2) {
      sub_10122FFA4();
    }
    *(_DWORD *)(a1 + 80) |= 0x100u;
    *(_DWORD *)(a1 + 72) = v10;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 49),  (BOOL)a2,  a4);
  }

    LODWORD(result) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 68) |= 0x10u;
    *(_DWORD *)(a1 + 32) = LODWORD(result);
    uint64_t v6 = *(_DWORD *)(a2 + 68);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

  *(_DWORD *)(a1 + 56) |= 8u;
  uint64_t v14 = *(void **)(a1 + 32);
  if (!v14)
  {
    uint64_t v14 = operator new(0x20uLL);
    v14[1] = 0LL;
    void v14[2] = 0LL;
    *uint64_t v14 = off_1018295C0;
    *((_DWORD *)v14 + 6) = 0;
    *(void *)(a1 + 32) = v14;
  }

  std::string::size_type v15 = *(void *)(a2 + 32);
  if (!v15) {
    std::string::size_type v15 = *(void *)(qword_1019A0D28 + 32);
  }
  *(float *)&uint64_t v5 = sub_1001F4F7C((uint64_t)v14, v15);
  uint64_t v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_38:
    char v17 = *(_BYTE *)(a2 + 44);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_BYTE *)(a1 + 44) = v17;
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_39;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  a2,  *(float *)(v5 + 60),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  *((void *)result + 2) = *(void *)&self->_estimatedHRRecoveryParam;
  *((_WORD *)result + 52) |= 2u;
  if ((*(_WORD *)&self->_has & 0x80) == 0) {
    return result;
  }
LABEL_16:
  *((void *)result + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)&self->_sessionVo2Max;
  *((_WORD *)result + 52) |= 0x80u;
  return result;
}

  p_fMinTimeBetweenForcedFetches = &self->fMinTimeBetweenForcedFetches;
  self->fMinTimeBetweenForcedFetches = 86400.0;
  uint64_t v25 = sub_1006E27E8();
  sub_100413284(v25, buf);
  __int128 v26 = sub_1002A82BC(*(uint64_t *)buf, "VO2MaxCloudKitMinTimeBetweenForcedFetches", &self->fMinTimeBetweenForcedFetches);
  CFStringRef v27 = v26;
  uint64_t v28 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_35;
  }
  uint64_t v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    std::string v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v27) {
      goto LABEL_41;
    }
  }

  else
  {
LABEL_35:
    if (!v26) {
      goto LABEL_41;
    }
  }

  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10182DF18);
  }
  uint64_t v31 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *(void *)p_fMinTimeBetweenForcedFetches;
    *(_DWORD *)__int128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Min time between forced fetches from CloudKit if no metadata updates: %{public}f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10182DF18);
    }
    uint64_t v42 = *(void *)p_fMinTimeBetweenForcedFetches;
    std::string::size_type v45 = 134349056;
    std::string::size_type v46 = v42;
    LODWORD(v44) = 12;
    std::string::size_type v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Min time between forced fetches from CloudKit if no metadata updates: %{public}f",  &v45,  v44);
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLVO2MaxCloudKitManager beginService]", "%s\n", v43);
  }

          *uint64_t v7 = v14;
          *char v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }

        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = i;
          unsigned int v8 = v13;
        }
      }
    }
  }

  else
  {
    int8x16_t v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  __int128 v13 = 0LL;
LABEL_32:
  sub_1003B5CCC(*(sqlite3 **)(a1 + 8), v12);
  memset(__str, 0, 24);
  std::string::operator=(&v36.__str_, (const std::string *)__str);
  sub_10023BE94((uint64_t)&v36);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  __int128 v19 = sub_10000CF44(&v35, (uint64_t)"INSERT INTO ", 12LL);
  int v20 = strlen(a2);
  uint64_t v21 = sub_10000CF44(v19, (uint64_t)a2, v20);
  std::string::size_type v22 = sub_10000CF44(v21, (uint64_t)"Counts", 6LL);
  unint64_t v23 = sub_10000CF44(v22, (uint64_t)" VALUES (", 9LL);
  __int128 v24 = (void *)std::ostream::operator<<(v23, v13);
  sub_10000CF44(v24, (uint64_t)")", 1LL);
  std::stringbuf::str((std::stringbuf::string_type *)__str, &v36);
  if (__str[23] >= 0) {
    uint64_t v25 = __str;
  }
  else {
    uint64_t v25 = *(char **)__str;
  }
  __int128 v26 = sub_1003B5AC8(a1, v25);
  CFStringRef v27 = v26;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v27) {
      goto LABEL_39;
    }
  }

  else if (v26)
  {
LABEL_39:
    sub_1003BB2BC(a1, v27);
    sub_1003B5CCC(*(sqlite3 **)(a1 + 8), v27);
    std::stringbuf::str((std::stringbuf::string_type *)__str, &v36);
    sub_1003BB8E4(a1, a2, v28, 1);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    std::stringbuf::str((std::stringbuf::string_type *)__str, &v36);
    sub_1003BB8E4(a1, a2, v29, 0);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    goto LABEL_51;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  std::string v30 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
  {
    *(void *)__str = 68289026LL;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't prepare row count insertion statement}",  __str,  0x12u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
  }

  uint64_t v31 = (os_log_s *)off_101934A28;
  if (os_signpost_enabled((os_log_t)off_101934A28))
  {
    *(void *)__str = 68289026LL;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't prepare row count insertion statement",  "{msg%{public}.0s:Couldn't prepare row count insertion statement}",  __str,  0x12u);
  }

    std::ostream::operator<<(&v22, (float)v7);
  }

  sub_10000CF44(&v22, (uint64_t)"]", 1LL);
  std::stringbuf::str(a2, &v23);
  std::streambuf::~streambuf(&v23);
  return std::ios::~ios(&v24);
}

    std::ostream::operator<<(&v22, v7);
  }

  sub_10000CF44(&v22, (uint64_t)"]", 1LL);
  std::stringbuf::str(a2, &v23);
  std::streambuf::~streambuf(&v23);
  return std::ios::~ios(&v24);
}

  PBDataWriterWriteUint32Field(a3, self->_nSampleAndHoldCatherine, 9LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_10:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  *((_DWORD *)a3 + 1std::iostream::~basic_iostream(v2, v3 + 8) = self->_nSampleAndHoldCatherine;
  *((_DWORD *)a3 + 26) |= 0x4000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_10:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  *((_DWORD *)result + 16) = self->_nInterpolatedCatherine;
  *((_DWORD *)result + 26) |= 0x1000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_9:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  self->_nSampleAndHoldCatherine = *((_DWORD *)a3 + 18);
  *(_DWORD *)&self->_has |= 0x4000u;
  int v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x80) == 0)
  {
LABEL_10:
    if ((v3 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

      int8x16_t v11 = 0LL;
      goto LABEL_32;
    }
  }

  double v10 = 0LL;
LABEL_9:
  if (a4 == 1) {
    int8x16_t v11 = v10;
  }
  else {
    int8x16_t v11 = v9;
  }
LABEL_32:
  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  return v11;
}

  std::mutex::unlock(v4);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  a2,  *(double *)(v5 + 72),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  std::string::size_type v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if (v15 >= 0x80)
  {
    __int128 v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    int v3 = a1[13];
  }

  else
  {
    __int128 v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_35:
    char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if (v17 >= 0x80)
    {
      __int128 v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int v3 = a1[13];
    }

    else
    {
      __int128 v18 = 2;
    }

    uint64_t v4 = (v18 + v4);
  }

  std::string::size_type v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if ((v15 & 0x80000000) != 0)
  {
    __int128 v16 = 11;
  }

  else if (v15 >= 0x80)
  {
    __int128 v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    int v3 = a1[11];
  }

  else
  {
    __int128 v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_37:
    char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    else {
      __int128 v18 = 2;
    }
    uint64_t v4 = (v18 + v4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(unsigned __int8 *)(v5 + 98),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      return result;
    }
    goto LABEL_35;
  }

  __int128 v13 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    __int128 v13 = v4;
  }
  if ((v3 & 0x20) != 0) {
    v13 += 9;
  }
  if ((v3 & 0x40) != 0) {
    v13 += 9;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v5 = v13 + 9;
  }
  else {
    uint64_t v5 = v13;
  }
LABEL_40:
  if ((v3 & 0xFF00) != 0)
  {
    uint64_t v14 = v5 + 9;
    if ((v3 & 0x100) == 0) {
      uint64_t v14 = v5;
    }
    if ((v3 & 0x200) != 0) {
      v14 += 9;
    }
    if ((v3 & 0x400) != 0) {
      v14 += 9;
    }
    if ((v3 & 0x800) != 0) {
      v14 += 2;
    }
    if ((v3 & 0x1000) != 0) {
      v14 += 2;
    }
    if ((v3 & 0x2000) != 0) {
      uint64_t v5 = v14 + 2;
    }
    else {
      uint64_t v5 = v14;
    }
    if ((v3 & 0x4000) != 0)
    {
      std::string::size_type v15 = *(void *)(a1 + 80);
      if (!v15) {
        std::string::size_type v15 = *(void *)(qword_1019A1250 + 80);
      }
      __int128 v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006453FC(v15, a2);
      char v17 = (int)v16;
      else {
        __int128 v18 = 1;
      }
      uint64_t v5 = (v5 + v17 + v18 + 1);
      int v3 = *(_DWORD *)(a1 + 104);
    }

    if ((v3 & 0x8000) != 0)
    {
      __int128 v19 = *(void *)(a1 + 88);
      if (!v19) {
        __int128 v19 = *(void *)(qword_1019A1250 + 88);
      }
      int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006457EC(v19, a2);
      std::string::size_type v22 = (int)v20;
      else {
        unint64_t v23 = 1;
      }
      uint64_t v5 = (v5 + v22 + v23 + 2);
    }
  }

  *(_DWORD *)(a1 + 100) = v5;
  return v5;
}

  __int128 v13 = a2[12];
  a1[20] |= 0x400u;
  a1[12] = v13;
  uint64_t v5 = a2[20];
  if ((v5 & 0x800) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_33;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v5[14],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  __int128 v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    int v3 = a1[20];
  }

  else
  {
    uint64_t v14 = 1;
  }

  uint64_t v4 = (v4 + v14 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }

  __int128 v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 52);
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0) {
      goto LABEL_21;
    }
LABEL_41:
    __int128 v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 52);
    }

    else
    {
      int v20 = 2;
    }

    uint64_t v4 = (v20 + v4);
    if ((v3 & 0x80) == 0) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }

          uint64_t v21 = (_BYTE *)*((void *)this + 1);
          std::string::size_type v22 = (_BYTE *)*((void *)this + 2);
          if (v21 >= v22 || *v21 != 9)
          {
            if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
              uint64_t result = 1LL;
              *((_BYTE *)this + 36) = 1;
              return result;
            }

            goto LABEL_2;
          }

          *((void *)this + 1) = v21 + 1;
        }

        return 0LL;
      }

      if (v8 == 2) {
        break;
      }
    }

    if (v8 == 4) {
      return 1LL;
    }
  }

  uint64_t result = sub_10006E130(this, v5);
  if ((_DWORD)result) {
    goto LABEL_31;
  }
  return result;
}

    uint64_t v14 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v14;
    if ((*(_DWORD *)(a2 + 56) & 0x20) == 0) {
      return;
    }
LABEL_32:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    std::string::size_type v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      std::string::size_type v15 = operator new(0x18uLL);
      v15[1] = 0LL;
      v15[2] = 0LL;
      *std::string::size_type v15 = &off_1018595C0;
      *(void *)(a1 + 40) = v15;
    }

    __int128 v16 = *(void *)(a2 + 40);
    if (!v16) {
      __int128 v16 = *(void *)(qword_1019A1818 + 40);
    }
    sub_10081AFF8((uint64_t)v15, v16);
  }

    std::string v30 = v10;
LABEL_32:
    *(_OWORD *)std::string v30 = v52;
    std::string::size_type v43 = v53;
    BOOL v44 = v54;
    std::string::size_type v45 = *(_OWORD *)v56;
    *(_OWORD *)(v30 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v55;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 16) = v43;
    *(_OWORD *)(v30 + 32) = v44;
    std::string::size_type v46 = *(_OWORD *)&v56[16];
    double v47 = v57;
    std::string::size_type v48 = v59;
    *(_OWORD *)(v30 + 112) = v58;
    *(_OWORD *)(v30 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v48;
    *(_OWORD *)(v30 + 80) = v46;
    *(_OWORD *)(v30 + 96) = v47;
    __int128 v49 = v60;
    std::string::size_type v50 = v61;
    __int128 v51 = v62;
    *(void *)(v30 + 192) = v63;
    *(_OWORD *)(v30 + 160) = v50;
    *(_OWORD *)(v30 + 176) = v51;
    *(_OWORD *)(v30 + 144) = v49;
LABEL_33:
    uint64_t v7 = v9 + 200;
    v8 += 200LL;
  }

  while (v9 + 200 != a2);
  return result;
}

    std::string v30 = v10;
LABEL_32:
    *(_OWORD *)std::string v30 = v52;
    std::string::size_type v43 = v53;
    BOOL v44 = v54;
    std::string::size_type v45 = v56;
    *(_OWORD *)(v30 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v55;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 16) = v43;
    *(_OWORD *)(v30 + 32) = v44;
    std::string::size_type v46 = v57;
    double v47 = v58;
    std::string::size_type v48 = v60;
    *(_OWORD *)(v30 + 112) = v59;
    *(_OWORD *)(v30 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v48;
    *(_OWORD *)(v30 + 80) = v46;
    *(_OWORD *)(v30 + 96) = v47;
    __int128 v49 = *(_OWORD *)v61;
    std::string::size_type v50 = *(_OWORD *)&v61[16];
    __int128 v51 = v62;
    *(void *)(v30 + 192) = v63;
    *(_OWORD *)(v30 + 160) = v50;
    *(_OWORD *)(v30 + 176) = v51;
    *(_OWORD *)(v30 + 144) = v49;
LABEL_33:
    uint64_t v7 = v9 + 200;
    v8 += 200LL;
  }

  while (v9 + 200 != a2);
  return result;
}

      v16 += 24LL;
    }

    while (v16 != v17);
  }

        if (v41 >= (unint64_t)v43)
        {
          v80 = (double *)(v41 - 96);
        }

        else
        {
          unsigned __int8 v55 = (double *)(a1 + v31);
          unsigned __int8 v56 = v43;
          do
          {
            unsigned __int8 v57 = *((_OWORD *)v55 + 1);
            v315 = *(_OWORD *)v55;
            v316 = v57;
            char v58 = *((_OWORD *)v55 + 2);
            std::string v59 = *((_OWORD *)v55 + 3);
            std::string v60 = *((_OWORD *)v55 + 5);
            v319 = *((_OWORD *)v55 + 4);
            v320 = v60;
            v317 = v58;
            v318 = v59;
            std::string v61 = *((_OWORD *)v56 + 5);
            std::string v63 = *((_OWORD *)v56 + 2);
            std::string v62 = *((_OWORD *)v56 + 3);
            *((_OWORD *)v55 + 4) = *((_OWORD *)v56 + 4);
            *((_OWORD *)v55 + 5) = v61;
            *((_OWORD *)v55 + 2) = v63;
            *((_OWORD *)v55 + 3) = v62;
            std::string v64 = *((_OWORD *)v56 + 1);
            *(_OWORD *)unsigned __int8 v55 = *(_OWORD *)v56;
            *((_OWORD *)v55 + 1) = v64;
            std::string v65 = v316;
            *(_OWORD *)unsigned __int8 v56 = v315;
            *((_OWORD *)v56 + 1) = v65;
            std::string v66 = v317;
            std::string v67 = v318;
            std::string v68 = v320;
            *((_OWORD *)v56 + 4) = v319;
            *((_OWORD *)v56 + 5) = v68;
            *((_OWORD *)v56 + 2) = v66;
            *((_OWORD *)v56 + 3) = v67;
            std::string v69 = (uint64_t)(v55 + 12);
            do
            {
              uint64_t v70 = *(double *)(v69 + 32);
              *(float *)&v315 = v70;
              v321[0] = (float)(int)sub_100C3A4FC(v69);
              int v71 = sub_10094DE48((float *)&v315, v321);
              uint64_t v72 = *(double *)&v311;
              *(float *)&v315 = v72;
              v321[0] = (float)(int)sub_100C3A4FC((uint64_t)&v309);
              unint64_t v73 = sub_10094DE48((float *)&v315, v321);
              v69 += 96LL;
            }

            while (v71 > 0.0 && v71 > v73);
            unsigned __int8 v55 = (double *)(v69 - 96);
            do
            {
              unint64_t v75 = *(v56 - 8);
              v56 -= 12;
              *(float *)&unint64_t v75 = v75;
              LODWORD(v315) = LODWORD(v75);
              v321[0] = (float)(int)sub_100C3A4FC((uint64_t)v56);
              unint64_t v76 = sub_10094DE48((float *)&v315, v321);
              CFStringRef v77 = *(double *)&v311;
              *(float *)&v315 = v77;
              v321[0] = (float)(int)sub_100C3A4FC((uint64_t)&v309);
              int v78 = sub_10094DE48((float *)&v315, v321);
            }

            while (v76 <= 0.0 || v76 <= v78);
          }

          while (v55 < v56);
          v80 = (double *)(v69 - 192);
        }

        if (v80 != (double *)a1)
        {
          v81 = *((_OWORD *)v80 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v80;
          *(_OWORD *)(a1 + 16) = v81;
          unint64_t v82 = *((_OWORD *)v80 + 2);
          int v83 = *((_OWORD *)v80 + 3);
          v84 = *((_OWORD *)v80 + 5);
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v80 + 4);
          *(_OWORD *)(a1 + 80) = v84;
          *(_OWORD *)(a1 + 32) = v82;
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v83;
        }

        BOOL v85 = v310;
        *(_OWORD *)v80 = v309;
        *((_OWORD *)v80 + 1) = v85;
        CFStringRef v86 = v311;
        BOOL v87 = v312;
        CFStringRef v88 = v314;
        *((_OWORD *)v80 + 4) = v313;
        *((_OWORD *)v80 + 5) = v88;
        *((_OWORD *)v80 + 2) = v86;
        *((_OWORD *)v80 + 3) = v87;
        int v89 = v41 >= (unint64_t)v43;
        a2 = (double *)v306;
        if (!v89)
        {
LABEL_53:
          sub_10094E2C4(a1, v80, a3, a4 & 1);
          a4 = 0;
          uint64_t v9 = (unint64_t)(v80 + 12);
          continue;
        }

        uint64_t v90 = sub_10094FACC(a1, (uint64_t)v80);
        uint64_t v9 = (unint64_t)(v80 + 12);
        if (!sub_10094FACC((uint64_t)(v80 + 12), v306))
        {
          if (v90) {
            continue;
          }
          goto LABEL_53;
        }

        a2 = v80;
        if (!v90) {
          goto LABEL_1;
        }
        return;
    }
  }

  sub_1002F0B04(buf);
  __int128 v38 = (unsigned __int8 *)(a1 + 618);
  std::string::size_type v39 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceUsePipelinePositioning", (BOOL *)(a1 + 618));
  uint64_t v40 = v39;
  __int128 v41 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_35;
  }
  uint64_t v42 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    std::string::size_type v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (!v40) {
      goto LABEL_41;
    }
  }

  else
  {
LABEL_35:
    if (!v39) {
      goto LABEL_41;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  BOOL v44 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v45 = *v38;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding Pipeline positioning usage to %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    char v127 = *v38;
    v161 = 67174657;
    LODWORD(v162) = v127;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding Pipeline positioning usage to %{private}d",  &v161,  v157);
    v129 = (char *)v128;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v128);
  }

  int8x16_t v11 = *(void *)(v5 + 64);
  if (!v11) {
    int8x16_t v11 = *(void *)(qword_1019A1A90 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

        if (v8 != 4)
        {
          continue;
        }

        return 1LL;
      default:
        unsigned int v8 = TagFallback & 7;
        goto LABEL_31;
    }
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  uint64_t v14 = *(void *)(a1 + 48);
  std::string::size_type v15 = *(unsigned __int8 *)(v14 + 23);
  __int128 v16 = v15;
  char v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    __int128 v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    __int128 v18 = v17;
  }
  if (v18 >= 0x80)
  {
    __int128 v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    std::string::size_type v15 = *(unsigned __int8 *)(v14 + 23);
    char v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 72);
    __int128 v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    __int128 v19 = 1;
  }

  if (v16 < 0) {
    std::string::size_type v15 = v17;
  }
  v5 += v19 + v15 + 1;
  if ((v3 & 0x40) != 0)
  {
LABEL_40:
    int v20 = *(void *)(a1 + 56);
    if (!v20) {
      int v20 = *(void *)(qword_1019A1BC0 + 56);
    }
    uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B21CD0(v20, a2);
    std::string::size_type v22 = (int)v21;
    else {
      unint64_t v23 = 1;
    }
    v5 += v22 + v23 + 1;
  }

  int8x16_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    int8x16_t v11 = *(void *)(qword_1019A1C80 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1CE8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrConfidenceMean),  @"hrConfidenceMean");
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  PBDataWriterWriteDoubleField(a3, 9LL, self->_hrCadenceAgreementMean);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  *((void *)a3 + 5) = *(void *)&self->_hrCadenceAgreementMean;
  *((_DWORD *)a3 + 41) |= 0x10u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  *((void *)result + 7) = *(void *)&self->_hrConfidenceMean;
  *((_DWORD *)result + 41) |= 0x40u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  self->_hrCadenceAgreementMean = *((double *)a3 + 5);
  *(_DWORD *)&self->_has |= 0x10u;
  int v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x10000) == 0)
  {
LABEL_11:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  char v17 = *(_BYTE *)(a2 + 67);
  *(_DWORD *)(a1 + 76) |= 0x400u;
  *(_BYTE *)(a1 + 67) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      return;
    }
    goto LABEL_19;
  }

  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  return v4;
}

    *(void *)__int128 buf = v31;
    sub_1004F206C((void ***)buf);
  }

          uint64_t v21 = (void *)v16[1];
          if (v21)
          {
            do
            {
              std::string::size_type v22 = v21;
              uint64_t v21 = (void *)*v21;
            }

            while (v21);
          }

          else
          {
            do
            {
              std::string::size_type v22 = (void *)v16[2];
              unint64_t v23 = *v22 == (void)v16;
              __int128 v16 = v22;
            }

            while (!v23);
          }

          __int128 v16 = v22;
          if (v22 == (void *)v134) {
            goto LABEL_175;
          }
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        int v20 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "TileMgr, tile ptr is NULL, #CloneMe",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_31;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        *(_WORD *)std::string __p = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, tile ptr is NULL, #CloneMe",  __p,  v126);
        uint64_t v40 = (char *)v46;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v46);
LABEL_74:
        if (v40 != buf) {
          free(v40);
        }
        goto LABEL_31;
      }

      goto LABEL_174;
    }

    memset(__p, 0, 24);
    std::string v61 = a2 + 184;
    sub_1006031FC(a2 + 184, (uint64_t *)&v141);
    std::string v62 = v141.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v141.__r_.__value_.__l.__data_ == &v141.__r_.__value_.__r.__words[1])
    {
LABEL_171:
      sub_100603B94((uint64_t)&v141, (char *)v141.__r_.__value_.__l.__size_);
      BOOL v85 = *(unsigned int **)__p;
      CFStringRef v86 = *(unsigned int **)&__p[8];
      for (uint64_t i = &OBJC_METACLASS___CLPrivacyManager.vtable; v85 != v86; v85 += 12)
        sub_100602A88(v61, v85);
      *(void *)__int128 buf = __p;
      sub_100222DE8((void ***)buf);
LABEL_174:
      LODWORD(v1std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      LODWORD(v17) = 0;
LABEL_175:
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      BOOL v87 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
      {
        else {
          CFStringRef v88 = *(void *)(v136 + 8);
        }
        int v89 = *(unsigned __int8 *)(v3 + 64);
        uint64_t v90 = sub_100019240(v136 + 184);
        *(_DWORD *)__int128 buf = 136447234;
        *(void *)&uint8_t buf[4] = v88;
        v152 = 1026;
        LODWORD(v153) = v89;
        WORD2(v153) = 1026;
        *(_DWORD *)((char *)&v153 + 6) = v17;
        WORD5(v153) = 1026;
        HIDWORD(v153) = v18;
        *(_WORD *)v154 = 2050;
        *(void *)&v154[2] = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_INFO,  "TileMgr, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu",  buf,  0x28u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_183;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      char v119 = qword_101934858;
      else {
        int v120 = *(void *)(v136 + 8);
      }
      int v121 = *(unsigned __int8 *)(v3 + 64);
      char v122 = sub_100019240(v136 + 184);
      *(_DWORD *)std::string __p = 136447234;
      *(void *)&__p[4] = v120;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v121;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v17;
      *(_WORD *)&__p[24] = 1026;
      *(_DWORD *)&__p[26] = v18;
      *(_WORD *)v143 = 2050;
      *(void *)&v143[2] = v122;
      LODWORD(v126) = 40;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v119,  1LL,  "TileMgr, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu",  __p,  v126);
      std::string v60 = (char *)v123;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v123);
      goto LABEL_232;
    }

    while (1)
    {
      std::string v63 = sub_1006025CC(v61, (unsigned int *)(v62 + 32));
      std::string v64 = (double *)v63;
      if (!v63)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        std::string v69 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "TileMgr, tile ptr is NULL, #CloneMe",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          *(_WORD *)v137 = 0;
          LODWORD(v126) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, tile ptr is NULL, #CloneMe",  v137,  v126);
          int v71 = (char *)v70;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v70);
          if (v71 != buf) {
            free(v71);
          }
        }

        goto LABEL_141;
      }

      if (sub_100C0CCC8(v63))
      {
        if (!sub_100C148B0(v64, *(void *)(v3 + 48), *(float *)(v136 + 144)))
        {
          if (sub_100C145F0((uint64_t)v64, *(unsigned __int8 *)(v4 + 200)))
          {
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101879178);
            }
            std::string v65 = (os_log_s *)qword_101934838;
            if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v64 + 16LL))(buf, v64);
              std::string v66 = buf;
              if (SBYTE9(v153) < 0) {
                std::string v66 = *(_BYTE **)buf;
              }
              *(_DWORD *)v137 = 136315138;
              *(void *)&v137[4] = v66;
              _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "TILE: updateProtectionClass, location moved, locking tileid, %s",  v137,  0xCu);
              if (SBYTE9(v153) < 0) {
                operator delete(*(void **)buf);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934830 != -1) {
                dispatch_once(&qword_101934830, &stru_101879178);
              }
              unint64_t v76 = qword_101934838;
              (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v64 + 16LL))(v137, v64);
              CFStringRef v77 = v137;
              if (v138 < 0) {
                CFStringRef v77 = *(_BYTE **)v137;
              }
              __int16 v139 = 136315138;
              uint64_t v140 = v77;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v76,  2LL,  "TILE: updateProtectionClass, location moved, locking tileid, %s",  (const char *)&v139);
              int v79 = v78;
              if (v138 < 0) {
                operator delete(*(void **)v137);
              }
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v79);
              if (v79 != buf) {
                free(v79);
              }
            }

            std::string v67 = *(void *)&__p[8];
            if (*(void *)&__p[8] >= *(void *)&__p[16])
            {
              std::string v68 = sub_10022358C((uint64_t *)__p, (__int128 *)(v62 + 32));
            }

            else
            {
              sub_100222F00((uint64_t)__p, (__int128 *)(v62 + 32));
              std::string v68 = v67 + 48;
            }

            *(void *)&__p[8] = v68;
            goto LABEL_141;
          }

          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          uint64_t v72 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v64 + 16LL))(buf, v64);
            unint64_t v73 = buf;
            if (SBYTE9(v153) < 0) {
              unint64_t v73 = *(_BYTE **)buf;
            }
            *(_DWORD *)v137 = 136315138;
            *(void *)&v137[4] = v73;
            _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe",  v137,  0xCu);
            if (SBYTE9(v153) < 0) {
              operator delete(*(void **)buf);
            }
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101879158);
            }
            v80 = qword_101934858;
            (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v64 + 16LL))(v137, v64);
            v81 = v137;
            if (v138 < 0) {
              v81 = *(_BYTE **)v137;
            }
            __int16 v139 = 136315138;
            uint64_t v140 = v81;
            LODWORD(v126) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  16LL,  "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe",  &v139,  v126);
            int v83 = v82;
            if (v138 < 0) {
              operator delete(*(void **)v137);
            }
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v83);
            if (v83 != buf) {
              free(v83);
            }
          }
        }

        ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL);
      }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      uint64_t v31 = [obj countByEnumeratingWithState:&v37 objects:v48 count:16];
      uint64_t v5 = v31;
    }

    while (v31);
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101879AA8);
  }
  int v32 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#AuthDatabaseMigration_0 successfully migrated from legacy clients.plist",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101879AA8);
    }
    v36[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#AuthDatabaseMigration_0 successfully migrated from legacy clients.plist",  v36,  2);
    __int128 v34 = (uint8_t *)v33;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLAuthorizationDatabase _internalMigrationLegacyKeys]", "%s\n", v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  __int128 v51 = sub_1007BBFC0(a1 + 896);
  sub_1006FBA54((float *)&v139 + 1, (uint64_t *)&__p, a6, a1 + 1272, (uint64_t)&v141, v51, a8, a7);
  char v52 = -1.0;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (*(void *)(a1 + 16) == 1LL) {
    goto LABEL_32;
  }
  unsigned __int8 v56 = *(void *)a1;
  if (*(_DWORD *)(a1 + 1608) == 3)
  {
    if (v56 != 15)
    {
LABEL_32:
      std::string v54 = 0;
      unsigned __int8 v55 = 4294967292LL;
LABEL_40:
      unsigned __int8 v57 = -1.0;
      goto LABEL_41;
    }
  }

  else
  {
    std::string v54 = 0;
    unsigned __int8 v55 = 4294967292LL;
    if (v56 > 0x18 || ((1LL << v56) & 0x1028000) == 0) {
      goto LABEL_40;
    }
  }

  if (sub_100E5C7EC(a1 + 1640))
  {
    unsigned __int8 v55 = sub_100E5C7EC(a1 + 1640);
    std::string v54 = 0;
    goto LABEL_40;
  }

  unint64_t v76 = *(double *)&v141;
  char v52 = v142;
  LODWORD(v55) = HIDWORD(v143);
  std::string v54 = v144;
  unsigned __int8 v57 = -1.0;
  if (*(double *)&v141 == -1.0)
  {
    CFStringRef v77 = 0.0;
  }

  else
  {
    CFStringRef v77 = sub_100F43030(*(_DWORD *)(a1 + 1276), (int)*(float *)(a1 + 1292));
    unsigned __int8 v57 = 65.0;
    if (v76 + v77 <= 65.0)
    {
      unsigned __int8 v57 = 14.0;
      if (v76 + v77 >= 14.0)
      {
        *(_DWORD *)(a1 + 1544) = 1;
        unsigned __int8 v57 = v76 + v77;
        goto LABEL_59;
      }

      int v78 = 3;
    }

    else
    {
      int v78 = 2;
    }

    *(_DWORD *)(a1 + 1544) = v78;
  }

  __int128 v19 = 2LL;
LABEL_35:
  __int128 v34 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v35
  __int128 v36 = v31;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v38);
  return v19;
}

        sub_100DDD030(v8);
        return;
      }

      if (v7 != 7 && v7 != 15) {
        goto LABEL_19;
      }
LABEL_30:
      unsigned int v8 = a1[9];
      if (!v8) {
        return;
      }
      goto LABEL_31;
    }

    if (v7 > 66)
    {
      if (v7 == 67)
      {
LABEL_33:
        unsigned int v8 = a1[8];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }

      if (v7 == 143) {
        goto LABEL_30;
      }
    }

    else
    {
      if (v7 == 19)
      {
        unsigned int v8 = a1[4];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }

      if (v7 == 34)
      {
        unsigned int v8 = a1[6];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }
    }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

  uint64_t v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x800u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 52) = v14;
  CFStringRef v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "metMinutePercentile95", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  uint64_t result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  CFStringRef v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "instantaneousPower", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  CFStringRef v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "crossTrainerDistance", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  uint64_t result = *(float *)(a2 + 88);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = result;
  CFStringRef v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "impulseMagnitude", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  double v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 16) = v10;
  CFStringRef v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "currentLoftMagnitude", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "accelUnfilteredZ", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }

  __int128 v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  CFStringRef v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "pauseBtwPeaksSeconds", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  __int128 v16 = *(_DWORD *)(a2 + 120);
  v6 |= 0x1000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 120) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 172);
  v8 |= 0x40u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 172) = v21;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 1) == 0)
  {
LABEL_16:
    if ((v7 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 136));
  uint64_t v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  int8x16_t v11 = *(_BYTE *)(a2 + 63);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 63) = v11;
  CFStringRef v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x10000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "isDescalationRequired", *(_BYTE *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 61), 0x12Eu);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  __int128 v13 = *(_BYTE *)(a2 + 89);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 89) = v13;
  CFStringRef v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThreshold", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x6Bu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  __int128 v13 = *(_DWORD *)(a2 + 96);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 96) = v13;
  CFStringRef v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "pointType", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  char v17 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 120) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "magnitudePeriodicityUpperPercentile", *(float *)(a1 + 124));
  int8x16_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x800) == 0)
  {
LABEL_14:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  __int128 v16 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v16;
  CFStringRef v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "numTriggersInWindow", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0) {
      goto LABEL_16;
    }
LABEL_33:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 64));
    if ((*(_WORD *)(a1 + 96) & 0x1000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x132u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x134u);
  }

  uint64_t v21 = *(void *)(a2 + 168);
  *(_WORD *)(a1 + 192) |= 0x800u;
  *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v21;
  int8x16_t v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x80) == 0)
  {
LABEL_19:
    if ((v11 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 112));
  uint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  CFStringRef v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "poseX", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  CFStringRef v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  char v17 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 124) |= 2u;
  *(_DWORD *)(a1 + 64) = v17;
  double v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  double v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 40) = v10;
  CFStringRef v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  uint64_t v4 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 124) = v3;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  CFStringRef v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  CFStringRef v27 = *(_DWORD *)(a2 + 140);
  *(_WORD *)(a1 + 168) |= 8u;
  *(_DWORD *)(a1 + 140) = v27;
  __int128 v19 = *(_WORD *)(a2 + 168);
  if ((v19 & 0x40) == 0)
  {
LABEL_20:
    if ((v19 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  std::string::size_type v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 52) = v15;
  CFStringRef v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "predictionIntercept", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 72) = v14;
  CFStringRef v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "centripetalAccelMeanY", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  CFStringRef v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedian", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1Mean", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "accelFFTBin2", *(float *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }

  __int128 v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 36) = v13;
  CFStringRef v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "luxBaseline", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t v14 = *(_BYTE *)(a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 77) = v14;
  CFStringRef v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "runningModeDuration", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  char v17 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 20) = v17;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0) {
    goto LABEL_32;
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  uint64_t v9 = *(void *)(a2 + 32);
  if (v9)
  {
    double v10 = operator new(0x18uLL);
    int8x16_t v11 = sub_10115BC74((uint64_t)v10, v9);
    __int128 v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  __int128 v13 = *(void *)(a2 + 192);
  if ((v13 & 0x400) != 0)
  {
    std::string::size_type v39 = *(_DWORD *)(a2 + 80);
    *(void *)(a1 + 192) |= 0x400uLL;
    *(_DWORD *)(a1 + 80) = v39;
    __int128 v13 = *(void *)(a2 + 192);
    if ((v13 & 0x200) == 0)
    {
LABEL_36:
      if ((v13 & 0x2000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_74;
    }
  }

  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_36;
  }

  uint64_t v40 = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 192) |= 0x200uLL;
  *(_DWORD *)(a1 + 76) = v40;
  __int128 v13 = *(void *)(a2 + 192);
  if ((v13 & 0x2000000) == 0)
  {
LABEL_37:
    if ((v13 & 0x1000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_75;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  CFStringRef v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  __int128 v16 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 80) = v16;
  CFStringRef v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
LABEL_33:
    PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 116) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 0xEu);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x10u);
  }

  uint64_t v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x4000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  if ((*(_WORD *)(a2 + 80) & 2) != 0) {
    goto LABEL_32;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(float *)(a1 + 64) = result;
  CFStringRef v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  double v10 = *(_DWORD *)(a2 + 108);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 10std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  CFStringRef v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 112) = result;
  CFStringRef v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "speedBasedStartTime", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }

  PB::TextFormatter::format(this, "integratedAngleYg", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }

      os_activity_scope_leave(&state);
      return;
    default:
      goto LABEL_31;
  }

void sub_10000F490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000F51C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v41 = 0uLL;
    unint64_t v42 = 0LL;
    v33.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v33, "SELECT DISTINCT ");
    uint64_t v6 = std::string::append(&v33, "ClientID");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v8 = std::string::append(&v34, " FROM ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v35, "MicroLocationLabels");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v36, " WHERE ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v14 = std::string::append(&v37, "ClientID");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v16 = std::string::append(&v38, " != ''");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v43, " LIMIT ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v32, a2);
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v20 = &v32;
    }
    else {
      int v20 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v32.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = std::string::append(&v44, (const std::string::value_type *)v20, size);
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t cap = v22->__r_.__value_.__l.__cap_;
    __int128 __p = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    sub_1003C0D54(*(void *)a1, p_p, &v44);
    std::string::size_type v25 = v44.__r_.__value_.__r.__words[0];
    __int128 v26 = (sqlite3_stmt *)sub_100019240((uint64_t)v44.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v26) == 100)
    {
      sub_100011CB8(v26, 0, &v44);
      CFStringRef v27 = (_OWORD *)*((void *)&v41 + 1);
      if (*((void *)&v41 + 1) >= v42)
      {
        uint64_t v29 = sub_100013DF0((uint64_t *)&v41, (__int128 *)&v44);
      }

      else
      {
        if ((char)v44.__r_.__value_.__s.__size_ < 0)
        {
          sub_1010DD48C(*((_BYTE **)&v41 + 1), v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        }

        else
        {
          __int128 v28 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
          *(void *)(*((void *)&v41 + 1) + 16LL) = v44.__r_.__value_.__l.__cap_;
          _OWORD *v27 = v28;
        }

        uint64_t v29 = (uint64_t)v27 + 24;
      }

      *((void *)&v41 + 1) = v29;
    }

    sqlite3_reset(v26);
    *(_OWORD *)a3 = v41;
    *(void *)(a3 + 16) = v42;
    unint64_t v42 = 0LL;
    __int128 v41 = 0uLL;
    if (v25) {
      (*(void (**)(std::string::size_type))(*(void *)v25 + 8LL))(v25);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    sub_1000129D4((void ***)&v44);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    std::string v30 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v44.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all client IDs",  (uint8_t *)&v44,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v44, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v41) = 0;
      uint64_t v31 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all client IDs",  &v41,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<std::string> CLMicroLocationRecordingLabelsTable::selectAllClientIds(uint32_t)",  "%s\n",  (const char *)v31);
      if (v31 != &v44) {
        free(v31);
      }
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

void sub_10000F9F4(_Unwind_Exception *a1)
{
}

void sub_10000FD10(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v27.__r_.__value_.__s.__size_ = 15;
    strcpy((char *)&v27, "(SELECT * FROM ");
    unsigned int v8 = std::string::append(&v27, "MicroLocationLabels");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v28, " WHERE ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v29, "ClientID");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v14 = std::string::append(&v30, " LIKE '");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      __int128 v17 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    __int128 v19 = std::string::append(&v31, v17, v18);
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v21 = std::string::append(&v32, "')");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type cap = v21->__r_.__value_.__l.__cap_;
    __int128 __p = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v23 = *(void *)a1;
    sub_1010DDBC0(&v32, "ReceivedTimestamp");
    sub_10000E594(v23, (uint64_t)&__p, a3, (uint64_t)&v32, 0, a4);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    __int128 v24 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v32.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v32,  2);
      __int128 v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabe lsForClient(const std::string &, uint32_t)",  "%s\n",  v25);
    }

    a4->__r_.__value_.__r.__words[0] = 0LL;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_100010098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

void sub_100010160( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, std::string *a6@<X8>, double a7@<D0>)
{
  v89[0] = a3;
  v89[1] = a4;
  if (*(_BYTE *)(a1 + 8))
  {
    std::to_string(&v88, a7);
    v67.__r_.__value_.__s.__size_ = 15;
    strcpy((char *)&v67, "(SELECT * FROM ");
    __int128 v11 = std::string::append(&v67, "MicroLocationLabels");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v13 = std::string::append(&v68, " WHERE ");
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v15 = std::string::append(&v69, "ClientID");
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v17 = std::string::append(&v70, " LIKE '");
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      __int128 v20 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v21 = *(void *)(a2 + 8);
    }
    __int128 v22 = std::string::append(&v71, v20, v21);
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v72, "' AND ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v26 = std::string::append(&v73, "TriggerUUID");
    __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0LL;
    v26->__r_.__value_.__l.__cap_ = 0LL;
    v26->__r_.__value_.__r.__words[0] = 0LL;
    char v66 = 4;
    strcpy(__s, " IN ");
    std::string v28 = std::string::append(&v74, __s, 4uLL);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    char v64 = 9;
    strcpy((char *)v63, "( SELECT ");
    std::string v30 = std::string::append(&v75, (const std::string::value_type *)v63, 9uLL);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::string v32 = std::string::append(&v76, "TriggerUUID");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    std::string v34 = std::string::append(&v77, " FROM ");
    __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0LL;
    v34->__r_.__value_.__l.__cap_ = 0LL;
    v34->__r_.__value_.__r.__words[0] = 0LL;
    std::string v36 = std::string::append(&v78, "MicroLocationRecordingEvents");
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    std::string v38 = std::string::append(&v79, " WHERE ");
    __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(v59, "RtLoiGroupId");
    sub_100053C78((const void **)v59, v89, (uint64_t)__p);
    if ((v62 & 0x80u) == 0) {
      uint64_t v40 = __p;
    }
    else {
      uint64_t v40 = (void **)__p[0];
    }
    if ((v62 & 0x80u) == 0) {
      std::string::size_type v41 = v62;
    }
    else {
      std::string::size_type v41 = (std::string::size_type)__p[1];
    }
    unint64_t v42 = std::string::append(&v80, (const std::string::value_type *)v40, v41);
    __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0LL;
    v42->__r_.__value_.__l.__cap_ = 0LL;
    v42->__r_.__value_.__r.__words[0] = 0LL;
    std::string v44 = std::string::append(&v81, ") AND ");
    __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0LL;
    v44->__r_.__value_.__l.__cap_ = 0LL;
    v44->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v46 = std::string::append(&v82, "ReceivedTimestamp");
    __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0LL;
    v46->__r_.__value_.__l.__cap_ = 0LL;
    v46->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v48 = std::string::append(&v83, " > ");
    __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0LL;
    v48->__r_.__value_.__l.__cap_ = 0LL;
    v48->__r_.__value_.__r.__words[0] = 0LL;
    if ((v88.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v50 = &v88;
    }
    else {
      std::string::size_type v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v88.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    char v52 = std::string::append(&v84, (const std::string::value_type *)v50, size);
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    std::string v54 = std::string::append(&v85, ")");
    __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    std::string::size_type cap = v54->__r_.__value_.__l.__cap_;
    __int128 v86 = v55;
    v54->__r_.__value_.__l.__size_ = 0LL;
    v54->__r_.__value_.__l.__cap_ = 0LL;
    v54->__r_.__value_.__r.__words[0] = 0LL;
    if (v60 < 0) {
      operator delete(v59[0]);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    if (v66 < 0) {
      operator delete(*(void **)__s);
    }
    uint64_t v56 = *(void *)a1;
    sub_1010DDBC0(&v85, "ReceivedTimestamp");
    sub_10000E594(v56, (uint64_t)&v86, a5, (uint64_t)&v85, 1, a6);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v86);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    unsigned __int8 v57 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v88.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&v88,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v88, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      LOWORD(v86) = 0;
      char v58 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v88,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v86,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabe lsForClientAtLoi(const std::string &, boost::uuids::uuid, uint32_t, cl::chrono::CFAbsoluteTimeClock::time_point)",  "%s\n",  (const char *)v58);
      if (v58 != &v88) {
        free(v58);
      }
    }

    a6->__r_.__value_.__r.__words[0] = 0LL;
    a6->__r_.__value_.__l.__size_ = 0LL;
    a6->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_1000108A0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  _Unwind_Resume(a1);
}

void sub_100010A90()
{
}

void sub_100010A98()
{
}

void sub_100010AA0()
{
}

void sub_100010AA8()
{
}

void sub_100010AB0()
{
}

void sub_100010AB8()
{
}

void sub_100010AC0()
{
}

void sub_100010AC8()
{
}

void sub_100010AD0()
{
}

void sub_100010AD8()
{
}

void sub_100010AE0()
{
}

void sub_100010AE8()
{
}

void sub_100010AF0()
{
}

void sub_100010AF8()
{
}

BOOL sub_100010B00(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationLabels");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v8 = std::string::append(&v44, "ReceivedTimestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v14 = std::string::append(&v47, "ReceivedTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v49, "MicroLocationLabels");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "ReceivedTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    std::string v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    std::string v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v32 = (char *)__p;
    }
    else {
      std::string v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      std::string v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818888);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        uint64_t v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }
  std::string v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    LOWORD(__p[0]) = 0;
    __int128 v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingLabelsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_100011178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100011308(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = *a2;
    if (*a2 == a2[1]) {
      sub_1012234E0();
    }
    v65.__r_.__value_.__s.__size_ = 1;
    LOWORD(v65.__r_.__value_.__l.__data_) = 34;
    int v5 = *(char *)(v3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (const std::string::value_type *)v3;
    }
    else {
      uint64_t v6 = *(const std::string::value_type **)v3;
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      std::string::size_type v7 = *(void *)(v3 + 8);
    }
    unsigned int v8 = std::string::append(&v65, v6, v7);
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v66, "");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = a2[1];
    for (uint64_t i = *a2 + 24; i != v12; i += 24LL)
    {
      v63.__r_.__value_.__s.__size_ = 1;
      LOWORD(v63.__r_.__value_.__l.__data_) = 44;
      __int128 v14 = std::string::append(&v63, "");
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      int v16 = *(char *)(i + 23);
      if (v16 >= 0) {
        __int128 v17 = (const std::string::value_type *)i;
      }
      else {
        __int128 v17 = *(const std::string::value_type **)i;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(i + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(i + 8);
      }
      __int128 v19 = std::string::append(&v64, v17, v18);
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v21 = std::string::append(&v65, "");
      __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      v21->__r_.__value_.__r.__words[0] = 0LL;
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v23 = &v66;
      }
      else {
        __int128 v23 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v66.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v66.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v23, size);
    }

    v58.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v58, "DELETE FROM ");
    __int128 v25 = std::string::append(&v58, "MicroLocationLabels");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v27 = std::string::append(&v59, " WHERE ");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v29 = std::string::append(&v60, "ClientID");
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    char v57 = 4;
    strcpy(__s, " IN ");
    __int128 v31 = std::string::append(&v61, __s, 4uLL);
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    char v55 = 1;
    strcpy(v54, "(");
    std::string::size_type v33 = std::string::append(&v63, v54, 1uLL);
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v35 = &v62;
    }
    else {
      BOOL v35 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v36 = v62.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v36 = v62.__r_.__value_.__l.__size_;
    }
    __int128 v37 = std::string::append(&v64, (const std::string::value_type *)v35, v36);
    __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0LL;
    v37->__r_.__value_.__l.__cap_ = 0LL;
    v37->__r_.__value_.__r.__words[0] = 0LL;
    char v53 = 1;
    strcpy(v52, ")");
    __int128 v39 = std::string::append(&v66, v52, 1uLL);
    __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0LL;
    v39->__r_.__value_.__l.__cap_ = 0LL;
    v39->__r_.__value_.__r.__words[0] = 0LL;
    if (v53 < 0) {
      operator delete(*(void **)v52);
    }
    if (v55 < 0) {
      operator delete(*(void **)v54);
    }
    if (v57 < 0) {
      operator delete(*(void **)__s);
    }
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v41 = &v65;
    }
    else {
      std::string v41 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)a1, (char *)v41, &v66);
    std::string::size_type v42 = v66.__r_.__value_.__r.__words[0];
    std::string v43 = (sqlite3_stmt *)sub_100019240((uint64_t)v66.__r_.__value_.__l.__data_);
    if (v43)
    {
      BOOL v44 = sub_1003BB2BC(*(void *)a1, v43);
      if (!v42)
      {
LABEL_67:
        return v44;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
      std::string v47 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v66,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v66, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818888);
        }
        LOWORD(v64.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v64,  2);
        std::string v51 = (std::string *)v50;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingLabelsTable::deleteRecordingLabelsForClients(const std::vector<std::string> &)",  "%s\n",  v50);
        if (v51 != &v66) {
          free(v51);
        }
      }

      BOOL v44 = 0LL;
      if (!v42) {
        goto LABEL_67;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
    goto LABEL_67;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }
  std::string v45 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v66.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't delete recording labels",  (uint8_t *)&v66,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v66, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818888);
    }
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't delete recording labels",  &v65,  2);
    std::string v49 = (std::string *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingLabelsTable::deleteRecordingLabelsForClients(const std::vector<std::string> &)",  "%s\n",  v48);
    if (v49 != &v66) {
      free(v49);
    }
  }

  return 0LL;
}

void sub_100011A50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_100011C00(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100011C2C(sqlite3_stmt *a1, int a2)
{
  unint64_t v2 = v8;
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = (unsigned __int8 *)__p;
  }
  else {
    uint64_t v3 = (unsigned __int8 *)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  uint64_t v4 = sub_100011CE8((uint64_t)&v6, v3, &v3[v2]);
  return v4;
}

void sub_100011C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100011CB8@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = (char *)sqlite3_column_text(a1, a2);
  if (!v4) {
    sub_101223654();
  }
  return sub_1010DDBC0(a3, v4);
}

uint64_t sub_100011CE8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  int v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    int v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }

  else
  {
    signed __int8 v7 = *a2;
  }

  uint64_t v8 = 0LL;
  int v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }

        int v9 = 0;
      }

      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          goto LABEL_22;
        }
      }

LABEL_24:
      char v13 = sub_100011EE8(a1, v7);
      *((_BYTE *)&v17 + vstd::iostream::~basic_iostream(v2, v3 + 8) = v13;
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((_BYTE *)&v17 + v8++) = sub_100011EE8(a1, v14) | (16 * v13);
    }

    while (!v8);
    if (v8 == 16) {
      break;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }

  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100011E84();
  }

  return v17;
}

    signed __int8 v10 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    BOOL v11 = *(std::string **)(a1 + 32);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      BOOL v11 = (std::string *)operator new(0x18uLL);
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 32) = v11;
    }

    std::string::operator=(v11, v10);
    int v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

  BOOL v11 = *(void *)(v5 + 48);
  if (!v11) {
    BOOL v11 = *(void *)(qword_1019A0818 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v11,  a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    signed __int8 v12 = *(void *)(v5 + 56);
    if (!v12) {
      signed __int8 v12 = *(void *)(qword_1019A0818 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v12,  a2,  a4);
  }

  return result;
}

  if ((v21 & 0x10) != 0)
  {
    __int128 v27 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 104) |= 0x10u;
    __int128 v28 = *(std::string **)(a1 + 56);
    if (v28 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      __int128 v28 = (std::string *)operator new(0x18uLL);
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 56) = v28;
    }

    std::string::operator=(v28, v27);
    __int128 v21 = *(_DWORD *)(a2 + 104);
    if ((v21 & 0x20) == 0)
    {
LABEL_26:
      if ((v21 & 0x80) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }

  else if ((v21 & 0x20) == 0)
  {
    goto LABEL_26;
  }

  __int128 v29 = *(const std::string **)(a2 + 64);
  *(_DWORD *)(a1 + 104) |= 0x20u;
  __int128 v30 = *(std::string **)(a1 + 64);
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    __int128 v30 = (std::string *)operator new(0x18uLL);
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 64) = v30;
  }

  std::string::operator=(v30, v29);
  __int128 v21 = *(_DWORD *)(a2 + 104);
  if ((v21 & 0x80) != 0)
  {
LABEL_27:
    __int128 v23 = *(_BYTE *)(a2 + 96);
    *(_DWORD *)(a1 + 104) |= 0x80u;
    *(_BYTE *)(a1 + 96) = v23;
    __int128 v21 = *(_DWORD *)(a2 + 104);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(8LL, *(void *)(v5 + 56), a2);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 72),  a2,  a4);
  if ((*(_DWORD *)(v5 + 80) & 0x800) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(12LL, *(void *)(v5 + 64), a2);
  }
  return result;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

      uint64_t result = 1LL;
      *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 1;
      return result;
    }

    int v6 = 0LL;
    signed __int8 v7 = 0LL;
    uint64_t v8 = 1;
    do
    {
      int v9 = cblas_dnrm2(*(_DWORD *)(a1 + 16), (const double *)(*(void *)a1 + v6), v3);
      if (v9 == 0.0)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CAF0);
        }
        signed __int8 v10 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289282;
          char v13 = 0;
          int v14 = 2082;
          int v15 = "";
          int v16 = 1026;
          uint64_t v17 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:ProbabilityMatrix::normalizeRows, row with zero norm!, RowIndex:%{public}d}",  buf,  0x18u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CAF0);
          }
        }

        BOOL v11 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)__int128 buf = 68289282;
          char v13 = 0;
          int v14 = 2082;
          int v15 = "";
          int v16 = 1026;
          uint64_t v17 = v7;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "ProbabilityMatrix::normalizeRows, row with zero norm!",  "{msg%{public}.0s:ProbabilityMatrix::normalizeRows, row with zero norm!, RowIndex:%{public}d}",  buf,  0x18u);
        }

        uint64_t v8 = 0;
      }

      else
      {
        cblas_dscal(*(_DWORD *)(a1 + 16), 1.0 / v9, (double *)(*(void *)a1 + v6), *(_DWORD *)(a1 + 12));
      }

      ++v7;
      uint64_t v3 = *(int *)(a1 + 12);
      v6 += 8LL;
    }

    while (v7 < v3);
    if ((v8 & 1) != 0) {
      goto LABEL_24;
    }
  }

  return 0LL;
}

      char v13 = sub_100011EE8(a1, v7);
      *((_BYTE *)&v17 + v9) = v13;
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((_BYTE *)&v17 + v9++) = sub_100011EE8(a1, v14) | (16 * v13);
    }

    while (!v9);
    if (v9 == 16) {
      break;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }

  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100011E84();
  }

  return v17;
}

    if ((v6 & 0x80) == 0)
    {
      if (v6 != 4) {
        return 0LL;
      }
      goto LABEL_37;
    }

    uint64_t v8 = *(void *)(a1 + 64);
LABEL_35:
    if (v8 != 4) {
      return 0LL;
    }
    int v5 = (void *)*v5;
    goto LABEL_37;
  }

  if (v6 != 4)
  {
    signed __int8 v12 = (void *)(a1 + 56);
    if (v6 != 6) {
      return 0LL;
    }
    goto LABEL_20;
  }

        signed __int8 v12 = (v21 - 1) & v21;
        std::string v49 = v22;
        __int128 v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }

      __int128 v24 = type metadata accessor for SymmetricKey(0LL);
      __int128 v25 = *(void *)(v24 - 8);
      __int128 v26 = __chkstk_darwin(v24);
      __int128 v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v29 = *(void *)(v5 + 56);
      __int128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
      __int128 v32 = *v30;
      __int128 v31 = v30[1];
      std::string::size_type v33 = *(void *)(v25 + 72);
      __int128 v34 = v29 + v33 * v19;
      std::string v50 = v35;
      if ((v48 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 32))(v28, v34, v24, v26);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v28, v34, v24, v26);
        swift_bridgeObjectRetain(v31);
      }

      Hasher.init(_seed:)(v51, *(void *)(v8 + 40));
      String.hash(into:)(v51, v32, v31);
      uint64_t result = Hasher._finalize()();
      std::string::size_type v36 = -1LL << *(_BYTE *)(v8 + 32);
      __int128 v37 = result & ~v36;
      __int128 v38 = v37 >> 6;
      if (((-1LL << v37) & ~*(void *)(v13 + 8 * (v37 >> 6))) != 0)
      {
        int v16 = __clz(__rbit64((-1LL << v37) & ~*(void *)(v13 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v39 = 0;
        __int128 v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          std::string v41 = v38 == v40;
          if (v38 == v40) {
            __int128 v38 = 0LL;
          }
          v39 |= v41;
          std::string::size_type v42 = *(void *)(v13 + 8 * v38);
        }

        while (v42 == -1);
        int v16 = __clz(__rbit64(~v42)) + (v38 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      uint64_t v17 = (void *)(*(void *)(v8 + 48) + 16 * v16);
      *uint64_t v17 = v32;
      v17[1] = v31;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v25 + 32))( *(void *)(v8 + 56) + v33 * v16,  v28,  v24);
      ++*(void *)(v8 + 16);
      int v15 = v49;
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  BOOL v11 = *(void *)(v5 + 40);
  if (!v11) {
    BOOL v11 = *(void *)(qword_1019A0AF0 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

    *(_DWORD *)(a1 + 100) |= 8u;
    signed __int8 v12 = *(char **)(a1 + 24);
    if (!v12)
    {
      signed __int8 v12 = (char *)operator new(0x178uLL);
      *(void *)signed __int8 v12 = off_101828198;
      *((void *)v12 + 36) = 0LL;
      *((void *)v12 + 37) = 0LL;
      *((_DWORD *)v12 + 76) = 0;
      *((_DWORD *)v12 + 90) = 0;
      *((_WORD *)v12 + 56) = 0;
      *(_OWORD *)(v12 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *((void *)v12 + 11) = 0LL;
      *((void *)v12 + 12) = 0xFFFFFFFFLL;
      *((void *)v12 + 13) = 0LL;
      *(void *)(v12 + 364) = 0LL;
      *(_OWORD *)(v12 + 130) = 0u;
      *(_OWORD *)(v12 + 146) = 0u;
      *(_OWORD *)(v12 + 162) = 0u;
      *(_OWORD *)(v12 + 17std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v12 + 194) = 0u;
      *(_OWORD *)(v12 + 210) = 0u;
      *(_OWORD *)(v12 + 226) = 0u;
      *(_OWORD *)(v12 + 242) = 0u;
      *(_OWORD *)(v12 + 114) = 0u;
      *((_OWORD *)v12 + 17) = 0u;
      *(_OWORD *)(v12 + 25std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v12 + 341) = 0u;
      *(_OWORD *)(v12 + 312) = 0u;
      *(_OWORD *)(v12 + 32std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(void *)(a1 + 24) = v12;
    }

    char v13 = *(void *)(a2 + 24);
    if (!v13) {
      char v13 = *(void *)(qword_1019A0BD8 + 24);
    }
    sub_1001D92D4((uint64_t)v12, v13);
    int v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_34;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  if ((v3 & 4) != 0)
  {
    std::string::size_type v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v18 & 0x80000000) != 0)
    {
      __int128 v19 = 11;
    }

    else if (v18 >= 0x80)
    {
      __int128 v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 40);
    }

    else
    {
      __int128 v19 = 2;
    }

    uint64_t v4 = (v19 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_26:
      if ((v3 & 0x10) == 0) {
        goto LABEL_46;
      }
      goto LABEL_40;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_26;
  }

  __int128 v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if ((v20 & 0x80000000) != 0)
  {
    __int128 v21 = 11;
  }

  else if (v20 >= 0x80)
  {
    __int128 v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    __int128 v21 = 2;
  }

  uint64_t v4 = (v21 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_40:
    __int128 v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v22 & 0x80000000) != 0)
    {
      __int128 v23 = 11;
    }

    else if (v22 >= 0x80)
    {
      __int128 v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2) + 1;
    }

    else
    {
      __int128 v23 = 2;
    }

    uint64_t v4 = (v23 + v4);
  }

  if ((v3 & 4) != 0)
  {
    BOOL v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v11 & 0x80000000) != 0)
    {
      signed __int8 v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      signed __int8 v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      signed __int8 v12 = 2;
    }

    uint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_26:
      if ((v3 & 0x10) == 0) {
        goto LABEL_49;
      }
      goto LABEL_43;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_26;
  }

  char v13 = *(void *)(a1 + 24);
  if (!v13) {
    char v13 = *(void *)(qword_1019A0C20 + 24);
  }
  int v14 = *(unsigned __int8 *)(v13 + 36);
  if (*(_BYTE *)(v13 + 36))
  {
    int v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0) {
      v15 += 9;
    }
    if ((v14 & 4) != 0) {
      int v14 = v15 + 9;
    }
    else {
      int v14 = v15;
    }
  }

  *(_DWORD *)(v13 + 32) = v14;
  uint64_t v4 = (v4 + v14 + 2);
  if ((*(_DWORD *)(a1 + 48) & 0x10) != 0)
  {
LABEL_43:
    int v16 = *(void *)(a1 + 32);
    if (!v16) {
      int v16 = *(void *)(qword_1019A0C20 + 32);
    }
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E4020(v16, a2);
    __int128 v19 = (int)v17;
    else {
      __int128 v20 = 1;
    }
    uint64_t v4 = (v4 + v19 + v20 + 1);
  }

      if (v8 == 4) {
        return 1LL;
      }
    }

    uint64_t v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_24;
    }
    BOOL v11 = *(_DWORD *)(a1 + 32);
LABEL_18:
    *(_DWORD *)(a1 + 32) = v11 | 2;
    char v13 = *(void **)(a1 + 16);
    if (!v13)
    {
      char v13 = operator new(0x60uLL);
      v13[1] = 0LL;
      v13[2] = 0LL;
      *char v13 = off_101828648;
      *(void *)((char *)v13 + 22) = 0LL;
      *((_OWORD *)v13 + 2) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
      *((_OWORD *)v13 + 4) = 0u;
      *((_OWORD *)v13 + 5) = 0u;
      *(void *)(a1 + 16) = v13;
    }

    int v14 = (char *)*((void *)this + 1);
    if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
    {
    }

    else
    {
      v26[0] = *v14;
      *((void *)this + 1) = v14 + 1;
    }

    int v15 = *((_DWORD *)this + 14);
    int v16 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v15 + 1;
    if (v15 >= v16) {
      return 0LL;
    }
    uint64_t v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v26[0]);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
    __int128 v19 = *((_DWORD *)this + 14);
    __int128 v20 = __OFSUB__(v19, 1);
    __int128 v21 = v19 - 1;
    if (v21 < 0 == v20) {
      *((_DWORD *)this + 14) = v21;
    }
    __int128 v22 = (_BYTE *)*((void *)this + 1);
    int v9 = *((void *)this + 2);
    if ((unint64_t)v22 < v9 && *v22 == 24)
    {
      signed __int8 v10 = v22 + 1;
      *((void *)this + 1) = v10;
LABEL_36:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
        if (!(_DWORD)result) {
          return result;
        }
        __int128 v23 = v26[0];
        __int128 v24 = (unsigned __int8 *)*((void *)this + 1);
        int v9 = *((void *)this + 2);
      }

      else
      {
        __int128 v23 = *v10;
        __int128 v24 = (unsigned __int8 *)(v10 + 1);
        *((void *)this + 1) = v24;
      }

      *(_BYTE *)(a1 + 24) = v23 != 0;
      *(_DWORD *)(a1 + 32) |= 4u;
      if (v24 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

    int v14 = *(_BYTE *)(a2 + 42);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    *(_BYTE *)(a1 + 42) = v14;
    if ((*(_DWORD *)(a2 + 48) & 0x80) == 0) {
      return;
    }
LABEL_12:
    int v6 = *(_BYTE *)(a2 + 43);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(_BYTE *)(a1 + 43) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }

  BOOL v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v11 & 0x80000000) != 0)
  {
    signed __int8 v12 = 11;
  }

  else if (v11 >= 0x80)
  {
    signed __int8 v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    signed __int8 v12 = 2;
  }

  v4 += v12;
  if ((v3 & 8) != 0)
  {
LABEL_33:
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v13 & 0x80000000) != 0)
    {
      int v14 = 11;
    }

    else if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    }

    else
    {
      int v14 = 2;
    }

    v4 += v14;
  }

  if ((v3 & 4) != 0)
  {
    signed __int8 v12 = *(void *)(a1 + 24);
    if (!v12) {
      signed __int8 v12 = *(void *)(qword_1019A0CF0 + 24);
    }
    char v13 = *(unsigned __int8 *)(v12 + 36);
    if (*(_BYTE *)(v12 + 36))
    {
      int v14 = (v13 << 31 >> 31) & 9;
      if ((v13 & 2) != 0) {
        v14 += 9;
      }
      if ((v13 & 4) != 0) {
        char v13 = v14 + 9;
      }
      else {
        char v13 = v14;
      }
    }

    *(_DWORD *)(v12 + 32) = v13;
    v4 += v13 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 148);
    if ((v3 & 8) == 0) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }

  if ((v3 & 8) != 0)
  {
LABEL_36:
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      int v16 = 1;
    }

    v4 += v16 + 1;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 44),  a3);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_26:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(float *)(v5 + 52),  a3);
    if ((*(_DWORD *)(v5 + 68) & 0x400) == 0) {
      return result;
    }
    goto LABEL_27;
  }

  if ((v3 & 4) != 0) {
    v4 += 5;
  }
  if ((v3 & 8) != 0) {
    v4 += 5;
  }
  if ((v3 & 0x10) != 0) {
    signed __int8 v12 = v4 + 5;
  }
  else {
    signed __int8 v12 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v13 & 0x80000000) != 0)
    {
      int v14 = 11;
    }

    else if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 68);
    }

    else
    {
      int v14 = 2;
    }

    v12 += v14;
  }

  int v15 = v12 + 2;
  if ((v3 & 0x40) == 0) {
    int v15 = v12;
  }
  if ((v3 & 0x80) != 0) {
    int v5 = v15 + 5;
  }
  else {
    int v5 = v15;
  }
LABEL_43:
  if ((v3 & 0xFF00) != 0)
  {
    int v16 = v5 + 5;
    if ((v3 & 0x100) == 0) {
      int v16 = v5;
    }
    if ((v3 & 0x200) != 0) {
      int v5 = v16 + 5;
    }
    else {
      int v5 = v16;
    }
    if ((v3 & 0x400) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      if (!v17) {
        uint64_t v17 = *(void *)(qword_1019A0D10 + 56);
      }
      std::string::size_type v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F57E4(v17);
      __int128 v20 = (int)v18;
      else {
        __int128 v21 = 1;
      }
      int v5 = (v5 + v20 + v21 + 1);
    }
  }

  *(_DWORD *)(a1 + 64) = v5;
  return v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  BOOL v11 = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_BYTE *)(a1 + 24) = v11;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  signed __int8 v12 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 24) = v12;
  int v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

    uint64_t result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 88) |= 0x10u;
    *(double *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
    int v14 = *(_DWORD *)(a2 + 88);
    if ((v14 & 0x20) == 0)
    {
LABEL_17:
      if ((v14 & 0x40) == 0) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }

  signed __int8 v12 = *(void *)(v5 + 48);
  if (!v12) {
    signed __int8 v12 = *(void *)(qword_1019A0DE8 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  if ((*(_DWORD *)(v5 + 68) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  }
  return result;
}

  if ((v3 & 4) != 0)
  {
    signed __int8 v12 = *(void *)(a1 + 24);
    if (!v12) {
      signed __int8 v12 = *(void *)(qword_1019A0DE8 + 24);
    }
    char v13 = *(unsigned __int8 *)(v12 + 36);
    if (*(_BYTE *)(v12 + 36))
    {
      int v14 = (v13 << 31 >> 31) & 9;
      if ((v13 & 2) != 0) {
        v14 += 9;
      }
      if ((v13 & 4) != 0) {
        char v13 = v14 + 9;
      }
      else {
        char v13 = v14;
      }
    }

    *(_DWORD *)(v12 + 32) = v13;
    v4 += v13 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
    if ((v3 & 8) == 0)
    {
LABEL_26:
      if ((v3 & 0x10) == 0) {
        goto LABEL_27;
      }
LABEL_47:
      std::string::size_type v18 = *(void *)(a1 + 40);
      if (!v18) {
        std::string::size_type v18 = *(void *)(qword_1019A0DE8 + 40);
      }
      __int128 v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100204C60(v18, a2);
      __int128 v21 = (int)v19;
      else {
        __int128 v22 = 1;
      }
      v4 += v21 + v22 + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 68);
      if ((v3 & 0x20) == 0) {
        goto LABEL_60;
      }
      goto LABEL_53;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_26;
  }

  int v15 = *(void *)(a1 + 32);
  if (!v15) {
    int v15 = *(void *)(qword_1019A0DE8 + 32);
  }
  int v16 = *(unsigned __int8 *)(v15 + 36);
  if (*(_BYTE *)(v15 + 36))
  {
    uint64_t v17 = (v16 << 31 >> 31) & 9;
    if ((v16 & 2) != 0) {
      v17 += 9;
    }
    if ((v16 & 4) != 0) {
      int v16 = v17 + 9;
    }
    else {
      int v16 = v17;
    }
  }

  *(_DWORD *)(v15 + 32) = v16;
  v4 += v16 + 2;
  uint64_t v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x10) != 0) {
    goto LABEL_47;
  }
LABEL_27:
  if ((v3 & 0x20) != 0)
  {
LABEL_53:
    __int128 v23 = *(void *)(a1 + 48);
    if (!v23) {
      __int128 v23 = *(void *)(qword_1019A0DE8 + 48);
    }
    __int128 v24 = *(unsigned __int8 *)(v23 + 28);
    if (*(_BYTE *)(v23 + 28))
    {
      if ((v24 & 2) != 0) {
        __int128 v24 = ((v24 << 31 >> 31) & 9) + 9;
      }
      else {
        __int128 v24 = (v24 << 31 >> 31) & 9;
      }
    }

    *(_DWORD *)(v23 + 24) = v24;
    v4 += v24 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
  }

  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      int v9 = *(_BYTE *)(a2 + 74);
      *(_DWORD *)(a1 + 84) |= 0x10000u;
      *(_BYTE *)(a1 + 74) = v9;
      int v5 = *(_DWORD *)(a2 + 84);
    }

    if ((v5 & 0x20000) != 0)
    {
      signed __int8 v10 = *(_DWORD *)(a2 + 76);
      if (v10 >= 4) {
        sub_1012304A4();
      }
      *(_DWORD *)(a1 + 84) |= 0x20000u;
      *(_DWORD *)(a1 + 76) = v10;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(float *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_variance),  @"variance");
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_9:
    if ((has & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  PBDataWriterWriteDoubleField(a3, 8LL, self->_filteredVo2Max);
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_10:
    if ((has & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  *((void *)a3 + 5) = *(void *)&self->_filteredVo2Max;
  *((_WORD *)a3 + 52) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_10:
    if ((has & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  *((void *)result + 10) = *(void *)&self->_variance;
  *((_WORD *)result + 52) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_9:
    if ((has & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  self->_filteredVo2Max = *((double *)a3 + 5);
  *(_WORD *)&self->_has |= 0x10u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x800) == 0)
  {
LABEL_10:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  *(void *)((char *)v35
  std::string::size_type v36 = v33;
  std::streambuf::~streambuf(&v37);
  std::ios::~ios(v38);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
}

  sub_1002A7D20((uint64_t)v53, kCTCellMonitorBandClass, (_DWORD *)(a2 + 48));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorBaseStationId, (_DWORD *)(a2 + 44));
  if (sub_1002A7D20((uint64_t)v53, kCTCellMonitorBaseStationLat, (_DWORD *)&v52 + 1)
    && sub_1002A7D20((uint64_t)v53, kCTCellMonitorBaseStationLong, &v52))
  {
    *(void *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    Current = CFAbsoluteTimeGetCurrent();
    int v16 = (double)SHIDWORD(v52);
    *(CFAbsoluteTime *)(a2 + 144) = Current;
    uint64_t v17 = (double)(int)v52 * 0.0000694444444;
    *(double *)(a2 + 72) = v16 * 0.0000694444444;
    *(double *)(a2 + 80) = v17;
    *(_DWORD *)(a2 + 200) = 1;
  }

  if (sub_1002A8874((uint64_t)v53, kCTCellMonitorCellType, &v50))
  {
    if (v50)
    {
      *(_DWORD *)(a2 + 22std::iostream::~basic_iostream(v2, v3 + 8) = sub_1003D055C(v50);
      memset(buf, 0, 24);
      sub_1002AA05C((const __CFString *)v50, buf);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101836120);
      }
      std::string::size_type v18 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Unsupported kCTCellMonitorCellType, no cfstring",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101836120);
        }
        LOWORD(v59.__r_.__value_.__l.__data_) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Unsupported kCTCellMonitorCellType, no cfstring",  &v59,  *(void *)&v47);
        std::string::size_type v42 = (std::string *)v41;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)",  "%s\n",  v41);
        if (v42 != buf) {
          free(v42);
        }
      }
    }
  }

  sub_1002A7D20((uint64_t)v53, kCTCellMonitorChannelNumber, (_DWORD *)(a2 + 52));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorMNC, (_DWORD *)(a2 + 232));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorNID, (_DWORD *)(a2 + 36));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorPNOffset, (_DWORD *)(a2 + 56));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorSID, (_DWORD *)(a2 + 32));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorZoneId, (_DWORD *)(a2 + 40));
  sub_1002A85D0((uint64_t)v53, kCTCellMonitorSectorId, (std::string *)(a2 + 240));
  if (sub_1002A7D20((uint64_t)v53, kCTCellMonitorSectorLat, (_DWORD *)&v52 + 1)
    && sub_1002A7D20((uint64_t)v53, kCTCellMonitorSectorLong, &v52)
    && v52)
  {
    *(void *)(a2 + 284) = 0LL;
    __int128 v19 = CFAbsoluteTimeGetCurrent();
    __int128 v20 = (double)SHIDWORD(v52);
    *(CFAbsoluteTime *)(a2 + 340) = v19;
    __int128 v21 = (double)(int)v52 * 0.0000694444444;
    *(double *)(a2 + 26std::iostream::~basic_iostream(v2, v3 + 8) = v20 * 0.0000694444444;
    *(double *)(a2 + 276) = v21;
    *(_DWORD *)(a2 + 396) = 1;
  }

  sub_1002A7D20((uint64_t)v53, kCTCellMonitorLtmOffset, (_DWORD *)(a2 + 420));
  sub_1002A7D20((uint64_t)v53, kCTCellMonitorDayLightSaving, (_DWORD *)(a2 + 424));
  std::string v48 = 0.0;
  std::string v49 = 0.0;
  if (sub_1002A832C((uint64_t)v53, kCTCellMonitorEcio, &v49))
  {
    *(_DWORD *)(a2 + 60) = (int)v49;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836120);
    }
    __int128 v22 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      __int128 v23 = *(_DWORD *)(a2 + 60);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v23;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "kCTCellMonitorEcio: %d, %.1lf",  (uint8_t *)buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101836120);
      }
      __int128 v24 = *(_DWORD *)(a2 + 60);
      LODWORD(v59.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v59.__r_.__value_.__r.__words[0]) = v24;
      LOWORD(v59.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v59.__r_.__value_.__r.__words[1] + 2) = v49;
      LODWORD(v47) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "kCTCellMonitorEcio: %d, %.1lf",  &v59,  v47);
      __int128 v26 = (std::string *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }

  if (sub_1002A832C((uint64_t)v53, kCTCellMonitorEcioFiltered, &v48))
  {
    *(_DWORD *)(a2 + 64) = (int)v48;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836120);
    }
    __int128 v27 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      __int128 v28 = *(_DWORD *)(a2 + 64);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v28;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "kCTCellMonitorEcioFiltered: %d, %.1lf",  (uint8_t *)buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101836120);
      }
      __int128 v29 = *(_DWORD *)(a2 + 64);
      LODWORD(v59.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v59.__r_.__value_.__r.__words[0]) = v29;
      LOWORD(v59.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v59.__r_.__value_.__r.__words[1] + 2) = v48;
      LODWORD(v47) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "kCTCellMonitorEcioFiltered: %d, %.1lf",  &v59,  v47);
      __int128 v31 = (std::string *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  else
  {
    *(_DWORD *)(a2 + 64) = 0;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101836120);
  }
  __int128 v32 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_1003D13B8((unsigned int *)a2, buf);
    std::string::size_type v33 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? buf : (std::string *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: got cell from dict, %s",  (uint8_t *)&v59,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836120);
    }
    BOOL v35 = qword_101934A78;
    sub_1003D13B8((unsigned int *)a2, &v59);
    if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v36 = &v59;
    }
    else {
      std::string::size_type v36 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    std::string v54 = 136315138;
    uint64_t v55 = v36;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  2LL,  "CELL_LOC: got cell from dict, %s",  (const char *)&v54);
    __int128 v38 = v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)",  "%s\n",  (const char *)v38);
    if (v38 != buf) {
      free(v38);
    }
  }

  sub_1002A5590(v53);
  return v10;
}

    int v14 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v14;
    if ((*(_DWORD *)(a2 + 48) & 0x80) == 0) {
      return;
    }
LABEL_12:
    int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(void *)(v5 + 80),  a2,  a4);
  if ((*(_DWORD *)(v5 + 96) & 0x800) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 88),  a2,  a4);
  }
  return result;
}

    sub_10055E8F4(a3, (uint64_t)@"App asked us not to show prompts");
    return 2LL;
  }

  if ((v14 & 1) == 0
    && (!sub_100878DD4(a2) || (int)sub_10054BEC8(a1, (uint64_t)v9) >= *(_DWORD *)(a1 + 880)))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    std::string::size_type v33 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)std::string v50 = 2082;
      *(void *)&v50[2] = "";
      *(_WORD *)&v50[10] = 2114;
      *(void *)&v50[12] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Not showing big switch re-enable prompt because the client has asked for too many, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    sub_10055E8F4(a3, (uint64_t)@"App asked us too many times to show big switch re-enable prompt.");
    return 2LL;
  }

  if (*(void *)(a1 + 272))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    __int128 v27 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v28 = +[CLClientKeyPath nullClientKeyPath](&OBJC_CLASS___CLClientKeyPath, "nullClientKeyPath");
      __int128 v29 = *(unsigned int **)(a1 + 272);
      if (v29)
      {
        __int128 v28 = (id)*((void *)v29 + 1);
        __int128 v30 = *v29;
      }

      else
      {
        __int128 v30 = 5LL;
      }

      *(_DWORD *)__int128 buf = 68290050;
      *(_WORD *)std::string v50 = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&v50[2] = "";
      *(_WORD *)&v50[10] = 2114;
      *(void *)&v50[12] = v9;
      *(_WORD *)&v50[20] = 2050;
      *(void *)&v50[22] = v8;
      *(_WORD *)&v50[30] = 2114;
      std::string v51 = (uint64_t)v28;
      std::string v52 = 2050;
      char v53 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Ignoring request because authorization in progress -- not showing big switch re-enable prompt, Client:%{public, location:escape_only}@, requestType:%{public, location:CLClientMana ger_Type::AuthorizationRequestType}lld, inflightClient:%{public, location:escape_only}@, inflightRequestTy pe:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}",  buf,  0x3Au);
    }

    sub_10055E8F4(a3, (uint64_t)@"App is already presenting the user with an authorization prompt");
    return 2LL;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  __int128 v34 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)std::string v50 = 2082;
    *(void *)&v50[2] = "";
    *(_WORD *)&v50[10] = 2114;
    *(void *)&v50[12] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Showing big switch #AuthPrompt, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  *a3 = 10;
  sub_1005859E4((uint64_t)v45, (uint64_t)a3);
  BOOL v35 = sub_10055F750(a1, (uint64_t)v9, v10, (uint64_t)v45);
  sub_1005858A0((uint64_t)v45);
  signed __int8 v12 = 2LL;
  if (v35)
  {
    LODWORD(vstd::iostream::~basic_iostream(v2, v3 + 8) = 10;
LABEL_77:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    std::string::size_type v36 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)std::string v50 = 2082;
      *(void *)&v50[2] = "";
      *(_WORD *)&v50[10] = 2114;
      *(void *)&v50[12] = v9;
      *(_WORD *)&v50[20] = 2050;
      *(void *)&v50[22] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt posted, Client:%{public, location:escape_only}@, type:%{public, loc ation:CLClientManager_Type::AuthorizationRequestType}lld}",  buf,  0x26u);
    }

    __int128 v37 = *(void **)(a1 + 136);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)std::string v50 = 3221225472LL;
    *(void *)&v50[8] = sub_100554B60;
    *(void *)&v50[16] = &unk_10183FB60;
    *(void *)&v50[24] = v9;
    std::string v51 = a1;
    [v37 iterateIdentitiesRelatedToKeyPath:v9 withBlock:buf];
  }

  return v12;
}

  else {
    __int128 v25 = (uint64_t *)*a7;
  }
  objc_msgSend( *(id *)(a1 + 1472),  "addObject:withSyncSessionReason:",  v16,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  __int128 v26 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
  {
    else {
      __int128 v27 = *(void *)a2;
    }
    if (v23) {
      __int128 v28 = a5;
    }
    else {
      __int128 v28 = 0;
    }
    *(_DWORD *)__int128 buf = 136446978;
    std::string v50 = v27;
    std::string v51 = 1026;
    std::string v52 = a4;
    char v53 = 1026;
    std::string v54 = v28;
    uint64_t v55 = 1026;
    std::string v56 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "#authsync addObject: %{public}s %{public}u %{public}u %{public}d ",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    else {
      __int128 v29 = *(void *)a2;
    }
    if (v23) {
      __int128 v30 = a5;
    }
    else {
      __int128 v30 = 0;
    }
    std::string v41 = 136446978;
    std::string::size_type v42 = v29;
    std::string v43 = 1026;
    BOOL v44 = a4;
    std::string v45 = 1026;
    std::string v46 = v30;
    std::string v47 = 1026;
    std::string v48 = a6;
    __int128 v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  1LL,  "#authsync addObject: %{public}s %{public}u %{public}u %{public}d ",  &v41,  30);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLClientManager::synchronizeAuthorizationChangeTypeAdd(const std::string &, const char *, uint32_t, std::opti onal<uint32_t>, BOOL, const std::string &)",  "%s\n",  v31);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  a1[7] = v4;
  return v4;
}

  a1[7] = v4;
  return v4;
}

  *(_DWORD *)(a1 + 52) |= 0x10u;
  int v14 = *(_WORD **)(a1 + 24);
  if (!v14)
  {
    int v14 = operator new(0x20uLL);
    v14[8] = 0;
    *(void *)int v14 = off_101844270;
    *((void *)v14 + 1) = 0LL;
    *((_DWORD *)v14 + 5) = 0;
    *((_DWORD *)v14 + 6) = 0;
    *(void *)(a1 + 24) = v14;
  }

  int v15 = *(void *)(a2 + 24);
  if (!v15) {
    int v15 = *(void *)(qword_1019A1248 + 24);
  }
  sub_100614A04((uint64_t)v14, v15);
  int v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_11:
  if ((v5 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_32:
  std::string::size_type v18 = *(_BYTE *)(a2 + 37);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(_BYTE *)(a1 + 37) = v18;
  int v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x80) != 0)
  {
LABEL_13:
    signed __int8 v7 = *(_BYTE *)(a2 + 38);
    *(_DWORD *)(a1 + 52) |= 0x80u;
    *(_BYTE *)(a1 + 3std::iostream::~basic_iostream(v2, v3 + 8) = v7;
    int v5 = *(_DWORD *)(a2 + 52);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 40),  a3);
  int v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  int v6 = v5[20];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 48),  a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 72) |= 4u;
  BOOL v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    BOOL v11 = (char *)operator new(0x30uLL);
    *(void *)BOOL v11 = &off_1018454B8;
    *(_OWORD *)(v11 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *((void *)v11 + 5) = 0LL;
    *(void *)(a1 + 24) = v11;
  }

  signed __int8 v12 = *(void *)(a2 + 24);
  if (!v12) {
    signed __int8 v12 = *(void *)(qword_1019A1328 + 24);
  }
  sub_100628C78((uint64_t)v11, v12);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  BOOL v11 = *(void *)(v5 + 48);
  if (!v11) {
    BOOL v11 = *(void *)(qword_1019A1368 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v11,  a2,  a4);
  if ((*(_DWORD *)(v5 + 64) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  }
  return result;
}

    char v13 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v13;
    if ((*(_DWORD *)(a2 + 52) & 0x80) == 0) {
      return;
    }
    goto LABEL_25;
  }

          if (v11 == 4) {
            return 1LL;
          }
          continue;
        }

        uint64_t result = sub_10061B0E4(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
LABEL_83:
        __int128 v24 = (char *)*((void *)this + 1);
        signed __int8 v12 = (char *)*((void *)this + 2);
        if (v24 >= v12 || *v24 != 48)
        {
          if (v24 == v12 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

    __int128 v19 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 72) |= 0x10u;
    *(_DWORD *)(a1 + 36) = v19;
    if ((*(_DWORD *)(a2 + 72) & 0x20) == 0) {
      return;
    }
LABEL_19:
    int v15 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 64) = v15;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 16);
  a1[17] |= 4u;
  a1[4] = v17;
  char v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 8) == 0)
  {
LABEL_16:
    if ((v13 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }

  signed __int8 v10 = a2[4];
  a1[17] |= 4u;
  a1[4] = v10;
  int v5 = a2[17];
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  int v6 = v5[17];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  BOOL v11 = a2[6];
  a1[16] |= 0x10u;
  a1[6] = v11;
  int v5 = a2[16];
  if ((v5 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_26:
  char v13 = a2[8];
  a1[16] |= 0x40u;
  a1[8] = v13;
  int v5 = a2[16];
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = a2[9];
    a1[16] |= 0x80u;
    a1[9] = v6;
    int v5 = a2[16];
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  int v6 = v5[16];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 57),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
LABEL_28:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 58),  (BOOL)a2,  a4);
    if ((*(_DWORD *)(v5 + 64) & 0x800) == 0) {
      return result;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 72),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 80) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 73),  (BOOL)a2,  a4);
  }
  return result;
}

  __int128 v19 = v4 + 9;
  if ((v3 & 4) == 0) {
    __int128 v19 = v4;
  }
  if ((v3 & 8) != 0) {
    v19 += 9;
  }
  if ((v3 & 0x10) != 0) {
    v19 += 9;
  }
  if ((v3 & 0x20) != 0) {
    int v5 = v19 + 9;
  }
  else {
    int v5 = v19;
  }
  if ((v3 & 0x40) != 0)
  {
    __int128 v20 = *(void *)(a1 + 56);
    if (!v20) {
      __int128 v20 = *(void *)(qword_1019A14F0 + 56);
    }
    __int128 v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006D2300(v20);
    __int128 v22 = (int)v21;
    else {
      __int128 v23 = 1;
    }
    int v5 = (v5 + v22 + v23 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 80);
  }

  if ((v3 & 0x80) != 0)
  {
    __int128 v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v24 & 0x80000000) != 0)
    {
      __int128 v25 = 11;
    }

    else if (v24 >= 0x80)
    {
      __int128 v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 80);
    }

    else
    {
      __int128 v25 = 2;
    }

    int v5 = (v25 + v5);
  }

    v46.n128_u32[3] = *(_DWORD *)(*(void *)(qword_1019A2030 + 24LL * (int)v28) + 4LL * (int)v32);
    sub_100745DB8((void *)(a1 + 24592), &v46);
    BOOL v35 = *(void *)(a1 + 24656);
    std::string::size_type v36 = *(void *)(a1 + 24680);
    __int128 v37 = (void *)(v35 + 8 * (v36 / 0xAA));
    __int128 v38 = *(void *)(a1 + 24664);
    if (v38 == v35) {
      __int128 v39 = 0LL;
    }
    else {
      __int128 v39 = (char *)(*v37 + 24 * (v36 % 0xAA));
    }
    while (1)
    {
      if (v38 == v35)
      {
        std::string v41 = 0LL;
      }

      else
      {
        __int128 v40 = *(void *)(a1 + 24688) + *(void *)(a1 + 24680);
        std::string v41 = *(void *)(v35 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA);
      }

      std::string::size_type v42 = *(void *)(a1 + 24632) + *(void *)(a1 + 24624) - 1LL;
      sub_100744E50(*(void *)(*(void *)(a1 + 24600) + 8 * (v42 / 0xAA)) + 24 * (v42 % 0xAA), (uint64_t)v39);
      if (*(double *)v39 >= v46.n128_f64[0])
      {
        v39 += 24;
        if (&v39[-*v37] == (char *)4080)
        {
          BOOL v44 = (char *)v37[1];
          ++v37;
          __int128 v39 = v44;
        }
      }

      else
      {
        __int128 v37 = (void *)sub_100745E64((int64x2_t *)(a1 + 24648), v37, v39);
        __int128 v39 = v43;
      }

      BOOL v35 = *(void *)(a1 + 24656);
      __int128 v38 = *(void *)(a1 + 24664);
    }

    operator delete(v17);
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }

  BOOL v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    signed __int8 v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    signed __int8 v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_31:
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v13 & 0x80000000) != 0)
    {
      int v14 = 11;
    }

    else if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    }

    else
    {
      int v14 = 2;
    }

    uint64_t v4 = (v14 + v4);
  }

    sub_1010DDBC0(v15, "empty");
    sub_1010DDBC0(__p, " ");
    int v5 = sub_1007EB9E0(v15, __p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
LABEL_29:
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    return v5;
  }

  unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  if (!*((_BYTE *)a1 + 23)) {
    goto LABEL_24;
  }
  uint64_t v3 = a1;
LABEL_6:
  uint64_t v4 = 0;
  int v5 = 0LL;
  int v6 = 0;
  signed __int8 v7 = 0;
  uint64_t v8 = (uint64_t)v3 - 1;
  do
  {
    int v9 = *(char *)(v8 + v2);
    if (v9 == 58)
    {
      ++v7;
      if (v4 == 2)
      {
        uint64_t v4 = 0;
        goto LABEL_20;
      }

      if (v4 != 1)
      {
        sub_1010DDBC0(v15, "multibyte");
        BOOL v11 = sub_1007EB9E0(v15, a1);
        goto LABEL_28;
      }

      uint64_t v4 = 0;
    }

    else
    {
      signed __int8 v10 = v9 - 48;
      if ((v9 - 48) > 9)
      {
        if ((v9 - 65) > 5)
        {
          signed __int8 v10 = v9 - 87;
        }

        else
        {
          signed __int8 v10 = v9 - 55;
        }
      }

      if (v10 == -1)
      {
LABEL_26:
        sub_1010DDBC0(v15, "nonhex");
        BOOL v11 = sub_1007EB9E0(v15, a1);
        goto LABEL_28;
      }

      v5 += (uint64_t)v10 << v6;
      ++v4;
    }

    v6 += 4;
LABEL_20:
    --v2;
  }

  while (v2);
  if (v7 && v7 != 5)
  {
    sub_1010DDBC0(v15, "colons");
    BOOL v11 = sub_1007EB9E0(v15, a1);
LABEL_28:
    int v5 = v11;
    goto LABEL_29;
  }

  return v5;
}

  sub_1001BA1BC(v38);
  return 0xEEEEEEEEEEEEEEEFLL * ((v19 - v30) >> 3);
}

  *a2 = v8;
  return result;
}

  signed __int8 v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_26:
  int v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    int v5 = *(_DWORD *)(a2 + 64);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[13],  v4,  a4);
  if ((v5[16] & 0x800) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[14],  v4,  a4);
  }
  return result;
}

  signed __int8 v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_26:
  int v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    int v5 = *(_DWORD *)(a2 + 64);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[13],  v4,  a4);
  if ((v5[16] & 0x800) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[14],  v4,  a4);
  }
  return result;
}

  BOOL v11 = *(void *)(v5 + 48);
  if (!v11) {
    BOOL v11 = *(void *)(qword_1019A17D0 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v11,  a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    signed __int8 v12 = *(void *)(v5 + 56);
    if (!v12) {
      signed __int8 v12 = *(void *)(qword_1019A17D0 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v12,  a2,  a4);
  }

  return result;
}

  if (v13 || v10)
  {
    if (((v6 | v14) & 1) == 0) {
      *a3 = *result;
    }
  }

  else
  {
    signed __int8 v10 = 0;
    std::logic_error *result = *a3;
  }

    if (!sub_100856698((double *)v41, (uint64_t **)&__p, (uint64_t **)&v48, a3, a4, a5, a6, a7, a8)
      || (sub_100856698((double *)v41, (uint64_t **)&__p, (uint64_t **)&v45, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }

  __int128 v25 = (double ****)v48;
  __int128 v24 = v49;
  if (a3 > 0x63 || ((char *)v49 - (_BYTE *)v48) >> 3 < a4)
  {
    if (v48 != v49)
    {
      while (1)
      {
        __int128 v26 = v25++;
        if (v25 != v24) {
          break;
        }
LABEL_45:
        if (v25 == v24) {
          goto LABEL_46;
        }
      }

      __int128 v24 = v25;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          __int128 v27 = **v26;
          __int128 v28 = **v24;
          __int128 v29 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v56.i8, "FFFFFFFFF");
          sub_100858868(v27, v28, (unsigned __int8 *)&v56, v29);
          if (!v56.i8[9])
          {
            __int128 v30 = v56.u8[0] != 84 && v56.u8[0] - 48 >= 0xA;
            if (!v30
              || v56.u8[1] == 84
              || v56.u8[1] - 48 <= 9
              || v56.u8[3] == 84
              || v56.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }

        if (++v24 == v49) {
          goto LABEL_45;
        }
      }
    }
  }

  else if (!sub_100856A40((double *)&v53, (uint64_t **)&v48, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }

    if (!sub_100856F98((double *)v42, (uint64_t **)&__p, (uint64_t **)&v49, a3, a4, a5, a6, a7, a8)
      || (sub_100856F98((double *)v42, (uint64_t **)&__p, (uint64_t **)&v46, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }

  __int128 v26 = (double ****)v49;
  __int128 v25 = v50;
  if (a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
  {
    if (v49 != v50)
    {
      while (1)
      {
        __int128 v27 = v26++;
        if (v26 != v25) {
          break;
        }
LABEL_45:
        if (v26 == v25) {
          goto LABEL_46;
        }
      }

      __int128 v25 = v26;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          __int128 v28 = **v27;
          __int128 v29 = **v25;
          __int128 v30 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v57.i8, "FFFFFFFFF");
          sub_100858868(v28, v29, (unsigned __int8 *)&v57, v30);
          if (!v57.i8[9])
          {
            __int128 v31 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
            if (!v31
              || v57.u8[1] == 84
              || v57.u8[1] - 48 <= 9
              || v57.u8[3] == 84
              || v57.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }

        if (++v25 == v50) {
          goto LABEL_45;
        }
      }
    }
  }

  else if (!sub_100855B64(&v54, &v49, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_hasGPS),  @"hasGPS");
  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_10:
    if ((has & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  PBDataWriterWriteBOOLField(a3, self->_hasStrideCal, 9LL);
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_11:
    if ((has & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  *((_BYTE *)a3 + 73) = self->_hasStrideCal;
  *((_WORD *)a3 + 38) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_11:
    if ((has & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  *((_BYTE *)result + 72) = self->_hasGPS;
  *((_WORD *)result + 38) |= 0x800u;
  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_10:
    if ((has & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  self->_hasStrideCal = *((_BYTE *)a3 + 73);
  *(_WORD *)&self->_has |= 0x1000u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x400) == 0)
  {
LABEL_11:
    if ((v3 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  if ((v1 & 4) != 0) {
    unint64_t v2 = (v2 + 5);
  }
  else {
    unint64_t v2 = v2;
  }
LABEL_27:
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  return v2;
}

  BOOL v11 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 112) |= 8u;
  *(void *)(a1 + 32) = v11;
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_26:
    *(_DWORD *)(a1 + 112) |= 0x20u;
    char v13 = *(_DWORD **)(a1 + 48);
    if (!v13)
    {
      char v13 = operator new(0x28uLL);
      v13[7] = 0;
      v13[8] = 0;
      *((void *)v13 + 1) = 0LL;
      *((void *)v13 + 2) = 0LL;
      *(void *)char v13 = off_101868FD8;
      *((_BYTE *)v13 + 24) = 0;
      *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v13;
    }

    int v14 = *(void *)(a2 + 48);
    if (!v14) {
      int v14 = *(void *)(qword_1019A1A90 + 48);
    }
    sub_100A47528((uint64_t)v13, v14);
    int v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_41;
      }
      goto LABEL_36;
    }

    goto LABEL_31;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 40),  (unint64_t)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 88),  a3);
  if ((*(_DWORD *)(v5 + 132) & 0x80) == 0) {
    goto LABEL_28;
  }
LABEL_25:
  char v13 = *(void *)(v5 + 96);
  if (!v13) {
    char v13 = *(void *)(qword_1019A1B68 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v13,  a2,  a4);
LABEL_28:
  if (*(int *)(v5 + 112) >= 1)
  {
    int v14 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(void *)(*(void *)(v5 + 104) + 8 * v14++),  a2,  a4);
    while (v14 < *(int *)(v5 + 112));
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 32),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  BOOL v11 = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_BYTE *)(a1 + 64) = v11;
  int v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_26:
    char v13 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(void *)(a1 + 40) = v13;
    int v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 66),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

    if (v6[239] < 0)
    {
      sub_1010DD48C(v28, *((void **)v6 + 27), *((void *)v6 + 28));
    }

    else
    {
      *(_OWORD *)__int128 v28 = *(_OWORD *)(v6 + 216);
      __int128 v29 = *((void *)v6 + 29);
    }

    int v15 = *(unsigned __int8 *)(a1 + 239);
    if ((v15 & 0x80u) == 0LL) {
      int v16 = (void *)*(unsigned __int8 *)(a1 + 239);
    }
    else {
      int v16 = *(void **)(a1 + 224);
    }
    uint64_t v17 = (void *)HIBYTE(v29);
    std::string::size_type v18 = SHIBYTE(v29);
    if (v29 < 0) {
      uint64_t v17 = v28[1];
    }
    if (v16 == v17)
    {
      __int128 v19 = (const void **)(a1 + 216);
      if (v29 >= 0) {
        __int128 v20 = v28;
      }
      else {
        __int128 v20 = (void **)v28[0];
      }
      if ((v15 & 0x80) != 0)
      {
        signed __int8 v7 = memcmp(*v19, v20, *(void *)(a1 + 224)) == 0;
        goto LABEL_48;
      }

      if (*(_BYTE *)(a1 + 239))
      {
        __int128 v21 = v15 - 1;
        do
        {
          __int128 v23 = *(unsigned __int8 *)v19;
          __int128 v19 = (const void **)((char *)v19 + 1);
          __int128 v22 = v23;
          __int128 v25 = *(unsigned __int8 *)v20;
          __int128 v20 = (void **)((char *)v20 + 1);
          __int128 v24 = v25;
          __int128 v27 = v21-- != 0;
          signed __int8 v7 = v22 == v24;
        }

        while (v22 == v24 && v27);
LABEL_48:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }

      signed __int8 v7 = 1;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_50:
        if ((v31 & 0x8000000000000000LL) == 0) {
          return v4 & v7;
        }
        goto LABEL_22;
      }
    }

    else
    {
      signed __int8 v7 = 0;
      if ((SHIBYTE(v29) & 0x80000000) == 0) {
        goto LABEL_50;
      }
    }

  sub_1001BA1BC(v33);
  return (v19 - v25) >> 5;
}

  sub_1001BA1BC(v35);
  return 0x6DB6DB6DB6DB6DB7LL * ((v19 - v27) >> 3);
}

  sub_1001BA1BC(v39);
  return 0xCCCCCCCCCCCCCCCDLL * ((v19 - v31) >> 5);
}

  __int128 v20 = (uint64_t)v184;
  v174 = v185;
  if (v185 != v184) {
    goto LABEL_135;
  }
  __int128 v21 = v1[506];
  __int128 v22 = v1[507];
  if (v21 == v22) {
    goto LABEL_134;
  }
  __int128 v23 = 0;
  v175 = (int8x16_t *)(v1 + 143);
  v176 = (double *)(v1 + 76);
  __asm { FMOV            V0.2D, #-1.0 }

  v171 = _Q0;
  do
  {
    __int128 v26 = sub_100D2DBDC( v176,  *(double *)(v21 + 32),  *(double *)(v21 + 40),  *((double *)v1 + 145),  *((double *)v1 + 146),  0.0);
    memset(v203, 0, 24);
    *(_OWORD *)&v203[24] = xmmword_1012E0070;
    v203[40] = 0;
    v204 = 0u;
    v205 = 0u;
    v210 = v171;
    *(void *)&v211[0] = 0xBFF0000000000000LL;
    LODWORD(v214) = 0;
    v212 = 0LL;
    v213 = 0LL;
    WORD2(v214) = 1;
    DWORD2(v214) = 0;
    v216 = 0LL;
    v215 = 0uLL;
    v206 = *(_OWORD *)(v21 + 32);
    *(void *)&v207 = v1[150];
    if (v26 < 8.0) {
      __int128 v26 = 8.0;
    }
    *((double *)&v207 + 1) = *(float *)(v21 + 24);
    *(double *)v208 = v26;
    *(_OWORD *)((char *)v208 + std::iostream::~basic_iostream(v2, v3 + 8) = xmmword_1012E6890;
    __int128 v27 = v1[164];
    *((void *)&v208[1] + 1) = v1[153];
    *(void *)&v209 = v27;
    BYTE8(v209) = *((_BYTE *)v1 + 1356);
    *(int8x16_t *)((char *)v211 + std::iostream::~basic_iostream(v2, v3 + 8) = vextq_s8(*v175, *v175, 8uLL);
    *((void *)&v211[1] + 1) = v1[142];
    sub_100D725E4((uint64_t)v203, 0);
    *(double *)&v208[1] = 1.0 / *((double *)v208 + 1);
    sub_1000F2F30(&v212, (uint64_t *)v21);
    __int128 v28 = *(void *)(v21 + 48);
    __int128 v29 = *(_OWORD *)(v21 + 32);
    v214 = *(_OWORD *)(v21 + 16);
    v215 = v29;
    v216 = v28;
    if (*((double *)v1 + 165) <= 0.0 || (__int128 v30 = *((double *)v1 + 154), v30 < 0.0))
    {
      if (!*((_BYTE *)v1 + 1848)) {
        goto LABEL_49;
      }
      __int128 v30 = *((double *)v1 + 267);
      if (v30 < 0.0) {
        goto LABEL_49;
      }
    }

    __int128 v31 = fmod(v30 - *((double *)&v207 + 1), 360.0);
    if (v31 < 0.0) {
      __int128 v31 = v31 + 360.0;
    }
    __int128 v32 = v31 + -360.0;
    if (v31 <= 180.0) {
      __int128 v32 = v31;
    }
    std::string::size_type v33 = fabs(v32);
    if (v33 < 135.0
      && (v33 > 60.0 ? (__int128 v34 = *((_DWORD *)v1 + 1010) <= 0) : (__int128 v34 = 1),
          v34
       && (v33 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v1[507] - v1[506]) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v32 == 0.0) {
        std::string::size_type v36 = *(double *)&v208[1];
      }
      else {
        std::string::size_type v36 = 1.0 / v33;
      }
      *(double *)&v208[1] = v36;
      sub_100D725E4((uint64_t)v203, 0);
      BOOL v44 = v185;
      if ((unint64_t)v185 >= v186)
      {
        std::string v59 = sub_100D7466C((uint64_t *)&v184, (uint64_t)v203);
      }

      else
      {
        *v185 = *(_OWORD *)v203;
        std::string v45 = *(_OWORD *)&v203[16];
        std::string v46 = *(_OWORD *)&v203[32];
        std::string v47 = v205;
        v44[3] = v204;
        v44[4] = v47;
        v44[1] = v45;
        void v44[2] = v46;
        std::string v48 = v206;
        std::string v49 = v207;
        std::string v50 = v208[1];
        v44[7] = v208[0];
        v44[8] = v50;
        v44[5] = v48;
        v44[6] = v49;
        std::string v51 = v209;
        std::string v52 = v210;
        char v53 = v211[1];
        v44[11] = v211[0];
        v44[12] = v53;
        v44[9] = v51;
        v44[10] = v52;
        *((void *)v44 + 26) = v212;
        std::string v54 = v213;
        *((void *)v44 + 27) = v213;
        if (v54)
        {
          uint64_t v55 = (unint64_t *)&v54->__shared_owners_;
          do
            std::string v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }

        char v57 = v214;
        std::string v58 = v215;
        *((void *)v44 + 32) = v216;
        v44[14] = v57;
        v44[15] = v58;
        std::string v59 = (uint64_t)v44 + 264;
      }

      v185 = (_OWORD *)v59;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      std::string v60 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        std::string v61 = 0xF83E0F83E0F83E1LL * ((uint64_t)(v1[510] - v1[509]) >> 3);
        *(_DWORD *)__int128 buf = 134350849;
        *(void *)&uint8_t buf[4] = v7;
        v224 = 2049;
        *(void *)v225 = v206;
        *(_WORD *)&v225[8] = 2049;
        *(void *)&v225[10] = *((void *)&v206 + 1);
        v226 = 2050;
        v227 = *((void *)&v207 + 1);
        v228 = 2050;
        v229 = *(void *)&v208[0];
        v230 = 2050;
        v231 = *((void *)&v208[0] + 1);
        v232 = 2050;
        v233 = v61;
        v234 = 2050;
        v235 = *(void *)&v208[1];
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{pub lic}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf",  buf,  0x52u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        std::string v62 = 0xF83E0F83E0F83E1LL * ((uint64_t)(v173[510] - v173[509]) >> 3);
        *(_DWORD *)v217 = 134350849;
        *(void *)&v217[4] = v7;
        *(_WORD *)&v217[12] = 2049;
        *(void *)&v217[14] = v206;
        *(_WORD *)&v217[22] = 2049;
        *(void *)&v217[24] = *((void *)&v206 + 1);
        *(_WORD *)v218 = 2050;
        *(void *)&v218[2] = *((void *)&v207 + 1);
        *(_WORD *)&v218[10] = 2050;
        *(void *)&v218[12] = *(void *)&v208[0];
        *(_WORD *)&v218[20] = 2050;
        *(void *)&v218[22] = *((void *)&v208[0] + 1);
        v219 = 2050;
        v220 = v62;
        v221 = 2050;
        v222 = *(void *)&v208[1];
        LODWORD(v170) = 82;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{pub lic}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf",  v217,  v170);
        std::string v64 = (char *)v63;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v63);
        if (v64 != buf) {
          free(v64);
        }
        uint64_t v1 = v173;
      }
    }

    else
    {
LABEL_49:
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      __int128 v37 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        __int128 v38 = *(float *)(v21 + 24);
        __int128 v39 = v1[154];
        __int128 v40 = *((_DWORD *)v1 + 1010);
        *(_DWORD *)__int128 buf = 134349824;
        *(void *)&uint8_t buf[4] = v7;
        v224 = 2050;
        *(double *)v225 = v38;
        *(_WORD *)&v225[8] = 2050;
        *(void *)&v225[10] = v39;
        v226 = 1026;
        LODWORD(v227) = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb cour se,%{public}.1lf,rejection,%{public}d",  buf,  0x26u);
      }

      ++v23;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        std::string v65 = *(float *)(v21 + 24);
        std::string v66 = v1[154];
        std::string v67 = *((_DWORD *)v1 + 1010);
        *(_DWORD *)v217 = 134349824;
        *(void *)&v217[4] = v7;
        *(_WORD *)&v217[12] = 2050;
        *(double *)&v217[14] = v65;
        *(_WORD *)&v217[22] = 2050;
        *(void *)&v217[24] = v66;
        *(_WORD *)v218 = 1026;
        *(_DWORD *)&v218[2] = v67;
        LODWORD(v170) = 38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb cour se,%{public}.1lf,rejection,%{public}d",  v217,  v170);
        std::string v69 = (char *)v68;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v68);
        if (v69 != buf) {
          free(v69);
        }
      }
    }

    std::string v41 = v213;
    if (v213)
    {
      std::string::size_type v42 = (unint64_t *)&v213->__shared_owners_;
      do
        std::string v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }

    v21 += 56LL;
  }

  while (v21 != v22);
  if (v23 <= 0)
  {
LABEL_134:
    __int128 v20 = (uint64_t)v184;
    v174 = v185;
    goto LABEL_135;
  }

  __int128 v20 = (uint64_t)v184;
  v174 = v185;
  if (0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v1[507] - v1[506]) >> 3) != v23 || v185 != v184)
  {
LABEL_135:
    if (v174 != (_OWORD *)v20)
    {
      v172 = v1 + 509;
      v94 = (double *)(v1 + 76);
      *((_DWORD *)v1 + 1010) = 0;
      BOOL v95 = -1.0;
      double v96 = 0.0;
      v97 = -1.0;
      do
      {
        v98 = (double *)v1[512];
        v99 = (double *)v1[513];
        if (v98 == v99) {
          goto LABEL_162;
        }
        unint64_t v100 = 1;
        do
        {
          CFStringRef v101 = vabdd_f64(v98[23], *(double *)(v20 + 184));
          if (v95 < 0.0) {
            BOOL v95 = v101;
          }
          int v102 = sub_100D2DBDC(v94, *(double *)(v20 + 80), *(double *)(v20 + 88), v98[10], v98[11], 0.0);
          if (v102 < v97 || v97 < 0.0) {
            v97 = v102;
          }
          if (v102 < 0.001)
          {
            v104 = *(double *)(v20 + 256) >= 0.2;
            *(void *)v217 = v217;
            *(void *)&v217[8] = v217;
            *(void *)&v217[16] = 0LL;
            if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, BOOL, void))(*(void *)v187 + 72LL))( v187,  v217,  v20 + 208,  v104,  0LL))
            {
              unint64_t v105 = *(void *)&v217[16];
              unint64_t v100 = *(void *)&v217[16] > 1uLL;
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              v106 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 134349568;
                *(void *)&uint8_t buf[4] = v7;
                v224 = 1026;
                *(_DWORD *)v225 = v105 > 1;
                *(_WORD *)&v225[4] = 2050;
                *(void *)&v225[6] = *(void *)&v217[16];
                _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu",  buf,  0x1Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                *(_DWORD *)v203 = 134349568;
                *(void *)&v203[4] = v7;
                *(_WORD *)&v203[12] = 1026;
                *(_DWORD *)&v203[14] = v105 > 1;
                *(_WORD *)&v203[18] = 2050;
                *(void *)&v203[20] = *(void *)&v217[16];
                LODWORD(v170) = 28;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu",  v203,  v170);
                v108 = (char *)v107;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()",  "%s\n",  v107);
                if (v108 != buf) {
                  free(v108);
                }
              }
            }

            sub_100D53CE4((uint64_t *)v217);
          }

          v98 += 33;
        }

        while (v98 != v99);
        if (v100)
        {
LABEL_162:
          uint64_t v109 = *(double *)(v20 + 128);
          uint64_t v1 = v173;
          uint64_t v110 = v173[510];
          if (v110 >= v173[511])
          {
            char v125 = sub_100D7466C(v172, v20);
          }

          else
          {
            *(_OWORD *)uint64_t v110 = *(_OWORD *)v20;
            int v111 = *(_OWORD *)(v20 + 16);
            uint64_t v112 = *(_OWORD *)(v20 + 32);
            __int16 v113 = *(_OWORD *)(v20 + 64);
            *(_OWORD *)(v110 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v20 + 48);
            *(_OWORD *)(v110 + 64) = v113;
            *(_OWORD *)(v110 + 16) = v111;
            *(_OWORD *)(v110 + 32) = v112;
            uint64_t v114 = *(_OWORD *)(v20 + 80);
            uint64_t v115 = *(_OWORD *)(v20 + 96);
            v116 = *(_OWORD *)(v20 + 128);
            *(_OWORD *)(v110 + 112) = *(_OWORD *)(v20 + 112);
            *(_OWORD *)(v110 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v116;
            *(_OWORD *)(v110 + 80) = v114;
            *(_OWORD *)(v110 + 96) = v115;
            v117 = *(_OWORD *)(v20 + 144);
            v118 = *(_OWORD *)(v20 + 160);
            char v119 = *(_OWORD *)(v20 + 192);
            *(_OWORD *)(v110 + 176) = *(_OWORD *)(v20 + 176);
            *(_OWORD *)(v110 + 192) = v119;
            *(_OWORD *)(v110 + 144) = v117;
            *(_OWORD *)(v110 + 160) = v118;
            *(void *)(v110 + 20std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(v20 + 208);
            int v120 = *(void *)(v20 + 216);
            *(void *)(v110 + 216) = v120;
            if (v120)
            {
              int v121 = (unint64_t *)(v120 + 8);
              do
                char v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
            }

            v123 = *(_OWORD *)(v20 + 224);
            __int128 v124 = *(_OWORD *)(v20 + 240);
            *(void *)(v110 + 256) = *(void *)(v20 + 256);
            *(_OWORD *)(v110 + 224) = v123;
            *(_OWORD *)(v110 + 240) = v124;
            char v125 = v110 + 264;
          }

          double v96 = v96 + v109;
          v173[510] = v125;
        }

        else
        {
          uint64_t v1 = v173;
        }

        v20 += 264LL;
      }

      while ((_OWORD *)v20 != v174);
      if (v97 < 0.0 || v95 <= 0.0 || v95 >= 5.0 || v97 <= v95 * 50.0)
      {
        if (v96 > 0.0)
        {
          v130 = v1[509];
          v131 = v1[510];
          while (v130 != v131)
          {
            *(double *)(v130 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(double *)(v130 + 128) / v96;
            v130 += 264LL;
          }
        }

        std::string v70 = 1LL;
      }

      else
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        __n128 v126 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 134349312;
          *(void *)&uint8_t buf[4] = v7;
          v224 = 2050;
          *(double *)v225 = v97;
          _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          *(_DWORD *)v203 = 134349312;
          *(void *)&v203[4] = v7;
          *(_WORD *)&v203[12] = 2050;
          *(double *)&v203[14] = v97;
          LODWORD(v170) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting",  v203,  v170);
          v163 = (char *)v162;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()",  "%s\n",  v162);
          if (v163 != buf) {
            free(v163);
          }
          uint64_t v1 = v173;
        }

        char v127 = v1[510];
        v128 = v1[509];
        if (v127 != v128)
        {
          do
          {
            v129 = v127 - 264;
            sub_10000AE14(v127 - 56);
            char v127 = v129;
          }

          while (v129 != v128);
        }

        std::string v70 = 0LL;
        v1[510] = v128;
      }

      goto LABEL_203;
    }

    goto LABEL_202;
  }

  std::string v70 = 0LL;
  ++*((_DWORD *)v1 + 1010);
LABEL_203:
  *(void *)__int128 buf = &v184;
  sub_100D73A50((void ***)buf);
LABEL_204:
  v136 = v188;
  if (v188)
  {
    v137 = (unint64_t *)&v188->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  return v70;
}

  *(_DWORD *)(a1 + 84) |= 4u;
  BOOL v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    BOOL v11 = (char *)operator new(0x28uLL);
    *(void *)BOOL v11 = &off_101887530;
    *(_OWORD *)(v11 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(void *)(a1 + 24) = v11;
  }

  signed __int8 v12 = *(void *)(a2 + 24);
  if (!v12) {
    signed __int8 v12 = *(void *)(qword_1019A20E0 + 24);
  }
  uint64_t result = sub_100E3A440((uint64_t)v11, v12);
  int v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }

  signed __int8 v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v12 & 0x80000000) != 0)
  {
    char v13 = 11;
  }

  else if (v12 >= 0x80)
  {
    char v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 52);
  }

  else
  {
    char v13 = 2;
  }

  v4 += v13;
  if ((v3 & 8) != 0)
  {
LABEL_33:
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 11;
    }

    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 52);
    }

    else
    {
      int v15 = 2;
    }

    v4 += v15;
  }

  __int128 v28 = sub_100EC07EC(a1, (uint64_t *)a3, (uint64_t)a4, v55, v14);
  if (v28 != -1)
  {
    __int128 v29 = sub_100EC0AB0(a1, (uint64_t *)a3, (uint64_t)a4, v55);
    if (v29 != -1)
    {
      __int128 v30 = sub_100EC00F4(a1, (uint64_t *)a3, (uint64_t)a4, v55, v54);
      if (v30 != -1)
      {
        __int128 v31 = sub_100EC040C(a1, a3, (uint64_t)a4, v54, v14);
        __int128 v32 = v31;
        if ((_DWORD)v31 != -1)
        {
          std::string::size_type v33 = sub_100EC0740(v31, (void *)a3, (uint64_t)a4);
          __int128 v34 = sub_100EC142C(a1, a3);
          if (v34 != -1)
          {
            BOOL v35 = *(void **)(a3 + 40);
            std::string::size_type v36 = *(void **)(a3 + 48);
            while (v35 != v36)
            {
              v35[7] = 0LL;
              v35[8] = 0LL;
              v35[9] = 0LL;
              v35[12] = v35[11];
              v35 += 14;
            }

            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10188A8E0);
            }
            std::string v45 = v52 >> 4;
            std::string v46 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              std::string v47 = -1227133513 * ((*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 4);
              *(_DWORD *)__int128 buf = 134351104;
              std::string v75 = v55;
              std::string v76 = 1026;
              std::string v77 = v47;
              std::string v78 = 2050;
              std::string v79 = 0x6DB6DB6DB6DB6DB7LL * v45;
              std::string v80 = 1026;
              std::string v81 = v28;
              std::string v82 = 1026;
              std::string v83 = v29;
              std::string v84 = 1026;
              std::string v85 = v30;
              __int128 v86 = 1026;
              BOOL v87 = v32;
              std::string v88 = 1026;
              int v89 = v33;
              uint64_t v90 = 1026;
              v91 = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{publi c}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDir ection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d",  buf,  0x40u);
            }

            int v9 = v53;
            if (!sub_1002921D0(115, 2))
            {
              __int128 v37 = 1LL;
              goto LABEL_47;
            }

            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10188A8E0);
            }
            std::string v49 = -1227133513 * ((*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 4);
            std::string v56 = 134351104;
            char v57 = v55;
            std::string v58 = 1026;
            std::string v59 = v49;
            std::string v60 = 2050;
            std::string v61 = 0x6DB6DB6DB6DB6DB7LL * v45;
            std::string v62 = 1026;
            std::string v63 = v28;
            std::string v64 = 1026;
            std::string v65 = v29;
            std::string v66 = 1026;
            std::string v67 = v30;
            std::string v68 = 1026;
            std::string v69 = v32;
            std::string v70 = 1026;
            std::string v71 = v33;
            std::string v72 = 1026;
            std::string v73 = v34;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public} d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirecti on,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d",  &v56,  64);
            std::string v51 = (uint8_t *)v50;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)",  "%s\n",  v50);
            if (v51 != buf) {
              free(v51);
            }
            __int128 v37 = 1LL;
            goto LABEL_54;
          }
        }
      }
    }
  }

      int v14 = v5 + 80;
    }

    while (v5 + 80 != v6);
  }

  int v14 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    int v14 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t result = v14 + 9;
  }
  else {
    uint64_t result = v14;
  }
LABEL_29:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

  signed __int8 v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 44),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  __int128 v23 = *(void *)(a1 + 2280) + *(void *)(a1 + 2288);
  __int128 v24 = *(void *)(a1 + 2256);
  __int128 v25 = (void *)(v24 + 8 * (v23 / 0x66));
  if (*(void *)(a1 + 2264) == v24) {
    __int128 v26 = 0LL;
  }
  else {
    __int128 v26 = (char *)(*v25 + 40 * (v23 % 0x66));
  }
  return sub_100CE5A40((void *)(a1 + 2248), v7, v9, v25, v26);
}

  if (-[CLClientAuthorizationCache isInitialCache](self, "isInitialCache"))
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v17 = 0u;
    std::string::size_type v18 = 0u;
    cachePopulationReplyBlocks = self->_cachePopulationReplyBlocks;
    BOOL v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( cachePopulationReplyBlocks,  "countByEnumeratingWithState:objects:count:",  &v17,  v22,  16LL);
    if (v11)
    {
      signed __int8 v12 = v11;
      char v13 = *(void *)v18;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v13) {
            objc_enumerationMutation(cachePopulationReplyBlocks);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8LL * (void)i) + 16LL))();
        }

        signed __int8 v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( cachePopulationReplyBlocks,  "countByEnumeratingWithState:objects:count:",  &v17,  v22,  16LL);
      }

      while (v12);
    }

    self->_cachePopulationReplyBlocks = 0LL;
  }
}

  signed __int8 v12 = *(_BYTE *)(a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 45) = v12;
  unint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 16));
  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 46), 0xDu);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  signed __int8 v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 52) = v12;
  unint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "repetitiveMotionStartTs", *(void *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHeartRateThreshold", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 56) = result;
  unint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "relativeInitialContactTime", *(double *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  char v13 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 2std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  unint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_26:
    int v15 = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 60) = v3 | 4;
    *(_DWORD *)(result + 20) = v15;
    return result;
  }

  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 60) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0xCu);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 43), 0xAu);
  signed __int8 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }

  BOOL v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 44) = v11;
  unint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "gpsIsRealSample", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  unint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_26:
    uint64_t result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 104) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }

  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 80));
  int v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x400) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  if ((*(_WORD *)(v3 + 104) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xCu);
  }
  return result;
}

  PB::TextFormatter::format(this, "dimensions", *(void *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  char v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v13;
  unint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_26:
    int v15 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    return result;
  }

  PB::TextFormatter::format(this, "rangeVal", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 4) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x130u);
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x131u);
  }
  return result;
}

  int v9 = *(_BYTE *)(a2 + 93);
  v3 |= 0x4000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 93) = v9;
  unint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 0xCCu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  char v13 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v13;
  unint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_26:
    int v15 = *(_BYTE *)(a2 + 60);
    *(_WORD *)(result + 64) = v3 | 0x800;
    *(_BYTE *)(result + 60) = v15;
    return result;
  }

  PB::TextFormatter::format(this, "rawPressureTimestamp", *(void *)(a1 + 8));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x400) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 0x800) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 40) = result;
  unint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "hrmax", *(float *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  unint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 44));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  unint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "coverage2d", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  unint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "downhillStartTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0xAu);
  if ((*(_WORD *)(v3 + 96) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  }
  return result;
}

      __int128 v21 = v12 & 7;
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (*((_BYTE *)this + 24)) {
        __int128 v22 = 1;
      }
      else {
        __int128 v22 = v21 == 4;
      }
      if (v22) {
        return v4 == 0;
      }
      __int128 v23 = v12 >> 3;
      if ((int)v23 <= 29999)
      {
        __int128 v24 = (v23 - 2048);
        if (v24 <= 0xBC) {
          __asm { BR              X9 }
        }

        goto LABEL_45;
      }

      switch((_DWORD)v23)
      {
        case 0x7530:
          __int128 v27 = operator new(0x10uLL);
          sub_10113C428(v27);
          __int128 v31 = a1[368];
          a1[368] = v27;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
            __int128 v27 = (void *)a1[368];
          }

          break;
        case 0x7531:
          __int128 v27 = operator new(0x10uLL);
          sub_10113C748(v27);
          __int128 v32 = a1[369];
          a1[369] = v27;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
            __int128 v27 = (void *)a1[369];
          }

          break;
        case 0x7532:
          __int128 v27 = operator new(0x10uLL);
          sub_1010A1B24(v27);
          __int128 v30 = a1[179];
          a1[179] = v27;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
            __int128 v27 = (void *)a1[179];
          }

          break;
        default:
          goto LABEL_45;
      }

      if (!PB::Reader::placeMark(this, v33, v28, v29)
        || ((*(uint64_t (**)(void *, PB::Reader *))(*v27 + 16LL))(v27, this) & 1) == 0)
      {
        return 0LL;
      }

      PB::Reader::recallMark(this, v33);
LABEL_50:
      unint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v25 = (v23 - 1);
    if (v25 <= 0x1FF) {
      __asm { BR              X9 }
    }

    __int128 v26 = (v23 - 1001);
    if (v26 <= 0x34) {
      __asm { BR              X9 }
    }

  std::string::size_type v18 = *(_DWORD *)(a2 + 120);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 120) = v18;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  __int128 v20 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 100) |= 0x40u;
  *(void *)(a1 + 72) = v20;
  char v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 4) == 0)
  {
LABEL_13:
    if ((v13 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "speedStdDevPedometer", *(double *)(a1 + 48));
  signed __int8 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0xAu);
  int v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  char v13 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 24) = v13;
  unint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_26:
    int v15 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(result + 92) = v3 | 0x200;
    *(_DWORD *)(result + 80) = v15;
    return result;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 64));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x100) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "steps", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x200) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v4 |= 0x80u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  uint64_t v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0) {
      return result;
    }
LABEL_26:
    uint64_t result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 64) = v4 | 1;
    *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
    return result;
  }

  PB::TextFormatter::format(this, "tapDetectStatus", *(_DWORD *)(a1 + 56));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "widthCalculationMethod", *(_DWORD *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  }
  return result;
}

  std::string::size_type v18 = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 104) |= 0x10u;
  *(void *)(a1 + 64) = v18;
  int v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 0x20) == 0)
  {
LABEL_14:
    if ((v9 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    __int128 v20 = *(void *)(a2 + 32);
    *(_WORD *)(a1 + 104) |= 1u;
    *(void *)(a1 + 32) = v20;
    if ((*(_WORD *)(a2 + 104) & 8) == 0) {
      return a1;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "sourceIosTimeUncertainty", *(double *)(a1 + 56));
  uint64_t v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0xAu);
  uint64_t v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 1) == 0)
  {
LABEL_15:
    if ((v8 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xCu);
  }

  int v16 = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 96) |= 0x40u;
  *(_DWORD *)(a1 + 76) = v16;
  signed __int8 v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  uint64_t v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0xAu);
  if ((*(_WORD *)(v3 + 112) & 0x40) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  unint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 16) = result;
  unint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "obstructed", *(float *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "filteredGravityX", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "fireAll", *(_BYTE *)(a1 + 78));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  signed __int8 v10 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v10;
  unint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "pedEnergyPlane", *(float *)(a1 + 24));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 59), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  signed __int8 v12 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  unint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "shouldNotifyStats", *(_BYTE *)(a1 + 61));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  signed __int8 v12 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 80) = v12;
  unint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  char v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v13;
  unint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_26:
    int v15 = *(_BYTE *)(a2 + 88);
    *(_WORD *)(result + 92) = v3 | 0x800;
    *(_BYTE *)(result + 8std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    return result;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 84));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v5 & 0x100) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "withinDistance", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCu);
  }
  return result;
}

  BOOL v11 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 32) = v11;
  unint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "quality", *(_DWORD *)(a1 + 88));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  signed __int8 v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 16) = v12;
  unint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  int v16 = *(_DWORD *)(a2 + 112);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 112) = v16;
  if ((*(_WORD *)(a2 + 124) & 0x10) != 0)
  {
LABEL_11:
    int v9 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 124) = v6 | 0x10;
    *(_DWORD *)(a1 + 100) = v9;
  }

  int v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  unint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 104));
  int v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  int v5 = *(_BYTE *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  unint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  unint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 72) = result;
  unint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "centripetalRotationRateY", *(double *)(a1 + 64));
  int v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 40) = result;
  unint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

void sub_100011E84()
{
  v0.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Con"
                       "tents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/"
                       "include/boost/uuid/string_generator.hpp";
  v0.i64[1] = (uint64_t)"void boost::uuids::string_generator::throw_invalid() const";
  uint64_t v1 = 192LL;
  sub_100011FC0(&v2, &v0);
}

void sub_100011ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100011EE8(uint64_t a1, int a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934AB0);
  if ((v2 & 1) == 0)
  {
    int v9 = a2;
    int v8 = __cxa_guard_acquire(&qword_101934AB0);
    a2 = v9;
    if (v8)
    {
      qword_101934AA8 = (uint64_t)&a0123456789abcd[(void)off_101934AA0];
      __cxa_guard_release(&qword_101934AB0);
      a2 = v9;
    }
  }

  uint64_t v3 = qword_101934AA8;
  uint64_t v4 = memchr("0123456789abcdefABCDEF", a2, qword_101934AA8 - (void)"0123456789abcdefABCDEF");
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_BYTE *)v3;
  }
  unint64_t v6 = v5 - "0123456789abcdefABCDEF";
  return byte_1012C8569[v6];
}

void sub_100011FC0(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10001201C((uint64_t)exception, a1, a2);
}

void sub_100012008(_Unwind_Exception *a1)
{
}

uint64_t sub_10001201C(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)a1 = &off_101818A40;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_101818A70;
  *(void *)(a1 + 24) = off_101818A98;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_100012088(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *sub_1000120C8(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x40uLL);
  *(void *)unsigned __int8 v2 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 3) = &off_101818AE8;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)unsigned __int8 v2 = &off_101818A40;
  *((void *)v2 + 1) = off_101818A70;
  *((void *)v2 + 3) = off_101818A98;
  sub_10001242C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_100012180(_Unwind_Exception *a1)
{
}

void sub_1000121B4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10001237C((uint64_t)exception, a1);
}

void sub_1000121F0(_Unwind_Exception *a1)
{
}

void sub_100012204(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_100012244(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_10001227C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 8);
  *(void *)(a1 + 16) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete(v2);
}

void sub_1000122C0(void *a1)
{
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_1000122F8(void *a1)
{
  unsigned __int8 v2 = a1 - 3;
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  operator delete(v2);
}

uint64_t *sub_10001233C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return a1;
}

uint64_t sub_10001237C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_101818AE8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_101818A40;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_101818A70;
  *(void *)(a1 + 24) = off_101818A98;
  return a1;
}

void sub_100012418(_Unwind_Exception *a1)
{
}

uint64_t sub_10001242C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40LL))(&v7);
    uint64_t v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
  }

  return result;
}

void sub_1000124F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 32LL))(a10);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 32LL))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001254C(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  else {
    unint64_t v13 = v7;
  }
  __int128 v21 = a1 + 2;
  if (v13) {
    int v14 = (char *)sub_10001275C((uint64_t)(a1 + 2), v13);
  }
  else {
    int v14 = 0LL;
  }
  uint64_t v17 = v14;
  std::string::size_type v18 = &v14[64 * v6];
  __int128 v20 = &v14[64 * v13];
  sub_100012660((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  __int128 v19 = v18 + 64;
  sub_1000126E8(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1000128C0((uint64_t)&v17);
  return v15;
}

void sub_10001264C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_100012660(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, double *a6)
{
  __int128 v9 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    __int128 v13 = *a3;
    sub_1010DD48C(&__dst, *(void **)a4, *((void *)a4 + 1));
    __int128 v9 = v13;
  }

  else
  {
    __int128 __dst = *a4;
    uint64_t v15 = *((void *)a4 + 2);
  }

  double result = *a6;
  __int128 v11 = *a5;
  __int128 v12 = __dst;
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v12;
  *(void *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 40) = v11;
  *(double *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1000126E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100012790((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001275C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_1000070D4();
  }
  return operator new(a2 << 6);
}

uint64_t sub_100012790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    do
    {
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      __int128 v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v8;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      uint64_t v9 = *(void *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - std::iostream::~basic_iostream(v2, v3 + 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 64LL;
      *((void *)&v15 + 1) -= 64LL;
      a3 -= 64LL;
    }

    while (a3 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_100012848((uint64_t)v12);
  return v10;
}

uint64_t sub_100012848(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10001287C(a1);
  }
  return a1;
}

void sub_10001287C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 64LL;
  }

uint64_t sub_1000128C0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000128F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_100012948(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100012988((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100012988(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64LL)
  {
  }

  a1[1] = v2;
}

void sub_1000129D4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100012A14((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100012A14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

double sub_100012A60@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100012AA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012AC0(std::string *a1)
{
  return sub_100012E60(a1);
}

uint64_t sub_100012AFC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "TriggerUUID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100012B98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012BCC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ClientID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100012C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012CA8(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "LabelUUID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100012D50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012D84(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ReceivedTimestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100012E2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012E60(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RowId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100012F08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_100012F3C@<D0>(std::string *a1@<X8>)
{
  uint64_t v2 = 5LL;
  do
  {
    if (v2 == 5)
    {
      v8.__r_.__value_.__s.__size_ = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }

    else
    {
      v8.__r_.__value_.__s.__size_ = 2;
      strcpy((char *)&v8, ", ");
    }

    __int128 v3 = std::string::append(&v8, "?");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v6 = HIBYTE(cap);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    --v2;
  }

  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_100013044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100013090(uint64_t a1, std::string *a2)
{
  uint64_t v5 = v4;
  if ((v4 & 1) != 0) {
    sub_1000138E4(a2, v11, v12, v12 - v11);
  }
  std::ostream::~ostream(&v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(v7);
  return v5;
}

void sub_100013124( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (__cdecl **a9)(std::stringbuf *__hidden this), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100013168(uint64_t a1)
{
  *(void *)(a1 + 96) = 0LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_101818B08;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(void *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 256) = -1;
  *(void *)(a1 + 272) = a1 + 264;
  *(void *)(a1 + 280) = a1 + 266;
  return a1;
}

void sub_100013208(void *a1)
{
}

uint64_t sub_100013224(uint64_t a1)
{
  return std::streambuf::~streambuf(a1);
}

void sub_100013264(uint64_t a1)
{
  uint64_t v2 = (void *)std::streambuf::~streambuf(a1);
  operator delete(v2);
}

void *sub_1000132A8(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double sub_1000132B8@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1LL;
    goto LABEL_19;
  }

  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1LL;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }

  if (a3 == 1)
  {
    uint64_t v7 = -1LL;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }

  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }

  uint64_t v7 = -1LL;
  if ((a2 & 0x8000000000000000LL) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }

LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  return result;
}

  ++result[3];
  return result;
}

  *__int128 v12 = &v9[v17];
  return result;
}

    *(_DWORD *)(a1 + 56) |= 8u;
    uint64_t v8 = *(void **)(a1 + 24);
    if (!v8)
    {
      uint64_t v8 = operator new(0x20uLL);
      v8[1] = 0LL;
      v8[2] = 0LL;
      *uint64_t v8 = off_10181A5B8;
      *((_DWORD *)v8 + 6) = 0;
      *(void *)(a1 + 24) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A07F8 + 24);
    }
    *(float *)&uint64_t v5 = sub_1000655EC((uint64_t)v8, v9);
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x10) == 0)
    {
LABEL_11:
      if ((v6 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 0x10) == 0)
  {
LABEL_8:
    if ((v7 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7LL, *(void *)(v5 + 56), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  uint64_t v10 = *(_BYTE *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(_BYTE *)(a1 + 14) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_13:
  if ((v5 & 0x20) == 0) {
    goto LABEL_14;
  }
LABEL_21:
  __int128 v12 = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 24) |= 0x20u;
  *(_BYTE *)(a1 + 16) = v12;
  if ((*(_DWORD *)(a2 + 24) & 0x40) != 0)
  {
LABEL_15:
    uint64_t v7 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 24) |= 0x40u;
    *(_BYTE *)(a1 + 17) = v7;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6LL, *(void *)(v5 + 40), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    std::string v11 = *(unsigned __int8 *)(v10 + 23);
    __int128 v12 = v11;
    char v13 = *(void *)(v10 + 8);
    if ((v11 & 0x80u) == 0) {
      __int128 v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      __int128 v14 = v13;
    }
    if (v14 >= 0x80)
    {
      __int128 v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14,  a2);
      std::string v11 = *(unsigned __int8 *)(v10 + 23);
      char v13 = *(void *)(v10 + 8);
      __int128 v12 = *(_BYTE *)(v10 + 23);
    }

    else
    {
      __int128 v15 = 1;
    }

    if (v12 < 0) {
      std::string v11 = v13;
    }
    uint64_t v4 = (v4 + v15 + v11 + 1);
  }

  *__int128 v12 = &v9[v17];
  return result;
}

  *char v13 = &v9[v17];
  return result;
}

  *__int128 v12 = &v9[v17];
  return result;
}

    char v13 = (std::stringbuf::string_type *)"";
    goto LABEL_20;
  }

  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_19;
  }
  std::string v11 = __p.__r_.__value_.__l.__size_ - 1;
  p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  --__p.__r_.__value_.__l.__size_;
LABEL_16:
  p_p->__r_.__value_.__s.__data_[v11] = 0;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v13 = &__p;
  }
  else {
    char v13 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_20:
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }
  __int128 v14 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int128 v23 = 2082;
    *(void *)&v23[2] = "";
    __int128 v24 = 1026;
    __int128 v25 = a2;
    __int128 v26 = 2082;
    __int128 v27 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:recorder setting confidence and reasons, confidence level:%{public}d, confidence re asons:%{public, location:escape_only}s}",  buf,  0x22u);
  }

  sub_100117FD8(*(void *)(a1 + 8), a2, (uint64_t)a3);
  *(void *)((char *)v18
  __int128 v19 = v15;
  std::streambuf::~streambuf(&v20);
  return std::ios::~ios(&v21);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 16),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(double *)(a1 + 32) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 40);
  if ((v5 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_12:
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_21:
  char v13 = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  *(_BYTE *)(a1 + 32) = v13;
  if ((*(_DWORD *)(a2 + 40) & 0x80) != 0)
  {
LABEL_14:
    uint64_t v7 = *(_BYTE *)(a2 + 33);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    *(_BYTE *)(a1 + 33) = v7;
  }

    *(_DWORD *)(a1 + 100) |= 4u;
    uint64_t v10 = *(char **)(a1 + 16);
    if (!v10)
    {
      uint64_t v10 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v10 = off_101827F40;
      *(_OWORD *)(v10 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = xmmword_1012E0BA0;
      *((void *)v10 + 17) = 0LL;
      v10[144] = 0;
      *((_DWORD *)v10 + 37) = 0;
      *((_DWORD *)v10 + 3std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      *(void *)(a1 + 16) = v10;
    }

    std::string v11 = *(void *)(a2 + 16);
    if (!v11) {
      std::string v11 = *(void *)(qword_1019A0BD8 + 16);
    }
    sub_1001D6490((uint64_t)v10, v11);
    uint64_t v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A0BD8 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(float *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  uint64_t v5 = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 4u;
  *(double *)(a1 + 24) = v5;
  uint64_t v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    __int128 v12 = a2[13];
    *(_DWORD *)(a1 + 20) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v12;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(void *)(v5 + 32);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0D38 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 48),  a3);
  }

    double result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x40u;
    *(double *)(a1 + 56) = result;
    if ((*(_DWORD *)(a2 + 76) & 0x80) == 0) {
      return result;
    }
LABEL_20:
    *(_DWORD *)(a1 + 76) |= 0x80u;
    uint64_t v7 = *(char **)(a1 + 64);
    if (!v7)
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v7 = off_101827B80;
      *(_OWORD *)(v7 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(void *)(a1 + 64) = v7;
    }

    uint64_t v8 = *(void *)(a2 + 64);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A0D48 + 64);
    }
    return sub_1001D323C((uint64_t)v7, v8);
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 41),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 48),  a2,  a4);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  PBDataWriterWriteInt32Field(a3, self->_workoutType, 3LL);
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  *((_DWORD *)a3 + 24) = self->_workoutType;
  *((_WORD *)a3 + 52) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  self->_workoutType = *((_DWORD *)a3 + 24);
  *(_WORD *)&self->_has |= 0x1000u;
  __int128 v3 = *((_WORD *)a3 + 52);
  if ((v3 & 1) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  PBDataWriterWriteDoubleField(a3, 10LL, self->_startTime);
  if ((*(_WORD *)&self->_has & 0x100) != 0) {
    goto LABEL_20;
  }
}

  *((void *)a3 + 2) = *(void *)&self->_startTime;
  *((_WORD *)a3 + 30) |= 2u;
  if ((*(_WORD *)&self->_has & 0x100) != 0) {
    goto LABEL_20;
  }
}

  self->_startTime = *((double *)a3 + 2);
  *(_WORD *)&self->_has |= 2u;
  if ((*((_WORD *)a3 + 30) & 0x100) != 0) {
    goto LABEL_20;
  }
}

  *__int128 v12 = &v9[v17];
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_generationTimeSecs),  @"generationTimeSecs");
  if ((*(_BYTE *)&self->_has & 8) != 0) {
LABEL_7:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_expirationAgeSecs),  @"expirationAgeSecs");
LABEL_8:
  dEPRECATEDFingerprints = self->_dEPRECATEDFingerprints;
  if (dEPRECATEDFingerprints) {
    objc_msgSend( v3,  "setObject:forKey:",  -[TRANSITPbLocationFingerprintsV1 dictionaryRepresentation](dEPRECATEDFingerprints, "dictionaryRepresentation"),  @"DEPRECATED_fingerprints");
  }
  fingerprints = self->_fingerprints;
  if (fingerprints) {
    objc_msgSend( v3,  "setObject:forKey:",  -[TRANSITPbLocationFingerprints dictionaryRepresentation](fingerprints, "dictionaryRepresentation"),  @"fingerprints");
  }
  if ((*(_BYTE *)&self->_has & 2) != 0) {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", self->_marketId),  @"marketId");
  }
  return v3;
}

  *char v13 = &v9[v17];
  return result;
}

  *char v13 = &v9[v17];
  return result;
}

  *char v13 = &v9[v17];
  return result;
}

    if (*(_BYTE *)(a1 + 2281))
    {
      __int128 v12 = sub_100F58DE0(a2, a1 + 160);
      if (v12) {
        __int128 v12 = sub_1008695D8((uint64_t)a3, a1);
      }
      *(_BYTE *)(a1 + 2281) = v12;
      char v13 = !v12;
    }

    else
    {
      char v13 = 1LL;
      *(_BYTE *)(a1 + 2281) = 1;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    __int128 v14 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      __int128 v15 = *(unsigned __int8 *)(a1 + 2281);
      int v16 = sub_100F58DE0(a2, a1 + 160);
      uint64_t v17 = sub_100313204((uint64_t)a3, a1);
      *(_DWORD *)__int128 buf = 67240960;
      LODWORD(v76) = v15;
      WORD2(v76) = 1026;
      *(_DWORD *)((char *)&v76 + 6) = v13;
      WORD5(v76) = 1026;
      HIDWORD(v76) = v16;
      std::string v77 = 1026;
      std::string v78 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CellFlow, skipnotify, %{public}d, retval, %{public}d, cell, %{public}d, latlon, %{public}d,",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018324F0);
      }
      std::string v56 = qword_101934858;
      char v57 = *(unsigned __int8 *)(a1 + 2281);
      std::string v58 = sub_100F58DE0(a2, a1 + 160);
      std::string v59 = sub_100313204((uint64_t)a3, a1);
      std::string v71 = 67240960;
      LODWORD(v72) = v57;
      WORD2(v72) = 1026;
      *(_DWORD *)((char *)&v72 + 6) = v13;
      WORD5(v72) = 1026;
      HIDWORD(v72) = v58;
      std::string v73 = 1026;
      std::string v74 = v59;
      LODWORD(v69) = 26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  2LL,  "CellFlow, skipnotify, %{public}d, retval, %{public}d, cell, %{public}d, latlon, %{public}d,",  &v71,  v69);
      std::string v61 = (uint8_t *)v60;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)",  "%s\n",  v60);
      if (v61 != buf) {
        free(v61);
      }
    }

    *(_OWORD *)(a1 + 160) = *(_OWORD *)a2;
    std::string::size_type v18 = *(_OWORD *)(a2 + 16);
    __int128 v19 = *(_OWORD *)(a2 + 32);
    __int128 v20 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 192) = v19;
    *(_OWORD *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v20;
    *(_OWORD *)(a1 + 176) = v18;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 80);
    if (a1 + 160 != a2) {
      sub_10004C5F8( (char *)(a1 + 248),  *(char **)(a2 + 88),  *(void *)(a2 + 96),  (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
    }
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 112);
    __int128 v21 = *(_OWORD *)(a2 + 128);
    __int128 v22 = *(_OWORD *)(a2 + 144);
    __int128 v23 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 336) = v23;
    *(_OWORD *)(a1 + 28std::iostream::~basic_iostream(v2, v3 + 8) = v21;
    *(_OWORD *)(a1 + 304) = v22;
    __int128 v24 = *(_OWORD *)(a2 + 192);
    __int128 v25 = *(_OWORD *)(a2 + 208);
    __int128 v26 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 400) = v26;
    *(_OWORD *)(a1 + 352) = v24;
    *(_OWORD *)(a1 + 36std::iostream::~basic_iostream(v2, v3 + 8) = v25;
    __int128 v27 = *(_OWORD *)(a2 + 256);
    __int128 v28 = *(_OWORD *)(a2 + 272);
    __int128 v29 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 432) = v28;
    *(_OWORD *)(a1 + 44std::iostream::~basic_iostream(v2, v3 + 8) = v29;
    *(_OWORD *)(a1 + 416) = v27;
    std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a2 + 320));
    __int128 v31 = *(_OWORD *)(a2 + 360);
    __int128 v30 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 520) = v31;
    *(_OWORD *)(a1 + 536) = v30;
    __int128 v32 = *(_OWORD *)(a2 + 440);
    __int128 v34 = *(_OWORD *)(a2 + 392);
    std::string::size_type v33 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 600) = v32;
    *(_OWORD *)(a1 + 552) = v34;
    *(_OWORD *)(a1 + 56std::iostream::~basic_iostream(v2, v3 + 8) = v33;
    std::string::size_type v36 = *(_OWORD *)(a2 + 472);
    BOOL v35 = *(_OWORD *)(a2 + 488);
    __int128 v37 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 632) = v36;
    *(_OWORD *)(a1 + 64std::iostream::~basic_iostream(v2, v3 + 8) = v35;
    *(_OWORD *)(a1 + 616) = v37;
    __int128 v38 = *(_OWORD *)(a2 + 640);
    __int128 v39 = *(_OWORD *)(a2 + 656);
    __int128 v40 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 84std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 816) = v39;
    *(_OWORD *)(a1 + 832) = v40;
    *(_OWORD *)(a1 + 800) = v38;
    std::string v41 = *(_OWORD *)(a2 + 576);
    std::string::size_type v42 = *(_OWORD *)(a2 + 592);
    std::string v43 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 76std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 784) = v43;
    *(_OWORD *)(a1 + 736) = v41;
    *(_OWORD *)(a1 + 752) = v42;
    BOOL v44 = *(_OWORD *)(a2 + 512);
    std::string v45 = *(_OWORD *)(a2 + 528);
    std::string v46 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 720) = v46;
    *(_OWORD *)(a1 + 672) = v44;
    *(_OWORD *)(a1 + 68std::iostream::~basic_iostream(v2, v3 + 8) = v45;
    std::string v47 = a3[1];
    *(_OWORD *)a1 = *a3;
    *(_OWORD *)(a1 + 16) = v47;
    std::string v48 = a3[2];
    std::string v49 = a3[3];
    std::string v50 = a3[5];
    *(_OWORD *)(a1 + 64) = a3[4];
    *(_OWORD *)(a1 + 80) = v50;
    *(_OWORD *)(a1 + 32) = v48;
    *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v49;
    std::string v51 = a3[6];
    std::string v52 = a3[7];
    char v53 = a3[8];
    *(_OWORD *)(a1 + 140) = *(_OWORD *)((char *)a3 + 140);
    *(_OWORD *)(a1 + 112) = v52;
    *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v53;
    *(_OWORD *)(a1 + 96) = v51;
    return v13;
  }

  if (sub_100F58F24(a2, a1 + 1552))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    uint64_t v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134349056;
      *(double *)&std::string v76 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CellFlow, updateCellRefreshResults, using new cell after airplane mode, %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018324F0);
      }
      std::string v71 = 134349056;
      *(double *)&std::string v72 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CellFlow, updateCellRefreshResults, using new cell after airplane mode, %{public}f",  &v71,  12);
      std::string v66 = (uint8_t *)v65;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)",  "%s\n",  v65);
      if (v66 != buf) {
        free(v66);
      }
    }

    *(_BYTE *)(a1 + 2280) = 0;
    goto LABEL_19;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018324F0);
  }
  std::string v54 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134349056;
    *(double *)&std::string v76 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "CellFlow, updateCellRefreshResults, ignoring cell from before airplane mode, %{public}f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    std::string v71 = 134349056;
    *(double *)&std::string v72 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CellFlow, updateCellRefreshResults, ignoring cell from before airplane mode, %{public}f",  &v71,  12);
    std::string v68 = (uint8_t *)v67;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)",  "%s\n",  v67);
    if (v68 != buf) {
      free(v68);
    }
  }

  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_100313184;
  v70[3] = &unk_101820718;
  *(double *)&v70[4] = v7;
  AnalyticsSendEventLazy(@"com.apple.locationd.position.cell.airplaneMode", v70);
  return 0LL;
}

  double v96 = 0;
  BOOL v35 = sub_1006E27E8();
  sub_100413284(v35, &v99);
  std::string::size_type v36 = sub_1002A7CB0(v99, "NatalimetryUserInfoGender", &v96);
  __int128 v37 = v36;
  __int128 v38 = v100;
  if (!v100) {
    goto LABEL_23;
  }
  __int128 v39 = (unint64_t *)&v100->__shared_owners_;
  do
    __int128 v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v37) {
      goto LABEL_33;
    }
  }

  else
  {
LABEL_23:
    if (!v36) {
      goto LABEL_33;
    }
  }

  if (v96 <= 1) {
    *(_DWORD *)char v13 = v96;
  }
LABEL_33:
  BOOL v95 = 0;
  std::string v41 = sub_1006E27E8();
  sub_100413284(v41, &v99);
  std::string::size_type v42 = sub_1002A7CB0(v99, "NatalimetryUserInfoBiologicalSex", &v95);
  std::string v43 = v42;
  BOOL v44 = v100;
  if (v100)
  {
    std::string v45 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if (!v43) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }

  if (v42) {
LABEL_38:
  }
    *(_DWORD *)(a1 + 1356) = sub_1003DA0F4(v95);
LABEL_39:
  std::string v47 = sub_1006E27E8();
  sub_100413284(v47, &v99);
  sub_1002A81F8(v99, "NatalimetryUserInfoHrmin", (float *)(a1 + 1376));
  std::string v48 = v100;
  if (v100)
  {
    std::string v49 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  *(_DWORD *)(a1 + 1384) = *(_DWORD *)(a1 + 1376);
  std::string v51 = sub_1006E27E8();
  sub_100413284(v51, &v99);
  std::string v52 = sub_1002A81F8(v99, "NatalimetryUserInfoHrmax", (float *)(a1 + 1380));
  char v53 = v52;
  std::string v54 = v100;
  if (!v100) {
    goto LABEL_48;
  }
  uint64_t v55 = (unint64_t *)&v100->__shared_owners_;
  do
    std::string v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if ((v53 & 1) != 0) {
      goto LABEL_52;
    }
  }

  else
  {
LABEL_48:
    if ((v52 & 1) != 0) {
      goto LABEL_52;
    }
  }

  char v57 = *(float *)(a1 + 1372) * -0.699999988 + 208.0;
  if (*(_BYTE *)(a1 + 1400)) {
    char v57 = v57 + -44.0;
  }
  std::string v58 = v57;
  *(float *)(a1 + 1380) = v58;
LABEL_52:
  std::string v59 = sub_1006E27E8();
  sub_100413284(v59, &v99);
  sub_1002A81F8(v99, "NatalimetryUserInfoPal", (float *)(a1 + 1388));
  std::string v60 = v100;
  if (v100)
  {
    std::string v61 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }

  std::string v63 = sub_1006E27E8();
  sub_100413284(v63, &v99);
  std::string v64 = sub_1002A81F8(v99, "NatalimetryUserInfoRunVo2max", (float *)(a1 + 1396));
  std::string v65 = v64;
  std::string v66 = v100;
  if (v100)
  {
    std::string v67 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      if ((v65 & 1) != 0) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
  }

  if ((v64 & 1) == 0) {
LABEL_62:
  }
    *(_DWORD *)(a1 + 1396) = 1088421888;
LABEL_63:
  v94 = 0;
  std::string v69 = sub_1006E27E8();
  sub_100413284(v69, &v99);
  std::string v70 = sub_1002A7CB0(v99, "NatalimetryUserCondition", &v94);
  std::string v71 = v70;
  std::string v72 = v100;
  if (!v100) {
    goto LABEL_67;
  }
  std::string v73 = (unint64_t *)&v100->__shared_owners_;
  do
    std::string v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v71) {
      goto LABEL_77;
    }
  }

  else
  {
LABEL_67:
    if (!v70) {
      goto LABEL_77;
    }
  }

  if (v94 <= 6) {
    *(_DWORD *)(a1 + 1392) = v94;
  }
LABEL_77:
  std::string v75 = sub_1006E27E8();
  sub_100413284(v75, &v99);
  sub_1002A6F64(v99, "NatalimetryUserInfoBetaBlockerUse", (BOOL *)(a1 + 1400));
  std::string v76 = v100;
  if (v100)
  {
    std::string v77 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  std::string v79 = sub_1006E27E8();
  sub_100413284(v79, &v99);
  sub_1002A81F8(v99, "NatalimetryAdaptiveExericseMinuteThreshold", (float *)(a1 + 1404));
  std::string v80 = v100;
  if (v100)
  {
    std::string v81 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }

  std::string v83 = sub_1006E27E8();
  sub_100413284(v83, &v99);
  std::string v84 = sub_1002A81F8(v99, "NatalimetryUserInfoVo2max", (float *)(a1 + 1368));
  std::string v85 = v84;
  __int128 v86 = v100;
  if (v100)
  {
    BOOL v87 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      if ((v85 & 1) != 0) {
        return a1;
      }
      goto LABEL_92;
    }
  }

  if ((v84 & 1) == 0)
  {
LABEL_92:
    int v89 = *(_OWORD *)(a1 + 1368);
    v92[0] = *v13;
    v92[1] = v89;
    v93[0] = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)(a1 + 1396);
    sub_1003DA2B8((uint64_t)v92);
    *(_DWORD *)(a1 + 136std::iostream::~basic_iostream(v2, v3 + 8) = v90;
  }

  return a1;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

  *char v13 = &v9[v17];
  return result;
}

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_longitude),  @"longitude");
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_9:
    if ((has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  PBDataWriterWriteUint32Field(a3, self->_phenolicLocation, 8LL);
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_10:
    if ((has & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  *((_DWORD *)a3 + 12) = self->_phenolicLocation;
  *((_WORD *)a3 + 36) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_9:
    if ((has & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  *((_DWORD *)v5 + 12) = self->_phenolicLocation;
  *((_WORD *)v5 + 36) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_9:
    if ((has & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    *((_DWORD *)v5 + 10) = self->_provenance;
    *((_WORD *)v5 + 36) |= 0x20u;
    if ((*(_WORD *)&self->_has & 0x200) == 0) {
      return v5;
    }
    goto LABEL_11;
  }

  self->_longitude = *((double *)a3 + 2);
  *(_WORD *)&self->_has |= 2u;
  uint64_t v5 = *((_WORD *)a3 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10183DCF8);
  }
  uint64_t v7 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    __int128 v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notifying clients with power assertion update, shouldEnablePowerAssertion,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10183DCF8);
    }
    v10[0] = 67109120;
    v10[1] = v5;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Notifying clients with power assertion update, shouldEnablePowerAssertion,%d",  v10);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesPredictor::notifyClientsWithPowerAssertionUpdate()",  "%s\n",  v9);
  }

  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 720) + 48LL))(*(void *)(a1 + 720), v5);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 64) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    char v13 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(void *)(a1 + 32) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_22;
  }

      __int128 v40 = 0u;
      std::string v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v25 = (void *)qword_101996DF8;
      __int128 v26 = [(id)qword_101996DF8 countByEnumeratingWithState:&v38 objects:v47 count:16];
      if (v26)
      {
        __int128 v27 = v26;
        __int128 v28 = *(void *)v39;
        do
        {
          __int128 v29 = 0LL;
          do
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            __int128 v30 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v29);
            if (objc_msgSend( objc_msgSend(v30, "clientAnchor"),  "isEqualToString:",  objc_msgSend(v7, "clientAnchor")))
            {
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_1018401A0);
              }
              __int128 v31 = (os_log_s *)qword_101934988;
              if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int128 buf = 68289282;
                std::string v49 = 0;
                std::string v50 = 2082;
                std::string v51 = "";
                std::string v52 = 2114;
                char v53 = v7;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MetricForFunctionCalls: sending metrics for client, ckp:%{public, locatio n:escape_only}@}",  buf,  0x1Cu);
              }

              __int128 v32 = (unint64_t)objc_msgSend( objc_msgSend( v37,  "objectForKeyedSubscript:",  @"kCLConnectionMessageFunctionBitmapKey"),  "unsignedIntegerValue");
              std::string::size_type v33 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  objc_msgSend(v30, "userlessClientKeyPath"),  @"client");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  objc_msgSend(v37, "objectForKeyedSubscript:", @"kCLConnectionMessageTotalFunctionCallsKey"),  @"invocationCount");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v32 & 1),  @"LSEnabled");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 1) & 1),  @"APIAvailable_G");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 2) & 1),  @"StartLocation");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 3) & 1),  @"StopLocation");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 4) & 1),  @"ReqLocation");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 5) & 1),  @"Deferred_G");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 6) & 1),  @"StartHeading");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 7) & 1),  @"StopHeading");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 8) & 1),  @"StartSLC");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 9) & 1),  @"StopSLC");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 10) & 1),  @"StartPushes");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 11) & 1),  @"StopPushes");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 12) & 1),  @"StartRegion");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 13) & 1),  @"StopRegion");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 14) & 1),  @"RegionState");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 15) & 1),  @"MaxRegionDistance");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 16) & 1),  @"Regions");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 17) & 1),  @"Ranging_G");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 18) & 1),  @"Historical");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 19) & 1),  @"AuthStatus");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 20) & 1),  @"AccuracyAuth");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 21) & 1),  @"WidgetAuth");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 22) & 1),  @"RequestWIU");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 23) & 1),  @"RequestAlways");
              objc_msgSend( v33,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 24) & 1),  @"RequestAccuracy");
              AnalyticsSendEvent(@"com.apple.CoreLocation.invocationcount", v33);
            }

            __int128 v29 = (char *)v29 + 1;
          }

          while (v27 != v29);
          __int128 v27 = [v25 countByEnumeratingWithState:&v38 objects:v47 count:16];
        }

        while (v27);
      }

      return;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    std::string::size_type v36 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289282;
      std::string v49 = 0;
      std::string v50 = 2082;
      std::string v51 = "";
      std::string v52 = 2114;
      char v53 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:MetricForFunctionCalls: No clients considered for metrics today., ckp:%{public, loc ation:escape_only}@}",  buf,  0x1Cu);
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    __int128 v34 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 68289282;
      std::string v49 = 0;
      std::string v50 = 2082;
      std::string v51 = "";
      std::string v52 = 2114;
      char v53 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client is not registered. Skip metric for function calls, ckp:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
    }

    BOOL v35 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      *(_DWORD *)__int128 buf = 68289282;
      std::string v49 = 0;
      std::string v50 = 2082;
      std::string v51 = "";
      std::string v52 = 2114;
      char v53 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client is not registered. Skip metric for function calls",  "{msg%{public}.0s:Client is not registered. Skip metric for function calls, ckp:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }
}

  *char v13 = &v9[v17];
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_tileY),  @"tileY");
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

    __int128 v12 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 124) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x80) == 0) {
      goto LABEL_22;
    }
LABEL_20:
    char v13 = *(_DWORD *)(a2 + 60);
    if (v13 >= 0x12) {
      sub_1012414BC();
    }
    *(_DWORD *)(a1 + 124) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  uint64_t v6 = v5[13];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  }

  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v9 >= 0x80)
  {
    uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    __int128 v3 = a1[13];
  }

  else
  {
    uint64_t v10 = 2;
  }

  uint64_t v4 = (v10 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v9 >= 0x80)
  {
    uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    __int128 v3 = a1[11];
  }

  else
  {
    uint64_t v10 = 2;
  }

  uint64_t v4 = (v10 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 37),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 39),  (BOOL)a2,  a4);
  }

    if (v11 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    if (v9 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    if (v11 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    std::string v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 16) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

        if (v10 == 4) {
          return 1LL;
        }
      }

      uint64_t v10 = TagFallback & 7;
      __int128 v15 = (char *)*((void *)this + 1);
      __int128 v12 = *((void *)this + 2);
LABEL_27:
      if ((unint64_t)v15 >= v12 || *v15 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v17 = (_BYTE *)*((void *)this + 1);
        __int128 v12 = *((void *)this + 2);
      }

      else
      {
        const std::string::value_type *v6 = *v15;
        uint64_t v17 = v15 + 1;
        *((void *)this + 1) = v17;
      }

      std::string v11 = *(_DWORD *)(a1 + 28) | 2;
      *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    }

    while ((unint64_t)v17 >= v12 || *v17 != 26);
    *((void *)this + 1) = v17 + 1;
LABEL_35:
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v11 | 4;
    std::string::size_type v18 = *(void **)(a1 + 16);
    if (!v18)
    {
      std::string::size_type v18 = operator new(0x28uLL);
      *std::string::size_type v18 = &off_101845008;
      v18[1] = 0LL;
      v18[2] = 0LL;
      v18[3] = 0LL;
      *((_DWORD *)v18 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      *(void *)(a1 + 16) = v18;
    }

    __int128 v19 = (char *)*((void *)this + 1);
    if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
    {
    }

    else
    {
      __int128 v27 = *v19;
      *((void *)this + 1) = v19 + 1;
    }

    __int128 v20 = *((_DWORD *)this + 14);
    __int128 v21 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v20 + 1;
    if (v20 >= v21) {
      return 0LL;
    }
    __int128 v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
    __int128 v24 = *((_DWORD *)this + 14);
    __int128 v25 = __OFSUB__(v24, 1);
    __int128 v26 = v24 - 1;
    if (v26 < 0 == v25) {
      *((_DWORD *)this + 14) = v26;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    uint64_t v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }

    std::string v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1328 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    if (v11 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  std::string v11 = a2[5];
  a1[12] |= 8u;
  a1[5] = v11;
  uint64_t v5 = a2[12];
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    char v13 = a2[7];
    a1[12] |= 0x20u;
    a1[7] = v13;
    uint64_t v5 = a2[12];
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_23;
  }

  uint64_t v10 = *(_DWORD *)(a1 + 24);
  std::string v11 = (v10 + v4);
  if (v10 >= 1)
  {
    __int128 v12 = 0LL;
    do
    {
      char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006302F4( *(unsigned int **)(*(void *)(a1 + 16)
                                                                                                + 8 * v12),
                                                                               a2);
      __int128 v14 = (int)v13;
      else {
        __int128 v15 = 1;
      }
      std::string v11 = (v14 + v11 + v15);
      ++v12;
    }

    while (v12 < *(int *)(a1 + 24));
  }

  *(_DWORD *)(a1 + 44) = v11;
  return v11;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 52) |= 0x20u;
    std::string v11 = *(void **)(a1 + 24);
    if (!v11)
    {
      std::string v11 = operator new(0x20uLL);
      v11[1] = 0LL;
      void v11[2] = 0LL;
      *std::string v11 = &off_101845260;
      *((_DWORD *)v11 + 6) = 0;
      *(void *)(a1 + 24) = v11;
    }

    __int128 v12 = *(void *)(a2 + 24);
    if (!v12) {
      __int128 v12 = *(void *)(qword_1019A1388 + 24);
    }
    sub_100626D1C((uint64_t)v11, v12);
    uint64_t v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        return;
      }
LABEL_25:
      *(_DWORD *)(a1 + 52) |= 0x80u;
      __int128 v14 = *(void **)(a1 + 40);
      if (!v14)
      {
        __int128 v14 = operator new(0x20uLL);
        v14[1] = 0LL;
        void v14[2] = 0LL;
        *__int128 v14 = &off_101845BC0;
        *((_DWORD *)v14 + 6) = 0;
        *(void *)(a1 + 40) = v14;
      }

      __int128 v15 = *(void *)(a2 + 40);
      if (!v15) {
        __int128 v15 = *(void *)(qword_1019A1388 + 40);
      }
      sub_100630DA0((uint64_t)v14, v15);
      return;
    }

  std::string v11 = a2[5];
  a1[12] |= 8u;
  a1[5] = v11;
  uint64_t v5 = a2[12];
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    char v13 = a2[7];
    a1[12] |= 0x20u;
    a1[7] = v13;
    uint64_t v5 = a2[12];
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_22;
  }

    if (v11 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  uint64_t v6 = v5[17];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

    if (v11 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

      __int128 v32 = v5;
      v3 += 88LL;
      if (v3 == v4)
      {
        int v16 = v31;
        sub_100680F80(&v28, (uint64_t)&v31);
        uint64_t v17 = (uint64_t)(v5 - v16) >> 3;
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101848640);
        }
        std::string::size_type v18 = 0x2E8BA2E8BA2E8BA3LL * v17;
        __int128 v19 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v20 = [a2 UTF8String];
          *(_DWORD *)__int128 buf = 136446978;
          *(void *)&uint8_t buf[4] = v20;
          std::string v43 = 2050;
          BOOL v44 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
          std::string v45 = 2050;
          std::string v46 = v18;
          std::string v47 = 2050;
          std::string v48 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101848640);
          }
          __int128 v22 = qword_101934868;
          __int128 v23 = [a2 UTF8String];
          __int128 v34 = 136446978;
          BOOL v35 = v23;
          std::string::size_type v36 = 2050;
          __int128 v37 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
          __int128 v38 = 2050;
          __int128 v39 = v18;
          __int128 v40 = 2050;
          std::string v41 = v6;
          LODWORD(v27) = 42;
          __int128 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  0LL,  "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f",  &v34,  v27);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)",  "%s\n",  v24);
          if (v24 != buf) {
            free(v24);
          }
        }

        *(void *)__int128 buf = &v28;
        sub_1002E067C((void ***)buf);
        *(void *)__int128 buf = &v31;
        sub_100023498((void ***)buf);
        return;
      }
    }
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848640);
  }
  __int128 v21 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = [a2 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, empty", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848640);
    }
    __int128 v25 = qword_101934868;
    __int128 v34 = 136446210;
    BOOL v35 = [a2 UTF8String];
    __int128 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "@WsbGroupCheck, %{public}s, empty",  &v34,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)",  "%s\n",  v26);
    if (v26 != buf) {
      free(v26);
    }
  }

  std::string v11 = *(_BYTE *)(a2 + 11);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(_BYTE *)(a1 + 11) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    char v13 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 24) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_22;
  }

  uint64_t v10 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 80) |= 4u;
  *(void *)(a1 + 24) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  uint64_t v7 = *(void *)(v5 + 56);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A14F0 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v7,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

        __p[0] = 0LL;
        __p[1] = 0LL;
        __int128 v30 = 0LL;
        sub_100048820((char *)v3 + 112, (uint64_t)__p, (uint64_t)v31);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)v3 + 8) == *((void *)v3 + 7))
        {
          sub_101243E00();
          double result = (id)abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLoca tionPublishHelper.mm",  88,  "biomeRestrictedEventsFromLocalizationResultMeasurement");
          __break(1u);
          return result;
        }

        uint64_t v10 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        std::string v11 = *((void *)v3 + 7);
        __int128 v12 = *((void *)v3 + 8);
        if (v11 == v12)
        {
          char v13 = 0LL;
          __int128 v14 = 0.0;
        }

        else
        {
          char v13 = 0LL;
          __int128 v14 = 0.0;
          do
          {
            __int128 v15 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v11);
            int v16 = *(double *)(v11 + 16);
            uint64_t v17 = [[BMMicroLocationProbabilityPerLabel alloc] initWithLabelIdentifier:v15 probability:v16];
            [v10 addObject:v17];

            if (v16 > v14)
            {

              char v13 = v15;
              __int128 v14 = v16;
            }

            v11 += 32LL;
          }

          while (v11 != v12);
        }

        std::string::size_type v18 = [[BMMicroLocationNumDevicesPerTechnology alloc] initWithTechnology:@"numberOfWifiDevices" numDevices:*((unsigned int *)v3 + 20)];
        __int128 v19 = [[BMMicroLocationNumDevicesPerTechnology alloc] initWithTechnology:@"numberOfBleDevices" numDevices:*((unsigned int *)v3 + 22)];
        __int128 v20 = [[BMMicroLocationNumDevicesPerTechnology alloc] initWithTechnology:@"numberOfUwbDevices" numDevices:*((unsigned int *)v3 + 24)];
        __int128 v21 = +[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v18, v19, v20, 0LL);

        __int128 v22 = objc_alloc(&OBJC_CLASS___BMMicroLocationRestrictedLocalizationEvent);
        if (v32 >= 0) {
          __int128 v23 = v31;
        }
        else {
          __int128 v23 = (void **)v31[0];
        }
        __int128 v24 = objc_msgSend( v22,  "initWithAbsoluteTimeStamp:clientBundleIdentifier:maxProbabilityLabelIdentifier:maxProbability:probabilit yVector:numDevicesVector:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23),  v13,  v10,  v21,  v4,  v14);
        [v28 addObject:v24];

        if (v32 < 0) {
          operator delete(v31[0]);
        }
LABEL_34:
        __int128 v25 = (double *)*((void *)v3 + 1);
        if (v25)
        {
          do
          {
            __int128 v26 = v25;
            __int128 v25 = *(double **)v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            __int128 v26 = (double *)*((void *)v3 + 2);
            __int128 v27 = *(void *)v26 == (void)v3;
            __int128 v3 = v26;
          }

          while (!v27);
        }

        __int128 v3 = v26;
        if (v26 == a1 + 2) {
          return v28;
        }
      }
    }
  }

  return result;
}

  (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  return v10;
}

      __int128 v3 = (uint64_t *)v3[1];
LABEL_20:
      if (v3 == a1) {
        return v8;
      }
    }
  }

  return 0LL;
}

    dispatch_once(&qword_1019344B0, &stru_10184D0D8);
    goto LABEL_6;
  }

  if (IOHIDServiceClientSetProperty(a2, p_vtable, a4)) {
    return 1LL;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184D0D8);
  }
  __int128 v12 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false",  buf,  2u);
  }

  double result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184D0D8);
    }
    v13[0] = 0;
    std::string v11 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false",  v13,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)",  "%s\n");
    goto LABEL_23;
  }

  return result;
}

  *char v13 = &v9[v17];
  return result;
}

    uint64_t v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 24) = v10;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_20;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A17B8 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A17D0 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  __int128 v31 = -*a13;
  if (*a13 >= 0.0) {
    __int128 v31 = *a13;
  }
  __int128 v32 = -v27;
  if (*a13 >= 0.0) {
    __int128 v32 = v27;
  }
  std::string::size_type v33 = v32 <= v31 && v32 >= 0.0;
  __int128 v34 = fabs(v27);
  BOOL v35 = vabdd_f64(*a13, v27);
  if (v35 > 0.00000001 && v34 > 0.00000001 && !v33) {
    return 0LL;
  }
  LOBYTE(v102[0]) = 1;
  __int128 v37 = 1.0 - sub_100853F28(a10, a7, a15, (BOOL *)v102);
  *a17 = v37;
  if (!LOBYTE(v102[0]))
  {
    __int128 v37 = -v37;
    *a17 = v37;
  }

  if (v37 <= -2.0)
  {
    __int128 v37 = v37 + 4.0;
    *a17 = v37;
  }

  __int128 v38 = -*a14;
  if (*a14 >= 0.0) {
    __int128 v38 = *a14;
  }
  __int128 v39 = -v37;
  if (*a14 >= 0.0) {
    __int128 v39 = v37;
  }
  __int128 v40 = v39 <= v38 && v39 >= 0.0;
  std::string v41 = fabs(v37);
  std::string::size_type v42 = vabdd_f64(*a14, v37);
  if (v42 > 0.00000001 && v41 > 0.00000001 && !v40) {
    return 0LL;
  }
  if (v34 <= 0.00000001)
  {
    if (v41 > 0.00000001) {
      goto LABEL_88;
    }
    BOOL v44 = *a1;
    CFStringRef v101 = a1[1];
    v102[0] = v44;
    sub_100843CD4(v102, &v101, 1);
    std::string v45 = v101;
    std::string v46 = v102[0];
    std::string v47 = *a3;
    CFStringRef v101 = a3[1];
    v102[0] = v47;
    sub_100843CD4(v102, &v101, 1);
    if (v46 != v102[0])
    {
      if ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_88;
      }

      std::string v48 = vabdd_f64(v46, v102[0]);
      std::string v49 = fabs(v46);
      std::string v50 = fabs(v102[0]);
      if (v49 >= v50) {
        std::string v50 = v49;
      }
      std::string v51 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
      if (v48 > v51) {
        goto LABEL_88;
      }
    }

    if (v45 == v101) {
      goto LABEL_50;
    }
    if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_88;
    }

    std::string v52 = vabdd_f64(v45, v101);
    char v53 = fabs(v45);
    std::string v54 = fabs(v101);
    if (v53 >= v54) {
      std::string v54 = v53;
    }
    uint64_t v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
    if (v52 <= v55)
    {
LABEL_50:
      *a16 = 0.0;
      *a17 = 0.0;
    }

    else
    {
LABEL_88:
      if (v42 > 0.00000001) {
        goto LABEL_89;
      }
      std::string v56 = *a1;
      CFStringRef v101 = a1[1];
      v102[0] = v56;
      sub_100843CD4(v102, &v101, 1);
      char v57 = v101;
      std::string v58 = v102[0];
      std::string v59 = *a4;
      CFStringRef v101 = a4[1];
      v102[0] = v59;
      sub_100843CD4(v102, &v101, 1);
      if (v58 != v102[0])
      {
        if ((*(void *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }

        std::string v60 = vabdd_f64(v58, v102[0]);
        std::string v61 = fabs(v58);
        std::string v62 = fabs(v102[0]);
        if (v61 >= v62) {
          std::string v62 = v61;
        }
        std::string v63 = v62 >= 1.0 ? v62 * 2.22044605e-16 : 2.22044605e-16;
        if (v60 > v63) {
          goto LABEL_89;
        }
      }

      if (v57 != v101)
      {
        if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }

        std::string v64 = vabdd_f64(v57, v101);
        std::string v65 = fabs(v57);
        std::string v66 = fabs(v101);
        if (v65 >= v66) {
          std::string v66 = v65;
        }
        std::string v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
        if (v64 > v67) {
          goto LABEL_89;
        }
      }

      *a16 = 0.0;
      *a17 = *a14;
    }

      std::string v64 = *(_OWORD *)(v14 + 160);
      std::string v66 = *(_OWORD *)(v14 + 176);
      std::string v68 = *(void *)(v14 + 192);
      std::string v56 = *(_OWORD *)(v14 + 96);
      std::string v58 = *(_OWORD *)(v14 + 112);
      std::string v60 = *(_OWORD *)(v14 + 128);
      std::string v62 = *(_OWORD *)(v14 + 144);
      std::string v48 = *(_OWORD *)(v14 + 32);
      std::string v50 = *(_OWORD *)(v14 + 48);
      std::string v52 = *(_OWORD *)(v14 + 64);
      std::string v54 = *(_OWORD *)(v14 + 80);
      BOOL v44 = *(_OWORD *)v14;
      std::string v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)__int128 v14 = *(_OWORD *)a1;
      __int128 v22 = *(_OWORD *)(a1 + 16);
      __int128 v23 = *(_OWORD *)(a1 + 32);
      __int128 v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      __int128 v25 = *(_OWORD *)(a1 + 80);
      __int128 v26 = *(_OWORD *)(a1 + 96);
      __int128 v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      __int128 v28 = *(_OWORD *)(a1 + 144);
      __int128 v29 = *(_OWORD *)(a1 + 160);
      __int128 v30 = *(_OWORD *)(a1 + 176);
      *(void *)(v14 + 192) = *(void *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(void *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_10085F0E8(a1, a4, v9, a1);
      goto LABEL_20;
    }

      std::string v64 = *(_OWORD *)(v14 + 160);
      std::string v66 = *(_OWORD *)(v14 + 176);
      std::string v68 = *(void *)(v14 + 192);
      std::string v56 = *(_OWORD *)(v14 + 96);
      std::string v58 = *(_OWORD *)(v14 + 112);
      std::string v60 = *(_OWORD *)(v14 + 128);
      std::string v62 = *(_OWORD *)(v14 + 144);
      std::string v48 = *(_OWORD *)(v14 + 32);
      std::string v50 = *(_OWORD *)(v14 + 48);
      std::string v52 = *(_OWORD *)(v14 + 64);
      std::string v54 = *(_OWORD *)(v14 + 80);
      BOOL v44 = *(_OWORD *)v14;
      std::string v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)__int128 v14 = *(_OWORD *)a1;
      __int128 v22 = *(_OWORD *)(a1 + 16);
      __int128 v23 = *(_OWORD *)(a1 + 32);
      __int128 v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      __int128 v25 = *(_OWORD *)(a1 + 80);
      __int128 v26 = *(_OWORD *)(a1 + 96);
      __int128 v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      __int128 v28 = *(_OWORD *)(a1 + 144);
      __int128 v29 = *(_OWORD *)(a1 + 160);
      __int128 v30 = *(_OWORD *)(a1 + 176);
      *(void *)(v14 + 192) = *(void *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(void *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_100863290(a1, a4, v9, a1);
      goto LABEL_20;
    }
}
}
}
}

    sub_100927F78( a1,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  0LL));
    goto LABEL_65;
  }

  std::string v11 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePlaceInferenceFidelityPolicyKey"];
  if (v11)
  {
    if ((sub_100C6ADAC(a1, 4) & 1) != 0)
    {
      __int128 v12 = [v11 unsignedIntValue];
      char v13 = v12;
      switch(v12)
      {
        case 6u:
          __int128 v25 = *(void **)(a1 + 56);
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472LL;
          v35[2] = sub_10092FF80;
          v35[3] = &unk_101838AD8;
          v35[4] = a1;
          [v25 fetchCachedPlaceInferencesWithReply:v35];
          goto LABEL_65;
        case 5u:
          *(void *)(a1 + 112) = 1LL;
          break;
        case 4u:
          sub_1010DDBC0(buf, "com.apple.locationd.emergencyplace_inference");
          __int128 v14 = sub_100C6AC9C(a1);
          if (SBYTE3(v38) < 0) {
            operator delete(*(void **)buf);
          }
          if ((v14 & 1) == 0)
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            __int128 v15 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = *(void *)(a1 + 24);
              *(_DWORD *)__int128 buf = 138543362;
              *(void *)&uint8_t buf[4] = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#dsa client '%{public}@' not authorized for Emergency Fidelity policy",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101861108);
              }
              __int128 v31 = *(void *)(a1 + 24);
              *(_DWORD *)__int128 v39 = 138543362;
              *(void *)&v39[4] = v31;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa client '%{public}@' not authorized for Emergency Fidelity policy",  v39,  12);
              std::string::size_type v33 = (char *)v32;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v32);
              if (v33 != buf) {
                free(v33);
              }
            }

            goto LABEL_19;
          }

          break;
      }

      *(void *)(a1 + 136) = objc_alloc_init(&OBJC_CLASS___NSDate);
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 184) = v13;
      sub_100925840(a1);
      sub_100927788(a1);
      goto LABEL_65;
    }

    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    __int128 v19 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v20 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138543362;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "#dsa client '%{public}@' not authorized for location; not starting yet in handleRequestPlaceInference",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      __int128 v26 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 v39 = 138543362;
      *(void *)&v39[4] = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa client '%{public}@' not authorized for location; not starting yet in handleRequestPlaceInference",
        v39,
        12);
      __int128 v28 = (char *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    sub_100927F78( a1,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  0LL));
    *(_DWORD *)(a1 + 520) = 6;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    __int128 v21 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorLSOff",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      *(_WORD *)__int128 v39 = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultErrorLSOff",  v39,  v34);
      __int128 v30 = (char *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    *(_DWORD *)(a1 + 32std::iostream::~basic_iostream(v2, v3 + 8) = 6;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    __int128 v22 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorLSOff",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      *(_WORD *)__int128 v39 = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorLSOff",  v39,  v34);
      __int128 v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dsa Place inference request is missing required field: fidelityPolicy}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
    }

    std::string::size_type v18 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dsa Place inference request is missing required field: fidelityPolicy",  "{msg%{public}.0s:#dsa Place inference request is missing required field: fidelityPolicy}",  buf,  0x12u);
    }

    sub_100927F78( a1,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  5LL,  0LL));
  }

  *char v13 = &v9[v17];
  return result;
}

  *__int128 v12 = &v9[v17];
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_metSource),  @"metSource");
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  PBDataWriterWriteFloatField(a3, 4LL, self->_hr);
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_6:
    if ((has & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  *((_DWORD *)a3 + 13) = LODWORD(self->_hr);
  *((_WORD *)a3 + 38) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_6:
    if ((has & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  *((_DWORD *)result + 15) = self->_metSource;
  *((_WORD *)result + 38) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  self->_hr = *((float *)a3 + 13);
  *(_WORD *)&self->_has |= 0x40u;
  __int128 v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x80) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

    uint64_t v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 15),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }

  double result = *(float *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 8u;
  *(float *)(a1 + 24) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    double result = *(float *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    *(float *)(a1 + 32) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 26),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    __int128 v12 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x40u;
    *(void *)(a1 + 40) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x80) == 0) {
      goto LABEL_22;
    }
LABEL_20:
    char v13 = *(_DWORD *)(a2 + 36);
    if (!sub_1000641E0(v13)) {
      sub_10125FC20();
    }
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 36),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  if ((*(_WORD *)&has & 0x1000) != 0)
  {
    v103 = 2654435761u * self->_pointCount;
    if ((*(_WORD *)&has & 0x400) != 0) {
      goto LABEL_21;
    }
LABEL_26:
    std::string::size_type v18 = 0LL;
    goto LABEL_29;
  }

  v103 = 0LL;
  if ((*(_WORD *)&has & 0x400) == 0) {
    goto LABEL_26;
  }
LABEL_21:
  hrMin = self->_hrMin;
  __int128 v15 = -hrMin;
  if (hrMin >= 0.0) {
    __int128 v15 = self->_hrMin;
  }
  int v16 = floor(v15 + 0.5);
  uint64_t v17 = (v15 - v16) * 1.84467441e19;
  std::string::size_type v18 = 2654435761u * (unint64_t)fmod(v16, 1.84467441e19);
  if (v17 >= 0.0)
  {
    if (v17 > 0.0) {
      v18 += (unint64_t)v17;
    }
  }

  else
  {
    v18 -= (unint64_t)fabs(v17);
  }

  *__int128 v12 = &v9[v17];
  return result;
}

  uint64_t v10 = *(_DWORD *)(a2 + 20);
  if ((sub_100BB1E1C(v10) & 1) == 0) {
    sub_101264BF0();
  }
  *(_DWORD *)(a1 + 396) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    if (v11 == 4) {
      return 1LL;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 32),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  *char v13 = &v9[v17];
  return result;
}

  a3->var0 = [v13 bundleIdentifier];
  if ([v13 URL]) {
    a3->var1 = objc_msgSend(objc_msgSend(v13, "URL"), "path");
  }
  if ([v13 executableURL]) {
    a3->var2 = objc_msgSend(objc_msgSend(v13, "executableURL"), "path");
  }
  __int128 v15 = [v13 applicationExtensionRecords];
  if (v15)
  {
    int v16 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    std::string v41 = 0u;
    std::string::size_type v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    uint64_t v17 = [v15 countByEnumeratingWithState:&v39 objects:v64 count:16];
    if (v17)
    {
      std::string::size_type v18 = *(void *)v40;
      do
      {
        for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v40 != v18) {
            objc_enumerationMutation(v15);
          }
          objc_msgSend( v16,  "addObject:",  objc_msgSend(*(id *)(*((void *)&v39 + 1) + 8 * (void)i), "effectiveBundleIdentifier"));
        }

        uint64_t v17 = [v15 countByEnumeratingWithState:&v39 objects:v64 count:16];
      }

      while (v17);
    }

    a3->var4 = v16;
  }

  __int128 v20 = 1;
LABEL_35:
  if ([a4 bundleId] && !a3->var0)
  {
    a3->var0 = [a4 bundleId];
  }

  else if ([a4 bundlePath] && !a3->var1)
  {
    a3->var1 = [a4 bundlePath];
  }

  uint64_t v6 = v20 | v14;
  if ((v6 & 1) != 0)
  {
    __int128 v21 = a3->var0;
    __int128 v22 = a3->var1;
    __int128 v23 = a3->var2;
    __int128 v24 = a3->var4;
    __int128 v25 = a3->var3;

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101879AA8);
    }
    __int128 v26 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      var0 = a3->var0;
      var1 = a3->var1;
      var2 = a3->var2;
      var3 = a3->var3;
      var4 = a3->var4;
      var5 = a3->var5;
      *(_DWORD *)__int128 buf = 68290818;
      std::string v48 = 2082;
      std::string v47 = 0;
      std::string v49 = "";
      std::string v50 = 2114;
      std::string v51 = a4;
      std::string v52 = 2114;
      char v53 = var0;
      std::string v54 = 2114;
      uint64_t v55 = var1;
      std::string v56 = 2114;
      char v57 = var2;
      std::string v58 = 2114;
      std::string v59 = var3;
      std::string v60 = 2114;
      std::string v61 = var4;
      std::string v62 = 1026;
      std::string v63 = var5;
      std::string::size_type v33 = "{msg%{public}.0s:#GetIdentifyingInfo found identifying information for client, ClientKeyPath:%{p"
            "ublic, location:escape_only}@, bundleId:%{public, location:escape_only}@, bundlePath:%{public, locat"
            "ion:escape_only}@, executablePath:%{public, location:escape_only}@, platformSpecificBundleId:%{publi"
            "c, location:escape_only}@, pluginBundleIds:%{public, location:escape_only}@, isAppClip:%{public}hhd}";
      __int128 v34 = (os_log_s *)v26;
      BOOL v35 = OS_LOG_TYPE_DEBUG;
      std::string::size_type v36 = 84;
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, v36);
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101879AA8);
    }
    __int128 v37 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 68290050;
      std::string v47 = 0;
      std::string v48 = 2082;
      std::string v49 = "";
      std::string v50 = 2114;
      std::string v51 = a4;
      std::string v52 = 2114;
      char v53 = v44;
      std::string v54 = 2114;
      uint64_t v55 = v43;
      std::string v56 = 2114;
      char v57 = 0LL;
      std::string::size_type v33 = "{msg%{public}.0s:#GetIdentifyingInfo LaunchServices does not have an application record for client, "
            "ClientKeyPath:%{public, location:escape_only}@, extensionRecordError:%{public, location:escape_only}"
            "@, applicationRecordError:%{public, location:escape_only}@, companionAppRecordError:%{public, locati"
            "on:escape_only}@}";
      __int128 v34 = (os_log_s *)v37;
      BOOL v35 = OS_LOG_TYPE_INFO;
      std::string::size_type v36 = 58;
      goto LABEL_50;
    }
  }

          double result = sub_100CFCE38(v24, v18, a3, -v9, a5 & 1);
          uint64_t v8 = v18 + 112;
LABEL_20:
          a5 = 0;
          __int128 v24 = v8;
          a4 = -v9;
          continue;
        }

        if ((v20 & 1) == 0)
        {
          __int128 v23 = v18;
          uint64_t v8 = v24;
          uint64_t v7 = v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }

        return result;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_maxAbsSlope),  @"maxAbsSlope");
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_8:
    if ((has & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  PBDataWriterWriteDoubleField(a3, 7LL, self->_groundAltitude);
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_9:
    if ((has & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  *((void *)a3 + 3) = *(void *)&self->_groundAltitude;
  *((_WORD *)a3 + 44) |= 4u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_9:
    if ((has & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  *((void *)result + 5) = *(void *)&self->_maxAbsSlope;
  *((_WORD *)result + 44) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_8:
    if ((has & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  self->_groundAltitude = *((double *)a3 + 3);
  *(_WORD *)&self->_has |= 4u;
  __int128 v3 = *((_WORD *)a3 + 44);
  if ((v3 & 8) == 0)
  {
LABEL_9:
    if ((v3 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101882448);
          }
          uint64_t v7 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 67240192;
            HIDWORD(buf) = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "unknown application state %{public}d",  (uint8_t *)&buf,  8u);
          }

          if (!sub_1002921D0(115, 0)) {
            goto LABEL_96;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101882448);
          }
          v40[0] = 67240192;
          v40[1] = v29;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "unknown application state %{public}d",  v40,  8);
          uint64_t v6 = (void **)v8;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAppMonitor::onApplicationStateChange(NSDictionary *)",  "%s\n",  v8);
          break;
      }

      goto LABEL_14;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101882448);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "cannot find BKSApplicationStateKey",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
      LOWORD(v40[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "cannot find BKSApplicationStateKey",  v40,  2);
      uint64_t v6 = (void **)v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v5);
LABEL_14:
      if (v6 != &buf) {
        free(v6);
      }
    }
  }

  else
  {
    __int128 v3 = 0;
LABEL_33:
    uint64_t v9 = 1;
LABEL_34:
    if (&BKSApplicationStateProcessIDKey
      && (sub_1002A7D20((uint64_t)v39, BKSApplicationStateProcessIDKey, &v30) & 1) == 0)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
      uint64_t v10 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "failed to retrieve pid", (uint8_t *)&buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101882448);
        }
        LOWORD(v40[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "failed to retrieve pid",  v40,  2);
        __int128 v25 = (void **)v24;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAppMonitor::onApplicationStateChange(NSDictionary *)",  "%s\n",  v24);
        if (v25 != &buf) {
          free(v25);
        }
      }

      __int128 v30 = -1;
    }

    if (&BKSApplicationStateDisplayIDKey
      && !sub_1002A85D0((uint64_t)v39, BKSApplicationStateDisplayIDKey, (std::string *)v31))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
      std::string v11 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "failed to retrieve bundle ID",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101882448);
        }
        LOWORD(v40[0]) = 0;
        LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "failed to retrieve bundle ID",  v40,  v28);
        __int128 v27 = (void **)v26;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAppMonitor::onApplicationStateChange(NSDictionary *)",  "%s\n",  v26);
        if (v27 != &buf) {
          free(v27);
        }
      }
    }

    if (&BKSApplicationStateExitReasonKey) {
      __int128 v12 = v9;
    }
    else {
      __int128 v12 = 1;
    }
    if ((v12 & 1) == 0)
    {
      v40[0] = 5;
      sub_1002A7D20((uint64_t)v39, BKSApplicationStateExitReasonKey, v40);
      LOBYTE(v37) = v40[0] == 1;
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
      char v13 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(v32[0]) >= 0) {
          __int128 v14 = v31;
        }
        else {
          __int128 v14 = (void **)v31[0];
        }
        __int128 buf = (void *)68289794;
        std::string::size_type v42 = 2082;
        std::string v43 = "";
        BOOL v44 = 1026;
        *(_DWORD *)std::string v45 = v30;
        *(_WORD *)&v45[4] = 2082;
        *(void *)&v45[6] = v14;
        *(_WORD *)&v45[14] = 1026;
        *(_DWORD *)&v45[16] = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic AppMonitor received Termination, pid:%{public}d, bundleId:%{public, loca tion:escape_only}s, isUserKill:%{public}hhd}",  (uint8_t *)&buf,  0x28u);
      }
    }

    sub_100D9958C((void *)(a1 + 232), (unsigned __int8 *)v31);
    if ((v3 - 1) >= 3)
    {
      if (v3 == 4)
      {
        *(_DWORD *)(a1 + 120) = v30;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)v31);
        std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v32[1]);
        std::string::operator=((std::string *)(a1 + 176), (const std::string *)v34);
        std::string::operator=((std::string *)(a1 + 200), (const std::string *)&__p[1]);
        *(_WORD *)(a1 + 224) = v37;
        LODWORD(buf) = 9;
        sub_100D988E8(&buf, (__int128 *)v31, (uint64_t)&v30);
        sub_100D9961C(a1 + 232, (unsigned __int8 *)&buf, (__int128 *)&buf);
        if (v52 < 0) {
          operator delete(v51);
        }
        if (v50 < 0) {
          operator delete(v49);
        }
        if (v48 < 0) {
          operator delete(v47);
        }
        if (v46 < 0) {
          operator delete(*(void **)&v45[12]);
        }
        if ((v45[3] & 0x80000000) != 0) {
          operator delete(buf);
        }
      }
    }

    else
    {
      if (*(char *)(a1 + 151) < 0)
      {
        __int128 v15 = *(const void **)(a1 + 128);
        int v16 = *(void *)(a1 + 136);
      }

      else
      {
        __int128 v15 = (const void *)(a1 + 128);
        int v16 = *(unsigned __int8 *)(a1 + 151);
      }

      if (SHIBYTE(v32[0]) >= 0) {
        uint64_t v17 = (void *)HIBYTE(v32[0]);
      }
      else {
        uint64_t v17 = v31[1];
      }
      if (SHIBYTE(v32[0]) >= 0) {
        std::string::size_type v18 = v31;
      }
      else {
        std::string::size_type v18 = (void **)v31[0];
      }
      else {
        __int128 v19 = (size_t)v17;
      }
      if (!memcmp(v15, v18, v19) && v17 == (void *)v16)
      {
        sub_100D95248(a1 + 120);
        [*(id *)(a1 + 112) setNextFireDelay:1.79769313e308];
      }
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101882448);
    }
    __int128 v20 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v21 = sub_100D943B0(&v38);
      if (SHIBYTE(v32[0]) >= 0) {
        __int128 v22 = v31;
      }
      else {
        __int128 v22 = (void **)v31[0];
      }
      __int128 buf = (void *)68289794;
      std::string::size_type v42 = 2082;
      std::string v43 = "";
      BOOL v44 = 2082;
      *(void *)std::string v45 = v21;
      *(_WORD *)&v45[8] = 1026;
      *(_DWORD *)&v45[10] = v30;
      *(_WORD *)&v45[14] = 2082;
      *(void *)&v45[16] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Not Posting Application State Change Notification via legacy path, notification:%{p ublic, location:escape_only}s, pid:%{public}d, bundleId:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x2Cu);
    }
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101883130);
  }
  char v13 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    __int128 v14 = *(void *)(a1 + 24);
    __int128 v15 = *(unsigned __int8 *)(a1 + 236);
    *(_DWORD *)__int128 __p = 138413058;
    *(void *)&__p[4] = v14;
    v92 = 2048;
    *(void *)unint64_t v93 = a1;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)v94 = v2;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "PAUSE: %@ (%p) changed from %d to %d",  __p,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101883130);
    }
    char v57 = *(double *)(a1 + 24);
    std::string v58 = *(unsigned __int8 *)(a1 + 236);
    std::string v83 = 138413058;
    std::string v84 = v57;
    std::string v85 = 2048;
    *(void *)__int128 v86 = a1;
    *(_WORD *)&v86[8] = 1024;
    *(_DWORD *)BOOL v87 = v2;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&v87[6] = v58;
    LODWORD(v82) = 34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "PAUSE: %@ (%p) changed from %d to %d",  &v83,  *(void *)&v82);
    std::string v60 = (char *)v59;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLocationSubscription::checkPauseState()", "%s\n", v59);
    if (v60 != __p) {
      free(v60);
    }
  }

  if (v2 != *(unsigned __int8 *)(a1 + 236))
  {
    if (*(_BYTE *)(a1 + 236))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      int v16 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 24);
        *(_DWORD *)__int128 __p = 138412290;
        *(void *)&__p[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "PAUSE: Pausing client '%@'", __p, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101883130);
        }
        std::string v63 = *(double *)(a1 + 24);
        std::string v83 = 138412290;
        std::string v84 = v63;
        LODWORD(v82) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "PAUSE: Pausing client '%@'",  &v83,  *(void *)&v82);
        std::string v65 = (char *)v64;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLocationSubscription::checkPauseState()", "%s\n", v64);
        if (v65 != __p) {
          free(v65);
        }
      }

      sub_100DB444C(a1);
      sub_100DB9648(a1, 1LL);
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      __int128 v26 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        __int128 v27 = *(void *)(a1 + 24);
        *(_DWORD *)__int128 __p = 138543362;
        *(void *)&__p[4] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "PAUSE: Resuming client '%{public}@' (This should be handled on framework side)",  __p,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101883130);
        }
        std::string v66 = *(double *)(a1 + 24);
        std::string v83 = 138543362;
        std::string v84 = v66;
        LODWORD(v82) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "PAUSE: Resuming client '%{public}@' (This should be handled on framework side)",  &v83,  *(void *)&v82);
        std::string v68 = (char *)v67;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLLocationSubscription::checkPauseState()", "%s\n", v67);
        if (v68 != __p) {
          free(v68);
        }
      }

      sub_100DB9648(a1, 0LL);
      sub_100DB4764(a1);
    }
  }

    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
    uint64_t v9 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *a2;
      *(_DWORD *)__int128 buf = 67240192;
      __int128 v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Device motion mode (%{public}d) not supported, unable to disable sensor fusion",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101883CD8);
      }
      std::string v11 = *a2;
      std::string::size_type v18 = 67240192;
      __int128 v19 = v11;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  17LL,  "Device motion mode (%{public}d) not supported, unable to disable sensor fusion",  &v18,  v17);
      char v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  if ((v3 & 4) != 0)
  {
    char v13 = *(void *)(a1 + 24);
    if (!v13) {
      char v13 = *(void *)(qword_1019A20E0 + 24);
    }
    __int128 v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3C530(v13, a2);
    __int128 v15 = (int)v14;
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
    __int128 v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }

  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A20E0 + 32);
  }
  std::string::size_type v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3D540(v17);
  __int128 v19 = (int)v18;
  else {
    __int128 v20 = 1;
  }
  uint64_t v4 = (v4 + v19 + v20 + 1);
  __int128 v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x10) == 0)
  {
LABEL_22:
    if ((v3 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 20),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

    std::string v11 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 40) = v11;
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(float *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  uint64_t v10 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  std::string v11 = *((char *)v10 + 23);
  if (v11 < 0)
  {
    if (v10[1] != 53LL)
    {
LABEL_25:
      if (qword_101934820 != -1) {
        dispatch_once(&qword_101934820, &stru_10188EBB8);
      }
      __int128 v12 = (os_log_s *)qword_101934828;
      if (os_log_type_enabled((os_log_t)qword_101934828, OS_LOG_TYPE_FAULT))
      {
        char v13 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        else {
          __int128 v14 = (uint64_t *)*v13;
        }
        *(_DWORD *)__int128 buf = 136446210;
        std::string v45 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Got unhandled mesage of type %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934820 != -1) {
          dispatch_once(&qword_101934820, &stru_10188EBB8);
        }
        __int128 v15 = qword_101934828;
        int v16 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        else {
          uint64_t v17 = (uint64_t *)*v16;
        }
        std::string::size_type v42 = 136446210;
        std::string v43 = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  17LL,  "Got unhandled mesage of type %{public}s",  &v42,  12);
        __int128 v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLDaemonSpringTrackingClient::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }

      return;
    }

    uint64_t v10 = (void *)*v10;
  }

  else if (v11 != 53)
  {
    goto LABEL_25;
  }

  if (memcmp(v10, "SpringTracking/kCLConnectionMessageSpringTrackerQuery", 0x35uLL)) {
    goto LABEL_25;
  }
  __int128 v34 = *(CLConnectionMessage **)a2;
  __int128 v21 = *(std::__shared_weak_count **)(a2 + 8);
  v38[0] = v34;
  v38[1] = v21;
  if (v21)
  {
    BOOL v35 = (unint64_t *)&v21->__shared_owners_;
    do
      std::string::size_type v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }

  sub_100F686F8(a1, (uint64_t)v38);
  if (v21)
  {
    __int128 v37 = (unint64_t *)&v21->__shared_owners_;
    do
      __int128 v25 = __ldaxr(v37);
    while (__stlxr(v25 - 1, v37));
    goto LABEL_67;
  }

    (*(void (**)(uint64_t, __n128))(*(void *)v18 + 24LL))(v18, v10);
  }

  return v14;
}

  PB::TextFormatter::format(this, "droppedAlert", *(_BYTE *)(a1 + 47));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "rangeOfElevationInWindow", *(float *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "startTimestampOfWindow", *(void *)(a1 + 48));
    if ((*(_WORD *)(a1 + 72) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xDu);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 56), 0x15u);
  }

  PB::TextFormatter::format(this, "nPeaks", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "rightGroundContactTime", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 73), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  }

  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = *(float *)(a2 + 44);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 44) = result;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "latitude", *(float *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_BYTE *)(a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(result + 44) = v3;
  *(_BYTE *)(result + 41) = v11;
  if ((*(_WORD *)(a2 + 44) & 2) != 0) {
    goto LABEL_20;
  }
  return result;
}

  uint64_t v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  if (a1 != a2) {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  __int128 v20 = *(_BYTE *)(a2 + 108);
  if ((v20 & 2) != 0)
  {
    __int128 v21 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 108) |= 2u;
    *(_DWORD *)(a1 + 80) = v21;
    __int128 v20 = *(_BYTE *)(a2 + 108);
  }

  if ((v20 & 4) != 0)
  {
    __int128 v22 = *(_DWORD *)(a2 + 84);
    *(_BYTE *)(a1 + 108) |= 4u;
    *(_DWORD *)(a1 + 84) = v22;
  }

  return a1;
}

  PB::TextFormatter::format(this, "deltaPositionZ", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 24) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 64) = result;
  if ((*(_WORD *)(a2 + 80) & 0x10) != 0) {
    goto LABEL_20;
  }
  return result;
}

  uint64_t v6 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 104) = v3;
  *(void *)(a1 + 32) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  std::string v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
  if ((*(_WORD *)(a2 + 60) & 2) != 0) {
    goto LABEL_20;
  }
  return result;
}

  uint64_t v8 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 24) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 61), 0xCAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 7u);
  if ((*(_BYTE *)(v3 + 116) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  }
  return result;
}

  uint64_t v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 44) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 56) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xAu);
  }

  PB::TextFormatter::format(this, "iedState", *(_DWORD *)(a1 + 88));
  if ((*(_BYTE *)(a1 + 104) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 92));
LABEL_6:
  uint64_t v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "mean", v8);
  }

  uint64_t v9 = *(uint64_t **)(a1 + 56);
  uint64_t v10 = *(uint64_t **)(a1 + 64);
  while (v9 != v10)
  {
    std::string v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32LL))(v11, this, "optical");
  }

  __int128 v12 = *(_BYTE *)(a1 + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "tragusDropped", *(_DWORD *)(a1 + 96));
    __int128 v12 = *(_BYTE *)(a1 + 104);
  }

  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(this, "tragusRecovered", *(_DWORD *)(a1 + 100));
  }
  char v13 = *(float **)(a1 + 32);
  __int128 v14 = *(float **)(a1 + 40);
  while (v13 != v14)
  {
    __int128 v15 = *v13++;
    PB::TextFormatter::format(this, "variance", v15);
  }

  return PB::TextFormatter::endObject(this);
}

  std::string v11 = *(_DWORD *)(a2 + 188);
  *(_WORD *)(a1 + 192) |= 0x100u;
  *(_DWORD *)(a1 + 18std::iostream::~basic_iostream(v2, v3 + 8) = v11;
  uint64_t v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 44) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "inertialCompOffset", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "statusDeprecated", *(_DWORD *)(a1 + 148));
  if ((*(_BYTE *)(a1 + 152) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
LABEL_14:
  std::string::size_type v18 = *(float **)(a1 + 104);
  __int128 v19 = *(float **)(a1 + 112);
  while (v18 != v19)
  {
    __int128 v20 = *v18++;
    PB::TextFormatter::format(this, "userAcceleration", v20);
  }

  return PB::TextFormatter::endObject(this);
}

  uint64_t v9 = *(_BYTE *)(a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 45) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "isSettle", *(_BYTE *)(a1 + 46));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "betaBlockerUse", *(_BYTE *)(a1 + 60));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  __int128 v14 = *(_BYTE *)(a2 + 60);
  v5 |= 0x80u;
  *(_BYTE *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 60) = v14;
  uint64_t v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_21:
    int v16 = *(_DWORD *)(a2 + 52);
    v5 |= 0x20u;
    *(_BYTE *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 52) = v16;
    if ((*(_BYTE *)(a2 + 64) & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "tempCalB", *(_DWORD *)(a1 + 52));
  uint64_t v9 = *(_BYTE *)(a1 + 64);
  if (v9 < 0) {
    goto LABEL_20;
  }
LABEL_11:
  if ((v9 & 0x40) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "tempCalT0", *(_DWORD *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v4 & 0x40) != 0) {
LABEL_9:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 8u);
LABEL_10:
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  uint64_t v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    double result = PB::Writer::writeSubmessage(this, v7, 9u);
  }

  return result;
}

  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 44) = v11;
  if ((*(_WORD *)(a2 + 48) & 8) != 0) {
    goto LABEL_20;
  }
  return result;
}

  uint64_t v9 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 2std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "pressureAmplitude", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  char v13 = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 96) |= 4u;
  *(_DWORD *)(a1 + 72) = v13;
  uint64_t v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    __int128 v15 = *(_DWORD *)(a2 + 88);
    *(_WORD *)(a1 + 96) |= 0x40u;
    *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    if ((*(_WORD *)(a2 + 96) & 1) == 0) {
      return a1;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "gravityAngleVar", *(float *)(a1 + 80));
  std::string v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 53);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 53) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "percentVeryLow", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 54), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "modelOutputBalancePrior", *(double *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "stepLengthXWalkingSpeedMedian", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 88) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  }

  uint64_t v9 = *(_BYTE *)(a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 69) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "lastStepTime", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  uint64_t v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "impulseDurationSec", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "kvalueTrack", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "sCal", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 32);
  v4 |= 0x10u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 32) = v8;
  __int128 v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 5u);
  uint64_t v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "dthetaNormRad", *(float *)(a1 + 76));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  std::string v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0) {
    goto LABEL_20;
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 44), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "closeCoveredPocketObstructed", *(float *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "swimLocation", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "workoutMode", *(_DWORD *)(a1 + 56));
    if ((*(_WORD *)(a1 + 64) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  }

  PB::TextFormatter::format(this, "intervalSleepDetectedToWakeDetected", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 61), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_BYTE *)(a2 + 10);
  v3 |= 4u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 10) = v11;
  if ((*(_WORD *)(a2 + 20) & 1) != 0) {
    goto LABEL_20;
  }
  return result;
}

  std::string v11 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 36) = v3;
  *(_DWORD *)(result + 16) = v11;
  if ((*(_WORD *)(a2 + 36) & 4) != 0) {
    goto LABEL_20;
  }
  return result;
}

  uint64_t v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "distanceToLoi", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 60) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "hrmin", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  __int128 v15 = *(void *)(a2 + 8);
  v7 |= 1u;
  *(_BYTE *)(a1 + 80) = v7;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
  uint64_t v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_13:
  if ((v6 & 0x10) != 0)
  {
LABEL_14:
    uint64_t v10 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 80) = v7 | 0x10;
    *(void *)(a1 + 40) = v10;
  }

  return a1;
}

  uint64_t v10 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 32) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  }

  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  std::string v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 76) & 0x100) != 0) {
    goto LABEL_20;
  }
  return result;
}

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "pathStage", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  std::string v11 = *(_BYTE *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v11;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0) {
    goto LABEL_20;
  }
  return result;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 20) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    PB::TextFormatter::format(this, "scanFlags", *(_BYTE *)(a1 + 45));
    if ((*(_WORD *)(a1 + 48) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xAu);
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x8000000) != 0)
  {
    __int128 v24 = *(_BYTE *)(a2 + 157);
    *(_DWORD *)(a1 + 164) |= 0x8000000u;
    *(_BYTE *)(a1 + 157) = v24;
    uint64_t v10 = *(_DWORD *)(a2 + 164);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_55;
    }
  }

  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }

  __int128 v25 = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 164) |= 0x400000u;
  *(_BYTE *)(a1 + 152) = v25;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  if ((*(_WORD *)(a2 + 48) & 4) == 0) {
    return *(float *)&v4;
  }
LABEL_20:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelZ", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

double sub_100013368@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }

  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1LL;
  return result;
}

__n128 sub_1000133B0(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = &a1[6].n128_i64[1];
  uint64_t v5 = (std::ios_base *)&a1[6].n128_i8[*(void *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  sub_100013454(v4, a2);
  __n128 result = *(__n128 *)(*(uint64_t *)((char *)v4 + *(void *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t *sub_100013454(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v4->__fmtflags_;
  sub_1000137BC((uint64_t)v30, v4);
  std::ostream::sentry::sentry(v29, a1);
  if (v29[0])
  {
    std::ios_base::fmtflags v27 = fmtflags;
    __int128 v28 = v4;
    uint64_t v6 = *a1;
    uint64_t v7 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v8 = *((void *)v7 + 3);
    *((void *)v7 + 3) = 0LL;
    uint64_t v9 = (const std::ios_base *)((char *)a1 + *(void *)(v6 - 24));
    std::ios_base::fmtflags v10 = v9->__fmtflags_;
    std::ios_base::fmtflags v11 = v9[1].__fmtflags_;
    if (v11 == -1)
    {
      std::ios_base::getloc(v9);
      __int128 v12 = std::locale::use_facet(&v31, &std::ctype<char>::id);
      std::ios_base::fmtflags v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32LL);
      std::locale::~locale(&v31);
      v9[1].__fmtflags_ = v11;
    }

    if ((v10 & 0x90) != 0 && v8 >= 37)
    {
      uint64_t v13 = v8 - 36;
      do
      {
        LOBYTE(v31.__locale_) = v11;
        sub_10000CF44(a1, (uint64_t)&v31, 1LL);
        --v13;
      }

      while (v13);
    }

    uint64_t v14 = *a1;
    *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)a1 + *(void *)(v14 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)a1 + *(void *)(v14 - 24) + 8) & 0xFFFFFF4F | 0x80;
    __int128 v15 = (const std::ios_base *)((char *)a1 + *(void *)(v14 - 24));
    std::ios_base::getloc(v15);
    char v25 = v10;
    uint64_t v26 = v8;
    int v16 = std::locale::use_facet(&v31, &std::ctype<char>::id);
    std::ios_base::fmtflags v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 48LL);
    std::locale::~locale(&v31);
    if (v15[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v15);
      std::string::size_type v18 = std::locale::use_facet(&v31, &std::ctype<char>::id);
      std::ios_base::fmtflags v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32LL);
      std::locale::~locale(&v31);
      v15[1].__fmtflags_ = v19;
    }

    unint64_t v20 = 0LL;
    v15[1].__fmtflags_ = v17;
    do
    {
      *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 2LL;
      std::ostream::operator<<(a1, *(unsigned __int8 *)(a2 + v20));
      if (v20 <= 9 && ((1LL << v20) & 0x2A8) != 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        __int128 v21 = std::locale::use_facet(&v31, &std::ctype<char>::id);
        char v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 45LL);
        std::locale::~locale(&v31);
        LOBYTE(v31.__locale_) = v22;
        sub_10000CF44(a1, (uint64_t)&v31, 1LL);
      }

      ++v20;
    }

    while (v20 != 16);
    if ((v25 & 0x20) != 0 && v26 >= 37)
    {
      uint64_t v23 = v26 - 36;
      do
      {
        LOBYTE(v31.__locale_) = v11;
        sub_10000CF44(a1, (uint64_t)&v31, 1LL);
        --v23;
      }

      while (v23);
    }

    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0LL;
    uint64_t v4 = v28;
    std::ios_base::fmtflags fmtflags = v27;
  }

  std::ostream::sentry::~sentry(v29);
  sub_100013854((uint64_t)v30);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_100013744( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  *(_DWORD *)(a14 + std::iostream::~basic_iostream(v2, v3 + 8) = a13;
  _Unwind_Resume(a1);
}

uint64_t sub_1000137BC(uint64_t a1, std::ios_base *this)
{
  *(void *)a1 = this;
  std::ios_base::fmtflags fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    uint64_t v5 = std::locale::use_facet(&v7, &std::ctype<char>::id);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }

  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = fmtflags;
  return a1;
}

void sub_100013840( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100013854(uint64_t a1)
{
  uint64_t v1 = *(const std::ios_base **)a1;
  std::ios_base::fmtflags v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(void *)a1 + 144LL) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    __int128 v3 = std::locale::use_facet(&v5, &std::ctype<char>::id);
    std::ios_base::fmtflags v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32LL);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }

  v1[1].__fmtflags_ = v2;
}

void sub_1000138D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1000138E4( std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    uint64_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v10 = 22LL;
    goto LABEL_6;
  }

  std::string::size_type cap = this->__r_.__value_.__l.__cap_;
  std::string::size_type v10 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0LL, size, 0LL);
    this->__r_.__value_.__l.__size_ = 0LL;
    LOBYTE(v12) = this->__r_.__value_.__s.__size_;
    goto LABEL_8;
  }

  std::string::size_type v12 = HIBYTE(cap);
LABEL_8:
  uint64_t v8 = this;
  if ((v12 & 0x80) != 0) {
    uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    uint64_t v8 = (std::string *)((char *)v8 + 1);
  }

  v8->__r_.__value_.__s.__data_[0] = 0;
  else {
    this->__r_.__value_.__s.__size_ = a4 & 0x7F;
  }
}

void sub_1000139B0(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_100013A04(exception, a1);
}

void sub_1000139EC(_Unwind_Exception *a1)
{
}

__n128 sub_100013A04(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&off_101818AB8;
  a1->n128_u64[1] = (unint64_t)&off_101818CB0;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_101818C38;
  a1->n128_u64[1] = (unint64_t)off_101818C68;
  a1[2].n128_u64[0] = (unint64_t)off_101818C90;
  a1[2].n128_u64[1] = 0LL;
  return result;
}

uint64_t sub_100013A54(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));
  return a1;
}

void *sub_100013A94(uint64_t a1)
{
  std::ios_base::fmtflags v2 = operator new(0x48uLL);
  *std::ios_base::fmtflags v2 = &off_101818AB8;
  v2[1] = &off_101818CB0;
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  v2[4] = &off_101818AE8;
  uint64_t v3 = *(void *)(a1 + 40);
  v2[5] = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *std::ios_base::fmtflags v2 = &off_101818C38;
  v2[1] = off_101818C68;
  v2[4] = off_101818C90;
  sub_10001242C((uint64_t)(v2 + 4), a1 + 32);
  return v2;
}

void sub_100013B58(_Unwind_Exception *a1)
{
}

void sub_100013B8C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_100013D34((uint64_t)exception, a1);
}

void sub_100013BC8(_Unwind_Exception *a1)
{
}

void sub_100013BDC(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_100013C1C(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::bad_cast::~bad_cast((std::bad_cast *)a1);
}

void sub_100013C54(uint64_t a1)
{
  std::ios_base::fmtflags v2 = (void *)(a1 - 8);
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::bad_cast::~bad_cast((std::bad_cast *)a1);
  operator delete(v2);
}

const char *sub_100013C98()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_100013CA4(void *a1)
{
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);
}

void sub_100013CDC(void *a1)
{
  std::ios_base::fmtflags v2 = a1 - 4;
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);
  operator delete(v2);
}

void sub_100013D20(std::bad_cast *a1)
{
}

uint64_t sub_100013D34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101818AB8;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = &off_101818CB0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &off_101818AE8;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(void *)a1 = &off_101818C38;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_101818C68;
  *(void *)(a1 + 32) = off_101818C90;
  return a1;
}

void sub_100013DDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100013DF0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v18 = a1 + 2;
  if (v9) {
    std::string::size_type v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    std::string::size_type v10 = 0LL;
  }
  std::ios_base::fmtflags v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  std::ios_base::fmtflags v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(v11, *(void **)a2, *((void *)a2 + 1));
    std::ios_base::fmtflags v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::ios_base::fmtflags v11 = v12;
  }

  int v16 = v11 + 24;
  sub_100013F10(a1, v15);
  uint64_t v13 = a1[1];
  sub_100014098((uint64_t)v15);
  return v13;
}

void sub_100013EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100013F10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100013F84((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100013F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }

  char v13 = 1;
  sub_100014020((uint64_t)v12);
  return a6;
}

uint64_t sub_100014020(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100014054(a1);
  }
  return a1;
}

void sub_100014054(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_100014098(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000140CC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_100014120( void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100014140( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100014154( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

BOOL sub_100014168()
{
  return os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_10001417C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2264), OS_LOG_TYPE_INFO);
}

BOOL sub_10001418C()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2264));
}

uint64_t sub_100014198()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  uint64_t v0 = std::string::append(&v19, "MicroLocationLabels");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000D28C((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    unint64_t v4 = v17;
  }
  else {
    unint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000D354((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    __int128 v10 = __p;
  }
  else {
    __int128 v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  __int128 v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993840 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993830 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993830,  (void *)&_mh_execute_header);
}

void sub_100014384( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014430@<X0>( void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, __int128 **a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v228[0] = a11;
  v228[1] = a12;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  __int128 v15 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unsigned __int8 v16 = *(uint64_t **)a9;
    }
    unint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * (a5[1] - *a5);
    unint64_t v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 4);
    *(_DWORD *)__int128 buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)v205 = 2082;
    *(void *)&v205[2] = "";
    __int16 v206 = 2082;
    unint64_t v207 = (unint64_t)v16;
    __int16 v208 = 2050;
    unint64_t v209 = v17;
    __int16 v210 = 2050;
    unint64_t v211 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Learning semi-supervised model with SelfTraining generation algorithm, Client:%{publi c, location:escape_only}s, Number of labeled recording triggers:%{public}lu, Number of unlabeled recording t riggers:%{public}lu}",  buf,  0x30u);
  }

  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1002F0B04(buf);
  CFStringRef v20 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSemiSupervisedMaxNumIterations",  0x8000100u,  kCFAllocatorNull);
  int v21 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v20, v229);
  CFRelease(v20);
  unsigned int v22 = *(_DWORD *)v229;
  std::string v23 = *(std::__shared_weak_count **)v205;
  if (*(void *)v205)
  {
    __int128 v24 = (unint64_t *)(*(void *)v205 + 8LL);
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  if (v21) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = 50LL;
  }
  uint64_t v171 = v26;
  sub_1002F0B04(buf);
  CFStringRef v27 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSemiSupervisedStopProbabilityThreshold",  0x8000100u,  kCFAllocatorNull);
  int v28 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v27, v229);
  CFRelease(v27);
  double v29 = *(double *)v229;
  __int128 v30 = *(std::__shared_weak_count **)v205;
  if (*(void *)v205)
  {
    std::locale v31 = (unint64_t *)(*(void *)v205 + 8LL);
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  if (!v28) {
    double v29 = 0.75;
  }
  sub_1002F0B04(buf);
  CFStringRef v33 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSemiSupervisedNumSelfLearningSamplesPerIteration",  0x8000100u,  kCFAllocatorNull);
  int v34 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v33, v229);
  CFRelease(v33);
  int v35 = *(_DWORD *)v229;
  std::string::size_type v36 = *(std::__shared_weak_count **)v205;
  if (*(void *)v205)
  {
    __int128 v37 = (unint64_t *)(*(void *)v205 + 8LL);
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  if (v34) {
    int v39 = v35;
  }
  else {
    int v39 = 15;
  }
  int v170 = v39;
  sub_100018E34(&v194);
  *a8 = 0;
  a8[280] = 0;
  v226[0] = &off_101818E08;
  v226[1] = sub_100137504;
  v227 = v226;
  unsigned int v40 = sub_100016514();
  sub_10001A504((uint64_t)v224, a3);
  uint64_t v41 = (uint64_t)v227;
  uint64_t v178 = (uint64_t)a8;
  if (!v227) {
    goto LABEL_34;
  }
  if (v227 != v226)
  {
    uint64_t v41 = (*(uint64_t (**)(void))(*v227 + 16LL))();
LABEL_34:
    v223 = (void *)v41;
    goto LABEL_36;
  }

  v223 = v222;
  (*(void (**)(uint64_t, void *))(v226[0] + 24LL))((uint64_t)v226, v222);
LABEL_36:
  sub_1000E2848(v40, (uint64_t)v224, (uint64_t)v222, (uint64_t)a5, a2, &v192);
  sub_1000EFC74(&v193, &v192);
  uint64_t v42 = v192;
  uint64_t v192 = 0LL;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
  }
  std::string v43 = v223;
  if (v223 == v222)
  {
    uint64_t v44 = 4LL;
    std::string v43 = v222;
  }

  else
  {
    if (!v223) {
      goto LABEL_43;
    }
    uint64_t v44 = 5LL;
  }

  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_43:
  std::string v45 = v225;
  if (v225 == v224)
  {
    uint64_t v46 = 4LL;
    std::string v45 = v224;
  }

  else
  {
    if (!v225) {
      goto LABEL_48;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_48:
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  std::string v47 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    std::string v49 = *a5;
    std::string v48 = a5[1];
    uint64_t v50 = sub_1000EFCD4(&v193);
    *(_DWORD *)__int128 buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)v205 = 2082;
    *(void *)&v205[2] = "";
    __int16 v206 = 2050;
    unint64_t v207 = 0xEEEEEEEEEEEEEEEFLL * (v48 - v49);
    __int16 v208 = 2050;
    unint64_t v209 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnSemiSupervisedModel, labeledFingerprintVector, numTriggers:%{public}lu, numFPs:%{public}lu}",  buf,  0x26u);
    a8 = (_BYTE *)v178;
  }

  if (!sub_1000EFCD4(&v193))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    char v53 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        std::string v54 = *(uint64_t **)a9;
      }
      *(_DWORD *)__int128 buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v205 = 2082;
      *(void *)&v205[2] = "";
      __int16 v206 = 2081;
      unint64_t v207 = (unint64_t)v54;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:learnSemiSupervisedModel, Must have valid labeled fingerprints, ClientId:%{private, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (a1) {
      [a1 setObject:&__kCFBooleanFalse forKeyedSubscript:@"cancelled"];
    }
LABEL_301:
    uint64_t v162 = v193;
    uint64_t v193 = 0LL;
    if (v162) {
      (*(void (**)(uint64_t))(*(void *)v162 + 8LL))(v162);
    }
    v163 = v227;
    if (v227 == v226)
    {
      uint64_t v164 = 4LL;
      v163 = v226;
    }

    else
    {
      if (!v227) {
        return sub_100019D7C((unsigned int *)&v194);
      }
      uint64_t v164 = 5LL;
    }

    (*(void (**)(void))(*v163 + 8 * v164))();
    return sub_100019D7C((unsigned int *)&v194);
  }

  uint64_t v51 = *(void *)(a3 + 24);
  if (!v51) {
    sub_100008BDC();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 48LL))(v51))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    std::string v52 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v205 = 2082;
      *(void *)&v205[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Learning semi-supervised model cancelled}",  buf,  0x12u);
    }

    goto LABEL_301;
  }

  sub_100094E18(buf);
  *(void *)__int128 buf = 0x100000003LL;
  if (&v205[8] != (_BYTE *)a7)
  {
    int v212 = *(_DWORD *)(a7 + 32);
    sub_1000193A0(&v205[8], *(uint64_t **)(a7 + 16), 0LL);
  }

  __int128 v213 = *(_OWORD *)(a7 + 40);
  memset(v190, 0, sizeof(v190));
  int v191 = 1065353216;
  uint64_t v185 = sub_1000EFD0C((uint64_t)&v193);
  v186 = v55;
  v181[0] = (void *)sub_1000EFD18(&v193);
  v181[1] = v56;
  while (1)
  {
    uint64_t v57 = sub_1000EFC24(&v185, v181);
    if ((v57 & 1) == 0) {
      break;
    }
    uint64_t v58 = sub_1000EFC50(&v185);
    uint64_t v59 = v58;
    std::string v61 = *a5;
    std::string v60 = a5[1];
    if (*a5 == v60) {
      goto LABEL_98;
    }
    std::string v62 = (void *)(v58 + 40);
    while (1)
    {
      __int128 v63 = *v61;
      *(void *)&v229[16] = *((void *)v61 + 2);
      *(_OWORD *)v229 = v63;
      if (*((char *)v61 + 47) < 0)
      {
        sub_1010DD48C(&v229[24], *((void **)v61 + 3), *((void *)v61 + 4));
      }

      else
      {
        __int128 v64 = *(__int128 *)((char *)v61 + 24);
        uint64_t v230 = *((void *)v61 + 5);
        *(_OWORD *)&v229[24] = v64;
      }

      __int128 v65 = v61[3];
      *(_OWORD *)&v231[12] = *(__int128 *)((char *)v61 + 60);
      *(_OWORD *)v231 = v65;
      sub_1000865CC(v232);
      __int128 v66 = *(__int128 *)((char *)v61 + 216);
      char v234 = *((_BYTE *)v61 + 232);
      __int128 v233 = v66;
      BOOL v68 = *(void *)v229 != *v62 || *(void *)&v229[8] != *(void *)(v59 + 48);
      sub_100086708(v232);
      if (SHIBYTE(v230) < 0) {
        operator delete(*(void **)&v229[24]);
      }
      if (!v68) {
        break;
      }
      v61 += 15;
      a8 = (_BYTE *)v178;
      if (v61 == v60)
      {
        std::string v61 = v60;
        goto LABEL_89;
      }
    }

    a8 = (_BYTE *)v178;
LABEL_89:
    if (v61 == a5[1])
    {
LABEL_98:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      std::string v72 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        std::string v73 = (char *)operator new(0x28uLL);
        *(void *)v197 = v73;
        __int128 v198 = xmmword_1012C8460;
        *(_OWORD *)std::string v73 = 0u;
        *((_OWORD *)v73 + 1) = 0u;
        *(void *)(v73 + 29) = 0LL;
        sub_10000AE6C(v59 + 40, v73);
        std::string v74 = v197;
        if (v198 < 0) {
          std::string v74 = *(uint8_t **)v197;
        }
        *(_DWORD *)v229 = 68289282;
        *(_DWORD *)&v229[4] = 0;
        *(_WORD *)&v229[8] = 2082;
        *(void *)&v229[10] = "";
        *(_WORD *)&v229[18] = 2082;
        *(void *)&v229[20] = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:learnSemiSupervisedModel, labeled fingerprint, trigger not found, Recording UUID: %{public, location:escape_only}s}",  v229,  0x1Cu);
        if (SHIBYTE(v198) < 0) {
          operator delete(*(void **)v197);
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
      }

      uint64_t v75 = qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        std::string v76 = (char *)operator new(0x28uLL);
        *(void *)v197 = v76;
        __int128 v198 = xmmword_1012C8460;
        *(_OWORD *)std::string v76 = 0u;
        *((_OWORD *)v76 + 1) = 0u;
        *(void *)(v76 + 29) = 0LL;
        sub_10000AE6C(v59 + 40, v76);
        std::string v77 = v197;
        if (v198 < 0) {
          std::string v77 = *(uint8_t **)v197;
        }
        *(_DWORD *)v229 = 68289282;
        *(_DWORD *)&v229[4] = 0;
        *(_WORD *)&v229[8] = 2082;
        *(void *)&v229[10] = "";
        *(_WORD *)&v229[18] = 2082;
        *(void *)&v229[20] = v77;
        std::string v78 = (os_log_s *)v75;
        std::string v79 = "learnSemiSupervisedModel, labeled fingerprint, trigger not found";
        std::string v80 = "{msg%{public}.0s:learnSemiSupervisedModel, labeled fingerprint, trigger not found, Recording UUI"
              "D:%{public, location:escape_only}s}";
LABEL_135:
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v78,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v79,  v80,  v229,  0x1Cu);
LABEL_136:
        if (SHIBYTE(v198) < 0) {
          operator delete(*(void **)v197);
        }
      }
    }

    else
    {
      uint64_t v69 = *a4;
      uint64_t v70 = a4[1];
      if (*a4 != v70)
      {
        while (1)
        {
          if (*((_BYTE *)v61 + 232))
          {
            if (*(void *)v69 == *((void *)v61 + 27) && *(void *)(v69 + 8) == *((void *)v61 + 28)) {
              break;
            }
          }

          v69 += 64LL;
          if (v69 == v70) {
            goto LABEL_122;
          }
        }
      }

      if (v69 == v70)
      {
LABEL_122:
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        BOOL v87 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          std::string v88 = (char *)operator new(0x28uLL);
          *(void *)v197 = v88;
          __int128 v198 = xmmword_1012C8460;
          *(_OWORD *)std::string v88 = 0u;
          *((_OWORD *)v88 + 1) = 0u;
          *(void *)(v88 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v61 + 216, v88);
          int v89 = v197;
          if (v198 < 0) {
            int v89 = *(uint8_t **)v197;
          }
          *(_DWORD *)v229 = 68289282;
          *(_DWORD *)&v229[4] = 0;
          *(_WORD *)&v229[8] = 2082;
          *(void *)&v229[10] = "";
          *(_WORD *)&v229[18] = 2082;
          *(void *)&v229[20] = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:learnSemiSupervisedModel, labeled fingerprint, label not found, Trigger UUID:%{ public, location:escape_only}s}",  v229,  0x1Cu);
          if (SHIBYTE(v198) < 0) {
            operator delete(*(void **)v197);
          }
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818CC8);
          }
        }

        uint64_t v90 = qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          v91 = (char *)operator new(0x28uLL);
          *(void *)v197 = v91;
          __int128 v198 = xmmword_1012C8460;
          *(_OWORD *)v91 = 0u;
          *((_OWORD *)v91 + 1) = 0u;
          *(void *)(v91 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v61 + 216, v91);
          v92 = v197;
          if (v198 < 0) {
            v92 = *(uint8_t **)v197;
          }
          *(_DWORD *)v229 = 68289282;
          *(_DWORD *)&v229[4] = 0;
          *(_WORD *)&v229[8] = 2082;
          *(void *)&v229[10] = "";
          *(_WORD *)&v229[18] = 2082;
          *(void *)&v229[20] = v92;
          std::string v78 = (os_log_s *)v90;
          std::string v79 = "learnSemiSupervisedModel, labeled fingerprint, label not found";
          std::string v80 = "{msg%{public}.0s:learnSemiSupervisedModel, labeled fingerprint, label not found, Trigger UUID"
                ":%{public, location:escape_only}s}";
          goto LABEL_135;
        }
      }

      else
      {
        std::string v81 = (_OWORD *)(v69 + 40);
        sub_1000968D4((uint64_t)buf, v59, (__int128 *)(v69 + 40), a10);
        sub_100096A04((uint64_t)buf, v81, (_OWORD *)(v59 + 40));
        sub_10001A568((uint64_t)v190, (void *)(v59 + 40), (_OWORD *)(v59 + 40));
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        std::string v82 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          std::string v83 = (char *)operator new(0x28uLL);
          *(void *)v197 = v83;
          __int128 v198 = xmmword_1012C8460;
          *(_OWORD *)std::string v83 = 0u;
          *((_OWORD *)v83 + 1) = 0u;
          *(void *)(v83 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v62, v83);
          if (v198 >= 0) {
            std::string v84 = v197;
          }
          else {
            std::string v84 = *(uint8_t **)v197;
          }
          std::string v85 = (char *)operator new(0x28uLL);
          *(void *)v195 = v85;
          *(_OWORD *)v196 = xmmword_1012C8460;
          *(_OWORD *)std::string v85 = 0u;
          *((_OWORD *)v85 + 1) = 0u;
          *(void *)(v85 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v81, v85);
          __int128 v86 = v195;
          if (v196[15] < 0) {
            __int128 v86 = *(uint8_t **)v195;
          }
          *(_DWORD *)v229 = 68289538;
          *(_DWORD *)&v229[4] = 0;
          *(_WORD *)&v229[8] = 2082;
          *(void *)&v229[10] = "";
          *(_WORD *)&v229[18] = 2082;
          *(void *)&v229[20] = v84;
          *(_WORD *)&v229[28] = 2082;
          *(void *)&v229[30] = v86;
          _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnSemiSupervisedModel, labeled fingeprint assigned to cluster, Recording UUID :%{public, location:escape_only}s, Cluster UUID:%{public, location:escape_only}s}",  v229,  0x26u);
          if ((v196[15] & 0x80000000) != 0) {
            operator delete(*(void **)v195);
          }
          goto LABEL_136;
        }
      }
    }

    sub_1000EFC64((uint64_t)&v185);
  }

  if (!(_DWORD)v171) {
    goto LABEL_280;
  }
  uint64_t v93 = 0LL;
  int v94 = 0;
  BOOL v95 = (mach_header_64 *)&_mh_execute_header;
  while (1)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    double v96 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v229 = 68289282;
      *(_DWORD *)&v229[4] = 0;
      *(_WORD *)&v229[8] = 2082;
      *(void *)&v229[10] = "";
      *(_WORD *)&v229[18] = 2050;
      *(void *)&v229[20] = v93;
      _os_log_impl( v95,  v96,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnSemiSupervisedModel, started iteration of self learning, iteration number:%{public}lu}",  v229,  0x1Cu);
    }

    uint64_t v97 = *(void *)a6;
    uint64_t v98 = *(void *)(a6 + 8);
    if (*(void *)a6 != v98)
    {
      while (!sub_10001A7B8(v190, (void *)v97))
      {
        v97 += 240LL;
        if (v97 == v98)
        {
          uint64_t v97 = v98;
          goto LABEL_157;
        }
      }

      if (v97 != v98)
      {
        for (uint64_t i = v97 + 240; i != v98; i += 240LL)
        {
          if (!sub_10001A7B8(v190, (void *)i))
          {
            __int128 v100 = *(_OWORD *)i;
            *(void *)(v97 + 16) = *(void *)(i + 16);
            *(_OWORD *)uint64_t v97 = v100;
            CFStringRef v101 = (void **)(v97 + 24);
            __int128 v102 = *(_OWORD *)(i + 24);
            *(void *)(v97 + 40) = *(void *)(i + 40);
            *(_OWORD *)CFStringRef v101 = v102;
            *(_BYTE *)(i + 47) = 0;
            *(_BYTE *)(i + 24) = 0;
            __int128 v103 = *(_OWORD *)(i + 48);
            *(_OWORD *)(v97 + 60) = *(_OWORD *)(i + 60);
            *(_OWORD *)(v97 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v103;
            sub_100087EC8(v97 + 80, i + 80);
            __int128 v104 = *(_OWORD *)(i + 216);
            *(_BYTE *)(v97 + 232) = *(_BYTE *)(i + 232);
            *(_OWORD *)(v97 + 216) = v104;
            v97 += 240LL;
            a8 = (_BYTE *)v178;
          }
        }
      }
    }

LABEL_157:
    sub_1000165E8(a6, v97, *(__int128 **)(a6 + 8));
    unsigned int v105 = sub_100016514();
    sub_10001A504((uint64_t)v202, a3);
    uint64_t v106 = (uint64_t)v227;
    if (!v227) {
      goto LABEL_160;
    }
    if (v227 != v226)
    {
      uint64_t v106 = (*(uint64_t (**)(void))(*v227 + 16LL))();
LABEL_160:
      v201 = (void *)v106;
      goto LABEL_162;
    }

    v201 = v200;
    (*(void (**)(uint64_t, void *))(v226[0] + 24LL))((uint64_t)v226, v200);
LABEL_162:
    sub_1000E2848(v105, (uint64_t)v202, (uint64_t)v200, a6, a2, &v188);
    sub_1000EFC74(&v189, &v188);
    uint64_t v107 = v188;
    uint64_t v188 = 0LL;
    if (v107) {
      (*(void (**)(uint64_t))(*(void *)v107 + 8LL))(v107);
    }
    v108 = v201;
    if (v201 == v200)
    {
      v108 = v200;
      uint64_t v109 = 4LL;
    }

    else
    {
      if (!v201) {
        goto LABEL_169;
      }
      uint64_t v109 = 5LL;
    }

    (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_169:
    uint64_t v110 = v203;
    if (v203 == v202)
    {
      uint64_t v110 = v202;
      uint64_t v111 = 4LL;
    }

    else
    {
      if (!v203) {
        goto LABEL_174;
      }
      uint64_t v111 = 5LL;
    }

    (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_174:
    if (!v93)
    {
      sub_10008EC40((uint64_t)a1, &v189, &v193, 1, Current_1);
      sub_100090EDC(a1, &v189, &v193);
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    uint64_t v112 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v113 = sub_1000EFCD4(&v189);
      *(_DWORD *)v229 = 68289538;
      *(_DWORD *)&v229[4] = 0;
      *(_WORD *)&v229[8] = 2082;
      *(void *)&v229[10] = "";
      *(_WORD *)&v229[18] = 2050;
      *(void *)&v229[20] = v93;
      *(_WORD *)&v229[28] = 2050;
      *(void *)&v229[30] = v113;
      _os_log_impl( v95,  v112,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnSemiSupervisedModel, unLabeledFingerprintVector, iteration:%{public}lu, numF Ps:%{public}lu}",  v229,  0x26u);
    }

    uint64_t v114 = *(void *)(a3 + 24);
    if (!v114) {
      sub_100008BDC();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v114 + 48LL))(v114) & 1) != 0)
    {
      int v115 = 1;
      int v94 = 1;
      goto LABEL_274;
    }

    if (sub_1000EFCD4(&v189)) {
      break;
    }
    int v115 = 18;
LABEL_274:
    uint64_t v57 = v189;
    uint64_t v189 = 0LL;
    if (v57) {
      uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
    }
    if (v115)
    {
      if (v115 == 18)
      {
LABEL_280:
        for (j = v217; j; j = (void *)*j)
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818CC8);
          }
          v156 = (os_log_s *)qword_1019348D8;
          uint64_t v57 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v57)
          {
            v157 = (char *)operator new(0x28uLL);
            *(void *)v197 = v157;
            __int128 v198 = xmmword_1012C8460;
            *(_OWORD *)v157 = 0u;
            *((_OWORD *)v157 + 1) = 0u;
            *(void *)(v157 + 29) = 0LL;
            sub_10000AE6C((uint64_t)(j + 2), v157);
            v158 = v198 >= 0 ? v197 : *(uint8_t **)v197;
            uint64_t v159 = (uint64_t)(j[5] - j[4]) >> 4;
            *(_DWORD *)v229 = 68289538;
            *(_DWORD *)&v229[4] = 0;
            *(_WORD *)&v229[8] = 2082;
            *(void *)&v229[10] = "";
            *(_WORD *)&v229[18] = 2082;
            *(void *)&v229[20] = v158;
            *(_WORD *)&v229[28] = 2050;
            *(void *)&v229[30] = v159;
            _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Pre-Pruning Model, ClusterId:%{public, location:escape_only}s, numFPs:%{public}lu}",  v229,  0x26u);
            if (SHIBYTE(v198) < 0) {
              operator delete(*(void **)v197);
            }
          }
        }

        sub_100016674(v57, (uint64_t)buf, a10);
        sub_100016F54((uint64_t **)a9, (unsigned int *)buf, (uint64_t)v229);
        sub_100090058(a1, buf, (uint64_t)v229, Current_1);
        if (sub_100097CA8((uint64_t)buf))
        {
          *(void *)v197 = sub_100017338((ssize_t)&v194);
          *(void *)&__int128 v198 = v160;
          *(void *)v195 = j__CFAbsoluteTimeGetCurrent_1();
          sub_10001D050(v178);
          sub_10001D098(v178, (uint64_t *)v197, (double *)v195, (uint64_t)v229, a9, v228);
          *(_BYTE *)(v178 + 280) = 1;
        }

        else
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818CC8);
          }
          v161 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v197 = 68289026;
            *(_DWORD *)&v197[4] = 0;
            LOWORD(v19std::iostream::~basic_iostream(v2, v3 + 8) = 2082;
            *(void *)((char *)&v198 + 2) = "";
            _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:learnSemiSupervisedModel, invalid semi-supervised model, not created}",  v197,  0x12u);
          }
        }

        sub_10006F50C(v229);
        sub_100019CEC((uint64_t)v190);
        if (v221 < 0) {
          operator delete(v220);
        }
        if (v218)
        {
          v219 = v218;
          operator delete(v218);
        }

        sub_100019B90((uint64_t)v216);
        *(void *)v229 = v215;
        sub_100019C0C((void ***)v229);
        sub_100019C7C((uint64_t)v214);
        sub_100019CEC((uint64_t)&v205[8]);
        goto LABEL_301;
      }

      sub_100019CEC((uint64_t)v190);
      if (v221 < 0) {
        operator delete(v220);
      }
      if (v218)
      {
        v219 = v218;
        operator delete(v218);
      }

      sub_100019B90((uint64_t)v216);
      *(void *)v229 = v215;
      sub_100019C0C((void ***)v229);
      sub_100019C7C((uint64_t)v214);
      sub_100019CEC((uint64_t)&v205[8]);
      uint64_t v166 = v193;
      uint64_t v193 = 0LL;
      if (v166) {
        (*(void (**)(uint64_t))(*(void *)v166 + 8LL))(v166);
      }
      v167 = v227;
      if (v227 == v226)
      {
        uint64_t v168 = 4LL;
        v167 = v226;
LABEL_319:
        (*(void (**)(void))(*v167 + 8 * v168))();
      }

      else if (v227)
      {
        uint64_t v168 = 5LL;
        goto LABEL_319;
      }

      if ((v94 & 1) == 0) {
        sub_100019D34((uint64_t)a8);
      }
      return sub_100019D7C((unsigned int *)&v194);
    }

    if (++v93 == v171) {
      goto LABEL_280;
    }
  }

  uint64_t v185 = 0LL;
  v186 = 0LL;
  unint64_t v187 = 0LL;
  v184[0] = sub_1000EFD0C((uint64_t)&v189);
  v184[1] = v116;
  v183[0] = sub_1000EFD18(&v189);
  v183[1] = v117;
  while (sub_1000EFC24(v184, v183))
  {
    uint64_t v118 = sub_1000EFC50(v184);
    uint64_t v119 = v118;
    int v120 = *(void **)a6;
    int v121 = *(void **)(a6 + 8);
    char v122 = (void *)(v118 + 40);
    if (*(void **)a6 != v121)
    {
      while (*v120 != *v122 || v120[1] != *(void *)(v118 + 48))
      {
        v120 += 30;
        if (v120 == v121) {
          goto LABEL_201;
        }
      }
    }

    if (v120 == v121)
    {
LABEL_201:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      __n128 v126 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        char v127 = (char *)operator new(0x28uLL);
        *(void *)v197 = v127;
        __int128 v198 = xmmword_1012C8460;
        *(_OWORD *)char v127 = 0u;
        *((_OWORD *)v127 + 1) = 0u;
        *(void *)(v127 + 29) = 0LL;
        sub_10000AE6C((uint64_t)v122, v127);
        if (v198 >= 0) {
          v128 = v197;
        }
        else {
          v128 = *(uint8_t **)v197;
        }
        *(_DWORD *)v229 = 68289282;
        *(_DWORD *)&v229[4] = 0;
        *(_WORD *)&v229[8] = 2082;
        *(void *)&v229[10] = "";
        *(_WORD *)&v229[18] = 2082;
        *(void *)&v229[20] = v128;
        _os_log_impl( v95,  v126,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:didn't find recording event matching to fingerprint, RecordingUUID:%{public, loca tion:escape_only}s}",  v229,  0x1Cu);
        if (SHIBYTE(v198) < 0) {
          operator delete(*(void **)v197);
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
      }

      v129 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        v130 = (char *)operator new(0x28uLL);
        *(void *)v197 = v130;
        __int128 v198 = xmmword_1012C8460;
        *(_OWORD *)v130 = 0u;
        *((_OWORD *)v130 + 1) = 0u;
        *(void *)(v130 + 29) = 0LL;
        sub_10000AE6C((uint64_t)v122, v130);
        v131 = v198 >= 0 ? v197 : *(uint8_t **)v197;
        *(_DWORD *)v229 = 68289282;
        *(_DWORD *)&v229[4] = 0;
        *(_WORD *)&v229[8] = 2082;
        *(void *)&v229[10] = "";
        *(_WORD *)&v229[18] = 2082;
        *(void *)&v229[20] = v131;
        _os_signpost_emit_with_name_impl( v95,  v129,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "didn't find recording event matching to fingerprint",  "{msg%{public}.0s:didn't find recording event matching to fingerprint, RecordingUUID:%{public, loca tion:escape_only}s}",  v229,  0x1Cu);
        if (SHIBYTE(v198) < 0)
        {
          char v132 = *(uint8_t **)v197;
LABEL_245:
          operator delete(v132);
        }
      }
    }

    else
    {
      sub_100103634((void *)*(unsigned int *)&buf[4], (uint64_t)v181);
      sub_10000C120((uint64_t)v197, (unsigned __int8 *)v181, 3u);
      sub_1000CCB00((uint64_t)buf, v119, (uint64_t)v197, 0LL, 1, (uint64_t)v229);
      uint64_t v124 = *(void *)v229;
      if (*(void *)v229 == *(void *)&v229[8])
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        v135 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          v136 = operator new(0x28uLL);
          v179 = v136;
          __int128 v180 = xmmword_1012C8460;
          _OWORD *v136 = 0u;
          v136[1] = 0u;
          *(void *)((char *)v136 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v122, v136);
          v137 = &v179;
          if (v180 < 0) {
            v137 = v179;
          }
          *(_DWORD *)v195 = 68289282;
          *(_DWORD *)&v195[4] = 0;
          *(_WORD *)v196 = 2082;
          *(void *)&v196[2] = "";
          *(_WORD *)&v196[10] = 2082;
          *(void *)&v196[12] = v137;
          _os_log_impl( v95,  v135,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Localizer returned empty results when learning semi-supervised model, RecordingUU ID:%{public, location:escape_only}s}",  v195,  0x1Cu);
          if (SHIBYTE(v180) < 0) {
            operator delete(v179);
          }
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818CC8);
          }
        }

        v138 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          __int16 v139 = operator new(0x28uLL);
          v179 = v139;
          __int128 v180 = xmmword_1012C8460;
          *__int16 v139 = 0u;
          v139[1] = 0u;
          *(void *)((char *)v139 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v122, v139);
          uint64_t v140 = &v179;
          if (v180 < 0) {
            uint64_t v140 = v179;
          }
          *(_DWORD *)v195 = 68289282;
          *(_DWORD *)&v195[4] = 0;
          *(_WORD *)v196 = 2082;
          *(void *)&v196[2] = "";
          *(_WORD *)&v196[10] = 2082;
          *(void *)&v196[12] = v140;
          _os_signpost_emit_with_name_impl( v95,  v138,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Localizer returned empty results when learning semi-supervised model",  "{msg%{public}.0s:Localizer returned empty results when learning semi-supervised model, RecordingUU ID:%{public, location:escape_only}s}",  v195,  0x1Cu);
          if (SHIBYTE(v180) < 0) {
            operator delete(v179);
          }
        }
      }

      else
      {
        for (uint64_t k = *(void *)v229 + 32LL; k != *(void *)&v229[8]; k += 32LL)
        {
        }

        if (*(_OWORD *)v124 != 0LL)
        {
          v133 = v186;
          if ((unint64_t)v186 >= v187)
          {
            v134 = (char *)sub_10001AB48(&v185, v119, (_OWORD *)v124);
          }

          else
          {
            sub_10001AC6C((uint64_t)v186, v119, (_OWORD *)v124);
            v134 = v133 + 224;
          }

          v186 = v134;
        }
      }

      if (v232[0] && *(void *)&v231[8])
      {
        *(void *)&v231[16] = *(void *)&v231[8];
        operator delete(*(void **)&v231[8]);
      }

      if (*(void *)&v229[32])
      {
        uint64_t v230 = *(void *)&v229[32];
        operator delete(*(void **)&v229[32]);
      }

      if (*(void *)v229)
      {
        *(void *)&v229[8] = *(void *)v229;
        operator delete(*(void **)v229);
      }

      sub_1002A5554(v199);
      sub_100008390((uint64_t)v197, (void *)v198);
      if (v182 < 0)
      {
        char v132 = (uint8_t *)v181[0];
        goto LABEL_245;
      }
    }

    sub_1000EFC64((uint64_t)v184);
  }

  uint64_t v169 = v93;
  __int16 v141 = v95;
  int v175 = v94;
  unint64_t v142 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * ((uint64_t)&v186[-v185] >> 5));
  else {
    uint64_t v143 = v142;
  }
  sub_10001BB34(v185, v186, v143, 1);
  v144 = v186;
  double v145 = 0.0;
  if ((char *)v185 == v186 || v170 < 1)
  {
LABEL_269:
    if (v145 >= v29) {
      int v115 = 0;
    }
    else {
      int v115 = 18;
    }
    *(void *)v229 = &v185;
    sub_10001A95C((void ***)v229);
    int v94 = v175;
    BOOL v95 = v141;
    uint64_t v93 = v169;
    goto LABEL_274;
  }

  v146 = (char *)(v185 + 224);
  double v147 = 0.0;
  unsigned int v148 = v170;
  while (1)
  {
    sub_1000968D4((uint64_t)buf, (uint64_t)(v146 - 224), (__int128 *)v146 - 2, a10);
    sub_100096A04((uint64_t)buf, (_OWORD *)v146 - 2, v146 - 184);
    sub_10001A568((uint64_t)v190, (void *)v146 - 23, v146 - 184);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    v149 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      v150 = (char *)operator new(0x28uLL);
      *(void *)v197 = v150;
      __int128 v198 = xmmword_1012C8460;
      *(_OWORD *)v150 = 0u;
      *((_OWORD *)v150 + 1) = 0u;
      *(void *)(v150 + 29) = 0LL;
      sub_10000AE6C((uint64_t)(v146 - 184), v150);
      if (v198 >= 0) {
        v151 = v197;
      }
      else {
        v151 = *(uint8_t **)v197;
      }
      v152 = (char *)operator new(0x28uLL);
      *(void *)v195 = v152;
      *(_OWORD *)v196 = xmmword_1012C8460;
      *(_OWORD *)v152 = 0u;
      *((_OWORD *)v152 + 1) = 0u;
      *(void *)(v152 + 29) = 0LL;
      sub_10000AE6C((uint64_t)(v146 - 32), v152);
      v153 = v195;
      if (v196[15] < 0) {
        v153 = *(uint8_t **)v195;
      }
      *(_DWORD *)v229 = 68289538;
      *(_DWORD *)&v229[4] = 0;
      *(_WORD *)&v229[8] = 2082;
      *(void *)&v229[10] = "";
      *(_WORD *)&v229[18] = 2082;
      *(void *)&v229[20] = v151;
      *(_WORD *)&v229[28] = 2082;
      *(void *)&v229[30] = v153;
      _os_log_impl( v141,  v149,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnSemiSupervisedModel, unlabeled fingeprint assigned to cluster, Recording UUID: %{public, location:escape_only}s, Cluster UUID:%{public, location:escape_only}s}",  v229,  0x26u);
      if ((v196[15] & 0x80000000) != 0) {
        operator delete(*(void **)v195);
      }
      if (SHIBYTE(v198) < 0) {
        operator delete(*(void **)v197);
      }
    }

    double v145 = *((double *)v146 - 2);
    if (v147 != 0.0 && v145 > v147) {
      break;
    }
    if (v146 != v144)
    {
      v146 += 224;
      double v147 = v145;
      if (v148-- >= 2) {
        continue;
      }
    }

    goto LABEL_269;
  }

  sub_1012237C8();
  uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSemiSupe rvisedAlgorithm.mm",  225,  "learnSelfTrainingSemiSupervisedModel");
  __break(1u);
  return result;
}

    __break(1u);
  }

  if (*(int *)(v5 + 336) >= 1)
  {
    uint64_t v44 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x46,  *(_DWORD *)(*(void *)(v5 + 328) + 4 * v44++),  a2,  a4);
    while (v44 < *(int *)(v5 + 336));
  }

  std::string v45 = *(_DWORD *)(v5 + 400);
  if ((v45 & 0x400) != 0)
  {
    uint64_t v46 = *(void *)(v5 + 344);
    if (!v46) {
      uint64_t v46 = *(void *)(qword_1019A1D38 + 344);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x47,  v46,  a2,  a4);
    std::string v45 = *(_DWORD *)(v5 + 400);
  }

  if ((v45 & 0x800) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x48,  *(_DWORD *)(v5 + 308),  a2,  a4);
  }
  if (*(int *)(v5 + 360) >= 1)
  {
    std::string v47 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x49,  *(_DWORD *)(*(void *)(v5 + 352) + 4 * v47++),  a2,  a4);
    while (v47 < *(int *)(v5 + 360));
  }

  std::string v48 = *(_DWORD *)(v5 + 400);
  if ((v48 & 0x2000) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4A,  *(unsigned __int8 *)(v5 + 368),  (BOOL)a2,  a4);
    std::string v48 = *(_DWORD *)(v5 + 400);
    if ((v48 & 0x4000) == 0)
    {
LABEL_171:
      if ((v48 & 0x8000) == 0) {
        goto LABEL_172;
      }
      goto LABEL_176;
    }
  }

  else if ((v48 & 0x4000) == 0)
  {
    goto LABEL_171;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4B,  *(_DWORD *)(v5 + 372),  a2,  a4);
  std::string v48 = *(_DWORD *)(v5 + 400);
  if ((v48 & 0x8000) == 0)
  {
LABEL_172:
    if ((v48 & 0x10000) == 0) {
      return result;
    }
    goto LABEL_179;
  }

  std::string v77 = *(void *)(a1 + 160);
  if (!v77) {
    std::string v77 = *(void *)(qword_1019A1D48 + 160);
  }
  std::string v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006397F4(v77, a2);
  std::string v79 = (int)v78;
  else {
    std::string v80 = 1;
  }
  unint64_t v4 = (v4 + v79 + v80 + 2);
  __int128 v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x400000) == 0)
  {
LABEL_122:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_169;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v51 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    std::string v52 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v192 = "alertCanceledBecauseOfSimilarPeaks";
    uint64_t v193 = 2048;
    int v194 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    __int16 v141 = *(void *)(a1 + 8);
    unint64_t v187 = 136315394;
    uint64_t v188 = "alertCanceledBecauseOfSimilarPeaks";
    uint64_t v189 = 2048;
    v190 = v141;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    uint64_t v143 = (uint8_t *)v142;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v142);
    if (v143 != buf) {
      free(v143);
    }
  }

  a4[13] = 1;
  __int128 v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400000000LL) == 0)
  {
LABEL_23:
    if ((v10 & 0x800000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_169;
  }

  uint64_t result = *(float *)(a2 + 192);
  v5 |= 0x200000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 192) = result;
  LOWORD(vstd::iostream::~basic_iostream(v2, v3 + 8) = *(_WORD *)(a2 + 324);
  unint64_t v4 = *v3;
  if ((*v3 & 0x200000000000000LL) == 0)
  {
LABEL_77:
    if ((v4 & 0x400000000000000LL) == 0) {
      goto LABEL_78;
    }
    goto LABEL_159;
  }

  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 264));
  __int128 v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 2) == 0) {
      goto LABEL_77;
    }
    goto LABEL_159;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192), 0x10Bu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  std::string::size_type v5 = *v4;
  if ((*v4 & 0x200000000000000LL) == 0)
  {
LABEL_77:
    if ((v5 & 0x400000000000000LL) == 0) {
      goto LABEL_78;
    }
    goto LABEL_159;
  }

  uint64_t v46 = *(_BYTE *)(a2 + 329);
  v6 |= 0x40000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 329) = v46;
  unint64_t v4 = *v3;
  __int128 v7 = *(void *)(a2 + 364);
  if ((v7 & 0x20) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_159;
  }

  PB::TextFormatter::format(this, "numAudioSkiingThreshold", *(_DWORD *)(a1 + 156));
  __int128 v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_159;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 329), 0x13Bu);
  std::string::size_type v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_159;
  }

  uint64_t v93 = *(_DWORD *)(a2 + 60);
  v3 |= 0x200uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 60) = v93;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x20) == 0)
  {
LABEL_79:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_159;
  }

  PB::TextFormatter::format(this, "passthru2", *(_BYTE *)(a1 + 199));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  std::string::size_type v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_159;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x4BFu);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  unint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0) {
      goto LABEL_80;
    }
    goto LABEL_159;
  }

        *(_DWORD *)(a1 + 56) = v79;
        goto LABEL_158;
      case 9u:
        sub_101102E30(v8);
        std::string v82 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (PB::Reader::placeMark(this, v114, v83, v84)
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v82 + 16LL))(v82, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v114);
LABEL_158:
          uint64_t v2 = *((void *)this + 1);
          __int128 v3 = *((void *)this + 2);
          unint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_158;
    }
  }

void sub_100016138( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,unsigned int a59)
{
  uint64_t v60 = a57;
  a57 = 0LL;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  std::string v61 = (unint64_t *)STACK[0x3D8];
  if ((unint64_t *)STACK[0x3D8] == &STACK[0x3C0])
  {
    uint64_t v62 = 4LL;
    std::string v61 = &STACK[0x3C0];
  }

  else
  {
    if (!v61) {
      goto LABEL_8;
    }
    uint64_t v62 = 5LL;
  }

  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_8:
  sub_100019D34(a34);
  sub_100019D7C(&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100016514()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  __int128 v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1LL;
  }
}

void sub_1000165D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000165E8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    sub_10001A8A4((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 240LL;
        sub_10001A3D4(a1 + 16, v7);
      }

      while (v7 != v6);
    }

    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  }

  return a2;
}

void *sub_100016674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_100018C58();
  sub_1000C7D20(v5, v72);
  if (sub_100018D30())
  {
    sub_100019D9C((uint64_t)v68, a2 + 16);
    __int128 v70 = *(_OWORD *)(a2 + 56);
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
    LOBYTE(v68[0]) = 0;
  }

  char v71 = v6;
  sub_1000412CC(v5);
  if (v71) {
    sub_100019CEC((uint64_t)v68);
  }
  sub_1002F0B04(v68);
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  int v8 = sub_1002A77CC(*(uint64_t *)&v68[0], (uint64_t)v7, v63);
  CFRelease(v7);
  unsigned int v9 = v63[0];
  __int128 v10 = (std::__shared_weak_count *)*((void *)&v68[0] + 1);
  if (*((void *)&v68[0] + 1))
  {
    std::string::size_type v11 = (unint64_t *)(*((void *)&v68[0] + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v8) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = 1;
  }
  sub_100041344(v13, v81);
  sub_1002F0B04(v68);
  CFStringRef v14 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsPruneDistanceThresholdSemiSupervised",  0x8000100u,  kCFAllocatorNull);
  int v15 = sub_1002A832C(*(uint64_t *)&v68[0], (uint64_t)v14, v63);
  CFRelease(v14);
  double v16 = *(double *)v63;
  unint64_t v17 = (std::__shared_weak_count *)*((void *)&v68[0] + 1);
  if (*((void *)&v68[0] + 1))
  {
    unint64_t v18 = (unint64_t *)(*((void *)&v68[0] + 1) + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (!v15) {
    double v16 = 0.075;
  }
  uint64_t v65 = 0LL;
  unint64_t v66 = 0LL;
  unint64_t v67 = 0LL;
  memset(v68, 0, sizeof(v68));
  int v69 = 1065353216;
  uint64_t v20 = *(void *)(a2 + 232);
  for (uint64_t i = *(void *)(a2 + 240); v20 != i; v20 += 32LL)
  {
    v63[0] = (_OWORD *)(v20 + 16);
    unsigned int v22 = sub_10001D9FC((uint64_t)v68, (void *)(v20 + 16), (uint64_t)&unk_1012CF090, v63);
    unint64_t v23 = v22[5];
    if (v23 >= v22[6])
    {
      uint64_t v24 = sub_10001DCCC(v22 + 4, *(void *)v20);
    }

    else
    {
      sub_10001DDD8((uint64_t)(v22 + 6), v23, *(void *)v20);
      uint64_t v24 = v23 + 192;
      v22[5] = v23 + 192;
    }

    v22[5] = v24;
  }

  sub_10009773C((void *)a2, (uint64_t)v63);
  unint64_t v25 = v64;
  if (v64)
  {
    while (1)
    {
      *(void *)__int128 buf = v25 + 2;
      uint64_t v26 = sub_10001D9FC((uint64_t)v68, v25 + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
      uint64_t v27 = (uint64_t)v84;
      if (!v84) {
        goto LABEL_30;
      }
      if (v84 != v83) {
        break;
      }
      std::string v80 = v79;
      (*(void (**)(void *, _BYTE *))(v83[0] + 24LL))(v83, v79);
LABEL_32:
      int v28 = v26 + 4;
      sub_10001E184((unint64_t *)buf, v26 + 4, (uint64_t)v79);
      uint64_t v29 = (uint64_t)v82;
      if (!v82) {
        goto LABEL_35;
      }
      if (v82 != v81)
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*v82 + 16LL))(v82);
LABEL_35:
        std::string v78 = (_BYTE *)v29;
        goto LABEL_37;
      }

      std::string v78 = v77;
      (*(void (**)(void *, _BYTE *))(v81[0] + 24LL))(v81, v77);
LABEL_37:
      sub_100007E38((char **)v62, (unint64_t *)buf, (uint64_t)v77);
      __int128 v30 = v78;
      if (v78 == v77)
      {
        __int128 v30 = v77;
        uint64_t v31 = 4LL;
      }

      else
      {
        if (!v78) {
          goto LABEL_42;
        }
        uint64_t v31 = 5LL;
      }

      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_42:
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }

      unint64_t v32 = v80;
      if (v80 == v79)
      {
        unint64_t v32 = v79;
        uint64_t v33 = 4LL;
        goto LABEL_48;
      }

      if (v80)
      {
        uint64_t v33 = 5LL;
LABEL_48:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }

      uint64_t v59 = 0LL;
      uint64_t v60 = 0LL;
      uint64_t v61 = 0LL;
      unint64_t v34 = sub_100008260((uint64_t *)v62, &v59, 0LL, v16, 0.0);
      *(void *)__int128 buf = 0LL;
      sub_10001E524(&v57, v34, buf);
      int v35 = v59;
      std::string::size_type v36 = v57;
      if (v60 != v59)
      {
        uint64_t v37 = 0LL;
        unint64_t v38 = (v60 - (_BYTE *)v59) >> 3;
        if (v38 <= 1) {
          unint64_t v38 = 1LL;
        }
        do
        {
          v36[v35[v37]] = v37;
          ++v37;
        }

        while (v38 != v37);
      }

      int v39 = v58;
      if (v36 != v58)
      {
        unint64_t v40 = v66;
        do
        {
          uint64_t v41 = *v28 + 192LL * *v36;
          if (v40 >= v67)
          {
            unint64_t v40 = sub_10001E5A4(&v65, v41, (_OWORD *)v25 + 1);
          }

          else
          {
            sub_10001E6C8(v40, v41, (_OWORD *)v25 + 1);
            v40 += 208LL;
          }

          unint64_t v66 = v40;
          ++v36;
        }

        while (v36 != v39);
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      uint64_t v42 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        std::string v43 = operator new(0x28uLL);
        uint64_t v55 = v43;
        __int128 v56 = xmmword_1012C8460;
        *std::string v43 = 0u;
        v43[1] = 0u;
        *(void *)((char *)v43 + 29) = 0LL;
        sub_10000AE6C((uint64_t)(v25 + 2), v43);
        uint64_t v44 = &v55;
        if (v56 < 0) {
          uint64_t v44 = v55;
        }
        *(_DWORD *)__int128 buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)__int128 __p = 2082;
        *(void *)&__p[2] = "";
        *(_WORD *)&__p[10] = 2082;
        *(void *)&__p[12] = v44;
        __int16 v75 = 2050;
        unint64_t v76 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Post-Pruning Model, ClusterId:%{public, location:escape_only}s, numFPs:%{public}lu}",  buf,  0x26u);
        if (SHIBYTE(v56) < 0) {
          operator delete(v55);
        }
      }

      if (v57)
      {
        uint64_t v58 = v57;
        operator delete(v57);
      }

      if (v59)
      {
        uint64_t v60 = v59;
        operator delete(v59);
      }

      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }

      unint64_t v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_73;
      }
    }

    uint64_t v27 = (*(uint64_t (**)(void *))(*v84 + 16LL))(v84);
LABEL_30:
    std::string v80 = (_BYTE *)v27;
    goto LABEL_32;
  }

LABEL_73:
  sub_100019CEC((uint64_t)v63);
  uint64_t v46 = *(void *)(a2 + 232);
  for (uint64_t j = *(void *)(a2 + 240); j != v46; uint64_t j = sub_10000AE14(j - 32))
    ;
  *(void *)(a2 + 240) = v46;
  uint64_t v47 = v65;
  unint64_t v48 = v66;
  while (v47 != v48)
  {
    uint64_t v49 = v47 + 192;
    sub_1000968D4(a2, v47, (__int128 *)(v47 + 192), a3);
    uint64_t v47 = v49 + 16;
  }

  sub_10001D8F4((uint64_t)v68);
  *(void *)&v68[0] = &v65;
  sub_10001D870((void ***)v68);
  uint64_t v50 = v82;
  if (v82 == v81)
  {
    uint64_t v51 = 4LL;
    uint64_t v50 = v81;
  }

  else
  {
    if (!v82) {
      goto LABEL_84;
    }
    uint64_t v51 = 5LL;
  }

  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_84:
  std::string v52 = v84;
  if (v84 == v83)
  {
    uint64_t v53 = 4LL;
    std::string v52 = v83;
    goto LABEL_88;
  }

  if (v84)
  {
    uint64_t v53 = 5LL;
LABEL_88:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }

  return sub_1002A5554(v72);
}

  *(_DWORD *)(a1 + 292) |= 0x400u;
  uint64_t v26 = *(void **)(a1 + 88);
  if (!v26)
  {
    uint64_t v26 = operator new(0x18uLL);
    *uint64_t v26 = off_10181B440;
    v26[1] = 31LL;
    *((_DWORD *)v26 + 4) = 0;
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v26;
  }

  uint64_t v27 = *(void *)(a2 + 88);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A0978 + 88);
  }
  sub_100078AA4((uint64_t)v26, v27);
  int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x800) == 0)
  {
LABEL_58:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_83;
  }

  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A0978 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v20,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }

  if (!HIBYTE(v13)) {
    goto LABEL_82;
  }
  if ((v13 & 0x1000000) != 0)
  {
    int v69 = *(void *)(a2 + 144);
    *(_DWORD *)(a1 + 364) |= 0x1000000u;
    *(void *)(a1 + 144) = v69;
    unsigned int v13 = *(_DWORD *)(a2 + 364);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_76:
      if ((v13 & 0x4000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_164;
    }
  }

  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_76;
  }

  __int128 v70 = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 364) |= 0x2000000u;
  *(void *)(a1 + 152) = v70;
  unsigned int v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_77:
    if ((v13 & 0x8000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_165;
  }

  unsigned int v22 = *(void *)(a1 + 64);
  if (!v22) {
    unsigned int v22 = *(void *)(qword_1019A0BF8 + 64);
  }
  unint64_t v23 = *(unsigned __int8 *)(v22 + 36);
  uint64_t v24 = (v23 << 31 >> 31) & 9;
  if ((v23 & 2) != 0) {
    v24 += 9;
  }
  if ((v23 & 4) != 0) {
    v24 += 9;
  }
  if (*(_BYTE *)(v22 + 36)) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = 0;
  }
  *(_DWORD *)(v22 + 32) = v25;
  int v5 = (v5 + v25 + 2);
  __int128 v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x4000) == 0)
  {
LABEL_59:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_93;
  }

  uint64_t v33 = *(_DWORD *)(a2 + 132);
  if (v33 >= 6) {
    sub_101230134();
  }
  *(_DWORD *)(a1 + 148) |= 0x400000u;
  *(_DWORD *)(a1 + 132) = v33;
  if ((*(_DWORD *)(a2 + 148) & 0x800000) != 0)
  {
LABEL_75:
    *(_DWORD *)(a1 + 148) |= 0x800000u;
    unint64_t v34 = *(void **)(a1 + 136);
    if (!v34)
    {
      unint64_t v34 = operator new(0x18uLL);
      v34[1] = 0LL;
      v34[2] = 0LL;
      sqlite3_stmt *v34 = off_101829458;
      *(void *)(a1 + 136) = v34;
    }

    int v35 = *(_BYTE **)(a2 + 136);
    if (!v35) {
      int v35 = *(_BYTE **)(qword_1019A0CF0 + 136);
    }
    sub_1001F201C((uint64_t)v34, v35);
  }

          unint64_t v32 = *(double *)(a1 + 112);
          if (v32 > 0.0 && v32 > v18)
          {
            if (qword_101934A30 != -1) {
              dispatch_once(&qword_101934A30, &stru_101834B40);
            }
            uint64_t v33 = (os_log_s *)qword_101934A38;
            if (os_log_type_enabled((os_log_t)qword_101934A38, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v34 = v3 + 144;
              *(_DWORD *)__int128 buf = 136446722;
              unint64_t v66 = v34;
              unint64_t v67 = 2050;
              BOOL v68 = v32;
              int v69 = 2050;
              __int128 v70 = v32 - Current;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "CLFU,Throttling download %{public}s due to retry delay, scheduling download for %{public}.3f (%{public}.3f away)",  buf,  0x20u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A30 != -1) {
                dispatch_once(&qword_101934A30, &stru_101834B40);
              }
              uint64_t v55 = 136446722;
              __int128 v56 = v4;
              uint64_t v57 = 2050;
              uint64_t v58 = v32;
              uint64_t v59 = 2050;
              uint64_t v60 = v32 - Current;
              LODWORD(v52) = 32;
              std::string v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A38,  0LL,  "CLFU,Throttling download %{public}s due to retry delay, scheduling download for %{public}. 3f (%{public}.3f away)",  &v55,  v52);
              sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFileUpdate::scheduleDownload()", "%s\n", v45);
            }

            unint64_t v18 = v32;
          }

          if (v18 > 0.0) {
            [*(id *)(a1 + 56) setNextFireTime:v18];
          }
          return (*(uint64_t (**)(char *))(*(void *)v3 + 24LL))(v3);
        }

        bzero(buf, 0x65CuLL);
        if (qword_101934A30 != -1) {
          dispatch_once(&qword_101934A30, &stru_101834B40);
        }
        unsigned int v22 = v3 + 144;
        uint64_t v55 = 136446722;
        __int128 v56 = v22;
        uint64_t v57 = 2050;
        uint64_t v58 = v16;
        uint64_t v59 = 2050;
        uint64_t v60 = v53[0];
        LODWORD(v52) = 32;
        unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A38,  0LL,  "CLFU,last %{public}s downloaded over %{public}.3f seconds ago (%{public}.3f), starting a download now",  &v55,  v52);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }

      else
      {
        if (qword_101934A30 != -1) {
          dispatch_once(&qword_101934A30, &stru_101834B40);
        }
        uint64_t v24 = (os_log_s *)qword_101934A38;
        if (os_log_type_enabled((os_log_t)qword_101934A38, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v25 = (const char *)(a1 + 176);
          *(_DWORD *)__int128 buf = 136446210;
          unint64_t v66 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "CLFU,cannot verify existence of %{public}s, attempting to re-download now",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_55;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934A30 != -1) {
          dispatch_once(&qword_101934A30, &stru_101834B40);
        }
        uint64_t v46 = (const char *)(a1 + 176);
        uint64_t v55 = 136446210;
        __int128 v56 = v46;
        LODWORD(v52) = 12;
        unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A38,  0LL,  "CLFU,cannot verify existence of %{public}s, attempting to re-download now",  &v55,  v52);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }

      goto LABEL_55;
    }
  }

  else if (v3[167])
  {
    goto LABEL_3;
  }

  if (qword_101934A30 != -1) {
    dispatch_once(&qword_101934A30, &stru_101834B40);
  }
  std::string::size_type v11 = (os_log_s *)qword_101934A38;
  if (os_log_type_enabled((os_log_t)qword_101934A38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CLFU,no download source set - not downloading",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A30 != -1) {
      dispatch_once(&qword_101934A30, &stru_101834B40);
    }
    LOWORD(v55) = 0;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A38,  0LL,  "CLFU,no download source set - not downloading",  &v55,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFileUpdate::scheduleDownload()", "%s\n", v12);
  }

  return (*(uint64_t (**)(char *))(*(void *)v3 + 24LL))(v3);
}

  if (!*((_DWORD *)a4 + 24) && !*((_DWORD *)a4 + 110) && !*((_DWORD *)a4 + 76))
  {
    BOOL v87 = sub_1004C8AF4((uint64_t)v74, (double **)&__p);
    *(double *)a4 = v87;
    sub_10070CA5C(a3, v87);
    a4[1] = v88;
    *((_BYTE *)a4 + 776) = 1;
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10183C768);
  }
  int v89 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v90 = *a4;
    v91 = a4[1];
    *(_DWORD *)__int128 buf = 134349824;
    *(double *)&uint8_t buf[4] = a5;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v90;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&buf[24] = v91;
    LOWORD(v10std::iostream::~basic_iostream(v2, v3 + 8) = 2050;
    *(void *)((char *)&v108 + 2) = (v97 - (_BYTE *)__p) >> 4;
    _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "CLMobility::ModelFusion::Result,classificationEnd,%{public}.2f,rawSteadiness,%{public}.2f,walkingSteadiness,%{publ ic}.2f,successfulModelCount,%{public}lu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10183C768);
    }
    v92 = *a4;
    uint64_t v93 = a4[1];
    v99 = 134349824;
    __int128 v100 = a5;
    CFStringRef v101 = 2050;
    __int128 v102 = v92;
    __int128 v103 = 2050;
    __int128 v104 = v93;
    unsigned int v105 = 2050;
    uint64_t v106 = (v97 - (_BYTE *)__p) >> 4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::ModelFusion::Result,classificationEnd,%{public}.2f,rawSteadiness,%{public}.2f,walkingSteadiness,%{publ ic}.2f,successfulModelCount,%{public}lu",  &v99,  42);
    BOOL v95 = (char *)v94;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModelFusion::Result CLMobility::SteadinessModelFusion::runSteadinessModel(CFAbsoluteTime, const std::vec tor<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v94);
    if (v95 != buf) {
      free(v95);
    }
  }

  if (__p)
  {
    uint64_t v97 = (char *)__p;
    operator delete(__p);
  }

  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A11B8 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v20,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }

  uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[14];
  if ((v29 & 0x80000000) != 0)
  {
    __int128 v30 = 11;
  }

  else if (v29 >= 0x80)
  {
    __int128 v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
    __int128 v3 = a1[17];
  }

  else
  {
    __int128 v30 = 2;
  }

  unint64_t v4 = (v30 + v4);
  if ((v3 & 0x2000) != 0)
  {
LABEL_79:
    uint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[15];
    else {
      unint64_t v32 = 2;
    }
    unint64_t v4 = (v32 + v4);
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v37 = *(void *)(a1 + 64);
      if (!v37) {
        uint64_t v37 = *(void *)(qword_1019A17B8 + 64);
      }
      unint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100810DB8(v37, a2);
      unint64_t v40 = (int)v38;
      else {
        uint64_t v41 = 1;
      }
      unint64_t v4 = (v4 + v40 + v41 + 1);
      __int128 v3 = *(_DWORD *)(a1 + 88);
    }

    if ((v3 & 0x200) != 0)
    {
      uint64_t v42 = *(void *)(a1 + 72);
      if (!v42) {
        uint64_t v42 = *(void *)(qword_1019A17B8 + 72);
      }
      std::string v43 = *(unsigned __int8 *)(v42 + 28);
      uint64_t v44 = (v43 << 31 >> 31) & 9;
      if ((v43 & 2) != 0) {
        v44 += 9;
      }
      if (*(_BYTE *)(v42 + 28)) {
        std::string v45 = v44;
      }
      else {
        std::string v45 = 0;
      }
      *(_DWORD *)(v42 + 24) = v45;
      unint64_t v4 = (v4 + v45 + 2);
    }
  }

  *(_DWORD *)(a1 + 84) = v4;
  return v4;
}

    dispatch_once(&qword_101934830, &stru_101860CB0);
    goto LABEL_67;
  }

  return result;
}

  unint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    unint64_t v23 = *(void *)(qword_1019A1CE8 + 136);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  v23,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }

  unint64_t v19 = *(void *)(v5 + 120);
  if (!v19) {
    unint64_t v19 = *(void *)(qword_1019A1D38 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v19,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_79;
  }

  unint64_t v19 = *(void *)(v5 + 128);
  if (!v19) {
    unint64_t v19 = *(void *)(qword_1019A1D48 + 128);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  v19,  a2,  a4);
  char v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_77;
  }

LABEL_41:
  unint64_t v17 = 1LL;
LABEL_88:
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v17;
}

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  unint64_t v23 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v192 = "impactCanceledBecauseOfCyclingImpactThresholds";
    uint64_t v193 = 2048;
    int v194 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v99 = *(void *)(a1 + 8);
    unint64_t v187 = 136315394;
    uint64_t v188 = "impactCanceledBecauseOfCyclingImpactThresholds";
    uint64_t v189 = 2048;
    v190 = v99;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    CFStringRef v101 = (uint8_t *)v100;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v100);
    if (v101 != buf) {
      free(v101);
    }
  }

  a3[6] = 1;
  __int128 v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100000) == 0)
  {
LABEL_9:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }

  if (!sub_100EF8930((uint64_t)(a1 + 32), a2))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    unint64_t v40 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(__p, a2);
      uint64_t v41 = v68 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136380675;
      *(void *)&uint8_t buf[4] = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "Unable to add fence,%{private}s, to the database",  buf,  0xCu);
      if (SHIBYTE(v68) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_93;
    }
    bzero(__p, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    uint64_t v47 = qword_101934848;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(buf, a2);
    if (v61[9] >= 0) {
      unint64_t v48 = buf;
    }
    else {
      unint64_t v48 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v55 = 136380675;
    *(void *)&v55[4] = v48;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v47,  17LL,  "Unable to add fence,%{private}s, to the database",  v55,  12);
    uint64_t v24 = v49;
    if ((v61[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_113;
  }

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_10188C1A8);
  }
  uint64_t v37 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(__p, a2);
    unint64_t v38 = v68 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)__int128 buf = 136380675;
    *(void *)&uint8_t buf[4] = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "iB: Added fence,%{private}s, to the database",  buf,  0xCu);
    if (SHIBYTE(v68) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    std::string v43 = qword_101934848;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(buf, a2);
    if (v61[9] >= 0) {
      uint64_t v44 = buf;
    }
    else {
      uint64_t v44 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v55 = 136380675;
    *(void *)&v55[4] = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v43,  2LL,  "iB: Added fence,%{private}s, to the database",  v55,  12);
    uint64_t v46 = v45;
    if ((v61[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBeaconFenceAuthorizationManager::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)",  "%s\n",  v46);
    if (v46 != __p) {
      free(v46);
    }
  }

  sub_100EFE9F4(a1, (std::string *)(a2 + 40), (const std::string *)(a2 + 64), (const std::string *)(a2 + 88));
  int v39 = 1LL;
LABEL_94:
  sub_100527B44(v51);
  return v39;
}

  -[CLTransitMacMonitor setCurrentState:](v72, "setCurrentState:", v60);
}

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  unsigned int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "timeto3rdZC", *(float *)(a1 + 144));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_37;
    }
LABEL_75:
    PB::TextFormatter::format(this, "withinCyclingImpactThresholds", *(_BYTE *)(a1 + 154));
    if ((*(void *)(a1 + 156) & 0x1000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 154), 0x23u);
  unint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 32), 0x25u);
  }

  uint64_t v31 = *(void *)(a2 + 96);
  v5 |= 0x800uLL;
  *unsigned int v2 = v5;
  *(void *)(a1 + 96) = v31;
  unint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMultiPeaks", *(void *)(a1 + 208));
  char v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 120), 0x44u);
  int v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }

  int v28 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v28;
  if ((*(void *)(a2 + 156) & 1) != 0) {
    goto LABEL_74;
  }
  return result;
}

  PB::TextFormatter::format(this, "lastChargerStateDurationThreshold", *(double *)(a1 + 248));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 272), 0x1Bu);
  unint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_75;
  }

  uint64_t result = *(float *)(a2 + 44);
  v3 |= 0x40uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 44) = result;
  unsigned int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 108));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x17u);
  unint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x21u);
  CFStringRef v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) == 0)
  {
LABEL_42:
    if ((v14 & 0x800000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x23u);
  }

  uint64_t result = *(float *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 76) = result;
  unsigned int v2 = *(void *)(a2 + 172);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "kPassThruRO", *(_BYTE *)(a1 + 165));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x80000000000LL) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x71u);
  unint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  unsigned int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "totalCalories", *(void *)(a1 + 24));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x22u);
  unint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }

  unint64_t v34 = *(_DWORD *)(a2 + 196);
  v3 |= 0x800000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 196) = v34;
  unsigned int v2 = *(void *)(a2 + 212);
  if ((v2 & 0x2000000000LL) == 0)
  {
LABEL_36:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "rolloverSaturationAtMaxChaos", *(float *)(a1 + 184));
  int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_33:
    if ((v5 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 204), 0x20u);
  unint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "rejectionStatus", *(_DWORD *)(a1 + 220));
  unint64_t v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 240), 0x1Eu);
  double v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_75;
  }

  unint64_t v23 = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 136) = v23;
  unsigned int v2 = *(void *)(a2 + 184);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 104));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x1Bu);
  unint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 168));
  int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x20u);
  char v6 = *(void *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_68:
                unsigned int v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              unsigned int v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v2 = *((void *)this + 1);
LABEL_74:
              __int128 v3 = *((void *)this + 2);
              unint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        unint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v24 = *(_DWORD *)(a2 + 20);
  v3 |= 4uLL;
  *(void *)(result + 18std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 20) = v24;
  unsigned int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }

  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000000000LL) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_75;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148), 0x16u);
  unint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }

  ++*((void *)a1 + 3);
  return 1LL;
}

void sub_100016D50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, int a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46)
{
}

void sub_100016F54(uint64_t **a1@<X1>, unsigned int *a2@<X2>, uint64_t a3@<X8>)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  int v5 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = (void *)*a2;
    int v7 = *((char *)a1 + 23);
    int v8 = (uint64_t **)*a1;
    uint64_t v10 = *((void *)a2 + 29);
    uint64_t v9 = *((void *)a2 + 30);
    uint64_t v11 = sub_1000954B4((uint64_t)a2);
    unsigned int v12 = a2[1];
    unsigned int v13 = (uint64_t *)(v7 >= 0 ? a1 : v8);
    *(_DWORD *)__int128 buf = 68290307;
    int v34 = 0;
    __int16 v35 = 2082;
    std::string::size_type v36 = "";
    __int16 v37 = 2050;
    unint64_t v38 = v6;
    __int16 v39 = 2081;
    unint64_t v40 = v13;
    __int16 v41 = 2049;
    uint64_t v42 = (v9 - v10) >> 5;
    __int16 v43 = 2049;
    *(void *)uint64_t v44 = v11;
    *(_WORD *)&v44[8] = 1025;
    v45[0] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Semi-supervised model, GenerationAlgorithm:%{public}lu, Client:%{private, locatio n:escape_only}s, size:%{private}lu, numClusters:%{private}lu, type:%{private}d}",  buf,  0x40u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = (uint64_t *)*((void *)a2 + 29);
    for (uint64_t i = (uint64_t *)*((void *)a2 + 30); v15 != i; v15 += 4)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      double v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *v15;
        unint64_t v18 = operator new(0x28uLL);
        __int128 v30 = v18;
        __int128 v31 = xmmword_1012C8460;
        *unint64_t v18 = 0u;
        v18[1] = 0u;
        *(void *)((char *)v18 + 29) = 0LL;
        sub_10000AE6C(v17 + 40, v18);
        if (v31 >= 0) {
          unint64_t v19 = &v30;
        }
        else {
          unint64_t v19 = v30;
        }
        uint64_t v20 = operator new(0x28uLL);
        __int128 __p = v20;
        __int128 v29 = xmmword_1012C8460;
        *uint64_t v20 = 0u;
        v20[1] = 0u;
        *(void *)((char *)v20 + 29) = 0LL;
        sub_10000AE6C((uint64_t)(v15 + 2), v20);
        if (v29 >= 0) {
          p_p = (uint64_t *)&__p;
        }
        else {
          p_p = (uint64_t *)__p;
        }
        uint64_t v22 = *v15;
        uint64_t v23 = *(void *)(*v15 + 24);
        unsigned int v32 = 1;
        uint64_t v24 = sub_10001A29C((void *)(v22 + 104), &v32);
        if (v24) {
          double v25 = *((double *)v24 + 4) - *((double *)v24 + 3);
        }
        else {
          double v25 = 0.0;
        }
        double v26 = *(double *)(*v15 + 152);
        int v27 = (int)*(double *)(*v15 + 144);
        *(_DWORD *)__int128 buf = 68290563;
        int v34 = 0;
        __int16 v35 = 2082;
        std::string::size_type v36 = "";
        __int16 v37 = 2081;
        unint64_t v38 = v19;
        __int16 v39 = 2081;
        unint64_t v40 = p_p;
        __int16 v41 = 2049;
        uint64_t v42 = v23;
        __int16 v43 = 1025;
        *(_DWORD *)uint64_t v44 = (int)v25;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v27;
        LOWORD(v45[0]) = 1025;
        *(_DWORD *)((char *)v45 + 2) = (int)v26;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:modelFingerprint, recordingUUID:%{private, location:escape_only}s, clusterUUID :%{private, location:escape_only}s, size:%{private}lu, duration:%{private}d, start:%{private}d,  end:%{private}d}",  buf,  0x42u);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30);
        }
      }
    }
  }

void sub_1000172D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_100017338(ssize_t a1)
{
  BYTE6(v2) = BYTE6(v2) & 0xF | 0x40;
  return v2;
}

uint64_t sub_1000173AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(void *)(a1 + 312) = v2;
    operator delete(v2);
  }

  sub_100019B90(a1 + 256);
  unint64_t v4 = (void **)(a1 + 232);
  sub_100019C0C(&v4);
  sub_100019C7C(a1 + 72);
  sub_100019CEC(a1 + 16);
  return a1;
}

void *sub_10001741C@<X0>( void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X5>, __int128 **a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v183[0] = a11;
  v183[1] = a12;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  uint64_t v17 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unint64_t v18 = *(uint64_t **)a9;
    }
    unint64_t v19 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a5[1] - *a5) >> 4);
    unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * (a6[1] - *a6);
    *(_DWORD *)__int128 buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v159 = 2082;
    uint64_t v160 = "";
    __int16 v161 = 2082;
    unint64_t v162 = (unint64_t)v18;
    __int16 v163 = 2050;
    unint64_t v164 = v19;
    __int16 v165 = 2050;
    unint64_t v166 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Learning semi-supervised model with BinaryRoi generation algorithm, Client:%{public, location:escape_only}s, Number of labeled recording triggers:%{public}lu, Number of unlabeled recording trig gers:%{public}lu}",  buf,  0x30u);
  }

  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  *a8 = 0;
  uint64_t v116 = (uint64_t)a8;
  a8[280] = 0;
  v181[0] = &off_101818E08;
  v181[1] = sub_100137504;
  char v182 = v181;
  memset(v137, 0, sizeof(v137));
  int v138 = 1065353216;
  memset(v135, 0, sizeof(v135));
  int v136 = 1065353216;
  uint64_t v22 = (void *)a4[1];
  if ((void *)*a4 != v22)
  {
    uint64_t v23 = (void *)(*a4 + 40LL);
    do
    {
      sub_10001A568((uint64_t)v137, v23, v23);
      *(void *)__int128 buf = v23 - 5;
      *((_OWORD *)sub_10001D174((uint64_t)v135, v23 - 5, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 2) = *(_OWORD *)v23;
      uint64_t v24 = v23 + 3;
      v23 += 8;
    }

    while (v24 != v22);
  }

  memset(v133, 0, sizeof(v133));
  int v134 = 1065353216;
  memset(v131, 0, sizeof(v131));
  int v132 = 1065353216;
  uint64_t v25 = *a5;
  uint64_t v26 = a5[1];
  if (*a5 != v26)
  {
    do
    {
      sub_10001A568((uint64_t)v133, (void *)v25, (_OWORD *)v25);
      if (*(_BYTE *)(v25 + 232))
      {
        *(void *)__int128 buf = v25;
        *((_OWORD *)sub_10001D174((uint64_t)v131, (void *)v25, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 2) = *(_OWORD *)(v25 + 216);
      }

      v25 += 240LL;
    }

    while (v25 != v26);
  }

  uint64_t v128 = 0LL;
  uint64_t v129 = 0LL;
  uint64_t v130 = 0LL;
  int v27 = *a6;
  int v28 = a6[1];
  *(void *)__int16 v139 = &v128;
  while (v27 != v28)
  {
    if (!sub_10001A7B8(v133, v27)) {
      sub_10001D3CC((uint64_t **)v139, v27);
    }
    v27 += 15;
  }

  unsigned int v29 = sub_100016514();
  sub_10001A504((uint64_t)v179, a3);
  uint64_t v30 = (uint64_t)v182;
  if (!v182) {
    goto LABEL_23;
  }
  if (v182 != v181)
  {
    uint64_t v30 = (*(uint64_t (**)(void))(*v182 + 16LL))();
LABEL_23:
    uint64_t v178 = (_BYTE *)v30;
    goto LABEL_25;
  }

  uint64_t v178 = v177;
  (*(void (**)(void *, _BYTE *))(v181[0] + 24LL))(v181, v177);
LABEL_25:
  sub_1000E2848(v29, (uint64_t)v179, (uint64_t)v177, (uint64_t)a5, a2, &v126);
  sub_1000EFC74(&v127, &v126);
  uint64_t v31 = v126;
  uint64_t v126 = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  unsigned int v32 = v178;
  if (v178 == v177)
  {
    uint64_t v33 = 4LL;
    unsigned int v32 = v177;
  }

  else
  {
    if (!v178) {
      goto LABEL_32;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_32:
  int v34 = v180;
  if (v180 == v179)
  {
    uint64_t v35 = 4LL;
    int v34 = v179;
    goto LABEL_36;
  }

  if (v180)
  {
    uint64_t v35 = 5LL;
LABEL_36:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  std::string::size_type v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v39 = a5;
    uint64_t v38 = *a5;
    uint64_t v37 = v39[1];
    uint64_t v40 = sub_1000EFCD4(&v127);
    *(_DWORD *)__int128 buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v159 = 2082;
    uint64_t v160 = "";
    __int16 v161 = 2050;
    unint64_t v162 = 0xEEEEEEEEEEEEEEEFLL * ((v37 - v38) >> 4);
    __int16 v163 = 2050;
    unint64_t v164 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnBinaryModel, labeledFingerprintVector, numTriggers:%{public}lu, numFPs:%{public}lu}",  buf,  0x26u);
  }

  if (!sub_1000EFCD4(&v127))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    uint64_t v46 = qword_1019348D8;
    if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_194;
    }
    else {
      uint64_t v47 = *(uint64_t **)a9;
    }
    *(_DWORD *)__int128 buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v159 = 2082;
    uint64_t v160 = "";
    __int16 v161 = 2081;
    unint64_t v162 = (unint64_t)v47;
    __int16 v43 = "{msg%{public}.0s:learnBinaryModel, Must have valid labeled fingerprints, ClientId:%{private, locat"
          "ion:escape_only}s}";
    uint64_t v44 = (os_log_s *)v46;
    uint32_t v45 = 28;
LABEL_55:
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v43, buf, v45);
    goto LABEL_194;
  }

  uint64_t v41 = *(void *)(a3 + 24);
  if (!v41) {
    sub_100008BDC();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v41 + 48LL))(v41))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    uint64_t v42 = qword_1019348D8;
    if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_194;
    }
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v159 = 2082;
    uint64_t v160 = "";
    __int16 v43 = "{msg%{public}.0s:Learning binary model cancelled}";
    uint64_t v44 = (os_log_s *)v42;
    uint32_t v45 = 18;
    goto LABEL_55;
  }

  sub_100094E18(buf);
  *(void *)__int128 buf = 0x100000004LL;
  if ((const char **)((char *)&v160 + 6) != (const char **)a7)
  {
    int v167 = *(_DWORD *)(a7 + 32);
    sub_1000193A0((const char **)((char *)&v160 + 6), *(uint64_t **)(a7 + 16), 0LL);
  }

  __int128 v168 = *(_OWORD *)(a7 + 40);
  int v120 = (void *)sub_1000EFD0C((uint64_t)&v127);
  *(void *)&__int128 v121 = v48;
  v125[0] = sub_1000EFD18(&v127);
  v125[1] = v49;
  while (sub_1000EFC24(&v120, v125))
  {
    uint64_t v50 = sub_1000EFC50(&v120);
    uint64_t v51 = (_OWORD *)(v50 + 40);
    std::string v52 = sub_10001A7B8(v131, (void *)(v50 + 40));
    uint64_t v53 = v52;
    if (v52)
    {
      uint64_t v54 = (uint64_t)(v52 + 4);
      uint64_t v55 = sub_10001A7B8(v135, v52 + 4);
      if (v55)
      {
        __int128 v157 = *((_OWORD *)v55 + 2);
        sub_1000968D4((uint64_t)buf, v50, &v157, a10);
        sub_100096A04((uint64_t)buf, &v157, v51);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        __int128 v56 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v57 = operator new(0x28uLL);
          __int128 __p = v57;
          __int128 v149 = xmmword_1012C8460;
          _OWORD *v57 = 0u;
          v57[1] = 0u;
          *(void *)((char *)v57 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v51, v57);
          if (v149 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          uint64_t v59 = (char *)operator new(0x28uLL);
          *(void *)v155 = v59;
          __int128 v156 = xmmword_1012C8460;
          *(_OWORD *)uint64_t v59 = 0u;
          *((_OWORD *)v59 + 1) = 0u;
          *(void *)(v59 + 29) = 0LL;
          sub_10000AE6C((uint64_t)&v157, v59);
          uint64_t v60 = v155;
          if (v156 < 0) {
            uint64_t v60 = *(uint8_t **)v155;
          }
          *(_DWORD *)__int16 v139 = 68289538;
          *(_DWORD *)&v139[4] = 0;
          __int16 v140 = 2082;
          __int16 v141 = "";
          __int16 v142 = 2082;
          unint64_t v143 = (unint64_t)p_p;
          __int16 v144 = 2082;
          uint64_t v145 = (uint64_t)v60;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnBinaryModel, labeled fingeprint assigned to cluster, Recording UUID:%{publ ic, location:escape_only}s, Cluster UUID:%{public, location:escape_only}s}",  v139,  0x26u);
LABEL_107:
          if (SHIBYTE(v156) < 0) {
            operator delete(*(void **)v155);
          }
          goto LABEL_109;
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        uint64_t v67 = (uint64_t)(v53 + 2);
        BOOL v68 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          int v69 = operator new(0x28uLL);
          __int128 __p = v69;
          __int128 v149 = xmmword_1012C8460;
          _OWORD *v69 = 0u;
          v69[1] = 0u;
          *(void *)((char *)v69 + 29) = 0LL;
          sub_10000AE6C(v67, v69);
          if (v149 >= 0) {
            __int128 v70 = &__p;
          }
          else {
            __int128 v70 = __p;
          }
          char v71 = (char *)operator new(0x28uLL);
          *(void *)v155 = v71;
          __int128 v156 = xmmword_1012C8460;
          *(_OWORD *)char v71 = 0u;
          *((_OWORD *)v71 + 1) = 0u;
          *(void *)(v71 + 29) = 0LL;
          sub_10000AE6C(v54, v71);
          std::string v72 = v155;
          if (v156 < 0) {
            std::string v72 = *(uint8_t **)v155;
          }
          *(_DWORD *)__int16 v139 = 68289538;
          *(_DWORD *)&v139[4] = 0;
          __int16 v140 = 2082;
          __int16 v141 = "";
          __int16 v142 = 2082;
          unint64_t v143 = (unint64_t)v70;
          __int16 v144 = 2082;
          uint64_t v145 = (uint64_t)v72;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint, Re cording UUID:%{public, location:escape_only}s, Trigger UUID:%{public, location:escape_only}s}",  v139,  0x26u);
          if (SHIBYTE(v156) < 0) {
            operator delete(*(void **)v155);
          }
          if (SHIBYTE(v149) < 0) {
            operator delete(__p);
          }
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101818CC8);
          }
        }

        std::string v73 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          std::string v74 = operator new(0x28uLL);
          __int128 __p = v74;
          __int128 v149 = xmmword_1012C8460;
          _OWORD *v74 = 0u;
          v74[1] = 0u;
          *(void *)((char *)v74 + 29) = 0LL;
          sub_10000AE6C(v67, v74);
          if (v149 >= 0) {
            __int16 v75 = &__p;
          }
          else {
            __int16 v75 = __p;
          }
          unint64_t v76 = (char *)operator new(0x28uLL);
          *(void *)v155 = v76;
          __int128 v156 = xmmword_1012C8460;
          *(_OWORD *)unint64_t v76 = 0u;
          *((_OWORD *)v76 + 1) = 0u;
          *(void *)(v76 + 29) = 0LL;
          sub_10000AE6C(v54, v76);
          std::string v77 = v155;
          if (v156 < 0) {
            std::string v77 = *(uint8_t **)v155;
          }
          *(_DWORD *)__int16 v139 = 68289538;
          *(_DWORD *)&v139[4] = 0;
          __int16 v140 = 2082;
          __int16 v141 = "";
          __int16 v142 = 2082;
          unint64_t v143 = (unint64_t)v75;
          __int16 v144 = 2082;
          uint64_t v145 = (uint64_t)v77;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v73,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint",  "{msg%{public}.0s:learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint, Re cording UUID:%{public, location:escape_only}s, Trigger UUID:%{public, location:escape_only}s}",  v139,  0x26u);
          goto LABEL_107;
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      uint64_t v61 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v62 = operator new(0x28uLL);
        __int128 __p = v62;
        __int128 v149 = xmmword_1012C8460;
        _OWORD *v62 = 0u;
        v62[1] = 0u;
        *(void *)((char *)v62 + 29) = 0LL;
        sub_10000AE6C((uint64_t)v51, v62);
        if (v149 >= 0) {
          __int128 v63 = &__p;
        }
        else {
          __int128 v63 = __p;
        }
        *(_DWORD *)__int16 v139 = 68289282;
        *(_DWORD *)&v139[4] = 0;
        __int16 v140 = 2082;
        __int16 v141 = "";
        __int16 v142 = 2082;
        unint64_t v143 = (unint64_t)v63;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint, Re cording UUID:%{public, location:escape_only}s}",  v139,  0x1Cu);
        if (SHIBYTE(v149) < 0) {
          operator delete(__p);
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
      }

      __int128 v64 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        uint64_t v65 = operator new(0x28uLL);
        __int128 __p = v65;
        __int128 v149 = xmmword_1012C8460;
        _OWORD *v65 = 0u;
        v65[1] = 0u;
        *(void *)((char *)v65 + 29) = 0LL;
        sub_10000AE6C((uint64_t)v51, v65);
        if (v149 >= 0) {
          unint64_t v66 = &__p;
        }
        else {
          unint64_t v66 = __p;
        }
        *(_DWORD *)__int16 v139 = 68289282;
        *(_DWORD *)&v139[4] = 0;
        __int16 v140 = 2082;
        __int16 v141 = "";
        __int16 v142 = 2082;
        unint64_t v143 = (unint64_t)v66;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v64,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint",  "{msg%{public}.0s:learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint, Re cording UUID:%{public, location:escape_only}s}",  v139,  0x1Cu);
LABEL_109:
        if (SHIBYTE(v149) < 0) {
          operator delete(__p);
        }
      }
    }

    sub_1000EFC64((uint64_t)&v120);
  }

  unsigned int v78 = sub_100016514();
  sub_10001A504((uint64_t)v153, a3);
  uint64_t v79 = (uint64_t)v182;
  if (!v182) {
    goto LABEL_115;
  }
  if (v182 == v181)
  {
    v152 = v151;
    (*(void (**)(void *, _BYTE *))(v181[0] + 24LL))(v181, v151);
  }

  else
  {
    uint64_t v79 = (*(uint64_t (**)(void))(*v182 + 16LL))();
LABEL_115:
    v152 = (_BYTE *)v79;
  }

  sub_1000E2848(v78, (uint64_t)v153, (uint64_t)v151, (uint64_t)&v128, a2, &v123);
  sub_1000EFC74(&v124, &v123);
  uint64_t v80 = v123;
  uint64_t v123 = 0LL;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
  }
  std::string v81 = v152;
  if (v152 == v151)
  {
    uint64_t v82 = 4LL;
    std::string v81 = v151;
LABEL_123:
    (*(void (**)(void))(*v81 + 8 * v82))();
  }

  else if (v152)
  {
    uint64_t v82 = 5LL;
    goto LABEL_123;
  }

  std::string v83 = v154;
  if (v154 == v153)
  {
    uint64_t v84 = 4LL;
    std::string v83 = v153;
LABEL_128:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }

  else if (v154)
  {
    uint64_t v84 = 5LL;
    goto LABEL_128;
  }

  if (sub_1000EFCD4(&v124))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    std::string v85 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v87 = v128;
      uint64_t v86 = v129;
      uint64_t v88 = sub_1000EFCD4(&v124);
      *(_DWORD *)__int16 v139 = 68289538;
      *(_DWORD *)&v139[4] = 0;
      __int16 v140 = 2082;
      __int16 v141 = "";
      __int16 v142 = 2050;
      unint64_t v143 = 0xEEEEEEEEEEEEEEEFLL * ((v86 - v87) >> 4);
      __int16 v144 = 2050;
      uint64_t v145 = v88;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnBinaryModel, unlabeledFingerprintVector, numTriggers:%{public}lu, numFPs:%{public}lu}",  v139,  0x26u);
    }

    sub_10008EC40((uint64_t)a1, &v124, &v127, 1, Current_1);
    sub_100090EDC(a1, &v124, &v127);
    int v89 = sub_100018C58();
    sub_1000C7D20(v89, v125);
    if (sub_100018D30())
    {
      sub_100019D9C((uint64_t)v139, (uint64_t)&v160 + 6);
      __int128 v146 = v168;
      char v90 = 1;
    }

    else
    {
      char v90 = 0;
      v139[0] = 0;
    }

    char v147 = v90;
    sub_1000412CC(v89);
    if (v147) {
      sub_100019CEC((uint64_t)v139);
    }
    *(void *)&__int128 v157 = sub_1000EFD0C((uint64_t)&v124);
    *((void *)&v157 + 1) = v93;
    v122[0] = sub_1000EFD18(&v124);
    v122[1] = v94;
    while (sub_1000EFC24(&v157, v122))
    {
      uint64_t v95 = sub_1000EFC50(&v157);
      sub_1000968D4((uint64_t)buf, v95, &xmmword_1012C8662, a10);
      uint64_t v96 = v95 + 40;
      sub_100096A04((uint64_t)buf, &xmmword_1012C8662, (_OWORD *)(v95 + 40));
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      uint64_t v97 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v98 = (char *)operator new(0x28uLL);
        *(void *)v155 = v98;
        __int128 v156 = xmmword_1012C8460;
        *(_OWORD *)uint64_t v98 = 0u;
        *((_OWORD *)v98 + 1) = 0u;
        *(void *)(v98 + 29) = 0LL;
        sub_10000AE6C(v96, v98);
        if (v156 >= 0) {
          v99 = v155;
        }
        else {
          v99 = *(uint8_t **)v155;
        }
        __int128 v100 = operator new(0x28uLL);
        int v120 = v100;
        __int128 v121 = xmmword_1012C8460;
        _OWORD *v100 = 0u;
        v100[1] = 0u;
        *(void *)((char *)v100 + 29) = 0LL;
        sub_10000AE6C((uint64_t)&xmmword_1012C8662, v100);
        if (v121 >= 0) {
          CFStringRef v101 = &v120;
        }
        else {
          CFStringRef v101 = v120;
        }
        *(_DWORD *)__int16 v139 = 68289538;
        *(_DWORD *)&v139[4] = 0;
        __int16 v140 = 2082;
        __int16 v141 = "";
        __int16 v142 = 2082;
        unint64_t v143 = (unint64_t)v99;
        __int16 v144 = 2082;
        uint64_t v145 = (uint64_t)v101;
        _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:learnBinaryModel, fingeprint assigned to NotROI, Recording UUID:%{public, locatio n:escape_only}s, Cluster UUID:%{public, location:escape_only}s}",  v139,  0x26u);
        if (SHIBYTE(v121) < 0) {
          operator delete(v120);
        }
        if (SHIBYTE(v156) < 0) {
          operator delete(*(void **)v155);
        }
      }

      sub_1000EFC64((uint64_t)&v157);
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    BOOL v102 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG);
    if (v102)
    {
      for (uint64_t i = v172; i; uint64_t i = (void *)*i)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818CC8);
        }
        __int128 v104 = (os_log_s *)qword_1019348D8;
        BOOL v102 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG);
        if (v102)
        {
          unsigned int v105 = (char *)operator new(0x28uLL);
          *(void *)v155 = v105;
          __int128 v156 = xmmword_1012C8460;
          *(_OWORD *)unsigned int v105 = 0u;
          *((_OWORD *)v105 + 1) = 0u;
          *(void *)(v105 + 29) = 0LL;
          sub_10000AE6C((uint64_t)(i + 2), v105);
          uint64_t v106 = v156 >= 0 ? v155 : *(uint8_t **)v155;
          uint64_t v107 = (uint64_t)(i[5] - i[4]) >> 4;
          *(_DWORD *)__int16 v139 = 68289538;
          *(_DWORD *)&v139[4] = 0;
          __int16 v140 = 2082;
          __int16 v141 = "";
          __int16 v142 = 2082;
          unint64_t v143 = (unint64_t)v106;
          __int16 v144 = 2050;
          uint64_t v145 = v107;
          _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Pre-Pruning Model, ClusterId:%{public, location:escape_only}s, numFPs:%{public}lu}",  v139,  0x26u);
          if (SHIBYTE(v156) < 0) {
            operator delete(*(void **)v155);
          }
        }
      }
    }

    sub_100016674(v102, (uint64_t)buf, a10);
    sub_100016F54((uint64_t **)a9, (unsigned int *)buf, (uint64_t)v139);
    sub_100090058(a1, buf, (uint64_t)v139, Current_1);
    if (sub_100097CA8((uint64_t)buf))
    {
      LODWORD(v157) = 0;
      sub_100018E34((int *)&v157);
      *(void *)v155 = sub_100017338((ssize_t)&v157);
      *(void *)&__int128 v156 = v108;
      int v120 = COERCE_VOID_(j__CFAbsoluteTimeGetCurrent_1());
      sub_10001D050(v116);
      sub_10001D098(v116, (uint64_t *)v155, (double *)&v120, (uint64_t)v139, a9, v183);
      *(_BYTE *)(v116 + 280) = 1;
      sub_100019D7C((unsigned int *)&v157);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818CC8);
      }
      uint64_t v109 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v155 = 68289026;
        *(_DWORD *)&v155[4] = 0;
        LOWORD(v156) = 2082;
        *(void *)((char *)&v156 + 2) = "";
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:learnBinaryModel, invalid binary model, not created}",  v155,  0x12u);
      }
    }

    sub_10006F50C(v139);
    uint64_t v110 = v150;
    if (v150 == &__p)
    {
      uint64_t v111 = 4LL;
      uint64_t v110 = &__p;
LABEL_185:
      (*((void (**)(void))*v110 + v111))();
    }

    else if (v150)
    {
      uint64_t v111 = 5LL;
      goto LABEL_185;
    }

    sub_1002A5554(v125);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
    v91 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        v92 = *(uint64_t **)a9;
      }
      *(_DWORD *)__int16 v139 = 68289283;
      *(_DWORD *)&v139[4] = 0;
      __int16 v140 = 2082;
      __int16 v141 = "";
      __int16 v142 = 2081;
      unint64_t v143 = (unint64_t)v92;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:learnBinaryModel, Must have valid unlabeled fingerprints to create a Non-ROI cluster,  ClientId:%{private, location:escape_only}s}",  v139,  0x1Cu);
    }
  }

  uint64_t v112 = v124;
  uint64_t v124 = 0LL;
  if (v112) {
    (*(void (**)(uint64_t))(*(void *)v112 + 8LL))(v112);
  }
  if (v176 < 0) {
    operator delete(v175);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }

  sub_100019B90((uint64_t)&v171);
  *(void *)__int16 v139 = &v170;
  sub_100019C0C((void ***)v139);
  sub_100019C7C((uint64_t)&v169);
  sub_100019CEC((uint64_t)&v160 + 6);
LABEL_194:
  uint64_t v113 = v127;
  uint64_t v127 = 0LL;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8LL))(v113);
  }
  *(void *)__int128 buf = &v128;
  sub_10001A350((void ***)buf);
  sub_100019CEC((uint64_t)v131);
  sub_100019CEC((uint64_t)v133);
  sub_100019CEC((uint64_t)v135);
  sub_100019CEC((uint64_t)v137);
  uint64_t result = v182;
  if (v182 == v181)
  {
    uint64_t v115 = 4LL;
    uint64_t result = v181;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v115))();
  }

  else if (v182)
  {
    uint64_t v115 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v115))();
  }

  return result;
}

void sub_1000188C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v65 = (unint64_t *)STACK[0x298];
  if ((unint64_t *)STACK[0x298] == &STACK[0x280])
  {
    uint64_t v66 = 4LL;
    uint64_t v65 = &STACK[0x280];
  }

  else
  {
    if (!v65) {
      goto LABEL_6;
    }
    uint64_t v66 = 5LL;
  }

  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_6:
  sub_1002A5554(&a32);
  if (a31) {
    (*(void (**)(uint64_t))(*(void *)a31 + 8LL))(a31);
  }
  sub_1000173AC((uint64_t)&STACK[0x310]);
  uint64_t v67 = a35;
  a35 = 0LL;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
  }
  STACK[0x310] = (unint64_t)&a36;
  sub_10001A350((void ***)&STACK[0x310]);
  sub_100019CEC((uint64_t)&a39);
  sub_100019CEC((uint64_t)&a45);
  sub_100019CEC((uint64_t)&a51);
  sub_100019CEC((uint64_t)&a57);
  BOOL v68 = *(void **)(v63 - 144);
  if (v68 == (void *)(v63 - 168))
  {
    uint64_t v69 = 4LL;
    BOOL v68 = (void *)(v63 - 168);
  }

  else
  {
    if (!v68) {
      goto LABEL_15;
    }
    uint64_t v69 = 5LL;
  }

  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_15:
  sub_100019D34(a12);
  _Unwind_Resume(a1);
}

void sub_100018C40()
{
}

void sub_100018C4C()
{
}

uint64_t sub_100018C58()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsFingerprintDistanceFunctionType",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  __int128 v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 4LL;
  }
}

void sub_100018D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100018D30()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  __int128 v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100018DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100018E08(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

int *sub_100018E34(int *a1)
{
  *a1 = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *a1 = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    sub_1010DDBC0(&v8, "open /dev/urandom");
    unint64_t v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_101818DD8;
    uint64_t v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/lo"
                         "cal/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    uint64_t v7 = 60LL;
    sub_100018F10(v5, &v6);
  }

  return a1;
}

void sub_100018EE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100018F10(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_100018F70((uint64_t)exception, a1, a2);
}

void sub_100018F58(_Unwind_Exception *a1)
{
}

uint64_t sub_100018F70(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)a1 = &off_101818D58;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_101818D88;
  int8x16_t v6 = a2[1].__vftable;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = off_101818DB8;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_100018FF0(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *sub_100019030(uint64_t a1)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &off_101818DD8;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  *((void *)v2 + 4) = &off_101818AE8;
  uint64_t v3 = *(void *)(a1 + 40);
  *((void *)v2 + 5) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *(void *)int v2 = &off_101818D58;
  *((void *)v2 + 1) = off_101818D88;
  *((void *)v2 + 4) = off_101818DB8;
  sub_10001242C((uint64_t)(v2 + 32), a1 + 32);
  return v2;
}

void sub_100019100(_Unwind_Exception *a1)
{
}

void sub_100019134(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_1000192D8((uint64_t)exception, a1);
}

void sub_100019170(_Unwind_Exception *a1)
{
}

void sub_100019184(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_1000191C4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_1000191FC(uint64_t a1)
{
  int v2 = (void *)(a1 - 8);
  *(void *)(a1 + 24) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete(v2);
}

uint64_t sub_100019240(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_100019248(void *a1)
{
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

void sub_100019280(void *a1)
{
  int v2 = a1 - 4;
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  operator delete(v2);
}

void sub_1000192C4(std::runtime_error *a1)
{
}

uint64_t sub_1000192D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101818AB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = &off_101818DD8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = &off_101818AE8;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(void *)a1 = &off_101818D58;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_101818D88;
  *(void *)(a1 + 32) = off_101818DB8;
  return a1;
}

void sub_10001938C(_Unwind_Exception *a1)
{
}

void sub_1000193A0(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v6; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  std::string v8 = (uint64_t *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      __int128 v9 = *((_OWORD *)a2 + 2);
      *((_DWORD *)v8 + 12) = *((_DWORD *)a2 + 12);
      *((_OWORD *)v8 + 2) = v9;
      uint64_t v10 = (uint64_t *)*v8;
      sub_1000194A4(a1, v8);
      a2 = (uint64_t *)*a2;
      std::string v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }

    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      operator delete(v8);
      std::string v8 = v11;
    }

    while (v11);
  }

  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1000199AC(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }

void sub_100019470(void *a1)
{
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_100019490(_Unwind_Exception *a1)
{
}

void *sub_1000194A4(void *a1, void *a2)
{
  unint64_t v4 = 0LL;
  for (uint64_t i = 16LL; i != 32; ++i)
    v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  a2[1] = v4;
  uint64_t v6 = sub_10001951C((uint64_t)a1, v4, a2 + 2);
  sub_100019674(a1, a2, v6);
  return a2;
}

void *sub_10001951C(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_10001975C(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  double v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0LL;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    double v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }

    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }

    if (v20 != v15) {
      break;
    }
    if (v19 == a2)
    {
      BOOL v21 = v16[2] == *a3 && v16[3] == a3[1];
      BOOL v22 = v21;
    }

    else
    {
      BOOL v22 = 0;
    }

    int v23 = v17 & !v22;
    v17 |= v22;
  }

  while (v23 != 1);
  return result;
}

void *sub_100019674(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }

  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

    if (v6 != v4) {
      goto LABEL_18;
    }
  }

  if (!sub_1003C1048(a1 + 72))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v99 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "Export using paging. database object is invalid",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    LOWORD(v129.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Export using paging. database object is invalid",  &v129,  2);
    CFStringRef v101 = (std::string *)v100;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)",  "%s\n",  v100);
    goto LABEL_197;
  }

  if (a8 <= 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v102 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_ERROR,  "Export using paging. invalid pageSize should be greater than 0",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    LOWORD(v129.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Export using paging. invalid pageSize should be greater than 0",  &v129,  2);
    CFStringRef v101 = (std::string *)v103;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)",  "%s\n",  v103);
    goto LABEL_197;
  }

  int v23 = *(unsigned __int8 *)(a6 + 23);
  if ((v23 & 0x80u) != 0LL) {
    int v23 = *(void *)(a6 + 8);
  }
  if (!v23)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    __int128 v104 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "Export using paging. page select query is empty",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    LOWORD(v129.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Export using paging. page select query is empty",  &v129,  2);
    CFStringRef v101 = (std::string *)v107;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)",  "%s\n",  v107);
LABEL_197:
    if (v101 != buf) {
      free(v101);
    }
    return 0LL;
  }

  if (a8 >= a7) {
    uint64_t v24 = a7;
  }
  else {
    uint64_t v24 = a8;
  }
  v131 = -1LL;
  __val = -1.0;
  std::to_string(&v129, -1LL);
  std::operator+<char>(&v122, "INSERT OR REPLACE INTO ", a3);
  uint64_t v25 = std::string::append(&v122, " SELECT * FROM (");
  uint64_t v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  int v27 = *(char *)(a6 + 23);
  if (v27 >= 0) {
    int v28 = (const std::string::value_type *)a6;
  }
  else {
    int v28 = *(const std::string::value_type **)a6;
  }
  if (v27 >= 0) {
    unsigned int v29 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    unsigned int v29 = *(void *)(a6 + 8);
  }
  uint64_t v30 = std::string::append(&v123, v28, v29);
  uint64_t v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v32 = std::string::append(&v124, ") ORDER BY ");
  uint64_t v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  int v34 = a4[23];
  if (v34 >= 0) {
    uint64_t v35 = a4;
  }
  else {
    uint64_t v35 = *(const std::string::value_type **)a4;
  }
  if (v34 >= 0) {
    std::string::size_type v36 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    std::string::size_type v36 = *((void *)a4 + 1);
  }
  uint64_t v37 = std::string::append(&v125, v35, v36);
  uint64_t v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v39 = std::string::append(&v126, " DESC LIMIT ");
  uint64_t v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v121, v24);
  if ((v121.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v41 = &v121;
  }
  else {
    uint64_t v41 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  if ((v121.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v121.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v121.__r_.__value_.__l.__size_;
  }
  __int16 v43 = std::string::append(buf, (const std::string::value_type *)v41, size);
  uint64_t v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type cap = v43->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v44;
  v43->__r_.__value_.__l.__size_ = 0LL;
  v43->__r_.__value_.__l.__cap_ = 0LL;
  v43->__r_.__value_.__r.__words[0] = 0LL;
  std::operator+<char>(&v125, "SELECT MIN(", a4);
  uint32_t v45 = std::string::append(&v125, ") FROM ");
  uint64_t v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0LL;
  v45->__r_.__value_.__l.__cap_ = 0LL;
  v45->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v47 = *(char *)(a3 + 23);
  if (v47 >= 0) {
    uint64_t v48 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v48 = *(const std::string::value_type **)a3;
  }
  if (v47 >= 0) {
    uint64_t v49 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v49 = *(void *)(a3 + 8);
  }
  uint64_t v50 = std::string::append(buf, v48, v49);
  uint64_t v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0LL;
  v50->__r_.__value_.__l.__cap_ = 0LL;
  v50->__r_.__value_.__r.__words[0] = 0LL;
  std::string v52 = a7 / a8;
  uint64_t v53 = a7 % a8;
  v125.__r_.__value_.__s.__data_[0] = 0;
  v125.__r_.__value_.__l.__size_ = a1 + 72;
  v125.__r_.__value_.__l.__cap_ = a2 + 72;
  uint64_t v54 = sub_1003B5DF8(a1 + 72, a2 + 72);
  v125.__r_.__value_.__s.__data_[0] = v54;
  if (v54 && sub_100031840(a1, (char *)__p))
  {
    uint64_t v110 = sub_1003C10E4(a1 + 72);
    uint64_t v55 = 1LL;
    uint64_t v111 = v52 - (v53 < 1);
    if (v111 < 1 || v110 < 1) {
      goto LABEL_187;
    }
    __int128 v56 = 1;
    while (1)
    {
      if (v111 == v56 && v53 != 0) {
        uint64_t v24 = v53;
      }
      uint64_t v58 = *(void *)(a9 + 24);
      if (!v58) {
        sub_100008BDC();
      }
      if (a5)
      {
        uint64_t v59 = sub_100031DFC(a1, (char *)&v126, &__val);
        std::to_string(buf, __val);
        uint64_t v129 = buf[0];
        if ((v59 & 1) == 0) {
          goto LABEL_186;
        }
      }

      else
      {
        uint64_t v55 = sub_100031BC4(a1, (char *)&v126, &v131);
        std::to_string(buf, v131);
        uint64_t v129 = buf[0];
        if (!(_DWORD)v55) {
          goto LABEL_187;
        }
      }

      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
      *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
      strcpy(v114.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
      uint64_t v60 = *(char *)(a3 + 23);
      if (v60 >= 0) {
        uint64_t v61 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v61 = *(const std::string::value_type **)a3;
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v62 = *(void *)(a3 + 8);
      }
      uint64_t v63 = std::string::append(&v114, v61, v62);
      __int128 v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__l.__cap_ = v63->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0LL;
      v63->__r_.__value_.__l.__cap_ = 0LL;
      v63->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v65 = std::string::append(&v115, " SELECT * FROM (");
      uint64_t v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__l.__cap_ = v65->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0LL;
      v65->__r_.__value_.__l.__cap_ = 0LL;
      v65->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v67 = *(char *)(a6 + 23);
      if (v67 >= 0) {
        BOOL v68 = (const std::string::value_type *)a6;
      }
      else {
        BOOL v68 = *(const std::string::value_type **)a6;
      }
      if (v67 >= 0) {
        uint64_t v69 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        uint64_t v69 = *(void *)(a6 + 8);
      }
      __int128 v70 = std::string::append(&v116, v68, v69);
      char v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__l.__cap_ = v70->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0LL;
      v70->__r_.__value_.__l.__cap_ = 0LL;
      v70->__r_.__value_.__r.__words[0] = 0LL;
      std::string v72 = std::string::append(&v117, ") WHERE ");
      std::string v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__l.__cap_ = v72->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0LL;
      v72->__r_.__value_.__l.__cap_ = 0LL;
      v72->__r_.__value_.__r.__words[0] = 0LL;
      std::string v74 = a4[23];
      if (v74 >= 0) {
        __int16 v75 = a4;
      }
      else {
        __int16 v75 = *(const std::string::value_type **)a4;
      }
      if (v74 >= 0) {
        unint64_t v76 = *((unsigned __int8 *)a4 + 23);
      }
      else {
        unint64_t v76 = *((void *)a4 + 1);
      }
      std::string v77 = std::string::append(&v118, v75, v76);
      unsigned int v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__l.__cap_ = v77->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0LL;
      v77->__r_.__value_.__l.__cap_ = 0LL;
      v77->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v79 = std::string::append(&v119, "<");
      uint64_t v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__l.__cap_ = v79->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0LL;
      v79->__r_.__value_.__l.__cap_ = 0LL;
      v79->__r_.__value_.__r.__words[0] = 0LL;
      if ((v129.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v81 = &v129;
      }
      else {
        std::string v81 = (std::string *)v129.__r_.__value_.__r.__words[0];
      }
      if ((v129.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v82 = v129.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v82 = v129.__r_.__value_.__l.__size_;
      }
      std::string v83 = std::string::append(&v120, (const std::string::value_type *)v81, v82);
      uint64_t v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__l.__cap_ = v83->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0LL;
      v83->__r_.__value_.__l.__cap_ = 0LL;
      v83->__r_.__value_.__r.__words[0] = 0LL;
      std::string v85 = std::string::append(&v121, " ORDER BY ");
      uint64_t v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v122.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0LL;
      v85->__r_.__value_.__l.__cap_ = 0LL;
      v85->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v87 = a4[23];
      if (v87 >= 0) {
        uint64_t v88 = a4;
      }
      else {
        uint64_t v88 = *(const std::string::value_type **)a4;
      }
      if (v87 >= 0) {
        int v89 = *((unsigned __int8 *)a4 + 23);
      }
      else {
        int v89 = *((void *)a4 + 1);
      }
      char v90 = std::string::append(&v122, v88, v89);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0LL;
      v90->__r_.__value_.__l.__cap_ = 0LL;
      v90->__r_.__value_.__r.__words[0] = 0LL;
      v92 = std::string::append(&v123, " DESC LIMIT ");
      uint64_t v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__l.__cap_ = v92->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0LL;
      v92->__r_.__value_.__l.__cap_ = 0LL;
      v92->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v113, v24);
      if ((v113.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v94 = &v113;
      }
      else {
        uint64_t v94 = (std::string *)v113.__r_.__value_.__r.__words[0];
      }
      if ((v113.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v95 = v113.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v95 = v113.__r_.__value_.__l.__size_;
      }
      uint64_t v96 = std::string::append(&v124, (const std::string::value_type *)v94, v95);
      uint64_t v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__l.__cap_ = v96->__r_.__value_.__l.__cap_;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0LL;
      v96->__r_.__value_.__l.__cap_ = 0LL;
      v96->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v55 = sub_100031840(a1, (char *)buf);
      if ((_DWORD)v55) {
        uint64_t v110 = sub_1003C10E4(a1 + 72);
      }
      if (v56 < v111) {
        uint64_t v98 = v55;
      }
      else {
        uint64_t v98 = 0;
      }
      if (v98 == 1)
      {
        ++v56;
        if (v110 > 0) {
          continue;
        }
      }

      goto LABEL_187;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v106 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_INFO,  "Export using paging, operation cancelled",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v124.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Export using paging, operation cancelled",  &v124,  2);
      uint64_t v109 = (std::string *)v108;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, con st std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)",  "%s\n",  v108);
      if (v109 != buf) {
        free(v109);
      }
    }
  }

  sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)buf);
LABEL_19:
  BOOL v10 = 1LL;
LABEL_20:
  *(void *)__int128 buf = &v12;
  sub_10004AB74((void ***)buf);
  return v10;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(float *)(v5 + 44),  a3);
  if ((*(_DWORD *)(v5 + 56) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 48),  a3);
  }
  return result;
}

  uint64_t v9 = *(void *)(v5 + 32);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0818 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6LL, *(void *)(v5 + 40), a2);
  unint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A0978 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000737DC(v13, a2);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A0978 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100073C18(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5LL, *(void *)(v5 + 32), a2);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

      if (v8 == 4) {
        return 1LL;
      }
    }

    float v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_28:
    *(_DWORD *)(a1 + 32) |= 2u;
    size_t v13 = *(void **)(a1 + 8);
    if (!v13)
    {
      size_t v13 = operator new(0x28uLL);
      v13[1] = 0LL;
      v13[2] = 0LL;
      *size_t v13 = off_10181ACC0;
      *((_DWORD *)v13 + 6) = 0;
      v13[4] = 0LL;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v13;
    }

    uint8x8_t v14 = (char *)*((void *)this + 1);
    if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
    {
    }

    else
    {
      uint64_t v25 = *v14;
      *((void *)this + 1) = v14 + 1;
    }

    unint64_t v15 = *((_DWORD *)this + 14);
    double v16 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v15 + 1;
    if (v15 >= v16) {
      return 0LL;
    }
    int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
    unint64_t v19 = *((_DWORD *)this + 14);
    unint64_t v20 = __OFSUB__(v19, 1);
    BOOL v21 = v19 - 1;
    if (v21 < 0 == v20) {
      *((_DWORD *)this + 14) = v21;
    }
    BOOL v22 = (_BYTE *)*((void *)this + 1);
    if ((unint64_t)v22 < *((void *)this + 2) && *v22 == 26)
    {
      *((void *)this + 1) = v22 + 1;
LABEL_42:
      *(_DWORD *)(a1 + 32) |= 4u;
      int v23 = *(void **)(a1 + 16);
      if (v23 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v23 = operator new(0x18uLL);
        v23[1] = 0LL;
        v23[2] = 0LL;
        void *v23 = 0LL;
        *(void *)(a1 + 16) = v23;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v23);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  int v23 = (__int128 *)*a3;
  BOOL v22 = (__int128 *)a3[1];
  int v27 = 0LL;
  int v28 = __p;
  while (v23 != v22)
  {
    unsigned int v29 = *v23;
    sub_100036F40(&v28, &v29);
    v23 += 4;
  }

  sub_100027D90(*(void *)(a1 + 8), (uint64_t)__p, &v29);
  sub_1000AA004((void **)a4);
  *(_OWORD *)a4 = v29;
  *(void *)(a4 + 16) = v30;
  uint64_t v30 = 0LL;
  int v28 = (void **)&v29;
  unsigned int v29 = 0uLL;
  sub_10001A350(&v28);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  sub_1000165E8((uint64_t)&v54, (uint64_t)v21, v55);
  sub_1002F0B04(buf);
  int v28 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLearningRecordingLimit", 0x8000100u, kCFAllocatorNull);
  unsigned int v29 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v28, &v66);
  CFRelease(v28);
  uint64_t v30 = v66;
  uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v32 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      uint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  int v34 = 500LL;
  if (v29) {
    int v34 = v30;
  }
  uint64_t v35 = 0xEEEEEEEEEEEEEEEFLL * (v62 - v61);
  std::string::size_type v36 = v34 >= v35;
  uint64_t v37 = v34 - v35;
  if (v36) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0LL;
  }
  uint64_t v40 = (unint64_t *)v54;
  __int16 v39 = (unint64_t *)v55;
  uint64_t v41 = 0xEEEEEEEEEEEEEEEFLL * (v55 - v54);
  if (v41 > v38)
  {
    sub_1000165E8((uint64_t)&v54, (uint64_t)v54, &v55[-15 * v38]);
    uint64_t v40 = (unint64_t *)v54;
    __int16 v39 = (unint64_t *)v55;
    uint64_t v41 = 0xEEEEEEEEEEEEEEEFLL * (v55 - v54);
  }

  uint64_t v42 = 126 - 2 * __clz(v41);
  if (v39 == v40) {
    __int16 v43 = 0LL;
  }
  else {
    __int16 v43 = v42;
  }
  sub_1000AA6D4(v40, v39, v43, 1);
  *a8 = 0;
  a8[280] = 0;
  if (a4 == 4)
  {
    uint64_t v47 = *(void *)(a1 + 8);
    sub_10001A504((uint64_t)v67, a6);
    sub_10001741C( a5,  v47,  (uint64_t)v67,  v64,  &v61,  &v54,  (uint64_t)v65,  buf,  a2 + 24,  a7,  *(void *)a9,  *(void *)(a9 + 8));
    sub_1000A88B8((uint64_t)a8, (uint64_t)buf);
    sub_100019D34((uint64_t)buf);
    uint32_t v45 = v68;
    if (v68 == v67)
    {
      uint64_t v46 = 4LL;
      uint32_t v45 = v67;
      goto LABEL_48;
    }
  }

  else
  {
    if (a4 != 3)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CBC8);
      }
      uint64_t v48 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        std::string v72 = 2050;
        std::string v73 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:invalid generation algorithm, generation algorithm:%{public}lu}",  buf,  0x1Cu);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CBC8);
        }
      }

      uint64_t v49 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        std::string v72 = 2050;
        std::string v73 = a4;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "invalid generation algorithm",  "{msg%{public}.0s:invalid generation algorithm, generation algorithm:%{public}lu}",  buf,  0x1Cu);
      }

      goto LABEL_49;
    }

    uint64_t v44 = *(void *)(a1 + 8);
    sub_10001A504((uint64_t)v69, a6);
    sub_100014430( a5,  v44,  (uint64_t)v69,  v64,  &v61,  (uint64_t)&v54,  (uint64_t)v65,  buf,  a2 + 24,  a7,  *(void *)a9,  *(void *)(a9 + 8));
    sub_1000A88B8((uint64_t)a8, (uint64_t)buf);
    sub_100019D34((uint64_t)buf);
    uint32_t v45 = v70;
    if (v70 == v69)
    {
      uint64_t v46 = 4LL;
      uint32_t v45 = v69;
LABEL_48:
      (*(void (**)(void))(*(void *)v45 + 8 * v46))();
      goto LABEL_49;
    }
  }

  if (v45)
  {
    uint64_t v46 = 5LL;
    goto LABEL_48;
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A0AA8 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C7864(v13, a2);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 60);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_35;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A0AA8 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C5B0C(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 60);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_41;
  }

  if ((v3 & 4) != 0)
  {
    uint8x8_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      uint8x8_t v14 = *(void *)(qword_1019A0AB8 + 24);
    }
    unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001BFCEC(v14, a2);
    double v16 = (int)v15;
    else {
      int v17 = 1;
    }
    v4 += v16 + v17 + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 52);
    if ((v3 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }

  if ((v3 & 8) != 0)
  {
LABEL_27:
    uint64_t v18 = *(void *)(a1 + 32);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_1019A0AB8 + 32);
    }
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001BFCEC(v18, a2);
    BOOL v21 = (int)v19;
    else {
      BOOL v22 = 1;
    }
    v4 += v21 + v22 + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 52);
  }

  unint64_t v12 = v4 + 9;
  if ((v3 & 4) == 0) {
    unint64_t v12 = v4;
  }
  if ((v3 & 8) != 0) {
    uint8x8_t v5 = v12 + 9;
  }
  else {
    uint8x8_t v5 = v12;
  }
  if ((v3 & 0x10) != 0)
  {
    v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
        + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 168);
    if ((v3 & 0x20) == 0)
    {
LABEL_25:
      if ((v3 & 0x40) == 0) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }

  else if ((v3 & 0x20) == 0)
  {
    goto LABEL_25;
  }

  v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40),  a2)
      + 1;
  int8x8_t v3 = *(_DWORD *)(a1 + 168);
  if ((v3 & 0x40) != 0)
  {
LABEL_26:
    v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48),  a2)
        + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 168);
  }

  if ((v3 & 4) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v12 & 0x80000000) != 0)
    {
      size_t v13 = 10;
    }

    else if (v12 >= 0x80)
    {
      size_t v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
      int8x8_t v3 = *(_DWORD *)(a1 + 292);
    }

    else
    {
      size_t v13 = 1;
    }

    v4 += v13 + 1;
  }

  uint8x8_t v14 = v4 + 9;
  if ((v3 & 8) == 0) {
    uint8x8_t v14 = v4;
  }
  if ((v3 & 0x10) != 0) {
    uint8x8_t v5 = v14 + 9;
  }
  else {
    uint8x8_t v5 = v14;
  }
  if ((v3 & 0x20) != 0)
  {
    v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40),  a2)
        + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x40) == 0)
    {
LABEL_32:
      if ((v3 & 0x80) == 0) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 0x40) == 0)
  {
    goto LABEL_32;
  }

  v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48),  a2)
      + 1;
  int8x8_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x80) != 0)
  {
LABEL_33:
    v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 56),  a2)
        + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 292);
  }

  if ((v3 & 4) != 0) {
    v4 += 9;
  }
  if ((v3 & 8) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v12 & 0x80000000) != 0)
    {
      size_t v13 = 11;
    }

    else if (v12 >= 0x80)
    {
      size_t v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 228);
    }

    else
    {
      size_t v13 = 2;
    }

    v4 += v13;
  }

  uint8x8_t v14 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    uint8x8_t v14 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint8x8_t v5 = v14 + 9;
  }
  else {
    uint8x8_t v5 = v14;
  }
  if ((v3 & 0x40) != 0)
  {
    unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v15 & 0x80000000) != 0)
    {
      double v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      double v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 228);
    }

    else
    {
      double v16 = 2;
    }

    uint8x8_t v5 = (v16 + v5);
  }

  if ((v3 & 0x80) != 0)
  {
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v18 = 11;
    }

    else if (v17 >= 0x80)
    {
      uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 228);
    }

    else
    {
      uint64_t v18 = 2;
    }

    uint8x8_t v5 = (v18 + v5);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 89),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0AF0 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A0AF0 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CA044(v13, a2);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A0AF0 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CA898(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(double *)(a1 + 24) = result;
    unint64_t v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 40) |= 8u;
  *(_DWORD *)(a1 + 20) = v10;
  uint8x8_t v5 = *(_DWORD *)(a2 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    unint64_t v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    uint8x8_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_14;
    }

    goto LABEL_21;
  }

  if ((v3 & 4) != 0)
  {
    BOOL v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v10 & 0x80000000) != 0)
    {
      size_t v11 = 10;
    }

    else if (v10 >= 0x80)
    {
      size_t v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
      int8x8_t v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      size_t v11 = 1;
    }

    v4 += v11 + 1;
    if ((v3 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }

  if ((v3 & 8) != 0)
  {
LABEL_27:
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v12 & 0x80000000) != 0)
    {
      size_t v13 = 10;
    }

    else if (v12 >= 0x80)
    {
      size_t v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
      int8x8_t v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      size_t v13 = 1;
    }

    v4 += v13 + 1;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(float *)(v5 + 28),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 42),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 43),  (BOOL)a2,  a4);
  }
  return result;
}

    size_t v11 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v11;
    uint8x8_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

    uint64_t result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(double *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
    unint64_t v6 = *(_DWORD *)(a2 + 76);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        return result;
      }
      goto LABEL_20;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 40),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(void *)(v5 + 32);
  if (!v10) {
    BOOL v10 = *(void *)(qword_1019A0DE8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", self->_securityKey),  @"securityKey");
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  PBDataWriterWriteDoubleField(a3, 5LL, self->_generationTimeSecs);
  if ((*(_BYTE *)&self->_has & 8) != 0) {
LABEL_7:
  }
    PBDataWriterWriteInt32Field(a3, self->_expirationAgeSecs, 6LL);
LABEL_8:
  dEPRECATEDFingerprints = self->_dEPRECATEDFingerprints;
  if ((*(_BYTE *)&self->_has & 2) != 0) {
    PBDataWriterWriteUint64Field(a3, self->_marketId, 8LL);
  }
  fingerprints = self->_fingerprints;
}

  *((void *)a3 + 1) = *(void *)&self->_generationTimeSecs;
  *((_BYTE *)a3 + 68) |= 1u;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_7:
    *((_DWORD *)a3 + 10) = self->_expirationAgeSecs;
    *((_BYTE *)a3 + 68) |= 8u;
  }

  v13((uint64_t)v12, 0);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[9],  a2,  a4);
  if ((v5[12] & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[10],  a2,  a4);
  }
  return result;
}

  unint64_t v12 = *(_DWORD *)(a1 + 32);
  size_t v13 = (v12 + v3);
  if (v12 >= 1)
  {
    uint8x8_t v14 = 0LL;
    do
    {
      unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003E165C( *(void *)(*(void *)(a1 + 24) + 8 * v14),  a2);
      double v16 = (int)v15;
      else {
        int v17 = 1;
      }
      size_t v13 = (v16 + v13 + v17);
      ++v14;
    }

    while (v14 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  return v13;
}

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_latitude),  @"latitude");
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_8:
    if ((has & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PBDataWriterWriteDoubleField(a3, 7LL, self->_radius);
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_9:
    if ((has & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  *((void *)a3 + 3) = *(void *)&self->_radius;
  *((_WORD *)a3 + 36) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_8:
    if ((has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  v5[3] = *(id *)&self->_radius;
  *((_WORD *)v5 + 36) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_8:
    if ((has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  self->_latitude = *((double *)a3 + 1);
  *(_WORD *)&self->_has |= 1u;
  uint8x8_t v5 = *((_WORD *)a3 + 36);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  int v27 = 0;
  uint64_t v18 = *a2;
  if (!*a2) {
    goto LABEL_21;
  }
  if (v18 == 22)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 24LL))(*(void *)(a1 + 120), 12LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 40LL))(*(void *)(a1 + 120), 3LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 40LL))(*(void *)(a1 + 120), 2LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 40LL))(*(void *)(a1 + 120), 1LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 48LL))(*(void *)(a1 + 120), 3LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 48LL))(*(void *)(a1 + 120), 6LL);
    goto LABEL_29;
  }

  if (v18 == 3)
  {
LABEL_21:
    (*(void (**)(void, void))(**(void **)(a1 + 120) + 32LL))(*(void *)(a1 + 120), 0LL);
    if (!*a2)
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 56LL))(*(void *)(a1 + 120), 7LL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      unint64_t v19 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "@WifiEntry, register for odometer notification",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101839340);
        }
        uint64_t v25 = 0;
        LODWORD(v24) = 2;
        int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiEntry, register for odometer notification",  &v25,  v24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v23);
      }
    }

    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 40LL))(*(void *)(a1 + 120), 3LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 40LL))(*(void *)(a1 + 120), 1LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 48LL))(*(void *)(a1 + 120), 3LL);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 48LL))(*(void *)(a1 + 120), 6LL);
    (*(void (**)(void, const char *))(**(void **)(a1 + 120) + 152LL))( *(void *)(a1 + 120),  "CLWifiLocationProvider");
    *(_DWORD *)__int128 buf = *a2;
    sub_100446D5C(&v27, (int *)buf);
    sub_1002E13A0((uint64_t)v26, (uint64_t)&v27);
    sub_10043EA28(a1, (uint64_t)v26);
    sub_1002DDAD8((uint64_t)v26);
  }

        sub_10046E4C0((void *)(a1 + 272), (uint64_t)v17);
        size_t v13 = v17[1];
        *(_OWORD *)(a1 + 352) = v17[0];
        *(_OWORD *)(a1 + 36std::iostream::~basic_iostream(v2, v3 + 8) = v13;
        uint8x8_t v14 = v17[3];
        *(_OWORD *)(a1 + 384) = v17[2];
        *(_OWORD *)(a1 + 400) = v14;
        return;
      }

      size_t v11 = 64LL;
    }

    *(void *)(a1 + 304) = v11;
    goto LABEL_13;
  }

  if (v15)
  {
    BOOL v21 = *(void **)(a1 + 584);
    if (v21 != (void *)(a1 + 592))
    {
      do
      {
        BOOL v22 = v21[4];
        uint64_t v108 = 0LL;
        uint64_t v109 = 0LL;
        __int128 __p = 0LL;
        sub_1002E2234( &__p,  *(const void **)a3,  *(void *)(a3 + 8),  0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
        (*(void (**)(uint64_t, void **, BOOL))(*(void *)v22 + 24LL))(v22, &__p, a5 == 1);
        if (__p)
        {
          uint64_t v108 = __p;
          operator delete(__p);
        }

        int v23 = (void *)v21[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            int v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            uint64_t v24 = (void *)v21[2];
            uint64_t v25 = *v24 == (void)v21;
            BOOL v21 = v24;
          }

          while (!v25);
        }

        BOOL v21 = v24;
      }

      while (v24 != (void *)(a1 + 592));
    }
  }

  v99 = v15;
  BOOL v102 = a1;
  __int128 v104 = 0LL;
  unsigned int v105 = 0LL;
  uint64_t v106 = 0LL;
  int v27 = *(_DWORD **)a3;
  uint64_t v26 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 == v26)
  {
    int v28 = 0;
  }

  else
  {
    int v28 = 0;
    CFStringRef v101 = a5 == 1;
    unsigned int v29 = a1 + 416;
    uint64_t v30 = (void *)(a1 + 424);
    do
    {
      if (v30 == sub_1002FB09C(v29, (void *)v27 + 22))
      {
        if ((v27[40] - 1) >= 0xE)
        {
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_10183C3E0);
          }
          uint64_t v31 = (os_log_s *)qword_101934868;
          if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
          {
            sub_1007EC454(&v113);
            unsigned int v32 = &v113;
            if ((v113.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              unsigned int v32 = (std::string *)v113.__r_.__value_.__r.__words[0];
            }
            uint64_t v33 = v27[40];
            int v34 = *(unsigned __int8 *)(v102 + 120);
            *(_DWORD *)__int128 buf = 136315906;
            *(void *)uint64_t v117 = v32;
            *(_WORD *)&v117[8] = 1024;
            *(_DWORD *)&v117[10] = v33;
            *(_WORD *)&v117[14] = 1024;
            *(_DWORD *)&v117[16] = v101;
            *(_WORD *)&v117[20] = 1024;
            *(_DWORD *)&v117[22] = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "Extra 5GHz #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d",  buf,  0x1Eu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_10183C3E0);
            }
            std::string v72 = qword_101934868;
            sub_1007EC454(&v103);
            std::string v73 = &v103;
            if ((v103.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              std::string v73 = (std::string *)v103.__r_.__value_.__r.__words[0];
            }
            std::string v74 = v27[40];
            __int16 v75 = *(unsigned __int8 *)(v102 + 120);
            LODWORD(v113.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
            WORD2(v113.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v113.__r_.__value_.__r.__words[1] + 6) = v74;
            WORD1(v113.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v113.__r_.__value_.__r.__words[2]) = v101;
            uint64_t v114 = 1024;
            uint64_t v115 = v75;
            unint64_t v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v72,  2LL,  "Extra 5GHz #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d",  (const char *)&v113,  30,  v96,  v97);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester * , const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationR equester::RequestType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)",  "%s\n",  v76);
          }
        }
      }

      else
      {
        ++v28;
      }

      uint64_t v35 = v105;
      if (v105 >= v106)
      {
        uint64_t v46 = (char *)v104;
        uint64_t v47 = 0xD37A6F4DE9BD37A7LL * ((v105 - (_BYTE *)v104) >> 3);
        uint64_t v48 = v47 + 1;
        if (v47 + 1 > 0x1642C8590B21642LL) {
          sub_100007008();
        }
        if (0xA6F4DE9BD37A6F4ELL * ((v106 - (_BYTE *)v104) >> 3) > v48) {
          uint64_t v48 = 0xA6F4DE9BD37A6F4ELL * ((v106 - (_BYTE *)v104) >> 3);
        }
        if (0xD37A6F4DE9BD37A7LL * ((v106 - (_BYTE *)v104) >> 3) >= 0xB21642C8590B21LL) {
          uint64_t v49 = 0x1642C8590B21642LL;
        }
        else {
          uint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_1002DF6FC((uint64_t)&v106, v49);
          uint64_t v46 = (char *)v104;
          uint64_t v35 = v105;
        }

        else
        {
          uint64_t v50 = 0LL;
        }

        uint64_t v51 = &v50[184 * v47];
        std::string v52 = *(_OWORD *)v27;
        uint64_t v53 = *((_OWORD *)v27 + 1);
        uint64_t v54 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v51 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v51 + 3) = v54;
        *(_OWORD *)uint64_t v51 = v52;
        *((_OWORD *)v51 + 1) = v53;
        uint64_t v55 = *((_OWORD *)v27 + 4);
        __int128 v56 = *((_OWORD *)v27 + 5);
        uint64_t v57 = *((_OWORD *)v27 + 7);
        *((_OWORD *)v51 + 6) = *((_OWORD *)v27 + 6);
        *((_OWORD *)v51 + 7) = v57;
        *((_OWORD *)v51 + 4) = v55;
        *((_OWORD *)v51 + 5) = v56;
        uint64_t v58 = *((_OWORD *)v27 + 8);
        uint64_t v59 = *((_OWORD *)v27 + 9);
        uint64_t v60 = *((_OWORD *)v27 + 10);
        *((void *)v51 + 22) = *((void *)v27 + 22);
        *((_OWORD *)v51 + 9) = v59;
        *((_OWORD *)v51 + 10) = v60;
        *((_OWORD *)v51 + std::iostream::~basic_iostream(v2, v3 + 8) = v58;
        if (v35 == v46)
        {
          char v71 = &v50[184 * v47];
        }

        else
        {
          uint64_t v61 = &v50[184 * v47];
          do
          {
            uint64_t v62 = *(_OWORD *)(v35 - 184);
            uint64_t v63 = *(_OWORD *)(v35 - 168);
            __int128 v64 = *(_OWORD *)(v35 - 152);
            *(_OWORD *)(v61 - 136) = *(_OWORD *)(v35 - 136);
            *(_OWORD *)(v61 - 152) = v64;
            *(_OWORD *)(v61 - 16std::iostream::~basic_iostream(v2, v3 + 8) = v63;
            *(_OWORD *)(v61 - 184) = v62;
            uint64_t v65 = *(_OWORD *)(v35 - 120);
            uint64_t v66 = *(_OWORD *)(v35 - 104);
            uint64_t v67 = *(_OWORD *)(v35 - 88);
            *(_OWORD *)(v61 - 72) = *(_OWORD *)(v35 - 72);
            *(_OWORD *)(v61 - 8std::iostream::~basic_iostream(v2, v3 + 8) = v67;
            *(_OWORD *)(v61 - 104) = v66;
            *(_OWORD *)(v61 - 120) = v65;
            BOOL v68 = *(_OWORD *)(v35 - 56);
            uint64_t v69 = *(_OWORD *)(v35 - 40);
            __int128 v70 = *(_OWORD *)(v35 - 24);
            char v71 = v61 - 184;
            *((void *)v61 - 1) = *((void *)v35 - 1);
            *(_OWORD *)(v61 - 24) = v70;
            *(_OWORD *)(v61 - 40) = v69;
            *(_OWORD *)(v61 - 56) = v68;
            v35 -= 184;
            v61 -= 184;
          }

          while (v35 != v46);
        }

        uint32_t v45 = v51 + 184;
        __int128 v104 = v71;
        unsigned int v105 = v51 + 184;
        uint64_t v106 = &v50[184 * v49];
        if (v46) {
          operator delete(v46);
        }
      }

      else
      {
        std::string::size_type v36 = *(_OWORD *)v27;
        uint64_t v37 = *((_OWORD *)v27 + 1);
        uint64_t v38 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v105 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v35 + 3) = v38;
        *(_OWORD *)uint64_t v35 = v36;
        *((_OWORD *)v35 + 1) = v37;
        __int16 v39 = *((_OWORD *)v27 + 4);
        uint64_t v40 = *((_OWORD *)v27 + 5);
        uint64_t v41 = *((_OWORD *)v27 + 7);
        *((_OWORD *)v35 + 6) = *((_OWORD *)v27 + 6);
        *((_OWORD *)v35 + 7) = v41;
        *((_OWORD *)v35 + 4) = v39;
        *((_OWORD *)v35 + 5) = v40;
        uint64_t v42 = *((_OWORD *)v27 + 8);
        __int16 v43 = *((_OWORD *)v27 + 9);
        uint64_t v44 = *((_OWORD *)v27 + 10);
        *((void *)v35 + 22) = *((void *)v27 + 22);
        *((_OWORD *)v35 + 9) = v43;
        *((_OWORD *)v35 + 10) = v44;
        *((_OWORD *)v35 + std::iostream::~basic_iostream(v2, v3 + 8) = v42;
        uint32_t v45 = v35 + 184;
      }

      unsigned int v105 = v45;
      v27 += 46;
    }

    while (v27 != v26);
  }

  sub_1004BA878((uint64_t)&v104);
  sub_1004C301C(*v100, v100[1], &v104);
  if (v99 == 1)
  {
    if (v28) {
      sub_100F7ED84(*(void *)(v102 + 672), v28);
    }
    std::string v77 = *(void *)(v102 + 672);
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v79 = sub_100F7B4EC(v77, (uint64_t *)&v104, (int **)&v110, a7, Current_1);
    if (v79)
    {
      if (0xD37A6F4DE9BD37A7LL * ((v105 - (_BYTE *)v104) >> 3) == v79)
      {
        *(_DWORD *)(v102 + 388) -= 373475417 * ((*(void *)(a3 + 8) - *(void *)a3) >> 3);
        goto LABEL_81;
      }

      sub_10123B8AC();
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLNetworkLocationProvider.mm",  2298,  "onLocationRequesterWifiLocationSeriesComplete");
LABEL_124:
      __break(1u);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10183C380);
    }
    uint64_t v80 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "#Warning Location Services disabled, not storing location entries",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10183C380);
      }
      LOWORD(v113.__r_.__value_.__l.__data_) = 0;
      LODWORD(v95) = 2;
      v91 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Location Services disabled, not storing location entries",  &v113,  v95);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, cons t std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::Re questType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)",  "%s\n",  v91);
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_BYTE *)(a1 + 20) = v10;
  uint8x8_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(void *)(v5 + 48),  a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(void *)(v5 + 56),  a2,  a4);
  }
  return result;
}

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_20;
    }
LABEL_28:
    unint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
       + 1;
    if ((*(_DWORD *)(a1 + 48) & 0x10) == 0) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }

  size_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    size_t v13 = *(void *)(qword_1019A1100 + 24);
  }
  uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1005022DC(v13);
  unint64_t v15 = (int)v14;
  else {
    double v16 = 1;
  }
  unint64_t v4 = (v4 + v15 + v16 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_20:
  if ((v3 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_29:
  int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v18 = 11;
  }

  else if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
  }

  else
  {
    uint64_t v18 = 2;
  }

  unint64_t v4 = (v18 + v4);
LABEL_35:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

  BOOL v10 = *(_DWORD *)(a2 + 20);
  if (v10 >= 7) {
    sub_10123C338();
  }
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  uint8x8_t v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v5 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  unint64_t v12 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(void *)(a1 + 24) = v12;
  if ((*(_DWORD *)(a2 + 48) & 0x20) != 0)
  {
LABEL_10:
    unint64_t v6 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(void *)(a1 + 32) = v6;
  }

    size_t v11 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(void *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0) {
      return;
    }
LABEL_9:
    unint64_t v6 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(void *)(a1 + 40) = v6;
  }

  int v2 = (const void **)(a1 + 40);
  int8x8_t v3 = *(_BYTE *)(a1 + 63);
  if (v3 >= 0) {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    unint64_t v4 = *(void *)(a1 + 48);
  }
  size_t v13 = *(char *)(a2 + 63);
  if (v13 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 63);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 48);
  }
  if (v13 >= 0) {
    float v7 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    float v7 = *(unsigned __int8 **)(a2 + 40);
  }
  if (v4 != v6) {
    goto LABEL_35;
  }
  if ((*(_BYTE *)(a1 + 63) & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *(void *)(a1 + 48))) {
      goto LABEL_49;
    }
LABEL_35:
    if (v3 >= 0) {
      int v17 = v2;
    }
    else {
      int v17 = *v2;
    }
    if (v6 >= v4) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v6;
    }
    unint64_t v19 = memcmp(v17, v7, v18);
    unint64_t v20 = v4 >= v6;
    goto LABEL_42;
  }

  if (*(_BYTE *)(a1 + 63))
  {
    uint8x8_t v14 = v7;
    unint64_t v15 = (unsigned __int8 *)(a1 + 40);
    double v16 = *(unsigned __int8 *)(a1 + 63);
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v16) {
        goto LABEL_49;
      }
    }

    goto LABEL_35;
  }

    ++v4;
  }

  while (v4 != 4);
  return result;
}

      if (v9 <= v11)
      {
        uint64_t result = v7;
        a2 = v6;
      }
    }
  }

  return result;
}

      if (v9 <= v11)
      {
        uint64_t result = v7;
        a2 = v6;
      }
    }
  }

  return result;
}

  *a1 = v8;
  a1[1] = v5;
  *a5 = *((_DWORD *)v5 + 2);
  a5[1] = *((_DWORD *)v5 + 3);
  a5[2] = *((_DWORD *)v5 + 4);
  return 1LL;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_southEastLatitude),  @"southEastLatitude");
  if ((*(_BYTE *)&self->_has & 8) != 0) {
LABEL_5:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_southEastLongitude),  @"southEastLongitude");
LABEL_6:
  if (-[NSMutableArray count](self->_tiles, "count"))
  {
    uint8x8_t v5 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_tiles, "count"));
    unint64_t v12 = 0u;
    size_t v13 = 0u;
    uint8x8_t v14 = 0u;
    unint64_t v15 = 0u;
    tiles = self->_tiles;
    float v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v12,  v16,  16LL);
    if (v7)
    {
      float v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(tiles);
          }
          -[NSMutableArray addObject:]( v5,  "addObject:",  [*(id *)(*((void *)&v12 + 1) + 8 * (void)i) dictionaryRepresentation]);
        }

        float v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v12,  v16,  16LL);
      }

      while (v8);
    }

    [v3 setObject:v5 forKey:@"tiles"];
  }

  return v3;
}

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A11B8 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D5F84(v13);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A11B8 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DF874(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  PBDataWriterWriteDoubleField(a3, 4LL, self->_generationTimeSecs);
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_6:
  }
    PBDataWriterWriteInt32Field(a3, self->_expirationAgeSecs, 5LL);
LABEL_7:
  size_t v13 = 0u;
  uint8x8_t v14 = 0u;
  size_t v11 = 0u;
  unint64_t v12 = 0u;
  macs = self->_macs;
  float v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
  if (v7)
  {
    float v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(macs);
        }
        PBDataWriterWriteSubmessage(a3, *(void *)(*((void *)&v11 + 1) + 8LL * (void)i), 7LL);
      }

      float v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
    }

    while (v8);
  }

  *((void *)v5 + 1) = *(void *)&self->_generationTimeSecs;
  *((_BYTE *)v5 + 44) |= 1u;
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
LABEL_6:
    *((_DWORD *)v5 + 4) = self->_expirationAgeSecs;
    *((_BYTE *)v5 + 44) |= 2u;
  }

  self->_generationTimeSecs = *((double *)a3 + 1);
  *(_BYTE *)&self->_has |= 1u;
  if ((*((_BYTE *)a3 + 44) & 2) != 0)
  {
LABEL_6:
    self->_expirationAgeSecs = *((_DWORD *)a3 + 4);
    *(_BYTE *)&self->_has |= 2u;
  }

    size_t v11 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 124) |= 0x20u;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    uint8x8_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }

    unint64_t v12 = *(_BYTE *)(a2 + 22);
    *(_DWORD *)(a1 + 28) |= 0x10u;
    *(_BYTE *)(a1 + 22) = v12;
    if ((*(_DWORD *)(a2 + 28) & 0x20) == 0) {
      return;
    }
LABEL_10:
    unint64_t v6 = *(_BYTE *)(a2 + 23);
    *(_DWORD *)(a1 + 28) |= 0x20u;
    *(_BYTE *)(a1 + 23) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  unint64_t v6 = v5[13];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  size_t v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v11;
  uint8x8_t v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x20) != 0) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_20:
  size_t v13 = *(_DWORD *)(a2 + 32);
  if (v13 >= 4) {
    sub_1012414E4();
  }
  *(_DWORD *)(a1 + 44) |= 0x40u;
  *(_DWORD *)(a1 + 32) = v13;
  if ((*(_DWORD *)(a2 + 44) & 0x80) != 0)
  {
LABEL_12:
    unint64_t v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6LL, *(void *)(v5 + 40), a2);
  unint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

    unint64_t v12 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    if ((*(_DWORD *)(a2 + 60) & 0x40) == 0) {
      return;
    }
LABEL_11:
    unint64_t v6 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 60) |= 0x40u;
    *(_DWORD *)(a1 + 52) = v6;
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A1298 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100622360(v13, a2);
    double v16 = (int)v14;
    else {
      int v17 = 1;
    }
    unint64_t v4 = (v4 + v16 + v17 + 1);
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A12D8 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100626178(v13, a2);
    double v16 = (int)v14;
    else {
      int v17 = 1;
    }
    unint64_t v4 = (v4 + v16 + v17 + 1);
  }

      if (v8 == 4) {
        return 1LL;
      }
    }

    float v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    size_t v11 = *(void **)(a1 + 8);
    if (!v11)
    {
      size_t v11 = operator new(0x18uLL);
      v11[1] = 0LL;
      void v11[2] = 0LL;
      *size_t v11 = off_101845350;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    }

    unint64_t v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
    }

    else
    {
      int v23 = *v12;
      *((void *)this + 1) = v12 + 1;
    }

    size_t v13 = *((_DWORD *)this + 14);
    uint8x8_t v14 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v13 + 1;
    if (v13 >= v14) {
      return 0LL;
    }
    unint64_t v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
    int v17 = *((_DWORD *)this + 14);
    uint64_t v18 = __OFSUB__(v17, 1);
    unint64_t v19 = v17 - 1;
    if (v19 < 0 == v18) {
      *((_DWORD *)this + 14) = v19;
    }
    unint64_t v20 = (_BYTE *)*((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      BOOL v10 = v20 + 1;
      *((void *)this + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
        BOOL v21 = (unsigned __int8 *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        std::runtime_error *v5 = *v10;
        BOOL v21 = (unsigned __int8 *)(v10 + 1);
        *((void *)this + 1) = v21;
      }

      *(_DWORD *)(a1 + 24) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

    size_t v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    if ((*(_DWORD *)(a2 + 36) & 0x10) == 0) {
      return;
    }
LABEL_9:
    unint64_t v6 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 36) |= 0x10u;
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  }

    BOOL v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    uint8x8_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }

      if (v8 == 4) {
        return 1LL;
      }
    }

    float v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    size_t v11 = *(void **)(a1 + 8);
    if (!v11)
    {
      size_t v11 = operator new(0x18uLL);
      v11[1] = 0LL;
      void v11[2] = 0LL;
      *size_t v11 = off_101845350;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    }

    unint64_t v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
    }

    else
    {
      int v23 = *v12;
      *((void *)this + 1) = v12 + 1;
    }

    size_t v13 = *((_DWORD *)this + 14);
    uint8x8_t v14 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v13 + 1;
    if (v13 >= v14) {
      return 0LL;
    }
    unint64_t v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
    int v17 = *((_DWORD *)this + 14);
    uint64_t v18 = __OFSUB__(v17, 1);
    unint64_t v19 = v17 - 1;
    if (v19 < 0 == v18) {
      *((_DWORD *)this + 14) = v19;
    }
    unint64_t v20 = (_BYTE *)*((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      BOOL v10 = v20 + 1;
      *((void *)this + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
        BOOL v21 = (unsigned __int8 *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        std::runtime_error *v5 = *v10;
        BOOL v21 = (unsigned __int8 *)(v10 + 1);
        *((void *)this + 1) = v21;
      }

      *(_DWORD *)(a1 + 24) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A1328 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006294AC(v13, a2);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A1328 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100629DE0(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }

  size_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    size_t v13 = *(void *)(qword_1019A1358 + 24);
  }
  uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062D0F4(v13, a2);
  unint64_t v15 = (int)v14;
  else {
    double v16 = 1;
  }
  unint64_t v4 = (v4 + v15 + v16 + 1);
  if ((*(_DWORD *)(a1 + 44) & 8) != 0)
  {
LABEL_27:
    int v17 = *(void *)(a1 + 32);
    if (!v17) {
      int v17 = *(void *)(qword_1019A1358 + 32);
    }
    uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062D834(v17, a2);
    unint64_t v20 = (int)v18;
    else {
      BOOL v21 = 1;
    }
    unint64_t v4 = (v4 + v20 + v21 + 1);
  }

  uint64_t v9 = *(void *)(v5 + 32);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1368 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1368 + 16);
    }
    BOOL v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006201E8(v9, a2);
    size_t v11 = (int)v10;
    else {
      unint64_t v12 = 1;
    }
    unint64_t v4 = (v4 + v11 + v12 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  size_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    size_t v13 = *(void *)(qword_1019A1368 + 24);
  }
  uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100623F40(v13, a2);
  unint64_t v15 = (int)v14;
  else {
    double v16 = 1;
  }
  unint64_t v4 = (v4 + v15 + v16 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  BOOL v10 = a2[4];
  a1[12] |= 4u;
  a1[4] = v10;
  uint8x8_t v5 = a2[12];
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  if ((v5[12] & 0x100) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  }
  return result;
}

    BOOL v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v10;
    uint8x8_t v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x20) == 0)
    {
LABEL_12:
      if ((v5 & 0x40) == 0) {
        goto LABEL_13;
      }
      goto LABEL_24;
    }

  BOOL v10 = a2[4];
  a1[12] |= 4u;
  a1[4] = v10;
  uint8x8_t v5 = a2[12];
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  if ((v5[12] & 0x100) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  }
  return result;
}

    unint64_t v12 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 64) |= 8u;
    *(_DWORD *)(a1 + 20) = v12;
    if ((*(_DWORD *)(a2 + 64) & 0x40) == 0) {
      return;
    }
LABEL_13:
    float v8 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v8;
  }

    unint64_t v12 = *(_DWORD *)(a2 + 28);
    a1[10] |= 0x20u;
    a1[7] = v12;
    if ((*(_DWORD *)(a2 + 40) & 0x40) == 0) {
      return;
    }
LABEL_11:
    unint64_t v6 = *(_DWORD *)(a2 + 32);
    a1[10] |= 0x40u;
    a1[8] = v6;
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

  if ((v13 & 0x80) == 0) {
    goto LABEL_19;
  }
LABEL_29:
  BOOL v21 = *(_DWORD *)(a2 + 56);
  if (v21 >= 7) {
    sub_101241994();
  }
  a1[17] |= 0x80u;
  a1[14] = v21;
  if ((*(_DWORD *)(a2 + 68) & 0x100) != 0)
  {
LABEL_20:
    uint8x8_t v14 = *(_DWORD *)(a2 + 60);
    a1[17] |= 0x100u;
    a1[15] = v14;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  unint64_t v6 = v5[17];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v9 >= 0x80)
    {
      BOOL v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      int8x8_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      BOOL v10 = 1;
    }

    unint64_t v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  size_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    int8x8_t v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    unint64_t v12 = 1;
  }

  unint64_t v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  unint64_t v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 24),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_BYTE *)(a2 + 10);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(_BYTE *)(a1 + 10) = v10;
  uint8x8_t v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 15),  a2,  a4);
  if ((*(_DWORD *)(v5 + 24) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 16),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

      if (v8 == 4) {
        return 1LL;
      }
    }

    float v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_28:
    *(_DWORD *)(a1 + 28) |= 2u;
    unint64_t v15 = *(_WORD **)(a1 + 8);
    if (!v15)
    {
      unint64_t v15 = operator new(0x18uLL);
      *(void *)unint64_t v15 = off_10184A260;
      v15[4] = 0;
      *((_DWORD *)v15 + 3) = 0;
      *((_DWORD *)v15 + 4) = 0;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    }

    double v16 = (char *)*((void *)this + 1);
    if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
    {
    }

    else
    {
      int v28 = *v16;
      *((void *)this + 1) = v16 + 1;
    }

    int v17 = *((_DWORD *)this + 14);
    uint64_t v18 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v17 + 1;
    if (v17 >= v18) {
      return 0LL;
    }
    unint64_t v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
    BOOL v21 = *((_DWORD *)this + 14);
    BOOL v22 = __OFSUB__(v21, 1);
    int v23 = v21 - 1;
    if (v23 < 0 == v22) {
      *((_DWORD *)this + 14) = v23;
    }
    uint64_t v24 = (_BYTE *)*((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)v24 < v9 && *v24 == 24)
    {
      BOOL v10 = v24 + 1;
      *((void *)this + 1) = v10;
LABEL_42:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v25 = v26;
      }

      else
      {
        uint64_t v25 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      if (v25 <= 2)
      {
        *(_DWORD *)(a1 + 28) |= 4u;
        *(_DWORD *)(a1 + 20) = v25;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

  uint64_t result = [*(id *)(a1 + 136) logPressure:buf];
  if (*v4) {
    uint64_t result = objc_msgSend( *(id *)(a1 + 192),  "logData:",  +[CLFallLoggerManager encodePressure:](CLFallLoggerManager, "encodePressure:", buf));
  }
  if (v4[1]) {
    return [*(id *)(a1 + 144) logPressure:buf];
  }
  return result;
}

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184E648);
  }
  size_t v13 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138412290;
    unsigned int v29 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[CLHidManager], matched device for %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184E648);
    }
    uint64_t v26 = 138412290;
    int v27 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[CLHidManager], matched device for %@",  &v26,  12);
    unint64_t v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLHidManager getHidDeviceFromEnumeratedDevicesMatching:]", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  return v8;
}

  *(void *)a2 = v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  v4,  a4);
  unint64_t v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  v4,  a4);
  unint64_t v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

    int v28 = v64;
    if (a5 > ((char *)v64 - (_BYTE *)v63) >> 3)
    {
      uint64_t v30 = (uint64_t *)v66;
      unsigned int v29 = v67;
      goto LABEL_21;
    }

    uint64_t v30 = (uint64_t *)v66;
    unsigned int v29 = v67;
    if (a5 > ((char *)v61 - (_BYTE *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (_BYTE *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          uint64_t v31 = (uint64_t *)v63;
          if (v63 != v28) {
            break;
          }
LABEL_27:
          if (++v30 == v29)
          {
            uint64_t v30 = (uint64_t *)v66;
            goto LABEL_29;
          }
        }

        while ((sub_10084CBD8(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            unsigned int v29 = v67;
            int v28 = v31;
            goto LABEL_27;
          }
        }

        goto LABEL_95;
      }

    unsigned int v29 = v65;
    if (a5 > ((char *)v65 - (_BYTE *)v64) >> 3)
    {
      uint64_t v31 = (uint64_t *)v67;
      uint64_t v30 = v68;
      goto LABEL_21;
    }

    uint64_t v31 = (uint64_t *)v67;
    uint64_t v30 = v68;
    if (a5 > ((char *)v62 - (_BYTE *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (_BYTE *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          unsigned int v32 = (uint64_t *)v64;
          if (v64 != v29) {
            break;
          }
LABEL_27:
          if (++v31 == v30)
          {
            uint64_t v31 = (uint64_t *)v67;
            goto LABEL_29;
          }
        }

        while ((sub_10084CBD8(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            uint64_t v30 = v68;
            unsigned int v29 = v32;
            goto LABEL_27;
          }
        }

        goto LABEL_95;
      }

    int v28 = v64;
    if (a5 > ((char *)v64 - (_BYTE *)v63) >> 3)
    {
      uint64_t v30 = (double **)v66;
      unsigned int v29 = v67;
      goto LABEL_21;
    }

    uint64_t v30 = (double **)v66;
    unsigned int v29 = v67;
    if (a5 > ((char *)v61 - (_BYTE *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (_BYTE *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          uint64_t v31 = (double **)v63;
          if (v63 != v28) {
            break;
          }
LABEL_27:
          if (++v30 == v29)
          {
            uint64_t v30 = (double **)v66;
            goto LABEL_29;
          }
        }

        while ((sub_10085A3D8(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            unsigned int v29 = v67;
            int v28 = v31;
            goto LABEL_27;
          }
        }

        goto LABEL_95;
      }

    unsigned int v29 = v65;
    if (a5 > ((char *)v65 - (_BYTE *)v64) >> 3)
    {
      uint64_t v31 = (double **)v67;
      uint64_t v30 = v68;
      goto LABEL_21;
    }

    uint64_t v31 = (double **)v67;
    uint64_t v30 = v68;
    if (a5 > ((char *)v62 - (_BYTE *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (_BYTE *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          unsigned int v32 = (double **)v64;
          if (v64 != v29) {
            break;
          }
LABEL_27:
          if (++v31 == v30)
          {
            uint64_t v31 = (double **)v67;
            goto LABEL_29;
          }
        }

        while ((sub_10085A3D8(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            uint64_t v30 = v68;
            unsigned int v29 = v32;
            goto LABEL_27;
          }
        }

        goto LABEL_95;
      }

      size_t v11 = -1;
      return v6 < v11;
    }
  }

  else
  {
    if (v4 != -1)
    {
LABEL_9:
      uint64_t v9 = *(_DWORD *)(a2 + 40);
      goto LABEL_10;
    }

    uint8x8_t v14 = *(_DWORD *)(a3 + 40);
    if (v14 != 1)
    {
      if (v14 != 2) {
        goto LABEL_9;
      }
      return 0LL;
    }
  }

  return 1LL;
}

      size_t v11 = -1;
      return v6 < v11;
    }
  }

  else
  {
    if (v4 != -1)
    {
LABEL_9:
      uint64_t v9 = *(_DWORD *)(a2 + 120);
      goto LABEL_10;
    }

    uint8x8_t v14 = *(_DWORD *)(a3 + 120);
    if (v14 != 1)
    {
      if (v14 != 2) {
        goto LABEL_9;
      }
      return 0LL;
    }
  }

  return 1LL;
}

    BOOL v10 = (_BYTE *)(a1 + 6172);
    if (a2[1]) {
      size_t v11 = *a2 == *(_BYTE *)(a1 + 6448);
    }
    else {
      size_t v11 = 0;
    }
    unint64_t v12 = v11;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
    uint64_t v61 = 1065353216;
    size_t v13 = *(_DWORD *)(a1 + 6156);
    if (v13)
    {
      for (uint64_t i = *(void **)(*(void *)(a1 + 3160) + 16LL); i; uint64_t i = (void *)*i)
      {
        *(void *)__int128 buf = i[2];
        sub_1002DFB20((uint64_t)&v59, buf, buf);
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101861B00);
      }
      unint64_t v15 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = *((void *)&v60 + 1);
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "#alsquery number of aps in scan history, %lu",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101861B00);
        }
        uint64_t v65 = 134217984;
        *(void *)uint64_t v66 = *((void *)&v60 + 1);
        double v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "#alsquery number of aps in scan history, %lu",  &v65);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenCo mputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const",  "%s\n",  v16);
        if (v16 != buf) {
          free(v16);
        }
      }
    }

    else if (&v59 != (__int128 *)(a1 + 1224))
    {
      uint64_t v61 = *(_DWORD *)(a1 + 1256);
      sub_1002DEA74(&v59, *(void **)(a1 + 1240), 0LL);
    }

    HIDWORD(v49) = v7;
    if (sub_100B83D5C(a1 + 3208) && (sub_100B83D64(a1 + 3208) & 1) == 0)
    {
      *(void *)__int128 buf = sub_1005B46E8(a1 + 3208);
      sub_1002DFB20((uint64_t)&v59, buf, buf);
      unint64_t v19 = a3;
      unint64_t v20 = 1;
    }

    else
    {
      unint64_t v19 = a3;
      unint64_t v20 = 0;
    }

    uint64_t v50 = *(void *)(a1 + 1208);
    BOOL v21 = *(void *)(a1 + 1248);
    if (*(_BYTE *)(a1 + 3152))
    {
      BOOL v22 = 1;
      int v23 = "alwayson";
    }

    else if (v21)
    {
      int v23 = "emergency";
      if (sub_100495E64((_DWORD *)(a1 + 5968)))
      {
        BOOL v22 = 1;
      }

      else
      {
        if (!*v10) {
          int v23 = "nonstandard";
        }
        BOOL v22 = 1;
        if (!v13 && !*v10)
        {
          if (*(_BYTE *)(a1 + 6420) != 0 && *(_DWORD *)(a1 + 1564) != 0) {
            int v23 = "watch";
          }
          else {
            int v23 = "unknownassociated";
          }
          if (v20 & 1 | (*(_BYTE *)(a1 + 6420) != 0 && *(_DWORD *)(a1 + 1564) != 0))
          {
            BOOL v22 = *(_BYTE *)(a1 + 6420) == 0 || *(_DWORD *)(a1 + 1564) == 0;
          }

          else if (*(_BYTE *)(a1 + 1624))
          {
            BOOL v22 = 0;
            int v23 = "sufficient";
          }

          else if (sub_100495E54((_DWORD *)(a1 + 5968)) || sub_100495EA8((_DWORD *)(a1 + 5968)))
          {
            BOOL v22 = 0;
            int v23 = "cpi";
          }

          else if (*(double *)(a1 + 1428) < 0.0 || *(_DWORD *)(a1 + 1564) < 2u || v50 < v21)
          {
            if (v50) {
              __int16 v39 = v12;
            }
            else {
              __int16 v39 = 0;
            }
            if ((v39 & 1) != 0)
            {
              BOOL v22 = 0;
              int v23 = "defer5Ghz";
            }

            else
            {
              BOOL v22 = v50 < 4;
              if (v50 >= 4) {
                int v23 = "default";
              }
              else {
                int v23 = "unknownratio";
              }
            }
          }

          else
          {
            BOOL v22 = 0;
            int v23 = "knownratio";
          }
        }
      }
    }

    else
    {
      BOOL v22 = 0;
      int v23 = "allknown";
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101861B00);
    }
    uint64_t v24 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "#alsquery, do_query, %d, reason, %s",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101861B00);
      }
      uint64_t v65 = 67109378;
      *(_DWORD *)uint64_t v66 = v22;
      *(_WORD *)&v66[4] = 2080;
      *(void *)&v66[6] = v23;
      LODWORD(v49) = 18;
      uint64_t v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "#alsquery, do_query, %d, reason, %s",  &v65,  v49);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComp utingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const",  "%s\n",  v40);
      if (v40 != buf) {
        free(v40);
      }
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101861B00);
    }
    uint64_t v25 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(_DWORD *)(a1 + 6156);
      int v27 = *(void *)(a1 + 1288);
      *(_DWORD *)__int128 buf = 67241730;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v23;
      *(_WORD *)&_BYTE buf[18] = 2050;
      *(void *)&buf[20] = *((void *)&v60 + 1);
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v26;
      *(_WORD *)&buf[34] = 2050;
      unsigned int v78 = v50;
      *(_WORD *)uint64_t v79 = 2050;
      *(void *)&v79[2] = v21;
      uint64_t v80 = 2050;
      *(void *)&std::string v81 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, alsrequest, %{public}d, %{public}s, aps, %{public}lu, type, %{public}d, vni, %{public}ld, %{public}ld, %{public}ld",  buf,  0x40u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101861B00);
      }
      uint64_t v41 = *(_DWORD *)(a1 + 6156);
      uint64_t v42 = *(void *)(a1 + 1288);
      uint64_t v65 = 67241730;
      *(_DWORD *)uint64_t v66 = v22;
      *(_WORD *)&v66[4] = 2082;
      *(void *)&v66[6] = v23;
      uint64_t v67 = 2050;
      BOOL v68 = *((void *)&v60 + 1);
      uint64_t v69 = 1026;
      __int128 v70 = v41;
      char v71 = 2050;
      std::string v72 = v50;
      std::string v73 = 2050;
      std::string v74 = v21;
      __int16 v75 = 2050;
      unint64_t v76 = v42;
      LODWORD(v49) = 64;
      __int16 v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, alsrequest, %{public}d, %{public}s, aps, %{public}lu, type, %{public}d, vni, %{public}l d, %{public}ld, %{public}ld",  &v65,  v49);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComp utingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const",  "%s\n",  v43);
      if (v43 != buf) {
        free(v43);
      }
    }

    if (v22)
    {
      LOBYTE(v65) = 0;
      BYTE2(v74) = 0;
      int v28 = *(_DWORD *)(a1 + 6156);
      if (HIDWORD(v49))
      {
        sub_10074FD4C(&v58, 2);
      }

      else
      {
        sub_10074FD4C(buf, 1);
        uint64_t v58 = *(_DWORD *)buf;
      }

      sub_1002DFAAC((uint64_t)&v53, (uint64_t)&v59);
      uint64_t v30 = v53;
      uint64_t v31 = v54;
      uint64_t v53 = 0LL;
      uint64_t v54 = 0LL;
      *(void *)__int128 buf = v30;
      *(void *)&uint8_t buf[8] = v31;
      *(void *)&buf[16] = v55;
      *(void *)&buf[24] = v56;
      *(_DWORD *)&buf[32] = v57;
      if (v56)
      {
        unsigned int v32 = *(void *)(v55 + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v32 >= v31) {
            v32 %= v31;
          }
        }

        else
        {
          v32 &= v31 - 1;
        }

        *(void *)(v30 + 8 * v32) = &buf[16];
        uint64_t v55 = 0LL;
        __int128 v56 = 0LL;
      }

      BYTE4(v7std::iostream::~basic_iostream(v2, v3 + 8) = v28 == 0;
      BYTE5(v7std::iostream::~basic_iostream(v2, v3 + 8) = v28 != 1;
      *(_DWORD *)uint64_t v79 = v58;
      sub_10093CAD8((uint64_t)&v65, (uint64_t *)buf);
      sub_100019CEC((uint64_t)buf);
      sub_100019CEC((uint64_t)&v53);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101861B00);
      }
      uint64_t v33 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
      {
        int v34 = *((void *)&v60 + 1);
        sub_10074FD54(&v58, __p);
        uint64_t v35 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 134218754;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28 == 0;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28 != 1;
        *(_WORD *)&buf[24] = 2082;
        *(void *)&buf[26] = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d, config, %{public}s",  buf,  0x22u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101861B00);
        }
        uint64_t v44 = qword_101934868;
        uint32_t v45 = (void *)*((void *)&v60 + 1);
        sub_10074FD54(&v58, v51);
        if (v52 >= 0) {
          uint64_t v46 = v51;
        }
        else {
          uint64_t v46 = (void **)v51[0];
        }
        LODWORD(__p[0]) = 134218754;
        *(void **)((char *)__p + 4) = v45;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v28 == 0;
        WORD1(__p[2]) = 1024;
        HIDWORD(__p[2]) = v28 != 1;
        uint64_t v63 = 2082;
        __int128 v64 = v46;
        LODWORD(v49) = 34;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v44,  1LL,  "#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d, config, %{public}s",  __p,  v49);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenCo mputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const",  "%s\n",  v47);
        if (v47 != buf) {
          free(v47);
        }
      }

      sub_1010DDBC0(__p, v23);
      sub_1002E2300((uint64_t)buf, (uint64_t)&v65);
      std::string v81 = *(_OWORD *)__p;
      uint64_t v82 = __p[2];
      memset(__p, 0, sizeof(__p));
      sub_10093D140(v19, (uint64_t)buf);
      if (SHIBYTE(v82) < 0) {
        operator delete((void *)v81);
      }
      if (v79[4]) {
        sub_100019CEC((uint64_t)buf);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (!BYTE2(v74)) {
        goto LABEL_95;
      }
      unsigned int v29 = &v65;
    }

    else
    {
      buf[0] = 0;
      v79[4] = 0;
      sub_10093D0F8(v19, (uint64_t)buf);
      if (!v79[4])
      {
LABEL_95:
        std::string::size_type v36 = &v59;
        return sub_100019CEC((uint64_t)v36);
      }

      unsigned int v29 = (int *)buf;
    }

    sub_100019CEC((uint64_t)v29);
    goto LABEL_95;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101861B00);
  }
  uint64_t v37 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (int)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "blocking #alsquery, too soon, since_last_query_secs, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101861B00);
    }
    uint64_t v65 = 67109120;
    *(_DWORD *)uint64_t v66 = (int)v8;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "blocking #alsquery, too soon, since_last_query_secs, %d",  &v65);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComput ingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const",  "%s\n",  v18);
LABEL_156:
    if (v18 != buf) {
      free(v18);
    }
  }

  PBDataWriterWriteInt32Field(a3, self->_metSource, 3LL);
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  *((_DWORD *)a3 + 15) = self->_metSource;
  *((_WORD *)a3 + 38) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  self->_metSource = *((_DWORD *)a3 + 15);
  *(_WORD *)&self->_has |= 0x100u;
  int8x8_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x40) == 0)
  {
LABEL_5:
    if ((v3 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  *a2 = v7;
  a2[1] = v6;
  a2[2] = (__int128 *)a1[2];
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 14),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  if ((v3 & 4) != 0)
  {
    unint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  a2)
       + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_27;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  unint64_t v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
     + 1;
  int8x8_t v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }

  BOOL v10 = *(void *)(v5 + 32);
  if (!v10) {
    BOOL v10 = *(void *)(qword_1019A1B28 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x20) != 0)
  {
LABEL_21:
    size_t v11 = *(void *)(v5 + 40);
    if (!v11) {
      size_t v11 = *(void *)(qword_1019A1B28 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v11,  a2,  a4);
  }

  return result;
}

      if (v8 == 4) {
        return 1LL;
      }
    }

    float v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    size_t v11 = *(char **)(a1 + 8);
    if (!v11)
    {
      size_t v11 = (char *)operator new(0x28uLL);
      *(void *)size_t v11 = off_101869C08;
      *(_OWORD *)(v11 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    }

    unint64_t v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
    }

    else
    {
      int v23 = *v12;
      *((void *)this + 1) = v12 + 1;
    }

    size_t v13 = *((_DWORD *)this + 14);
    uint8x8_t v14 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v13 + 1;
    if (v13 >= v14) {
      return 0LL;
    }
    unint64_t v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
    int v17 = *((_DWORD *)this + 14);
    uint64_t v18 = __OFSUB__(v17, 1);
    unint64_t v19 = v17 - 1;
    if (v19 < 0 == v18) {
      *((_DWORD *)this + 14) = v19;
    }
    unint64_t v20 = (_BYTE *)*((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      BOOL v10 = v20 + 1;
      *((void *)this + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
        BOOL v21 = (unsigned __int8 *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        std::runtime_error *v5 = *v10;
        BOOL v21 = (unsigned __int8 *)(v10 + 1);
        *((void *)this + 1) = v21;
      }

      *(_DWORD *)(a1 + 24) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      size_t v13 = *(void *)(qword_1019A1B40 + 24);
    }
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A55F00(v13, a2);
    unint64_t v15 = (int)v14;
    else {
      double v16 = 1;
    }
    unint64_t v4 = (v4 + v15 + v16 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 52);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(void *)(a1 + 32);
  if (!v17) {
    int v17 = *(void *)(qword_1019A1B40 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A56980(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    unint64_t v20 = 1;
  }
  unint64_t v4 = (v4 + v19 + v20 + 1);
  if ((*(_DWORD *)(a1 + 52) & 0x10) != 0)
  {
LABEL_34:
    BOOL v21 = *(void *)(a1 + 40);
    if (!v21) {
      BOOL v21 = *(void *)(qword_1019A1B40 + 40);
    }
    BOOL v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A56F94(v21, a2);
    uint64_t v24 = (int)v22;
    else {
      uint64_t v25 = 1;
    }
    unint64_t v4 = (v4 + v24 + v25 + 1);
  }

  uint64_t result = *(float *)(a2 + 20);
  *(_DWORD *)(a1 + 52) |= 4u;
  *(float *)(a1 + 20) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v4,  *(float *)(v5 + 40),  a3);
  if ((*(_DWORD *)(v5 + 52) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v4,  *(float *)(v5 + 44),  a3);
  }
  return result;
}

  if ((v3 & 4) != 0)
  {
    size_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      unint64_t v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      unint64_t v12 = 2;
    }

    unint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_36;
  }

  size_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    size_t v13 = *(void *)(qword_1019A1B58 + 24);
  }
  uint8x8_t v14 = *(unsigned __int8 *)(v13 + 36);
  if (*(_BYTE *)(v13 + 36))
  {
    unint64_t v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0) {
      v15 += 9;
    }
    if ((v14 & 4) != 0) {
      uint8x8_t v14 = v15 + 9;
    }
    else {
      uint8x8_t v14 = v15;
    }
  }

  *(_DWORD *)(v13 + 32) = v14;
  unint64_t v4 = (v4 + v14 + 2);
LABEL_36:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  double v16 = -1.0;
LABEL_19:
  *float v8 = v6;
  std::__shared_weak_count *v9 = 1;
  uint64_t result = sub_100B35768();
  if ((_DWORD)result)
  {
    uint64_t v18 = *(double *)(a1 + 664);
    unint64_t v19 = v18 > Current || v18 <= 0.0;
    unint64_t v20 = Current - v18;
    if (v19) {
      BOOL v21 = -1.0;
    }
    else {
      BOOL v21 = v20;
    }
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    BOOL v22 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(void *)(a1 + 712);
      uint64_t v24 = *(void *)(a1 + 1192);
      *(_DWORD *)__int128 buf = 67242240;
      uint64_t v51 = a2;
      std::string v52 = 1026;
      uint64_t v53 = a3;
      uint64_t v54 = 2050;
      uint64_t v55 = v16;
      __int128 v56 = 2048;
      uint64_t v57 = v13;
      uint64_t v58 = 2050;
      uint64_t v59 = v21;
      uint64_t v60 = 2050;
      uint64_t v61 = v23;
      uint64_t v62 = 2050;
      uint64_t v63 = v24;
      __int128 v64 = 1026;
      uint64_t v65 = v11;
      uint64_t v66 = 2048;
      uint64_t v67 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "CLAS,analytics,GpsEnablements,enableGps,%{public}d,isTypeIntermittentGps,%{public}d,timeSinceGpsTypeLastEnabledS econds,%{public}.1lf,timeSinceGpsTypeLastDisabledSeconds,%.1lf,timeSinceCurrentWorkoutStartS,%{public}.1lf,curre ntEscalatedWorkoutType,%{public}ld,previousEscalatedWorkoutType,%{public}ld,isIntermittentTo1HzGpsTransition,%{p ublic}d,timeSinceIntermittentGpsEnabledAtTransitionS,%.1lf",  buf,  0x50u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v25 = *(void *)(a1 + 712);
      uint64_t v26 = *(void *)(a1 + 1192);
      v33[0] = 67242240;
      v33[1] = a2;
      int v34 = 1026;
      uint64_t v35 = a3;
      std::string::size_type v36 = 2050;
      uint64_t v37 = v16;
      uint64_t v38 = 2048;
      __int16 v39 = v13;
      uint64_t v40 = 2050;
      uint64_t v41 = v21;
      uint64_t v42 = 2050;
      __int16 v43 = v25;
      uint64_t v44 = 2050;
      uint32_t v45 = v26;
      uint64_t v46 = 1026;
      uint64_t v47 = v11;
      uint64_t v48 = 2048;
      uint64_t v49 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,analytics,GpsEnablements,enableGps,%{public}d,isTypeIntermittentGps,%{public}d,timeSinceGpsTy peLastEnabledSeconds,%{public}.1lf,timeSinceGpsTypeLastDisabledSeconds,%.1lf,timeSinceCurrentWorko utStartS,%{public}.1lf,currentEscalatedWorkoutType,%{public}ld,previousEscalatedWorkoutType,%{publ ic}ld,isIntermittentTo1HzGpsTransition,%{public}d,timeSinceIntermittentGpsEnabledAtTransitionS,%.1lf",  v33,  80);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::GpsEnablementAnalytics(BOOL, BOOL) const",  "%s\n",  v27);
    }

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100A77B94;
    v28[3] = &unk_10183BF48;
    v28[4] = a1;
    unsigned int v29 = a2;
    uint64_t v30 = v10;
    uint64_t v31 = a3;
    *(double *)&v28[5] = v16;
    *(double *)&v28[6] = v13;
    unsigned int v32 = v11;
    *(double *)&v28[7] = v21;
    *(double *)&v28[8] = v14;
    return (id)AnalyticsSendEventLazy(@"com.apple.CoreMotion.WorkoutPredictor.GpsEnablements", v28);
  }

  return result;
}
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 25),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint8x8_t v14 = v4 + 2;
  if ((v3 & 4) == 0) {
    uint8x8_t v14 = v4;
  }
  if ((v3 & 8) != 0) {
    v14 += 2;
  }
  if ((v3 & 0x10) != 0) {
    v14 += 2;
  }
  if ((v3 & 0x20) != 0) {
    uint8x8_t v5 = v14 + 2;
  }
  else {
    uint8x8_t v5 = v14;
  }
  if ((v3 & 0x40) != 0)
  {
    unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v15 & 0x80000000) != 0)
    {
      double v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      double v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      double v16 = 2;
    }

    v5 += v16;
  }

  if ((v3 & 0x80) != 0)
  {
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v18 = 11;
    }

    else if (v17 >= 0x80)
    {
      uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      uint64_t v18 = 2;
    }

    v5 += v18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 30),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 31),  (BOOL)a2,  a4);
  }
  return result;
}

        if (v8 == 4) {
          return 1LL;
        }
      }

      float v8 = TagFallback & 7;
      uint8x8_t v14 = (char *)*((void *)this + 1);
      BOOL v10 = *((void *)this + 2);
LABEL_26:
      if ((unint64_t)v14 >= v10 || *v14 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
        if (!(_DWORD)result) {
          return result;
        }
        double v16 = v27;
        int v17 = (_BYTE *)*((void *)this + 1);
        BOOL v10 = *((void *)this + 2);
      }

      else
      {
        double v16 = *v14;
        int v17 = v14 + 1;
        *((void *)this + 1) = v17;
      }

      *(_BYTE *)(a1 + 17) = v16 != 0;
      uint64_t v9 = *(_DWORD *)(a1 + 24) | 2;
      *(_DWORD *)(a1 + 24) = v9;
    }

    while ((unint64_t)v17 >= v10 || *v17 != 26);
    *((void *)this + 1) = v17 + 1;
LABEL_34:
    *(_DWORD *)(a1 + 24) = v9 | 4;
    uint64_t v18 = *(void **)(a1 + 8);
    if (!v18)
    {
      uint64_t v18 = operator new(0x40uLL);
      *uint64_t v18 = off_101871780;
      v18[1] = 0LL;
      v18[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v18[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v18 + 13) = 0;
      *((_DWORD *)v18 + 14) = 0;
      v18[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v18[5] = 0LL;
      *((_BYTE *)v18 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v18;
    }

    unint64_t v19 = (char *)*((void *)this + 1);
    if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
    {
    }

    else
    {
      unsigned int v29 = *v19;
      *((void *)this + 1) = v19 + 1;
    }

    unint64_t v20 = *((_DWORD *)this + 14);
    BOOL v21 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v20 + 1;
    if (v20 >= v21) {
      return 0LL;
    }
    BOOL v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
    uint64_t v24 = *((_DWORD *)this + 14);
    uint64_t v25 = __OFSUB__(v24, 1);
    uint64_t v26 = v24 - 1;
    if (v26 < 0 == v25) {
      *((_DWORD *)this + 14) = v26;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  if ((v3 & 4) != 0)
  {
    uint8x8_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      uint8x8_t v14 = *(void *)(qword_1019A1C80 + 24);
    }
    unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E02F0(v14, a2);
    double v16 = (int)v15;
    else {
      int v17 = 1;
    }
    v4 += v16 + v17 + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }

  if ((v3 & 8) != 0)
  {
LABEL_27:
    uint64_t v18 = *(void *)(a1 + 32);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_1019A1C80 + 32);
    }
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DD0A4(v18, a2);
    unint64_t v20 = (int)v19;
    else {
      BOOL v21 = 1;
    }
    v4 += v20 + v21 + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 112);
  }

    size_t v11 = *(_BYTE *)(a2 + 34);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_BYTE *)(a1 + 34) = v11;
    uint8x8_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

  if ((v3 & 4) != 0)
  {
    size_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      size_t v11 = *(void *)(qword_1019A1CE8 + 16);
    }
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B32528(v11, a2);
    size_t v13 = (int)v12;
    else {
      uint8x8_t v14 = 1;
    }
    unint64_t v4 = (v4 + v13 + v14 + 1);
    int8x8_t v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  unint64_t v15 = *(void *)(a1 + 24);
  if (!v15) {
    unint64_t v15 = *(void *)(qword_1019A1CE8 + 24);
  }
  double v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B32528(v15, a2);
  int v17 = (int)v16;
  else {
    uint64_t v18 = 1;
  }
  unint64_t v4 = (v4 + v17 + v18 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

    BOOL v10 = qword_10199A9B0;
    if (byte_10199A9BF >= 0) {
      BOOL v10 = byte_10199A9BF;
    }
    if (v5 != v10) {
      goto LABEL_32;
    }
    if (byte_10199A9BF >= 0) {
      size_t v11 = &qword_10199A9A8;
    }
    else {
      size_t v11 = (uint64_t *)qword_10199A9A8;
    }
    if ((v3 & 0x80) == 0)
    {
      if ((_DWORD)v3)
      {
        while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v11)
        {
          int v2 = (const void **)((char *)v2 + 1);
          size_t v11 = (uint64_t *)((char *)v11 + 1);
          if (!--v3) {
            goto LABEL_31;
          }
        }

        goto LABEL_32;
      }

      goto LABEL_31;
    }

    uint64_t result = memcmp(*v2, v11, v4);
    if (!(_DWORD)result) {
LABEL_31:
    }
      *(_BYTE *)(v1 + 57std::iostream::~basic_iostream(v2, v3 + 8) = 1;
LABEL_32:
    *(void *)(v1 + 584) = *(void *)(v1 + 64);
    *(_DWORD *)(v1 + 592) = *(_DWORD *)(v1 + 72);
  }

  return result;
}
}
}

  if ((v8 & 4) == 0)
  {
    if ((v8 & 0x20) == 0) {
      return;
    }
    goto LABEL_20;
  }

  self->_channel = *((_DWORD *)a3 + 4);
  *(_BYTE *)&self->_has |= 4u;
  if ((*((_BYTE *)a3 + 52) & 0x20) != 0)
  {
LABEL_20:
    self->_pnoffset = *((_DWORD *)a3 + 10);
    *(_BYTE *)&self->_has |= 0x20u;
  }

  self->_wifiGranularity = *((_DWORD *)a3 + 18);
  *(_BYTE *)&self->_has |= 0x10u;
  if ((*((_BYTE *)a3 + 80) & 2) != 0)
  {
LABEL_6:
    self->_radius = *((_DWORD *)a3 + 15);
    *(_BYTE *)&self->_has |= 2u;
  }

  if ((v3 & 4) != 0)
  {
    unint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16),  a2)
       + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_32;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1D48 + 24);
  }
  BOOL v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1005036F8(v9, a2);
  size_t v11 = (int)v10;
  else {
    unint64_t v12 = 1;
  }
  unint64_t v4 = (v4 + v11 + v12 + 1);
  int8x8_t v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_38;
  }

  if ((v3 & 4) != 0) {
    unint64_t v4 = (v4 + 2);
  }
  else {
    unint64_t v4 = v4;
  }
  if ((v3 & 8) != 0) {
    unint64_t v4 = v4
  }
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  a2)
       + 1;
LABEL_23:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 64),  v4,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

    if (v11 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 28),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if ((v9 & 0x80000000) != 0)
    {
      BOOL v10 = 10;
    }

    else if (v9 >= 0x80)
    {
      BOOL v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      int8x8_t v3 = a1[14];
    }

    else
    {
      BOOL v10 = 1;
    }

    LODWORD(v4) = v4 + v10 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_35;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }

  size_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if ((v11 & 0x80000000) != 0)
  {
    unint64_t v12 = 11;
  }

  else if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int8x8_t v3 = a1[14];
  }

  else
  {
    unint64_t v12 = 2;
  }

  LODWORD(v4) = v12 + v4;
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_41;
  }

  uint64_t v9 = *(void *)(v5 + 32);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1E40 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x40) != 0)
  {
LABEL_21:
    BOOL v10 = *(void *)(v5 + 40);
    if (!v10) {
      BOOL v10 = *(void *)(qword_1019A1E40 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v10,  a2,  a4);
  }

  return result;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

    unint64_t v15 = (void *)v10[1];
    if (v15)
    {
      do
      {
        double v16 = v15;
        unint64_t v15 = (void *)*v15;
      }

      while (v15);
    }

    else
    {
      do
      {
        double v16 = (void *)v10[2];
        int v17 = *v16 == (void)v10;
        BOOL v10 = v16;
      }

      while (!v17);
    }

    BOOL v10 = v16;
  }

  if (v12 != *(void *)v36)
  {
    operator delete(*(void **)buf);
    goto LABEL_18;
  }

  if (v12 == -1LL) {
LABEL_49:
  }
    sub_1001040F8();
  size_t v13 = *(void **)buf;
  uint8x8_t v14 = memcmp(*(const void **)buf, a3, v12);
  operator delete(v13);
  if (v14) {
    goto LABEL_18;
  }
LABEL_25:
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  unint64_t v19 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v11 + 16LL))(buf, v11);
    unint64_t v20 = SBYTE3(v38) >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)unsigned int v32 = 136315138;
    *(void *)&v32[4] = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "TILE: deleteTileFile, deleting, tileid, %s",  v32,  0xCu);
    if (SBYTE3(v38) < 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v26 = qword_101934838;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v11 + 16LL))(v32, v11);
    if (SBYTE3(v34) >= 0) {
      int v27 = v32;
    }
    else {
      int v27 = *(_BYTE **)v32;
    }
    uint64_t v30 = 136315138;
    uint64_t v31 = v27;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  2LL,  "TILE: deleteTileFile, deleting, tileid, %s",  (const char *)&v30);
    unsigned int v29 = v28;
    if (SBYTE3(v34) < 0) {
      operator delete(*(void **)v32);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)",  "%s\n",  v29);
  }

  sub_100C0FD9C(v11);
  sub_100602810(v9, (uint64_t)v10);
  return 1LL;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_slope),  @"slope");
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  PBDataWriterWriteDoubleField(a3, 6LL, self->_maxAbsSlope);
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_8:
    if ((has & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  *((void *)a3 + 5) = *(void *)&self->_maxAbsSlope;
  *((_WORD *)a3 + 44) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_8:
    if ((has & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  *((void *)result + 7) = *(void *)&self->_slope;
  *((_WORD *)result + 44) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  self->_maxAbsSlope = *((double *)a3 + 5);
  *(_WORD *)&self->_has |= 0x10u;
  int8x8_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 4) == 0)
  {
LABEL_8:
    if ((v3 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  if (v21)
  {
    BOOL v22 = v21;
    operator delete(v21);
  }

  return v8;
}

      -[NSMutableDictionary setObject:forKey:](v35, "setObject:forKey:", v34, v36);
      goto LABEL_19;
    }

    uint64_t v9 = 0LL;
    float v8 = 0LL;
    float v7 = 0LL;
    unint64_t v6 = 0LL;
    uint8x8_t v5 = 0LL;
    size_t v13 = 0.0;
    unint64_t v12 = 0.0;
    size_t v11 = 0.0;
    BOOL v10 = 0.0;
LABEL_54:
    *(float *)&int8x8_t v3 = v10;
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3),  @"maxPosError");
    *(float *)&uint64_t v67 = v13;
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v67),  @"uncAtMaxPosErrorUncMoreThan1");
    *(float *)&BOOL v68 = v11;
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v68),  @"maxPosErrorUncLessThan1");
    *(float *)&uint64_t v69 = v12;
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v69),  @"maxPosErrorUncMoreThan1");
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v5),  @"countPosErrorLessThan100UncMoreThan1");
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v6),  @"countPosError100to200UncMoreThan1");
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7),  @"countPosErrorMoreThan200UncMoreThan1");
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v8),  @"countPosErrorByUncMoreThan3");
    -[NSMutableDictionary setObject:forKey:]( v2,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v9),  @"posTypeAtMaxPosError");
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472LL;
    void v72[2] = sub_100D90838;
    v72[3] = &unk_1018486D8;
    v72[4] = v2;
    AnalyticsSendEventLazy(@"com.apple.locationd.position.HomeVisitErrMetrics", v72);
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_1018821A8);
    }
    uint64_t v65 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "#LCStats,homeVisit,metrics,no home visit in last 24 hours",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_1018821A8);
      }
      LOWORD(v73[0]) = 0;
      uint64_t v66 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#LCStats,homeVisit,metrics,no home visit in last 24 hours",  v73,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void HomeVisitInfo::submitMetricsHomeVisit()", "%s\n", v66);
    }
  }

        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101882448);
        }
        int v17 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          __int128 __p = (void *)68290050;
          BOOL v21 = 2082;
          BOOL v22 = "";
          int v23 = 2114;
          uint64_t v24 = a1;
          uint64_t v25 = 2114;
          uint64_t v26 = a2;
          int v27 = 2114;
          int v28 = a3;
          unsigned int v29 = 2114;
          uint64_t v30 = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The given client components did not resolve to a bundle, platformSpecificBundleId :%{public, location:escape_only}@, bundleId:%{public, location:escape_only}@, bundlePath:%{public, location:escape_only}@, pluginBundleId:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x3Au);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101882448);
          }
        }

        uint64_t v18 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          __int128 __p = (void *)68290050;
          BOOL v21 = 2082;
          BOOL v22 = "";
          int v23 = 2114;
          uint64_t v24 = a1;
          uint64_t v25 = 2114;
          uint64_t v26 = a2;
          int v27 = 2114;
          int v28 = a3;
          unsigned int v29 = 2114;
          uint64_t v30 = a4;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The given client components did not resolve to a bundle",  "{msg%{public}.0s:The given client components did not resolve to a bundle, platformSpecificBundleId :%{public, location:escape_only}@, bundleId:%{public, location:escape_only}@, bundlePath:%{public, location:escape_only}@, pluginBundleId:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x3Au);
        }

        return 0LL;
      }
    }

    else if (v9)
    {
      goto LABEL_5;
    }

    unint64_t v12 = (const __CFString *)-[__CFBundle path](sub_100D95B44(a4), "path");
  }

  else
  {
    if (a1)
    {
      size_t v13 = a1;
    }

    else
    {
      unint64_t v12 = a3;
      if (!a2) {
        goto LABEL_15;
      }
      size_t v13 = a2;
    }

    uint8x8_t v14 = sub_100D95A64(v13);
    if (!v14) {
      goto LABEL_18;
    }
    unint64_t v12 = (const __CFString *)[v14 path];
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 19),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  unint64_t v20 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    v24[0] = 67109376;
    v24[1] = v19;
    uint64_t v25 = 1024;
    uint64_t v26 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  v24,  14);
    int v23 = (char *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM >::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEnt ry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  return v19;
}

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  unint64_t v20 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    v24[0] = 67109376;
    v24[1] = v19;
    uint64_t v25 = 1024;
    uint64_t v26 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  v24,  14);
    int v23 = (char *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CD MA>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexE ntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  return v19;
}

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  unint64_t v20 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    v24[0] = 67109376;
    v24[1] = v19;
    uint64_t v25 = 1024;
    uint64_t v26 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  v24,  14);
    int v23 = (char *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE >::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEnt ry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  return v19;
}

  nullsub_10(&v15);
}

  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
  return result;
}

  if (SHIBYTE(v28) < 0)
  {
    if (!__dst[1]) {
      goto LABEL_28;
    }
    size_t v13 = (void **)__dst[0];
  }

  else
  {
    if (!HIBYTE(v28)) {
      goto LABEL_28;
    }
    size_t v13 = __dst;
  }

  uint8x8_t v14 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13);
  unint64_t v15 = @"tel_alt";
LABEL_27:
  -[NSMutableDictionary setValue:forKey:](v6, "setValue:forKey:", v14, v15);
LABEL_28:
  if ((a3 & 1) != 0) {
    goto LABEL_42;
  }
  sub_100775158(*(_DWORD *)(a1 + 144), buf);
  if (SBYTE3(v33) >= 0) {
    double v16 = buf;
  }
  else {
    double v16 = *(uint8_t **)buf;
  }
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16),  @"medium");
  if (sub_100EF2A08(a1))
  {
    sub_100EF2A6C(a1);
    if (v26 < 0)
    {
      if (!__p[1])
      {
LABEL_39:
        operator delete(__p[0]);
        goto LABEL_40;
      }

      int v17 = (void **)__p[0];
    }

    else
    {
      if (!v26) {
        goto LABEL_40;
      }
      int v17 = __p;
    }

    -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17),  @"trigger_type");
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }

      ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v3)[2])(v3, a2, a3);
      for (uint64_t i = (char *)__p; i != v22; i -= 8)
      {
        unint64_t v19 = *(os_log_s **)(a1 + 8);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v20 = *(void *)(*((void *)i - 1) + 40LL);
          *(_DWORD *)__int128 buf = 134218242;
          unsigned int v29 = a2;
          uint64_t v30 = 2080;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "event %llu, enter(%s)", buf, 0x16u);
        }

        BOOL v21 = *((void *)i - 1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 24LL))(v21, a2, a3);
      }

      *(void *)a1 = v8;
      if (i)
      {
        __int128 __p = i;
        operator delete(i);
      }

      if (v25)
      {
        uint64_t v26 = (char *)v25;
        operator delete(v25);
      }
    }
  }

    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    double v16 = (os_log_s *)qword_1019348F8;
    if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "#TransitMacMonitor: wifi notification, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348F0 != -1) {
        dispatch_once(&qword_1019348F0, &stru_10188CF68);
      }
      *(_DWORD *)uint64_t v49 = 67240192;
      *(_DWORD *)&v49[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348F8,  1LL,  "#TransitMacMonitor: wifi notification, %{public}d",  v49,  8);
      __int16 v39 = (uint8_t *)v38;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLTransitMacMonitor onWifiServiceNotification:data:]", "%s\n", v38);
      if (v39 != buf) {
        free(v39);
      }
    }

    if (v47 != v46)
    {
      if ([(id)a1 mostRecentLocation])
      {
        memset(buf, 0, sizeof(buf));
        *(void *)&v51[0] = 0LL;
        sub_1000A7198((void **)buf, 0x2E8BA2E8BA2E8BA3LL * (v47 - v46));
        int v17 = v46;
        if (v46 == v47)
        {
          BOOL v21 = *(void *)&buf[8];
        }

        else
        {
          do
          {
            *(void *)uint64_t v49 = *v17;
            uint64_t v18 = sub_1005B46E8((uint64_t)v49);
            unint64_t v19 = v18;
            unint64_t v20 = *(char **)&buf[8];
            if (*(void *)&buf[8] >= *(void *)&v51[0])
            {
              BOOL v22 = *(char **)buf;
              int v23 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
              uint64_t v24 = v23 + 1;
              uint64_t v25 = *(void *)&v51[0] - *(void *)buf;
              else {
                uint64_t v26 = v24;
              }
              if (v26)
              {
                int v27 = (char *)sub_1000071BC((uint64_t)v51, v26);
                BOOL v22 = *(char **)buf;
                unint64_t v20 = *(char **)&buf[8];
              }

              else
              {
                int v27 = 0LL;
              }

              int v28 = (uint64_t *)&v27[8 * v23];
              __int128 *v28 = v19;
              BOOL v21 = (uint64_t)(v28 + 1);
              while (v20 != v22)
              {
                unsigned int v29 = *((void *)v20 - 1);
                v20 -= 8;
                *--int v28 = v29;
              }

              *(void *)__int128 buf = v28;
              *(void *)&uint8_t buf[8] = v21;
              *(void *)&v51[0] = &v27[8 * v26];
              if (v22) {
                operator delete(v22);
              }
            }

            else
            {
              **(void **)&uint8_t buf[8] = v18;
              BOOL v21 = (uint64_t)(v20 + 8);
            }

            *(void *)&uint8_t buf[8] = v21;
            v17 += 11;
          }

          while (v17 != v47);
        }

        unsigned int v32 = *(void **)(a1 + 24);
        uint64_t v44 = 0LL;
        uint32_t v45 = 0LL;
        __int128 __p = 0LL;
        sub_100007590(&__p, *(const void **)buf, v21, (v21 - *(void *)buf) >> 3);
        uint64_t v33 = sub_1006AA110((uint64_t)&__p);
        objc_msgSend(objc_msgSend((id)a1, "mostRecentLocation"), "coordinate");
        uint64_t v35 = v34;
        objc_msgSend(objc_msgSend((id)a1, "mostRecentLocation"), "coordinate");
        uint64_t v37 = v36;
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3321888768LL;
        v41[2] = sub_100F28B1C;
        v41[3] = &unk_10188CF38;
        v41[4] = a1;
        memset(v42, 0, sizeof(v42));
        sub_1002DE3C8(v42, (uint64_t)v46, (uint64_t)v47, 0x2E8BA2E8BA2E8BA3LL * (v47 - v46));
        [v32 fetchMacAddressesAmong:v33 nearLatitude:v41 longitude:v35 withReply:v37];
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }

        *(void *)uint64_t v49 = v42;
        sub_100023498((void ***)v49);
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }

        goto LABEL_59;
      }

      if (qword_1019348F0 != -1) {
        dispatch_once(&qword_1019348F0, &stru_10188CF68);
      }
      uint64_t v30 = (os_log_s *)qword_1019348F8;
      if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 134283521;
        *(void *)&uint8_t buf[4] = 0x2E8BA2E8BA2E8BA3LL * (v47 - v46);
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "#TransitMacMonitor: received a wifi scan with %{private}lu access points, but we don't have a location to query tiles",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348F0 != -1) {
          dispatch_once(&qword_1019348F0, &stru_10188CF68);
        }
        *(_DWORD *)uint64_t v49 = 134283521;
        *(void *)&v49[4] = 0x2E8BA2E8BA2E8BA3LL * (v47 - v46);
        LODWORD(v40) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348F8,  1LL,  "#TransitMacMonitor: received a wifi scan with %{private}lu access points, but we don't have a location to query tiles",  v49,  v40);
        unint64_t v15 = (uint8_t *)v31;
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLTransitMacMonitor onWifiServiceNotification:data:]", "%s\n", v31);
LABEL_52:
        if (v15 != buf) {
          free(v15);
        }
        goto LABEL_59;
      }
    }

    goto LABEL_59;
  }

  if (!sub_100CD98F0(*(_DWORD *)(a4 + 140)))
  {
    if (&v46 != (void **)(a4 + 112)) {
      sub_1002DD704( (uint64_t *)&v46,  *(void *)(a4 + 112),  *(void *)(a4 + 120),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a4 + 120) - *(void *)(a4 + 112)) >> 3));
    }
    goto LABEL_18;
  }

  if (qword_1019348F0 != -1) {
    dispatch_once(&qword_1019348F0, &stru_10188CF68);
  }
  BOOL v10 = (os_log_s *)qword_1019348F8;
  if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_DEBUG))
  {
    size_t v11 = sub_10099EC00(*(_DWORD *)(a4 + 140));
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#TransitMacMonitor: ignoring NotificationScanCache source %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    unint64_t v12 = qword_1019348F8;
    size_t v13 = sub_10099EC00(*(_DWORD *)(a4 + 140));
    *(_DWORD *)uint64_t v49 = 136446210;
    *(void *)&v49[4] = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "#TransitMacMonitor: ignoring NotificationScanCache source %{public}s",  v49,  12);
    unint64_t v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLTransitMacMonitor onWifiServiceNotification:data:]", "%s\n", v14);
    goto LABEL_52;
  }

  *(double *)a3 = round(*(double *)a3);
}

  if ((v3 & 4) != 0)
  {
    size_t v13 = *(void *)(a1 + 24);
    uint8x8_t v14 = *(unsigned __int8 *)(v13 + 23);
    unint64_t v15 = v14;
    double v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      int v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      int v17 = v16;
    }
    if (v17 >= 0x80)
    {
      uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
      uint8x8_t v14 = *(unsigned __int8 *)(v13 + 23);
      double v16 = *(void *)(v13 + 8);
      unint64_t v15 = *(_BYTE *)(v13 + 23);
    }

    else
    {
      uint64_t v18 = 1;
    }

    if (v15 < 0) {
      uint8x8_t v14 = v16;
    }
    unint64_t v4 = (v4 + v18 + v14 + 1);
  }

    BOOL v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    unint64_t v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(float *)(v5 + 20),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(float *)(v5 + 36),  a3);
  if ((*(_DWORD *)(v5 + 48) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 40),  a3);
  }
  return result;
}

  unint64_t v12 = v4 + 5;
  if ((v3 & 4) == 0) {
    unint64_t v12 = v4;
  }
  if ((v3 & 8) != 0) {
    size_t v13 = v12 + 5;
  }
  else {
    size_t v13 = v12;
  }
  if ((v3 & 0x10) != 0)
  {
    uint8x8_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      unint64_t v15 = 11;
    }

    else if (v14 >= 0x80)
    {
      unint64_t v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      unint64_t v15 = 2;
    }

    v13 += v15;
  }

  if ((v3 & 0x20) != 0)
  {
    double v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      int v17 = 2;
    }

    v13 += v17;
  }

  uint64_t v18 = v13 + 5;
  if ((v3 & 0x40) == 0) {
    uint64_t v18 = v13;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v18 + 5;
  }
  else {
    uint64_t result = v18;
  }
LABEL_40:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

  unint64_t v12 = *(_DWORD *)(a1 + 24);
  size_t v13 = (v12 + v3);
  if (v12 >= 1)
  {
    uint8x8_t v14 = 0LL;
    do
    {
      unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FAA8AC( *(_DWORD **)(*(void *)(a1 + 16)
                                                                                          + 8 * v14),
                                                                               a2);
      double v16 = (int)v15;
      else {
        int v17 = 1;
      }
      size_t v13 = (v16 + v13 + v17);
      ++v14;
    }

    while (v14 < *(int *)(a1 + 24));
  }

  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  return v13;
}

  unint64_t v12 = *(_DWORD *)(a1 + 32);
  size_t v13 = v12 + v3;
  if (v12 >= 1)
  {
    uint8x8_t v14 = 0LL;
    do
    {
      unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FA8BF0( *(void *)(*(void *)(a1 + 24) + 8 * v14),  a2);
      double v16 = (int)v15;
      else {
        int v17 = 1;
      }
      v13 += v16 + v17;
      ++v14;
    }

    while (v14 < *(int *)(a1 + 32));
  }

  uint64_t v18 = *(_DWORD *)(a1 + 56);
  unint64_t v19 = (v18 + v13);
  if (v18 >= 1)
  {
    unint64_t v20 = 0LL;
    do
    {
      BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FA93AC( *(void *)(*(void *)(a1 + 48) + 8 * v20),  a2);
      BOOL v22 = (int)v21;
      else {
        int v23 = 1;
      }
      unint64_t v19 = (v22 + v19 + v23);
      ++v20;
    }

    while (v20 < *(int *)(a1 + 56));
  }

  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

  sub_101063420(a1, a2);
}

  PB::TextFormatter::format(this, "consideredSOS", *(_BYTE *)(a1 + 46));
  uint8x8_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  float v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 40) = v8;
  int v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "pressureTimestamp", *(void *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0xCu);
  unint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 24));
  uint8x8_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 64) = result;
  int v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "leftGroundContactTimePercentage", *(double *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 24));
  uint8x8_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_BYTE *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 44) = v3;
  *(_BYTE *)(result + 40) = v10;
  int v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_DWORD *)(a2 + 16);
    *(_WORD *)(result + 44) = v3 | 2;
    *(_DWORD *)(result + 16) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 28));
  uint8x8_t v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x20) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x40) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 41), 8u);
  if ((*(_WORD *)(v3 + 44) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 9u);
  }
  return result;
}

  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 28));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  float v8 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 56) = v8;
  int v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "pass", *(_BYTE *)(a1 + 64));
  uint8x8_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 56) = result;
  int v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_20:
    uint64_t result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 80) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }

  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 56));
  uint8x8_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  if ((*(_WORD *)(v3 + 80) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  }
  return result;
}

  PB::TextFormatter::format(this, "epochCounter", *(void *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 24) = v10;
  int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(void *)(a2 + 16);
    *(_WORD *)(result + 60) = v3 | 2;
    *(void *)(result + 16) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "stepCount", *(float *)(a1 + 52));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 8) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xC9u);
  if ((*(_WORD *)(v3 + 60) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCAu);
  }
  return result;
}

  PB::TextFormatter::format(this, "autocorrelationTimeVariationThreshold", *(_DWORD *)(a1 + 44));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0xC9u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  int v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "validZ", *(_BYTE *)(a1 + 50));
  uint8x8_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
  size_t v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_14:
    if ((v13 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  }

  uint64_t v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  int v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 8));
  uint8x8_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "height", *(float *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  float v8 = *(_BYTE *)(a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 47) = v8;
  int v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "instTemperature", *(float *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 45), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  int v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 8) != 0) {
    goto LABEL_19;
  }
LABEL_13:
  if ((v17 & 0x10) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 136));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 5u);
  unint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 7u);
    if ((*(_BYTE *)(v3 + 64) & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 36) = v10;
  int v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3 | 8;
    *(_DWORD *)(result + 24) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 40));
  uint8x8_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 1) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 8u);
  if ((*(_WORD *)(v3 + 48) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 9u);
  }
  return result;
}

  float v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v8;
  int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "isWorkoutElevationFusion", *(_BYTE *)(a1 + 56));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  unint64_t v12 = *(_BYTE *)(a2 + 93);
  *(_WORD *)(a1 + 96) |= 0x100u;
  *(_BYTE *)(a1 + 93) = v12;
  unint64_t v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 76));
  size_t v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    if ((v11 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  float v8 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 52) = v8;
  int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "percentOK", *(double *)(a1 + 16));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 53), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 72) = result;
  int v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *(double *)(a1 + 48));
  uint8x8_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  float v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 40) = v8;
  int v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "incrementalSteps", *(_DWORD *)(a1 + 64));
  uint8x8_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 69), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "horizontalDisplacement", *(double *)(a1 + 40));
  uint8x8_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "kvalue", *(double *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 24) = result;
  int v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "model", *(_DWORD *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 36));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "latestInertialTimestampMeta", *(double *)(a1 + 48));
  uint8x8_t v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 56) = v10;
  int v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(result + 72) = v3 | 0x80;
    *(_DWORD *)(result + 64) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 48));
  uint8x8_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 68));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 72) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 9u);
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "closeCoveredObstructed", *(float *)(a1 + 24));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v9;
  int v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "intervalSleepDetectedToGazeDetected", *(float *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  uint8x8_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_BYTE *)(a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v10;
  int v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_BYTE *)(a2 + 8);
    *(_WORD *)(result + 20) = v3 | 1;
    *(_BYTE *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "isStepTypePedestrian", *(_BYTE *)(a1 + 14));
  uint8x8_t v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "isVehicularRoutingActive", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 10), 8u);
  if ((*(_WORD *)(v3 + 20) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 8), 9u);
  }
  return result;
}

  BOOL v10 = *(_BYTE *)(a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 33) = v10;
  int v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 36) = v3 | 4;
    *(_DWORD *)(result + 20) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "workoutStart", *(_BYTE *)(a1 + 34));
  uint8x8_t v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x100) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x10) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x15u);
  if ((*(_WORD *)(v3 + 36) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x16u);
  }
  return result;
}

  PB::TextFormatter::format(this, "departureDate", *(double *)(a1 + 24));
  uint8x8_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  unint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  float v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 52) = v8;
  int v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 52));
  uint8x8_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint8x8_t v14 = *(void *)(a2 + 16);
  v7 |= 2u;
  *(_BYTE *)(a1 + 80) = v7;
  *(void *)(a1 + 16) = v14;
  unint64_t v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    double v16 = *(void *)(a2 + 48);
    v7 |= 0x20u;
    *(_BYTE *)(a1 + 80) = v7;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v16;
    if ((*(_BYTE *)(a2 + 80) & 0x10) == 0) {
      return a1;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  }
  return result;
}

  uint64_t v9 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 40) = v9;
  int v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "interpolation", *(_DWORD *)(a1 + 56));
  uint8x8_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  uint8x8_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  return a1;
}

  BOOL v10 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 32) = v10;
  int v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_BYTE *)(a2 + 72);
    *(_WORD *)(result + 76) = v3 | 0x100;
    *(_BYTE *)(result + 72) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  uint8x8_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x80) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 72), 9u);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  int v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "pathFlags", *(_DWORD *)(a1 + 80));
  uint8x8_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 40) = result;
  int v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  uint8x8_t v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 6u);
  unint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  uint8x8_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  unint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  BOOL v10 = *(_BYTE *)(a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 5std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_20:
    unint64_t v12 = *(_BYTE *)(a2 + 57);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_BYTE *)(result + 57) = v12;
    return result;
  }

  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  uint8x8_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 0x20) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 8u);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 57), 9u);
  }
  return result;
}

  uint64_t v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 36) = v9;
  int v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "pocketFlag", *(_BYTE *)(a1 + 44));
  uint8x8_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
  unint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  uint8x8_t v5 = *(_BYTE *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(a1 + 44) = v5;
  int v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_20;
  }

  PB::TextFormatter::format(this, "lpfAccelMagDiff", *(float *)(a1 + 36));
  uint8x8_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v5 & 1) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 48) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  unint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

    float v7 = *(_DWORD *)(a2 + 56);
    if (v7 > 5 || v7 == 2) {
      sub_1011B425C();
    }
    *(_DWORD *)(a1 + 64) |= 0x10u;
    *(_DWORD *)(a1 + 56) = v7;
    unint64_t v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(double *)(a1 + 40) = result;
    unint64_t v6 = *(_DWORD *)(a2 + 64);
LABEL_11:
    if ((v6 & 0x40) != 0)
    {
      uint64_t result = *(double *)(a2 + 48);
      *(_DWORD *)(a1 + 64) |= 0x40u;
      *(double *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
    }
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 76) & 0x20) != 0) {
LABEL_7:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
LABEL_8:
  if (*(int *)(v5 + 56) >= 1)
  {
    float v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(*(void *)(v5 + 48) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 56));
  }

  return result;
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

void sub_10001975C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100019838(a1, prime);
  }

void sub_100019838(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vstd::iostream::~basic_iostream(v2, v3 + 8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }

        else
        {
          v12 &= a2 - 1;
        }

        if (v12 == v8)
        {
          uint64_t v7 = i;
        }

        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
              if (!v13) {
                break;
              }
            }

            while (i[2] == v13[2] && i[3] == v13[3]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }

  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

void *sub_1000199AC(void *a1, uint64_t a2)
{
  return sub_1000194A4(a1, v4);
}

void sub_1000199E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_100019A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t result = operator new(0x38uLL);
  unint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  *(void *)a3 = result;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 1;
  *(void *)uint64_t result = 0LL;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  result[1] = *(_OWORD *)a2;
  result[2] = v9;
  *((void *)result + 6) = *(void *)(a2 + 32);
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)result + v8++ + 16);
  while (v8 != 16);
  *((void *)result + 1) = v7;
  return result;
}

ssize_t sub_100019A90(ssize_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (int *)result;
    unint64_t v6 = 0LL;
    do
    {
      uint64_t result = read(*v5, (void *)(a2 + v6), a3 - v6);
      if (result < 0)
      {
        uint64_t result = (ssize_t)__error();
        if (*(_DWORD *)result != 4)
        {
          uint64_t v7 = *(int *)result;
          sub_1010DDBC0(&v10, "read");
          std::runtime_error::runtime_error(&v11, &v10);
          v11.__vftable = (std::runtime_error_vtbl *)&off_101818DD8;
          uint64_t v12 = v7;
          v8.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Interna"
                               "l.sdk/usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
          v8.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          uint64_t v9 = 98LL;
          sub_100018F10(&v11, &v8);
        }
      }

      else
      {
        v6 += result;
      }
    }

    while (v6 < a3);
  }

  return result;
}

void sub_100019B64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100019B90(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100019BC8(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      int8x8_t v3 = (void *)*v2;
      int8x8_t v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }

      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

void sub_100019C0C(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10000AE14(v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100019C7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    int v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v2;
      operator delete(v2);
    }

    if (*(_BYTE *)(a1 + 72))
    {
      int8x8_t v3 = *(void **)(a1 + 48);
      *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      if (v3) {
        operator delete[](v3);
      }
    }

    uint64_t v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      operator delete(v4);
    }

    uint64_t v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
      operator delete(v5);
    }
  }

  return a1;
}

uint64_t sub_100019CEC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int8x8_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100019D34(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
  {
    sub_10006F50C(a1 + 32);
  }

  return a1;
}

uint64_t sub_100019D7C(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0) {
    return close(result);
  }
  return result;
}

uint64_t sub_100019D9C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_10001A044(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_100019DF8(_Unwind_Exception *a1)
{
}

void sub_100019E10(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100019EEC(a1, prime);
  }

void sub_100019EEC(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vstd::iostream::~basic_iostream(v2, v3 + 8) = a1 + 16;
      std::runtime_error v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *std::runtime_error v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            std::runtime_error v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          std::runtime_error v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    std::string v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

void *sub_10001A044(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }

    std::string v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      std::runtime_error v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v3) {
              break;
            }
          }

          std::runtime_error v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  std::runtime_error v11 = operator new(0x38uLL);
  *std::runtime_error v11 = 0LL;
  v11[1] = v6;
  __int128 v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  v11[6] = *(void *)(a3 + 32);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }
  }

  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *std::runtime_error v11 = *v22;
LABEL_44:
    void *v22 = v11;
    goto LABEL_45;
  }

  *std::runtime_error v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }

    else
    {
      v23 &= v8 - 1;
    }

    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }

LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return v12;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return j;
}

  uint64_t v24 = *(void *)(a1 + 48);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A0818 + 48);
  }
  uint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100064BBC(v24, a2);
  uint64_t v26 = (int)v25;
  else {
    int v27 = 1;
  }
  unint64_t v5 = (v5 + v26 + v27 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_51:
    int v28 = *(void *)(a1 + 56);
    if (!v28) {
      int v28 = *(void *)(qword_1019A0818 + 56);
    }
    unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000663E0(v28, a2);
    uint64_t v31 = (int)v29;
    else {
      unsigned int v32 = 1;
    }
    unint64_t v5 = (v5 + v31 + v32 + 1);
  }

  BOOL v17 = *(void *)(a1 + 120);
  if (!v17) {
    BOOL v17 = *(void *)(qword_1019A0880 + 120);
  }
  unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006EB5C(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    size_t v20 = 1;
  }
  v5 += v19 + v20 + 1;
  unint64_t v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_32;
    }
LABEL_57:
    unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v23 & 0x80000000) != 0)
    {
      uint64_t v24 = 10;
    }

    else if (v23 >= 0x80)
    {
      uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      unint64_t v3 = *(_DWORD *)(a1 + 192);
    }

    else
    {
      uint64_t v24 = 1;
    }

    v5 += v24 + 1;
    if ((v3 & 0x4000) == 0)
    {
LABEL_33:
      if ((v3 & 0x8000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_67;
    }

    goto LABEL_63;
  }

  uint64_t v24 = *(void *)(a1 + 48);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A0980 + 48);
  }
  uint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100074944(v24, a2);
  uint64_t v26 = (int)v25;
  else {
    int v27 = 1;
  }
  v5 += v26 + v27 + 1;
  unint64_t v3 = *(_DWORD *)(a1 + 128);
  if ((v3 & 0x80) != 0)
  {
LABEL_51:
    int v28 = *(void *)(a1 + 56);
    if (!v28) {
      int v28 = *(void *)(qword_1019A0980 + 56);
    }
    unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100075DEC(v28, a2);
    uint64_t v30 = (int)v29;
    else {
      uint64_t v31 = 1;
    }
    v5 += v30 + v31 + 1;
    unint64_t v3 = *(_DWORD *)(a1 + 128);
  }

  ++*(void *)(a1 + 24);
  return v13;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  if (v29 && v28 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

  ++*(void *)(a1 + 24);
  return v13;
}

  ++*(void *)(a1 + 24);
  return j;
}

  ++*(void *)(a1 + 24);
  return v12;
}

  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 160) |= 0x800u;
  *(double *)(a1 + 80) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 24),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  (int)a2,  *(double *)(v5 + 72),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 124),  (int)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) |= 0x800u;
  *(_DWORD *)(a1 + 52) = v21;
  if ((*(_DWORD *)(a2 + 60) & 0x1000) != 0)
  {
LABEL_19:
    uint64_t v7 = *(_BYTE *)(a2 + 49);
    *(_DWORD *)(a1 + 60) |= 0x1000u;
    *(_BYTE *)(a1 + 49) = v7;
  }

  unint64_t v19 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 148) |= 0x400u;
  *(void *)(a1 + 80) = v19;
  unint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(unsigned __int8 *)(v5 + 96),  (BOOL)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }

  return v5;
}

        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          uint64_t v25 = *a1;
          do
          {
            uint64_t v26 = *v21++;
            uint64_t result = v26;
          }

          while (v25 >= v26);
          int v27 = v21 - 1;
          do
          {
            int v28 = *--v9;
            unsigned int v29 = v28;
          }

          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          __int128 *v27 = v29;
          std::__shared_weak_count *v9 = result;
        }

        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }

      else
      {
        std::runtime_error v11 = v4 - 1;
LABEL_13:
        unint64_t v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          float v16 = a1 + 1;
        }

        else
        {
          size_t v13 = a1 + 1;
          while (1)
          {
            __int128 v14 = *v8;
            do
            {
              float v15 = *v13++;
              uint64_t result = v15;
            }

            while (v15 < v14);
            float v16 = v13 - 1;
            do
            {
              BOOL v17 = *--v11;
              unint64_t v18 = v17;
            }

            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            *float v16 = v18;
            *std::runtime_error v11 = result;
            ++v10;
            if (v16 == v8) {
              unint64_t v8 = v11;
            }
          }
        }

        if (v16 != v8)
        {
          uint64_t result = *v8;
          unint64_t v19 = *v16;
          if (*v8 < *v16)
          {
            *float v16 = result;
            *unint64_t v8 = v19;
            ++v10;
          }
        }

        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            unint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              uint64_t v24 = *(v23 - 1);
              uint64_t result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }

          else
          {
            while (v12 != v16)
            {
              size_t v20 = *(v12 - 1);
              uint64_t result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }

          return result;
        }

        -[CMHealthColdStorageCloudKitManager setUserRecordIDName:]( self,  "setUserRecordIDName:",  objc_msgSend(objc_msgSend(v6, "currentUser"), "recordName"));
        if (qword_1019347B0 != -1) {
          dispatch_once(&qword_1019347B0, &stru_10182E9D0);
        }
        unint64_t v19 = (os_log_s *)qword_1019347B8;
        if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[CloudKit] iCloud account change. User signed in.",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019347B0 != -1) {
          dispatch_once(&qword_1019347B0, &stru_10182E9D0);
        }
        *(_WORD *)uint64_t v24 = 0;
        LODWORD(v23) = 2;
        BOOL v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  0LL,  "[CloudKit] iCloud account change. User signed in.",  v24,  v23,  *(void *)v24);
        goto LABEL_58;
      }

      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10182E9D0);
      }
      float v16 = (os_log_s *)qword_1019347B8;
      if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[CloudKit] iCloud account change. User signed out.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347B0 != -1) {
          dispatch_once(&qword_1019347B0, &stru_10182E9D0);
        }
        *(_WORD *)uint64_t v24 = 0;
        BOOL v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  0LL,  "[CloudKit] iCloud account change. User signed out.",  v24,  2,  *(void *)v24);
LABEL_58:
        size_t v13 = (uint8_t *)v17;
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMHealthColdStorageCloudKitManager handleAccountChange:]", "%s\n");
LABEL_59:
        if (v13 != buf) {
          free(v13);
        }
      }
    }
  }

  else
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10182E9D0);
    }
    unint64_t v12 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v26 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[CloudKit] Called back for invalid CKSyncEngineAccountChangeEvent (%@)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10182E9D0);
      }
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)&v24[4] = a3;
      size_t v13 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  16LL,  "[CloudKit] Called back for invalid CKSyncEngineAccountChangeEvent (%@)",  v24,  12);
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CMHealthColdStorageCloudKitManager handleAccountChange:]", "%s\n");
      goto LABEL_59;
    }
  }

        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          uint64_t v25 = *a1;
          do
          {
            uint64_t v26 = *v21++;
            uint64_t result = v26;
          }

          while (v25 >= v26);
          int v27 = v21 - 1;
          do
          {
            int v28 = *--v9;
            unsigned int v29 = v28;
          }

          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          __int128 *v27 = v29;
          std::__shared_weak_count *v9 = result;
        }

        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }

      else
      {
        std::runtime_error v11 = v4 - 1;
LABEL_13:
        unint64_t v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          float v16 = a1 + 1;
        }

        else
        {
          size_t v13 = a1 + 1;
          while (1)
          {
            __int128 v14 = *v8;
            do
            {
              float v15 = *v13++;
              uint64_t result = v15;
            }

            while (v15 < v14);
            float v16 = v13 - 1;
            do
            {
              BOOL v17 = *--v11;
              unint64_t v18 = v17;
            }

            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            *float v16 = v18;
            *std::runtime_error v11 = result;
            ++v10;
            if (v16 == v8) {
              unint64_t v8 = v11;
            }
          }
        }

        if (v16 != v8)
        {
          uint64_t result = *v8;
          unint64_t v19 = *v16;
          if (*v8 < *v16)
          {
            *float v16 = result;
            *unint64_t v8 = v19;
            ++v10;
          }
        }

        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            unint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              uint64_t v24 = *(v23 - 1);
              uint64_t result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }

          else
          {
            while (v12 != v16)
            {
              size_t v20 = *(v12 - 1);
              uint64_t result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }

          return result;
        }

  *((_DWORD *)result + 25) = LODWORD(self->_userMaxCatherine);
  *((_DWORD *)result + 26) |= 0x200000u;
  if ((*(_DWORD *)&self->_has & 0x80000) == 0) {
    return result;
  }
LABEL_23:
  *((_DWORD *)result + 23) = LODWORD(self->_persistedMinHR);
  *((_DWORD *)result + 26) |= 0x80000u;
  return result;
}

  sub_1008076F4(a1 + 304, (const std::string *)(a1 + 376));
  return a1;
}

  uint64_t v21 = *(_DWORD *)(a2 + 96);
  if (v21 >= 8) {
    sub_101241444();
  }
  *(_DWORD *)(a1 + 124) |= 0x2000u;
  *(_DWORD *)(a1 + 96) = v21;
  unint64_t v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 0x4000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  unint64_t v6 = v5[37];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  BOOL v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v17 & 0x80000000) != 0)
  {
    unint64_t v18 = 10;
  }

  else if (v17 >= 0x80)
  {
    unint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    unint64_t v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    unint64_t v18 = 1;
  }

  int8x8_t v4 = (v4 + v18 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_51:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v19 & 0x80000000) != 0)
    {
      size_t v20 = 10;
    }

    else if (v19 >= 0x80)
    {
      size_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
      unint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      size_t v20 = 1;
    }

    int8x8_t v4 = (v4 + v20 + 1);
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_74;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    if (v21 >= 0x80)
    {
      BOOL v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      unint64_t v3 = a1[16];
    }

    else
    {
      BOOL v22 = 2;
    }

    int8x8_t v4 = (v22 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_48:
      if ((v3 & 0x400) == 0) {
        goto LABEL_49;
      }
      goto LABEL_60;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_48;
  }

  unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
  if (v23 >= 0x80)
  {
    uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    unint64_t v3 = a1[16];
  }

  else
  {
    uint64_t v24 = 2;
  }

  int8x8_t v4 = (v24 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_49:
    if ((v3 & 0x800) == 0) {
      goto LABEL_50;
    }
    goto LABEL_64;
  }

        if (qword_101934600 == -1)
        {
LABEL_46:
          BOOL v22 = (os_log_s *)v4[193];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v23 = &__s1;
            if (v40 < 0.0) {
              unint64_t v23 = __s1;
            }
            uint64_t v24 = &__p;
            if ((v43 & 0x80u) != 0) {
              uint64_t v24 = __p;
            }
            *(_DWORD *)__int128 buf = 67110658;
            *(_DWORD *)uint64_t v55 = (_DWORD)a3;
            *(_WORD *)&v55[4] = 2048;
            *(double *)&v55[6] = v8;
            *(_WORD *)&v55[14] = 2080;
            *(void *)(v6 + 20) = v23;
            uint64_t v58 = 1024;
            *(_DWORD *)(v6 + 30) = v3;
            uint64_t v60 = 2048;
            *(double *)(v6 + 36) = v7;
            uint64_t v61 = 2080;
            *(void *)(v6 + 46) = v24;
            uint64_t v62 = 1024;
            uint64_t v63 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d",  buf,  0x3Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            uint64_t v26 = v4[193];
            int v27 = &__s1;
            if (v40 < 0.0) {
              int v27 = __s1;
            }
            int v28 = &__p;
            if ((v43 & 0x80u) != 0) {
              int v28 = __p;
            }
            uint64_t v44 = 67110658;
            *(_DWORD *)uint32_t v45 = (_DWORD)a3;
            *(_WORD *)&v45[4] = 2048;
            *(double *)&v45[6] = v8;
            *(_WORD *)&v45[14] = 2080;
            *(void *)&v45[16] = v27;
            uint64_t v46 = 1024;
            uint64_t v47 = v3;
            uint64_t v48 = 2048;
            uint64_t v49 = v7;
            uint64_t v50 = 2080;
            uint64_t v51 = v28;
            std::string v52 = 1024;
            uint64_t v53 = v10;
            LODWORD(v37) = 60;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d",  &v44,  *(double *)&v37,  (const char *)__s1,  __n,  v40,  (const char *)__p,  v42);
            uint64_t v30 = (uint8_t *)v29;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const",  "%s\n",  v29);
            if (v30 != buf) {
              free(v30);
            }
          }

          if (SHIBYTE(v40) < 0) {
            operator delete(__s1);
          }
          return v10;
        }

    objc_autoreleasePoolPop(context);
  }

  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }

  return v5;
}

  if ((has & 0x800) != 0) {
    uint64_t v50 = 2654435761LL * self->_hasGPS;
  }
  else {
    uint64_t v50 = 0LL;
  }
  uint64_t v54 = v4;
  std::string v52 = v18;
  if ((has & 0x1000) != 0) {
    uint64_t v49 = 2654435761LL * self->_hasStrideCal;
  }
  else {
    uint64_t v49 = 0LL;
  }
  unsigned int v29 = v9;
  if ((has & 0x400) != 0)
  {
    uint64_t v30 = 2654435761LL * self->_workoutType;
    if ((has & 1) != 0) {
      goto LABEL_53;
    }
LABEL_58:
    uint64_t v35 = 0LL;
    goto LABEL_61;
  }

  uint64_t v30 = 0LL;
  if ((has & 1) == 0) {
    goto LABEL_58;
  }
LABEL_53:
  cadence = self->_cadence;
  unsigned int v32 = -cadence;
  if (cadence >= 0.0) {
    unsigned int v32 = self->_cadence;
  }
  uint64_t v33 = floor(v32 + 0.5);
  int v34 = (v32 - v33) * 1.84467441e19;
  uint64_t v35 = 2654435761u * (unint64_t)fmod(v33, 1.84467441e19);
  if (v34 >= 0.0)
  {
    if (v34 > 0.0) {
      v35 += (unint64_t)v34;
    }
  }

  else
  {
    v35 -= (unint64_t)fabs(v34);
  }

  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 132) |= 0x10u;
    uint64_t v35 = *(char **)(a1 + 72);
    if (!v35)
    {
      uint64_t v35 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v35 = off_101869DE8;
      *(_OWORD *)(v35 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(void *)(a1 + 72) = v35;
    }

    std::string::size_type v36 = *(void *)(a2 + 72);
    if (!v36) {
      std::string::size_type v36 = *(void *)(qword_1019A1B68 + 72);
    }
    sub_100A570A0((uint64_t)v35, v36);
    uint64_t v30 = *(_DWORD *)(a2 + 132);
    if ((v30 & 0x20) == 0)
    {
LABEL_32:
      if ((v30 & 0x40) == 0) {
        goto LABEL_33;
      }
      goto LABEL_51;
    }

                for (uint64_t k = 0; (unint64_t)[v27 coordinateCount] > k; ++k)
                {
                  *(void *)&uint64_t v79 = 0LL;
                  uint64_t v88 = 0LL;
                  uint64_t v94 = 0LL;
                  sub_100D2DA44( (double *)(a1 + 56),  (double *)&v88,  (double *)&v94,  (double *)&v79,  *a3,  *a4,  0.0,  *((double *)[v27 coordinates] + 2 * k),  *((double *)objc_msgSend(v27, "coordinates") + 2 * k + 1),  0.0);
                  int v34 = v94;
                  uint64_t v35 = v88;
                  std::string::size_type v36 = v105;
                  if ((unint64_t)v105 >= *((void *)&v105 + 1))
                  {
                    uint64_t v38 = (uint64_t)(v105 - *(void *)&buf[8]) >> 4;
                    __int16 v39 = v38 + 1;
                    uint64_t v40 = *((void *)&v105 + 1) - *(void *)&buf[8];
                    else {
                      uint64_t v41 = v39;
                    }
                    __int16 v43 = (char *)sub_100037038((uint64_t)&v105 + 8, v41);
                    uint64_t v44 = &v43[16 * v38];
                    *(void *)uint64_t v44 = v34;
                    *((void *)v44 + 1) = v35;
                    uint32_t v45 = (void *)v105;
                    uint64_t v46 = *(void **)&buf[8];
                    uint64_t v47 = v44;
                    while (v45 != v46)
                    {
                      uint64_t v48 = *(v45 - 2);
                      v45 -= 2;
                      *((void *)v47 - 2) = v48;
                      v47 -= 16;
                      *((void *)v47 + 1) = v45[1];
                    }

                    uint64_t v37 = v44 + 16;
                    *(void *)&uint8_t buf[8] = v47;
                    *(void *)&unsigned int v105 = v44 + 16;
                    *((void *)&v105 + 1) = &v43[16 * v42];
                    if (v46) {
                      operator delete(v46);
                    }
                  }

                  else
                  {
                    *(void *)unsigned int v105 = v94;
                    *(void *)(v36 + std::iostream::~basic_iostream(v2, v3 + 8) = v35;
                    uint64_t v37 = (void *)(v36 + 16);
                  }

                  *(void *)&unsigned int v105 = v37;
                  float v15 = a2;
                }

                sub_100A3F7E8((double **)&buf[8], (uint64_t)&v79);
                uint64_t v106 = v79;
                uint64_t v107 = v80;
                uint64_t v49 = v15[1];
                if (v49 >= v15[2])
                {
                  uint64_t v50 = sub_10097DFE0(v15, (uint64_t)buf);
                }

                else
                {
                  *(void *)uint64_t v49 = *(void *)buf;
                  *(void *)(v49 + 16) = 0LL;
                  *(void *)(v49 + 24) = 0LL;
                  *(void *)(v49 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
                  sub_10097E130( (char *)(v49 + 8),  *(void **)&buf[8],  (void *)v105,  (uint64_t)(v105 - *(void *)&buf[8]) >> 4);
                  *(_OWORD *)(v49 + 32) = v106;
                  *(_OWORD *)(v49 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v107;
                  uint64_t v50 = v49 + 64;
                  v15[1] = v49 + 64;
                }

                v15[1] = v50;
                if (*(void *)&buf[8])
                {
                  *(void *)&unsigned int v105 = *(void *)&buf[8];
                  operator delete(*(void **)&buf[8]);
                }
              }

              BOOL v68 = [v66 countByEnumeratingWithState:&v70 objects:v98 count:16];
            }

            while (v68);
          }
        }

        __int128 v64 = [obj countByEnumeratingWithState:&v74 objects:v99 count:16];
      }

      while (v64);
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 40);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186EE78);
    }
    uint64_t v51 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "CLMM,query failed (buildingsWithinDistance)",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      LOWORD(v79) = 0;
      LODWORD(v60) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,query failed (buildingsWithinDistance)",  &v79,  v60);
      uint64_t v57 = (uint8_t *)v56;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoFeatureAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, con st double &, const double &)",  "%s\n",  v56);
      if (v57 != buf) {
        free(v57);
      }
    }
  }

  objc_autoreleasePoolPop(context);
  return HIDWORD(v60);
}

  char v125 = sub_100C2D208(a1, v6);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  size_t v20 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v125;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v124;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v126;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    *(_DWORD *)int v132 = 67109632;
    *(_DWORD *)&v132[4] = v125;
    *(_WORD *)&v132[8] = 1024;
    *(_DWORD *)&v132[10] = v124;
    *(_WORD *)&v132[14] = 1024;
    *(_DWORD *)&v132[16] = v126;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d",  v132,  20,  (_DWORD)v120);
    uint64_t v107 = (char *)v106;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v106);
    if (v107 != buf) {
      free(v107);
    }
  }

  if (v125 < 2)
  {
    if (*(_BYTE *)(a1 + 176) && *(_BYTE *)(a1 + 144))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      unint64_t v23 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, both download requests are already in use",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        *(_WORD *)int v132 = 0;
        LODWORD(v119) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: checkDownloadSchedule, both download requests are already in use",  v132,  v119);
        uint8x8_t v9 = (char *)v24;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v24);
        goto LABEL_264;
      }

      return;
    }

    if (!*(void *)(a1 + 160) && !*(void *)(a1 + 192))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      v99 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_INFO,  "TILE: checkDownloadSchedule, both download requests null, shutdown?",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        *(_WORD *)int v132 = 0;
        LODWORD(v119) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "TILE: checkDownloadSchedule, both download requests null, shutdown?",  v132,  v119);
        uint8x8_t v9 = (char *)v100;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v100);
        goto LABEL_264;
      }

      return;
    }

    uint64_t v25 = (_OWORD *)(a1 + 248);
    uint64_t v26 = *(double *)(a1 + 268);
    int v27 = *(unsigned __int8 *)(a1 + 200);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    int v28 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v26 > 0.0;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      *(_DWORD *)int v132 = 67109376;
      *(_DWORD *)&v132[4] = v26 > 0.0;
      *(_WORD *)&v132[8] = 1024;
      *(_DWORD *)&v132[10] = v27;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d",  v132,  14);
      uint64_t v109 = (char *)v108;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v108);
      if (v109 != buf) {
        free(v109);
      }
      uint64_t v25 = (_OWORD *)(a1 + 248);
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    unsigned int v29 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      sub_100832C64((uint64_t)v25, (std::stringbuf::string_type *)buf);
      uint64_t v30 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)int v132 = 136380675;
      *(void *)&v132[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, lastLocation, %{private}s",  v132,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v110 = qword_101934838;
      sub_100832C64(a1 + 248, (std::stringbuf::string_type *)v132);
      if (v132[23] >= 0) {
        uint64_t v111 = v132;
      }
      else {
        uint64_t v111 = *(_BYTE **)v132;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v111;
      LODWORD(v119) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v110,  2LL,  "TILE: checkDownloadSchedule, lastLocation, %{private}s",  &__p,  v119);
      uint64_t v113 = v112;
      if ((v132[23] & 0x80000000) != 0) {
        operator delete(*(void **)v132);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v113);
      if (v113 != buf) {
        free(v113);
      }
      uint64_t v25 = (_OWORD *)(a1 + 248);
    }

    unsigned int v32 = *(void **)(a1 + 112);
    if (v32 == (void *)(a1 + 120))
    {
LABEL_223:
      CFStringRef v101 = *(void *)(a1 + 128);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      BOOL v102 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        __int128 v103 = *(unsigned __int8 *)(a1 + 144);
        __int128 v104 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)__int128 buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v125;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v101;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v103;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v104;
        _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d",  buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v114 = *(unsigned __int8 *)(a1 + 144);
        uint64_t v115 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)int v132 = 67109888;
        *(_DWORD *)&v132[4] = v125;
        *(_WORD *)&v132[8] = 2048;
        *(void *)&v132[10] = v101;
        *(_WORD *)&v132[18] = 1024;
        *(_DWORD *)&v132[20] = v114;
        *(_WORD *)&v132[24] = 1024;
        *(_DWORD *)&v132[26] = v115;
        LODWORD(v119) = 30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d",  v132,  v119,  (_DWORD)v120,  DWORD2(v120));
        uint64_t v117 = (char *)v116;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v116);
        if (v117 != buf) {
          free(v117);
        }
      }

      if (!*(_BYTE *)(a1 + 144) && !*(_BYTE *)(a1 + 176))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        unsigned int v105 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, NoActiveDownloads",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          *(_WORD *)int v132 = 0;
          LODWORD(v119) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TILE: checkDownloadSchedule, NoActiveDownloads",  v132,  v119);
          uint8x8_t v9 = (char *)v118;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v118);
          goto LABEL_264;
        }
      }

      return;
    }

    *(void *)&uint64_t v31 = 67109378LL;
    __int128 v121 = v31;
    *(void *)&uint64_t v31 = 136447235LL;
    int v120 = v31;
    while (1)
    {
      if (*(_BYTE *)(a1 + 144) && *(_BYTE *)(a1 + 176)) {
        goto LABEL_223;
      }
      uint64_t v33 = v32[10];
      int v34 = (unsigned int *)(v33 + 48);
      uint64_t v35 = sub_100C29628(a1, *(_DWORD *)(v33 + 48));
      if ((*(_DWORD *)(v33 + 48) & 0xFFFFFFF7) - 1 >= 2)
      {
        sub_10126656C(v35);
        __break(1u);
        goto LABEL_237;
      }

      std::string::size_type v36 = v35;
      if (!sub_100C0D05C(v33, v126, *(float *)(v35 + 128), a2))
      {
        if (!sub_100C0CCC8(v33)) {
          goto LABEL_169;
        }
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint32_t v45 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = sub_100C0CCC8(v33);
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_169;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v47 = qword_101934838;
        uint64_t v48 = sub_100C0CCC8(v33);
        *(_DWORD *)int v132 = 67109120;
        *(_DWORD *)&v132[4] = v48;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d",  v132);
        uint64_t v50 = (char *)v49;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v49);
LABEL_108:
        if (v50 != buf) {
          free(v50);
        }
        uint64_t v25 = (_OWORD *)(a1 + 248);
        goto LABEL_169;
      }

      uint64_t v37 = *(double *)(v36 + 136);
      uint64_t v38 = v25[7];
      v129[6] = v25[6];
      v129[7] = v38;
      *(_OWORD *)uint64_t v130 = v25[8];
      *(_OWORD *)&v130[12] = *(_OWORD *)((char *)v25 + 140);
      __int16 v39 = v25[3];
      v129[2] = v25[2];
      v129[3] = v39;
      uint64_t v40 = v25[5];
      v129[4] = v25[4];
      v129[5] = v40;
      uint64_t v41 = v25[1];
      v129[0] = *v25;
      v129[1] = v41;
      v131 = sub_100DD8DB4(v33, (uint64_t)v129, v37, a2);
      if (!sub_100C0DB30(v33)) {
        break;
      }
LABEL_169:
      std::string v74 = (void *)v32[1];
      if (v74)
      {
        do
        {
          __int16 v75 = v74;
          std::string v74 = (void *)*v74;
        }

        while (v74);
      }

      else
      {
        do
        {
          __int16 v75 = (void *)v32[2];
          uint64_t v44 = *v75 == (void)v32;
          unsigned int v32 = v75;
        }

        while (!v44);
      }

      unsigned int v32 = v75;
      if (v75 == (void *)(a1 + 120)) {
        goto LABEL_223;
      }
    }

    if (v125 >= 2)
    {
      char v125 = 2;
      goto LABEL_223;
    }

    uint64_t v128 = 0;
    if (v131)
    {
      uint64_t v42 = !v124;
      if (*(_BYTE *)(v33 + 112)) {
        __int16 v43 = !v124;
      }
      else {
        __int16 v43 = 1;
      }
      if ((v43 & 1) == 0) {
        goto LABEL_116;
      }
      uint64_t v44 = *(_BYTE *)(v36 + 177) == 0;
    }

    else
    {
      uint64_t v44 = *(_BYTE *)(v33 + 113) == 0;
      uint64_t v42 = !v124;
    }

    if (v44) {
      uint64_t v42 = 1;
    }
    uint64_t v123 = v126;
    if ((v42 & 1) != 0)
    {
LABEL_117:
      char v122 = (double *)(v33 + 112);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v51 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        std::string v52 = v131;
        p_vtable = (void **)v128;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v33 + 16LL))(v132, v33);
        uint64_t v53 = v132[23];
        uint64_t v54 = *(_BYTE **)v132;
        sub_100C11224(v122, &__p);
        uint64_t v55 = v132;
        if (v53 < 0) {
          uint64_t v55 = v54;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = 1;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v123;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v52;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = (_DWORD)p_vtable;
        *(_WORD *)&buf[26] = 2080;
        *(void *)&buf[28] = v55;
        *(_WORD *)&buf[36] = 2080;
        *(void *)int v136 = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d , check, %s, details, %s",  buf,  0x2Eu);
        uint64_t v25 = (_OWORD *)(a1 + 248);
        if ((v132[23] & 0x80000000) != 0) {
          operator delete(*(void **)v132);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        unint64_t v76 = qword_101934838;
        std::string v77 = v131;
        p_vtable = (void **)v128;
        (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)v33 + 16LL))(&__p, v33);
        std::string::size_type size = (char)__p.__r_.__value_.__s.__size_;
        uint64_t v79 = __p.__r_.__value_.__r.__words[0];
        sub_100C11224(v122, &v127);
        uint64_t v80 = &__p;
        if (size < 0) {
          uint64_t v80 = (std::stringbuf::string_type *)v79;
        }
        std::string v81 = &v127;
        if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string v81 = (std::stringbuf::string_type *)v127.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v132 = 67110402;
        *(_DWORD *)&v132[4] = 1;
        *(_WORD *)&v132[8] = 1024;
        *(_DWORD *)&v132[10] = v123;
        *(_WORD *)&v132[14] = 1024;
        *(_DWORD *)&v132[16] = v77;
        *(_WORD *)&v132[20] = 1024;
        *(_DWORD *)&v132[22] = (_DWORD)p_vtable;
        *(_WORD *)&v132[26] = 2080;
        *(void *)&v132[28] = v80;
        *(_WORD *)&v132[36] = 2080;
        *(void *)v133 = v81;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v76,  2LL,  "TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d , check, %s, details, %s",  v132,  46,  (_DWORD)v120,  DWORD2(v120),  (const char *)v121,  *((const char **)&v121 + 1));
        std::string v83 = v82;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
        uint64_t v25 = (_OWORD *)(a1 + 248);
      }

      if (!v123) {
        goto LABEL_169;
      }
      if (v128)
      {
        uint64_t v57 = a1 + 136;
        if (!*(_BYTE *)(a1 + 144)) {
          goto LABEL_134;
        }
      }

      else
      {
        uint64_t v57 = a1 + 168;
        if (!*(_BYTE *)(a1 + 176))
        {
LABEL_134:
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v58 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v59 = *(void *)v57;
            *(_DWORD *)__int128 buf = 136315138;
            *(void *)&uint8_t buf[4] = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, chose, downloadState, %s",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101879178);
            }
            uint64_t v84 = *(void *)v57;
            *(_DWORD *)int v132 = 136315138;
            *(void *)&v132[4] = v84;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: checkDownloadSchedule, chose, downloadState, %s",  v132);
            uint64_t v86 = (char *)v85;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v85);
            if (v86 != buf) {
              free(v86);
            }
            uint64_t v25 = (_OWORD *)(a1 + 248);
          }

          uint64_t v60 = *(void *)(v57 + 24);
          *(_BYTE *)(v60 + 80) = v128;
          *(_BYTE *)(v60 + 81) = 1;
          else {
            uint64_t v61 = *(void *)(v36 + 56);
          }
          uint64_t v62 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v61);
          if (!*(_BYTE *)(v36 + 80))
          {
            uint64_t v63 = +[GEOCountryConfiguration sharedConfiguration]( &OBJC_CLASS___GEOCountryConfiguration,  "sharedConfiguration");
            else {
              __int128 v64 = *(void *)(v36 + 88);
            }
            uint64_t v62 = (NSString *)objc_msgSend( v63,  "defaultForKey:defaultValue:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v64),  v62);
          }

          sub_1010DDBC0(buf, (char *)-[NSString UTF8String](v62, "UTF8String"));
          uint64_t v65 = sub_100C0DB80(v33, (uint64_t)buf, *(void *)(v57 + 24));
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (!v65) {
            goto LABEL_169;
          }
          *(_BYTE *)(v57 + std::iostream::~basic_iostream(v2, v3 + 8) = 1;
          *(double *)(v57 + 16) = a2;
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          ++v125;
          uint64_t v66 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v33 + 16LL))(buf, v33);
            uint64_t v67 = buf;
            if (buf[23] < 0) {
              uint64_t v67 = *(_BYTE **)buf;
            }
            *(_DWORD *)int v132 = v121;
            *(_DWORD *)&v132[4] = v125;
            *(_WORD *)&v132[8] = 2080;
            *(void *)&v132[10] = v67;
            _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s",  v132,  0x12u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101879178);
            }
            uint64_t v87 = qword_101934838;
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v33 + 16LL))(v132, v33);
            uint64_t v88 = v132;
            if (v132[23] < 0) {
              uint64_t v88 = *(_BYTE **)v132;
            }
            __p.__r_.__value_.__r.__words[0] = __PAIR64__(v125, v121);
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v88;
            LODWORD(v119) = 18;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v87,  2LL,  "TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s",  &__p,  v119);
            char v90 = v89;
            if ((v132[23] & 0x80000000) != 0) {
              operator delete(*(void **)v132);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v90);
            if (v90 != buf) {
              free(v90);
            }
            uint64_t v25 = (_OWORD *)(a1 + 248);
          }

          sub_100C2D4F8((_DWORD *)(v36 + 232), 1);
          sub_1010DDBC0(buf, "startDownloading");
          sub_100987188(v36 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (sub_100E575B0())
          {
            sub_1002A5370(buf);
            BOOL v68 = (char *)(v33 + 8);
            sub_1002ACA84((uint64_t)buf, "getTile", v68);
            sub_1002AB3FC((uint64_t)buf, "protection", (_BYTE *)(a1 + 200));
            sub_1002AB3FC((uint64_t)buf, "isCurrentTile", &v131);
            sub_1002AB3FC((uint64_t)buf, "isAllowCellular", &v128);
            sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
            sub_1002A5590(buf);
          }

          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          uint64_t v69 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v70 = sub_100DD8CC8(*v34);
            char v71 = sub_1008ADB4C((uint64_t)v34);
            std::string v72 = sub_1008ADB70((uint64_t)v34);
            p_vtable = (void **)*(unsigned int *)(a1 + 424);
            std::string v73 = -[NSString UTF8String](v62, "UTF8String");
            *(_DWORD *)__int128 buf = v120;
            *(void *)&uint8_t buf[4] = v70;
            *(_WORD *)&buf[12] = 2049;
            *(double *)&buf[14] = v71;
            *(_WORD *)&buf[22] = 2049;
            *(double *)&buf[24] = v72;
            *(_WORD *)&buf[32] = 1026;
            *(_DWORD *)&buf[34] = (_DWORD)p_vtable;
            *(_WORD *)int v136 = 2081;
            *(void *)&v136[2] = v73;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s",  buf,  0x30u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_169;
          }
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          v91 = qword_101934858;
          v92 = sub_100DD8CC8(*v34);
          uint64_t v93 = sub_1008ADB4C((uint64_t)v34);
          uint64_t v94 = sub_1008ADB70((uint64_t)v34);
          p_vtable = (void **)*(unsigned int *)(a1 + 424);
          uint64_t v95 = -[NSString UTF8String](v62, "UTF8String");
          *(_DWORD *)int v132 = v120;
          *(void *)&v132[4] = v92;
          *(_WORD *)&v132[12] = 2049;
          *(double *)&v132[14] = v93;
          *(_WORD *)&v132[22] = 2049;
          *(double *)&v132[24] = v94;
          *(_WORD *)&v132[32] = 1026;
          *(_DWORD *)&v132[34] = (_DWORD)p_vtable;
          *(_WORD *)v133 = 2081;
          *(void *)&_OWORD v133[2] = v95;
          LODWORD(v119) = 48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v91,  0LL,  "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s",  v132,  v119);
          uint64_t v50 = (char *)v96;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)",  "%s\n",  v96);
          goto LABEL_108;
        }
      }

      goto LABEL_169;
    }

        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        uint64_t v37 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  buf,  2u);
        }

        uint64_t result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        LOWORD(v60[0]) = 0;
        unsigned int v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  v60,  2);
      }

      else
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        uint64_t v30 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,inconsistent array size",  buf,  2u);
        }

        uint64_t result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        LOWORD(v60[0]) = 0;
        unsigned int v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,inconsistent array size",  v60,  2);
      }
    }

    uint64_t v26 = v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v29);
    goto LABEL_36;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  uint64_t v21 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }

  BOOL v22 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v22)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    LOWORD(v60[0]) = 0;
    uint64_t v25 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM, NULL road",  v60,  2);
    goto LABEL_18;
  }

  return result;
}

  if (v40 < 0) {
    operator delete(v39[0]);
  }
}

  uint64_t v25 = *(void *)(a1 + 48);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_1019A20E0 + 48);
  }
  uint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3E47C(v25, a2);
  int v28 = (int)v26;
  else {
    unsigned int v29 = 1;
  }
  int8x8_t v4 = (v4 + v28 + v29 + 1);
  unint64_t v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x40) == 0)
  {
LABEL_24:
    if ((v3 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

    if (v23 == (void *)v16)
    {
      if ((v21 & 0x80) != 0) {
        goto LABEL_54;
      }
      if (!v20[23]) {
        goto LABEL_57;
      }
      int v27 = __s2;
      while (*v20 == v27->__r_.__value_.__s.__data_[0])
      {
        ++v20;
        int v27 = (std::string *)((char *)v27 + 1);
        if (!--v21) {
          goto LABEL_57;
        }
      }
    }

      if (__p)
      {
        uint64_t v65 = __p;
        operator delete(__p);
      }

      uint64_t v30 = (std::__shared_weak_count *)*((void *)&v58 + 1);
      if (*((void *)&v58 + 1))
      {
        uint64_t v31 = (unint64_t *)(*((void *)&v58 + 1) + 8LL);
        do
          unsigned int v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }

      if (!v17) {
        goto LABEL_92;
      }
      __int128 v14 = (uint64_t *)v14[1];
      if (v14 == &v53) {
        goto LABEL_72;
      }
    }

    unint64_t v18 = *(void *)(a2 + 48);
    if (v18 >= *(void *)(a2 + 56))
    {
      unint64_t v19 = sub_100D73E7C((uint64_t *)v3, (uint64_t)&v58);
    }

    else
    {
      sub_100D73FA0(v51, *(void *)(a2 + 48), (uint64_t)&v58);
      unint64_t v19 = v18 + 112;
      *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v18 + 112;
    }

    *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v19;
    unint64_t v23 = a1[26];
    if (!v23)
    {
LABEL_41:
      BYTE4(v59) ^= 1u;
      *((float *)&v59 + 2) = *((float *)&v59 + 2) + 180.0;
      sub_100292890(*((float *)&v59 + 2));
      *(float *)&int v27 = v27;
      DWORD2(v59) = LODWORD(v27);
      int v28 = *(void *)(a2 + 48);
      if (v28 >= *(void *)(a2 + 56))
      {
        unsigned int v29 = sub_100D73E7C((uint64_t *)v3, (uint64_t)&v58);
      }

      else
      {
        sub_100D73FA0(v51, *(void *)(a2 + 48), (uint64_t)&v58);
        unsigned int v29 = v28 + 112;
        *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v28 + 112;
      }

      *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v29;
      goto LABEL_45;
    }

    uint64_t v24 = *(_DWORD *)(v58 + 88);
    if (v24 == 3)
    {
      uint64_t v25 = 1;
      goto LABEL_39;
    }

    if (v24) {
LABEL_38:
    }
      uint64_t v25 = 0;
    else {
      uint64_t v25 = *(unsigned __int8 *)(v58 + 80) != 0;
    }
LABEL_39:
    uint64_t v26 = a1[26];
    goto LABEL_41;
  }

        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        uint64_t v37 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  buf,  2u);
        }

        uint64_t result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        LOWORD(v60[0]) = 0;
        unsigned int v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  v60,  2);
      }

      else
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        uint64_t v30 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,inconsistent array size",  buf,  2u);
        }

        uint64_t result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        LOWORD(v60[0]) = 0;
        unsigned int v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,inconsistent array size",  v60,  2);
      }
    }

    uint64_t v26 = v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v29);
    goto LABEL_36;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188BA18);
  }
  uint64_t v21 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }

  BOOL v22 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v22)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188BA18);
    }
    LOWORD(v60[0]) = 0;
    uint64_t v25 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM, NULL road",  v60,  2);
    goto LABEL_18;
  }

  return result;
}

        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          int v27 = *v5;
          do
          {
            unsigned int v29 = *v22++;
            int v28 = v29;
          }

          while (v27 >= v29);
          uint64_t v30 = v22 - 1;
          do
          {
            unsigned int v32 = *--v8;
            uint64_t v31 = v32;
          }

          while (v27 < v32);
          if (v30 >= v8) {
            break;
          }
          void *v30 = v31;
          *unint64_t v8 = v28;
        }

        unint64_t v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }

      else
      {
        std::string v10 = v3 - 1;
LABEL_13:
        std::runtime_error v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          float v16 = v5 + 1;
        }

        else
        {
          unint64_t v12 = v5 + 1;
          while (1)
          {
            size_t v13 = *v7;
            do
            {
              float v15 = *v12++;
              __int128 v14 = v15;
            }

            while (v15 < v13);
            float v16 = v12 - 1;
            do
            {
              unint64_t v18 = *--v10;
              BOOL v17 = v18;
            }

            while (v18 >= v13);
            if (v16 >= v10) {
              break;
            }
            *float v16 = v17;
            *std::string v10 = v14;
            uint64_t result = (result + 1);
            if (v16 == v7) {
              uint64_t v7 = v10;
            }
          }
        }

        if (v16 != v7)
        {
          unint64_t v19 = *v16;
          if (*v7 < *v16)
          {
            *float v16 = *v7;
            *uint64_t v7 = v19;
            uint64_t result = (result + 1);
          }
        }

        if (v16 == a2) {
          return result;
        }
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            uint64_t v24 = v16 + 1;
            while (v24 != v3)
            {
              uint64_t v26 = *(v24 - 1);
              uint64_t v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }

          else
          {
            while (v11 != v16)
            {
              uint64_t v21 = *(v11 - 1);
              size_t v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }

          return result;
        }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 52));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  int8x8_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "fromState", *(_DWORD *)(a1 + 52));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 8u);
  int8x8_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }

  size_t v20 = *(void *)(a2 + 288);
  v10 |= 0x100u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 28std::iostream::~basic_iostream(v2, v3 + 8) = v20;
  uint8x8_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x800) != 0) {
    goto LABEL_46;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "resistanceLevel", *(float *)(a1 + 96));
  unint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
LABEL_47:
    PB::TextFormatter::format(this, "strideCount", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x400000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x15u);
  int8x8_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 0x17u);
  }

  unint64_t v12 = *(_BYTE *)(a2 + 95);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 95) = v12;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "rawLoftSpeed", *(float *)(a1 + 68));
  unint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x14u);
  int8x8_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  uint64_t v24 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 32) = v24;
  if ((*(_DWORD *)(a2 + 116) & 0x10) != 0) {
    goto LABEL_46;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 104));
  unint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x12u);
  int8x8_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  BOOL v17 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 212) |= 0x80000u;
  *(_DWORD *)(a1 + 172) = v17;
  std::string v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x40000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "btHint", *(_DWORD *)(a1 + 116));
  unint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }

  uint8x8_t v9 = *(_BYTE *)(a2 + 101);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(a1 + 101) = v9;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "isFpThresholdsMet", *(_BYTE *)(a1 + 101));
  unint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 104), 0x10u);
  int8x8_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  uint64_t result = *(float *)(a2 + 120);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 120) = result;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "eventStartTime", *(void *)(a1 + 24));
  unint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0xEu);
  int8x8_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  BOOL v17 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 112) = v17;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedStart", *(float *)(a1 + 80));
  unint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x68u);
  int8x8_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 136), 0xCAu);
  int8x8_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0) {
    goto LABEL_46;
  }
LABEL_15:
  if ((v4 & 0x20) != 0) {
LABEL_16:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0xCCu);
LABEL_17:
  unint64_t v5 = *(unint64_t **)(v3 + 80);
  unint64_t v6 = *(unint64_t **)(v3 + 88);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = PB::Writer::writeVarInt(this, v7, 0xCDu);
  }

  unint64_t v8 = *(unint64_t **)(v3 + 104);
  uint8x8_t v9 = *(unint64_t **)(v3 + 112);
  while (v8 != v9)
  {
    std::string v10 = *v8++;
    uint64_t result = PB::Writer::writeVarInt(this, v10, 0xCEu);
  }

  std::runtime_error v11 = *(float **)(v3 + 8);
  unint64_t v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    size_t v13 = *v11++;
    uint64_t result = PB::Writer::write(this, v13, 0xCFu);
  }

  __int128 v14 = *(float **)(v3 + 56);
  float v15 = *(float **)(v3 + 64);
  while (v14 != v15)
  {
    float v16 = *v14++;
    uint64_t result = PB::Writer::write(this, v16, 0xD0u);
  }

  unint64_t v18 = *(float **)(v3 + 32);
  BOOL v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    unint64_t v19 = *v18++;
    uint64_t result = PB::Writer::write(this, v19, 0xD1u);
  }

  return result;
}

  size_t v13 = *(_DWORD *)(a2 + 120);
  v3 |= 0x400000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 120) = v13;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "debugCountOfAccelDataDrop", *(_DWORD *)(a1 + 92));
  unint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xBu);
  int8x8_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "basalMets", *(float *)(a1 + 44));
  unint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 6u);
  int8x8_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }

  unint64_t v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 96));
  unint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x14u);
  int8x8_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "numBaselineCaptureFrames", *(_DWORD *)(a1 + 76));
  unint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x11u);
  int8x8_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  unint64_t v12 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 76) = v12;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "numFullSPADs", *(_DWORD *)(a1 + 80));
  unint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xAu);
  int8x8_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "left_eye_z", *(float *)(a1 + 68));
  unint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xDu);
  int8x8_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16LL) + 4LL * *a2) & 0x500) == 0))
      {
        unint64_t v8 = (char)v5;
        if (this)
        {
          uint64_t v7 = this;
          goto LABEL_50;
        }

        goto LABEL_59;
      }

    uint64_t result = PB::Reader::skip(this, v23, v21, 0);
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_50;
  }

  return v4 == 0;
}

  uint64_t result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "userAccelAmplitudeZ", *(double *)(a1 + 144));
  unint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0x13u);
  int8x8_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "dramMaxTimestamp", *(void *)(a1 + 16));
  unint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 4u);
  int8x8_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }

  uint64_t result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMedian", *(double *)(a1 + 104));
  unint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0xEu);
  int8x8_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *(double *)(a1 + 136));
  unint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x12u);
  int8x8_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "floorsAscended", *(_DWORD *)(a1 + 120));
  unint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0) {
LABEL_13:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xCu);
LABEL_14:
  unint64_t v5 = *(void *)(v3 + 72);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 13LL);
  }
  unint64_t v6 = *(_DWORD *)(v3 + 152);
  if ((v6 & 0x200000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 148), 0xEu);
    unint64_t v6 = *(_DWORD *)(v3 + 152);
  }

  if ((v6 & 0x400000) != 0) {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 149), 0xFu);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 8);
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 0x10u);
  }
  unint64_t v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x11u);
    unint64_t v8 = *(_DWORD *)(v3 + 152);
    if ((v8 & 0x100000) == 0)
    {
LABEL_24:
      if ((v8 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_49;
    }
  }

  else if ((v8 & 0x100000) == 0)
  {
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x12u);
  unint64_t v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x20000) == 0)
  {
LABEL_25:
    if ((v8 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }

  uint64_t result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 36) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "medianLux", *(float *)(a1 + 80));
  unint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x12u);
  int8x8_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  unint64_t v19 = *(_BYTE *)(a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 110) = v19;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  unint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 114), 0x11u);
  int8x8_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t v24 = *(void *)(a2 + 120);
  v5 |= 0x2000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 120) = v24;
  int8x8_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 56));
  unint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0xDu);
  int8x8_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }

  __int128 v14 = *(_DWORD *)(a2 + 204);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 204) = v14;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 184));
  unint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0xCu);
  int8x8_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 3u);
  int8x8_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  unint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
LABEL_47:
    PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x15u);
  int8x8_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x17u);
  }

  __int128 v14 = *(_BYTE *)(a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 120) = v14;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed", *(_BYTE *)(a1 + 122));
  unint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  int8x8_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }

  BOOL v17 = *(_DWORD *)(a2 + 128);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v17;
  unint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "btzQuiescentDurationStrict", *(float *)(a1 + 80));
  unint64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 5u);
  int8x8_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "groundContactTimeGradeType", *(_DWORD *)(a1 + 200));
  unint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 216), 9u);
  int8x8_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v24 = *(_BYTE *)(a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 122) = v24;
  if ((*(_DWORD *)(a2 + 128) & 0x4000) != 0) {
    goto LABEL_46;
  }
  return result;
}

  unint64_t v18 = *(void *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 18std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v18;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "isValidRunningSpeed", *(_BYTE *)(a1 + 184));
  unint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0x10u);
  int8x8_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }

  size_t v20 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 40) = v20;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "rotationAxisWTAmplitudeXForwards", *(double *)(a1 + 128));
  unint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x12u);
  int8x8_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

void sub_10001A288(_Unwind_Exception *a1)
{
}

uint64_t *sub_10001A29C(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_10001A350(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 240LL;
        sub_10001A3D4((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10001A3D4(uint64_t a1, uint64_t a2)
{
}

void *sub_10001A410(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_101818E08;
  result[1] = v3;
  return result;
}

uint64_t sub_10001A448(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101818E08;
  a2[1] = v2;
  return result;
}

uint64_t sub_10001A468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_10001A470(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10001A4AC()
{
  return &off_101818E88;
}

BOOL sub_10001A4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

uint64_t sub_10001A504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *sub_10001A568(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }

    std::string v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t j = *v10; j; uint64_t j = (void *)*j)
      {
        unint64_t v12 = j[1];
        if (v12 == v6)
        {
          if (j[2] == *a2 && j[3] == a2[1]) {
            return j;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t j = operator new(0x20uLL);
  void *j = 0LL;
  j[1] = v6;
  *((_OWORD *)j + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100019E10(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *j = *v21;
LABEL_44:
    *uint64_t v21 = j;
    goto LABEL_45;
  }

  void *j = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = j;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*j)
  {
    unint64_t v22 = *(void *)(*j + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_44;
  }

void sub_10001A7A4(_Unwind_Exception *a1)
{
}

void *sub_10001A7B8(void *a1, void *a2)
{
  unint64_t v2 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v2 ^= (v2 << 6) + (v2 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0LL;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v2;
    if (v2 >= *(void *)&v4) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }

  else
  {
    unint64_t v6 = (*(void *)&v4 - 1LL) & v2;
  }

  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0LL;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v2)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }

      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }

        else
        {
          v9 &= *(void *)&v4 - 1LL;
        }

        if (v9 != v6) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

__int128 *sub_10001A8A4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint8x8_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      unint64_t v8 = (void **)(a4 + 24);
      __int128 v9 = *(__int128 *)((char *)v5 + 24);
      *(void *)(a4 + 40) = *((void *)v5 + 5);
      *(_OWORD *)unint64_t v8 = v9;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      __int128 v10 = v5[3];
      *(_OWORD *)(a4 + 60) = *(__int128 *)((char *)v5 + 60);
      *(_OWORD *)(a4 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
      sub_100087EC8(a4 + 80, (uint64_t)(v5 + 5));
      __int128 v11 = *(__int128 *)((char *)v5 + 216);
      *(_BYTE *)(a4 + 232) = *((_BYTE *)v5 + 232);
      *(_OWORD *)(a4 + 216) = v11;
      a4 += 240LL;
      v5 += 15;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void sub_10001A95C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint8x8_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224LL;
        sub_10001A9E0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint8x8_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10001A9E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(void *)(a2 + 176) = v3;
    operator delete(v3);
  }

  sub_100019CEC(a2 + 104);
  sub_100019CEC(a2 + 64);
  return sub_10001AA60(a2);
}

uint64_t sub_10001AA20(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }

  sub_100019CEC(a1 + 104);
  sub_100019CEC(a1 + 64);
  return sub_10001AA60(a1);
}

uint64_t sub_10001AA60(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001AA98(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_10001AAD4((uint64_t)(v2 + 4));
      operator delete(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_10001AAD4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_101818EA8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_10001AB34(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10001AB48(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x92492492492492LL) {
    unint64_t v11 = 0x124924924924924LL;
  }
  else {
    unint64_t v11 = v6;
  }
  size_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_10001B858(v9, v11);
  }
  else {
    unint64_t v12 = 0LL;
  }
  float v15 = v12;
  BOOL v16 = &v12[224 * v5];
  unint64_t v18 = &v12[224 * v11];
  sub_10001AC6C((uint64_t)v16, a2, a3);
  unint64_t v17 = v16 + 224;
  sub_10001B7E4(a1, &v15);
  uint64_t v13 = a1[1];
  sub_10001BAC0(&v15);
  return v13;
}

void sub_10001AC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001AC6C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = sub_10001AD40(a1, a2);
  __int128 v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_10001B204(v6 + 64, a2 + 64);
  sub_10001B494(a1 + 104, a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  sub_10001B72C( (void *)(a1 + 168),  *(const void **)(a2 + 168),  *(void *)(a2 + 176),  (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  __int128 v10 = a3[1];
  *(_OWORD *)(a1 + 192) = *a3;
  *(_OWORD *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  return a1;
}

void sub_10001AD0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001AD40(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10001AD9C(_Unwind_Exception *a1)
{
}

void *sub_10001ADB4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100138790(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      float v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
          }

          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }

            else
            {
              v15 &= v10 - 1;
            }

            if (v15 != v3) {
              break;
            }
          }

          float v14 = (void *)*v14;
        }

        while (v14);
      }
    }
  }

  sub_10001B034(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  float v14 = (void *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_10001B1C0((uint64_t)v25, 0LL);
  return v14;
}

void sub_10001B01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001B034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  *((_OWORD *)v8 + 1) = *a3;
  uint64_t result = sub_10001B0AC((uint64_t)(v8 + 4), (uint64_t)(a3 + 1));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10001B094(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B0AC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_10001B0F0(a1, a2);
  return a1;
}

void sub_10001B0DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B0F0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_101818EA8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_101818EC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }

  return result;
}

void sub_10001B17C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_10001B188(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *sub_10001B194(int a1, void *__dst, __int128 *a3)
{
  __int128 v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)__int128 __dst = v3;
  return result;
}

void sub_10001B1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10001AAD4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t sub_10001B204(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10001B260(_Unwind_Exception *a1)
{
}

void *sub_10001B278(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100019E10(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }

  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  unint64_t v20 = *(void *)(a1 + 40);
  if (!v20) {
    unint64_t v20 = *(void *)(qword_1019A0818 + 40);
  }
  size_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100067CB0(v20, a2);
  unint64_t v22 = (int)v21;
  else {
    unint64_t v23 = 1;
  }
  uint64_t v5 = (v5 + v22 + v23 + 1);
  unint64_t v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_51;
  }

  unint64_t v20 = *(void *)(a1 + 40);
  if (!v20) {
    unint64_t v20 = *(void *)(qword_1019A0980 + 40);
  }
  size_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100073C18(v20, a2);
  unint64_t v22 = (int)v21;
  else {
    unint64_t v23 = 1;
  }
  v5 += v22 + v23 + 1;
  unint64_t v3 = *(_DWORD *)(a1 + 128);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_51;
  }

          unint64_t v7 = v19 + 16;
          uint64_t v65 = v22;
          uint64_t v66 = v19 + 16;
          uint64_t v67 = &v15[16 * v14];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_41;
        }

        unint64_t v7 = v66 + 16;
        *(void *)uint64_t v66 = 0LL;
        *((void *)v10 + 1) = 0LL;
      }

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*v8;
  return i;
}

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EA08);
  }
  size_t v21 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "LOI Manager, Not a Home LOI", buf, 2u);
  }

  if (!sub_1002921D0(115, 2)) {
    goto LABEL_44;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EA08);
  }
  LOWORD(__dst[0]) = 0;
  unint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "LOI Manager, Not a Home LOI",  __dst,  2);
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)",  "%s\n",  v19);
LABEL_104:
  if (v19 != buf) {
    free(v19);
  }
LABEL_44:
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EA08);
  }
  unint64_t v22 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "LOI Manager, Returning to Inactive Location State",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181EA08);
    }
    LOWORD(__dst[0]) = 0;
    LODWORD(v41) = 2;
    __int16 v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "LOI Manager, Returning to Inactive Location State",  __dst,  v41);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)",  "%s\n",  v39);
    if (v39 != buf) {
      free(v39);
    }
  }

  std::string::assign((std::string *)(a1 + 368), "unknown");
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(void *)(a1 + 44std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a1 + 440);
  if (*(_BYTE *)(a1 + 484)) {
    *(_BYTE *)(a1 + 484) = 0;
  }
  sub_1010DDBC0(buf, "Not in Active Location State");
LABEL_80:
  __n128 result = *(double *)buf;
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v12;
}

  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }

  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  (int)a2,  *(double *)(v5 + 112),  a3);
  unint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  __n128 result = *(double *)(a2 + 104);
  *(_DWORD *)(a1 + 132) |= 0x1000u;
  *(double *)(a1 + 104) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    goto LABEL_21;
  }

  __n128 result = *(double *)(a2 + 104);
  *(_DWORD *)(a1 + 132) |= 0x1000u;
  *(double *)(a1 + 104) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    goto LABEL_21;
  }

  uint8x8_t v8 = *(void *)(v5 + 96);
  if (!v8) {
    uint8x8_t v8 = *(void *)(qword_1019A0B80 + 96);
  }
  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v8,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  *(_DWORD *)(a1 + 92) |= 0x2000u;
  unint64_t v16 = *(char **)(a1 + 64);
  if (!v16)
  {
    unint64_t v16 = (char *)operator new(0x28uLL);
    *(void *)unint64_t v16 = off_101827B80;
    *(_OWORD *)(v16 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(void *)(a1 + 64) = v16;
  }

  size_t v17 = *(void *)(a2 + 64);
  if (!v17) {
    size_t v17 = *(void *)(qword_1019A0BF8 + 64);
  }
  sub_1001D323C((uint64_t)v16, v17);
  uint64_t v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_31:
    if ((v5 & 0x8000) == 0) {
      return;
    }
    goto LABEL_49;
  }

  __n128 result = *(double *)(a2 + 88);
  *(_DWORD *)(a1 + 124) |= 0x800u;
  *(double *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = result;
  unint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  unint64_t v15 = *(_DWORD *)(a1 + 40);
  unint64_t v16 = (v15 + v4);
  if (v15 >= 1)
  {
    size_t v17 = 0LL;
    do
    {
      uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EBF94( *(void *)(*(void *)(a1 + 32) + 8 * v17),  a2);
      unint64_t v19 = (int)v18;
      else {
        unint64_t v20 = 1;
      }
      unint64_t v16 = (v19 + v16 + v20);
      ++v17;
    }

    while (v17 < *(int *)(a1 + 40));
  }

  *(_DWORD *)(a1 + 56) = v16;
  return v16;
}

  BOOL v14 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 148) |= 0x10u;
  *(void *)(a1 + 32) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x20) != 0) {
    goto LABEL_40;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_41:
  unint64_t v16 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 148) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unint64_t v6 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 148) |= 0x80u;
    *(_DWORD *)(a1 + 72) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
  }

  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 72),  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  ++*(void *)(a1 + 24);
  return v10;
}

            if (qword_1019347B0 != -1) {
              dispatch_once(&qword_1019347B0, &stru_10182E9D0);
            }
            uint64_t v18 = (os_log_s *)qword_1019347B8;
            if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[CloudKit] iCloud account change. User signed in with same account",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019347B0 != -1) {
                dispatch_once(&qword_1019347B0, &stru_10182E9D0);
              }
              *(_WORD *)uint64_t v24 = 0;
              size_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  0LL,  "[CloudKit] iCloud account change. User signed in with same account",  v24,  2);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CMHealthColdStorageCloudKitManager handleAccountChange:]",  "%s\n",  v21);
            }

            sub_100BE6EB0((uint64_t)*p_coldStorageManager);
          }
        }

        else
        {
          -[CMHealthColdStorageCloudKitManager deleteSyncEngineMetadata](self, "deleteSyncEngineMetadata");
          p_coldStorageManager = &self->_coldStorageManager;
          if (self->_coldStorageManager) {
            goto LABEL_39;
          }
        }

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v13;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  PBDataWriterWriteFloatField(a3, 17LL, self->_totalDropoutTime);
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  *((_DWORD *)a3 + 24) = LODWORD(self->_totalDropoutTime);
  *((_DWORD *)a3 + 26) |= 0x100000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  *((_DWORD *)result + 7) = LODWORD(self->_longestDropout);
  *((_DWORD *)result + 26) |= 8u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_17:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  self->_totalDropoutTime = *((float *)a3 + 24);
  *(_DWORD *)&self->_has |= 0x100000u;
  unint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x200) == 0)
  {
LABEL_18:
    if ((v3 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

      ++v19[16];
      if (!a6) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }

    if (v17 == v16)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      uint64_t v26 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        int v27 = __p;
        if (v59 < 0) {
          int v27 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v27;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Decrementing refcount for SevriceSessionInfo - Client not found, clientAnchor:%{p ublic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
      }

      int v28 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        unsigned int v29 = __p;
        if (v59 < 0) {
          unsigned int v29 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v29;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Decrementing refcount for SevriceSessionInfo - Client not found",  "{msg%{public}.0s:Decrementing refcount for SevriceSessionInfo - Client not found, clientAnchor:%{p ublic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
      }

      uint64_t v30 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = __p;
        if (v59 < 0) {
          uint64_t v31 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v31;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Decrementing refcount for SevriceSessionInfo - Client not found, clientAnchor:%{p ublic, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      }

      unsigned int v32 = 6515;
    }

    else
    {
      if (a3)
      {
        unint64_t v20 = v16[14];
        if (v20 <= 0)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          uint64_t v33 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            int v34 = __p;
            if (v59 < 0) {
              int v34 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v34;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          uint64_t v35 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            std::string::size_type v36 = __p;
            if (v59 < 0) {
              std::string::size_type v36 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v36;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.passiveServiceSessions > 0";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Decrementing refcount for Mosasaurus - refcount should be greater than 0",  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          uint64_t v37 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            uint64_t v38 = __p;
            if (v59 < 0) {
              uint64_t v38 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v38;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
          }

          unsigned int v32 = 6519;
          goto LABEL_129;
        }

        v16[14] = v20 - 1;
      }

      if (a4)
      {
        size_t v21 = v16[15];
        if (v21 <= 0)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          __int16 v39 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            uint64_t v40 = __p;
            if (v59 < 0) {
              uint64_t v40 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v40;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          uint64_t v41 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            uint64_t v42 = __p;
            if (v59 < 0) {
              uint64_t v42 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v42;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Decrementing refcount for Mosasaurus - refcount should be greater than 0",  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          __int16 v43 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = __p;
            if (v59 < 0) {
              uint64_t v44 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v44;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Decrementing refcount for Mosasaurus - refcount should be greater than 0, clien tAnchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x30u);
          }

          unsigned int v32 = 6524;
          goto LABEL_129;
        }

        v16[15] = v21 - 1;
      }

      if (a5)
      {
        unint64_t v22 = v16[16];
        if (v22 <= 0)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          uint32_t v45 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            uint64_t v46 = __p;
            if (v59 < 0) {
              uint64_t v46 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v46;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Decrementing refcount for MosaTuna - refcount should be greater than 0, clientA nchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          uint64_t v47 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            uint64_t v48 = __p;
            if (v59 < 0) {
              uint64_t v48 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v48;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.alwaysServiceSessions > 0";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v47,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Decrementing refcount for MosaTuna - refcount should be greater than 0",  "{msg%{public}.0s:Decrementing refcount for MosaTuna - refcount should be greater than 0, clientA nchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  buf,  0x30u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          uint64_t v49 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            uint64_t v50 = __p;
            if (v59 < 0) {
              uint64_t v50 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            uint64_t v61 = 2082;
            uint64_t v62 = "";
            uint64_t v63 = 2082;
            __int128 v64 = v50;
            uint64_t v65 = 2082;
            uint64_t v66 = "assert";
            uint64_t v67 = 2081;
            *(void *)BOOL v68 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Decrementing refcount for MosaTuna - refcount should be greater than 0, clientA nchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  buf,  0x30u);
          }

          unsigned int v32 = 6529;
          goto LABEL_129;
        }

        v16[16] = v22 - 1;
      }

      if (!a6)
      {
LABEL_32:
        if (!v16[14] && !v16[15] && !v16[16] && !v16[17]) {
          sub_1003F9708((uint64_t **)(a1 + 1048), (uint64_t)v16);
        }
        goto LABEL_41;
      }

      unint64_t v23 = v16[17];
      if (v23 > 0)
      {
        v16[17] = v23 - 1;
        goto LABEL_32;
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      uint64_t v51 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        std::string v52 = __p;
        if (v59 < 0) {
          std::string v52 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v52;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Decrementing refcount for OldSDKLinking - refcount should be greater than 0, client Anchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
      }

      uint64_t v53 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        uint64_t v54 = __p;
        if (v59 < 0) {
          uint64_t v54 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v54;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v53,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Decrementing refcount for OldSDKLinking - refcount should be greater than 0",  "{msg%{public}.0s:Decrementing refcount for OldSDKLinking - refcount should be greater than 0, client Anchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
      }

      uint64_t v55 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        __int128 v56 = __p;
        if (v59 < 0) {
          __int128 v56 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        uint64_t v61 = 2082;
        uint64_t v62 = "";
        uint64_t v63 = 2082;
        __int128 v64 = v56;
        uint64_t v65 = 2082;
        uint64_t v66 = "assert";
        uint64_t v67 = 2081;
        *(void *)BOOL v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Decrementing refcount for OldSDKLinking - refcount should be greater than 0, client Anchor:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x30u);
      }

      unsigned int v32 = 6534;
    }

  ++*v8;
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
      if ((v19 & 0x80000000) != 0)
      {
        unint64_t v20 = 11;
      }

      else if (v19 >= 0x80)
      {
        unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
        unint64_t v3 = a1[13];
      }

      else
      {
        unint64_t v20 = 2;
      }

      uint64_t v4 = (v20 + v4);
    }

    if ((v3 & 0x200) != 0)
    {
      size_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
      else {
        unint64_t v22 = 2;
      }
      uint64_t v4 = (v22 + v4);
    }
  }

  a1[12] = v4;
  return v4;
}

  size_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    unint64_t v3 = a1[20];
  }

  else
  {
    uint64_t v18 = 1;
  }

  uint64_t v4 = (v4 + v18 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_43:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if (v19 >= 0x80)
    {
      unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
      unint64_t v3 = a1[20];
    }

    else
    {
      unint64_t v20 = 1;
    }

    uint64_t v4 = (v4 + v20 + 1);
  }

  unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v19 >= 0x80)
  {
    unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    unint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    unint64_t v20 = 2;
  }

  uint64_t v4 = (v20 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_43:
    size_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v21 >= 0x80)
    {
      unint64_t v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      unint64_t v3 = *(_DWORD *)(a1 + 60);
    }

    else
    {
      unint64_t v22 = 2;
    }

    uint64_t v4 = (v22 + v4);
  }

  unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v15 >= 0x80)
  {
    unint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unint64_t v3 = a1[12];
  }

  else
  {
    unint64_t v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_22:
    if ((v3 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  size_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    unint64_t v3 = a1[17];
  }

  else
  {
    uint64_t v18 = 1;
  }

  uint64_t v4 = (v4 + v18 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_43:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if (v19 >= 0x80)
    {
      unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      unint64_t v3 = a1[17];
    }

    else
    {
      unint64_t v20 = 2;
    }

    uint64_t v4 = (v20 + v4);
  }

  __n128 result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  unint64_t v6 = v5[37];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }

  unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if ((v15 & 0x80000000) != 0)
  {
    unint64_t v16 = 10;
  }

  else if (v15 >= 0x80)
  {
    unint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    unint64_t v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    unint64_t v16 = 1;
  }

  uint64_t v4 = (v4 + v16 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_51;
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    size_t v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      size_t v17 = operator new(0x20uLL);
      *size_t v17 = off_1018464A8;
      v17[1] = 0LL;
      v17[2] = 0LL;
      v17[3] = 0LL;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    unint64_t v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    size_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    unint64_t v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    uint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      __n128 result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    unint64_t v20 = vabdd_f64(v8, v7);
    if (v8 <= v7) {
      size_t v21 = 3;
    }
    else {
      size_t v21 = 4;
    }
    if (v20 >= 1.0) {
      unint64_t v10 = v21;
    }
    else {
      unint64_t v10 = 2LL;
    }
    goto LABEL_45;
  }

  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_1018484E0);
  }
  unint64_t v16 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "No buffered Motion Cals, no arbitration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_1018484E0);
    }
    LOWORD(v44) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "No buffered Motion Cals, no arbitration",  &v44,  2);
    unsigned int v32 = (uint8_t *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const",  "%s\n",  v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  return 1LL;
}

  ++*(void *)(a1 + 24);
  return v15;
}

  ++*(void *)(a1 + 24);
  return v15;
}

  uint64_t v26 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Releasing sensor data collection OS transaction",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
    v30[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "Releasing sensor data collection OS transaction",  v30,  2);
    int v28 = (uint8_t *)v27;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFallNotifier::enableSensorRecording()_block_invoke", "%s\n", v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  *(void *)(v5 + 120) = 0LL;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

    uint64_t v51 = (float *)__p;
    if (v8 != a2)
    {
      int v34 = v8;
      do
      {
        unint64_t v11 = sub_1002B8AF0((uint64_t)(v34 + 1), v14);
        uint64_t v35 = v11 - (float)(a5[v14] * *v34);
        std::string::size_type v36 = v51;
        if (v51 >= (float *)v52)
        {
          uint64_t v38 = (float *)__p;
          __int16 v39 = ((char *)v51 - (_BYTE *)__p) >> 2;
          uint64_t v40 = v39 + 1;
          uint64_t v41 = v52 - (_BYTE *)__p;
          if ((v52 - (_BYTE *)__p) >> 1 > v40) {
            uint64_t v40 = v41 >> 1;
          }
          else {
            uint64_t v42 = v40;
          }
          if (v42)
          {
            __int16 v43 = (char *)sub_10000956C((uint64_t)&v52, v42);
            uint64_t v38 = (float *)__p;
            std::string::size_type v36 = v51;
          }

          else
          {
            __int16 v43 = 0LL;
          }

          uint64_t v44 = (float *)&v43[4 * v39];
          os_log_s *v44 = v35;
          uint64_t v37 = v44 + 1;
          while (v36 != v38)
          {
            uint32_t v45 = *--v36;
            unint64_t v11 = v45;
            *--uint64_t v44 = v45;
          }

          __int128 __p = v44;
          uint64_t v51 = v37;
          std::string v52 = &v43[4 * v42];
          if (v38) {
            operator delete(v38);
          }
        }

        else
        {
          *uint64_t v51 = v35;
          uint64_t v37 = v36 + 1;
        }

        uint64_t v51 = v37;
        v34 += 6;
      }

      while (v34 != a2);
      unint64_t v15 = v49;
      if (v37 != __p)
      {
        unint64_t v11 = sub_1002C3BB8((float *)__p, v37, v11);
        a5[v14 + 3] = v11;
      }
    }

  *(void *)a9 = v22;
}

  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 64),  (int)a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  size_t v17 = *(void *)(a1 + 40);
  if (!v17) {
    size_t v17 = *(void *)(qword_1019A1A88 + 40);
  }
  uint64_t v18 = *(unsigned __int8 *)(v17 + 24);
  unint64_t v19 = (v18 << 31 >> 31) & 5;
  if ((v18 & 2) != 0) {
    v19 += 5;
  }
  if ((v18 & 4) != 0) {
    v19 += 5;
  }
  if (*(_BYTE *)(v17 + 24)) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = 0;
  }
  *(_DWORD *)(v17 + 20) = v20;
  v4 += v20 + 2;
  unint64_t v3 = *(_DWORD *)(a1 + 116);
  if ((v3 & 0x40) == 0)
  {
LABEL_10:
    if ((v3 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }

  float v13 = *(void *)(v5 + 88);
  if (!v13) {
    float v13 = *(void *)(qword_1019A1A90 + 88);
  }
  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v13,  a2,  a4);
  unint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_42;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return result;
  }
LABEL_43:
  BOOL v14 = *(void *)(v5 + 96);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A1A90 + 96);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v14,  a2,  a4);
}

  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 60),  a3);
  uint8x8_t v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrCadenceAgreementVariance),  @"hrCadenceAgreementVariance");
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_18:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  PBDataWriterWriteDoubleField(a3, 17LL, self->_vo2Variance);
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  *((void *)a3 + 1std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)&self->_vo2Variance;
  *((_DWORD *)a3 + 41) |= 0x20000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  *((void *)result + 6) = *(void *)&self->_hrCadenceAgreementVariance;
  *((_DWORD *)result + 41) |= 0x20u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_18:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  self->_vo2Variance = *((double *)a3 + 18);
  *(_DWORD *)&self->_has |= 0x20000u;
  unint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x4000) == 0)
  {
LABEL_19:
    if ((v3 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

    sub_100B57DFC(a1);
    sub_100C72894(a1);
    goto LABEL_40;
  }

  if ((isEntitled & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    uint64_t v25 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v26 = *(void *)(a1 + 64);
      __int128 __p = (void *)68289282;
      uint64_t v37 = 2082;
      uint64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Client is not entitled to provide #SLC configuration, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187A528);
      }
    }

    size_t v21 = qword_101934978;
    if (!os_signpost_enabled((os_log_t)qword_101934978)) {
      goto LABEL_40;
    }
LABEL_33:
    unint64_t v22 = *(void *)(a1 + 64);
    __int128 __p = (void *)68289282;
    uint64_t v37 = 2082;
    uint64_t v38 = "";
    __int16 v39 = 2114;
    uint64_t v40 = v22;
    float v13 = "Client is not entitled to provide #SLC configuration";
    BOOL v14 = "{msg%{public}.0s:Client is not entitled to provide #SLC configuration, client:%{public, location:escape_only}@}";
    unint64_t v15 = (os_log_s *)v21;
    unint64_t v16 = 28;
    goto LABEL_21;
  }

  if (sub_100952510(v32, &v31)) {
    goto LABEL_10;
  }
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10187A528);
  }
  int v27 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    int v28 = *(void *)(a1 + 64);
    __int128 __p = (void *)68289538;
    uint64_t v37 = 2082;
    uint64_t v38 = "";
    __int16 v39 = 2114;
    uint64_t v40 = v28;
    uint64_t v41 = 1026;
    LODWORD(v42) = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Client provided invalid #SLC configuration, client:%{public, location:escape_only}@, desiredPowerBudgetRaw:%{public}d}",  (uint8_t *)&__p,  0x22u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
  }

  unsigned int v29 = qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v30 = *(void *)(a1 + 64);
    __int128 __p = (void *)68289538;
    uint64_t v37 = 2082;
    uint64_t v38 = "";
    __int16 v39 = 2114;
    uint64_t v40 = v30;
    uint64_t v41 = 1026;
    LODWORD(v42) = v32;
    float v13 = "Client provided invalid #SLC configuration";
    BOOL v14 = "{msg%{public}.0s:Client provided invalid #SLC configuration, client:%{public, location:escape_only"
          "}@, desiredPowerBudgetRaw:%{public}d}";
    unint64_t v15 = (os_log_s *)v29;
    unint64_t v16 = 34;
    goto LABEL_21;
  }

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return i;
}

    if (++v15 == 4) {
      goto LABEL_50;
    }
  }

  a2[65] = v23;
LABEL_50:
  a2[66] = v18;
  __int16 v39 = 1.5;
  if (fabs(a2[65]) > 0.5) {
    __int16 v39 = 180.0;
  }
  uint64_t v40 = a2[68];
  *(double *)__int128 buf = v40;
  *(double *)&uint8_t buf[8] = (v19 - v20) * 0.5;
  *(double *)&buf[16] = v17;
  uint64_t v65 = v39;
  uint64_t v41 = 8LL;
  uint64_t v42 = (double *)buf;
  do
  {
    if (v40 < *(double *)&buf[v41])
    {
      uint64_t v40 = *(double *)&buf[v41];
      uint64_t v42 = (double *)&buf[v41];
    }

    v41 += 8LL;
  }

  while (v41 != 32);
  __int16 v43 = *v42;
  if (*v42 < 1.5) {
    __int16 v43 = 1.5;
  }
  if (v43 > 9999.0) {
    __int16 v43 = 9999.0;
  }
  a2[68] = v43;
  return v10;
}

    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p);
    }
  }

  ++*v7;
  return i;
}

  *(_DWORD *)(a1 + 84) |= 0x20u;
  size_t v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    size_t v17 = operator new(0x20uLL);
    v17[1] = 0LL;
    v17[2] = 0LL;
    *size_t v17 = &off_101887710;
    *((_DWORD *)v17 + 6) = 0;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v17;
  }

  uint64_t v18 = *(void *)(a2 + 48);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A20E0 + 48);
  }
  sub_100E3AC20((uint64_t)v17, v18);
  unint64_t v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x40) != 0)
  {
LABEL_44:
    *(_DWORD *)(a1 + 84) |= 0x40u;
    unint64_t v19 = *(void **)(a1 + 56);
    if (!v19)
    {
      unint64_t v19 = operator new(0x20uLL);
      *unint64_t v19 = &off_101887788;
      v19[1] = 0LL;
      v19[2] = 0LL;
      v19[3] = 0LL;
      *(void *)(a1 + 56) = v19;
    }

    unint64_t v20 = *(void *)(a2 + 56);
    if (!v20) {
      unint64_t v20 = *(void *)(qword_1019A20E0 + 56);
    }
    __n128 result = sub_100E3AD28((uint64_t)v19, v20);
    unint64_t v6 = *(_DWORD *)(a2 + 84);
    if ((v6 & 0x80) != 0) {
      goto LABEL_49;
    }
LABEL_12:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    goto LABEL_54;
  }

  size_t v21 = *(void *)(a1 + 40);
  if (!v21) {
    size_t v21 = *(void *)(qword_1019A20E0 + 40);
  }
  unint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3DFF0(v21);
  unint64_t v23 = (int)v22;
  else {
    uint64_t v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  unint64_t v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x20) == 0)
  {
LABEL_23:
    if ((v3 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  unint64_t v16 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    unint64_t v16 = v4;
  }
  if ((v3 & 0x20) != 0) {
    __n128 result = v16 + 9;
  }
  else {
    __n128 result = v16;
  }
LABEL_44:
  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = result;
  return result;
}

          *(void *)__int128 buf = &v42;
          sub_100EECC8C((void ***)buf);
          return v18;
        }
      }

      else
      {
LABEL_21:
        if ((v23 & 1) != 0) {
          goto LABEL_22;
        }
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
      uint64_t v33 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "#Warning,CLMMPED, findAllDigitizedRoads returned false",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        v40[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "#Warning,CLMMPED, findAllDigitizedRoads returned false",  v40,  2);
        __int16 v39 = (char *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRo adPtr &, BOOL, double, double, BOOL) const",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

      goto LABEL_39;
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188BA18);
    }
    unint64_t v16 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      size_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
      uint64_t v35 = *(void *)(a1 + 8);
      LODWORD(v42) = 134349056;
      *(void *)((char *)&v42 + 4) = v35;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function",  &v42,  12);
      uint64_t v37 = (char *)v36;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoad Ptr &, BOOL, double, double, BOOL) const",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  return 0LL;
}

  ++*v8;
  return i;
}

  int v28 = (double *)a1[9];
  int v27 = (double *)a1[10];
  if (v28 != v27)
  {
    while (vabdd_f64(a2, *v28) <= 150.0)
    {
      v28 += 2;
      if (v28 == v27) {
        return result;
      }
    }

    if (v28 != v27)
    {
      unsigned int v29 = v28 + 2;
      if (v28 + 2 != v27)
      {
        do
        {
          if (vabdd_f64(a2, *v29) <= 150.0)
          {
            *(_OWORD *)int v28 = *(_OWORD *)v29;
            v28 += 2;
          }

          v29 += 2;
        }

        while (v29 != v27);
        int v27 = (double *)a1[10];
      }
    }

    if (v28 != v27) {
      a1[10] = v28;
    }
  }

  return result;
}

  __n128 result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 16), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "instantaneousCadence", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 56), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  __n128 result = *(float *)(a2 + 64);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 64) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 98));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(_BYTE *)(v3 + 98), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "loftEndDetected", *(_BYTE *)(a1 + 113));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 76), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "gyroBiasErrorEstimate", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 76), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

          if (PB::Reader::placeMark(this, v118, v38, v39)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v37 + 16LL))(v37, this) & 1) != 0)
          {
            goto LABEL_41;
          }

          return 0LL;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v91 = *(char **)(a1 + 16);
            char v90 = *(void *)(a1 + 24);
            if ((unint64_t)v91 >= v90)
            {
              v99 = (char *)*v12;
              __int128 v100 = (v91 - (_BYTE *)*v12) >> 2;
              CFStringRef v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 62) {
LABEL_187:
              }
                sub_100007008();
              BOOL v102 = v90 - (void)v99;
              if (v102 >> 1 > v101) {
                CFStringRef v101 = v102 >> 1;
              }
              else {
                __int128 v103 = v101;
              }
              if (v103)
              {
                __int128 v104 = (char *)sub_10000956C(v13, v103);
                v99 = *(char **)(a1 + 8);
                v91 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v104 = 0LL;
              }

              uint64_t v111 = &v104[4 * v100];
              *(_DWORD *)uint64_t v111 = 0;
              v92 = v111 + 4;
              while (v91 != v99)
              {
                uint64_t v112 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v111 - 1) = v112;
                v111 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v111;
              *(void *)(a1 + 16) = v92;
              *(void *)(a1 + 24) = &v104[4 * v103];
              if (v99) {
                operator delete(v99);
              }
            }

            else
            {
              *(_DWORD *)v91 = 0;
              v92 = v91 + 4;
            }

            *(void *)(a1 + 16) = v92;
            goto LABEL_170;
          }

          if ((PB::Reader::placeMark(this, v118, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v42 = *((void *)this + 1);
          __int16 v43 = *((void *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            uint32_t v45 = *(char **)(a1 + 16);
            uint64_t v44 = *(void *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              uint64_t v47 = (char *)*v12;
              uint64_t v48 = (v45 - (_BYTE *)*v12) >> 2;
              uint64_t v49 = v48 + 1;
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                uint64_t v49 = v50 >> 1;
              }
              else {
                uint64_t v51 = v49;
              }
              if (v51)
              {
                std::string v52 = (char *)sub_10000956C(v13, v51);
                uint64_t v47 = *(char **)(a1 + 8);
                uint32_t v45 = *(char **)(a1 + 16);
              }

              else
              {
                std::string v52 = 0LL;
              }

              uint64_t v53 = &v52[4 * v48];
              *(_DWORD *)uint64_t v53 = 0;
              uint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                uint64_t v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v53;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              *(_DWORD *)uint32_t v45 = 0;
              uint64_t v46 = v45 + 4;
            }

            *(void *)(a1 + 16) = v46;
            uint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_131;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            __int16 v43 = *((void *)this + 2);
            uint64_t v42 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v42;
          }

          goto LABEL_41;
        case 6u:
          *(_BYTE *)(a1 + 108) |= 0x40u;
          __int128 v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_172;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_174;
        case 7u:
          *(_BYTE *)(a1 + 108) |= 0x20u;
          uint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
            goto LABEL_172;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v57);
          goto LABEL_174;
        case 8u:
          *(_BYTE *)(a1 + 108) |= 0x80u;
          uint64_t v58 = *((void *)this + 1);
          if (v58 >= *((void *)this + 2))
          {
            uint64_t v61 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v59 = v58 + 1;
            uint64_t v60 = *(unsigned __int8 *)(*(void *)this + v58);
            *((void *)this + 1) = v59;
            uint64_t v61 = v60 != 0;
          }

          *(_BYTE *)(a1 + 104) = v61;
          goto LABEL_176;
        case 9u:
          *(_BYTE *)(a1 + 108) |= 0x10u;
          uint64_t v62 = *((void *)this + 1);
          uint64_t v63 = *((void *)this + 2);
          __int128 v64 = *(void *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5LL && v62 + 10 <= v63)
          {
            uint64_t v65 = 0;
            uint64_t v66 = 0;
            uint64_t v67 = 0LL;
            do
            {
              BOOL v68 = v62 + 1;
              *((void *)this + 1) = v62 + 1;
              uint64_t v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_155;
              }
              v65 += 7;
              uint64_t v62 = v68;
              unint64_t v20 = v66++ > 8;
            }

            while (!v20);
LABEL_128:
            LODWORD(v67) = 0;
            goto LABEL_155;
          }

          uint64_t v93 = 0;
          uint64_t v94 = 0;
          uint64_t v67 = 0LL;
          if (v63 <= v62) {
            uint64_t v63 = *((void *)this + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              LODWORD(v67) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v95 = v62 + 1;
              uint64_t v96 = *(_BYTE *)(v64 + v62);
              *((void *)this + 1) = v95;
              v67 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                uint64_t v62 = v95;
                unint64_t v20 = v94++ > 8;
                if (v20) {
                  goto LABEL_128;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v67) = 0;
              }
            }

            break;
          }

  unint64_t v20 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v20;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "screenTiltAtStartDegrees", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
LABEL_41:
    PB::TextFormatter::format(this, "wristAngleDiffBtwPeaksDegrees", *(float *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 100) & 0x40000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_21;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 80), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0x14u);
  }

  unint64_t v23 = *(void *)(a2 + 72);
  v6 |= 4u;
  *(_DWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 72) = v23;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 136), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  __n128 result = *(float *)(a2 + 56);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(float *)(a1 + 56) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "configPreTriggerLimitTime", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 88), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  uint8x8_t v8 = *(_DWORD *)(a2 + 96);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 96) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x10) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "configRiseTimeThreshold", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  unint64_t v11 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 60) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "isGPSDetected", *(_BYTE *)(a1 + 124));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 56), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "spatialSamplingCount", *(_DWORD *)(a1 + 184));
  size_t v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x400) == 0)
  {
LABEL_24:
    if ((v21 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(void *)(v3 + 144), 0x69u);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "configIy", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 148), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }

  unint64_t v19 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 44) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "latchedIsDescalationDecided", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 0x193u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  size_t v21 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 44) = v21;
  if ((*(_DWORD *)(a2 + 92) & 0x10000) != 0) {
    goto LABEL_40;
  }
  return result;
}

  size_t v21 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 112) = v3;
  *(void *)(result + 40) = v21;
  if ((*(_DWORD *)(a2 + 112) & 4) != 0) {
    goto LABEL_40;
  }
  return result;
}

  PB::TextFormatter::format(this, "timePercentileDiffThreshold", *(void *)(a1 + 96));
  unint64_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x4000) == 0)
  {
LABEL_22:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_23;
    }
LABEL_41:
    PB::TextFormatter::format(this, "timePeriodicityUpperPercentile", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 152) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_24;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0xC9u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0) {
    goto LABEL_40;
  }
LABEL_15:
  if ((v4 & 0x2000) != 0) {
LABEL_16:
  }
    __n128 result = PB::Writer::write(this, *(float *)(v3 + 136), 0xCBu);
LABEL_17:
  uint64_t v5 = *(unint64_t **)(v3 + 8);
  unint64_t v6 = *(unint64_t **)(v3 + 16);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    __n128 result = PB::Writer::writeVarInt(this, v7, 0xCCu);
  }

  uint8x8_t v8 = *(float **)(v3 + 32);
  unint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    __n128 result = PB::Writer::write(this, v10, 0xCDu);
  }

  unint64_t v11 = *(_DWORD *)(v3 + 152);
  if ((v11 & 1) != 0)
  {
    __n128 result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0xCEu);
    unint64_t v11 = *(_DWORD *)(v3 + 152);
    if ((v11 & 2) == 0)
    {
LABEL_25:
      if ((v11 & 0x20000) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(_BYTE *)(v3 + 149), 0xD0u);
    }
  }

  else if ((v11 & 2) == 0)
  {
    goto LABEL_25;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0xCFu);
  if ((*(_DWORD *)(v3 + 152) & 0x20000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 149), 0xD0u);
  }
  return result;
}

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 144), 0x10u);
  BOOL v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) == 0)
  {
LABEL_25:
    if ((v14 & 0x400) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 160), 0x12u);
  }

  PB::TextFormatter::format(this, "unitDistanceThreshold", *(float *)(a1 + 108));
  float v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x2000) != 0) {
    goto LABEL_40;
  }
LABEL_23:
  if ((v12 & 0x4000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "vertical", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 96), 0x10u);
  unint64_t v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_41;
  }

  __n128 result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_20;
    }
LABEL_41:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 92) & 0x80000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_21;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 76), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x14u);
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 68), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaselineSigma", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "blockSelectByte", *(_DWORD *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 48), 4u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "gaze_x", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 88), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

      uint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

  __n128 result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 176) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 128), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  __n128 result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "shortBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 128), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  __n128 result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMean", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  __n128 result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *(double *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "distanceSource", *(_DWORD *)(a1 + 100));
  unint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }

  __n128 result = *(float *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 84) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "fFTBin3", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 80), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  size_t v21 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 16) = v21;
  if ((*(_DWORD *)(a2 + 84) & 0x40000) != 0) {
    goto LABEL_40;
  }
  return result;
}

      uint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

  float v13 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "rawConfidence", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "demNumContiguousFlatPoints", *(_DWORD *)(a1 + 132));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  uint8x8_t v8 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 144) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 104) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 44), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  __n128 result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(float *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 88) & 0x200) != 0) {
    goto LABEL_40;
  }
  return result;
}

  uint8x8_t v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 44) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(_BYTE *)(v3 + 220), 3u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }

  uint64_t v18 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 64) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "isWorkoutSelected", *(_BYTE *)(a1 + 125));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 8), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

  float v12 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 18std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 56) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "gestureState", *(_DWORD *)(a1 + 168));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  BOOL v14 = *(void *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = v14;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

  PB::TextFormatter::format(this, "integratedVelocityZ", *(double *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

  __n128 result = PB::Writer::write(this, *(double *)(v3 + 80), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  -[NSAutoreleasePool drain](v31, "drain");
  os_activity_scope_leave(&state);
  return 1LL;
}

    if (self)
    {
LABEL_40:
      -[CLInternalService currentToken](self, "currentToken");
LABEL_47:
      CLConnection::getUserNameFromAuditToken(&v22, (CLConnection *)v20, v12);
      sub_100FE36F4(buf, &v22);
      unint64_t v16 = objc_msgSend(-[CLInternalService vendor](self, "vendor"), "proxyForService:", @"CLClientManager");
      sub_100FE3FB4((uint64_t)buf, (uint64_t)&v22);
      if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v17 = &v22;
      }
      else {
        size_t v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      objc_msgSend( v16,  "resetClient:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
      (*((void (**)(id, void))a5 + 2))(a5, 0LL);
      if (SBYTE7(v43[3]) < 0) {
        operator delete(*(void **)&v43[2]);
      }
      if (SHIBYTE(v43[1]) < 0) {
        operator delete(*((void **)&v43[0] + 1));
      }
      if (SBYTE7(v43[0]) < 0) {
        operator delete((void *)v42);
      }
      if (SHIBYTE(v41[3]) < 0) {
        operator delete(v41[1]);
      }
      if (SHIBYTE(v41[0]) < 0) {
        operator delete(v40[0]);
      }
      goto LABEL_68;
    }

void sub_10001B480(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B494(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10001B4F0(_Unwind_Exception *a1)
{
}

void *sub_10001B508(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          unint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  unint64_t v10 = operator new(0x28uLL);
  *unint64_t v10 = 0LL;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100019E10(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }

  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_10001B718(_Unwind_Exception *a1)
{
}

void *sub_10001B72C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_10001B7A4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10001B788(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10001B7A4(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100007008();
  }
  __n128 result = (char *)sub_10000956C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_10001B7E4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001B8A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001B858(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925LL) {
    sub_1000070D4();
  }
  return operator new(224 * a2);
}

uint64_t sub_10001B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 224LL;
      sub_10001B944(v7 - 224, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 224LL;
      *((void *)&v15 + 1) -= 224LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10001BA3C((uint64_t)v12);
  return v10;
}

uint64_t sub_10001B944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B9CC(a1, (uint64_t *)a2);
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10001B9CC(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10001B9CC(a1 + 104, (uint64_t *)(a2 + 104));
  __int128 v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 16std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  __int128 v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  return a1;
}

uint64_t sub_10001B9CC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)uint64_t result = v2;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v5 = a2[2];
  unint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 16;
    *unint64_t v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

uint64_t sub_10001BA3C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10001BA70((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_10001BA70(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_10001A9E0(v3, v1);
      v1 += 224LL;
    }

    while (v1 != v2);
  }

  return result;
}

void **sub_10001BAC0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_10001BAF0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 224;
      uint64_t result = sub_10001A9E0(v4, v1 - 224);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t sub_10001BB34(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t v7 = (_OWORD *)result;
LABEL_2:
  uint64_t v8 = (uint64_t)(a2 - 224);
  uint64_t v90 = (uint64_t)(a2 - 672);
  uint64_t v91 = (uint64_t)(a2 - 448);
  unint64_t v9 = (unint64_t)v7;
  v92 = a2;
  while (2)
  {
    unint64_t v7 = (_OWORD *)v9;
    uint64_t v10 = (uint64_t)&a2[-v9];
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)&a2[-v9] >> 5);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((double *)a2 - 2) > *((double *)v7 + 26))
        {
          uint64_t result = sub_10001CAE4((uint64_t)v7, v8);
          __int128 v46 = v7[13];
          *(_OWORD *)uint64_t v98 = v7[12];
          __int128 v47 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v46;
          __int128 v48 = *(_OWORD *)(a2 - 20);
          v7[12] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 204) = v48;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v47;
        }

        return result;
      case 3uLL:
        return sub_10001C5F4((uint64_t)v7, (uint64_t)(v7 + 14), v8);
      case 4uLL:
        return sub_10001CEA4(v7, v7 + 14, v7 + 28, v8);
      case 5uLL:
        uint64_t result = sub_10001CEA4(v7, v7 + 14, v7 + 28, (uint64_t)(v7 + 42));
        if (*((double *)a2 - 2) > *((double *)v7 + 110))
        {
          uint64_t result = sub_10001CAE4((uint64_t)(v7 + 42), v8);
          __int128 v49 = v7[55];
          *(_OWORD *)uint64_t v98 = v7[54];
          __int128 v50 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v49;
          __int128 v51 = *(_OWORD *)(a2 - 20);
          v7[54] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 876) = v51;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v50;
          if (*((double *)v7 + 110) > *((double *)v7 + 82))
          {
            uint64_t result = sub_10001CAE4((uint64_t)(v7 + 28), (uint64_t)(v7 + 42));
            __int128 v52 = v7[41];
            *(_OWORD *)uint64_t v98 = v7[40];
            __int128 v53 = *(_OWORD *)v98;
            *(_OWORD *)&v98[16] = v52;
            v7[40] = v7[54];
            *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)((char *)v7 + 876);
            v7[54] = v53;
            *(_OWORD *)((char *)v7 + 876) = *(_OWORD *)&v98[12];
            if (*((double *)v7 + 82) > *((double *)v7 + 54))
            {
              uint64_t result = sub_10001CAE4((uint64_t)(v7 + 14), (uint64_t)(v7 + 28));
              __int128 v54 = v7[27];
              *(_OWORD *)uint64_t v98 = v7[26];
              __int128 v55 = *(_OWORD *)v98;
              *(_OWORD *)&v98[16] = v54;
              v7[26] = v7[40];
              *(_OWORD *)((char *)v7 + 42std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)((char *)v7 + 652);
              v7[40] = v55;
              *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)&v98[12];
              if (*((double *)v7 + 54) > *((double *)v7 + 26))
              {
                uint64_t result = sub_10001CAE4((uint64_t)v7, (uint64_t)(v7 + 14));
                __int128 v56 = v7[13];
                *(_OWORD *)uint64_t v98 = v7[12];
                __int128 v57 = *(_OWORD *)v98;
                *(_OWORD *)&v98[16] = v56;
                v7[12] = v7[26];
                *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)v7 + 428);
                v7[26] = v57;
                *(_OWORD *)((char *)v7 + 42std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)&v98[12];
              }
            }
          }
        }

        return result;
      default:
        if (v10 <= 5375)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != (_OWORD *)a2)
            {
              uint64_t v58 = (uint64_t)(v7 + 14);
              if (v7 + 14 != (_OWORD *)a2)
              {
                uint64_t v59 = 0LL;
                uint64_t v60 = (double *)v7;
                do
                {
                  double v61 = v60[54];
                  double v62 = v60[26];
                  uint64_t v60 = (double *)v58;
                  if (v61 > v62)
                  {
                    sub_10001B944((uint64_t)v98, v58);
                    uint64_t v63 = v59;
                    while (1)
                    {
                      sub_10001CFD4((uint64_t)v7 + v63 + 224, (uint64_t)v7 + v63);
                      if (!v63) {
                        break;
                      }
                      double v64 = *(double *)((char *)v7 + v63 - 16);
                      v63 -= 224LL;
                      if (v103 <= v64)
                      {
                        uint64_t v65 = (uint64_t)v7 + v63 + 224;
                        goto LABEL_79;
                      }
                    }

                    uint64_t v65 = (uint64_t)v7;
LABEL_79:
                    sub_10001CFD4(v65, (uint64_t)v98);
                    if (__p)
                    {
                      BOOL v102 = __p;
                      operator delete(__p);
                    }

                    sub_100019CEC((uint64_t)v100);
                    sub_100019CEC((uint64_t)v99);
                    uint64_t result = sub_10001AA60((uint64_t)v98);
                  }

                  uint64_t v58 = (uint64_t)(v60 + 28);
                  v59 += 224LL;
                }

                while (v60 + 28 != (double *)a2);
              }
            }
          }

          else if (v7 != (_OWORD *)a2)
          {
            uint64_t v86 = (uint64_t)(v7 + 14);
            if (v7 + 14 != (_OWORD *)a2)
            {
              do
              {
                uint64_t v87 = v86;
                if (*((double *)v7 + 54) > *((double *)v7 + 26))
                {
                  sub_10001B944((uint64_t)v98, v86);
                  do
                  {
                    sub_10001CFD4((uint64_t)(v7 + 14), (uint64_t)v7);
                    uint64_t v88 = v7 - 14;
                    double v89 = *((double *)v7 - 2);
                    v7 -= 14;
                  }

                  while (v103 > v89);
                  sub_10001CFD4((uint64_t)(v88 + 14), (uint64_t)v98);
                  if (__p)
                  {
                    BOOL v102 = __p;
                    operator delete(__p);
                  }

                  sub_100019CEC((uint64_t)v100);
                  sub_100019CEC((uint64_t)v99);
                  uint64_t result = sub_10001AA60((uint64_t)v98);
                }

                uint64_t v86 = v87 + 224;
                unint64_t v7 = (_OWORD *)v87;
              }

              while ((char *)(v87 + 224) != a2);
            }
          }

          return result;
        }

        if (!a3)
        {
          if (v7 != (_OWORD *)a2)
          {
            int64_t v66 = (v11 - 2) >> 1;
            int64_t v67 = v66;
            do
            {
              int64_t v68 = v67;
              if (v66 >= v67)
              {
                uint64_t v69 = (2 * v67) | 1;
                uint64_t v70 = (uint64_t)&v7[14 * v69];
                if (2 * v67 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v69 + 13] > *(double *)(v70 + 432))
                {
                  v70 += 224LL;
                  uint64_t v69 = 2 * v67 + 2;
                }

                if (*(double *)(v70 + 208) <= *(double *)&v7[14 * v67 + 13])
                {
                  uint64_t v71 = (uint64_t)&v7[14 * v67];
                  sub_10001B944((uint64_t)v98, v71);
                  do
                  {
                    uint64_t v72 = v70;
                    sub_10001CFD4(v71, v70);
                    if (v66 < v69) {
                      break;
                    }
                    uint64_t v73 = (2 * v69) | 1;
                    uint64_t v70 = (uint64_t)&v7[14 * v73];
                    if (2 * v69 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v73 + 13] > *(double *)(v70 + 432))
                    {
                      v70 += 224LL;
                      uint64_t v73 = 2 * v69 + 2;
                    }

                    uint64_t v71 = v72;
                    uint64_t v69 = v73;
                  }

                  while (*(double *)(v70 + 208) <= v103);
                  sub_10001CFD4(v72, (uint64_t)v98);
                  if (__p)
                  {
                    BOOL v102 = __p;
                    operator delete(__p);
                  }

                  sub_100019CEC((uint64_t)v100);
                  sub_100019CEC((uint64_t)v99);
                  sub_10001AA60((uint64_t)v98);
                }
              }

              int64_t v67 = v68 - 1;
            }

            while (v68);
            uint64_t v74 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            uint64_t v75 = (uint64_t)v92;
            do
            {
              sub_10001B944((uint64_t)v93, (uint64_t)v7);
              uint64_t v76 = 0LL;
              uint64_t v77 = (uint64_t)v7;
              do
              {
                uint64_t v78 = v77;
                uint64_t v79 = v76 + 1;
                v77 += 224 * (v76 + 1);
                uint64_t v80 = 2 * v76;
                uint64_t v76 = (2 * v76) | 1;
                uint64_t v81 = v80 + 2;
                if (v81 < v74 && *(double *)(v78 + 224 * v79 + 208) > *(double *)(v77 + 432))
                {
                  v77 += 224LL;
                  uint64_t v76 = v81;
                }

                sub_10001CFD4(v78, v77);
              }

              while (v76 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              v75 -= 224LL;
              if (v77 == v75)
              {
                sub_10001CFD4(v77, (uint64_t)v93);
              }

              else
              {
                sub_10001CFD4(v77, v75);
                sub_10001CFD4(v75, (uint64_t)v93);
                uint64_t v82 = v77 - (void)v7 + 224;
                if (v82 >= 225)
                {
                  if (*(double *)&v7[14 * v83 + 13] > *(double *)(v77 + 208))
                  {
                    sub_10001B944((uint64_t)v98, v77);
                    do
                    {
                      uint64_t v84 = v77;
                      uint64_t v77 = (uint64_t)&v7[14 * v83];
                      sub_10001CFD4(v84, v77);
                      if (!v83) {
                        break;
                      }
                      unint64_t v83 = (v83 - 1) >> 1;
                    }

                    while (*(double *)&v7[14 * v83 + 13] > v103);
                    sub_10001CFD4(v77, (uint64_t)v98);
                    if (__p)
                    {
                      BOOL v102 = __p;
                      operator delete(__p);
                    }

                    sub_100019CEC((uint64_t)v100);
                    sub_100019CEC((uint64_t)v99);
                    sub_10001AA60((uint64_t)v98);
                  }
                }
              }

              if (v96)
              {
                uint64_t v97 = v96;
                operator delete(v96);
              }

              sub_100019CEC((uint64_t)&v95);
              sub_100019CEC((uint64_t)&v94);
              uint64_t result = sub_10001AA60((uint64_t)v93);
            }

            while (v74-- > 2);
          }

          return result;
        }

        if ((unint64_t)v10 <= 0x7000)
        {
          sub_10001C5F4((uint64_t)&v7[14 * (v11 >> 1)], (uint64_t)v7, v8);
        }

        else
        {
          sub_10001C5F4((uint64_t)v7, (uint64_t)&v7[14 * (v11 >> 1)], v8);
          uint64_t v12 = 14 * (v11 >> 1);
          char v13 = &v7[v12];
          sub_10001C5F4((uint64_t)(v7 + 14), (uint64_t)&v7[v12 - 14], v91);
          sub_10001C5F4((uint64_t)(v7 + 28), (uint64_t)&v7[v12 + 14], v90);
          sub_10001C5F4((uint64_t)&v7[v12 - 14], (uint64_t)&v7[v12], (uint64_t)&v7[v12 + 14]);
          sub_10001CAE4((uint64_t)v7, (uint64_t)&v7[v12]);
          __int128 v14 = v7[13];
          *(_OWORD *)uint64_t v98 = v7[12];
          __int128 v15 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v14;
          __int128 v16 = v7[v12 + 12];
          *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)&v7[v12 + 12] + 12);
          v7[12] = v16;
          *(_OWORD *)((char *)v13 + 204) = *(_OWORD *)&v98[12];
          v13[12] = v15;
          a2 = v92;
        }

        --a3;
        if ((a4 & 1) == 0 && *((double *)v7 - 2) <= *((double *)v7 + 26))
        {
          sub_10001B944((uint64_t)v98, (uint64_t)v7);
          if (v103 <= *((double *)a2 - 2))
          {
            std::string::size_type v36 = (double *)(v7 + 14);
            do
            {
              unint64_t v9 = (unint64_t)v36;
              double v37 = v36[26];
              v36 += 28;
            }

            while (v103 <= v37);
          }

          else
          {
            int v34 = (double *)v7;
            do
            {
              unint64_t v9 = (unint64_t)(v34 + 28);
              double v35 = v34[54];
              v34 += 28;
            }

            while (v103 <= v35);
          }

          unint64_t v38 = (unint64_t)a2;
          if (v9 < (unint64_t)a2)
          {
            __int16 v39 = a2;
            do
            {
              unint64_t v38 = (unint64_t)(v39 - 224);
              double v40 = *((double *)v39 - 2);
              v39 -= 224;
            }

            while (v103 > v40);
          }

          while (v9 < v38)
          {
            sub_10001CAE4(v9, v38);
            __int128 v41 = *(_OWORD *)(v9 + 208);
            *(_OWORD *)uint64_t v93 = *(_OWORD *)(v9 + 192);
            __int128 v42 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v41;
            __int128 v43 = *(_OWORD *)(v38 + 204);
            *(_OWORD *)(v9 + 192) = *(_OWORD *)(v38 + 192);
            *(_OWORD *)(v9 + 204) = v43;
            *(_OWORD *)(v38 + 192) = v42;
            *(_OWORD *)(v38 + 204) = *(_OWORD *)&v93[12];
            do
            {
              double v44 = *(double *)(v9 + 432);
              v9 += 224LL;
            }

            while (v103 <= v44);
            do
            {
              double v45 = *(double *)(v38 - 16);
              v38 -= 224LL;
            }

            while (v103 > v45);
          }

          if ((_OWORD *)(v9 - 224) != v7) {
            sub_10001CFD4((uint64_t)v7, v9 - 224);
          }
          sub_10001CFD4(v9 - 224, (uint64_t)v98);
          if (__p)
          {
            BOOL v102 = __p;
            operator delete(__p);
          }

          sub_100019CEC((uint64_t)v100);
          sub_100019CEC((uint64_t)v99);
          uint64_t result = sub_10001AA60((uint64_t)v98);
          a4 = 0;
          continue;
        }

        sub_10001B944((uint64_t)v98, (uint64_t)v7);
        uint64_t v17 = 0LL;
        do
        {
          double v18 = *(double *)&v7[v17 + 27];
          v17 += 14LL;
        }

        while (v18 > v103);
        unint64_t v19 = (char *)&v7[v17];
        unint64_t v20 = a2;
        if (v17 == 14)
        {
          unint64_t v23 = a2;
          while (v19 < v23)
          {
            unint64_t v21 = (unint64_t)(v23 - 224);
            double v24 = *((double *)v23 - 2);
            v23 -= 224;
            if (v24 > v103) {
              goto LABEL_21;
            }
          }

          unint64_t v21 = (unint64_t)v23;
        }

        else
        {
          do
          {
            unint64_t v21 = (unint64_t)(v20 - 224);
            double v22 = *((double *)v20 - 2);
            v20 -= 224;
          }

          while (v22 <= v103);
        }

LABEL_21:
        if ((unint64_t)v19 >= v21)
        {
          uint64_t v32 = (uint64_t)(v19 - 224);
        }

        else
        {
          unint64_t v25 = (unint64_t)v19;
          unint64_t v26 = v21;
          do
          {
            sub_10001CAE4(v25, v26);
            __int128 v27 = *(_OWORD *)(v25 + 208);
            *(_OWORD *)uint64_t v93 = *(_OWORD *)(v25 + 192);
            __int128 v28 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v27;
            __int128 v29 = *(_OWORD *)(v26 + 204);
            *(_OWORD *)(v25 + 192) = *(_OWORD *)(v26 + 192);
            *(_OWORD *)(v25 + 204) = v29;
            *(_OWORD *)(v26 + 192) = v28;
            *(_OWORD *)(v26 + 204) = *(_OWORD *)&v93[12];
            do
            {
              double v30 = *(double *)(v25 + 432);
              v25 += 224LL;
            }

            while (v30 > v103);
            do
            {
              double v31 = *(double *)(v26 - 16);
              v26 -= 224LL;
            }

            while (v31 <= v103);
          }

          while (v25 < v26);
          uint64_t v32 = v25 - 224;
        }

        if ((_OWORD *)v32 != v7) {
          sub_10001CFD4((uint64_t)v7, v32);
        }
        sub_10001CFD4(v32, (uint64_t)v98);
        if (__p)
        {
          BOOL v102 = __p;
          operator delete(__p);
        }

        sub_100019CEC((uint64_t)v100);
        sub_100019CEC((uint64_t)v99);
        sub_10001AA60((uint64_t)v98);
        if ((unint64_t)v19 < v21)
        {
LABEL_36:
          uint64_t result = sub_10001BB34(v7, v32, a3, a4 & 1);
          a4 = 0;
          unint64_t v9 = v32 + 224;
          continue;
        }

        BOOL v33 = sub_10001C78C(v7, (char *)v32);
        unint64_t v9 = v32 + 224;
        uint64_t result = sub_10001C78C((_OWORD *)(v32 + 224), a2);
        if (!(_DWORD)result)
        {
          if (v33) {
            continue;
          }
          goto LABEL_36;
        }

        a2 = (char *)v32;
        if (!v33) {
          goto LABEL_2;
        }
        return result;
    }
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  *(_DWORD *)(a1 + 72) |= 8u;
  uint64_t v10 = *(void **)(a1 + 24);
  if (!v10)
  {
    uint64_t v10 = operator new(0x30uLL);
    *uint64_t v10 = off_10181A6A8;
    v10[1] = 0LL;
    void v10[2] = 2LL;
    v10[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v10 + 10) = 0;
    v10[4] = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  unint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    unint64_t v11 = *(void *)(qword_1019A0818 + 24);
  }
  sub_100066614((uint64_t)v10, v11);
  uint64_t v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x20u;
    __int128 v14 = *(void **)(a1 + 40);
    if (!v14)
    {
      __int128 v14 = operator new(0x30uLL);
      *__int128 v14 = off_10181A798;
      v14[1] = 0LL;
      void v14[2] = 4LL;
      v14[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_OWORD *)v14 + 2) = xmmword_1012CA3D0;
      *(void *)(a1 + 40) = v14;
    }

    __int128 v15 = *(void *)(a2 + 40);
    if (!v15) {
      __int128 v15 = *(void *)(qword_1019A0818 + 40);
    }
    sub_1000675D0((uint64_t)v14, v15);
    uint64_t v6 = *(_DWORD *)(a2 + 72);
    if ((v6 & 0x40) == 0)
    {
LABEL_13:
      if ((v6 & 0x80) == 0) {
        return *(float *)&v5;
      }
      goto LABEL_41;
    }

    goto LABEL_36;
  }

  uint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0818 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5LL, *(void *)(v5 + 32), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 52),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(11LL, *(void *)(v5 + 72), a2);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 29),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

        uint64_t v8 = v17;
        if (v17 < (unint64_t)v19)
        {
          unint64_t v23 = v19;
          do
          {
            double v103 = *(__n128 *)v8;
            uint64_t v112 = *(__n128 *)(v8 + 16);
            double v24 = v23[1];
            *(__n128 *)uint64_t v8 = *v23;
            *(__n128 *)(v8 + 16) = v24;
            char *v23 = v103;
            v23[1] = v112;
            do
            {
              unint64_t v25 = *(double *)(v8 + 56);
              v8 += 32LL;
            }

            while (v14 < v25);
            do
            {
              unint64_t v26 = v23[-1].n128_f64[1];
              v23 -= 2;
            }

            while (v14 >= v26);
          }

          while (v8 < (unint64_t)v23);
        }

        __int128 v27 = (_OWORD *)(v8 - 32);
        if (v8 - 32 != a1)
        {
          __int128 v28 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v28;
        }

        *(void *)(v8 - 16) = v99;
        __int128 *v27 = v96;
        *(double *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = v14;
        if (v17 < (unint64_t)v19)
        {
LABEL_32:
          sub_1000AF3BC(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v29 = sub_1000AFCC4(a1, v8 - 32);
        if (!sub_1000AFCC4(v8, (uint64_t)a2))
        {
          if (v29) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__n128 *)(v8 - 32);
        if (!v29) {
          goto LABEL_1;
        }
        return;
    }
  }

      sub_10010D370(a1, 1, v5);
      return v3 & 0x10000 | v4;
    case 4:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F618);
      }
      uint64_t v6 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v9 = 68289026;
        uint64_t v10 = 0;
        unint64_t v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state}",  (uint8_t *)&v9,  0x12u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181F618);
        }
      }

      unint64_t v7 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        unint64_t v9 = 68289026;
        uint64_t v10 = 0;
        unint64_t v11 = 2082;
        uint64_t v12 = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state",  "{msg%{public}.0s:MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state}",  (uint8_t *)&v9,  0x12u);
      }

      goto LABEL_15;
    case 5:
      sub_1000C67F0(*(void *)(a1 + 8) + 320LL);
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      *(_DWORD *)a1 = 0;
      return v3 & 0x10000 | v4;
    default:
LABEL_15:
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      return v3 & 0x10000 | v4;
  }

    if (v15 == v16)
    {
LABEL_47:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      std::string::size_type v36 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning No recording events for model type %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181FA48);
        }
        v65.__vftable = (std::bad_cast_vtbl *)0x104020100LL;
        __int128 v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning No recording events for model type %{public}d",  &v65,  8);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecorder::recordTruthLabelBetweenDates(const std::string &, NSUUID *const, NSDate *const, NSDate *const, const std::string &)",  "%s\n",  v41);
        if (v41 != buf) {
          free(v41);
        }
      }

      uint64_t v12 = 0LL;
    }

    else
    {
      sub_10002AC18(*(void *)(a1 + 40), (uint64_t)&v59, (uint64_t)&v62, (uint64_t)&v61, &v57);
      __int128 v55 = 0LL;
      __s = (std::string::value_type *)objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
      __int128 v53 = 0LL;
      __int128 v54 = 0LL;
      sub_10011A9B8((uint64_t *)&v53, 0xEEEEEEEEEEEEEEEFLL * ((v58 - v57) >> 4));
      __int128 v42 = (_DWORD *)a1;
      __int128 v50 = 0LL;
      __int128 v51 = 0LL;
      __int128 v52 = 0LL;
      sub_10011AA68(&v50, 0xEEEEEEEEEEEEEEEFLL * ((v58 - v57) >> 4));
      unint64_t v19 = v58;
      if (v57 != v58)
      {
        unint64_t v20 = v57 + 80;
        do
        {
          unint64_t v21 = *(_OWORD *)(v20 - 80);
          *(void *)&buf[16] = *(void *)(v20 - 64);
          *(_OWORD *)__int128 buf = v21;
          if (*(char *)(v20 - 33) < 0)
          {
            sub_1010DD48C(&buf[24], *(void **)(v20 - 56), *(void *)(v20 - 48));
          }

          else
          {
            double v22 = *(_OWORD *)(v20 - 56);
            uint64_t v70 = *(void *)(v20 - 40);
            *(_OWORD *)&buf[24] = v22;
          }

          unint64_t v23 = v20 - 80;
          double v24 = *(_OWORD *)(v20 - 32);
          *(_OWORD *)&v71[12] = *(_OWORD *)(v20 - 20);
          *(_OWORD *)uint64_t v71 = v24;
          sub_1000865CC(v72);
          unint64_t v25 = *(_OWORD *)(v20 + 136);
          v72[152] = *(_BYTE *)(v20 + 152);
          *(_OWORD *)&v72[136] = v25;
          LODWORD(v65.__vftable) = 0;
          sub_100018E34((int *)&v65);
          *(void *)&int64_t v68 = sub_100017338((ssize_t)&v65);
          *((void *)&v68 + 1) = v26;
          sub_100019D7C((unsigned int *)&v65);
          memset(&__str, 0, sizeof(__str));
          if ((sub_100013090((uint64_t)&v68, &__str) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v65);
            v65.__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
            sub_1000139B0((uint64_t)&v65);
          }

          sub_100063618((uint64_t)v44);
          v48 |= 2u;
          __int128 v27 = v45;
          if (v45 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            __int128 v27 = (std::string *)operator new(0x18uLL);
            v27->__r_.__value_.__r.__words[0] = 0LL;
            v27->__r_.__value_.__l.__size_ = 0LL;
            v27->__r_.__value_.__l.__cap_ = 0LL;
            double v45 = v27;
          }

          std::string::operator=(v27, a2);
          v48 |= 4u;
          __int128 v28 = v46;
          if (v46 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            __int128 v28 = (std::string *)operator new(0x18uLL);
            v28->__r_.__value_.__r.__words[0] = 0LL;
            v28->__r_.__value_.__l.__size_ = 0LL;
            v28->__r_.__value_.__l.__cap_ = 0LL;
            __int128 v46 = v28;
          }

          std::string::operator=(v28, &__str);
          __int128 v29 = __s;
          v48 |= 8u;
          double v30 = v47;
          if (v47 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            double v30 = (std::string *)operator new(0x18uLL);
            v30->__r_.__value_.__r.__words[0] = 0LL;
            v30->__r_.__value_.__l.__size_ = 0LL;
            v30->__r_.__value_.__l.__cap_ = 0LL;
            __int128 v47 = v30;
          }

          std::string::assign(v30, v29);
          double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
          sub_100119EA4((uint64_t)v44, 0, 0, 3u, (uint64_t)&v65, Current_1);
          uint64_t v63 = v68;
          double v64 = 1;
          uint64_t v32 = v54;
          if (v54 >= v55)
          {
            BOOL v33 = sub_10011BD10( (uint64_t *)&v53,  (uint64_t *)buf,  (double *)&buf[16],  a6,  (uint64_t)&v65,  (uint64_t)&v63,  (uint64_t *)v71);
          }

          else
          {
            sub_10011BE5C( (uint64_t)&v55,  v54,  (uint64_t *)buf,  (double *)&buf[16],  a6,  (uint64_t)&v65,  (uint64_t)&v63,  (uint64_t *)v71);
            BOOL v33 = v32 + 240;
          }

          __int128 v54 = v33;
          *(void *)&uint64_t v63 = v66;
          int v34 = v51;
          if (v51 >= v52)
          {
            double v35 = sub_10011BF68(&v50, (uint64_t *)&v68, (uint64_t)a2, &__s, (double *)&v63);
          }

          else
          {
            sub_10011C07C((uint64_t)&v52, v51, (uint64_t *)&v68, (uint64_t)a2, &__s, (double *)&v63);
            double v35 = v34 + 64;
          }

          __int128 v51 = v35;
          sub_100086708(&v65);
          sub_100073F80((wireless_diagnostics::google::protobuf::MessageLite *)v44);
          sub_100086708(v72);
          if (SHIBYTE(v70) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          v20 += 240LL;
        }

        while (v23 + 240 != v19);
      }

      if (*(_DWORD *)a1 == 1)
      {
        sub_10011AAF8(*(void **)(a1 + 8), &v53);
        sub_10011AB8C(*(void **)(a1 + 8), &v50);
        uint64_t v12 = 1LL;
      }

      else if (sub_100118654(*(void *)(a1 + 40), (uint64_t *)&v53))
      {
        uint64_t v12 = sub_1001181DC(*(void *)(a1 + 40), &v50);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      double v37 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v38 = *v42 == 1;
        *(_DWORD *)__int128 buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2050;
        *(void *)&buf[20] = 0xEEEEEEEEEEEEEEEFLL * ((v58 - v57) >> 4);
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v38;
        *(_WORD *)&buf[34] = 1026;
        *(_DWORD *)&buf[36] = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMicroLocationRecorder: record TruthLabel between dates, Num Matching Events:%{p ublic}lu, Is Recorder Active:%{public}hhd, Insertion Result:%{public}hhd}",  buf,  0x28u);
      }

      *(void *)__int128 buf = &v50;
      sub_100012948((void ***)buf);
      *(void *)__int128 buf = &v53;
      sub_10001A350((void ***)buf);
      *(void *)__int128 buf = &v57;
      sub_10001A350((void ***)buf);
    }

    if (v59)
    {
      uint64_t v60 = v59;
      operator delete(v59);
    }
  }

  return v12;
}

  sub_100019CEC((uint64_t)&v23);
  return a1;
}

    unint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    double v24 = *v23;
    unint64_t v25 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v25 = *v23;
    double v24 = (-1LL << result) - 1;
  }

  char *v23 = v25 & v24;
  unint64_t v26 = *(void *)(a2 + 16);
  __int128 v27 = __OFSUB__(v26, 1LL);
  __int128 v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *(_DWORD *)(a1 + 60) |= 4u;
  uint64_t v10 = *(char **)(a1 + 24);
  if (!v10)
  {
    uint64_t v10 = (char *)operator new(0x60uLL);
    *(void *)uint64_t v10 = off_1018274A8;
    *(_OWORD *)(v10 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *((void *)v10 + 11) = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  unint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    unint64_t v11 = *(void *)(qword_1019A0AA8 + 24);
  }
  sub_1001BEAB4((uint64_t)v10, v11);
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_8:
  if ((v5 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_31:
  *(_DWORD *)(a1 + 60) |= 0x10u;
  __int128 v14 = *(char **)(a1 + 40);
  if (!v14)
  {
    __int128 v14 = (char *)operator new(0x68uLL);
    *(void *)__int128 v14 = &off_101827430;
    *((_DWORD *)v14 + 23) = 0;
    *((_DWORD *)v14 + 24) = 0;
    *(_OWORD *)(v14 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *((_WORD *)v14 + 44) = 0;
    *(void *)(a1 + 40) = v14;
  }

  __int128 v15 = *(void *)(a2 + 40);
  if (!v15) {
    __int128 v15 = *(void *)(qword_1019A0AA8 + 40);
  }
  sub_1001BF2D0((uint64_t)v14, v15);
  if ((*(_DWORD *)(a2 + 60) & 0x20) != 0)
  {
LABEL_36:
    *(_DWORD *)(a1 + 60) |= 0x20u;
    __int128 v16 = *(char **)(a1 + 48);
    if (!v16)
    {
      __int128 v16 = (char *)operator new(0xB0uLL);
      *(void *)__int128 v16 = off_101827250;
      *((void *)v16 + 11) = 0LL;
      *((void *)v16 + 12) = 0LL;
      *((_DWORD *)v16 + 26) = 0;
      *((void *)v16 + 14) = 0LL;
      *((void *)v16 + 15) = 0LL;
      *((_DWORD *)v16 + 32) = 0;
      *(_OWORD *)(v16 + 136) = 0u;
      *(_OWORD *)(v16 + 152) = 0u;
      *((_DWORD *)v16 + 42) = 0;
      *(_OWORD *)(v16 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 6std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v16;
    }

    uint64_t v17 = *(void *)(a2 + 48);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_1019A0AA8 + 48);
    }
    sub_1001BF524((uint64_t)v16, v17);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0AF0 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v13 & 0xFF00) == 0) {
    goto LABEL_56;
  }
  if ((v13 & 0x100) != 0)
  {
    __int128 v15 = *(_BYTE *)(a2 + 112);
    *(_DWORD *)(a1 + 364) |= 0x100u;
    *(_BYTE *)(a1 + 112) = v15;
    char v13 = *(_DWORD *)(a2 + 364);
  }

  if ((v13 & 0x200) != 0)
  {
    __int128 v16 = *(_DWORD *)(a2 + 60);
    if (v16 >= 4) {
      sub_10122FBBC();
    }
    *(_DWORD *)(a1 + 364) |= 0x200u;
    *(_DWORD *)(a1 + 60) = v16;
    char v13 = *(_DWORD *)(a2 + 364);
  }

  if ((v13 & 0x400) != 0)
  {
    *(_DWORD *)(a1 + 364) |= 0x400u;
    double v24 = *(void **)(a1 + 64);
    if (!v24)
    {
      double v24 = operator new(0x20uLL);
      void *v24 = off_101827EC8;
      v24[1] = 0LL;
      v24[2] = 0LL;
      v24[3] = 0LL;
      *(void *)(a1 + 64) = v24;
    }

    unint64_t v25 = *(void *)(a2 + 64);
    if (!v25) {
      unint64_t v25 = *(void *)(qword_1019A0BA0 + 64);
    }
    sub_1001D60C0((uint64_t)v24, v25);
    char v13 = *(_DWORD *)(a2 + 364);
    if ((v13 & 0x800) == 0)
    {
LABEL_29:
      if ((v13 & 0x1000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
  }

  else if ((v13 & 0x800) == 0)
  {
    goto LABEL_29;
  }

  unint64_t v26 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 364) |= 0x800u;
  *(void *)(a1 + 72) = v26;
  char v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x1000) == 0)
  {
LABEL_30:
    if ((v13 & 0x2000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_49;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_31:
    __int128 v15 = *(void *)(a1 + 24);
    if (!v15) {
      __int128 v15 = *(void *)(qword_1019A0BD8 + 24);
    }
    __int128 v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DC634(v15, a2);
    uint64_t v17 = (int)v16;
    else {
      double v18 = 1;
    }
    v4 += v17 + v18 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }

  unint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    unint64_t v11 = *(void *)(qword_1019A0BD8 + 16);
  }
  uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D78C0(v11, a2);
  char v13 = (int)v12;
  else {
    __int128 v14 = 1;
  }
  v4 += v13 + v14 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 8) != 0) {
    goto LABEL_31;
  }
LABEL_23:
  if ((v3 & 0x10) != 0)
  {
LABEL_37:
    unint64_t v19 = *(void *)(a1 + 40);
    if (!v19) {
      unint64_t v19 = *(void *)(qword_1019A0BD8 + 40);
    }
    unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DD0A4(v19, a2);
    unint64_t v21 = (int)v20;
    else {
      double v22 = 1;
    }
    v4 += v21 + v22 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 100);
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    unint64_t v11 = *(_DWORD *)(a2 + 48);
    if (v11 >= 4) {
      sub_10122FD24();
    }
    *(_DWORD *)(a1 + 92) |= 0x100u;
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 92);
  }

  if ((v5 & 0x200) != 0)
  {
    uint64_t v12 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 92) |= 0x200u;
    *(void *)(a1 + 40) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 92);
    if ((v5 & 0x400) == 0)
    {
LABEL_27:
      if ((v5 & 0x800) == 0) {
        goto LABEL_28;
      }
      goto LABEL_35;
    }
  }

  else if ((v5 & 0x400) == 0)
  {
    goto LABEL_27;
  }

  char v13 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x400u;
  *(void *)(a1 + 56) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_28:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  a2,  *(float *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  a2,  *(float *)(v5 + 48),  a3);
  }

  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  *(_DWORD *)(a1 + 36) = LODWORD(v5);
  uint64_t v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_10:
  if ((v6 & 0x40) != 0)
  {
LABEL_11:
    unint64_t v7 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v7;
  }

  return *(float *)&v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

    unint64_t v11 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_31:
    char v13 = *(void *)(a1 + 24);
    if (!v13) {
      char v13 = *(void *)(qword_1019A0CB0 + 24);
    }
    __int128 v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EE218(v13, a2);
    __int128 v15 = (int)v14;
    else {
      __int128 v16 = 1;
    }
    v4 += v15 + v16 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 60);
    if ((v3 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }

  unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v12 = 11;
  }

  else if (v11 >= 0x80)
  {
    uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    uint64_t v12 = 2;
  }

  v4 += v12;
  if ((v3 & 8) != 0) {
    goto LABEL_31;
  }
LABEL_23:
  if ((v3 & 0x10) != 0)
  {
LABEL_37:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_1019A0CB0 + 32);
    }
    double v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EE9A0(v17, a2);
    unint64_t v19 = (int)v18;
    else {
      unint64_t v20 = 1;
    }
    v4 += v19 + v20 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v10 & 0x80000000) != 0)
  {
    unint64_t v11 = 11;
  }

  else if (v10 >= 0x80)
  {
    unint64_t v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 32);
  }

  else
  {
    unint64_t v11 = 2;
  }

  uint64_t v4 = (v11 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_30:
    uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v12 & 0x80000000) != 0)
    {
      char v13 = 11;
    }

    else if (v12 >= 0x80)
    {
      char v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }

    else
    {
      char v13 = 2;
    }

    uint64_t v4 = (v13 + v4);
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(float *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  LODWORD(v5) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) |= 4u;
  *(_DWORD *)(a1 + 24) = LODWORD(v5);
  uint64_t v6 = *(_DWORD *)(a2 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v6 & 0x10) != 0)
  {
LABEL_9:
    unint64_t v7 = *(_BYTE *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_BYTE *)(a1 + 32) = v7;
  }

  return *(float *)&v5;
}

  __int128 v14 = v4 + 5;
  if ((v3 & 4) == 0) {
    __int128 v14 = v4;
  }
  if ((v3 & 8) != 0) {
    v14 += 5;
  }
  if ((v3 & 0x10) != 0) {
    uint64_t result = v14 + 2;
  }
  else {
    uint64_t result = v14;
  }
LABEL_28:
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    __int128 v16 = *(void *)(a1 + 32);
    if (!v16) {
      __int128 v16 = *(void *)(qword_1019A0D28 + 32);
    }
    uint64_t v17 = *(unsigned __int8 *)(v16 + 24);
    if (*(_BYTE *)(v16 + 24))
    {
      double v18 = (v17 << 31 >> 31) & 5;
      if ((v17 & 2) != 0) {
        v18 += 5;
      }
      if ((v17 & 4) != 0) {
        uint64_t v17 = v18 + 5;
      }
      else {
        uint64_t v17 = v18;
      }
    }

    *(_DWORD *)(v16 + 20) = v17;
    v4 += v17 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 0x10) == 0) {
      goto LABEL_49;
    }
    goto LABEL_43;
  }

  char v13 = *(void *)(a1 + 24);
  if (!v13) {
    char v13 = *(void *)(qword_1019A0D28 + 24);
  }
  __int128 v14 = *(unsigned __int8 *)(v13 + 24);
  if (*(_BYTE *)(v13 + 24))
  {
    __int128 v15 = (v14 << 31 >> 31) & 5;
    if ((v14 & 2) != 0) {
      v15 += 5;
    }
    if ((v14 & 4) != 0) {
      __int128 v14 = v15 + 5;
    }
    else {
      __int128 v14 = v15;
    }
  }

  *(_DWORD *)(v13 + 20) = v14;
  v4 += v14 + 2;
  uint64_t v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 8) != 0) {
    goto LABEL_34;
  }
LABEL_23:
  if ((v3 & 0x10) != 0)
  {
LABEL_43:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v19 & 0x80000000) != 0)
    {
      unint64_t v20 = 11;
    }

    else if (v19 >= 0x80)
    {
      unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      unint64_t v20 = 2;
    }

    v4 += v20;
  }

  if ((v3 & 4) != 0) {
    v4 += 2;
  }
  if ((v3 & 8) != 0)
  {
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if (v13 >= 0x80)
    {
      __int128 v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      __int128 v14 = 2;
    }

    v4 += v14;
    if ((v3 & 0x10) == 0)
    {
LABEL_25:
      if ((v3 & 0x20) == 0) {
        goto LABEL_46;
      }
LABEL_37:
      uint64_t v17 = *(void *)(a1 + 32);
      if (!v17) {
        uint64_t v17 = *(void *)(qword_1019A0D38 + 32);
      }
      if ((*(_BYTE *)(v17 + 16) & 1) != 0)
      {
        unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v17 + 8);
        if (v19 > 0x7F)
        {
          double v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
          double v18 = v22 + 1;
          *(_DWORD *)(v17 + 12) = v22 + 1;
          if ((v22 + 1) >= 0x80)
          {
            unint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v22 + 1),  v23);
            goto LABEL_45;
          }

  if ((v3 & 4) != 0)
  {
    unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      uint64_t v12 = 2;
    }

    v4 += v12;
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  if ((v3 & 8) != 0)
  {
LABEL_30:
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v13 & 0x80000000) != 0)
    {
      __int128 v14 = 11;
    }

    else if (v13 >= 0x80)
    {
      __int128 v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      __int128 v14 = 2;
    }

    v4 += v14;
  }

        if (v9 != 4)
        {
          continue;
        }

        return 1LL;
      case 4u:
        unint64_t v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
        goto LABEL_74;
      default:
        unint64_t v9 = TagFallback & 7;
        goto LABEL_21;
    }
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  if ((v3 & 4) != 0)
  {
    unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      uint64_t v12 = 2;
    }

    v4 += v12;
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  if ((v3 & 8) != 0)
  {
LABEL_30:
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v13 & 0x80000000) != 0)
    {
      __int128 v14 = 11;
    }

    else if (v13 >= 0x80)
    {
      __int128 v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      __int128 v14 = 2;
    }

    v4 += v14;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0DD8 + 16);
  }
  unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002030E0(v10, a2);
  uint64_t v12 = (int)v11;
  else {
    char v13 = 1;
  }
  uint64_t v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_30:
    __int128 v14 = *(void *)(a1 + 24);
    if (!v14) {
      __int128 v14 = *(void *)(qword_1019A0DD8 + 24);
    }
    __int128 v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100203A2C(v14, a2);
    uint64_t v17 = (int)v15;
    else {
      double v18 = 1;
    }
    uint64_t v4 = (v4 + v17 + v18 + 1);
  }

  unint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    unint64_t v11 = *(void *)(qword_1019A0DE8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  }

  double v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v24;
  *(_OWORD *)(a3 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 128);
  *(void *)(a3 + 144) = *(void *)(a2 + 144);
  unint64_t v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v25;
  unint64_t v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v26;
  uint64_t result = *(__n128 *)a2;
  __int128 v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v27;
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_durationInSeconds),  @"durationInSeconds");
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  PBDataWriterWriteDoubleField(a3, 5LL, self->_hrMax);
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_7:
    if ((has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  *((void *)a3 + 6) = *(void *)&self->_hrMax;
  *((_WORD *)a3 + 52) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_7:
    if ((has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  *((void *)result + 1) = *(void *)&self->_durationInSeconds;
  *((_WORD *)result + 52) |= 1u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  self->_hrMax = *((double *)a3 + 6);
  *(_WORD *)&self->_has |= 0x20u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x40) == 0)
  {
LABEL_7:
    if ((v3 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  double v18 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289283;
    double v37 = 0;
    unint64_t v38 = 2082;
    __int16 v39 = "";
    double v40 = 2049;
    __int128 v41 = (id)v16;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#VerifyHost result, result:%{private}lu}",  buf,  0x1Cu);
  }

  if (v16 == 2)
  {
    (*((void (**)(id, uint64_t, void))a5 + 2))(a5, 2LL, 0LL);
  }

  else if (v16 == 1)
  {
    (*((void (**)(id, void, NSURLCredential *))a5 + 2))( a5,  0,  +[NSURLCredential credentialForTrust:]( NSURLCredential,  "credentialForTrust:",  objc_msgSend(objc_msgSend(a4, "protectionSpace"), "serverTrust")));
  }

  else
  {
    (*((void (**)(id, uint64_t, void))a5 + 2))(a5, 1LL, 0LL);
  }

  return v16;
}

  -[CLVO2MaxCloudKitManager deleteLocalVO2MaxData](self, "deleteLocalVO2MaxData");
  -[CLVO2MaxCloudKitManager deleteCloudKitRecords](self, "deleteCloudKitRecords");
}

  if (error) {
    CFRelease(error);
  }

  return v5 != 0LL;
}

    char v13 = v17;
    operator delete(v16);
    v11 += 168LL;
    if (v11 - *v14 == 4032)
    {
      double v18 = v14[1];
      ++v14;
      unint64_t v11 = v18;
    }

    if (v11 == v12) {
      goto LABEL_24;
    }
  }

  if ((unint64_t)(v15 - 17) < 2)
  {
LABEL_17:
    __int128 v16 = operator new(0x20uLL);
    *(void *)&uint8_t buf[8] = v16 + 4;
    *(void *)&buf[16] = v16 + 4;
    *(_OWORD *)__int128 v16 = xmmword_1012E54D8;
    *((_OWORD *)v16 + 1) = unk_1012E54E8;
    *(void *)__int128 buf = v16;
    uint64_t v17 = sub_1002C5094(a1, *(void *)(v11 + 48), (double *)a2, (uint64_t **)buf, (_BYTE *)&v39 + 7, v13, 0.0);
    goto LABEL_21;
  }

  if (v15 == 19)
  {
    __int128 v16 = operator new(0x10uLL);
    *(void *)&uint8_t buf[8] = v16 + 2;
    *(void *)&buf[16] = v16 + 2;
    *__int128 v16 = 4LL;
    v16[1] = &_mh_execute_header;
    *(void *)__int128 buf = v16;
    uint64_t v17 = sub_1002C5094( a1,  *(void *)(v11 + 48),  (double *)a2,  (uint64_t **)buf,  (_BYTE *)&v39 + 7,  v13,  *(double *)(a2 + 32));
    goto LABEL_21;
  }

        uint64_t v8 = v23;
        if (v23 < (unint64_t)v25)
        {
          __int128 v29 = v25;
          do
          {
            __int128 v146 = *(_OWORD *)v8;
            char v182 = *(_OWORD *)(v8 + 48);
            int v194 = *(_OWORD *)(v8 + 64);
            v158 = *(_OWORD *)(v8 + 16);
            uint64_t v170 = *(_OWORD *)(v8 + 32);
            double v30 = *((_OWORD *)v29 + 4);
            uint64_t v32 = *((_OWORD *)v29 + 1);
            double v31 = *((_OWORD *)v29 + 2);
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((_OWORD *)v29 + 3);
            *(_OWORD *)(v8 + 64) = v30;
            *(_OWORD *)(v8 + 16) = v32;
            *(_OWORD *)(v8 + 32) = v31;
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v29;
            *((_OWORD *)v29 + 3) = v182;
            *((_OWORD *)v29 + 4) = v194;
            *((_OWORD *)v29 + 1) = v158;
            *((_OWORD *)v29 + 2) = v170;
            *(_OWORD *)__int128 v29 = v146;
            do
            {
              BOOL v33 = *(double *)(v8 + 88);
              v8 += 80LL;
            }

            while (v33 < v19);
            do
            {
              int v34 = *(v29 - 9);
              v29 -= 10;
            }

            while (v34 >= v19);
          }

          while (v8 < (unint64_t)v29);
        }

        if (v8 - 80 != a1)
        {
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 80);
          double v35 = *(_OWORD *)(v8 - 64);
          std::string::size_type v36 = *(_OWORD *)(v8 - 48);
          double v37 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 16) = v35;
          *(_OWORD *)(a1 + 32) = v36;
        }

        *(void *)(v8 - 80) = v21;
        *(double *)(v8 - 72) = v19;
        *(_OWORD *)(v8 - 32) = v139;
        *(_OWORD *)(v8 - 16) = v142;
        *(_OWORD *)(v8 - 64) = v133;
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v136;
        if (v23 < (unint64_t)v25)
        {
LABEL_32:
          sub_100305940(a1, v8 - 80, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        unint64_t v38 = sub_100306608(a1, v8 - 80);
        if (!sub_100306608(v8, (uint64_t)a2))
        {
          if (v38) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (double *)(v8 - 80);
        if (!v38) {
          goto LABEL_1;
        }
        return;
    }
  }

    unint64_t v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_phenolicLocation),  @"phenolicLocation");
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_11:
    if ((has & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_23:
    objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_provenance),  @"provenance");
    if ((*(_WORD *)&self->_has & 0x200) == 0) {
      return v4;
    }
    goto LABEL_13;
  }

  PBDataWriterWriteUint32Field(a3, self->_provenance, 10LL);
  if ((*(_WORD *)&self->_has & 0x200) != 0) {
    goto LABEL_22;
  }
}

  *((_DWORD *)a3 + 10) = self->_provenance;
  *((_WORD *)a3 + 36) |= 0x20u;
  if ((*(_WORD *)&self->_has & 0x200) == 0) {
    return;
  }
LABEL_11:
  *((_BYTE *)a3 + 6std::iostream::~basic_iostream(v2, v3 + 8) = self->_clearClient;
  *((_WORD *)a3 + 36) |= 0x200u;
}

  self->_phenolicLocation = *((_DWORD *)a3 + 12);
  *(_WORD *)&self->_has |= 0x80u;
  uint64_t v5 = *((_WORD *)a3 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  unint64_t v11 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) |= 4u;
  *(_DWORD *)(a1 + 16) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t v12 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 52) |= 8u;
  char v13 = *(std::string **)(a1 + 16);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v13 = (std::string *)operator new(0x18uLL);
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v13;
  }

  std::string::operator=(v13, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_29:
    __int128 v16 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    uint64_t v17 = *(std::string **)(a1 + 40);
    if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v17 = (std::string *)operator new(0x18uLL);
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 40) = v17;
    }

    std::string::operator=(v17, v16);
    uint64_t v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x40) == 0)
    {
LABEL_12:
      if ((v5 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

    goto LABEL_32;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  uint64_t v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) |= 4u;
  *(_DWORD *)(a1 + 16) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 36),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

    uint64_t v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_11;
    }

  uint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1368 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  }

  *(_DWORD *)(a1 + 52) |= 8u;
  unint64_t v11 = *(_OWORD **)(a1 + 24);
  if (!v11)
  {
    unint64_t v11 = operator new(0x50uLL);
    *(void *)unint64_t v11 = off_101845D28;
    void v11[3] = 0u;
    v11[4] = 0u;
    *(_OWORD *)((char *)v11 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)((char *)v11 + 24) = 0u;
    *((_DWORD *)v11 + 10) = 0;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A13A0 + 24);
  }
  sub_100632A50((uint64_t)v11, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_11:
  if ((v5 & 0x20) == 0) {
    goto LABEL_12;
  }
LABEL_31:
  __int128 v15 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v15;
  if ((*(_DWORD *)(a2 + 52) & 0x40) != 0)
  {
LABEL_13:
    unint64_t v7 = *(_BYTE *)(a2 + 44);
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_BYTE *)(a1 + 44) = v7;
  }

        if (v10 == 4) {
          return 1LL;
        }
      }
    }

    uint64_t v10 = TagFallback & 7;
    if (v10 != 2) {
      goto LABEL_21;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    char v13 = *(unsigned int **)(a1 + 8);
    if (!v13)
    {
      char v13 = (unsigned int *)operator new(0x18uLL);
      *((void *)v13 + 1) = 0LL;
      *((void *)v13 + 2) = 0LL;
      *(void *)char v13 = off_101846340;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v13;
    }

    __int128 v14 = (char *)*((void *)this + 1);
    if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
    {
    }

    else
    {
      __int128 v27 = *v14;
      *((void *)this + 1) = v14 + 1;
    }

    __int128 v16 = *((_DWORD *)this + 14);
    uint64_t v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0LL;
    }
    double v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    unint64_t v20 = *((_DWORD *)this + 14);
    unint64_t v21 = __OFSUB__(v20, 1);
    double v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    unint64_t v23 = (_BYTE *)*((void *)this + 1);
    unint64_t v11 = *((void *)this + 2);
    if ((unint64_t)v23 < v11 && *v23 == 16)
    {
      __int128 v15 = v23 + 1;
      *((void *)this + 1) = v15;
      goto LABEL_33;
    }
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  uint64_t v6 = v5[17];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  unint64_t v7 = *(void *)(v5 + 32);
  if (!v7) {
    unint64_t v7 = *(void *)(qword_1019A14B0 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v7,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  *(_DWORD *)(a1 + 52) |= 8u;
  unint64_t v11 = *(_OWORD **)(a1 + 24);
  if (!v11)
  {
    unint64_t v11 = operator new(0x50uLL);
    *(void *)unint64_t v11 = off_101845D28;
    void v11[3] = 0u;
    v11[4] = 0u;
    *(_OWORD *)((char *)v11 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)((char *)v11 + 24) = 0u;
    *((_DWORD *)v11 + 10) = 0;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A14B8 + 24);
  }
  sub_100632A50((uint64_t)v11, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_11:
  if ((v5 & 0x20) == 0) {
    goto LABEL_12;
  }
LABEL_31:
  __int128 v15 = *(_DWORD *)(a2 + 40);
  if (v15 >= 4) {
    sub_101241B9C();
  }
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v15;
  if ((*(_DWORD *)(a2 + 52) & 0x40) != 0)
  {
LABEL_13:
    unint64_t v7 = *(_BYTE *)(a2 + 44);
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_BYTE *)(a1 + 44) = v7;
  }

  if (qword_101934610 != -1) {
    dispatch_once(&qword_101934610, &stru_1018480A0);
  }
  uint64_t v8 = (os_log_s *)qword_101934618;
  if (os_log_type_enabled((os_log_t)qword_101934618, OS_LOG_TYPE_ERROR))
  {
    sub_100FE3FB4(a1, (uint64_t)v23);
    if (v24 >= 0) {
      unint64_t v9 = v23;
    }
    else {
      unint64_t v9 = (void **)v23[0];
    }
    sub_100FE370C(a1);
    uint64_t v10 = (void *)(a1 + 128);
    sub_100FE370C(a1);
    unint64_t v11 = (void *)(a1 + 104);
    uint64_t v12 = (void *)(a1 + 48);
    char v13 = (void *)(a1 + 24);
    sub_1011E2990(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 buf = 68290562;
    unint64_t v26 = 0;
    __int128 v27 = 2082;
    __int128 v28 = "";
    __int128 v29 = 2082;
    double v30 = v9;
    double v31 = 2082;
    uint64_t v32 = (void **)v10;
    BOOL v33 = 2082;
    int v34 = v11;
    double v35 = 2082;
    std::string::size_type v36 = v12;
    double v37 = 2082;
    unint64_t v38 = v13;
    __int16 v39 = 2082;
    double v40 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Unable to find bundleId or executable!, clientKey:%{public, location:escape_only}s,  pluginBundleId:%{public, location:escape_only}s, bundleId:%{public, location:escape_only}s, bundlePath:% {public, location:escape_only}s, executable:%{public, location:escape_only}s, client:%{public, location:escape_only}s}",  buf,  0x4Eu);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (qword_101934610 != -1) {
      dispatch_once(&qword_101934610, &stru_1018480A0);
    }
  }

  __int128 v15 = (os_log_s *)qword_101934618;
  if (os_signpost_enabled((os_log_t)qword_101934618))
  {
    __int128 v16 = v23;
    sub_100FE3FB4(a1, (uint64_t)v23);
    if (v24 < 0) {
      __int128 v16 = (void **)v23[0];
    }
    sub_100FE370C(a1);
    sub_100FE370C(a1);
    uint64_t v17 = (void *)(a1 + 104);
    double v18 = (void *)(a1 + 48);
    unint64_t v19 = (void *)(a1 + 24);
    sub_1011E2990(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v20 = &__p;
    }
    else {
      unint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 buf = 68290562;
    unint64_t v26 = 0;
    __int128 v27 = 2082;
    __int128 v28 = "";
    __int128 v29 = 2082;
    double v30 = v16;
    double v31 = 2082;
    uint64_t v32 = v3;
    BOOL v33 = 2082;
    int v34 = v17;
    double v35 = 2082;
    std::string::size_type v36 = v18;
    double v37 = 2082;
    unint64_t v38 = v19;
    __int16 v39 = 2082;
    double v40 = v20;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unable to find bundleId or executable!",  "{msg%{public}.0s:Unable to find bundleId or executable!, clientKey:%{public, location:escape_only}s,  pluginBundleId:%{public, location:escape_only}s, bundleId:%{public, location:escape_only}s, bundlePath:% {public, location:escape_only}s, executable:%{public, location:escape_only}s, client:%{public, location:escape_only}s}",  buf,  0x4Eu);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }

  return 0LL;
}

  uint64_t v12 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 80) |= 0x10u;
  *(void *)(a1 + 40) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_23:
  *(_DWORD *)(a1 + 80) |= 0x40u;
  __int128 v14 = *(_DWORD **)(a1 + 56);
  if (!v14)
  {
    __int128 v14 = operator new(0x20uLL);
    v14[5] = 0;
    v14[6] = 0;
    *(void *)__int128 v14 = off_101849D38;
    *((void *)v14 + 1) = 0LL;
    *((_BYTE *)v14 + 16) = 0;
    *(void *)(a1 + 56) = v14;
  }

  __int128 v15 = *(void *)(a2 + 56);
  if (!v15) {
    __int128 v15 = *(void *)(qword_1019A14F0 + 56);
  }
  sub_1006D1A88((uint64_t)v14, v15);
  uint64_t v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x80) != 0)
  {
LABEL_28:
    __int128 v16 = *(_DWORD *)(a2 + 64);
    if (v16 >= 3) {
      sub_101243874();
    }
    *(_DWORD *)(a1 + 80) |= 0x80u;
    *(_DWORD *)(a1 + 64) = v16;
    uint64_t v5 = *(_DWORD *)(a2 + 80);
  }

  if ((v3 & 4) != 0)
  {
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v10 = 11;
    }

    else if (v9 >= 0x80)
    {
      uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    }

    else
    {
      uint64_t v10 = 2;
    }

    uint64_t v4 = (v10 + v4);
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v3 & 4) != 0) {
    uint64_t v4 = (v4 + 2);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    unint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    uint64_t v12 = v11;
    char v13 = *(void *)(v10 + 8);
    if ((v11 & 0x80u) == 0) {
      __int128 v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      __int128 v14 = v13;
    }
    if (v14 >= 0x80)
    {
      __int128 v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14,  a2);
      unint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      char v13 = *(void *)(v10 + 8);
      uint64_t v3 = *(_DWORD *)(a1 + 52);
      uint64_t v12 = *(_BYTE *)(v10 + 23);
    }

    else
    {
      __int128 v15 = 1;
    }

    if (v12 < 0) {
      unint64_t v11 = v13;
    }
    uint64_t v4 = (v4 + v15 + v11 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_26:
      if ((v3 & 0x20) == 0) {
        goto LABEL_27;
      }
      goto LABEL_47;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_26;
  }

  __int128 v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  double v18 = v17;
  unint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    unint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20,  a2);
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
    unint64_t v19 = *(void *)(v16 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 52);
    double v18 = *(_BYTE *)(v16 + 23);
  }

  else
  {
    unint64_t v21 = 1;
  }

  if (v18 < 0) {
    uint64_t v17 = v19;
  }
  uint64_t v4 = (v4 + v21 + v17 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_27:
    if ((v3 & 0x40) == 0) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  double v18 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    sub_1007C9854(a1, *a2, (uint64_t)__p);
    unint64_t v19 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#ca,ERROR,invalid,measurement,%{public}s",  buf,  0xCu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    unint64_t v25 = qword_101934A48;
    sub_1007C9854(a1, *a2, (uint64_t)buf);
    if (v34 >= 0) {
      unint64_t v26 = buf;
    }
    else {
      unint64_t v26 = *(_BYTE **)buf;
    }
    double v35 = 136446210;
    std::string::size_type v36 = v26;
    LODWORD(v29) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v25,  2LL,  "#ca,ERROR,invalid,measurement,%{public}s",  &v35,  v29);
    __int128 v28 = v27;
    if (v34 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, Measu rementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std ::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]",  "%s\n",  v28);
    return 0LL;
  }

  return result;
}

    *(_DWORD *)__int128 buf = 79;
    unint64_t v9 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v10 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v11 = -[__CFString intValue](v9, "intValue");
      *(_DWORD *)__int128 buf = 67109120;
      v153 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ca,callSim,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      uint64_t v12 = qword_101934A48;
      char v13 = -[__CFString intValue](v9, "intValue");
      v150 = 67109120;
      v151 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  0LL,  "#ca,callSim,%d",  &v150);
      __int128 v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v14);
      goto LABEL_188;
    }

    goto LABEL_34;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[10],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[10],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  char v13 = *(void *)(a1 + 24);
  if (!v13) {
    char v13 = *(void *)(qword_1019A17D0 + 24);
  }
  __int128 v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100811328(v13, a2);
  __int128 v15 = (int)v14;
  else {
    __int128 v16 = 1;
  }
  v4 += v15 + v16 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 8) != 0)
  {
LABEL_30:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_1019A17D0 + 32);
    }
    double v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v17 + 16));
    *(_DWORD *)(v17 + 24) = (_DWORD)v18;
    else {
      unint64_t v19 = 1;
    }
    v4 += (_DWORD)v18 + v19 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 72);
  }

    *(_DWORD *)(a1 + 56) |= 4u;
    uint64_t v10 = *(void **)(a1 + 24);
    if (!v10)
    {
      uint64_t v10 = operator new(0x28uLL);
      v10[1] = 0LL;
      void v10[2] = 0LL;
      *uint64_t v10 = off_101858EB8;
      *((_DWORD *)v10 + 6) = 0;
      v10[4] = 0LL;
      *(void *)(a1 + 24) = v10;
    }

    unint64_t v11 = *(void *)(a2 + 24);
    if (!v11) {
      unint64_t v11 = *(void *)(qword_1019A1818 + 24);
    }
    sub_100810EA8(v10, v11);
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }

  if ((v3 & 4) != 0)
  {
    char v13 = *(void *)(a1 + 24);
    if (!v13) {
      char v13 = *(void *)(qword_1019A1818 + 24);
    }
    __int128 v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100811328(v13, a2);
    __int128 v15 = (int)v14;
    else {
      __int128 v16 = 1;
    }
    v4 += v15 + v16 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }

  if ((v3 & 8) != 0)
  {
LABEL_30:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_1019A1818 + 32);
    }
    double v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100818570(v17, a2);
    unint64_t v19 = (int)v18;
    else {
      unint64_t v20 = 1;
    }
    v4 += v19 + v20 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 56);
  }

  unint64_t v21 = *a3;
  if (*a3 < v20)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }

    double v22 = vabdd_f64(v20, v21);
    unint64_t v23 = fabs(v20);
    double v24 = fabs(v21);
    if (v23 < v24) {
      unint64_t v23 = v24;
    }
    unint64_t v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
    if (v22 > v25) {
LABEL_65:
    }
      sub_10124CBE0();
  }

  if (v20 < -180.0)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t v26 = vabdd_f64(-180.0, v20), v27 = fmax(fabs(v20), 180.0), v27 >= 1.0)
        ? (__int128 v28 = v27 * 2.22044605e-16)
        : (__int128 v28 = 2.22044605e-16),
          v26 > v28))
    {
      sub_10124CBB8();
    }
  }

  __int128 v29 = v21 - v20;
  uint64_t result = 360.0;
  if (v29 > 360.0)
  {
    if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_67;
    }
    double v31 = fabs(v29 + -360.0);
    uint64_t v32 = fabs(v29);
    if (v32 >= 360.0) {
      uint64_t result = v32;
    }
    uint64_t result = result >= 1.0 ? result * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > result) {
LABEL_67:
    }
      sub_10124CB90();
  }

  return result;
}

    *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
    unint64_t v21 = *(_OWORD *)(a1 + 16);
    double v22 = *(_OWORD *)(a1 + 32);
    unint64_t v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    double v24 = *(_OWORD *)(a1 + 80);
    unint64_t v25 = *(_OWORD *)(a1 + 96);
    unint64_t v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    __int128 v27 = *(_OWORD *)(a1 + 144);
    __int128 v28 = *(_OWORD *)(a1 + 160);
    __int128 v29 = *(_OWORD *)(a1 + 176);
    *(void *)(v8 + 192) = *(void *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }

  while (v5 <= v7);
  return a1;
}

    *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
    unint64_t v21 = *(_OWORD *)(a1 + 16);
    double v22 = *(_OWORD *)(a1 + 32);
    unint64_t v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    double v24 = *(_OWORD *)(a1 + 80);
    unint64_t v25 = *(_OWORD *)(a1 + 96);
    unint64_t v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    __int128 v27 = *(_OWORD *)(a1 + 144);
    __int128 v28 = *(_OWORD *)(a1 + 160);
    __int128 v29 = *(_OWORD *)(a1 + 176);
    *(void *)(v8 + 192) = *(void *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }

  while (v5 <= v7);
  return a1;
}

        uint64_t v8 = v22;
        if (v22 < v24)
        {
          __int128 v28 = v24;
          do
          {
            unint64_t v143 = *(void *)(v8 + 32);
            uint64_t v124 = *(_OWORD *)v8;
            v133 = *(_OWORD *)(v8 + 16);
            __int128 v29 = *(_OWORD *)v28;
            double v30 = *(_OWORD *)(v28 + 16);
            *(void *)(v8 + 32) = *(void *)(v28 + 32);
            *(_OWORD *)uint64_t v8 = v29;
            *(_OWORD *)(v8 + 16) = v30;
            *(void *)(v28 + 32) = v143;
            *(_OWORD *)__int128 v28 = v124;
            *(_OWORD *)(v28 + 16) = v133;
            do
            {
              double v31 = *(double *)(v8 + 48);
              v8 += 40LL;
            }

            while (v31 < v18);
            do
            {
              uint64_t v32 = *(double *)(v28 - 32);
              v28 -= 40LL;
            }

            while (v32 >= v18);
          }

          while (v8 < v28);
        }

        if (v8 - 40 != a1)
        {
          BOOL v33 = *(_OWORD *)(v8 - 40);
          int v34 = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 32) = *(void *)(v8 - 8);
          *(_OWORD *)a1 = v33;
          *(_OWORD *)(a1 + 16) = v34;
        }

        *(double *)(v8 - 40) = v20;
        *(double *)(v8 - 32) = v18;
        *(void *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = v120;
        *(_OWORD *)(v8 - 24) = v117;
        if (v22 < v24)
        {
LABEL_32:
          sub_10091954C(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        double v35 = sub_100919FA8(a1, v8 - 40);
        if (!sub_100919FA8(v8, a2))
        {
          if (v35) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v8 - 40;
        if (!v35) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          double v30 = v26;
          do
          {
            __int128 v157 = *(_OWORD *)v8;
            uint64_t v169 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v204 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v204[16] = *(_OWORD *)(v8 + 80);
            __int128 v180 = *(_OWORD *)(v8 + 32);
            uint64_t v192 = *(_OWORD *)(v8 + 48);
            uint64_t v32 = *((_OWORD *)v30 + 3);
            double v31 = *((_OWORD *)v30 + 4);
            BOOL v33 = *((_OWORD *)v30 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v30 + 76);
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v32;
            *(_OWORD *)(v8 + 64) = v31;
            *(_OWORD *)(v8 + 32) = v33;
            int v34 = *((_OWORD *)v30 + 1);
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v30;
            *(_OWORD *)(v8 + 16) = v34;
            *(_OWORD *)double v30 = v157;
            *((_OWORD *)v30 + 1) = v169;
            *(_OWORD *)((char *)v30 + 76) = *(_OWORD *)&v204[12];
            *((_OWORD *)v30 + 3) = v192;
            *((_OWORD *)v30 + 4) = *(_OWORD *)v204;
            *((_OWORD *)v30 + 2) = v180;
            do
            {
              double v35 = *(double *)(v8 + 104);
              v8 += 96LL;
            }

            while (v35 < v20);
            do
            {
              std::string::size_type v36 = *(v30 - 11);
              v30 -= 12;
            }

            while (v36 >= v20);
          }

          while (v8 < (unint64_t)v30);
        }

        if (v8 - 96 != a1)
        {
          double v37 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 16) = v37;
          unint64_t v38 = *(_OWORD *)(v8 - 64);
          __int16 v39 = *(_OWORD *)(v8 - 48);
          double v40 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
          *(_OWORD *)(a1 + 64) = v40;
          *(_OWORD *)(a1 + 32) = v38;
        }

        *(void *)(v8 - 96) = v22;
        *(double *)(v8 - 8std::iostream::~basic_iostream(v2, v3 + 8) = v20;
        *(_OWORD *)(v8 - 80) = v144;
        *(_OWORD *)(v8 - 20) = *(_OWORD *)&v153[12];
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v150;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v153;
        *(_OWORD *)(v8 - 64) = v147;
        if (v24 < (unint64_t)v26)
        {
LABEL_32:
          sub_10091B0BC(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v41 = sub_10091BE84(a1, v8 - 96);
        if (!sub_10091BE84(v8, (uint64_t)a2))
        {
          if (v41) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (_OWORD *)(v8 - 96);
        if (!v41) {
          goto LABEL_1;
        }
        return;
    }
  }

              sub_1000E8F38(&v77, (__int128 *)buf);
              v72 += 208;
              goto LABEL_22;
            }

            unint64_t v20 = *(void *)buf;
            if (!*(_BYTE *)(*(void *)buf + 80LL)) {
              goto LABEL_22;
            }
          }

          unint64_t v21 = *(_DWORD *)(v20 + 104);
          if (v21 >= 1) {
            *(double *)(v20 + 96) = (double)v21 * 3.7;
          }
          goto LABEL_21;
        }
      }

      unint64_t v9 = [v10 countByEnumeratingWithState:&v73 objects:v118 count:16];
      if (!v9)
      {
LABEL_37:
        uint64_t v2 = v10;
        int v34 = v72;
        goto LABEL_41;
      }
    }
  }

  *(int32x2_t *)(v4 + 120) = vadd_s32(*(int32x2_t *)(v4 + 120), (int32x2_t)0x100000001LL);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101862CF0);
  }
  unint64_t v25 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    __int128 v27 = *(void *)(a1 + 64);
    unint64_t v26 = *(void *)(a1 + 72);
    __int128 v28 = *(void *)(a1 + 56);
    double v30 = *(_DWORD *)(v4 + 112);
    __int128 v29 = *(_DWORD *)(v4 + 116);
    double v31 = *(_DWORD *)(v4 + 120);
    uint64_t v32 = *(_DWORD *)(v4 + 124);
    BOOL v33 = *(unsigned __int8 *)(a1 + 88);
    *(_DWORD *)__int128 buf = 134285313;
    *(void *)&uint8_t buf[4] = v27;
    *(_WORD *)&buf[12] = 2049;
    *(void *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2050;
    *(void *)BOOL v102 = v28;
    *(_WORD *)&v102[8] = 1026;
    *(_DWORD *)double v103 = v29;
    *(_WORD *)&v103[4] = 1026;
    *(_DWORD *)&v103[6] = v30;
    __int128 v104 = 1026;
    *(_DWORD *)unsigned int v105 = v31;
    *(_WORD *)&v105[4] = 1026;
    *(_DWORD *)&v105[6] = v32;
    *(_WORD *)uint64_t v106 = 1026;
    *(_DWORD *)&void v106[2] = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2 lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{pub lic}d,network,%{public}d",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101862CF0);
    }
    __int128 v50 = *(void *)(a1 + 64);
    __int128 v49 = *(void *)(a1 + 72);
    __int128 v51 = *(void *)(a1 + 56);
    __int128 v53 = *(_DWORD *)(v4 + 112);
    __int128 v52 = *(_DWORD *)(v4 + 116);
    __int128 v54 = *(_DWORD *)(v4 + 120);
    __int128 v55 = *(_DWORD *)(v4 + 124);
    __int128 v56 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v82 = 134285313;
    *(void *)unint64_t v83 = v50;
    *(_WORD *)&v83[8] = 2049;
    *(void *)uint64_t v84 = v49;
    *(_WORD *)&v84[8] = 2050;
    *(void *)std::string v85 = v51;
    *(_WORD *)&v85[8] = 1026;
    *(_DWORD *)uint64_t v86 = v52;
    *(_WORD *)&v86[4] = 1026;
    *(_DWORD *)&v86[6] = v53;
    uint64_t v87 = 1026;
    *(_DWORD *)uint64_t v88 = v54;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v55;
    *(_WORD *)double v89 = 1026;
    *(_DWORD *)&void v89[2] = v56;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2 lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{pub lic}d,network,%{public}d",  &v82,  62);
    uint64_t v58 = (char *)v57;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const doubl e, const BOOL, const BOOL)_block_invoke",  "%s\n",  v57);
    if (v58 != buf) {
      free(v58);
    }
  }

  int v34 = 0;
LABEL_41:
  *(_BYTE *)(v4 + 224) = 0;
  if (*(double *)(a1 + 56) > *(double *)(v4 + 160))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101862CF0);
    }
    double v35 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      if (v2) {
        std::string::size_type v36 = [v2 count];
      }
      else {
        std::string::size_type v36 = 0;
      }
      double v37 = 0.0;
      __int16 v39 = *(void *)(a1 + 64);
      unint64_t v38 = *(void *)(a1 + 72);
      double v40 = *(void *)(a1 + 56);
      __int128 v41 = *(void *)(v4 + 320);
      __int128 v43 = *(_DWORD *)(v4 + 112);
      __int128 v42 = *(_DWORD *)(v4 + 116);
      double v44 = *(_DWORD *)(v4 + 120);
      double v45 = *(_DWORD *)(v4 + 124);
      __int128 v46 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)__int128 buf = 67243265;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v34;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&buf[16] = v37;
      *(_WORD *)BOOL v102 = 2049;
      *(void *)&v102[2] = v39;
      *(_WORD *)double v103 = 2049;
      *(void *)&v103[2] = v38;
      __int128 v104 = 2050;
      *(void *)unsigned int v105 = v40;
      *(_WORD *)&v105[8] = 1026;
      *(_DWORD *)uint64_t v106 = v2 == 0LL;
      *(_WORD *)&v106[4] = 1026;
      uint64_t v107 = v42;
      uint64_t v108 = 2050;
      uint64_t v109 = v41;
      uint64_t v110 = 1026;
      uint64_t v111 = v43;
      uint64_t v112 = 1026;
      uint64_t v113 = v44;
      uint64_t v114 = 1026;
      uint64_t v115 = v45;
      uint64_t v116 = 1026;
      uint64_t v117 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{pri vate}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{p ublic}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d",  buf,  0x64u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101862CF0);
      }
      __int128 v47 = qword_1019348B8;
      if (v2) {
        __int128 v48 = [v2 count];
      }
      else {
        __int128 v48 = 0;
      }
      uint64_t v59 = 0.0;
      double v61 = *(void *)(a1 + 64);
      uint64_t v60 = *(void *)(a1 + 72);
      double v62 = *(void *)(a1 + 56);
      uint64_t v63 = *(void *)(v4 + 320);
      uint64_t v65 = *(_DWORD *)(v4 + 112);
      double v64 = *(_DWORD *)(v4 + 116);
      int64_t v66 = *(_DWORD *)(v4 + 120);
      int64_t v67 = *(_DWORD *)(v4 + 124);
      int64_t v68 = *(unsigned __int8 *)(a1 + 88);
      uint64_t v82 = 67243265;
      *(_DWORD *)unint64_t v83 = v48;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = v34;
      *(_WORD *)uint64_t v84 = 2050;
      *(double *)&v84[2] = v59;
      *(_WORD *)std::string v85 = 2049;
      *(void *)&v85[2] = v61;
      *(_WORD *)uint64_t v86 = 2049;
      *(void *)&v86[2] = v60;
      uint64_t v87 = 2050;
      *(void *)uint64_t v88 = v62;
      *(_WORD *)&v88[8] = 1026;
      *(_DWORD *)double v89 = v2 == 0LL;
      *(_WORD *)&v89[4] = 1026;
      uint64_t v90 = v64;
      uint64_t v91 = 2050;
      v92 = v63;
      uint64_t v93 = 1026;
      uint64_t v94 = v65;
      uint64_t v95 = 1026;
      uint64_t v96 = v66;
      uint64_t v97 = 1026;
      uint64_t v98 = v67;
      v99 = 1026;
      __int128 v100 = v68;
      LODWORD(v71) = 100;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{pri vate}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{p ublic}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d",  &v82,  v71);
      uint64_t v70 = (char *)v69;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const dou ble, const BOOL, const BOOL)_block_invoke",  "%s\n",  v69);
      if (v70 != buf) {
        free(v70);
      }
    }
  }

  *(void *)__int128 buf = &v77;
  sub_10004CC28((void ***)buf);
  sub_100008390((uint64_t)&v80, v81[0]);
}

  *(float *)&uint64_t v4 = self->_hrConfidence;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"hrConfidence");
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_7:
    if ((has & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  PBDataWriterWriteInt32Field(a3, self->_gradeType, 6LL);
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_8:
    if ((has & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  *((_DWORD *)a3 + 12) = self->_gradeType;
  *((_WORD *)a3 + 38) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_8:
    if ((has & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  *((_DWORD *)result + 14) = LODWORD(self->_hrConfidence);
  *((_WORD *)result + 38) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_7:
    if ((has & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  self->_gradeType = *((_DWORD *)a3 + 12);
  *(_WORD *)&self->_has |= 0x20u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 2) == 0)
  {
LABEL_8:
    if ((v3 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

    std::stringbuf::str(&v57, &v60);
    if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v17 = &v57;
    }
    else {
      uint64_t v17 = (std::stringbuf::string_type *)v57.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(a1 + 64, (char *)v17, &v56);
    double v18 = (sqlite3_stmt *)sub_100019240(v56);
    if (!*(_BYTE *)a2) {
      goto LABEL_34;
    }
    unint64_t v19 = sub_1009F034C((int *)(a2 + 8));
    {
      unint64_t v20 = (int *)sub_1009EDE9C((_BYTE *)a2);
      unint64_t v21 = sub_1009F0830(v20);
      if (!v21)
      {
        *(void *)__int128 buf = &off_101866D38;
        sub_1009F07E0();
      }

      double v22 = sub_1005B46E8((uint64_t)v21);
      if (!sub_1003C2D24(v18, 1, v22)) {
        goto LABEL_55;
      }
    }

    if (!*(_BYTE *)a2) {
      goto LABEL_34;
    }
    unint64_t v23 = sub_1009F034C((int *)(a2 + 8));
    double v24 = (int *)sub_1009EDE9C((_BYTE *)a2);
    unint64_t v25 = (char *)sub_1009F0A70(v24);
    unint64_t v26 = v25;
    if (!v25)
    {
      *(void *)__int128 buf = &off_101866D38;
      sub_1009F07E0();
    }

    if (v25[23] < 0) {
      unint64_t v26 = *(char **)v25;
    }
    if (!sub_1003BC1F0(v18, 1, v26))
    {
LABEL_55:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }

    else
    {
LABEL_34:
      __int128 v27 = j__sqlite3_step(v18);
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      if (v27 == 100)
      {
        __asm { FMOV            V0.2D, #-1.0 }

        __int128 v49 = _Q0;
        do
        {
          BOOL v33 = sqlite3_column_int64(v18, 0);
          nullsub_10(v33);
          __int128 v55 = v34;
          *(void *)&uint8_t buf[4] = 0LL;
          double v64 = 0.0;
          uint64_t v65 = xmmword_1012E0070;
          int64_t v66 = v49;
          int64_t v67 = v49;
          int64_t v68 = v49;
          *(_DWORD *)__int128 buf = 0xFFFF;
          uint64_t v69 = 0;
          uint64_t v70 = 0xBFF0000000000000LL;
          uint64_t v71 = 0LL;
          uint64_t v72 = 0LL;
          uint64_t v73 = 0;
          uint64_t v74 = 0xBFF0000000000000LL;
          uint64_t v75 = 0x7FFFFFFF;
          uint64_t v77 = 0LL;
          uint64_t v78 = 0LL;
          uint64_t v76 = 0LL;
          uint64_t v79 = 0;
          *(void *)&uint8_t buf[4] = sqlite3_column_double(v18, 1);
          double v64 = sqlite3_column_double(v18, 2);
          *(void *)&uint64_t v65 = sqlite3_column_double(v18, 3);
          *((void *)&v65 + 1) = sqlite3_column_double(v18, 4);
          *(void *)&int64_t v66 = sqlite3_column_double(v18, 5);
          __int128 v54 = sqlite3_column_int(v18, 6);
          __int128 v53 = sqlite3_column_double(v18, 7);
          __int128 v52 = sqlite3_column_double(v18, 8);
          __int128 v51 = sqlite3_column_int(v18, 9);
          double v35 = (char *)sqlite3_column_text(v18, 10);
          sub_1010DDBC0(&__p, v35);
          __int128 v50 = 0LL;
          std::string::size_type v36 = sqlite3_column_blob(v18, 11);
          double v37 = sqlite3_column_bytes(v18, 11);
          if (v36 && v37) {
            __int128 v50 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", v36, v37);
          }
          unint64_t v38 = a3[1];
          if (v38 >= a3[2])
          {
            __int16 v39 = sub_1009F0AB8(a3, &v55, (uint64_t)buf, &v54, &v52, &v53, &v51, &__p, (uint64_t *)&v50);
          }

          else
          {
            sub_100607090(a3[1], &v55, (uint64_t)buf, v54, v51, &__p, (uint64_t)v50, v52, v53);
            __int16 v39 = v38 + 112;
            a3[1] = v38 + 112;
          }

          a3[1] = v39;
        }

        while (sqlite3_step(v18) == 100);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101866B30);
        }
        double v40 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          __int128 v41 = 0x6DB6DB6DB6DB6DB7LL * ((a3[1] - *a3) >> 4);
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "CLWifiAssociatedApCentroidDatabase, got %{public}zu entries",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101866B30);
          }
          __int128 v42 = 0x6DB6DB6DB6DB6DB7LL * ((a3[1] - *a3) >> 4);
          LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLWifiAssociatedApCentroidDatabase, got %{public}zu entries",  &__p,  12);
          double v44 = (char *)v43;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLWifiAssociatedApCentroidDatabaseEntry> CLWifiAssociatedApCentroidDatabase::getEntries(Optional QueryParam) const",  "%s\n",  v43);
          if (v44 != buf) {
            free(v44);
          }
        }
      }
    }

    double v45 = v56;
    __int128 v56 = 0LL;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
    }
    *(void *)((char *)v58
    uint64_t v59 = v46;
    std::streambuf::~streambuf(&v60);
    std::ios::~ios(&v61);
    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101866B30);
  }
  __int128 v14 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call getAllEntries() without a backing database in CLWifiAssociatedApCentroidDatabase!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101866B30);
    }
    LOWORD(v58[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "#Warning Attempt to call getAllEntries() without a backing database in CLWifiAssociatedApCentroidDatabase!",  v58,  2);
    __int128 v48 = (char *)v47;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLWifiAssociatedApCentroidDatabaseEntry> CLWifiAssociatedApCentroidDatabase::getEntries(OptionalQueryParam) const",  "%s\n",  v47);
    if (v48 != buf) {
      free(v48);
    }
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
}

  sub_1002F0B04(buf);
  double v30 = (unsigned __int8 *)(a1 + 617);
  double v31 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceUseGpsPositioning", (BOOL *)(a1 + 617));
  uint64_t v32 = v31;
  BOOL v33 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_25;
  }
  int v34 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    double v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!v32) {
      goto LABEL_31;
    }
  }

  else
  {
LABEL_25:
    if (!v31) {
      goto LABEL_31;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  std::string::size_type v36 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    double v37 = *v30;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding GPS positioning usage to %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    uint64_t v124 = *v30;
    __int16 v161 = 67174657;
    LODWORD(v162) = v124;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding GPS positioning usage to %{private}d",  &v161,  v157);
    uint64_t v126 = (char *)v125;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v125);
  }

    uint64_t v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_11;
    }

  unint64_t v11 = *(_BYTE *)(a2 + 10);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(_BYTE *)(a1 + 10) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v13 & 0xFF00) == 0) {
    return;
  }
  if ((v13 & 0x100) != 0)
  {
    __int128 v15 = *(_DWORD *)(a2 + 56);
    if (v15 >= 7) {
      sub_10125A160();
    }
    *(_DWORD *)(a1 + 116) |= 0x100u;
    *(_DWORD *)(a1 + 56) = v15;
    char v13 = *(_DWORD *)(a2 + 116);
  }

  if ((v13 & 0x200) != 0)
  {
    __int128 v16 = *(_DWORD *)(a2 + 60);
    if (v16 >= 7) {
      sub_10125A138();
    }
    *(_DWORD *)(a1 + 116) |= 0x200u;
    *(_DWORD *)(a1 + 60) = v16;
    char v13 = *(_DWORD *)(a2 + 116);
  }

  if ((v13 & 0x400) != 0)
  {
    __int128 v29 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 116) |= 0x400u;
    *(_DWORD *)(a1 + 64) = v29;
    char v13 = *(_DWORD *)(a2 + 116);
    if ((v13 & 0x800) == 0)
    {
LABEL_30:
      if ((v13 & 0x1000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_61;
    }
  }

  else if ((v13 & 0x800) == 0)
  {
    goto LABEL_30;
  }

  double v30 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 116) |= 0x800u;
  *(_DWORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = v30;
  char v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 0x1000) == 0)
  {
LABEL_31:
    if ((v13 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

        if (v7 == 4) {
          return 1LL;
        }
      }

      unint64_t v7 = TagFallback & 7;
      if (v7 != 1) {
        goto LABEL_21;
      }
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0) {
        return 0LL;
      }
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v20;
      uint64_t v8 = *(_DWORD *)(a1 + 28) | 1;
      *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v8;
      unint64_t v9 = (_BYTE *)*((void *)this + 1);
    }

    while ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 18);
    *((void *)this + 1) = v9 + 1;
LABEL_15:
    *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v8 | 2;
    uint64_t v10 = *(char **)(a1 + 16);
    if (!v10)
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v10 = off_101869668;
      *(_OWORD *)(v10 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(void *)(a1 + 16) = v10;
    }

    unint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
    }

    else
    {
      unint64_t v21 = *v11;
      *((void *)this + 1) = v11 + 1;
    }

    uint64_t v12 = *((_DWORD *)this + 14);
    char v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0LL;
    }
    __int128 v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v21);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    __int128 v16 = *((_DWORD *)this + 14);
    uint64_t v17 = __OFSUB__(v16, 1);
    double v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v3 & 0x10) != 0)
  {
    char v13 = *(void *)(a1 + 72);
    if (!v13) {
      char v13 = *(void *)(qword_1019A1B68 + 72);
    }
    __int128 v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A57B90(v13, a2);
    __int128 v15 = (int)v14;
    else {
      __int128 v16 = 1;
    }
    v4 += v15 + v16 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 132);
  }

  uint64_t v17 = v4 + 9;
  if ((v3 & 0x20) == 0) {
    uint64_t v17 = v4;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t v5 = v17 + 9;
  }
  else {
    uint64_t v5 = v17;
  }
  if ((v3 & 0x80) != 0)
  {
    double v18 = *(void *)(a1 + 96);
    if (!v18) {
      double v18 = *(void *)(qword_1019A1B68 + 96);
    }
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A584E8(v18, a2);
    unint64_t v20 = (int)v19;
    else {
      unint64_t v21 = 1;
    }
    v5 += v20 + v21 + 1;
  }

        uint64_t v8 = v23;
        if (v23 < (unint64_t)v25)
        {
          __int128 v29 = v25;
          do
          {
            uint64_t v145 = *(__n128 *)v8;
            __int128 v157 = *(__n128 *)(v8 + 16);
            v190 = *(__n128 *)(v8 + 64);
            v199 = *(__n128 *)(v8 + 80);
            uint64_t v169 = *(__n128 *)(v8 + 32);
            v181 = *(__n128 *)(v8 + 48);
            double v30 = v29[5];
            uint64_t v32 = v29[2];
            double v31 = v29[3];
            *(__n128 *)(v8 + 64) = v29[4];
            *(__n128 *)(v8 + 80) = v30;
            *(__n128 *)(v8 + 32) = v32;
            *(__n128 *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v31;
            BOOL v33 = v29[1];
            *(__n128 *)uint64_t v8 = *v29;
            *(__n128 *)(v8 + 16) = v33;
            *__int128 v29 = v145;
            v29[1] = v157;
            v29[4] = v190;
            v29[5] = v199;
            v29[2] = v169;
            v29[3] = v181;
            do
            {
              int v34 = *(_DWORD *)(v8 + 144);
              v8 += 96LL;
            }

            while (v34 < v20);
            do
            {
              double v35 = v29[-3].n128_i32[0];
              v29 -= 6;
            }

            while (v35 >= v20);
          }

          while (v8 < (unint64_t)v29);
        }

        std::string::size_type v36 = (__n128 *)(v8 - 96);
        if (v8 - 96 != a1)
        {
          double v37 = *(_OWORD *)(v8 - 80);
          *(__n128 *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v37;
          unint64_t v38 = *(_OWORD *)(v8 - 64);
          __int16 v39 = *(_OWORD *)(v8 - 48);
          double v40 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 80) = v40;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
        }

        double *v36 = v213;
        *(_OWORD *)(v8 - 80) = v219;
        *(_OWORD *)(v8 - 64) = v225;
        *(_DWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v20;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v210[12];
        *(_OWORD *)(v8 - 2std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)v210;
        *(_OWORD *)(v8 - 44) = v207;
        if (v23 < (unint64_t)v25)
        {
LABEL_32:
          sub_100A6C4CC(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v41 = sub_100A6D218(a1, v8 - 96);
        if (!sub_100A6D218(v8, (uint64_t)a2))
        {
          if (v41) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__n128 *)(v8 - 96);
        if (!v41) {
          goto LABEL_1;
        }
        return;
    }
  }

  unint64_t v11 = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_BYTE *)(a1 + 26) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_15:
  if ((v5 & 0x40) == 0) {
    goto LABEL_16;
  }
LABEL_23:
  char v13 = *(_DWORD *)(a2 + 28);
  if (v13 >= 0xC) {
    sub_10125F928();
  }
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_25:
    __int128 v14 = *(_DWORD *)(a2 + 32);
    if ((sub_1001D2F60(v14) & 1) == 0) {
      sub_10125F900();
    }
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 64);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 26),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 36),  (BOOL)a2,  a4);
  }

  *(double *)__int128 buf = v25 - *(double *)(a2 + 120);
  *(double *)&uint8_t buf[8] = (double)v4;
  __int128 v27 = sub_100B6BD3C((void *)(a1 + 152), buf);
  __int128 v28 = sub_100B6BDF8(v27, (void *)(a1 + 152));
  *(double *)(a1 + 72) = v28;
  *(double *)(a1 + 80) = sub_100B6BE5C(v29, (void *)(a1 + 152));
  if (v28 >= 60.0)
  {
    uint64_t v81 = xmmword_1012CE4D0;
    do
    {
      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_1012CE4D0);
      double v30 = sub_100232D40(a1 + 152, 1);
      double v31 = sub_100B6BDF8(v30, (void *)(a1 + 152));
      *(double *)(a1 + 72) = v31;
      *(double *)(a1 + 80) = sub_100B6BE5C(v32, (void *)(a1 + 152));
    }

    while (v31 >= 60.0);
  }

  unint64_t v11 = -1;
  uint64_t v12 = v5;
LABEL_34:
  double v40 = *(double *)(a2 + 112);
  *(double *)(a1 + 40) = v40;
  __int128 v41 = *(double *)(a1 + 88);
  if (v41 > 0.0)
  {
    __int128 v42 = v40 - *(double *)(a1 + 96);
    __int128 v43 = 0.0;
    if (v42 <= 900.0)
    {
      double v44 = v41 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
      __int128 v43 = 0.0;
      if (v44 >= 0.0) {
        __int128 v43 = v44;
      }
    }

    *(double *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v43;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_1018738C0);
  }
  double v45 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    __int128 v46 = *(void *)(a2 + 112);
    __int128 v48 = *(void *)(a1 + 56);
    __int128 v47 = *(void *)(a1 + 64);
    __int128 v50 = *(void *)(a1 + 72);
    __int128 v49 = *(void *)(a1 + 80);
    *(_DWORD *)__int128 buf = 134221568;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    uint64_t v114 = 2048;
    uint64_t v115 = v47;
    uint64_t v116 = 2048;
    uint64_t v117 = v48;
    uint64_t v118 = 2048;
    uint64_t v119 = v49;
    int v120 = 2048;
    __int128 v121 = v50;
    char v122 = 2048;
    uint64_t v123 = 0x40247AE147AE147BLL;
    uint64_t v124 = 2048;
    char v125 = v6;
    uint64_t v126 = 1024;
    uint64_t v127 = 14;
    uint64_t v128 = 2048;
    uint64_t v129 = 0x404E000000000000LL;
    uint64_t v130 = 2048;
    v131 = v12;
    int v132 = 1024;
    v133 = 42;
    int v134 = 2048;
    v135 = 0x404E000000000000LL;
    int v136 = 2048;
    v137 = v5;
    int v138 = 1024;
    __int16 v139 = 32;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPus hBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,Thr esholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageMo delCount,%.3f,CoverageModelThreshold,%d",  buf,  0x88u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018738C0);
    }
    uint64_t v74 = *(void *)(a2 + 112);
    uint64_t v76 = *(void *)(a1 + 56);
    uint64_t v75 = *(void *)(a1 + 64);
    uint64_t v78 = *(void *)(a1 + 72);
    uint64_t v77 = *(void *)(a1 + 80);
    *(_DWORD *)uint64_t v84 = 134221568;
    *(void *)&v84[4] = v74;
    std::string v85 = 1024;
    uint64_t v86 = v11;
    uint64_t v87 = 2048;
    uint64_t v88 = v75;
    double v89 = 2048;
    uint64_t v90 = v76;
    uint64_t v91 = 2048;
    v92 = v77;
    uint64_t v93 = 2048;
    uint64_t v94 = v78;
    uint64_t v95 = 2048;
    uint64_t v96 = 0x40247AE147AE147BLL;
    uint64_t v97 = 2048;
    uint64_t v98 = v6;
    v99 = 1024;
    __int128 v100 = 14;
    CFStringRef v101 = 2048;
    BOOL v102 = 0x404E000000000000LL;
    double v103 = 2048;
    __int128 v104 = v12;
    unsigned int v105 = 1024;
    uint64_t v106 = 42;
    uint64_t v107 = 2048;
    uint64_t v108 = 0x404E000000000000LL;
    uint64_t v109 = 2048;
    uint64_t v110 = v5;
    uint64_t v111 = 1024;
    uint64_t v112 = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPus hBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,Thr esholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageMo delCount,%.3f,CoverageModelThreshold,%d",  COERCE_DOUBLE(v84),  136,  *(double *)&v81,  *((double *)&v81 + 1),  v82,  v83);
    uint64_t v80 = (char *)v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLExerciseMinuteWheelChairEstimator::feedNatalie(double, const CLNatalieModelInput &)",  "%s\n",  v79);
    if (v80 != buf) {
      free(v80);
    }
  }

  *(_DWORD *)(a1 + 396) |= 8u;
  unint64_t v11 = *(void **)(a1 + 24);
  if (!v11)
  {
    unint64_t v11 = operator new(0x28uLL);
    *unint64_t v11 = &off_101875690;
    v11[1] = 0LL;
    *((_DWORD *)v11 + 4) = 0;
    *((_BYTE *)v11 + 20) = 0;
    void v11[3] = 0LL;
    v11[4] = 0LL;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A1D38 + 24);
  }
  sub_100BB8604((uint64_t)v11, v12);
  unint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    *(_DWORD *)(a1 + 396) |= 0x20u;
    __int128 v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      __int128 v15 = operator new(0x28uLL);
      v15[1] = 0LL;
      void v15[2] = 0LL;
      *__int128 v15 = off_101875870;
      *((_DWORD *)v15 + 6) = 0;
      v15[4] = 0LL;
      *(void *)(a1 + 40) = v15;
    }

    __int128 v16 = *(void *)(a2 + 40);
    if (!v16) {
      __int128 v16 = *(void *)(qword_1019A1D38 + 40);
    }
    sub_100BB883C(v15, v16);
    unint64_t v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x40) == 0)
    {
LABEL_15:
      if ((v7 & 0x80) == 0) {
        goto LABEL_46;
      }
      goto LABEL_41;
    }

    goto LABEL_36;
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

    if (v7 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v4,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

        if (v10 != 4)
        {
          continue;
        }

        return 1LL;
      default:
        uint64_t v10 = TagFallback & 7;
        goto LABEL_21;
    }
  }

  uint64_t v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 16) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 40),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 48),  a2,  a4);
  }

  unint64_t v7 = 0;
  if (v11 < 0) {
LABEL_22:
  }
    operator delete(__p[0]);
  return v4 & v7;
}

    double v35 = (void *)CLConnectionMessage::name(*a2);
    std::string::size_type v36 = *((char *)v35 + 23);
    if (v36 < 0)
    {
      if (v35[1] != 41LL) {
        goto LABEL_27;
      }
      double v35 = (void *)*v35;
    }

    else if (v36 != 41)
    {
      goto LABEL_27;
    }

    if (!memcmp(v35, "Monitor/kCLConnectionMessageMonitorRemove", 0x29uLL))
    {
      objc_msgSend( v24,  "removeRecordFromMonitoringWithIdentifier:",  objc_msgSend(v26, "objectForKeyedSubscript:", @"kCLConnectionMessageMonitorIdentifierKey"));
      goto LABEL_62;
    }

        uint64_t v8 = v18;
        if (v18 < v20)
        {
          double v24 = v20;
          do
          {
            unint64_t v25 = *v8;
            *uint64_t v8 = *v24;
            void *v24 = v25;
            unint64_t v26 = v8[1];
            v8[1] = v24[1];
            v24[1] = v26;
            do
            {
              __int128 v27 = v8[3];
              v8 += 2;
            }

            while (v27 > (int)v16);
            do
            {
              __int128 v28 = *(v24 - 1);
              v24 -= 2;
            }

            while (v28 <= (int)v16);
          }

          while (v8 < v24);
        }

        if (v8 - 2 != v7)
        {
          *unint64_t v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }

        *(v8 - 2) = v15;
        *(v8 - 1) = v16;
        if (v18 < v20)
        {
LABEL_32:
          uint64_t result = (int *)sub_100C6E718(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v29 = sub_100C6EF50(v7, v8 - 2);
        uint64_t result = (int *)sub_100C6EF50(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v8 - 2;
        if (!v29) {
          goto LABEL_2;
        }
        return result;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_groundAltitudeUncertainty),  @"groundAltitudeUncertainty");
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_10:
    if ((has & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_26:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  self->_tropicalSavannaBranchCount),  @"tropicalSavannaBranchCount");
    if ((*(_WORD *)&self->_has & 0x100) == 0) {
      return v3;
    }
    goto LABEL_12;
  }

  PBDataWriterWriteInt32Field(a3, self->_tropicalSavannaProximity, 9LL);
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_11:
    if ((has & 0x100) == 0) {
      return;
    }
LABEL_23:
    PBDataWriterWriteUint64Field(a3, self->_tropicalSavannaTreeId, 11LL);
    return;
  }

  *((_DWORD *)a3 + 21) = self->_tropicalSavannaProximity;
  *((_WORD *)a3 + 44) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_11:
    if ((has & 0x100) == 0) {
      return;
    }
LABEL_23:
    *((void *)a3 + 9) = self->_tropicalSavannaTreeId;
    *((_WORD *)a3 + 44) |= 0x100u;
    return;
  }

  *((void *)result + 4) = *(void *)&self->_groundAltitudeUncertainty;
  *((_WORD *)result + 44) |= 8u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_10:
    if ((has & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  self->_tropicalSavannaProximity = *((_DWORD *)a3 + 21);
  *(_WORD *)&self->_has |= 0x400u;
  uint64_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 0x200) == 0)
  {
LABEL_11:
    if ((v3 & 0x100) == 0) {
      return;
    }
LABEL_23:
    self->_tropicalSavannaTreeId = *((void *)a3 + 9);
    *(_WORD *)&self->_has |= 0x100u;
    return;
  }

    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    return result;
  }

  if (0xF83E0F83E0F83E1LL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    __int128 v27 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3);
    uint64_t result = sub_100D7457C(a2, v27, (uint64_t)v8);
    uint64_t v12 = *(void *)(a1 + 8);
    while (v27 != a3)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v27;
      __int128 v28 = *(_OWORD *)(v27 + 16);
      __int128 v29 = *(_OWORD *)(v27 + 32);
      double v30 = *(_OWORD *)(v27 + 64);
      *(_OWORD *)(v12 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v12 + 64) = v30;
      *(_OWORD *)(v12 + 16) = v28;
      *(_OWORD *)(v12 + 32) = v29;
      double v31 = *(_OWORD *)(v27 + 80);
      uint64_t v32 = *(_OWORD *)(v27 + 96);
      BOOL v33 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(v27 + 112);
      *(_OWORD *)(v12 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v33;
      *(_OWORD *)(v12 + 80) = v31;
      *(_OWORD *)(v12 + 96) = v32;
      int v34 = *(_OWORD *)(v27 + 144);
      double v35 = *(_OWORD *)(v27 + 160);
      std::string::size_type v36 = *(_OWORD *)(v27 + 192);
      *(_OWORD *)(v12 + 176) = *(_OWORD *)(v27 + 176);
      *(_OWORD *)(v12 + 192) = v36;
      *(_OWORD *)(v12 + 144) = v34;
      *(_OWORD *)(v12 + 160) = v35;
      double v37 = *(void *)(v27 + 216);
      *(void *)(v12 + 20std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(v27 + 208);
      *(void *)(v12 + 216) = v37;
      if (v37)
      {
        unint64_t v38 = (unint64_t *)(v37 + 8);
        do
          __int16 v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }

      double v40 = *(_OWORD *)(v27 + 224);
      __int128 v41 = *(_OWORD *)(v27 + 240);
      *(void *)(v12 + 256) = *(void *)(v27 + 256);
      *(_OWORD *)(v12 + 224) = v40;
      *(_OWORD *)(v12 + 240) = v41;
      v27 += 264LL;
      v12 += 264LL;
    }

    goto LABEL_21;
  }

  uint64_t result = sub_100D7457C(a2, a3, (uint64_t)v8);
  __int128 v43 = v42;
  double v44 = *(void *)(a1 + 8);
  if (v44 != v42)
  {
    do
    {
      double v45 = v44 - 264;
      uint64_t result = sub_10000AE14(v44 - 56);
      double v44 = v45;
    }

    while (v45 != v43);
  }

  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v43;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  if ((v3 & 4) != 0)
  {
    unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      uint64_t v12 = 2;
    }

    v4 += v12;
  }

  if ((v3 & 8) != 0) {
    uint64_t result = v4 + 9;
  }
  else {
    uint64_t result = v4;
  }
LABEL_31:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 22),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 24),  (BOOL)a2,  a4);
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  sub_1003CC884((uint64_t)sub_100E9F6A4, a1, *(void **)(a1 + 32), &buf);
  double v22 = buf;
  *(void *)&__int128 buf = 0LL;
  unint64_t v23 = *(void *)v4;
  *(void *)uint64_t v4 = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    double v24 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  [*(id *)(*(void *)v4 + 16) register:*(void *)(*(void *)v4 + 8) forNotification:3 registrationInfo:0];
  *(void *)(a1 + 136) = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0,  0,  (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  unint64_t v25 = operator new(0x38uLL);
  sub_1010DDBC0(&buf, "com.apple.locationd.beaconprovider");
  sub_1006B5FBC(v25, &buf, sub_100E9F874, a1, *(void *)(a1 + 40), 1LL, 1.79769313e308, 1.79769313e308, 0.9);
  *(void *)(a1 + 152) = v25;
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)buf);
  }
  *(void *)&__int128 buf = &buf;
  *((void *)&buf + 1) = &buf;
  __int16 v39 = 0LL;
  double v40 = &off_10182CE18;
  *(_OWORD *)__int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = &off_10182CE18;
  __int128 __p = 0u;
  double v45 = 0u;
  __int128 v46 = 1;
  __int128 v47 = 0;
  std::string::size_type v36 = 2;
  (*(void (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v36,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
  unint64_t v26 = -[CLWPBridge initWithQueue:]( [CLWPBridge alloc],  "initWithQueue:",  [*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 120) = v26;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100E9FA34;
  v35[3] = &unk_10181FB10;
  v35[4] = a1;
  -[CLWPBridge registerForStateUpdates:](v26, "registerForStateUpdates:", v35);
  sub_100E9FE58(a1);
  __int128 v43 = &off_10182CE18;
  if (SBYTE7(v45) < 0) {
    operator delete((void *)__p);
  }
  double v40 = &off_10182CE18;
  if (SBYTE7(v42) < 0) {
    operator delete(v41[0]);
  }
  sub_100527BBC((uint64_t *)&buf);
  return a1;
}

      uint64_t v17 = 0LL;
      if (!v5) {
        return v17;
      }
      goto LABEL_112;
    }

    unint64_t v9 = vabdd_f64(v10, v11);
    if (v9 > 5.0)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      unint64_t v20 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 134349312;
        unsigned int v105 = v4;
        uint64_t v106 = 2050;
        *(double *)uint64_t v107 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        uint64_t v81 = 134349312;
        uint64_t v82 = v4;
        unint64_t v83 = 2050;
        uint64_t v84 = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf",  &v81,  22);
        uint64_t v71 = (uint8_t *)v70;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v70);
        if (v71 != buf) {
          free(v71);
        }
      }

      sub_100EB34B4((uint64_t)a1);
      a1[267] = 0LL;
      a1[266] = 0LL;
      *((_DWORD *)a1 + 536) = 0;
      a1[269] = 0LL;
      a1[271] = 0LL;
      a1[270] = 0LL;
    }
  }

  unint64_t v21 = sub_100F1F620(a2);
  if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, double))(*a1 + 48))(a1, a2, a1 + 33, v21) & 1) == 0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    __int128 v29 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134349056;
      unsigned int v105 = v4;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      uint64_t v81 = 134349056;
      uint64_t v82 = v4;
      LODWORD(v72) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,not matching",  &v81,  v72);
      double v61 = (uint8_t *)v60;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v60);
      if (v61 != buf) {
        free(v61);
      }
    }

    uint64_t v17 = 1LL;
    if (v5) {
      goto LABEL_112;
    }
    return v17;
  }

  double v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 56))(a1, a2);
  (*(void (**)(void *, uint64_t))(*v6 + 32LL))(v6, v22);
  (*(void (**)(void *, uint64_t, double))(*v6 + 48LL))(v6, a2, 450.0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 32))(a1, a2, a1 + 33);
  sub_100EB4DF0((uint64_t)a1, a2);
  sub_100D2D9A4((uint64_t)&v81);
  uint64_t v86 = 0;
  memset(v85, 0, sizeof(v85));
  __asm { FMOV            V0.2D, #-1.0 }

  uint64_t v87 = _Q0;
  v89[0] = 0LL;
  v89[1] = 0LL;
  uint64_t v88 = v89;
  sub_100EB3338((uint64_t)v90);
  double v103 = 0;
  uint64_t v74 = a1 + 30;
  sub_100EB5A6C(a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v81, a2);
  sub_100EB6254((uint64_t)a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v81, a2);
  if (((*(uint64_t (**)(uint64_t *, int *, uint64_t *))(*a1 + 72))(a1, &v81, a1 + 33) & 1) == 0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    double v30 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134349056;
      unsigned int v105 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filterReset, assessMatch failed",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_64;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    uint64_t v75 = 134349056;
    uint64_t v76 = v4;
    LODWORD(v72) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filterReset, assessMatch failed",  &v75,  v72);
    uint64_t v32 = (uint8_t *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v31);
    goto LABEL_141;
  }

  if (((*(uint64_t (**)(uint64_t *, int *))(*a1 + 16))(a1, &v81) & 1) != 0)
  {
    __int128 v28 = 0;
    goto LABEL_65;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  BOOL v33 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134349056;
    unsigned int v105 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    uint64_t v75 = 134349056;
    uint64_t v76 = v4;
    LODWORD(v72) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed",  &v75,  v72);
    uint64_t v32 = (uint8_t *)v69;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v69);
LABEL_141:
    if (v32 != buf) {
      free(v32);
    }
  }

  unint64_t v26 = *v12;
  __int128 v27 = (std::__shared_weak_count *)v12[1];
  if (v27)
  {
    __int128 v28 = (unint64_t *)&v27->__shared_owners_;
    do
      __int128 v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  double v30 = *v7;
  double v31 = (std::__shared_weak_count *)v7[1];
  if (v31)
  {
    uint64_t v32 = (unint64_t *)&v31->__shared_owners_;
    do
      BOOL v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    int v34 = *(_DWORD *)(v26 + 24) > *(_DWORD *)(v30 + 24);
    do
      double v35 = __ldaxr(v32);
    while (__stlxr(v35 - 1, v32));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  else
  {
    int v34 = *(_DWORD *)(v26 + 24) > *(_DWORD *)(v30 + 24);
  }

  if (v27)
  {
    std::string::size_type v36 = (unint64_t *)&v27->__shared_owners_;
    do
      double v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  if (!v34)
  {
    int64_t v67 = *(_OWORD *)v7;
    *unint64_t v7 = 0LL;
    v7[1] = 0LL;
    while (1)
    {
      unint64_t v38 = (uint64_t)v7;
      unint64_t v7 = v12;
      sub_10005F550(v38, (__int128 *)v12);
      if (v66 < v11)
      {
LABEL_80:
        sub_10005F550((uint64_t)v7, &v67);
        uint64_t v63 = (std::__shared_weak_count *)*((void *)&v67 + 1);
        if (*((void *)&v67 + 1))
        {
          double v64 = (unint64_t *)(*((void *)&v67 + 1) + 8LL);
          do
            uint64_t v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }

        return;
      }

      __int16 v39 = 2 * v11;
      unint64_t v11 = (2 * v11) | 1;
      uint64_t v12 = (uint64_t *)(a1 + 16 * v11);
      double v40 = v39 + 2;
      if (v39 + 2 >= a3) {
        goto LABEL_59;
      }
      __int128 v41 = *v12;
      __int128 v42 = (std::__shared_weak_count *)v12[1];
      if (v42)
      {
        __int128 v43 = (unint64_t *)&v42->__shared_owners_;
        do
          double v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }

      double v45 = v12[2];
      __int128 v46 = (std::__shared_weak_count *)v12[3];
      if (v46)
      {
        __int128 v47 = (unint64_t *)&v46->__shared_owners_;
        do
          __int128 v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        __int128 v49 = *(_DWORD *)(v41 + 24) > *(_DWORD *)(v45 + 24);
        do
          __int128 v50 = __ldaxr(v47);
        while (__stlxr(v50 - 1, v47));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }

        if (v42)
        {
LABEL_54:
          __int128 v51 = (unint64_t *)&v42->__shared_owners_;
          do
            __int128 v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
            if (!v49) {
              goto LABEL_59;
            }
LABEL_58:
            v12 += 2;
            unint64_t v11 = v40;
            goto LABEL_59;
          }
        }
      }

      else
      {
        __int128 v49 = *(_DWORD *)(v41 + 24) > *(_DWORD *)(v45 + 24);
        if (v42) {
          goto LABEL_54;
        }
      }

      if (v49) {
        goto LABEL_58;
      }
LABEL_59:
      __int128 v53 = *v12;
      __int128 v54 = (std::__shared_weak_count *)v12[1];
      if (v54)
      {
        __int128 v55 = (unint64_t *)&v54->__shared_owners_;
        do
          __int128 v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }

      if (*((void *)&v67 + 1))
      {
        __int128 v57 = (unint64_t *)(*((void *)&v67 + 1) + 8LL);
        do
          uint64_t v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        uint64_t v59 = *(_DWORD *)(v53 + 24) > *(_DWORD *)(v67 + 24);
        do
          uint64_t v60 = __ldaxr(v57);
        while (__stlxr(v60 - 1, v57));
        if (!v60)
        {
          (*(void (**)(void))(**((void **)&v67 + 1) + 16LL))(*((void *)&v67 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
        }
      }

      else
      {
        uint64_t v59 = *(_DWORD *)(v53 + 24) > *(_DWORD *)(v67 + 24);
      }

      if (!v54) {
        goto LABEL_74;
      }
      double v61 = (unint64_t *)&v54->__shared_owners_;
      do
        double v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (v59) {
          goto LABEL_80;
        }
      }

      else
      {
LABEL_74:
        if (v59) {
          goto LABEL_80;
        }
      }
    }
  }

        uint64_t v8 = v29;
        if (v29 < (unint64_t)v31)
        {
          double v35 = (__int128 *)v31;
          do
          {
            v289 = *(_OWORD *)(v8 + 32);
            v301 = *(_OWORD *)(v8 + 48);
            v265 = *(_OWORD *)v8;
            v277 = *(_OWORD *)(v8 + 16);
            v337 = *(_OWORD *)(v8 + 96);
            v349 = *(_OWORD *)(v8 + 112);
            v313 = *(_OWORD *)(v8 + 64);
            v325 = *(_OWORD *)(v8 + 80);
            v376 = *(_OWORD *)(v8 + 160);
            v385 = *(_OWORD *)(v8 + 176);
            v358 = *(_OWORD *)(v8 + 128);
            v367 = *(_OWORD *)(v8 + 144);
            std::string::size_type v36 = *v35;
            double v37 = v35[1];
            unint64_t v38 = v35[3];
            *(_OWORD *)(v8 + 32) = v35[2];
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v38;
            *(_OWORD *)uint64_t v8 = v36;
            *(_OWORD *)(v8 + 16) = v37;
            __int16 v39 = v35[4];
            double v40 = v35[5];
            __int128 v41 = v35[7];
            *(_OWORD *)(v8 + 96) = v35[6];
            *(_OWORD *)(v8 + 112) = v41;
            *(_OWORD *)(v8 + 64) = v39;
            *(_OWORD *)(v8 + 80) = v40;
            __int128 v42 = v35[8];
            __int128 v43 = v35[9];
            double v44 = v35[11];
            *(_OWORD *)(v8 + 160) = v35[10];
            *(_OWORD *)(v8 + 176) = v44;
            *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v42;
            *(_OWORD *)(v8 + 144) = v43;
            v35[2] = v289;
            v35[3] = v301;
            *double v35 = v265;
            v35[1] = v277;
            v35[6] = v337;
            v35[7] = v349;
            v35[4] = v313;
            v35[5] = v325;
            v35[10] = v376;
            v35[11] = v385;
            v35[8] = v358;
            v35[9] = v367;
            do
            {
              double v45 = (double *)(v8 + 276);
              v8 += 192LL;
            }

            while (*v45 > v26);
            do
            {
              __int128 v46 = *(double *)((char *)v35 - 108);
              v35 -= 12;
            }

            while (v46 <= v26);
          }

          while (v8 < (unint64_t)v35);
        }

        __int128 v47 = (__int128 *)(v8 - 192);
        if (v8 - 192 != a1)
        {
          __int128 v48 = *v47;
          __int128 v49 = *(_OWORD *)(v8 - 176);
          __int128 v50 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v50;
          *(_OWORD *)a1 = v48;
          *(_OWORD *)(a1 + 16) = v49;
          __int128 v51 = *(_OWORD *)(v8 - 128);
          __int128 v52 = *(_OWORD *)(v8 - 112);
          __int128 v53 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 112) = v53;
          *(_OWORD *)(a1 + 64) = v51;
          *(_OWORD *)(a1 + 80) = v52;
          __int128 v54 = *(_OWORD *)(v8 - 64);
          __int128 v55 = *(_OWORD *)(v8 - 48);
          __int128 v56 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 176) = v56;
          *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v54;
          *(_OWORD *)(a1 + 144) = v55;
        }

        *__int128 v47 = v246;
        *(_OWORD *)(v8 - 176) = v249;
        *(_DWORD *)(v8 - 112) = v261;
        *(_OWORD *)(v8 - 144) = v255;
        *(_OWORD *)(v8 - 12std::iostream::~basic_iostream(v2, v3 + 8) = v258;
        *(_OWORD *)(v8 - 160) = v252;
        *(double *)(v8 - 10std::iostream::~basic_iostream(v2, v3 + 8) = v26;
        *(_OWORD *)(v8 - 6std::iostream::~basic_iostream(v2, v3 + 8) = v219;
        *(_OWORD *)(v8 - 84) = v213;
        *(_OWORD *)(v8 - 100) = v207;
        *(_DWORD *)(v8 - 4) = v243;
        *(_OWORD *)(v8 - 20) = v237;
        *(_OWORD *)(v8 - 36) = v231;
        *(_OWORD *)(v8 - 52) = v225;
        if (v29 < (unint64_t)v31)
        {
LABEL_32:
          sub_100F24E2C(a1, v8 - 192, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v57 = sub_100F26238(a1, v8 - 192);
        if (!sub_100F26238(v8, (uint64_t)a2))
        {
          if (v57) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (char *)(v8 - 192);
        if (!v57) {
          goto LABEL_1;
        }
        return;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v4,  *(float *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

        uint64_t v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          double v30 = v26;
          do
          {
            __int128 v157 = *(_OWORD *)v8;
            uint64_t v169 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v204 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v204[16] = *(_OWORD *)(v8 + 80);
            __int128 v180 = *(_OWORD *)(v8 + 32);
            uint64_t v192 = *(_OWORD *)(v8 + 48);
            uint64_t v32 = *((_OWORD *)v30 + 3);
            double v31 = *((_OWORD *)v30 + 4);
            BOOL v33 = *((_OWORD *)v30 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v30 + 76);
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v32;
            *(_OWORD *)(v8 + 64) = v31;
            *(_OWORD *)(v8 + 32) = v33;
            int v34 = *((_OWORD *)v30 + 1);
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v30;
            *(_OWORD *)(v8 + 16) = v34;
            *(_OWORD *)double v30 = v157;
            *((_OWORD *)v30 + 1) = v169;
            *(_OWORD *)((char *)v30 + 76) = *(_OWORD *)&v204[12];
            *((_OWORD *)v30 + 3) = v192;
            *((_OWORD *)v30 + 4) = *(_OWORD *)v204;
            *((_OWORD *)v30 + 2) = v180;
            do
            {
              double v35 = *(double *)(v8 + 104);
              v8 += 96LL;
            }

            while (v35 < v20);
            do
            {
              std::string::size_type v36 = *(v30 - 11);
              v30 -= 12;
            }

            while (v36 >= v20);
          }

          while (v8 < (unint64_t)v30);
        }

        if (v8 - 96 != a1)
        {
          double v37 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 16) = v37;
          unint64_t v38 = *(_OWORD *)(v8 - 64);
          __int16 v39 = *(_OWORD *)(v8 - 48);
          double v40 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
          *(_OWORD *)(a1 + 64) = v40;
          *(_OWORD *)(a1 + 32) = v38;
        }

        *(void *)(v8 - 96) = v22;
        *(double *)(v8 - 8std::iostream::~basic_iostream(v2, v3 + 8) = v20;
        *(_OWORD *)(v8 - 80) = v144;
        *(_OWORD *)(v8 - 20) = *(_OWORD *)&v153[12];
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v150;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v153;
        *(_OWORD *)(v8 - 64) = v147;
        if (v24 < (unint64_t)v26)
        {
LABEL_32:
          sub_101022030(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        __int128 v41 = sub_101022C08(a1, v8 - 96);
        if (!sub_101022C08(v8, (uint64_t)a2))
        {
          if (v41) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (_OWORD *)(v8 - 96);
        if (!v41) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          std::string::size_type v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            double v37 = v36[1];
            *(_OWORD *)uint64_t v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            unint64_t v38 = v36[2];
            __int16 v39 = v36[3];
            double v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
            __int128 v41 = v36[6];
            __int128 v42 = v36[7];
            __int128 v43 = v36[9];
            *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            double v44 = v36[10];
            double v45 = v36[11];
            __int128 v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            double *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              __int128 v47 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v47 < v26);
            do
            {
              __int128 v48 = *((double *)v36 - 27);
              v36 -= 14;
            }

            while (v48 >= v26);
          }

          while (v8 < (unint64_t)v36);
        }

        if (v8 - 224 != a1)
        {
          __int128 v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          __int128 v50 = *(_OWORD *)(v8 - 192);
          __int128 v51 = *(_OWORD *)(v8 - 176);
          __int128 v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v51;
          __int128 v53 = *(_OWORD *)(v8 - 128);
          __int128 v54 = *(_OWORD *)(v8 - 112);
          __int128 v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          __int128 v56 = *(_OWORD *)(v8 - 64);
          __int128 v57 = *(_OWORD *)(v8 - 48);
          uint64_t v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }

        *(void *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 20std::iostream::~basic_iostream(v2, v3 + 8) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 12std::iostream::~basic_iostream(v2, v3 + 8) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_101048554(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        uint64_t v59 = sub_101049AE0(a1, v8 - 224);
        if (!sub_101049AE0(v8, (uint64_t)a2))
        {
          if (v59) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__int128 *)(v8 - 224);
        if (!v59) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          std::string::size_type v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            double v37 = v36[1];
            *(_OWORD *)uint64_t v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            unint64_t v38 = v36[2];
            __int16 v39 = v36[3];
            double v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
            __int128 v41 = v36[6];
            __int128 v42 = v36[7];
            __int128 v43 = v36[9];
            *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            double v44 = v36[10];
            double v45 = v36[11];
            __int128 v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            double *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              __int128 v47 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v47 < v26);
            do
            {
              __int128 v48 = *((double *)v36 - 27);
              v36 -= 14;
            }

            while (v48 >= v26);
          }

          while (v8 < (unint64_t)v36);
        }

        if (v8 - 224 != a1)
        {
          __int128 v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          __int128 v50 = *(_OWORD *)(v8 - 192);
          __int128 v51 = *(_OWORD *)(v8 - 176);
          __int128 v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v51;
          __int128 v53 = *(_OWORD *)(v8 - 128);
          __int128 v54 = *(_OWORD *)(v8 - 112);
          __int128 v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          __int128 v56 = *(_OWORD *)(v8 - 64);
          __int128 v57 = *(_OWORD *)(v8 - 48);
          uint64_t v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }

        *(void *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 20std::iostream::~basic_iostream(v2, v3 + 8) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 12std::iostream::~basic_iostream(v2, v3 + 8) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_10104A3AC(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        uint64_t v59 = sub_10104B584(a1, v8 - 224);
        if (!sub_10104B584(v8, (uint64_t)a2))
        {
          if (v59) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__int128 *)(v8 - 224);
        if (!v59) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v22;
        if (v22 < v24)
        {
          __int128 v28 = v24;
          do
          {
            uint64_t v113 = *(void *)(v8 + 16);
            uint64_t v107 = *(_OWORD *)v8;
            __int128 v29 = *(_OWORD *)v28;
            *(void *)(v8 + 16) = *(void *)(v28 + 16);
            *(_OWORD *)uint64_t v8 = v29;
            *(void *)(v28 + 16) = v113;
            *(_OWORD *)__int128 v28 = v107;
            do
            {
              double v30 = *(double *)(v8 + 32);
              v8 += 24LL;
            }

            while (v30 < v17);
            do
            {
              double v31 = *(double *)(v28 - 16);
              v28 -= 24LL;
            }

            while (v31 >= v17);
          }

          while (v8 < v28);
        }

        if (v8 - 24 != a1)
        {
          uint64_t v32 = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 16) = *(void *)(v8 - 8);
          *(_OWORD *)a1 = v32;
        }

        *(double *)(v8 - 24) = v19;
        *(double *)(v8 - 16) = v17;
        *(void *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_10104BC7C(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v33 = sub_10104C614(a1, v8 - 24);
        if (!sub_10104C614(v8, a2))
        {
          if (v33) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v8 - 24;
        if (!v33) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          std::string::size_type v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            double v37 = v36[1];
            *(_OWORD *)uint64_t v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            unint64_t v38 = v36[2];
            __int16 v39 = v36[3];
            double v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v39;
            __int128 v41 = v36[6];
            __int128 v42 = v36[7];
            __int128 v43 = v36[9];
            *(_OWORD *)(v8 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            double v44 = v36[10];
            double v45 = v36[11];
            __int128 v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            double *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              __int128 v47 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v47 < v26);
            do
            {
              __int128 v48 = *((double *)v36 - 27);
              v36 -= 14;
            }

            while (v48 >= v26);
          }

          while (v8 < (unint64_t)v36);
        }

        if (v8 - 224 != a1)
        {
          __int128 v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          __int128 v50 = *(_OWORD *)(v8 - 192);
          __int128 v51 = *(_OWORD *)(v8 - 176);
          __int128 v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v51;
          __int128 v53 = *(_OWORD *)(v8 - 128);
          __int128 v54 = *(_OWORD *)(v8 - 112);
          __int128 v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          __int128 v56 = *(_OWORD *)(v8 - 64);
          __int128 v57 = *(_OWORD *)(v8 - 48);
          uint64_t v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }

        *(void *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 20std::iostream::~basic_iostream(v2, v3 + 8) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 12std::iostream::~basic_iostream(v2, v3 + 8) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_10104C954(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        uint64_t v59 = sub_10104DB2C(a1, v8 - 224);
        if (!sub_10104DB2C(v8, (uint64_t)a2))
        {
          if (v59) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__int128 *)(v8 - 224);
        if (!v59) {
          goto LABEL_1;
        }
        return;
    }
  }

        uint64_t v8 = v22;
        if (v22 < v24)
        {
          __int128 v28 = v24;
          do
          {
            uint64_t v113 = *(void *)(v8 + 16);
            uint64_t v107 = *(_OWORD *)v8;
            __int128 v29 = *(_OWORD *)v28;
            *(void *)(v8 + 16) = *(void *)(v28 + 16);
            *(_OWORD *)uint64_t v8 = v29;
            *(void *)(v28 + 16) = v113;
            *(_OWORD *)__int128 v28 = v107;
            do
            {
              double v30 = *(double *)(v8 + 32);
              v8 += 24LL;
            }

            while (v30 < v17);
            do
            {
              double v31 = *(double *)(v28 - 16);
              v28 -= 24LL;
            }

            while (v31 >= v17);
          }

          while (v8 < v28);
        }

        if (v8 - 24 != a1)
        {
          uint64_t v32 = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 16) = *(void *)(v8 - 8);
          *(_OWORD *)a1 = v32;
        }

        *(double *)(v8 - 24) = v19;
        *(double *)(v8 - 16) = v17;
        *(void *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_10104E158(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v33 = sub_10104EA00(a1, v8 - 24);
        if (!sub_10104EA00(v8, a2))
        {
          if (v33) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v8 - 24;
        if (!v33) {
          goto LABEL_1;
        }
        return;
    }
  }

  unint64_t v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "droppedSOS", *(_BYTE *)(a1 + 49));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 50), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          unint64_t v21 = *((void *)this + 1);
          double v22 = *((void *)this + 2);
          unint64_t v23 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v22)
          {
            v375 = 0;
            v376 = 0;
            unint64_t v26 = 0LL;
            if (v22 <= v21) {
              double v22 = *((void *)this + 1);
            }
            do
            {
              if (v22 == v21)
              {
                unint64_t v26 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_648;
              }

              v377 = v21 + 1;
              v378 = *(_BYTE *)(v23 + v21);
              *((void *)this + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  unint64_t v26 = 0LL;
                }
                goto LABEL_648;
              }

              v375 += 7;
              unint64_t v21 = v377;
              __int128 v15 = v376++ > 8;
            }

            while (!v15);
LABEL_342:
            unint64_t v26 = 0LL;
          }

          else
          {
            double v24 = 0;
            unint64_t v25 = 0;
            unint64_t v26 = 0LL;
            while (1)
            {
              __int128 v27 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              __int128 v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                break;
              }
              v24 += 7;
              unint64_t v21 = v27;
              __int128 v15 = v25++ > 8;
              if (v15) {
                goto LABEL_342;
              }
            }
          }

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 396) |= 0x80000u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_542;
              }
              v32 += 7;
              __int128 v29 = v35;
              unint64_t v21 = v33++ > 8;
            }

            while (!v21);
LABEL_385:
            int v34 = 0LL;
            goto LABEL_542;
          }

          v306 = 0;
          v307 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              int v34 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v308 = v29 + 1;
              v309 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v308;
              v34 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                __int128 v29 = v308;
                unint64_t v21 = v307++ > 8;
                if (v21) {
                  goto LABEL_385;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                int v34 = 0LL;
              }
            }

            break;
          }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  if ((*(_WORD *)(a2 + 72) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_22:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = v3 | 0x40;
  *(_DWORD *)(a1 + 56) = v4;
  return *(float *)&v4;
}

  unint64_t v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 76) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  unint64_t v21 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) |= 8u;
  *(_DWORD *)(a1 + 40) = v21;
  __int128 v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_16:
  if ((v16 & 1) != 0)
  {
LABEL_17:
    uint64_t v17 = *(void *)(a2 + 24);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 24) = v17;
  }

  return a1;
}

      if ((v13 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v13 >> 3))
      {
        case 1u:
          double v22 = (void **)operator new(0x18uLL);
          v22[1] = 0LL;
          v22[2] = 0LL;
          void *v22 = 0LL;
          __int128 __p = 0LL;
          unint64_t v23 = *v9;
          std::__shared_weak_count *v9 = v22;
          if (v23)
          {
            sub_10058A4FC((int)v9, v23);
            double v24 = (void **)__p;
            __int128 __p = 0LL;
            if (v24) {
              sub_10058A4FC((int)&__p, v24);
            }
          }

          unint64_t v25 = *v9;
          goto LABEL_33;
        case 2u:
          __int128 v27 = (void **)operator new(0x18uLL);
          v27[1] = 0LL;
          v27[2] = 0LL;
          __int128 *v27 = 0LL;
          __int128 __p = 0LL;
          __int128 v28 = *v8;
          *uint64_t v8 = v27;
          if (v28)
          {
            sub_10058A4FC((int)v8, v28);
            __int128 v29 = (void **)__p;
            __int128 __p = 0LL;
            if (v29) {
              sub_10058A4FC((int)&__p, v29);
            }
          }

          unint64_t v25 = *v8;
LABEL_33:
          PB::Reader::read(this, v25);
          goto LABEL_96;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 4u;
          double v30 = *((void *)this + 1);
          double v31 = *((void *)this + 2);
          uint64_t v32 = *(void *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5LL && v30 + 10 <= v31)
          {
            BOOL v33 = 0;
            int v34 = 0;
            double v35 = 0LL;
            do
            {
              std::string::size_type v36 = v30 + 1;
              *((void *)this + 1) = v30 + 1;
              double v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_87;
              }
              v33 += 7;
              double v30 = v36;
              __int128 v16 = v34++ > 8;
            }

            while (!v16);
LABEL_66:
            LODWORD(v35) = 0;
            goto LABEL_87;
          }

          uint64_t v59 = 0;
          uint64_t v60 = 0;
          double v35 = 0LL;
          if (v31 <= v30) {
            double v31 = *((void *)this + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              double v61 = v30 + 1;
              double v62 = *(_BYTE *)(v32 + v30);
              *((void *)this + 1) = v61;
              v35 |= (unint64_t)(v62 & 0x7F) << v59;
              if (v62 < 0)
              {
                v59 += 7;
                double v30 = v61;
                __int128 v16 = v60++ > 8;
                if (v16) {
                  goto LABEL_66;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v35) = 0;
              }
            }

            break;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
            return 0LL;
          }
          double v44 = *((void *)this + 1);
          double v45 = *((void *)this + 2);
          while (v44 < v45 && !*((_BYTE *)this + 24))
          {
            __int128 v47 = *(char **)(a1 + 16);
            __int128 v46 = *(void *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              __int128 v49 = (char *)*v12;
              __int128 v50 = (v47 - (_BYTE *)*v12) >> 2;
              __int128 v51 = v50 + 1;
              __int128 v52 = v46 - (void)v49;
              if (v52 >> 1 > v51) {
                __int128 v51 = v52 >> 1;
              }
              else {
                __int128 v53 = v51;
              }
              if (v53)
              {
                __int128 v54 = (char *)sub_10000956C(v13, v53);
                __int128 v49 = *(char **)(a1 + 8);
                __int128 v47 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v54 = 0LL;
              }

              __int128 v55 = &v54[4 * v50];
              *(_DWORD *)__int128 v55 = 0;
              __int128 v48 = v55 + 4;
              while (v47 != v49)
              {
                __int128 v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v55;
              *(void *)(a1 + 16) = v48;
              *(void *)(a1 + 24) = &v54[4 * v53];
              if (v49) {
                operator delete(v49);
              }
            }

            else
            {
              *(_DWORD *)__int128 v47 = 0;
              __int128 v48 = v47 + 4;
            }

            *(void *)(a1 + 16) = v48;
            __int128 v57 = *((void *)this + 1);
            if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v48 - 1) = *(_DWORD *)(*(void *)this + v57);
            double v45 = *((void *)this + 2);
            double v44 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v44;
          }

          goto LABEL_83;
        }

        double v62 = *(char **)(a1 + 16);
        double v61 = *(void *)(a1 + 24);
        if ((unint64_t)v62 >= v61)
        {
          uint64_t v69 = (char *)*v12;
          uint64_t v70 = (v62 - (_BYTE *)*v12) >> 2;
          uint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
LABEL_128:
          }
            sub_100007008();
          uint64_t v72 = v61 - (void)v69;
          if (v72 >> 1 > v71) {
            uint64_t v71 = v72 >> 1;
          }
          else {
            uint64_t v73 = v71;
          }
          if (v73)
          {
            uint64_t v74 = (char *)sub_10000956C(v13, v73);
            uint64_t v69 = *(char **)(a1 + 8);
            double v62 = *(char **)(a1 + 16);
          }

          else
          {
            uint64_t v74 = 0LL;
          }

          uint64_t v77 = &v74[4 * v70];
          *(_DWORD *)uint64_t v77 = 0;
          uint64_t v60 = v77 + 4;
          while (v62 != v69)
          {
            uint64_t v78 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }

          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v77;
          *(void *)(a1 + 16) = v60;
          *(void *)(a1 + 24) = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }

        else
        {
          *(_DWORD *)double v62 = 0;
          uint64_t v60 = v62 + 4;
        }

        *(void *)(a1 + 16) = v60;
LABEL_114:
        uint64_t v79 = *((void *)this + 1);
        if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }

        *(v60 - 1) = *(_DWORD *)(*(void *)this + v79);
        __int128 v29 = *((void *)this + 1) + 4LL;
        goto LABEL_118;
      }

      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        __int128 v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
        __int128 v29 = *((void *)this + 1) + 8LL;
LABEL_118:
        *((void *)this + 1) = v29;
        goto LABEL_119;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_119:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
        return 0LL;
      }
      double v30 = *((void *)this + 1);
      double v31 = *((void *)this + 2);
      while (v30 < v31 && !*((_BYTE *)this + 24))
      {
        BOOL v33 = *(char **)(a1 + 40);
        uint64_t v32 = *(void *)(a1 + 48);
        if ((unint64_t)v33 >= v32)
        {
          double v35 = (char *)*v10;
          std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
          double v37 = v36 + 1;
          unint64_t v38 = v32 - (void)v35;
          if (v38 >> 1 > v37) {
            double v37 = v38 >> 1;
          }
          else {
            __int16 v39 = v37;
          }
          if (v39)
          {
            double v40 = (char *)sub_10000956C(v11, v39);
            double v35 = *(char **)(a1 + 32);
            BOOL v33 = *(char **)(a1 + 40);
          }

          else
          {
            double v40 = 0LL;
          }

          __int128 v41 = &v40[4 * v36];
          *(_DWORD *)__int128 v41 = 0;
          int v34 = v41 + 4;
          while (v33 != v35)
          {
            __int128 v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }

          *(void *)(a1 + 32) = v41;
          *(void *)(a1 + 40) = v34;
          *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          *(_DWORD *)BOOL v33 = 0;
          int v34 = v33 + 4;
        }

        *(void *)(a1 + 40) = v34;
        __int128 v43 = *((void *)this + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }

        *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
        double v31 = *((void *)this + 2);
        double v30 = *((void *)this + 1) + 4LL;
        *((void *)this + 1) = v30;
      }

  uint64_t v6 = *(_BYTE *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 76) = v3;
  *(_BYTE *)(a1 + 72) = v6;
  if ((*(_WORD *)(a2 + 76) & 2) != 0) {
    goto LABEL_22;
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "isValidSide", *(_BYTE *)(a1 + 85));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = *(float *)(a2 + 36);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 36) = result;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 52) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 0xBu);
  }

    if ((v16 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v16 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 152) |= 4u;
        unint64_t v25 = *((void *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 144) = *(void *)(*(void *)this + v25);
        goto LABEL_43;
      case 2u:
        sub_10108F36C(v12);
        __int128 v28 = *(void *)(a1 + 104);
        goto LABEL_31;
      case 3u:
        sub_10108F36C(v11);
        __int128 v28 = *(void *)(a1 + 80);
        goto LABEL_31;
      case 4u:
        sub_10108F36C(v10);
        __int128 v28 = *(void *)(a1 + 128);
        goto LABEL_31;
      case 5u:
        sub_10108F36C(v9);
        __int128 v28 = *(void *)(a1 + 56);
        goto LABEL_31;
      case 6u:
        sub_10108F36C(v8);
        __int128 v28 = *(void *)(a1 + 32);
LABEL_31:
        __int128 v29 = *(void *)(v28 - 8);
        if (PB::Reader::placeMark(this, v33, v26, v27)
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v29 + 16LL))(v29, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v33);
LABEL_44:
          uint64_t v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24)) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 7u:
        *(_BYTE *)(a1 + 152) |= 2u;
        uint64_t v32 = *((void *)this + 1);
        if (v32 > 0xFFFFFFFFFFFFFFF7LL || v32 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v32);
        goto LABEL_43;
      case 8u:
        *(_BYTE *)(a1 + 152) |= 1u;
        double v30 = *((void *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2))
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v30);
LABEL_43:
          *((void *)this + 1) += 8LL;
        }

        goto LABEL_44;
      default:
        uint64_t result = PB::Reader::skip(this, v16 >> 3, v16 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_44;
    }
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 116) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_204;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_206;
        case 2u:
          *(_BYTE *)(a1 + 116) |= 4u;
          __int128 v29 = *((void *)this + 1);
          if (v29 >= *((void *)this + 2))
          {
            uint64_t v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            double v30 = v29 + 1;
            double v31 = *(unsigned __int8 *)(*(void *)this + v29);
            *((void *)this + 1) = v30;
            uint64_t v32 = v31 != 0;
          }

          *(_BYTE *)(a1 + 113) = v32;
          goto LABEL_207;
        case 3u:
          *(_BYTE *)(a1 + 116) |= 2u;
          BOOL v33 = *((void *)this + 1);
          if (v33 >= *((void *)this + 2))
          {
            std::string::size_type v36 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v34 = v33 + 1;
            double v35 = *(unsigned __int8 *)(*(void *)this + v33);
            *((void *)this + 1) = v34;
            std::string::size_type v36 = v35 != 0;
          }

          *(_BYTE *)(a1 + 112) = v36;
          goto LABEL_207;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v94 = *(char **)(a1 + 40);
            uint64_t v93 = *(void *)(a1 + 48);
            if ((unint64_t)v94 >= v93)
            {
              BOOL v102 = (char *)*v13;
              double v103 = (v94 - (_BYTE *)*v13) >> 2;
              __int128 v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62) {
LABEL_215:
              }
                sub_100007008();
              unsigned int v105 = v93 - (void)v102;
              if (v105 >> 1 > v104) {
                __int128 v104 = v105 >> 1;
              }
              else {
                uint64_t v106 = v104;
              }
              if (v106)
              {
                uint64_t v107 = (char *)sub_10000956C(v136, v106);
                BOOL v102 = *(char **)(a1 + 32);
                uint64_t v94 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v107 = 0LL;
              }

              uint64_t v126 = &v107[4 * v103];
              *(_DWORD *)uint64_t v126 = 0;
              uint64_t v95 = v126 + 4;
              while (v94 != v102)
              {
                uint64_t v127 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }

              *(void *)(a1 + 32) = v126;
              *(void *)(a1 + 40) = v95;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v107[4 * v106];
              if (v102) {
                operator delete(v102);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v94 = 0;
              uint64_t v95 = v94 + 4;
            }

            *(void *)(a1 + 40) = v95;
            goto LABEL_202;
          }

          if ((PB::Reader::placeMark(this, v140, v26, a4) & 1) != 0) {
            return 0LL;
          }
          double v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          while (v37 < v38 && !*((_BYTE *)this + 24))
          {
            double v40 = *(char **)(a1 + 40);
            __int16 v39 = *(void *)(a1 + 48);
            if ((unint64_t)v40 >= v39)
            {
              __int128 v42 = (char *)*v13;
              __int128 v43 = (v40 - (_BYTE *)*v13) >> 2;
              double v44 = v43 + 1;
              double v45 = v39 - (void)v42;
              if (v45 >> 1 > v44) {
                double v44 = v45 >> 1;
              }
              else {
                __int128 v46 = v44;
              }
              if (v46)
              {
                __int128 v47 = (char *)sub_10000956C(v136, v46);
                __int128 v42 = *(char **)(a1 + 32);
                double v40 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v47 = 0LL;
              }

              __int128 v48 = &v47[4 * v43];
              *(_DWORD *)__int128 v48 = 0;
              __int128 v41 = v48 + 4;
              while (v40 != v42)
              {
                __int128 v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }

              *(void *)(a1 + 32) = v48;
              *(void *)(a1 + 40) = v41;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v47[4 * v46];
              if (v42) {
                operator delete(v42);
              }
            }

            else
            {
              *(_DWORD *)double v40 = 0;
              __int128 v41 = v40 + 4;
            }

            *(void *)(a1 + 40) = v41;
            __int128 v50 = *((void *)this + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v41 - 1) = *(_DWORD *)(*(void *)this + v50);
            unint64_t v38 = *((void *)this + 2);
            double v37 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v37;
          }

          goto LABEL_129;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v97 = *(char **)(a1 + 64);
            uint64_t v96 = *(void *)(a1 + 72);
            if ((unint64_t)v97 >= v96)
            {
              uint64_t v108 = (char *)*v12;
              uint64_t v109 = (v97 - (_BYTE *)*v12) >> 2;
              uint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 62) {
LABEL_216:
              }
                sub_100007008();
              uint64_t v111 = v96 - (void)v108;
              if (v111 >> 1 > v110) {
                uint64_t v110 = v111 >> 1;
              }
              else {
                uint64_t v112 = v110;
              }
              if (v112)
              {
                uint64_t v113 = (char *)sub_10000956C(v137, v112);
                uint64_t v108 = *(char **)(a1 + 56);
                uint64_t v97 = *(char **)(a1 + 64);
              }

              else
              {
                uint64_t v113 = 0LL;
              }

              uint64_t v128 = &v113[4 * v109];
              *(_DWORD *)uint64_t v128 = 0;
              uint64_t v95 = v128 + 4;
              while (v97 != v108)
              {
                uint64_t v129 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }

              *(void *)(a1 + 56) = v128;
              *(void *)(a1 + 64) = v95;
              *(void *)(a1 + 72) = &v113[4 * v112];
              if (v108) {
                operator delete(v108);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v97 = 0;
              uint64_t v95 = v97 + 4;
            }

            *(void *)(a1 + 64) = v95;
            goto LABEL_202;
          }

          if ((PB::Reader::placeMark(this, v140, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v51 = *((void *)this + 1);
          __int128 v52 = *((void *)this + 2);
          while (v51 < v52 && !*((_BYTE *)this + 24))
          {
            __int128 v54 = *(char **)(a1 + 64);
            __int128 v53 = *(void *)(a1 + 72);
            if ((unint64_t)v54 >= v53)
            {
              __int128 v56 = (char *)*v12;
              __int128 v57 = (v54 - (_BYTE *)*v12) >> 2;
              uint64_t v58 = v57 + 1;
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 1 > v58) {
                uint64_t v58 = v59 >> 1;
              }
              else {
                uint64_t v60 = v58;
              }
              if (v60)
              {
                double v61 = (char *)sub_10000956C(v137, v60);
                __int128 v56 = *(char **)(a1 + 56);
                __int128 v54 = *(char **)(a1 + 64);
              }

              else
              {
                double v61 = 0LL;
              }

              double v62 = &v61[4 * v57];
              *(_DWORD *)double v62 = 0;
              __int128 v55 = v62 + 4;
              while (v54 != v56)
              {
                uint64_t v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }

              *(void *)(a1 + 56) = v62;
              *(void *)(a1 + 64) = v55;
              *(void *)(a1 + 72) = &v61[4 * v60];
              if (v56) {
                operator delete(v56);
              }
            }

            else
            {
              *(_DWORD *)__int128 v54 = 0;
              __int128 v55 = v54 + 4;
            }

            *(void *)(a1 + 64) = v55;
            double v64 = *((void *)this + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v55 - 1) = *(_DWORD *)(*(void *)this + v64);
            __int128 v52 = *((void *)this + 2);
            __int128 v51 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v51;
          }

          goto LABEL_129;
        case 6u:
          if ((_DWORD)v26 != 2)
          {
            v99 = *(char **)(a1 + 88);
            uint64_t v98 = *(void *)(a1 + 96);
            if ((unint64_t)v99 >= v98)
            {
              uint64_t v114 = (char *)*v11;
              uint64_t v115 = (v99 - (_BYTE *)*v11) >> 2;
              uint64_t v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62) {
LABEL_217:
              }
                sub_100007008();
              uint64_t v117 = v98 - (void)v114;
              if (v117 >> 1 > v116) {
                uint64_t v116 = v117 >> 1;
              }
              else {
                uint64_t v118 = v116;
              }
              if (v118)
              {
                uint64_t v119 = (char *)sub_10000956C(v138, v118);
                uint64_t v114 = *(char **)(a1 + 80);
                v99 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v119 = 0LL;
              }

              uint64_t v130 = &v119[4 * v115];
              *(_DWORD *)uint64_t v130 = 0;
              uint64_t v95 = v130 + 4;
              while (v99 != v114)
              {
                v131 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }

              *(void *)(a1 + 80) = v130;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v95;
              *(void *)(a1 + 96) = &v119[4 * v118];
              if (v114) {
                operator delete(v114);
              }
            }

            else
            {
              *(_DWORD *)v99 = 0;
              uint64_t v95 = v99 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v95;
            goto LABEL_202;
          }

          if ((PB::Reader::placeMark(this, v140, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v65 = *((void *)this + 1);
          int64_t v66 = *((void *)this + 2);
          while (v65 < v66 && !*((_BYTE *)this + 24))
          {
            int64_t v68 = *(char **)(a1 + 88);
            int64_t v67 = *(void *)(a1 + 96);
            if ((unint64_t)v68 >= v67)
            {
              uint64_t v70 = (char *)*v11;
              uint64_t v71 = (v68 - (_BYTE *)*v11) >> 2;
              uint64_t v72 = v71 + 1;
              uint64_t v73 = v67 - (void)v70;
              if (v73 >> 1 > v72) {
                uint64_t v72 = v73 >> 1;
              }
              else {
                uint64_t v74 = v72;
              }
              if (v74)
              {
                uint64_t v75 = (char *)sub_10000956C(v138, v74);
                uint64_t v70 = *(char **)(a1 + 80);
                int64_t v68 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v75 = 0LL;
              }

              uint64_t v76 = &v75[4 * v71];
              *(_DWORD *)uint64_t v76 = 0;
              uint64_t v69 = v76 + 4;
              while (v68 != v70)
              {
                uint64_t v77 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v76 - 1) = v77;
                v76 -= 4;
              }

              *(void *)(a1 + 80) = v76;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v69;
              *(void *)(a1 + 96) = &v75[4 * v74];
              if (v70) {
                operator delete(v70);
              }
            }

            else
            {
              *(_DWORD *)int64_t v68 = 0;
              uint64_t v69 = v68 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v69;
            uint64_t v78 = *((void *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v69 - 1) = *(_DWORD *)(*(void *)this + v78);
            int64_t v66 = *((void *)this + 2);
            uint64_t v65 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v65;
          }

          goto LABEL_129;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v140, v26, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v79 = *((void *)this + 1);
            uint64_t v80 = *((void *)this + 2);
            while (v79 < v80 && !*((_BYTE *)this + 24))
            {
              uint64_t v82 = *(char **)(a1 + 16);
              uint64_t v81 = *(void *)(a1 + 24);
              if ((unint64_t)v82 >= v81)
              {
                uint64_t v84 = (char *)*v10;
                std::string v85 = (v82 - (_BYTE *)*v10) >> 2;
                uint64_t v86 = v85 + 1;
                uint64_t v87 = v81 - (void)v84;
                if (v87 >> 1 > v86) {
                  uint64_t v86 = v87 >> 1;
                }
                else {
                  uint64_t v88 = v86;
                }
                if (v88)
                {
                  double v89 = (char *)sub_10000956C(v139, v88);
                  uint64_t v84 = *(char **)(a1 + 8);
                  uint64_t v82 = *(char **)(a1 + 16);
                }

                else
                {
                  double v89 = 0LL;
                }

                uint64_t v90 = &v89[4 * v85];
                *(_DWORD *)uint64_t v90 = 0;
                unint64_t v83 = v90 + 4;
                while (v82 != v84)
                {
                  uint64_t v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - 1) = v91;
                  v90 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v90;
                *(void *)(a1 + 16) = v83;
                *(void *)(a1 + 24) = &v89[4 * v88];
                if (v84) {
                  operator delete(v84);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v82 = 0;
                unint64_t v83 = v82 + 4;
              }

              *(void *)(a1 + 16) = v83;
              v92 = *((void *)this + 1);
              if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)this + 2))
              {
LABEL_128:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v83 - 1) = *(_DWORD *)(*(void *)this + v92);
              uint64_t v80 = *((void *)this + 2);
              uint64_t v79 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v79;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 92) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_158;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_161;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v73 = *(char **)(a1 + 16);
            uint64_t v72 = *(void *)(a1 + 24);
            if ((unint64_t)v73 >= v72)
            {
              uint64_t v79 = (char *)*v12;
              uint64_t v80 = (v73 - (_BYTE *)*v12) >> 2;
              uint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
LABEL_170:
              }
                sub_100007008();
              uint64_t v82 = v72 - (void)v79;
              if (v82 >> 1 > v81) {
                uint64_t v81 = v82 >> 1;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                uint64_t v84 = (char *)sub_10000956C(v13, v83);
                uint64_t v79 = *(char **)(a1 + 8);
                uint64_t v73 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v84 = 0LL;
              }

              uint64_t v97 = &v84[4 * v80];
              *(_DWORD *)uint64_t v97 = 0;
              uint64_t v74 = v97 + 4;
              while (v73 != v79)
              {
                uint64_t v98 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v97;
              *(void *)(a1 + 16) = v74;
              *(void *)(a1 + 24) = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v73 = 0;
              uint64_t v74 = v73 + 4;
            }

            *(void *)(a1 + 16) = v74;
            goto LABEL_156;
          }

          if ((PB::Reader::placeMark(this, v107, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 16);
            double v31 = *(void *)(a1 + 24);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v12;
              double v35 = (v32 - (_BYTE *)*v12) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v13, v38);
                int v34 = *(char **)(a1 + 8);
                uint64_t v32 = *(char **)(a1 + 16);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v40;
              *(void *)(a1 + 16) = v33;
              *(void *)(a1 + 24) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 16) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_109;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_110;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v76 = *(char **)(a1 + 40);
            uint64_t v75 = *(void *)(a1 + 48);
            if ((unint64_t)v76 >= v75)
            {
              std::string v85 = (char *)*v11;
              uint64_t v86 = (v76 - (_BYTE *)*v11) >> 2;
              uint64_t v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62) {
LABEL_171:
              }
                sub_100007008();
              uint64_t v88 = v75 - (void)v85;
              if (v88 >> 1 > v87) {
                uint64_t v87 = v88 >> 1;
              }
              else {
                double v89 = v87;
              }
              if (v89)
              {
                uint64_t v90 = (char *)sub_10000956C(v105, v89);
                std::string v85 = *(char **)(a1 + 32);
                uint64_t v76 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v90 = 0LL;
              }

              v99 = &v90[4 * v86];
              *(_DWORD *)v99 = 0;
              uint64_t v74 = v99 + 4;
              while (v76 != v85)
              {
                __int128 v100 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }

              *(void *)(a1 + 32) = v99;
              *(void *)(a1 + 40) = v74;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v90[4 * v89];
              if (v85) {
                operator delete(v85);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v76 = 0;
              uint64_t v74 = v76 + 4;
            }

            *(void *)(a1 + 40) = v74;
            goto LABEL_156;
          }

          if ((PB::Reader::placeMark(this, v107, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 40);
            double v45 = *(void *)(a1 + 48);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v11;
              __int128 v49 = (v46 - (_BYTE *)*v11) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v105, v52);
                __int128 v48 = *(char **)(a1 + 32);
                __int128 v46 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + 32) = v54;
              *(void *)(a1 + 40) = v47;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 40) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_109;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_110;
        case 4u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v107, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v57 = *((void *)this + 1);
            uint64_t v58 = *((void *)this + 2);
            while (v57 < v58 && !*((_BYTE *)this + 24))
            {
              uint64_t v60 = *(char **)(a1 + 64);
              uint64_t v59 = *(void *)(a1 + 72);
              if ((unint64_t)v60 >= v59)
              {
                double v62 = (char *)*v10;
                uint64_t v63 = (v60 - (_BYTE *)*v10) >> 2;
                double v64 = v63 + 1;
                uint64_t v65 = v59 - (void)v62;
                if (v65 >> 1 > v64) {
                  double v64 = v65 >> 1;
                }
                else {
                  int64_t v66 = v64;
                }
                if (v66)
                {
                  int64_t v67 = (char *)sub_10000956C(v106, v66);
                  double v62 = *(char **)(a1 + 56);
                  uint64_t v60 = *(char **)(a1 + 64);
                }

                else
                {
                  int64_t v67 = 0LL;
                }

                int64_t v68 = &v67[4 * v63];
                *(_DWORD *)int64_t v68 = 0;
                double v61 = v68 + 4;
                while (v60 != v62)
                {
                  uint64_t v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }

                *(void *)(a1 + 56) = v68;
                *(void *)(a1 + 64) = v61;
                *(void *)(a1 + 72) = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v60 = 0;
                double v61 = v60 + 4;
              }

              *(void *)(a1 + 64) = v61;
              uint64_t v70 = *((void *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2))
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
              uint64_t v58 = *((void *)this + 2);
              __int128 v57 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v57;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 16);
            double v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v10;
              __int128 v49 = (v46 - (_BYTE *)*v10) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v11, v52);
                __int128 v48 = *(char **)(a1 + 8);
                __int128 v46 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 16) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2))
            {
LABEL_82:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_83;
            }

            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_83;
        }

        double v61 = *(char **)(a1 + 16);
        uint64_t v60 = *(void *)(a1 + 24);
        if ((unint64_t)v61 >= v60)
        {
          int64_t v68 = (char *)*v10;
          uint64_t v69 = (v61 - (_BYTE *)*v10) >> 2;
          uint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62) {
LABEL_128:
          }
            sub_100007008();
          uint64_t v71 = v60 - (void)v68;
          if (v71 >> 1 > v70) {
            uint64_t v70 = v71 >> 1;
          }
          else {
            uint64_t v72 = v70;
          }
          if (v72)
          {
            uint64_t v73 = (char *)sub_10000956C(v11, v72);
            int64_t v68 = *(char **)(a1 + 8);
            double v61 = *(char **)(a1 + 16);
          }

          else
          {
            uint64_t v73 = 0LL;
          }

          uint64_t v76 = &v73[4 * v69];
          *(_DWORD *)uint64_t v76 = 0;
          uint64_t v59 = v76 + 4;
          while (v61 != v68)
          {
            uint64_t v77 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }

          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v76;
          *(void *)(a1 + 16) = v59;
          *(void *)(a1 + 24) = &v73[4 * v72];
          if (v68) {
            operator delete(v68);
          }
        }

        else
        {
          *(_DWORD *)double v61 = 0;
          uint64_t v59 = v61 + 4;
        }

        *(void *)(a1 + 16) = v59;
LABEL_114:
        uint64_t v78 = *((void *)this + 1);
        if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(v59 - 1) = *(_DWORD *)(*(void *)this + v78);
LABEL_118:
        *((void *)this + 1) += 4LL;
        goto LABEL_119;
      }

      if ((_DWORD)v27 == 1)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 40);
            double v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 2;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                double v35 = v36 >> 1;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_10000956C(v13, v37);
                BOOL v33 = *(char **)(a1 + 32);
                double v31 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[4 * v34];
              *(_DWORD *)__int16 v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                double v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }

              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(_DWORD *)double v31 = 0;
              uint64_t v32 = v31 + 4;
            }

            *(void *)(a1 + 40) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v28;
          }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_1010937A8(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_101093D90(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 56) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 172) |= 0x10u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v27);
          goto LABEL_237;
        case 2u:
          *(_WORD *)(a1 + 172) |= 0x100u;
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          double v30 = *(void *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
          {
            double v31 = 0;
            uint64_t v32 = 0;
            BOOL v33 = 0LL;
            do
            {
              int v34 = v28 + 1;
              *((void *)this + 1) = v28 + 1;
              double v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_204;
              }
              v31 += 7;
              __int128 v28 = v34;
              unint64_t v20 = v32++ > 8;
            }

            while (!v20);
LABEL_160:
            LODWORD(v33) = 0;
            goto LABEL_204;
          }

          v99 = 0;
          __int128 v100 = 0;
          BOOL v33 = 0LL;
          if (v29 <= v28) {
            __int128 v29 = *((void *)this + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              CFStringRef v101 = v28 + 1;
              BOOL v102 = *(_BYTE *)(v30 + v28);
              *((void *)this + 1) = v101;
              v33 |= (unint64_t)(v102 & 0x7F) << v99;
              if (v102 < 0)
              {
                v99 += 7;
                __int128 v28 = v101;
                unint64_t v20 = v100++ > 8;
                if (v20) {
                  goto LABEL_160;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v33) = 0;
              }
            }

            break;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 80) |= 4u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v27);
          goto LABEL_122;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v59 = *(char **)(a1 + 40);
            uint64_t v58 = *(void *)(a1 + 48);
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v63 = (char *)*v12;
              double v64 = (v59 - (_BYTE *)*v12) >> 3;
              uint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 61) {
LABEL_131:
              }
                sub_100007008();
              int64_t v66 = v58 - (void)v63;
              if (v66 >> 2 > v65) {
                uint64_t v65 = v66 >> 2;
              }
              else {
                int64_t v67 = v65;
              }
              if (v67)
              {
                int64_t v68 = (char *)sub_1000071BC(v13, v67);
                uint64_t v63 = *(char **)(a1 + 32);
                uint64_t v59 = *(char **)(a1 + 40);
              }

              else
              {
                int64_t v68 = 0LL;
              }

              uint64_t v75 = &v68[8 * v64];
              *(void *)uint64_t v75 = 0LL;
              uint64_t v60 = v75 + 8;
              while (v59 != v63)
              {
                uint64_t v76 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }

              *(void *)(a1 + 32) = v75;
              *(void *)(a1 + 40) = v60;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v68[8 * v67];
              if (v63) {
                operator delete(v63);
              }
            }

            else
            {
              *(void *)uint64_t v59 = 0LL;
              uint64_t v60 = v59 + 8;
            }

            *(void *)(a1 + 40) = v60;
            goto LABEL_118;
          }

          if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 40);
            double v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 3;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                double v35 = v36 >> 2;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_1000071BC(v13, v37);
                BOOL v33 = *(char **)(a1 + 32);
                double v31 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[8 * v34];
              *(void *)__int16 v39 = 0LL;
              uint64_t v32 = v39 + 8;
              while (v31 != v33)
              {
                double v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }

              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(void *)double v31 = 0LL;
              uint64_t v32 = v31 + 8;
            }

            *(void *)(a1 + 40) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
              goto LABEL_86;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_87;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v42 = *((void *)this + 1);
            __int128 v43 = *((void *)this + 2);
            while (v42 < v43 && !*((_BYTE *)this + 24))
            {
              double v45 = *(char **)(a1 + 16);
              double v44 = *(void *)(a1 + 24);
              if ((unint64_t)v45 >= v44)
              {
                __int128 v47 = (char *)*v10;
                __int128 v48 = (v45 - (_BYTE *)*v10) >> 3;
                __int128 v49 = v48 + 1;
                __int128 v50 = v44 - (void)v47;
                if (v50 >> 2 > v49) {
                  __int128 v49 = v50 >> 2;
                }
                else {
                  __int128 v51 = v49;
                }
                if (v51)
                {
                  __int128 v52 = (char *)sub_1000071BC(v11, v51);
                  __int128 v47 = *(char **)(a1 + 8);
                  double v45 = *(char **)(a1 + 16);
                }

                else
                {
                  __int128 v52 = 0LL;
                }

                __int128 v53 = &v52[8 * v48];
                *(void *)__int128 v53 = 0LL;
                __int128 v46 = v53 + 8;
                while (v45 != v47)
                {
                  __int128 v54 = *((void *)v45 - 1);
                  v45 -= 8;
                  *((void *)v53 - 1) = v54;
                  v53 -= 8;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v53;
                *(void *)(a1 + 16) = v46;
                *(void *)(a1 + 24) = &v52[8 * v51];
                if (v47) {
                  operator delete(v47);
                }
              }

              else
              {
                *(void *)double v45 = 0LL;
                __int128 v46 = v45 + 8;
              }

              *(void *)(a1 + 16) = v46;
              __int128 v55 = *((void *)this + 1);
              if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2))
              {
LABEL_86:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v46 - 1) = *(void *)(*(void *)this + v55);
              __int128 v43 = *((void *)this + 2);
              __int128 v42 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v42;
            }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        __int128 v27 = *(void *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
        {
          int v34 = 0;
          double v35 = 0;
          double v30 = 0LL;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_46;
            }

            std::string::size_type v36 = v25 + 1;
            double v37 = *(_BYTE *)(v27 + v25);
            *((void *)this + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            unint64_t v25 = v36;
            __int128 v15 = v35++ > 8;
            if (v15)
            {
LABEL_42:
              LODWORD(v30) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v30) = 0;
          }
        }

        else
        {
          __int128 v28 = 0;
          __int128 v29 = 0;
          double v30 = 0LL;
          while (1)
          {
            double v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            uint64_t v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v25 = v31;
            __int128 v15 = v29++ > 8;
            if (v15) {
              goto LABEL_42;
            }
          }
        }

    if ((v12 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 60) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        double v22 = *((void *)this + 2);
        unint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v22)
        {
          __int128 v51 = 0;
          __int128 v52 = 0;
          unint64_t v26 = 0LL;
          if (v22 <= v21) {
            double v22 = *((void *)this + 1);
          }
          do
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_72;
            }

            __int128 v53 = v21 + 1;
            __int128 v54 = *(_BYTE *)(v23 + v21);
            *((void *)this + 1) = v53;
            v26 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24)) {
                LODWORD(v26) = 0;
              }
              goto LABEL_72;
            }

            v51 += 7;
            unint64_t v21 = v53;
            __int128 v15 = v52++ > 8;
          }

          while (!v15);
LABEL_57:
          LODWORD(v26) = 0;
        }

        else
        {
          double v24 = 0;
          unint64_t v25 = 0;
          unint64_t v26 = 0LL;
          while (1)
          {
            __int128 v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            __int128 v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            __int128 v15 = v25++ > 8;
            if (v15) {
              goto LABEL_57;
            }
          }
        }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 36), 7u);
  unint64_t v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 108) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_172;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_175;
        case 2u:
          *(_BYTE *)(a1 + 108) |= 8u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_152;
              }
              v32 += 7;
              __int128 v29 = v35;
              unint64_t v20 = v33++ > 8;
            }

            while (!v20);
LABEL_117:
            LODWORD(v34) = 0;
            goto LABEL_152;
          }

          uint64_t v86 = 0;
          uint64_t v87 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v88 = v29 + 1;
              double v89 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v88;
              v34 |= (unint64_t)(v89 & 0x7F) << v86;
              if (v89 < 0)
              {
                v86 += 7;
                __int128 v29 = v88;
                unint64_t v20 = v87++ > 8;
                if (v20) {
                  goto LABEL_117;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }

            break;
          }

      __int128 v28 = v19 & 7;
      if ((_DWORD)v28 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v19 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 132) |= 1u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_149;
              }
              v32 += 7;
              __int128 v29 = v35;
              double v22 = v33++ > 8;
            }

            while (!v22);
LABEL_112:
            LODWORD(v34) = 0;
            goto LABEL_149;
          }

          uint64_t v88 = 0;
          double v89 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v90 = v29 + 1;
              uint64_t v91 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v90;
              v34 |= (unint64_t)(v91 & 0x7F) << v88;
              if (v91 < 0)
              {
                v88 += 7;
                __int128 v29 = v90;
                double v22 = v89++ > 8;
                if (v22) {
                  goto LABEL_112;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }

            break;
          }

  uint64_t v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 2std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "deltaVelocityY", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v71 = *(char **)(a1 + 40);
            uint64_t v70 = *(void *)(a1 + 48);
            if ((unint64_t)v71 >= v70)
            {
              uint64_t v77 = (char *)*v12;
              uint64_t v78 = (v71 - (_BYTE *)*v12) >> 3;
              uint64_t v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61) {
LABEL_166:
              }
                sub_100007008();
              uint64_t v80 = v70 - (void)v77;
              if (v80 >> 2 > v79) {
                uint64_t v79 = v80 >> 2;
              }
              else {
                uint64_t v81 = v79;
              }
              if (v81)
              {
                uint64_t v82 = (char *)sub_1000071BC(v13, v81);
                uint64_t v77 = *(char **)(a1 + 32);
                uint64_t v71 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v82 = 0LL;
              }

              uint64_t v95 = &v82[8 * v78];
              *(void *)uint64_t v95 = 0LL;
              uint64_t v72 = v95 + 8;
              while (v71 != v77)
              {
                uint64_t v96 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v95 - 1) = v96;
                v95 -= 8;
              }

              *(void *)(a1 + 32) = v95;
              *(void *)(a1 + 40) = v72;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v82[8 * v81];
              if (v77) {
                operator delete(v77);
              }
            }

            else
            {
              *(void *)uint64_t v71 = 0LL;
              uint64_t v72 = v71 + 8;
            }

            *(void *)(a1 + 40) = v72;
            goto LABEL_153;
          }

          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v27 = *((void *)this + 1);
          __int128 v28 = *((void *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            double v30 = *(char **)(a1 + 40);
            __int128 v29 = *(void *)(a1 + 48);
            if ((unint64_t)v30 >= v29)
            {
              uint64_t v32 = (char *)*v12;
              BOOL v33 = (v30 - (_BYTE *)*v12) >> 3;
              int v34 = v33 + 1;
              double v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                int v34 = v35 >> 2;
              }
              else {
                std::string::size_type v36 = v34;
              }
              if (v36)
              {
                double v37 = (char *)sub_1000071BC(v13, v36);
                uint64_t v32 = *(char **)(a1 + 32);
                double v30 = *(char **)(a1 + 40);
              }

              else
              {
                double v37 = 0LL;
              }

              unint64_t v38 = &v37[8 * v33];
              *(void *)unint64_t v38 = 0LL;
              double v31 = v38 + 8;
              while (v30 != v32)
              {
                __int16 v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }

              *(void *)(a1 + 32) = v38;
              *(void *)(a1 + 40) = v31;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }

            else
            {
              *(void *)double v30 = 0LL;
              double v31 = v30 + 8;
            }

            *(void *)(a1 + 40) = v31;
            double v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7LL || v40 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v31 - 1) = *(void *)(*(void *)this + v40);
            __int128 v28 = *((void *)this + 2);
            __int128 v27 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v27;
          }

          goto LABEL_107;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v74 = *(char **)(a1 + 16);
            uint64_t v73 = *(void *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              unint64_t v83 = (char *)*v11;
              uint64_t v84 = (v74 - (_BYTE *)*v11) >> 3;
              std::string v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61) {
LABEL_167:
              }
                sub_100007008();
              uint64_t v86 = v73 - (void)v83;
              if (v86 >> 2 > v85) {
                std::string v85 = v86 >> 2;
              }
              else {
                uint64_t v87 = v85;
              }
              if (v87)
              {
                uint64_t v88 = (char *)sub_1000071BC(v103, v87);
                unint64_t v83 = *(char **)(a1 + 8);
                uint64_t v74 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v88 = 0LL;
              }

              uint64_t v97 = &v88[8 * v84];
              *(void *)uint64_t v97 = 0LL;
              uint64_t v72 = v97 + 8;
              while (v74 != v83)
              {
                uint64_t v98 = *((void *)v74 - 1);
                v74 -= 8;
                *((void *)v97 - 1) = v98;
                v97 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v97;
              *(void *)(a1 + 16) = v72;
              *(void *)(a1 + 24) = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
            }

            else
            {
              *(void *)uint64_t v74 = 0LL;
              uint64_t v72 = v74 + 8;
            }

            *(void *)(a1 + 16) = v72;
            goto LABEL_153;
          }

          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v41 = *((void *)this + 1);
          __int128 v42 = *((void *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            double v44 = *(char **)(a1 + 16);
            __int128 v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              __int128 v46 = (char *)*v11;
              __int128 v47 = (v44 - (_BYTE *)*v11) >> 3;
              __int128 v48 = v47 + 1;
              __int128 v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                __int128 v48 = v49 >> 2;
              }
              else {
                __int128 v50 = v48;
              }
              if (v50)
              {
                __int128 v51 = (char *)sub_1000071BC(v103, v50);
                __int128 v46 = *(char **)(a1 + 8);
                double v44 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v51 = 0LL;
              }

              __int128 v52 = &v51[8 * v47];
              *(void *)__int128 v52 = 0LL;
              double v45 = v52 + 8;
              while (v44 != v46)
              {
                __int128 v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }

            else
            {
              *(void *)double v44 = 0LL;
              double v45 = v44 + 8;
            }

            *(void *)(a1 + 16) = v45;
            __int128 v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7LL || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            __int128 v42 = *((void *)this + 2);
            __int128 v41 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v41;
          }

          goto LABEL_107;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v55 = *((void *)this + 1);
            __int128 v56 = *((void *)this + 2);
            while (v55 < v56 && !*((_BYTE *)this + 24))
            {
              uint64_t v58 = *(char **)(a1 + 64);
              __int128 v57 = *(void *)(a1 + 72);
              if ((unint64_t)v58 >= v57)
              {
                uint64_t v60 = (char *)*v10;
                double v61 = (v58 - (_BYTE *)*v10) >> 3;
                double v62 = v61 + 1;
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 2 > v62) {
                  double v62 = v63 >> 2;
                }
                else {
                  double v64 = v62;
                }
                if (v64)
                {
                  uint64_t v65 = (char *)sub_1000071BC(v104, v64);
                  uint64_t v60 = *(char **)(a1 + 56);
                  uint64_t v58 = *(char **)(a1 + 64);
                }

                else
                {
                  uint64_t v65 = 0LL;
                }

                int64_t v66 = &v65[8 * v61];
                *(void *)int64_t v66 = 0LL;
                uint64_t v59 = v66 + 8;
                while (v58 != v60)
                {
                  int64_t v67 = *((void *)v58 - 1);
                  v58 -= 8;
                  *((void *)v66 - 1) = v67;
                  v66 -= 8;
                }

                *(void *)(a1 + 56) = v66;
                *(void *)(a1 + 64) = v59;
                *(void *)(a1 + 72) = &v65[8 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }

              else
              {
                *(void *)uint64_t v58 = 0LL;
                uint64_t v59 = v58 + 8;
              }

              *(void *)(a1 + 64) = v59;
              int64_t v68 = *((void *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFF7LL || v68 + 8 > *((void *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v59 - 1) = *(void *)(*(void *)this + v68);
              __int128 v56 = *((void *)this + 2);
              __int128 v55 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v55;
            }

      if ((v13 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      double v22 = v13 >> 3;
      if ((v13 >> 3) == 4)
      {
        __int128 v27 = (void **)operator new(0x10uLL);
        __int128 *v27 = 0LL;
        v27[1] = 0LL;
        sub_1010DD450(v7, v27);
        PB::Reader::read(this, (PB::Data *)*v7);
      }

      else
      {
        if ((_DWORD)v22 == 3)
        {
          __int128 v28 = (void **)operator new(0x18uLL);
          v28[1] = 0LL;
          v28[2] = 0LL;
          __int128 *v28 = 0LL;
          __int128 __p = 0LL;
          __int128 v29 = *v8;
          *uint64_t v8 = v28;
          if (v29)
          {
            sub_10058A4FC((int)v8, v29);
            double v30 = (void **)__p;
            __int128 __p = 0LL;
            if (v30) {
              sub_10058A4FC((int)&__p, v30);
            }
          }

          unint64_t v26 = *v8;
        }

        else
        {
          if ((_DWORD)v22 != 2)
          {
            uint64_t result = PB::Reader::skip(this, v22, v13 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
            goto LABEL_36;
          }

          unint64_t v23 = (void **)operator new(0x18uLL);
          v23[1] = 0LL;
          v23[2] = 0LL;
          char *v23 = 0LL;
          __int128 __p = 0LL;
          double v24 = *v9;
          std::__shared_weak_count *v9 = v23;
          if (v24)
          {
            sub_10058A4FC((int)v9, v24);
            unint64_t v25 = (void **)__p;
            __int128 __p = 0LL;
            if (v25) {
              sub_10058A4FC((int)&__p, v25);
            }
          }

          unint64_t v26 = *v9;
        }

        PB::Reader::read(this, v26);
      }

      __int128 v28 = v19 & 7;
      if ((_DWORD)v28 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v19 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 4u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_459;
              }
              v32 += 7;
              __int128 v29 = v35;
              double v22 = v33++ > 8;
            }

            while (!v22);
LABEL_271:
            int v34 = 0LL;
            goto LABEL_459;
          }

          v248 = 0;
          v249 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              int v34 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v250 = v29 + 1;
              v251 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v250;
              v34 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                __int128 v29 = v250;
                double v22 = v249++ > 8;
                if (v22) {
                  goto LABEL_271;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                int v34 = 0LL;
              }
            }

            break;
          }

  __int128 v15 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 120) |= 4u;
  *(_DWORD *)(a1 + 96) = v15;
  uint64_t v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 8) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 2u;
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          double v30 = *(void *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
          {
            double v31 = 0;
            uint64_t v32 = 0;
            BOOL v33 = 0LL;
            do
            {
              int v34 = v28 + 1;
              *((void *)this + 1) = v28 + 1;
              double v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_212;
              }
              v31 += 7;
              __int128 v28 = v34;
              unint64_t v21 = v32++ > 8;
            }

            while (!v21);
LABEL_146:
            BOOL v33 = 0LL;
            goto LABEL_212;
          }

          uint64_t v117 = 0;
          uint64_t v118 = 0;
          BOOL v33 = 0LL;
          if (v29 <= v28) {
            __int128 v29 = *((void *)this + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              BOOL v33 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v119 = v28 + 1;
              int v120 = *(_BYTE *)(v30 + v28);
              *((void *)this + 1) = v119;
              v33 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                __int128 v28 = v119;
                unint64_t v21 = v118++ > 8;
                if (v21) {
                  goto LABEL_146;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                BOOL v33 = 0LL;
              }
            }

            break;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 144) |= 8u;
          __int128 v27 = *((void *)this + 1);
          __int128 v28 = *((void *)this + 2);
          __int128 v29 = *(void *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5LL && v27 + 10 <= v28)
          {
            double v30 = 0;
            double v31 = 0;
            uint64_t v32 = 0LL;
            do
            {
              BOOL v33 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              int v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_223;
              }
              v30 += 7;
              __int128 v27 = v33;
              unint64_t v20 = v31++ > 8;
            }

            while (!v20);
LABEL_157:
            uint64_t v32 = 0LL;
            goto LABEL_223;
          }

          uint64_t v115 = 0;
          uint64_t v116 = 0;
          uint64_t v32 = 0LL;
          if (v28 <= v27) {
            __int128 v28 = *((void *)this + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              uint64_t v32 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v117 = v27 + 1;
              uint64_t v118 = *(_BYTE *)(v29 + v27);
              *((void *)this + 1) = v117;
              v32 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                __int128 v27 = v117;
                unint64_t v20 = v116++ > 8;
                if (v20) {
                  goto LABEL_157;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v32 = 0LL;
              }
            }

            break;
          }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 200)
      {
        switch((_DWORD)v21)
        {
          case 0xC9:
            *(void *)v8 |= 2uLL;
            __int16 v140 = *((void *)this + 1);
            __int16 v141 = *((void *)this + 2);
            __int16 v142 = *(void *)this;
            if (v140 > 0xFFFFFFFFFFFFFFF5LL || v140 + 10 > v141)
            {
              uint64_t v185 = 0;
              v186 = 0;
              uint64_t v145 = 0LL;
              if (v141 <= v140) {
                __int16 v141 = *((void *)this + 1);
              }
              while (1)
              {
                if (v141 == v140)
                {
                  uint64_t v145 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_372;
                }

                unint64_t v187 = v140 + 1;
                uint64_t v188 = *(_BYTE *)(v142 + v140);
                *((void *)this + 1) = v187;
                v145 |= (unint64_t)(v188 & 0x7F) << v185;
                if ((v188 & 0x80) == 0) {
                  break;
                }
                v185 += 7;
                __int16 v140 = v187;
                __int128 v15 = v186++ > 8;
                if (v15)
                {
LABEL_325:
                  uint64_t v145 = 0LL;
                  goto LABEL_372;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v145 = 0LL;
              }
            }

            else
            {
              unint64_t v143 = 0;
              __int16 v144 = 0;
              uint64_t v145 = 0LL;
              while (1)
              {
                __int128 v146 = v140 + 1;
                *((void *)this + 1) = v140 + 1;
                char v147 = *(_BYTE *)(v142 + v140);
                v145 |= (unint64_t)(v147 & 0x7F) << v143;
                if ((v147 & 0x80) == 0) {
                  break;
                }
                v143 += 7;
                __int16 v140 = v146;
                __int128 v15 = v144++ > 8;
                if (v15) {
                  goto LABEL_325;
                }
              }
            }

      unint64_t v26 = v18 & 7;
      if ((_DWORD)v26 == 4)
      {
        unint64_t v7 = 0;
        return v7 == 0;
      }

      __int128 v27 = v18 >> 3;
      if ((int)(v18 >> 3) > 200)
      {
        switch((int)v27)
        {
          case 201:
            *(_WORD *)(a1 + 204) |= 1u;
            std::string::size_type v36 = *((void *)this + 1);
            double v37 = *((void *)this + 2);
            unint64_t v38 = *(void *)this;
            if (v36 <= 0xFFFFFFFFFFFFFFF5LL && v36 + 10 <= v37)
            {
              __int16 v39 = 0;
              double v40 = 0;
              __int128 v41 = 0LL;
              do
              {
                __int128 v42 = v36 + 1;
                *((void *)this + 1) = v36 + 1;
                __int128 v43 = *(_BYTE *)(v38 + v36);
                v41 |= (unint64_t)(v43 & 0x7F) << v39;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_368;
                }
                v39 += 7;
                std::string::size_type v36 = v42;
                __int128 v104 = v40++ > 8;
              }

              while (!v104);
LABEL_271:
              __int128 v41 = 0LL;
              goto LABEL_368;
            }

            unint64_t v187 = 0;
            uint64_t v188 = 0;
            __int128 v41 = 0LL;
            if (v37 <= v36) {
              double v37 = *((void *)this + 1);
            }
            while (2)
            {
              if (v37 == v36)
              {
                __int128 v41 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v189 = v36 + 1;
                v190 = *(_BYTE *)(v38 + v36);
                *((void *)this + 1) = v189;
                v41 |= (unint64_t)(v190 & 0x7F) << v187;
                if (v190 < 0)
                {
                  v187 += 7;
                  std::string::size_type v36 = v189;
                  __int128 v104 = v188++ > 8;
                  if (v104) {
                    goto LABEL_271;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v41 = 0LL;
                }
              }

              break;
            }

  unint64_t v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "pressureODR", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 32));
    if ((*(_WORD *)(a1 + 68) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xBu);
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(void *)v8 |= 1uLL;
            double v22 = *((void *)this + 1);
            unint64_t v23 = *((void *)this + 2);
            double v24 = *(void *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
            {
              unint64_t v25 = 0;
              unint64_t v26 = 0;
              __int128 v27 = 0LL;
              do
              {
                __int128 v28 = v22 + 1;
                *((void *)this + 1) = v22 + 1;
                __int128 v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_313;
                }
                v25 += 7;
                double v22 = v28;
                __int128 v15 = v26++ > 8;
              }

              while (!v15);
LABEL_263:
              __int128 v27 = 0LL;
              goto LABEL_313;
            }

            __int128 v156 = 0;
            __int128 v157 = 0;
            __int128 v27 = 0LL;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)this + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                __int128 v27 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                v158 = v22 + 1;
                __int16 v159 = *(_BYTE *)(v24 + v22);
                *((void *)this + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  double v22 = v158;
                  __int128 v15 = v157++ > 8;
                  if (v15) {
                    goto LABEL_263;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v27 = 0LL;
                }
              }

              break;
            }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch((_DWORD)v21)
        {
          case 1:
            *(void *)v8 |= 1uLL;
            __int16 v165 = *((void *)this + 1);
            unint64_t v166 = *((void *)this + 2);
            int v167 = *(void *)this;
            if (v165 > 0xFFFFFFFFFFFFFFF5LL || v165 + 10 > v166)
            {
              unint64_t v187 = 0;
              uint64_t v188 = 0;
              uint64_t v170 = 0LL;
              if (v166 <= v165) {
                unint64_t v166 = *((void *)this + 1);
              }
              while (1)
              {
                if (v166 == v165)
                {
                  uint64_t v170 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_339;
                }

                uint64_t v189 = v165 + 1;
                v190 = *(_BYTE *)(v167 + v165);
                *((void *)this + 1) = v189;
                v170 |= (unint64_t)(v190 & 0x7F) << v187;
                if ((v190 & 0x80) == 0) {
                  break;
                }
                v187 += 7;
                __int16 v165 = v189;
                __int128 v15 = v188++ > 8;
                if (v15)
                {
LABEL_318:
                  uint64_t v170 = 0LL;
                  goto LABEL_339;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v170 = 0LL;
              }
            }

            else
            {
              __int128 v168 = 0;
              uint64_t v169 = 0;
              uint64_t v170 = 0LL;
              while (1)
              {
                uint64_t v171 = v165 + 1;
                *((void *)this + 1) = v165 + 1;
                v172 = *(_BYTE *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0) {
                  break;
                }
                v168 += 7;
                __int16 v165 = v171;
                __int128 v15 = v169++ > 8;
                if (v15) {
                  goto LABEL_318;
                }
              }
            }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 1102)
      {
        switch((int)v21)
        {
          case 1103:
            *(void *)v8 |= 4uLL;
            __int128 v46 = *((void *)this + 1);
            __int128 v47 = *((void *)this + 2);
            __int128 v48 = *(void *)this;
            if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
            {
              __int128 v49 = 0;
              __int128 v50 = 0;
              __int128 v51 = 0LL;
              do
              {
                __int128 v52 = v46 + 1;
                *((void *)this + 1) = v46 + 1;
                __int128 v53 = *(_BYTE *)(v48 + v46);
                v51 |= (unint64_t)(v53 & 0x7F) << v49;
                if ((v53 & 0x80) == 0) {
                  goto LABEL_398;
                }
                v49 += 7;
                __int128 v46 = v52;
                __int128 v15 = v50++ > 8;
              }

              while (!v15);
LABEL_272:
              __int128 v51 = 0LL;
              goto LABEL_398;
            }

            v313 = 0;
            v314 = 0;
            __int128 v51 = 0LL;
            if (v47 <= v46) {
              __int128 v47 = *((void *)this + 1);
            }
            while (2)
            {
              if (v47 == v46)
              {
                __int128 v51 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                v315 = v46 + 1;
                v316 = *(_BYTE *)(v48 + v46);
                *((void *)this + 1) = v315;
                v51 |= (unint64_t)(v316 & 0x7F) << v313;
                if (v316 < 0)
                {
                  v313 += 7;
                  __int128 v46 = v315;
                  __int128 v15 = v314++ > 8;
                  if (v15) {
                    goto LABEL_272;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v51 = 0LL;
                }
              }

              break;
            }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 80) = result;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  uint64_t v10 = *(_BYTE *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 60) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "isCriticalFP", *(_BYTE *)(a1 + 60));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x12Du);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  uint64_t v5 = *(_BYTE *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 52) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 49), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  }

      __int128 v27 = v19 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v19 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 140) |= 1u;
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          double v30 = *(void *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
          {
            double v31 = 0;
            uint64_t v32 = 0;
            BOOL v33 = 0LL;
            do
            {
              int v34 = v28 + 1;
              *((void *)this + 1) = v28 + 1;
              double v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_265;
              }
              v31 += 7;
              __int128 v28 = v34;
              uint64_t v93 = v32++ > 8;
            }

            while (!v93);
LABEL_202:
            BOOL v33 = 0LL;
            goto LABEL_265;
          }

          v131 = 0;
          int v132 = 0;
          BOOL v33 = 0LL;
          if (v29 <= v28) {
            __int128 v29 = *((void *)this + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              BOOL v33 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v133 = v28 + 1;
              int v134 = *(_BYTE *)(v30 + v28);
              *((void *)this + 1) = v133;
              v33 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                __int128 v28 = v133;
                uint64_t v93 = v132++ > 8;
                if (v93) {
                  goto LABEL_202;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                BOOL v33 = 0LL;
              }
            }

            break;
          }

  __int128 v14 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) |= 0x80u;
  *(_DWORD *)(a1 + 96) = v14;
  uint64_t v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *(void *)(a1 + 72));
  unint64_t v9 = *(_WORD *)(a1 + 104);
  if ((v9 & 0x40) == 0)
  {
LABEL_12:
    if ((v9 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

      unint64_t v25 = v17 & 7;
      if ((_DWORD)v25 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 104) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          __int128 v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5LL && v26 + 10 <= v27)
          {
            __int128 v29 = 0;
            double v30 = 0;
            double v31 = 0LL;
            do
            {
              uint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              BOOL v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_216;
              }
              v29 += 7;
              unint64_t v26 = v32;
              __int128 v47 = v30++ > 8;
            }

            while (!v47);
LABEL_164:
            double v31 = 0LL;
            goto LABEL_216;
          }

          uint64_t v110 = 0;
          uint64_t v111 = 0;
          double v31 = 0LL;
          if (v27 <= v26) {
            __int128 v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              double v31 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v112 = v26 + 1;
              uint64_t v113 = *(_BYTE *)(v28 + v26);
              *((void *)this + 1) = v112;
              v31 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                unint64_t v26 = v112;
                __int128 v47 = v111++ > 8;
                if (v47) {
                  goto LABEL_164;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                double v31 = 0LL;
              }
            }

            break;
          }

      unint64_t v26 = v18 & 7;
      if ((_DWORD)v26 == 4)
      {
        unint64_t v7 = 0;
        return v7 == 0;
      }

      __int128 v27 = v18 >> 3;
      if ((int)(v18 >> 3) > 100)
      {
        switch((int)v27)
        {
          case 201:
            *(_DWORD *)(a1 + 152) |= 0x1000u;
            __int128 v29 = *((void *)this + 1);
            double v30 = *((void *)this + 2);
            double v31 = *(void *)this;
            if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
            {
              uint64_t v32 = 0;
              BOOL v33 = 0;
              int v34 = 0LL;
              do
              {
                double v35 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                std::string::size_type v36 = *(_BYTE *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_288;
                }
                v32 += 7;
                __int128 v29 = v35;
                unsigned int v105 = v33++ > 8;
              }

              while (!v105);
LABEL_192:
              LODWORD(v34) = 0;
              goto LABEL_288;
            }

            v155 = 0;
            __int128 v156 = 0;
            int v34 = 0LL;
            if (v30 <= v29) {
              double v30 = *((void *)this + 1);
            }
            while (2)
            {
              if (v30 == v29)
              {
                LODWORD(v34) = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                __int128 v157 = v29 + 1;
                v158 = *(_BYTE *)(v31 + v29);
                *((void *)this + 1) = v157;
                v34 |= (unint64_t)(v158 & 0x7F) << v155;
                if (v158 < 0)
                {
                  v155 += 7;
                  __int128 v29 = v157;
                  unsigned int v105 = v156++ > 8;
                  if (v105) {
                    goto LABEL_192;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v34) = 0;
                }
              }

              break;
            }

  PB::TextFormatter::format(this, "armedDurationThresholdTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0xC9u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 0x4000u;
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          double v30 = *(void *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
          {
            double v31 = 0;
            uint64_t v32 = 0;
            BOOL v33 = 0LL;
            do
            {
              int v34 = v28 + 1;
              *((void *)this + 1) = v28 + 1;
              double v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_212;
              }
              v31 += 7;
              __int128 v28 = v34;
              unint64_t v21 = v32++ > 8;
            }

            while (!v21);
LABEL_160:
            LODWORD(v33) = 0;
            goto LABEL_212;
          }

          uint64_t v106 = 0;
          uint64_t v107 = 0;
          BOOL v33 = 0LL;
          if (v29 <= v28) {
            __int128 v29 = *((void *)this + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v108 = v28 + 1;
              uint64_t v109 = *(_BYTE *)(v30 + v28);
              *((void *)this + 1) = v108;
              v33 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                __int128 v28 = v108;
                unint64_t v21 = v107++ > 8;
                if (v21) {
                  goto LABEL_160;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v33) = 0;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        unint64_t v20 = (void **)operator new(0x18uLL);
        v20[1] = 0LL;
        v20[2] = 0LL;
        *unint64_t v20 = 0LL;
        __int128 __p = 0LL;
        unint64_t v21 = *v7;
        *unint64_t v7 = v20;
        if (v21)
        {
          sub_10058A4FC((int)v7, v21);
          double v22 = (void **)__p;
          __int128 __p = 0LL;
          if (v22) {
            sub_10058A4FC((int)&__p, v22);
          }
        }

        PB::Reader::read(this, *v7);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v15 = 0;
    __int128 v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      double v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        unint64_t v11 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_102;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 8u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v28);
LABEL_37:
          __int128 v29 = *((void *)this + 1) + 4LL;
          goto LABEL_103;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v70, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 3;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 2 > v37) {
                  double v37 = v38 >> 2;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_1000071BC(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[8 * v36];
                *(void *)__int128 v41 = 0LL;
                int v34 = v41 + 8;
                while (v33 != v35)
                {
                  __int128 v42 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v41 - 1) = v42;
                  v41 -= 8;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[8 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(void *)BOOL v33 = 0LL;
                int v34 = v33 + 8;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7LL || v43 + 8 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(void *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v30;
            }

            PB::Reader::recallMark(this, v70);
          }

          else
          {
            __int128 v53 = *(char **)(a1 + 16);
            __int128 v52 = *(void *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              uint64_t v59 = (char *)*v10;
              uint64_t v60 = (v53 - (_BYTE *)*v10) >> 3;
              double v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61) {
LABEL_114:
              }
                sub_100007008();
              double v62 = v52 - (void)v59;
              if (v62 >> 2 > v61) {
                double v61 = v62 >> 2;
              }
              else {
                uint64_t v63 = v61;
              }
              if (v63)
              {
                double v64 = (char *)sub_1000071BC(v11, v63);
                uint64_t v59 = *(char **)(a1 + 8);
                __int128 v53 = *(char **)(a1 + 16);
              }

              else
              {
                double v64 = 0LL;
              }

              uint64_t v65 = &v64[8 * v60];
              *(void *)uint64_t v65 = 0LL;
              __int128 v54 = v65 + 8;
              while (v53 != v59)
              {
                int64_t v66 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v65 - 1) = v66;
                v65 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v65;
              *(void *)(a1 + 16) = v54;
              *(void *)(a1 + 24) = &v64[8 * v63];
              if (v59) {
                operator delete(v59);
              }
            }

            else
            {
              *(void *)__int128 v53 = 0LL;
              __int128 v54 = v53 + 8;
            }

            *(void *)(a1 + 16) = v54;
            int64_t v67 = *((void *)this + 1);
            if (v67 <= 0xFFFFFFFFFFFFFFF7LL && v67 + 8 <= *((void *)this + 2))
            {
              *(v54 - 1) = *(void *)(*(void *)this + v67);
LABEL_102:
              __int128 v29 = *((void *)this + 1) + 8LL;
LABEL_103:
              *((void *)this + 1) = v29;
            }

            else
            {
LABEL_100:
              *((_BYTE *)this + 24) = 1;
            }
          }

      unint64_t v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v16 >> 3))
      {
        case 1u:
          if ((_DWORD)v25 != 2)
          {
            uint64_t v78 = *(char **)(a1 + 64);
            uint64_t v77 = *(void *)(a1 + 72);
            if ((unint64_t)v78 >= v77)
            {
              uint64_t v84 = (char *)*v12;
              std::string v85 = (v78 - (_BYTE *)*v12) >> 2;
              uint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_180:
              }
                sub_100007008();
              uint64_t v87 = v77 - (void)v84;
              if (v87 >> 1 > v86) {
                uint64_t v86 = v87 >> 1;
              }
              else {
                uint64_t v88 = v86;
              }
              if (v88)
              {
                double v89 = (char *)sub_10000956C(v110, v88);
                uint64_t v84 = *(char **)(a1 + 56);
                uint64_t v78 = *(char **)(a1 + 64);
              }

              else
              {
                double v89 = 0LL;
              }

              BOOL v102 = &v89[4 * v85];
              *(_DWORD *)BOOL v102 = 0;
              uint64_t v79 = v102 + 4;
              while (v78 != v84)
              {
                double v103 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }

              *(void *)(a1 + 56) = v102;
              *(void *)(a1 + 64) = v79;
              *(void *)(a1 + 72) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v78 = 0;
              uint64_t v79 = v78 + 4;
            }

            *(void *)(a1 + 64) = v79;
            goto LABEL_167;
          }

          if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            __int128 v29 = *(char **)(a1 + 64);
            __int128 v28 = *(void *)(a1 + 72);
            if ((unint64_t)v29 >= v28)
            {
              double v31 = (char *)*v12;
              uint64_t v32 = (v29 - (_BYTE *)*v12) >> 2;
              BOOL v33 = v32 + 1;
              int v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                BOOL v33 = v34 >> 1;
              }
              else {
                double v35 = v33;
              }
              if (v35)
              {
                std::string::size_type v36 = (char *)sub_10000956C(v110, v35);
                double v31 = *(char **)(a1 + 56);
                __int128 v29 = *(char **)(a1 + 64);
              }

              else
              {
                std::string::size_type v36 = 0LL;
              }

              double v37 = &v36[4 * v32];
              *(_DWORD *)double v37 = 0;
              double v30 = v37 + 4;
              while (v29 != v31)
              {
                unint64_t v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }

              *(void *)(a1 + 56) = v37;
              *(void *)(a1 + 64) = v30;
              *(void *)(a1 + 72) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }

            else
            {
              *(_DWORD *)__int128 v29 = 0;
              double v30 = v29 + 4;
            }

            *(void *)(a1 + 64) = v30;
            __int16 v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
              goto LABEL_120;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)this + v39);
            __int128 v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v26;
          }

          goto LABEL_121;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            uint64_t v81 = *(char **)(a1 + 40);
            uint64_t v80 = *(void *)(a1 + 48);
            if ((unint64_t)v81 >= v80)
            {
              uint64_t v90 = (char *)*v11;
              uint64_t v91 = (v81 - (_BYTE *)*v11) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_181:
              }
                sub_100007008();
              uint64_t v93 = v80 - (void)v90;
              if (v93 >> 1 > v92) {
                v92 = v93 >> 1;
              }
              else {
                uint64_t v94 = v92;
              }
              if (v94)
              {
                uint64_t v95 = (char *)sub_10000956C(v111, v94);
                uint64_t v90 = *(char **)(a1 + 32);
                uint64_t v81 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v95 = 0LL;
              }

              __int128 v104 = &v95[4 * v91];
              *(_DWORD *)__int128 v104 = 0;
              uint64_t v79 = v104 + 4;
              while (v81 != v90)
              {
                unsigned int v105 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }

              *(void *)(a1 + 32) = v104;
              *(void *)(a1 + 40) = v79;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v81 = 0;
              uint64_t v79 = v81 + 4;
            }

            *(void *)(a1 + 40) = v79;
            goto LABEL_167;
          }

          if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0) {
            return 0LL;
          }
          double v40 = *((void *)this + 1);
          __int128 v41 = *((void *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            __int128 v43 = *(char **)(a1 + 40);
            __int128 v42 = *(void *)(a1 + 48);
            if ((unint64_t)v43 >= v42)
            {
              double v45 = (char *)*v11;
              __int128 v46 = (v43 - (_BYTE *)*v11) >> 2;
              __int128 v47 = v46 + 1;
              __int128 v48 = v42 - (void)v45;
              if (v48 >> 1 > v47) {
                __int128 v47 = v48 >> 1;
              }
              else {
                __int128 v49 = v47;
              }
              if (v49)
              {
                __int128 v50 = (char *)sub_10000956C(v111, v49);
                double v45 = *(char **)(a1 + 32);
                __int128 v43 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v50 = 0LL;
              }

              __int128 v51 = &v50[4 * v46];
              *(_DWORD *)__int128 v51 = 0;
              double v44 = v51 + 4;
              while (v43 != v45)
              {
                __int128 v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }

              *(void *)(a1 + 32) = v51;
              *(void *)(a1 + 40) = v44;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }

            else
            {
              *(_DWORD *)__int128 v43 = 0;
              double v44 = v43 + 4;
            }

            *(void *)(a1 + 40) = v44;
            __int128 v53 = *((void *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
              goto LABEL_120;
            }
            *(v44 - 1) = *(_DWORD *)(*(void *)this + v53);
            __int128 v41 = *((void *)this + 2);
            double v40 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v40;
          }

          goto LABEL_121;
        case 3u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v54 = *((void *)this + 1);
            __int128 v55 = *((void *)this + 2);
            while (v54 < v55 && !*((_BYTE *)this + 24))
            {
              __int128 v57 = *(char **)(a1 + 16);
              __int128 v56 = *(void *)(a1 + 24);
              if ((unint64_t)v57 >= v56)
              {
                uint64_t v59 = (char *)*v10;
                uint64_t v60 = (v57 - (_BYTE *)*v10) >> 2;
                double v61 = v60 + 1;
                double v62 = v56 - (void)v59;
                if (v62 >> 1 > v61) {
                  double v61 = v62 >> 1;
                }
                else {
                  uint64_t v63 = v61;
                }
                if (v63)
                {
                  double v64 = (char *)sub_10000956C(v112, v63);
                  uint64_t v59 = *(char **)(a1 + 8);
                  __int128 v57 = *(char **)(a1 + 16);
                }

                else
                {
                  double v64 = 0LL;
                }

                uint64_t v65 = &v64[4 * v60];
                *(_DWORD *)uint64_t v65 = 0;
                uint64_t v58 = v65 + 4;
                while (v57 != v59)
                {
                  int64_t v66 = *((_DWORD *)v57 - 1);
                  v57 -= 4;
                  *((_DWORD *)v65 - 1) = v66;
                  v65 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v65;
                *(void *)(a1 + 16) = v58;
                *(void *)(a1 + 24) = &v64[4 * v63];
                if (v59) {
                  operator delete(v59);
                }
              }

              else
              {
                *(_DWORD *)__int128 v57 = 0;
                uint64_t v58 = v57 + 4;
              }

              *(void *)(a1 + 16) = v58;
              int64_t v67 = *((void *)this + 1);
              if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2))
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v58 - 1) = *(_DWORD *)(*(void *)this + v67);
              __int128 v55 = *((void *)this + 2);
              __int128 v54 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v54;
            }

      if ((v13 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      double v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        __int128 v27 = (void **)operator new(0x18uLL);
        v27[1] = 0LL;
        v27[2] = 0LL;
        __int128 *v27 = 0LL;
        __p[0] = 0LL;
        __int128 v28 = *v8;
        *uint64_t v8 = v27;
        if (v28)
        {
          sub_10058A4FC((int)v8, v28);
          __int128 v29 = (void **)__p[0];
          __p[0] = 0LL;
          if (v29) {
            sub_10058A4FC((int)__p, v29);
          }
        }

        PB::Reader::read(this, *v8);
      }

      else if ((_DWORD)v22 == 2)
      {
        double v30 = (void **)operator new(0x10uLL);
        void *v30 = 0LL;
        v30[1] = 0LL;
        sub_1010DD450(v9, v30);
        PB::Reader::read(this, (PB::Data *)*v9);
      }

      else if ((_DWORD)v22 == 1)
      {
        unint64_t v25 = operator new(0x28uLL);
        void *v25 = &off_10189AFC8;
        v25[1] = 0LL;
        v25[2] = 0LL;
        void v25[3] = 0LL;
        *((_DWORD *)v25 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        unint64_t v26 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v25;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
          unint64_t v25 = *(void **)(a1 + 24);
        }

        if (!PB::Reader::placeMark(this, __p, v23, v24)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v25 + 16LL))(v25, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, __p);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v22, v13 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v17 = 0;
    double v18 = 0;
    char v13 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      unint64_t v20 = *(_BYTE *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      uint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        char v13 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v13 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 2u;
          double v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          double v24 = *(void *)this;
          if (v22 > 0xFFFFFFFFFFFFFFF5LL || v22 + 10 > v23)
          {
            __int128 v46 = 0;
            __int128 v47 = 0;
            __int128 v27 = 0LL;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)this + 1);
            }
            do
            {
              if (v23 == v22)
              {
                LODWORD(v27) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_65;
              }

              __int128 v48 = v22 + 1;
              __int128 v49 = *(_BYTE *)(v24 + v22);
              *((void *)this + 1) = v48;
              v27 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_65;
              }

              v46 += 7;
              double v22 = v48;
              __int128 v16 = v47++ > 8;
            }

            while (!v16);
LABEL_54:
            LODWORD(v27) = 0;
          }

          else
          {
            unint64_t v25 = 0;
            unint64_t v26 = 0;
            __int128 v27 = 0LL;
            while (1)
            {
              __int128 v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              __int128 v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                break;
              }
              v25 += 7;
              double v22 = v28;
              __int128 v16 = v26++ > 8;
              if (v16) {
                goto LABEL_54;
              }
            }
          }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((_DWORD)v25 == 2)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        double v44 = *((void *)this + 1);
        if (v44 >= *((void *)this + 2))
        {
          __int128 v47 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          double v45 = v44 + 1;
          __int128 v46 = *(unsigned __int8 *)(*(void *)this + v44);
          *((void *)this + 1) = v45;
          __int128 v47 = v46 != 0;
        }

        *(_BYTE *)(a1 + 40) = v47;
        goto LABEL_81;
      }

      if ((_DWORD)v25 == 1)
      {
        __int128 v28 = operator new(0x28uLL);
        __int128 *v28 = &off_10189AFC8;
        v28[1] = 0LL;
        v28[2] = 0LL;
        v28[3] = 0LL;
        *((_DWORD *)v28 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        __int128 v29 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
          __int128 v28 = *(void **)(a1 + 32);
        }

        if (!PB::Reader::placeMark(this, v61, v26, v27)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v28 + 16LL))(v28, this) & 1) == 0)
        {
          return 0LL;
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        unint64_t v20 = (void **)operator new(0x18uLL);
        v20[1] = 0LL;
        v20[2] = 0LL;
        *unint64_t v20 = 0LL;
        __int128 __p = 0LL;
        unint64_t v21 = *v7;
        *unint64_t v7 = v20;
        if (v21)
        {
          sub_10058A4FC((int)v7, v21);
          double v22 = (void **)__p;
          __int128 __p = 0LL;
          if (v22) {
            sub_10058A4FC((int)&__p, v22);
          }
        }

        PB::Reader::read(this, *v7);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v15 = 0;
    __int128 v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      double v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        unint64_t v11 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        unint64_t v20 = (void **)operator new(0x18uLL);
        v20[1] = 0LL;
        v20[2] = 0LL;
        *unint64_t v20 = 0LL;
        __int128 __p = 0LL;
        unint64_t v21 = *v7;
        *unint64_t v7 = v20;
        if (v21)
        {
          sub_10058A4FC((int)v7, v21);
          double v22 = (void **)__p;
          __int128 __p = 0LL;
          if (v22) {
            sub_10058A4FC((int)&__p, v22);
          }
        }

        PB::Reader::read(this, *v7);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v15 = 0;
    __int128 v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      double v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        unint64_t v11 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      __int128 v27 = v19 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v19 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 224) |= 2u;
          __int128 v28 = *((void *)this + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7LL && v28 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v28);
            *((void *)this + 1) += 8LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_706;
        case 2u:
          *(_BYTE *)(a1 + 224) |= 1u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_518;
              }
              v32 += 7;
              __int128 v29 = v35;
              int64_t v66 = v33++ > 8;
            }

            while (!v66);
LABEL_417:
            int v34 = 0LL;
            goto LABEL_518;
          }

          v238 = 0;
          v239 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              int v34 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v240 = v29 + 1;
              v241 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v240;
              v34 |= (unint64_t)(v241 & 0x7F) << v238;
              if (v241 < 0)
              {
                v238 += 7;
                __int128 v29 = v240;
                int64_t v66 = v239++ > 8;
                if (v66) {
                  goto LABEL_417;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                int v34 = 0LL;
              }
            }

            break;
          }

  uint64_t v12 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 56) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  if ((*(_WORD *)(a2 + 56) & 8) != 0) {
    goto LABEL_22;
  }
  return result;
}

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v18 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 104) |= 8u;
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          double v30 = *(void *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
          {
            double v31 = 0;
            uint64_t v32 = 0;
            BOOL v33 = 0LL;
            do
            {
              int v34 = v28 + 1;
              *((void *)this + 1) = v28 + 1;
              double v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_190;
              }
              v31 += 7;
              __int128 v28 = v34;
              unint64_t v21 = v32++ > 8;
            }

            while (!v21);
LABEL_124:
            LODWORD(v33) = 0;
            goto LABEL_190;
          }

          uint64_t v107 = 0;
          uint64_t v108 = 0;
          BOOL v33 = 0LL;
          if (v29 <= v28) {
            __int128 v29 = *((void *)this + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v109 = v28 + 1;
              uint64_t v110 = *(_BYTE *)(v30 + v28);
              *((void *)this + 1) = v109;
              v33 |= (unint64_t)(v110 & 0x7F) << v107;
              if (v110 < 0)
              {
                v107 += 7;
                __int128 v28 = v109;
                unint64_t v21 = v108++ > 8;
                if (v21) {
                  goto LABEL_124;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v33) = 0;
              }
            }

            break;
          }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 8u);
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  }
  return result;
}

        if ((v15 & 7) != 4)
        {
          switch((v15 >> 3))
          {
            case 1u:
              unint64_t v26 = operator new(0x28uLL);
              *unint64_t v26 = &off_10189AFC8;
              v26[1] = 0LL;
              v26[2] = 0LL;
              v26[3] = 0LL;
              *((_DWORD *)v26 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
              __int128 v27 = *(void *)(a1 + 8);
              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v26;
              if (v27)
              {
                (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
                unint64_t v26 = *(void **)(a1 + 8);
              }

              if (PB::Reader::placeMark(this, __p, v24, v25)
                && ((*(uint64_t (**)(void *, PB::Reader *))(*v26 + 16LL))(v26, this) & 1) != 0)
              {
                PB::Reader::recallMark(this, __p);
                goto LABEL_42;
              }

              return 0LL;
            case 2u:
              __int128 v29 = (void **)operator new(0x10uLL);
              *__int128 v29 = 0LL;
              v29[1] = 0LL;
              sub_1010DD450(v11, v29);
              double v30 = *v11;
              goto LABEL_32;
            case 3u:
              double v31 = (void **)operator new(0x10uLL);
              *double v31 = 0LL;
              v31[1] = 0LL;
              sub_1010DD450(v10, v31);
              double v30 = *v10;
LABEL_32:
              PB::Reader::read(this, (PB::Data *)v30);
              goto LABEL_42;
            case 4u:
              uint64_t v32 = (void **)operator new(0x18uLL);
              v32[1] = 0LL;
              v32[2] = 0LL;
              void *v32 = 0LL;
              __p[0] = 0LL;
              BOOL v33 = *v9;
              std::__shared_weak_count *v9 = v32;
              if (v33)
              {
                sub_10058A4FC((int)v9, v33);
                int v34 = (void **)__p[0];
                __p[0] = 0LL;
                if (v34) {
                  sub_10058A4FC((int)__p, v34);
                }
              }

              double v35 = *v9;
              goto LABEL_41;
            case 5u:
              std::string::size_type v36 = (void **)operator new(0x18uLL);
              v36[1] = 0LL;
              v36[2] = 0LL;
              double *v36 = 0LL;
              __p[0] = 0LL;
              double v37 = *v8;
              *uint64_t v8 = v36;
              if (v37)
              {
                sub_10058A4FC((int)v8, v37);
                unint64_t v38 = (void **)__p[0];
                __p[0] = 0LL;
                if (v38) {
                  sub_10058A4FC((int)__p, v38);
                }
              }

              double v35 = *v8;
LABEL_41:
              PB::Reader::read(this, v35);
              goto LABEL_42;
            default:
              uint64_t result = PB::Reader::skip(this, v15 >> 3, v15 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
LABEL_42:
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      unint64_t v23 = v15 & 7;
      if ((_DWORD)v23 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 4u;
          double v24 = *((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          unint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5LL && v24 + 10 <= v25)
          {
            __int128 v27 = 0;
            __int128 v28 = 0;
            __int128 v29 = 0LL;
            do
            {
              double v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              double v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_133;
              }
              v27 += 7;
              double v24 = v30;
              double v62 = v28++ > 8;
            }

            while (!v62);
LABEL_100:
            LODWORD(v29) = 0;
            goto LABEL_133;
          }

          uint64_t v73 = 0;
          uint64_t v74 = 0;
          __int128 v29 = 0LL;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v75 = v24 + 1;
              uint64_t v76 = *(_BYTE *)(v26 + v24);
              *((void *)this + 1) = v75;
              v29 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                double v24 = v75;
                double v62 = v74++ > 8;
                if (v62) {
                  goto LABEL_100;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v29) = 0;
              }
            }

            break;
          }

  char v13 = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 192) |= 8u;
  *(_DWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  uint64_t v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

      unint64_t v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_347;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v26);
          __int128 v27 = *((void *)this + 1) + 8LL;
          goto LABEL_350;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            __int16 v142 = *(char **)(a1 + 16);
            __int16 v141 = *(void *)(a1 + 24);
            if ((unint64_t)v142 >= v141)
            {
              unint64_t v166 = (char *)*v12;
              int v167 = (v142 - (_BYTE *)*v12) >> 2;
              __int128 v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 62) {
LABEL_366:
              }
                sub_100007008();
              uint64_t v169 = v141 - (void)v166;
              if (v169 >> 1 > v168) {
                __int128 v168 = v169 >> 1;
              }
              else {
                uint64_t v170 = v168;
              }
              if (v170)
              {
                uint64_t v171 = (char *)sub_10000956C(v217, v170);
                unint64_t v166 = *(char **)(a1 + 8);
                __int16 v142 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v171 = 0LL;
              }

              v202 = &v171[4 * v167];
              *(_DWORD *)v202 = 0;
              unint64_t v143 = v202 + 4;
              while (v142 != v166)
              {
                v203 = *((_DWORD *)v142 - 1);
                v142 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v202;
              *(void *)(a1 + 16) = v143;
              *(void *)(a1 + 24) = &v171[4 * v170];
              if (v166) {
                operator delete(v166);
              }
            }

            else
            {
              *(_DWORD *)__int16 v142 = 0;
              unint64_t v143 = v142 + 4;
            }

            *(void *)(a1 + 16) = v143;
            goto LABEL_345;
          }

          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 16);
            double v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 2;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                double v35 = v36 >> 1;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_10000956C(v217, v37);
                BOOL v33 = *(char **)(a1 + 8);
                double v31 = *(char **)(a1 + 16);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[4 * v34];
              *(_DWORD *)__int16 v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                double v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(_DWORD *)double v31 = 0;
              uint64_t v32 = v31 + 4;
            }

            *(void *)(a1 + 16) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_208;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_209;
        case 3u:
          if ((_DWORD)v25 != 2)
          {
            uint64_t v145 = *(char **)(a1 + 40);
            __int16 v144 = *(void *)(a1 + 48);
            if ((unint64_t)v145 >= v144)
            {
              v172 = (char *)*v11;
              v173 = (v145 - (_BYTE *)*v11) >> 2;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 62) {
LABEL_361:
              }
                sub_100007008();
              int v175 = v144 - (void)v172;
              if (v175 >> 1 > v174) {
                v174 = v175 >> 1;
              }
              else {
                char v176 = v174;
              }
              if (v176)
              {
                v177 = (char *)sub_10000956C(v218, v176);
                v172 = *(char **)(a1 + 32);
                uint64_t v145 = *(char **)(a1 + 40);
              }

              else
              {
                v177 = 0LL;
              }

              v204 = &v177[4 * v173];
              *(_DWORD *)v204 = 0;
              unint64_t v143 = v204 + 4;
              while (v145 != v172)
              {
                v205 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }

              *(void *)(a1 + 32) = v204;
              *(void *)(a1 + 40) = v143;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v177[4 * v176];
              if (v172) {
                operator delete(v172);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v145 = 0;
              unint64_t v143 = v145 + 4;
            }

            *(void *)(a1 + 40) = v143;
            goto LABEL_345;
          }

          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v42 = *((void *)this + 1);
          __int128 v43 = *((void *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            double v45 = *(char **)(a1 + 40);
            double v44 = *(void *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              __int128 v47 = (char *)*v11;
              __int128 v48 = (v45 - (_BYTE *)*v11) >> 2;
              __int128 v49 = v48 + 1;
              __int128 v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                __int128 v49 = v50 >> 1;
              }
              else {
                __int128 v51 = v49;
              }
              if (v51)
              {
                __int128 v52 = (char *)sub_10000956C(v218, v51);
                __int128 v47 = *(char **)(a1 + 32);
                double v45 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v52 = 0LL;
              }

              __int128 v53 = &v52[4 * v48];
              *(_DWORD *)__int128 v53 = 0;
              __int128 v46 = v53 + 4;
              while (v45 != v47)
              {
                __int128 v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }

              *(void *)(a1 + 32) = v53;
              *(void *)(a1 + 40) = v46;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              *(_DWORD *)double v45 = 0;
              __int128 v46 = v45 + 4;
            }

            *(void *)(a1 + 40) = v46;
            __int128 v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_208;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            __int128 v43 = *((void *)this + 2);
            __int128 v42 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v42;
          }

          goto LABEL_209;
        case 4u:
          if ((_DWORD)v25 != 2)
          {
            char v147 = *(char **)(a1 + 88);
            __int128 v146 = *(void *)(a1 + 96);
            if ((unint64_t)v147 >= v146)
            {
              uint64_t v178 = (char *)*v10;
              v179 = (v147 - (_BYTE *)*v10) >> 2;
              __int128 v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62) {
LABEL_362:
              }
                sub_100007008();
              v181 = v146 - (void)v178;
              if (v181 >> 1 > v180) {
                __int128 v180 = v181 >> 1;
              }
              else {
                char v182 = v180;
              }
              if (v182)
              {
                v183 = (char *)sub_10000956C(v219, v182);
                uint64_t v178 = *(char **)(a1 + 80);
                char v147 = *(char **)(a1 + 88);
              }

              else
              {
                v183 = 0LL;
              }

              __int16 v206 = &v183[4 * v179];
              *(_DWORD *)__int16 v206 = 0;
              unint64_t v143 = v206 + 4;
              while (v147 != v178)
              {
                unint64_t v207 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }

              *(void *)(a1 + 80) = v206;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v143;
              *(void *)(a1 + 96) = &v183[4 * v182];
              if (v178) {
                operator delete(v178);
              }
            }

            else
            {
              *(_DWORD *)char v147 = 0;
              unint64_t v143 = v147 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v143;
            goto LABEL_345;
          }

          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v56 = *((void *)this + 1);
          __int128 v57 = *((void *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            uint64_t v59 = *(char **)(a1 + 88);
            uint64_t v58 = *(void *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              double v61 = (char *)*v10;
              double v62 = (v59 - (_BYTE *)*v10) >> 2;
              uint64_t v63 = v62 + 1;
              double v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                uint64_t v63 = v64 >> 1;
              }
              else {
                uint64_t v65 = v63;
              }
              if (v65)
              {
                int64_t v66 = (char *)sub_10000956C(v219, v65);
                double v61 = *(char **)(a1 + 80);
                uint64_t v59 = *(char **)(a1 + 88);
              }

              else
              {
                int64_t v66 = 0LL;
              }

              int64_t v67 = &v66[4 * v62];
              *(_DWORD *)int64_t v67 = 0;
              uint64_t v60 = v67 + 4;
              while (v59 != v61)
              {
                int64_t v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }

              *(void *)(a1 + 80) = v67;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v60;
              *(void *)(a1 + 96) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v59 = 0;
              uint64_t v60 = v59 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v60;
            uint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_208;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
            __int128 v57 = *((void *)this + 2);
            __int128 v56 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v56;
          }

          goto LABEL_209;
        case 5u:
          if ((_DWORD)v25 != 2)
          {
            __int128 v149 = *(char **)(a1 + 64);
            unsigned int v148 = *(void *)(a1 + 72);
            if ((unint64_t)v149 >= v148)
            {
              v184 = (char *)*v223;
              uint64_t v185 = (v149 - (_BYTE *)*v223) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62) {
LABEL_363:
              }
                sub_100007008();
              unint64_t v187 = v148 - (void)v184;
              if (v187 >> 1 > v186) {
                v186 = v187 >> 1;
              }
              else {
                uint64_t v188 = v186;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_10000956C(v220, v188);
                v184 = *(char **)(a1 + 56);
                __int128 v149 = *(char **)(a1 + 64);
              }

              else
              {
                uint64_t v189 = 0LL;
              }

              __int16 v208 = &v189[4 * v185];
              *(_DWORD *)__int16 v208 = 0;
              unint64_t v143 = v208 + 4;
              while (v149 != v184)
              {
                unint64_t v209 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }

              *(void *)(a1 + 56) = v208;
              *(void *)(a1 + 64) = v143;
              *(void *)(a1 + 72) = &v189[4 * v188];
              if (v184) {
                operator delete(v184);
              }
            }

            else
            {
              *(_DWORD *)__int128 v149 = 0;
              unint64_t v143 = v149 + 4;
            }

            *(void *)(a1 + 64) = v143;
            goto LABEL_345;
          }

          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v70 = *((void *)this + 1);
          uint64_t v71 = *((void *)this + 2);
          while (v70 < v71 && !*((_BYTE *)this + 24))
          {
            uint64_t v73 = *(char **)(a1 + 64);
            uint64_t v72 = *(void *)(a1 + 72);
            if ((unint64_t)v73 >= v72)
            {
              uint64_t v75 = (char *)*v223;
              uint64_t v76 = (v73 - (_BYTE *)*v223) >> 2;
              uint64_t v77 = v76 + 1;
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                uint64_t v77 = v78 >> 1;
              }
              else {
                uint64_t v79 = v77;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_10000956C(v220, v79);
                uint64_t v75 = *(char **)(a1 + 56);
                uint64_t v73 = *(char **)(a1 + 64);
              }

              else
              {
                uint64_t v80 = 0LL;
              }

              uint64_t v81 = &v80[4 * v76];
              *(_DWORD *)uint64_t v81 = 0;
              uint64_t v74 = v81 + 4;
              while (v73 != v75)
              {
                uint64_t v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }

              *(void *)(a1 + 56) = v81;
              *(void *)(a1 + 64) = v74;
              *(void *)(a1 + 72) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v73 = 0;
              uint64_t v74 = v73 + 4;
            }

            *(void *)(a1 + 64) = v74;
            unint64_t v83 = *((void *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
              goto LABEL_208;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)this + v83);
            uint64_t v71 = *((void *)this + 2);
            uint64_t v70 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v70;
          }

          goto LABEL_209;
        case 6u:
          *(_WORD *)(a1 + 192) |= 0x80u;
          uint64_t v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_347;
          }
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_349;
        case 7u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          std::string v85 = *((void *)this + 1);
          uint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            uint64_t v88 = 0;
            double v89 = 0;
            uint64_t v90 = 0LL;
            do
            {
              uint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_296;
              }
              v88 += 7;
              std::string v85 = v91;
              unint64_t v19 = v89++ > 8;
            }

            while (!v19);
LABEL_224:
            LODWORD(v90) = 0;
            goto LABEL_296;
          }

          v150 = 0;
          v151 = 0;
          uint64_t v90 = 0LL;
          if (v86 <= v85) {
            uint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v152 = v85 + 1;
              v153 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v152;
              v90 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                std::string v85 = v152;
                unint64_t v19 = v151++ > 8;
                if (v19) {
                  goto LABEL_224;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }

            break;
          }

  uint64_t v10 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "kfPressure", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          __int128 v29 = (char *)operator new(0xA0uLL);
          *(void *)__int128 v29 = &off_10189B5E8;
          *((_DWORD *)v29 + 3std::iostream::~basic_iostream(v2, v3 + 8) = 0;
          *(_OWORD *)(v29 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
          *(_OWORD *)(v29 + 24) = 0u;
          *(_OWORD *)(v29 + 40) = 0u;
          *(_OWORD *)(v29 + 56) = 0u;
          *(_OWORD *)(v29 + 72) = 0u;
          *(_OWORD *)(v29 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
          *(_OWORD *)(v29 + 104) = 0u;
          *((void *)v29 + 15) = 0LL;
          double v30 = *(void *)(a1 + 72);
          *(void *)(a1 + 72) = v29;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
            __int128 v29 = *(char **)(a1 + 72);
          }

          if (!PB::Reader::placeMark(this, v164, v27, v28)
            || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v29 + 16LL))(v29, this) & 1) == 0)
          {
            return 0LL;
          }

          goto LABEL_183;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v117 = *(char **)(a1 + 16);
            uint64_t v116 = *(void *)(a1 + 24);
            if ((unint64_t)v117 >= v116)
            {
              uint64_t v145 = (char *)*v12;
              __int128 v146 = (v117 - (_BYTE *)*v12) >> 2;
              char v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62) {
LABEL_255:
              }
                sub_100007008();
              unsigned int v148 = v116 - (void)v145;
              if (v148 >> 1 > v147) {
                char v147 = v148 >> 1;
              }
              else {
                __int128 v149 = v147;
              }
              if (v149)
              {
                v150 = (char *)sub_10000956C(v13, v149);
                uint64_t v145 = *(char **)(a1 + 8);
                uint64_t v117 = *(char **)(a1 + 16);
              }

              else
              {
                v150 = 0LL;
              }

              __int128 v157 = &v150[4 * v146];
              *(_DWORD *)__int128 v157 = 0;
              uint64_t v118 = v157 + 4;
              while (v117 != v145)
              {
                v158 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v157 - 1) = v158;
                v157 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v157;
              *(void *)(a1 + 16) = v118;
              *(void *)(a1 + 24) = &v150[4 * v149];
              if (v145) {
                operator delete(v145);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v117 = 0;
              uint64_t v118 = v117 + 4;
            }

            *(void *)(a1 + 16) = v118;
            goto LABEL_238;
          }

          if ((PB::Reader::placeMark(this, v164, v26, a4) & 1) != 0) {
            return 0LL;
          }
          double v31 = *((void *)this + 1);
          uint64_t v32 = *((void *)this + 2);
          while (v31 < v32 && !*((_BYTE *)this + 24))
          {
            int v34 = *(char **)(a1 + 16);
            BOOL v33 = *(void *)(a1 + 24);
            if ((unint64_t)v34 >= v33)
            {
              std::string::size_type v36 = (char *)*v12;
              double v37 = (v34 - (_BYTE *)*v12) >> 2;
              unint64_t v38 = v37 + 1;
              __int16 v39 = v33 - (void)v36;
              if (v39 >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              else {
                double v40 = v38;
              }
              if (v40)
              {
                __int128 v41 = (char *)sub_10000956C(v13, v40);
                std::string::size_type v36 = *(char **)(a1 + 8);
                int v34 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v41 = 0LL;
              }

              __int128 v42 = &v41[4 * v37];
              *(_DWORD *)__int128 v42 = 0;
              double v35 = v42 + 4;
              while (v34 != v36)
              {
                __int128 v43 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v42;
              *(void *)(a1 + 16) = v35;
              *(void *)(a1 + 24) = &v41[4 * v40];
              if (v36) {
                operator delete(v36);
              }
            }

            else
            {
              *(_DWORD *)int v34 = 0;
              double v35 = v34 + 4;
            }

            *(void *)(a1 + 16) = v35;
            double v44 = *((void *)this + 1);
            if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
              goto LABEL_182;
            }
            *(v35 - 1) = *(_DWORD *)(*(void *)this + v44);
            uint64_t v32 = *((void *)this + 2);
            double v31 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v31;
          }

          goto LABEL_183;
        case 3u:
          *(_WORD *)(a1 + 116) |= 0x40u;
          double v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_240;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_242;
        case 4u:
          *(_WORD *)(a1 + 116) |= 0x20u;
          __int128 v46 = *((void *)this + 1);
          __int128 v47 = *((void *)this + 2);
          __int128 v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
          {
            __int128 v49 = 0;
            __int128 v50 = 0;
            __int128 v51 = 0LL;
            do
            {
              __int128 v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              __int128 v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_208;
              }
              v49 += 7;
              __int128 v46 = v52;
              unint64_t v20 = v50++ > 8;
            }

            while (!v20);
LABEL_142:
            LODWORD(v51) = 0;
            goto LABEL_208;
          }

          uint64_t v119 = 0;
          int v120 = 0;
          __int128 v51 = 0LL;
          if (v47 <= v46) {
            __int128 v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              __int128 v121 = v46 + 1;
              char v122 = *(_BYTE *)(v48 + v46);
              *((void *)this + 1) = v121;
              v51 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                __int128 v46 = v121;
                unint64_t v20 = v120++ > 8;
                if (v20) {
                  goto LABEL_142;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v51) = 0;
              }
            }

            break;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 152) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_291;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_293;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v124 = *(char **)(a1 + 64);
            uint64_t v123 = *(void *)(a1 + 72);
            if ((unint64_t)v124 >= v123)
            {
              __int128 v146 = (char *)*v13;
              char v147 = (v124 - (_BYTE *)*v13) >> 2;
              unsigned int v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 62) {
LABEL_304:
              }
                sub_100007008();
              __int128 v149 = v123 - (void)v146;
              if (v149 >> 1 > v148) {
                unsigned int v148 = v149 >> 1;
              }
              else {
                v150 = v148;
              }
              if (v150)
              {
                v151 = (char *)sub_10000956C(v189, v150);
                __int128 v146 = *(char **)(a1 + 56);
                uint64_t v124 = *(char **)(a1 + 64);
              }

              else
              {
                v151 = 0LL;
              }

              char v176 = &v151[4 * v147];
              *(_DWORD *)char v176 = 0;
              char v125 = v176 + 4;
              while (v124 != v146)
              {
                v177 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }

              *(void *)(a1 + 56) = v176;
              *(void *)(a1 + 64) = v125;
              *(void *)(a1 + 72) = &v151[4 * v150];
              if (v146) {
                operator delete(v146);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v124 = 0;
              char v125 = v124 + 4;
            }

            *(void *)(a1 + 64) = v125;
            goto LABEL_289;
          }

          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 64);
            double v31 = *(void *)(a1 + 72);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v13;
              double v35 = (v32 - (_BYTE *)*v13) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v189, v38);
                int v34 = *(char **)(a1 + 56);
                uint64_t v32 = *(char **)(a1 + 64);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + 56) = v40;
              *(void *)(a1 + 64) = v33;
              *(void *)(a1 + 72) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 64) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_170;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v127 = *(char **)(a1 + 88);
            uint64_t v126 = *(void *)(a1 + 96);
            if ((unint64_t)v127 >= v126)
            {
              v152 = (char *)*v12;
              v153 = (v127 - (_BYTE *)*v12) >> 2;
              v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62) {
LABEL_305:
              }
                sub_100007008();
              v155 = v126 - (void)v152;
              if (v155 >> 1 > v154) {
                v154 = v155 >> 1;
              }
              else {
                __int128 v156 = v154;
              }
              if (v156)
              {
                __int128 v157 = (char *)sub_10000956C(v190, v156);
                v152 = *(char **)(a1 + 80);
                uint64_t v127 = *(char **)(a1 + 88);
              }

              else
              {
                __int128 v157 = 0LL;
              }

              uint64_t v178 = &v157[4 * v153];
              *(_DWORD *)uint64_t v178 = 0;
              char v125 = v178 + 4;
              while (v127 != v152)
              {
                v179 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }

              *(void *)(a1 + 80) = v178;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v125;
              *(void *)(a1 + 96) = &v157[4 * v156];
              if (v152) {
                operator delete(v152);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v127 = 0;
              char v125 = v127 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v125;
            goto LABEL_289;
          }

          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 88);
            double v45 = *(void *)(a1 + 96);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v190, v52);
                __int128 v48 = *(char **)(a1 + 80);
                __int128 v46 = *(char **)(a1 + 88);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + 80) = v54;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v47;
              *(void *)(a1 + 96) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_170;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v129 = *(char **)(a1 + 40);
            uint64_t v128 = *(void *)(a1 + 48);
            if ((unint64_t)v129 >= v128)
            {
              v158 = (char *)*v11;
              __int16 v159 = (v129 - (_BYTE *)*v11) >> 2;
              uint64_t v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 62) {
LABEL_306:
              }
                sub_100007008();
              __int16 v161 = v128 - (void)v158;
              if (v161 >> 1 > v160) {
                uint64_t v160 = v161 >> 1;
              }
              else {
                unint64_t v162 = v160;
              }
              if (v162)
              {
                __int16 v163 = (char *)sub_10000956C(v191, v162);
                v158 = *(char **)(a1 + 32);
                uint64_t v129 = *(char **)(a1 + 40);
              }

              else
              {
                __int16 v163 = 0LL;
              }

              __int128 v180 = &v163[4 * v159];
              *(_DWORD *)__int128 v180 = 0;
              char v125 = v180 + 4;
              while (v129 != v158)
              {
                v181 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }

              *(void *)(a1 + 32) = v180;
              *(void *)(a1 + 40) = v125;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v163[4 * v162];
              if (v158) {
                operator delete(v158);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v129 = 0;
              char v125 = v129 + 4;
            }

            *(void *)(a1 + 40) = v125;
            goto LABEL_289;
          }

          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v57 = *((void *)this + 1);
          uint64_t v58 = *((void *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            uint64_t v60 = *(char **)(a1 + 40);
            uint64_t v59 = *(void *)(a1 + 48);
            if ((unint64_t)v60 >= v59)
            {
              double v62 = (char *)*v11;
              uint64_t v63 = (v60 - (_BYTE *)*v11) >> 2;
              double v64 = v63 + 1;
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                double v64 = v65 >> 1;
              }
              else {
                int64_t v66 = v64;
              }
              if (v66)
              {
                int64_t v67 = (char *)sub_10000956C(v191, v66);
                double v62 = *(char **)(a1 + 32);
                uint64_t v60 = *(char **)(a1 + 40);
              }

              else
              {
                int64_t v67 = 0LL;
              }

              int64_t v68 = &v67[4 * v63];
              *(_DWORD *)int64_t v68 = 0;
              double v61 = v68 + 4;
              while (v60 != v62)
              {
                uint64_t v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }

              *(void *)(a1 + 32) = v68;
              *(void *)(a1 + 40) = v61;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v60 = 0;
              double v61 = v60 + 4;
            }

            *(void *)(a1 + 40) = v61;
            uint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
            uint64_t v58 = *((void *)this + 2);
            __int128 v57 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v57;
          }

          goto LABEL_170;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v131 = *(char **)(a1 + 16);
            uint64_t v130 = *(void *)(a1 + 24);
            if ((unint64_t)v131 >= v130)
            {
              unint64_t v164 = (char *)*v10;
              __int16 v165 = (v131 - (_BYTE *)*v10) >> 2;
              unint64_t v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62) {
LABEL_307:
              }
                sub_100007008();
              int v167 = v130 - (void)v164;
              if (v167 >> 1 > v166) {
                unint64_t v166 = v167 >> 1;
              }
              else {
                __int128 v168 = v166;
              }
              if (v168)
              {
                uint64_t v169 = (char *)sub_10000956C(v192, v168);
                unint64_t v164 = *(char **)(a1 + 8);
                v131 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v169 = 0LL;
              }

              char v182 = &v169[4 * v165];
              *(_DWORD *)char v182 = 0;
              char v125 = v182 + 4;
              while (v131 != v164)
              {
                v183 = *((_DWORD *)v131 - 1);
                v131 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v182;
              *(void *)(a1 + 16) = v125;
              *(void *)(a1 + 24) = &v169[4 * v168];
              if (v164) {
                operator delete(v164);
              }
            }

            else
            {
              *(_DWORD *)v131 = 0;
              char v125 = v131 + 4;
            }

            *(void *)(a1 + 16) = v125;
            goto LABEL_289;
          }

          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v71 = *((void *)this + 1);
          uint64_t v72 = *((void *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            uint64_t v74 = *(char **)(a1 + 16);
            uint64_t v73 = *(void *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              uint64_t v76 = (char *)*v10;
              uint64_t v77 = (v74 - (_BYTE *)*v10) >> 2;
              uint64_t v78 = v77 + 1;
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                uint64_t v78 = v79 >> 1;
              }
              else {
                uint64_t v80 = v78;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_10000956C(v192, v80);
                uint64_t v76 = *(char **)(a1 + 8);
                uint64_t v74 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v81 = 0LL;
              }

              uint64_t v82 = &v81[4 * v77];
              *(_DWORD *)uint64_t v82 = 0;
              uint64_t v75 = v82 + 4;
              while (v74 != v76)
              {
                unint64_t v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v82;
              *(void *)(a1 + 16) = v75;
              *(void *)(a1 + 24) = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v74 = 0;
              uint64_t v75 = v74 + 4;
            }

            *(void *)(a1 + 16) = v75;
            uint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v75 - 1) = *(_DWORD *)(*(void *)this + v84);
            uint64_t v72 = *((void *)this + 2);
            uint64_t v71 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v71;
          }

          goto LABEL_170;
        case 6u:
          *(_BYTE *)(a1 + 152) |= 8u;
          std::string v85 = *((void *)this + 1);
          uint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            uint64_t v88 = 0;
            double v89 = 0;
            uint64_t v90 = 0LL;
            do
            {
              uint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_247;
              }
              v88 += 7;
              std::string v85 = v91;
              unint64_t v20 = v89++ > 8;
            }

            while (!v20);
LABEL_185:
            LODWORD(v90) = 0;
            goto LABEL_247;
          }

          int v132 = 0;
          v133 = 0;
          uint64_t v90 = 0LL;
          if (v86 <= v85) {
            uint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v134 = v85 + 1;
              v135 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v134;
              v90 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                std::string v85 = v134;
                unint64_t v20 = v133++ > 8;
                if (v20) {
                  goto LABEL_185;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }

            break;
          }

      if ((v13 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      double v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        double v31 = (void **)operator new(0x18uLL);
        v31[1] = 0LL;
        v31[2] = 0LL;
        *double v31 = 0LL;
        __int128 __p = 0LL;
        uint64_t v32 = *v8;
        *uint64_t v8 = v31;
        if (v32)
        {
          sub_10058A4FC((int)v8, v32);
          BOOL v33 = (void **)__p;
          __int128 __p = 0LL;
          if (v33) {
            sub_10058A4FC((int)&__p, v33);
          }
        }

        int v34 = *v8;
      }

      else
      {
        if ((_DWORD)v22 != 2)
        {
          if ((_DWORD)v22 == 1)
          {
            *(_BYTE *)(a1 + 28) |= 1u;
            unint64_t v23 = *((void *)this + 1);
            double v24 = *((void *)this + 2);
            unint64_t v25 = *(void *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v24)
            {
              __int16 v39 = 0;
              double v40 = 0;
              __int128 v28 = 0LL;
              if (v24 <= v23) {
                double v24 = *((void *)this + 1);
              }
              while (1)
              {
                if (v24 == v23)
                {
                  LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_53;
                }

                __int128 v41 = v23 + 1;
                __int128 v42 = *(_BYTE *)(v25 + v23);
                *((void *)this + 1) = v41;
                v28 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  break;
                }
                v39 += 7;
                unint64_t v23 = v41;
                __int128 v16 = v40++ > 8;
                if (v16)
                {
LABEL_49:
                  LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 0;
                  goto LABEL_53;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 0;
              }
            }

            else
            {
              unint64_t v26 = 0;
              __int128 v27 = 0;
              __int128 v28 = 0LL;
              while (1)
              {
                __int128 v29 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                double v30 = *(_BYTE *)(v25 + v23);
                v28 |= (unint64_t)(v30 & 0x7F) << v26;
                if ((v30 & 0x80) == 0) {
                  break;
                }
                v26 += 7;
                unint64_t v23 = v29;
                __int128 v16 = v27++ > 8;
                if (v16) {
                  goto LABEL_49;
                }
              }
            }

  unint64_t v11 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 36) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 46), 0xBu);
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          unint64_t v25 = operator new(0x48uLL);
          __int128 v28 = sub_10119A3AC((uint64_t)v25);
          __int128 v29 = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v25;
          if (v29)
          {
            (*(void (**)(uint64_t, double))(*(void *)v29 + 8LL))(v29, v28);
            unint64_t v25 = *(void **)(a1 + 40);
          }

          if (PB::Reader::placeMark(this, v62, v26, v27)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v25 + 16LL))(v25, this) & 1) != 0)
          {
            goto LABEL_27;
          }

          return 0LL;
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v62, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 3;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 2 > v37) {
                  double v37 = v38 >> 2;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_1000071BC(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[8 * v36];
                *(void *)__int128 v41 = 0LL;
                int v34 = v41 + 8;
                while (v33 != v35)
                {
                  __int128 v42 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v41 - 1) = v42;
                  v41 -= 8;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[8 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(void *)BOOL v33 = 0LL;
                int v34 = v33 + 8;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7LL || v43 + 8 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(void *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v30;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 144) |= 4u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_208;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v27);
          goto LABEL_210;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            double v89 = *(char **)(a1 + 40);
            uint64_t v88 = *(void *)(a1 + 48);
            if ((unint64_t)v89 >= v88)
            {
              uint64_t v97 = (char *)*v13;
              uint64_t v98 = (v89 - (_BYTE *)*v13) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61) {
LABEL_219:
              }
                sub_100007008();
              __int128 v100 = v88 - (void)v97;
              if (v100 >> 2 > v99) {
                v99 = v100 >> 2;
              }
              else {
                CFStringRef v101 = v99;
              }
              if (v101)
              {
                BOOL v102 = (char *)sub_1000071BC(v131, v101);
                uint64_t v97 = *(char **)(a1 + 32);
                double v89 = *(char **)(a1 + 40);
              }

              else
              {
                BOOL v102 = 0LL;
              }

              __int128 v121 = &v102[8 * v98];
              *(void *)__int128 v121 = 0LL;
              uint64_t v90 = v121 + 8;
              while (v89 != v97)
              {
                char v122 = *((void *)v89 - 1);
                v89 -= 8;
                *((void *)v121 - 1) = v122;
                v121 -= 8;
              }

              *(void *)(a1 + 32) = v121;
              *(void *)(a1 + 40) = v90;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }

            else
            {
              *(void *)double v89 = 0LL;
              uint64_t v90 = v89 + 8;
            }

            *(void *)(a1 + 40) = v90;
            goto LABEL_206;
          }

          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 40);
            double v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v13;
              int v34 = (v31 - (_BYTE *)*v13) >> 3;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                double v35 = v36 >> 2;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_1000071BC(v131, v37);
                BOOL v33 = *(char **)(a1 + 32);
                double v31 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[8 * v34];
              *(void *)__int16 v39 = 0LL;
              uint64_t v32 = v39 + 8;
              while (v31 != v33)
              {
                double v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }

              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(void *)double v31 = 0LL;
              uint64_t v32 = v31 + 8;
            }

            *(void *)(a1 + 40) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
              goto LABEL_136;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_137;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v92 = *(char **)(a1 + 88);
            uint64_t v91 = *(void *)(a1 + 96);
            if ((unint64_t)v92 >= v91)
            {
              double v103 = (char *)*v12;
              __int128 v104 = (v92 - (_BYTE *)*v12) >> 3;
              unsigned int v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 61) {
LABEL_220:
              }
                sub_100007008();
              uint64_t v106 = v91 - (void)v103;
              if (v106 >> 2 > v105) {
                unsigned int v105 = v106 >> 2;
              }
              else {
                uint64_t v107 = v105;
              }
              if (v107)
              {
                uint64_t v108 = (char *)sub_1000071BC(v132, v107);
                double v103 = *(char **)(a1 + 80);
                v92 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v108 = 0LL;
              }

              uint64_t v123 = &v108[8 * v104];
              *(void *)uint64_t v123 = 0LL;
              uint64_t v90 = v123 + 8;
              while (v92 != v103)
              {
                uint64_t v124 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v123 - 1) = v124;
                v123 -= 8;
              }

              *(void *)(a1 + 80) = v123;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v90;
              *(void *)(a1 + 96) = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }

            else
            {
              *(void *)v92 = 0LL;
              uint64_t v90 = v92 + 8;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v90;
            goto LABEL_206;
          }

          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v42 = *((void *)this + 1);
          __int128 v43 = *((void *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            double v45 = *(char **)(a1 + 88);
            double v44 = *(void *)(a1 + 96);
            if ((unint64_t)v45 >= v44)
            {
              __int128 v47 = (char *)*v12;
              __int128 v48 = (v45 - (_BYTE *)*v12) >> 3;
              __int128 v49 = v48 + 1;
              __int128 v50 = v44 - (void)v47;
              if (v50 >> 2 > v49) {
                __int128 v49 = v50 >> 2;
              }
              else {
                __int128 v51 = v49;
              }
              if (v51)
              {
                __int128 v52 = (char *)sub_1000071BC(v132, v51);
                __int128 v47 = *(char **)(a1 + 80);
                double v45 = *(char **)(a1 + 88);
              }

              else
              {
                __int128 v52 = 0LL;
              }

              __int128 v53 = &v52[8 * v48];
              *(void *)__int128 v53 = 0LL;
              __int128 v46 = v53 + 8;
              while (v45 != v47)
              {
                __int128 v54 = *((void *)v45 - 1);
                v45 -= 8;
                *((void *)v53 - 1) = v54;
                v53 -= 8;
              }

              *(void *)(a1 + 80) = v53;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v46;
              *(void *)(a1 + 96) = &v52[8 * v51];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              *(void *)double v45 = 0LL;
              __int128 v46 = v45 + 8;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v46;
            __int128 v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2)) {
              goto LABEL_136;
            }
            *(v46 - 1) = *(void *)(*(void *)this + v55);
            __int128 v43 = *((void *)this + 2);
            __int128 v42 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v42;
          }

          goto LABEL_137;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v94 = *(char **)(a1 + 16);
            uint64_t v93 = *(void *)(a1 + 24);
            if ((unint64_t)v94 >= v93)
            {
              uint64_t v109 = (char *)*v11;
              uint64_t v110 = (v94 - (_BYTE *)*v11) >> 3;
              uint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 61) {
LABEL_221:
              }
                sub_100007008();
              uint64_t v112 = v93 - (void)v109;
              if (v112 >> 2 > v111) {
                uint64_t v111 = v112 >> 2;
              }
              else {
                uint64_t v113 = v111;
              }
              if (v113)
              {
                uint64_t v114 = (char *)sub_1000071BC(v133, v113);
                uint64_t v109 = *(char **)(a1 + 8);
                uint64_t v94 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v114 = 0LL;
              }

              char v125 = &v114[8 * v110];
              *(void *)char v125 = 0LL;
              uint64_t v90 = v125 + 8;
              while (v94 != v109)
              {
                uint64_t v126 = *((void *)v94 - 1);
                v94 -= 8;
                *((void *)v125 - 1) = v126;
                v125 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v125;
              *(void *)(a1 + 16) = v90;
              *(void *)(a1 + 24) = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }

            else
            {
              *(void *)uint64_t v94 = 0LL;
              uint64_t v90 = v94 + 8;
            }

            *(void *)(a1 + 16) = v90;
            goto LABEL_206;
          }

          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v56 = *((void *)this + 1);
          __int128 v57 = *((void *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            uint64_t v59 = *(char **)(a1 + 16);
            uint64_t v58 = *(void *)(a1 + 24);
            if ((unint64_t)v59 >= v58)
            {
              double v61 = (char *)*v11;
              double v62 = (v59 - (_BYTE *)*v11) >> 3;
              uint64_t v63 = v62 + 1;
              double v64 = v58 - (void)v61;
              if (v64 >> 2 > v63) {
                uint64_t v63 = v64 >> 2;
              }
              else {
                uint64_t v65 = v63;
              }
              if (v65)
              {
                int64_t v66 = (char *)sub_1000071BC(v133, v65);
                double v61 = *(char **)(a1 + 8);
                uint64_t v59 = *(char **)(a1 + 16);
              }

              else
              {
                int64_t v66 = 0LL;
              }

              int64_t v67 = &v66[8 * v62];
              *(void *)int64_t v67 = 0LL;
              uint64_t v60 = v67 + 8;
              while (v59 != v61)
              {
                int64_t v68 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v67 - 1) = v68;
                v67 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v67;
              *(void *)(a1 + 16) = v60;
              *(void *)(a1 + 24) = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }

            else
            {
              *(void *)uint64_t v59 = 0LL;
              uint64_t v60 = v59 + 8;
            }

            *(void *)(a1 + 16) = v60;
            uint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFF7LL || v69 + 8 > *((void *)this + 2)) {
              goto LABEL_136;
            }
            *(v60 - 1) = *(void *)(*(void *)this + v69);
            __int128 v57 = *((void *)this + 2);
            __int128 v56 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v56;
          }

          goto LABEL_137;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v70 = *((void *)this + 1);
            uint64_t v71 = *((void *)this + 2);
            while (v70 < v71 && !*((_BYTE *)this + 24))
            {
              uint64_t v73 = *(char **)(a1 + 64);
              uint64_t v72 = *(void *)(a1 + 72);
              if ((unint64_t)v73 >= v72)
              {
                uint64_t v75 = (char *)*v10;
                uint64_t v76 = (v73 - (_BYTE *)*v10) >> 3;
                uint64_t v77 = v76 + 1;
                uint64_t v78 = v72 - (void)v75;
                if (v78 >> 2 > v77) {
                  uint64_t v77 = v78 >> 2;
                }
                else {
                  uint64_t v79 = v77;
                }
                if (v79)
                {
                  uint64_t v80 = (char *)sub_1000071BC(v134, v79);
                  uint64_t v75 = *(char **)(a1 + 56);
                  uint64_t v73 = *(char **)(a1 + 64);
                }

                else
                {
                  uint64_t v80 = 0LL;
                }

                uint64_t v81 = &v80[8 * v76];
                *(void *)uint64_t v81 = 0LL;
                uint64_t v74 = v81 + 8;
                while (v73 != v75)
                {
                  uint64_t v82 = *((void *)v73 - 1);
                  v73 -= 8;
                  *((void *)v81 - 1) = v82;
                  v81 -= 8;
                }

                *(void *)(a1 + 56) = v81;
                *(void *)(a1 + 64) = v74;
                *(void *)(a1 + 72) = &v80[8 * v79];
                if (v75) {
                  operator delete(v75);
                }
              }

              else
              {
                *(void *)uint64_t v73 = 0LL;
                uint64_t v74 = v73 + 8;
              }

              *(void *)(a1 + 64) = v74;
              unint64_t v83 = *((void *)this + 1);
              if (v83 > 0xFFFFFFFFFFFFFFF7LL || v83 + 8 > *((void *)this + 2))
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v74 - 1) = *(void *)(*(void *)this + v83);
              uint64_t v71 = *((void *)this + 2);
              uint64_t v70 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v70;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v115 = *(char **)(a1 + 16);
            uint64_t v114 = *(void *)(a1 + 24);
            if ((unint64_t)v115 >= v114)
            {
              v133 = (char *)*v13;
              int v134 = (v115 - (_BYTE *)*v13) >> 3;
              v135 = v134 + 1;
              if ((unint64_t)(v134 + 1) >> 61) {
LABEL_286:
              }
                sub_100007008();
              int v136 = v114 - (void)v133;
              if (v136 >> 2 > v135) {
                v135 = v136 >> 2;
              }
              else {
                v137 = v135;
              }
              if (v137)
              {
                int v138 = (char *)sub_1000071BC(v176, v137);
                v133 = *(char **)(a1 + 8);
                uint64_t v115 = *(char **)(a1 + 16);
              }

              else
              {
                int v138 = 0LL;
              }

              __int16 v163 = &v138[8 * v134];
              *(void *)__int16 v163 = 0LL;
              uint64_t v116 = v163 + 8;
              while (v115 != v133)
              {
                unint64_t v164 = *((void *)v115 - 1);
                v115 -= 8;
                *((void *)v163 - 1) = v164;
                v163 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v163;
              *(void *)(a1 + 16) = v116;
              *(void *)(a1 + 24) = &v138[8 * v137];
              if (v133) {
                operator delete(v133);
              }
            }

            else
            {
              *(void *)uint64_t v115 = 0LL;
              uint64_t v116 = v115 + 8;
            }

            *(void *)(a1 + 16) = v116;
            goto LABEL_271;
          }

          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v27 = *((void *)this + 1);
          __int128 v28 = *((void *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            double v30 = *(char **)(a1 + 16);
            __int128 v29 = *(void *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              uint64_t v32 = (char *)*v13;
              BOOL v33 = (v30 - (_BYTE *)*v13) >> 3;
              int v34 = v33 + 1;
              double v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                int v34 = v35 >> 2;
              }
              else {
                std::string::size_type v36 = v34;
              }
              if (v36)
              {
                double v37 = (char *)sub_1000071BC(v176, v36);
                uint64_t v32 = *(char **)(a1 + 8);
                double v30 = *(char **)(a1 + 16);
              }

              else
              {
                double v37 = 0LL;
              }

              unint64_t v38 = &v37[8 * v33];
              *(void *)unint64_t v38 = 0LL;
              double v31 = v38 + 8;
              while (v30 != v32)
              {
                __int16 v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v38;
              *(void *)(a1 + 16) = v31;
              *(void *)(a1 + 24) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }

            else
            {
              *(void *)double v30 = 0LL;
              double v31 = v30 + 8;
            }

            *(void *)(a1 + 16) = v31;
            double v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7LL || v40 + 8 > *((void *)this + 2)) {
              goto LABEL_162;
            }
            *(v31 - 1) = *(void *)(*(void *)this + v40);
            __int128 v28 = *((void *)this + 2);
            __int128 v27 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v27;
          }

          goto LABEL_163;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v118 = *(char **)(a1 + 64);
            uint64_t v117 = *(void *)(a1 + 72);
            if ((unint64_t)v118 >= v117)
            {
              __int16 v139 = (char *)*v12;
              __int16 v140 = (v118 - (_BYTE *)*v12) >> 3;
              __int16 v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 61) {
LABEL_287:
              }
                sub_100007008();
              __int16 v142 = v117 - (void)v139;
              if (v142 >> 2 > v141) {
                __int16 v141 = v142 >> 2;
              }
              else {
                unint64_t v143 = v141;
              }
              if (v143)
              {
                __int16 v144 = (char *)sub_1000071BC(v177, v143);
                __int16 v139 = *(char **)(a1 + 56);
                uint64_t v118 = *(char **)(a1 + 64);
              }

              else
              {
                __int16 v144 = 0LL;
              }

              __int16 v165 = &v144[8 * v140];
              *(void *)__int16 v165 = 0LL;
              uint64_t v116 = v165 + 8;
              while (v118 != v139)
              {
                unint64_t v166 = *((void *)v118 - 1);
                v118 -= 8;
                *((void *)v165 - 1) = v166;
                v165 -= 8;
              }

              *(void *)(a1 + 56) = v165;
              *(void *)(a1 + 64) = v116;
              *(void *)(a1 + 72) = &v144[8 * v143];
              if (v139) {
                operator delete(v139);
              }
            }

            else
            {
              *(void *)uint64_t v118 = 0LL;
              uint64_t v116 = v118 + 8;
            }

            *(void *)(a1 + 64) = v116;
            goto LABEL_271;
          }

          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v41 = *((void *)this + 1);
          __int128 v42 = *((void *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            double v44 = *(char **)(a1 + 64);
            __int128 v43 = *(void *)(a1 + 72);
            if ((unint64_t)v44 >= v43)
            {
              __int128 v46 = (char *)*v12;
              __int128 v47 = (v44 - (_BYTE *)*v12) >> 3;
              __int128 v48 = v47 + 1;
              __int128 v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                __int128 v48 = v49 >> 2;
              }
              else {
                __int128 v50 = v48;
              }
              if (v50)
              {
                __int128 v51 = (char *)sub_1000071BC(v177, v50);
                __int128 v46 = *(char **)(a1 + 56);
                double v44 = *(char **)(a1 + 64);
              }

              else
              {
                __int128 v51 = 0LL;
              }

              __int128 v52 = &v51[8 * v47];
              *(void *)__int128 v52 = 0LL;
              double v45 = v52 + 8;
              while (v44 != v46)
              {
                __int128 v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }

              *(void *)(a1 + 56) = v52;
              *(void *)(a1 + 64) = v45;
              *(void *)(a1 + 72) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }

            else
            {
              *(void *)double v44 = 0LL;
              double v45 = v44 + 8;
            }

            *(void *)(a1 + 64) = v45;
            __int128 v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7LL || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_162;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            __int128 v42 = *((void *)this + 2);
            __int128 v41 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v41;
          }

          goto LABEL_163;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            int v120 = *(char **)(a1 + 40);
            uint64_t v119 = *(void *)(a1 + 48);
            if ((unint64_t)v120 >= v119)
            {
              uint64_t v145 = (char *)*v11;
              __int128 v146 = (v120 - (_BYTE *)*v11) >> 3;
              char v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 61) {
LABEL_288:
              }
                sub_100007008();
              unsigned int v148 = v119 - (void)v145;
              if (v148 >> 2 > v147) {
                char v147 = v148 >> 2;
              }
              else {
                __int128 v149 = v147;
              }
              if (v149)
              {
                v150 = (char *)sub_1000071BC(v178, v149);
                uint64_t v145 = *(char **)(a1 + 32);
                int v120 = *(char **)(a1 + 40);
              }

              else
              {
                v150 = 0LL;
              }

              int v167 = &v150[8 * v146];
              *(void *)int v167 = 0LL;
              uint64_t v116 = v167 + 8;
              while (v120 != v145)
              {
                __int128 v168 = *((void *)v120 - 1);
                v120 -= 8;
                *((void *)v167 - 1) = v168;
                v167 -= 8;
              }

              *(void *)(a1 + 32) = v167;
              *(void *)(a1 + 40) = v116;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v150[8 * v149];
              if (v145) {
                operator delete(v145);
              }
            }

            else
            {
              *(void *)int v120 = 0LL;
              uint64_t v116 = v120 + 8;
            }

            *(void *)(a1 + 40) = v116;
            goto LABEL_271;
          }

          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v55 = *((void *)this + 1);
          __int128 v56 = *((void *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            uint64_t v58 = *(char **)(a1 + 40);
            __int128 v57 = *(void *)(a1 + 48);
            if ((unint64_t)v58 >= v57)
            {
              uint64_t v60 = (char *)*v11;
              double v61 = (v58 - (_BYTE *)*v11) >> 3;
              double v62 = v61 + 1;
              uint64_t v63 = v57 - (void)v60;
              if (v63 >> 2 > v62) {
                double v62 = v63 >> 2;
              }
              else {
                double v64 = v62;
              }
              if (v64)
              {
                uint64_t v65 = (char *)sub_1000071BC(v178, v64);
                uint64_t v60 = *(char **)(a1 + 32);
                uint64_t v58 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v65 = 0LL;
              }

              int64_t v66 = &v65[8 * v61];
              *(void *)int64_t v66 = 0LL;
              uint64_t v59 = v66 + 8;
              while (v58 != v60)
              {
                int64_t v67 = *((void *)v58 - 1);
                v58 -= 8;
                *((void *)v66 - 1) = v67;
                v66 -= 8;
              }

              *(void *)(a1 + 32) = v66;
              *(void *)(a1 + 40) = v59;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }

            else
            {
              *(void *)uint64_t v58 = 0LL;
              uint64_t v59 = v58 + 8;
            }

            *(void *)(a1 + 40) = v59;
            int64_t v68 = *((void *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFF7LL || v68 + 8 > *((void *)this + 2)) {
              goto LABEL_162;
            }
            *(v59 - 1) = *(void *)(*(void *)this + v68);
            __int128 v56 = *((void *)this + 2);
            __int128 v55 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v55;
          }

          goto LABEL_163;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            char v122 = *(char **)(a1 + 88);
            __int128 v121 = *(void *)(a1 + 96);
            if ((unint64_t)v122 >= v121)
            {
              v151 = (char *)*v10;
              v152 = (v122 - (_BYTE *)*v10) >> 3;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 61) {
LABEL_289:
              }
                sub_100007008();
              v154 = v121 - (void)v151;
              if (v154 >> 2 > v153) {
                v153 = v154 >> 2;
              }
              else {
                v155 = v153;
              }
              if (v155)
              {
                __int128 v156 = (char *)sub_1000071BC(v179, v155);
                v151 = *(char **)(a1 + 80);
                char v122 = *(char **)(a1 + 88);
              }

              else
              {
                __int128 v156 = 0LL;
              }

              uint64_t v169 = &v156[8 * v152];
              *(void *)uint64_t v169 = 0LL;
              uint64_t v116 = v169 + 8;
              while (v122 != v151)
              {
                uint64_t v170 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v169 - 1) = v170;
                v169 -= 8;
              }

              *(void *)(a1 + 80) = v169;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v116;
              *(void *)(a1 + 96) = &v156[8 * v155];
              if (v151) {
                operator delete(v151);
              }
            }

            else
            {
              *(void *)char v122 = 0LL;
              uint64_t v116 = v122 + 8;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v116;
            goto LABEL_271;
          }

          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v69 = *((void *)this + 1);
          uint64_t v70 = *((void *)this + 2);
          while (v69 < v70 && !*((_BYTE *)this + 24))
          {
            uint64_t v72 = *(char **)(a1 + 88);
            uint64_t v71 = *(void *)(a1 + 96);
            if ((unint64_t)v72 >= v71)
            {
              uint64_t v74 = (char *)*v10;
              uint64_t v75 = (v72 - (_BYTE *)*v10) >> 3;
              uint64_t v76 = v75 + 1;
              uint64_t v77 = v71 - (void)v74;
              if (v77 >> 2 > v76) {
                uint64_t v76 = v77 >> 2;
              }
              else {
                uint64_t v78 = v76;
              }
              if (v78)
              {
                uint64_t v79 = (char *)sub_1000071BC(v179, v78);
                uint64_t v74 = *(char **)(a1 + 80);
                uint64_t v72 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v79 = 0LL;
              }

              uint64_t v80 = &v79[8 * v75];
              *(void *)uint64_t v80 = 0LL;
              uint64_t v73 = v80 + 8;
              while (v72 != v74)
              {
                uint64_t v81 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v80 - 1) = v81;
                v80 -= 8;
              }

              *(void *)(a1 + 80) = v80;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v73;
              *(void *)(a1 + 96) = &v79[8 * v78];
              if (v74) {
                operator delete(v74);
              }
            }

            else
            {
              *(void *)uint64_t v72 = 0LL;
              uint64_t v73 = v72 + 8;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v73;
            uint64_t v82 = *((void *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFF7LL || v82 + 8 > *((void *)this + 2)) {
              goto LABEL_162;
            }
            *(v73 - 1) = *(void *)(*(void *)this + v82);
            uint64_t v70 = *((void *)this + 2);
            uint64_t v69 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v69;
          }

          goto LABEL_163;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v83 = *((void *)this + 1);
            uint64_t v84 = *((void *)this + 2);
            while (v83 < v84 && !*((_BYTE *)this + 24))
            {
              uint64_t v86 = *(char **)(a1 + 112);
              std::string v85 = *(void *)(a1 + 120);
              if ((unint64_t)v86 >= v85)
              {
                uint64_t v88 = (char *)*v181;
                double v89 = (v86 - (_BYTE *)*v181) >> 3;
                uint64_t v90 = v89 + 1;
                uint64_t v91 = v85 - (void)v88;
                if (v91 >> 2 > v90) {
                  uint64_t v90 = v91 >> 2;
                }
                else {
                  v92 = v90;
                }
                if (v92)
                {
                  uint64_t v93 = (char *)sub_1000071BC(v180, v92);
                  uint64_t v88 = *(char **)(a1 + 104);
                  uint64_t v86 = *(char **)(a1 + 112);
                }

                else
                {
                  uint64_t v93 = 0LL;
                }

                uint64_t v94 = &v93[8 * v89];
                *(void *)uint64_t v94 = 0LL;
                uint64_t v87 = v94 + 8;
                while (v86 != v88)
                {
                  uint64_t v95 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v94 - 1) = v95;
                  v94 -= 8;
                }

                *(void *)(a1 + 104) = v94;
                *(void *)(a1 + 112) = v87;
                *(void *)(a1 + 120) = &v93[8 * v92];
                if (v88) {
                  operator delete(v88);
                }
              }

              else
              {
                *(void *)uint64_t v86 = 0LL;
                uint64_t v87 = v86 + 8;
              }

              *(void *)(a1 + 112) = v87;
              uint64_t v96 = *((void *)this + 1);
              if (v96 > 0xFFFFFFFFFFFFFFF7LL || v96 + 8 > *((void *)this + 2))
              {
LABEL_162:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v87 - 1) = *(void *)(*(void *)this + v96);
              uint64_t v84 = *((void *)this + 2);
              unint64_t v83 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v83;
            }

  uint64_t result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 12) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "condition", *(_DWORD *)(a1 + 20));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_1010FC98C(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_1010FCF74(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_1010FDAF8(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_117;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v27);
          goto LABEL_119;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v58 = *(char **)(a1 + 16);
            __int128 v57 = *(void *)(a1 + 24);
            if ((unint64_t)v58 >= v57)
            {
              double v62 = (char *)*v12;
              uint64_t v63 = (v58 - (_BYTE *)*v12) >> 3;
              double v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 61) {
LABEL_129:
              }
                sub_100007008();
              uint64_t v65 = v57 - (void)v62;
              if (v65 >> 2 > v64) {
                double v64 = v65 >> 2;
              }
              else {
                int64_t v66 = v64;
              }
              if (v66)
              {
                int64_t v67 = (char *)sub_1000071BC(v13, v66);
                double v62 = *(char **)(a1 + 8);
                uint64_t v58 = *(char **)(a1 + 16);
              }

              else
              {
                int64_t v67 = 0LL;
              }

              uint64_t v74 = &v67[8 * v63];
              *(void *)uint64_t v74 = 0LL;
              uint64_t v59 = v74 + 8;
              while (v58 != v62)
              {
                uint64_t v75 = *((void *)v58 - 1);
                v58 -= 8;
                *((void *)v74 - 1) = v75;
                v74 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v74;
              *(void *)(a1 + 16) = v59;
              *(void *)(a1 + 24) = &v67[8 * v66];
              if (v62) {
                operator delete(v62);
              }
            }

            else
            {
              *(void *)uint64_t v58 = 0LL;
              uint64_t v59 = v58 + 8;
            }

            *(void *)(a1 + 16) = v59;
            goto LABEL_115;
          }

          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 16);
            double v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 3;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                double v35 = v36 >> 2;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_1000071BC(v13, v37);
                BOOL v33 = *(char **)(a1 + 8);
                double v31 = *(char **)(a1 + 16);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[8 * v34];
              *(void *)__int16 v39 = 0LL;
              uint64_t v32 = v39 + 8;
              while (v31 != v33)
              {
                double v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(void *)double v31 = 0LL;
              uint64_t v32 = v31 + 8;
            }

            *(void *)(a1 + 16) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
              goto LABEL_83;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_84;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v42 = *((void *)this + 1);
            __int128 v43 = *((void *)this + 2);
            while (v42 < v43 && !*((_BYTE *)this + 24))
            {
              double v45 = *(char **)(a1 + 40);
              double v44 = *(void *)(a1 + 48);
              if ((unint64_t)v45 >= v44)
              {
                __int128 v47 = (char *)*v10;
                __int128 v48 = (v45 - (_BYTE *)*v10) >> 3;
                __int128 v49 = v48 + 1;
                __int128 v50 = v44 - (void)v47;
                if (v50 >> 2 > v49) {
                  __int128 v49 = v50 >> 2;
                }
                else {
                  __int128 v51 = v49;
                }
                if (v51)
                {
                  __int128 v52 = (char *)sub_1000071BC(v11, v51);
                  __int128 v47 = *(char **)(a1 + 32);
                  double v45 = *(char **)(a1 + 40);
                }

                else
                {
                  __int128 v52 = 0LL;
                }

                __int128 v53 = &v52[8 * v48];
                *(void *)__int128 v53 = 0LL;
                __int128 v46 = v53 + 8;
                while (v45 != v47)
                {
                  __int128 v54 = *((void *)v45 - 1);
                  v45 -= 8;
                  *((void *)v53 - 1) = v54;
                  v53 -= 8;
                }

                *(void *)(a1 + 32) = v53;
                *(void *)(a1 + 40) = v46;
                *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v52[8 * v51];
                if (v47) {
                  operator delete(v47);
                }
              }

              else
              {
                *(void *)double v45 = 0LL;
                __int128 v46 = v45 + 8;
              }

              *(void *)(a1 + 40) = v46;
              __int128 v55 = *((void *)this + 1);
              if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2))
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v46 - 1) = *(void *)(*(void *)this + v55);
              __int128 v43 = *((void *)this + 2);
              __int128 v42 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v42;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 88) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_155;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          goto LABEL_157;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v71 = *(char **)(a1 + 16);
            uint64_t v70 = *(void *)(a1 + 24);
            if ((unint64_t)v71 >= v70)
            {
              uint64_t v77 = (char *)*v12;
              uint64_t v78 = (v71 - (_BYTE *)*v12) >> 3;
              uint64_t v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61) {
LABEL_166:
              }
                sub_100007008();
              uint64_t v80 = v70 - (void)v77;
              if (v80 >> 2 > v79) {
                uint64_t v79 = v80 >> 2;
              }
              else {
                uint64_t v81 = v79;
              }
              if (v81)
              {
                uint64_t v82 = (char *)sub_1000071BC(v13, v81);
                uint64_t v77 = *(char **)(a1 + 8);
                uint64_t v71 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v82 = 0LL;
              }

              uint64_t v95 = &v82[8 * v78];
              *(void *)uint64_t v95 = 0LL;
              uint64_t v72 = v95 + 8;
              while (v71 != v77)
              {
                uint64_t v96 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v95 - 1) = v96;
                v95 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v95;
              *(void *)(a1 + 16) = v72;
              *(void *)(a1 + 24) = &v82[8 * v81];
              if (v77) {
                operator delete(v77);
              }
            }

            else
            {
              *(void *)uint64_t v71 = 0LL;
              uint64_t v72 = v71 + 8;
            }

            *(void *)(a1 + 16) = v72;
            goto LABEL_153;
          }

          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 16);
            double v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 3;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                double v35 = v36 >> 2;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_1000071BC(v13, v37);
                BOOL v33 = *(char **)(a1 + 8);
                double v31 = *(char **)(a1 + 16);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[8 * v34];
              *(void *)__int16 v39 = 0LL;
              uint64_t v32 = v39 + 8;
              while (v31 != v33)
              {
                double v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(void *)double v31 = 0LL;
              uint64_t v32 = v31 + 8;
            }

            *(void *)(a1 + 16) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_107;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v74 = *(char **)(a1 + 40);
            uint64_t v73 = *(void *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              unint64_t v83 = (char *)*v11;
              uint64_t v84 = (v74 - (_BYTE *)*v11) >> 3;
              std::string v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61) {
LABEL_167:
              }
                sub_100007008();
              uint64_t v86 = v73 - (void)v83;
              if (v86 >> 2 > v85) {
                std::string v85 = v86 >> 2;
              }
              else {
                uint64_t v87 = v85;
              }
              if (v87)
              {
                uint64_t v88 = (char *)sub_1000071BC(v103, v87);
                unint64_t v83 = *(char **)(a1 + 32);
                uint64_t v74 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v88 = 0LL;
              }

              uint64_t v97 = &v88[8 * v84];
              *(void *)uint64_t v97 = 0LL;
              uint64_t v72 = v97 + 8;
              while (v74 != v83)
              {
                uint64_t v98 = *((void *)v74 - 1);
                v74 -= 8;
                *((void *)v97 - 1) = v98;
                v97 -= 8;
              }

              *(void *)(a1 + 32) = v97;
              *(void *)(a1 + 40) = v72;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
            }

            else
            {
              *(void *)uint64_t v74 = 0LL;
              uint64_t v72 = v74 + 8;
            }

            *(void *)(a1 + 40) = v72;
            goto LABEL_153;
          }

          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v42 = *((void *)this + 1);
          __int128 v43 = *((void *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            double v45 = *(char **)(a1 + 40);
            double v44 = *(void *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              __int128 v47 = (char *)*v11;
              __int128 v48 = (v45 - (_BYTE *)*v11) >> 3;
              __int128 v49 = v48 + 1;
              __int128 v50 = v44 - (void)v47;
              if (v50 >> 2 > v49) {
                __int128 v49 = v50 >> 2;
              }
              else {
                __int128 v51 = v49;
              }
              if (v51)
              {
                __int128 v52 = (char *)sub_1000071BC(v103, v51);
                __int128 v47 = *(char **)(a1 + 32);
                double v45 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v52 = 0LL;
              }

              __int128 v53 = &v52[8 * v48];
              *(void *)__int128 v53 = 0LL;
              __int128 v46 = v53 + 8;
              while (v45 != v47)
              {
                __int128 v54 = *((void *)v45 - 1);
                v45 -= 8;
                *((void *)v53 - 1) = v54;
                v53 -= 8;
              }

              *(void *)(a1 + 32) = v53;
              *(void *)(a1 + 40) = v46;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v52[8 * v51];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              *(void *)double v45 = 0LL;
              __int128 v46 = v45 + 8;
            }

            *(void *)(a1 + 40) = v46;
            __int128 v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v46 - 1) = *(void *)(*(void *)this + v55);
            __int128 v43 = *((void *)this + 2);
            __int128 v42 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v42;
          }

          goto LABEL_107;
        case 4u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v56 = *((void *)this + 1);
            __int128 v57 = *((void *)this + 2);
            while (v56 < v57 && !*((_BYTE *)this + 24))
            {
              uint64_t v59 = *(char **)(a1 + 64);
              uint64_t v58 = *(void *)(a1 + 72);
              if ((unint64_t)v59 >= v58)
              {
                double v61 = (char *)*v10;
                double v62 = (v59 - (_BYTE *)*v10) >> 3;
                uint64_t v63 = v62 + 1;
                double v64 = v58 - (void)v61;
                if (v64 >> 2 > v63) {
                  uint64_t v63 = v64 >> 2;
                }
                else {
                  uint64_t v65 = v63;
                }
                if (v65)
                {
                  int64_t v66 = (char *)sub_1000071BC(v104, v65);
                  double v61 = *(char **)(a1 + 56);
                  uint64_t v59 = *(char **)(a1 + 64);
                }

                else
                {
                  int64_t v66 = 0LL;
                }

                int64_t v67 = &v66[8 * v62];
                *(void *)int64_t v67 = 0LL;
                uint64_t v60 = v67 + 8;
                while (v59 != v61)
                {
                  int64_t v68 = *((void *)v59 - 1);
                  v59 -= 8;
                  *((void *)v67 - 1) = v68;
                  v67 -= 8;
                }

                *(void *)(a1 + 56) = v67;
                *(void *)(a1 + 64) = v60;
                *(void *)(a1 + 72) = &v66[8 * v65];
                if (v61) {
                  operator delete(v61);
                }
              }

              else
              {
                *(void *)uint64_t v59 = 0LL;
                uint64_t v60 = v59 + 8;
              }

              *(void *)(a1 + 64) = v60;
              uint64_t v69 = *((void *)this + 1);
              if (v69 > 0xFFFFFFFFFFFFFFF7LL || v69 + 8 > *((void *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v60 - 1) = *(void *)(*(void *)this + v69);
              __int128 v57 = *((void *)this + 2);
              __int128 v56 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v56;
            }

    if ((v12 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        double v22 = *((void *)this + 2);
        unint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v22)
        {
          std::string v85 = 0;
          uint64_t v86 = 0;
          unint64_t v26 = 0LL;
          if (v22 <= v21) {
            double v22 = *((void *)this + 1);
          }
          do
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_139;
            }

            uint64_t v87 = v21 + 1;
            uint64_t v88 = *(_BYTE *)(v23 + v21);
            *((void *)this + 1) = v87;
            v26 |= (unint64_t)(v88 & 0x7F) << v85;
            if ((v88 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24)) {
                LODWORD(v26) = 0;
              }
              goto LABEL_139;
            }

            v85 += 7;
            unint64_t v21 = v87;
            __int128 v15 = v86++ > 8;
          }

          while (!v15);
LABEL_85:
          LODWORD(v26) = 0;
        }

        else
        {
          double v24 = 0;
          unint64_t v25 = 0;
          unint64_t v26 = 0LL;
          while (1)
          {
            __int128 v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            __int128 v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            __int128 v15 = v25++ > 8;
            if (v15) {
              goto LABEL_85;
            }
          }
        }

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "calibrationLevel", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 124) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_197;
        case 2u:
          *(_DWORD *)(a1 + 124) |= 0x80u;
          __int128 v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_196;
        case 3u:
          *(_DWORD *)(a1 + 124) |= 0x4000u;
          double v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_196;
        case 4u:
          *(_DWORD *)(a1 + 124) |= 4u;
          double v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_196;
        case 5u:
          *(_DWORD *)(a1 + 124) |= 0x20u;
          uint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_196;
        case 6u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v94 = *(char **)(a1 + 16);
            uint64_t v93 = *(void *)(a1 + 24);
            if ((unint64_t)v94 >= v93)
            {
              uint64_t v106 = (char *)*v12;
              uint64_t v107 = (v94 - (_BYTE *)*v12) >> 2;
              uint64_t v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62) {
LABEL_208:
              }
                sub_100007008();
              uint64_t v109 = v93 - (void)v106;
              if (v109 >> 1 > v108) {
                uint64_t v108 = v109 >> 1;
              }
              else {
                uint64_t v110 = v108;
              }
              if (v110)
              {
                uint64_t v111 = (char *)sub_10000956C(v13, v110);
                uint64_t v106 = *(char **)(a1 + 8);
                uint64_t v94 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v111 = 0LL;
              }

              uint64_t v118 = &v111[4 * v107];
              *(_DWORD *)uint64_t v118 = 0;
              uint64_t v95 = v118 + 4;
              while (v94 != v106)
              {
                uint64_t v119 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v118;
              *(void *)(a1 + 16) = v95;
              *(void *)(a1 + 24) = &v111[4 * v110];
              if (v106) {
                operator delete(v106);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v94 = 0;
              uint64_t v95 = v94 + 4;
            }

            *(void *)(a1 + 16) = v95;
            goto LABEL_192;
          }

          if ((PB::Reader::placeMark(this, v125, v26, a4) & 1) != 0) {
            return 0LL;
          }
          BOOL v33 = *((void *)this + 1);
          int v34 = *((void *)this + 2);
          while (v33 < v34 && !*((_BYTE *)this + 24))
          {
            std::string::size_type v36 = *(char **)(a1 + 16);
            double v35 = *(void *)(a1 + 24);
            if ((unint64_t)v36 >= v35)
            {
              unint64_t v38 = (char *)*v12;
              __int16 v39 = (v36 - (_BYTE *)*v12) >> 2;
              double v40 = v39 + 1;
              __int128 v41 = v35 - (void)v38;
              if (v41 >> 1 > v40) {
                double v40 = v41 >> 1;
              }
              else {
                __int128 v42 = v40;
              }
              if (v42)
              {
                __int128 v43 = (char *)sub_10000956C(v13, v42);
                unint64_t v38 = *(char **)(a1 + 8);
                std::string::size_type v36 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v43 = 0LL;
              }

              double v44 = &v43[4 * v39];
              *(_DWORD *)double v44 = 0;
              double v37 = v44 + 4;
              while (v36 != v38)
              {
                double v45 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v44;
              *(void *)(a1 + 16) = v37;
              *(void *)(a1 + 24) = &v43[4 * v42];
              if (v38) {
                operator delete(v38);
              }
            }

            else
            {
              *(_DWORD *)std::string::size_type v36 = 0;
              double v37 = v36 + 4;
            }

            *(void *)(a1 + 16) = v37;
            __int128 v46 = *((void *)this + 1);
            if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
              goto LABEL_152;
            }
            *(v37 - 1) = *(_DWORD *)(*(void *)this + v46);
            int v34 = *((void *)this + 2);
            BOOL v33 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v33;
          }

          goto LABEL_153;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v125, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v47 = *((void *)this + 1);
            __int128 v48 = *((void *)this + 2);
            while (v47 < v48 && !*((_BYTE *)this + 24))
            {
              __int128 v50 = *(char **)(a1 + 40);
              __int128 v49 = *(void *)(a1 + 48);
              if ((unint64_t)v50 >= v49)
              {
                __int128 v52 = (char *)*v10;
                __int128 v53 = (v50 - (_BYTE *)*v10) >> 2;
                __int128 v54 = v53 + 1;
                __int128 v55 = v49 - (void)v52;
                if (v55 >> 1 > v54) {
                  __int128 v54 = v55 >> 1;
                }
                else {
                  __int128 v56 = v54;
                }
                if (v56)
                {
                  __int128 v57 = (char *)sub_10000956C(v11, v56);
                  __int128 v52 = *(char **)(a1 + 32);
                  __int128 v50 = *(char **)(a1 + 40);
                }

                else
                {
                  __int128 v57 = 0LL;
                }

                uint64_t v58 = &v57[4 * v53];
                *(_DWORD *)uint64_t v58 = 0;
                __int128 v51 = v58 + 4;
                while (v50 != v52)
                {
                  uint64_t v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }

                *(void *)(a1 + 32) = v58;
                *(void *)(a1 + 40) = v51;
                *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v57[4 * v56];
                if (v52) {
                  operator delete(v52);
                }
              }

              else
              {
                *(_DWORD *)__int128 v50 = 0;
                __int128 v51 = v50 + 4;
              }

              *(void *)(a1 + 40) = v51;
              uint64_t v60 = *((void *)this + 1);
              if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2))
              {
LABEL_152:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v51 - 1) = *(_DWORD *)(*(void *)this + v60);
              __int128 v48 = *((void *)this + 2);
              __int128 v47 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v47;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 160) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_278;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_280;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v114 = *(char **)(a1 + 40);
            uint64_t v113 = *(void *)(a1 + 48);
            if ((unint64_t)v114 >= v113)
            {
              uint64_t v126 = (char *)*v13;
              uint64_t v127 = (v114 - (_BYTE *)*v13) >> 2;
              uint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 62) {
LABEL_289:
              }
                sub_100007008();
              uint64_t v129 = v113 - (void)v126;
              if (v129 >> 1 > v128) {
                uint64_t v128 = v129 >> 1;
              }
              else {
                uint64_t v130 = v128;
              }
              if (v130)
              {
                v131 = (char *)sub_10000956C(v176, v130);
                uint64_t v126 = *(char **)(a1 + 32);
                uint64_t v114 = *(char **)(a1 + 40);
              }

              else
              {
                v131 = 0LL;
              }

              unint64_t v162 = &v131[4 * v127];
              *(_DWORD *)unint64_t v162 = 0;
              uint64_t v115 = v162 + 4;
              while (v114 != v126)
              {
                __int16 v163 = *((_DWORD *)v114 - 1);
                v114 -= 4;
                *((_DWORD *)v162 - 1) = v163;
                v162 -= 4;
              }

              *(void *)(a1 + 32) = v162;
              *(void *)(a1 + 40) = v115;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v131[4 * v130];
              if (v126) {
                operator delete(v126);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v114 = 0;
              uint64_t v115 = v114 + 4;
            }

            *(void *)(a1 + 40) = v115;
            goto LABEL_276;
          }

          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 40);
            double v31 = *(void *)(a1 + 48);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v13;
              double v35 = (v32 - (_BYTE *)*v13) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v176, v38);
                int v34 = *(char **)(a1 + 32);
                uint64_t v32 = *(char **)(a1 + 40);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + 32) = v40;
              *(void *)(a1 + 40) = v33;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 40) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_173;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v117 = *(char **)(a1 + 64);
            uint64_t v116 = *(void *)(a1 + 72);
            if ((unint64_t)v117 >= v116)
            {
              int v132 = (char *)*v12;
              v133 = (v117 - (_BYTE *)*v12) >> 2;
              int v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62) {
LABEL_290:
              }
                sub_100007008();
              v135 = v116 - (void)v132;
              if (v135 >> 1 > v134) {
                int v134 = v135 >> 1;
              }
              else {
                int v136 = v134;
              }
              if (v136)
              {
                v137 = (char *)sub_10000956C(v177, v136);
                int v132 = *(char **)(a1 + 56);
                uint64_t v117 = *(char **)(a1 + 64);
              }

              else
              {
                v137 = 0LL;
              }

              unint64_t v164 = &v137[4 * v133];
              *(_DWORD *)unint64_t v164 = 0;
              uint64_t v115 = v164 + 4;
              while (v117 != v132)
              {
                __int16 v165 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v164 - 1) = v165;
                v164 -= 4;
              }

              *(void *)(a1 + 56) = v164;
              *(void *)(a1 + 64) = v115;
              *(void *)(a1 + 72) = &v137[4 * v136];
              if (v132) {
                operator delete(v132);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v117 = 0;
              uint64_t v115 = v117 + 4;
            }

            *(void *)(a1 + 64) = v115;
            goto LABEL_276;
          }

          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 64);
            double v45 = *(void *)(a1 + 72);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v177, v52);
                __int128 v48 = *(char **)(a1 + 56);
                __int128 v46 = *(char **)(a1 + 64);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + 56) = v54;
              *(void *)(a1 + 64) = v47;
              *(void *)(a1 + 72) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 64) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_173;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v119 = *(char **)(a1 + 112);
            uint64_t v118 = *(void *)(a1 + 120);
            if ((unint64_t)v119 >= v118)
            {
              int v138 = (char *)*v11;
              __int16 v139 = (v119 - (_BYTE *)*v11) >> 2;
              __int16 v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 62) {
LABEL_291:
              }
                sub_100007008();
              __int16 v141 = v118 - (void)v138;
              if (v141 >> 1 > v140) {
                __int16 v140 = v141 >> 1;
              }
              else {
                __int16 v142 = v140;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_10000956C(v178, v142);
                int v138 = *(char **)(a1 + 104);
                uint64_t v119 = *(char **)(a1 + 112);
              }

              else
              {
                unint64_t v143 = 0LL;
              }

              unint64_t v166 = &v143[4 * v139];
              *(_DWORD *)unint64_t v166 = 0;
              uint64_t v115 = v166 + 4;
              while (v119 != v138)
              {
                int v167 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }

              *(void *)(a1 + 104) = v166;
              *(void *)(a1 + 112) = v115;
              *(void *)(a1 + 120) = &v143[4 * v142];
              if (v138) {
                operator delete(v138);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v119 = 0;
              uint64_t v115 = v119 + 4;
            }

            *(void *)(a1 + 112) = v115;
            goto LABEL_276;
          }

          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v57 = *((void *)this + 1);
          uint64_t v58 = *((void *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            uint64_t v60 = *(char **)(a1 + 112);
            uint64_t v59 = *(void *)(a1 + 120);
            if ((unint64_t)v60 >= v59)
            {
              double v62 = (char *)*v11;
              uint64_t v63 = (v60 - (_BYTE *)*v11) >> 2;
              double v64 = v63 + 1;
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                double v64 = v65 >> 1;
              }
              else {
                int64_t v66 = v64;
              }
              if (v66)
              {
                int64_t v67 = (char *)sub_10000956C(v178, v66);
                double v62 = *(char **)(a1 + 104);
                uint64_t v60 = *(char **)(a1 + 112);
              }

              else
              {
                int64_t v67 = 0LL;
              }

              int64_t v68 = &v67[4 * v63];
              *(_DWORD *)int64_t v68 = 0;
              double v61 = v68 + 4;
              while (v60 != v62)
              {
                uint64_t v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }

              *(void *)(a1 + 104) = v68;
              *(void *)(a1 + 112) = v61;
              *(void *)(a1 + 120) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v60 = 0;
              double v61 = v60 + 4;
            }

            *(void *)(a1 + 112) = v61;
            uint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
            uint64_t v58 = *((void *)this + 2);
            __int128 v57 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v57;
          }

          goto LABEL_173;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            __int128 v121 = *(char **)(a1 + 16);
            int v120 = *(void *)(a1 + 24);
            if ((unint64_t)v121 >= v120)
            {
              __int16 v144 = (char *)*v10;
              uint64_t v145 = (v121 - (_BYTE *)*v10) >> 2;
              __int128 v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62) {
LABEL_292:
              }
                sub_100007008();
              char v147 = v120 - (void)v144;
              if (v147 >> 1 > v146) {
                __int128 v146 = v147 >> 1;
              }
              else {
                unsigned int v148 = v146;
              }
              if (v148)
              {
                __int128 v149 = (char *)sub_10000956C(v179, v148);
                __int16 v144 = *(char **)(a1 + 8);
                __int128 v121 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v149 = 0LL;
              }

              __int128 v168 = &v149[4 * v145];
              *(_DWORD *)__int128 v168 = 0;
              uint64_t v115 = v168 + 4;
              while (v121 != v144)
              {
                uint64_t v169 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v168;
              *(void *)(a1 + 16) = v115;
              *(void *)(a1 + 24) = &v149[4 * v148];
              if (v144) {
                operator delete(v144);
              }
            }

            else
            {
              *(_DWORD *)__int128 v121 = 0;
              uint64_t v115 = v121 + 4;
            }

            *(void *)(a1 + 16) = v115;
            goto LABEL_276;
          }

          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v71 = *((void *)this + 1);
          uint64_t v72 = *((void *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            uint64_t v74 = *(char **)(a1 + 16);
            uint64_t v73 = *(void *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              uint64_t v76 = (char *)*v10;
              uint64_t v77 = (v74 - (_BYTE *)*v10) >> 2;
              uint64_t v78 = v77 + 1;
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                uint64_t v78 = v79 >> 1;
              }
              else {
                uint64_t v80 = v78;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_10000956C(v179, v80);
                uint64_t v76 = *(char **)(a1 + 8);
                uint64_t v74 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v81 = 0LL;
              }

              uint64_t v82 = &v81[4 * v77];
              *(_DWORD *)uint64_t v82 = 0;
              uint64_t v75 = v82 + 4;
              while (v74 != v76)
              {
                unint64_t v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v82;
              *(void *)(a1 + 16) = v75;
              *(void *)(a1 + 24) = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v74 = 0;
              uint64_t v75 = v74 + 4;
            }

            *(void *)(a1 + 16) = v75;
            uint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v75 - 1) = *(_DWORD *)(*(void *)this + v84);
            uint64_t v72 = *((void *)this + 2);
            uint64_t v71 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v71;
          }

          goto LABEL_173;
        case 6u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v123 = *(char **)(a1 + 88);
            char v122 = *(void *)(a1 + 96);
            if ((unint64_t)v123 >= v122)
            {
              v150 = (char *)*v182;
              v151 = (v123 - (_BYTE *)*v182) >> 2;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62) {
LABEL_293:
              }
                sub_100007008();
              v153 = v122 - (void)v150;
              if (v153 >> 1 > v152) {
                v152 = v153 >> 1;
              }
              else {
                v154 = v152;
              }
              if (v154)
              {
                v155 = (char *)sub_10000956C(v180, v154);
                v150 = *(char **)(a1 + 80);
                uint64_t v123 = *(char **)(a1 + 88);
              }

              else
              {
                v155 = 0LL;
              }

              uint64_t v170 = &v155[4 * v151];
              *(_DWORD *)uint64_t v170 = 0;
              uint64_t v115 = v170 + 4;
              while (v123 != v150)
              {
                uint64_t v171 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v170 - 1) = v171;
                v170 -= 4;
              }

              *(void *)(a1 + 80) = v170;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v115;
              *(void *)(a1 + 96) = &v155[4 * v154];
              if (v150) {
                operator delete(v150);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v123 = 0;
              uint64_t v115 = v123 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v115;
            goto LABEL_276;
          }

          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
            return 0LL;
          }
          std::string v85 = *((void *)this + 1);
          uint64_t v86 = *((void *)this + 2);
          while (v85 < v86 && !*((_BYTE *)this + 24))
          {
            uint64_t v88 = *(char **)(a1 + 88);
            uint64_t v87 = *(void *)(a1 + 96);
            if ((unint64_t)v88 >= v87)
            {
              uint64_t v90 = (char *)*v182;
              uint64_t v91 = (v88 - (_BYTE *)*v182) >> 2;
              v92 = v91 + 1;
              uint64_t v93 = v87 - (void)v90;
              if (v93 >> 1 > v92) {
                v92 = v93 >> 1;
              }
              else {
                uint64_t v94 = v92;
              }
              if (v94)
              {
                uint64_t v95 = (char *)sub_10000956C(v180, v94);
                uint64_t v90 = *(char **)(a1 + 80);
                uint64_t v88 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v95 = 0LL;
              }

              uint64_t v96 = &v95[4 * v91];
              *(_DWORD *)uint64_t v96 = 0;
              double v89 = v96 + 4;
              while (v88 != v90)
              {
                uint64_t v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }

              *(void *)(a1 + 80) = v96;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v89;
              *(void *)(a1 + 96) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v88 = 0;
              double v89 = v88 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v89;
            uint64_t v98 = *((void *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v89 - 1) = *(_DWORD *)(*(void *)this + v98);
            uint64_t v86 = *((void *)this + 2);
            std::string v85 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v85;
          }

          goto LABEL_173;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0) {
              return 0LL;
            }
            v99 = *((void *)this + 1);
            __int128 v100 = *((void *)this + 2);
            while (v99 < v100 && !*((_BYTE *)this + 24))
            {
              BOOL v102 = *(char **)(a1 + 136);
              CFStringRef v101 = *(void *)(a1 + 144);
              if ((unint64_t)v102 >= v101)
              {
                __int128 v104 = (char *)*v183;
                unsigned int v105 = (v102 - (_BYTE *)*v183) >> 2;
                uint64_t v106 = v105 + 1;
                uint64_t v107 = v101 - (void)v104;
                if (v107 >> 1 > v106) {
                  uint64_t v106 = v107 >> 1;
                }
                else {
                  uint64_t v108 = v106;
                }
                if (v108)
                {
                  uint64_t v109 = (char *)sub_10000956C(v181, v108);
                  __int128 v104 = *(char **)(a1 + 128);
                  BOOL v102 = *(char **)(a1 + 136);
                }

                else
                {
                  uint64_t v109 = 0LL;
                }

                uint64_t v110 = &v109[4 * v105];
                *(_DWORD *)uint64_t v110 = 0;
                double v103 = v110 + 4;
                while (v102 != v104)
                {
                  uint64_t v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }

                *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v110;
                *(void *)(a1 + 136) = v103;
                *(void *)(a1 + 144) = &v109[4 * v108];
                if (v104) {
                  operator delete(v104);
                }
              }

              else
              {
                *(_DWORD *)BOOL v102 = 0;
                double v103 = v102 + 4;
              }

              *(void *)(a1 + 136) = v103;
              uint64_t v112 = *((void *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2))
              {
LABEL_172:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v103 - 1) = *(_DWORD *)(*(void *)this + v112);
              __int128 v100 = *((void *)this + 2);
              v99 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v99;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
            return 0LL;
          }
          double v44 = *((void *)this + 1);
          double v45 = *((void *)this + 2);
          while (v44 < v45 && !*((_BYTE *)this + 24))
          {
            __int128 v47 = *(char **)(a1 + 40);
            __int128 v46 = *(void *)(a1 + 48);
            if ((unint64_t)v47 >= v46)
            {
              __int128 v49 = (char *)*v12;
              __int128 v50 = (v47 - (_BYTE *)*v12) >> 2;
              __int128 v51 = v50 + 1;
              __int128 v52 = v46 - (void)v49;
              if (v52 >> 1 > v51) {
                __int128 v51 = v52 >> 1;
              }
              else {
                __int128 v53 = v51;
              }
              if (v53)
              {
                __int128 v54 = (char *)sub_10000956C(v13, v53);
                __int128 v49 = *(char **)(a1 + 32);
                __int128 v47 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v54 = 0LL;
              }

              __int128 v55 = &v54[4 * v50];
              *(_DWORD *)__int128 v55 = 0;
              __int128 v48 = v55 + 4;
              while (v47 != v49)
              {
                __int128 v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }

              *(void *)(a1 + 32) = v55;
              *(void *)(a1 + 40) = v48;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v54[4 * v53];
              if (v49) {
                operator delete(v49);
              }
            }

            else
            {
              *(_DWORD *)__int128 v47 = 0;
              __int128 v48 = v47 + 4;
            }

            *(void *)(a1 + 40) = v48;
            __int128 v57 = *((void *)this + 1);
            if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v48 - 1) = *(_DWORD *)(*(void *)this + v57);
            double v45 = *((void *)this + 2);
            double v44 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v44;
          }

          goto LABEL_83;
        }

        double v62 = *(char **)(a1 + 40);
        double v61 = *(void *)(a1 + 48);
        if ((unint64_t)v62 >= v61)
        {
          uint64_t v69 = (char *)*v12;
          uint64_t v70 = (v62 - (_BYTE *)*v12) >> 2;
          uint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
LABEL_128:
          }
            sub_100007008();
          uint64_t v72 = v61 - (void)v69;
          if (v72 >> 1 > v71) {
            uint64_t v71 = v72 >> 1;
          }
          else {
            uint64_t v73 = v71;
          }
          if (v73)
          {
            uint64_t v74 = (char *)sub_10000956C(v13, v73);
            uint64_t v69 = *(char **)(a1 + 32);
            double v62 = *(char **)(a1 + 40);
          }

          else
          {
            uint64_t v74 = 0LL;
          }

          uint64_t v77 = &v74[4 * v70];
          *(_DWORD *)uint64_t v77 = 0;
          uint64_t v60 = v77 + 4;
          while (v62 != v69)
          {
            uint64_t v78 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }

          *(void *)(a1 + 32) = v77;
          *(void *)(a1 + 40) = v60;
          *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }

        else
        {
          *(_DWORD *)double v62 = 0;
          uint64_t v60 = v62 + 4;
        }

        *(void *)(a1 + 40) = v60;
LABEL_114:
        uint64_t v79 = *((void *)this + 1);
        if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }

        *(v60 - 1) = *(_DWORD *)(*(void *)this + v79);
        __int128 v29 = *((void *)this + 1) + 4LL;
        goto LABEL_118;
      }

      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        __int128 v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
        __int128 v29 = *((void *)this + 1) + 8LL;
LABEL_118:
        *((void *)this + 1) = v29;
        goto LABEL_119;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_119:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0) {
        return 0LL;
      }
      double v30 = *((void *)this + 1);
      double v31 = *((void *)this + 2);
      while (v30 < v31 && !*((_BYTE *)this + 24))
      {
        BOOL v33 = *(char **)(a1 + 16);
        uint64_t v32 = *(void *)(a1 + 24);
        if ((unint64_t)v33 >= v32)
        {
          double v35 = (char *)*v10;
          std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
          double v37 = v36 + 1;
          unint64_t v38 = v32 - (void)v35;
          if (v38 >> 1 > v37) {
            double v37 = v38 >> 1;
          }
          else {
            __int16 v39 = v37;
          }
          if (v39)
          {
            double v40 = (char *)sub_10000956C(v11, v39);
            double v35 = *(char **)(a1 + 8);
            BOOL v33 = *(char **)(a1 + 16);
          }

          else
          {
            double v40 = 0LL;
          }

          __int128 v41 = &v40[4 * v36];
          *(_DWORD *)__int128 v41 = 0;
          int v34 = v41 + 4;
          while (v33 != v35)
          {
            __int128 v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }

          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
          *(void *)(a1 + 16) = v34;
          *(void *)(a1 + 24) = &v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          *(_DWORD *)BOOL v33 = 0;
          int v34 = v33 + 4;
        }

        *(void *)(a1 + 16) = v34;
        __int128 v43 = *((void *)this + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }

        *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
        double v31 = *((void *)this + 2);
        double v30 = *((void *)this + 1) + 4LL;
        *((void *)this + 1) = v30;
      }

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 168) |= 2u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
            goto LABEL_292;
          }
          *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v28);
          goto LABEL_53;
        case 2u:
          if ((_DWORD)v27 != 2)
          {
            __int16 v141 = *(char **)(a1 + 88);
            __int16 v140 = *(void *)(a1 + 96);
            if ((unint64_t)v141 >= v140)
            {
              __int128 v168 = (char *)*v13;
              uint64_t v169 = (v141 - (_BYTE *)*v13) >> 2;
              uint64_t v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62) {
LABEL_308:
              }
                sub_100007008();
              uint64_t v171 = v140 - (void)v168;
              if (v171 >> 1 > v170) {
                uint64_t v170 = v171 >> 1;
              }
              else {
                v172 = v170;
              }
              if (v172)
              {
                v173 = (char *)sub_10000956C(v14, v172);
                __int128 v168 = *(char **)(a1 + 80);
                __int16 v141 = *(char **)(a1 + 88);
              }

              else
              {
                v173 = 0LL;
              }

              v184 = &v173[4 * v169];
              *(_DWORD *)v184 = 0;
              v133 = v184 + 4;
              while (v141 != v168)
              {
                uint64_t v185 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v184 - 1) = v185;
                v184 -= 4;
              }

              *(void *)(a1 + 80) = v184;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v133;
              *(void *)(a1 + 96) = &v173[4 * v172];
              if (v168) {
                operator delete(v168);
              }
            }

            else
            {
              *(_DWORD *)__int16 v141 = 0;
              v133 = v141 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v133;
            goto LABEL_290;
          }

          if ((PB::Reader::placeMark(this, v194, v27, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v72 = *((void *)this + 1);
          uint64_t v73 = *((void *)this + 2);
          while (v72 < v73 && !*((_BYTE *)this + 24))
          {
            uint64_t v75 = *(char **)(a1 + 88);
            uint64_t v74 = *(void *)(a1 + 96);
            if ((unint64_t)v75 >= v74)
            {
              uint64_t v77 = (char *)*v13;
              uint64_t v78 = (v75 - (_BYTE *)*v13) >> 2;
              uint64_t v79 = v78 + 1;
              uint64_t v80 = v74 - (void)v77;
              if (v80 >> 1 > v79) {
                uint64_t v79 = v80 >> 1;
              }
              else {
                uint64_t v81 = v79;
              }
              if (v81)
              {
                uint64_t v82 = (char *)sub_10000956C(v14, v81);
                uint64_t v77 = *(char **)(a1 + 80);
                uint64_t v75 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v82 = 0LL;
              }

              unint64_t v83 = &v82[4 * v78];
              *(_DWORD *)unint64_t v83 = 0;
              uint64_t v76 = v83 + 4;
              while (v75 != v77)
              {
                uint64_t v84 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }

              *(void *)(a1 + 80) = v83;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v76;
              *(void *)(a1 + 96) = &v82[4 * v81];
              if (v77) {
                operator delete(v77);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v75 = 0;
              uint64_t v76 = v75 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v76;
            std::string v85 = *((void *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
              goto LABEL_174;
            }
            *(v76 - 1) = *(_DWORD *)(*(void *)this + v85);
            uint64_t v73 = *((void *)this + 2);
            uint64_t v72 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v72;
          }

          goto LABEL_175;
        case 3u:
          if ((_DWORD)v27 != 2)
          {
            int v132 = *(char **)(a1 + 64);
            v131 = *(void *)(a1 + 72);
            if ((unint64_t)v132 >= v131)
            {
              __int128 v156 = (char *)*v12;
              __int128 v157 = (v132 - (_BYTE *)*v12) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_306:
              }
                sub_100007008();
              __int16 v159 = v131 - (void)v156;
              if (v159 >> 1 > v158) {
                v158 = v159 >> 1;
              }
              else {
                uint64_t v160 = v158;
              }
              if (v160)
              {
                __int16 v161 = (char *)sub_10000956C(v191, v160);
                __int128 v156 = *(char **)(a1 + 56);
                int v132 = *(char **)(a1 + 64);
              }

              else
              {
                __int16 v161 = 0LL;
              }

              __int128 v180 = &v161[4 * v157];
              *(_DWORD *)__int128 v180 = 0;
              v133 = v180 + 4;
              while (v132 != v156)
              {
                v181 = *((_DWORD *)v132 - 1);
                v132 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }

              *(void *)(a1 + 56) = v180;
              *(void *)(a1 + 64) = v133;
              *(void *)(a1 + 72) = &v161[4 * v160];
              if (v156) {
                operator delete(v156);
              }
            }

            else
            {
              *(_DWORD *)int v132 = 0;
              v133 = v132 + 4;
            }

            *(void *)(a1 + 64) = v133;
            goto LABEL_290;
          }

          if ((PB::Reader::placeMark(this, v194, v27, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 64);
            double v31 = *(void *)(a1 + 72);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v12;
              double v35 = (v32 - (_BYTE *)*v12) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v191, v38);
                int v34 = *(char **)(a1 + 56);
                uint64_t v32 = *(char **)(a1 + 64);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + 56) = v40;
              *(void *)(a1 + 64) = v33;
              *(void *)(a1 + 72) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 64) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_174;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_175;
        case 4u:
          *(_WORD *)(a1 + 168) |= 0x20u;
          uint64_t v86 = *((void *)this + 1);
          if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)this + 2)) {
            goto LABEL_292;
          }
          *(_DWORD *)(a1 + 14std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v86);
          goto LABEL_294;
        case 5u:
          *(_WORD *)(a1 + 168) |= 1u;
          __int128 v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7LL || v43 + 8 > *((void *)this + 2)) {
            goto LABEL_292;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v43);
LABEL_53:
          double v44 = *((void *)this + 1) + 8LL;
          goto LABEL_295;
        case 6u:
          *(_WORD *)(a1 + 168) |= 0x100u;
          uint64_t v87 = *((void *)this + 1);
          uint64_t v88 = *((void *)this + 2);
          double v89 = *(void *)this;
          if (v87 <= 0xFFFFFFFFFFFFFFF5LL && v87 + 10 <= v88)
          {
            uint64_t v90 = 0;
            uint64_t v91 = 0;
            v92 = 0LL;
            do
            {
              uint64_t v93 = v87 + 1;
              *((void *)this + 1) = v87 + 1;
              uint64_t v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0) {
                goto LABEL_255;
              }
              v90 += 7;
              uint64_t v87 = v93;
              unint64_t v21 = v91++ > 8;
            }

            while (!v21);
LABEL_197:
            LODWORD(v92) = 0;
            goto LABEL_255;
          }

          __int16 v142 = 0;
          unint64_t v143 = 0;
          v92 = 0LL;
          if (v88 <= v87) {
            uint64_t v88 = *((void *)this + 1);
          }
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              __int16 v144 = v87 + 1;
              uint64_t v145 = *(_BYTE *)(v89 + v87);
              *((void *)this + 1) = v144;
              v92 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                uint64_t v87 = v144;
                unint64_t v21 = v143++ > 8;
                if (v21) {
                  goto LABEL_197;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v92) = 0;
              }
            }

            break;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 204) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_345;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            __int128 v146 = *(char **)(a1 + 160);
            uint64_t v145 = *(void *)(a1 + 168);
            if ((unint64_t)v146 >= v145)
            {
              uint64_t v160 = (char *)*v13;
              __int16 v161 = (v146 - (_BYTE *)*v13) >> 2;
              unint64_t v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62) {
LABEL_354:
              }
                sub_100007008();
              __int16 v163 = v145 - (void)v160;
              if (v163 >> 1 > v162) {
                unint64_t v162 = v163 >> 1;
              }
              else {
                unint64_t v164 = v162;
              }
              if (v164)
              {
                __int16 v165 = (char *)sub_10000956C(v218, v164);
                uint64_t v160 = *(char **)(a1 + 152);
                __int128 v146 = *(char **)(a1 + 160);
              }

              else
              {
                __int16 v165 = 0LL;
              }

              v202 = &v165[4 * v161];
              *(_DWORD *)v202 = 0;
              char v147 = v202 + 4;
              while (v146 != v160)
              {
                v203 = *((_DWORD *)v146 - 1);
                v146 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }

              *(void *)(a1 + 152) = v202;
              *(void *)(a1 + 160) = v147;
              *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = &v165[4 * v164];
              if (v160) {
                operator delete(v160);
              }
            }

            else
            {
              *(_DWORD *)__int128 v146 = 0;
              char v147 = v146 + 4;
            }

            *(void *)(a1 + 160) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 160);
            double v31 = *(void *)(a1 + 168);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v13;
              double v35 = (v32 - (_BYTE *)*v13) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v218, v38);
                int v34 = *(char **)(a1 + 152);
                uint64_t v32 = *(char **)(a1 + 160);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + 152) = v40;
              *(void *)(a1 + 160) = v33;
              *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 160) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_214;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            __int128 v149 = *(char **)(a1 + 88);
            unsigned int v148 = *(void *)(a1 + 96);
            if ((unint64_t)v149 >= v148)
            {
              unint64_t v166 = (char *)*v12;
              int v167 = (v149 - (_BYTE *)*v12) >> 2;
              __int128 v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 62) {
LABEL_355:
              }
                sub_100007008();
              uint64_t v169 = v148 - (void)v166;
              if (v169 >> 1 > v168) {
                __int128 v168 = v169 >> 1;
              }
              else {
                uint64_t v170 = v168;
              }
              if (v170)
              {
                uint64_t v171 = (char *)sub_10000956C(v219, v170);
                unint64_t v166 = *(char **)(a1 + 80);
                __int128 v149 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v171 = 0LL;
              }

              v204 = &v171[4 * v167];
              *(_DWORD *)v204 = 0;
              char v147 = v204 + 4;
              while (v149 != v166)
              {
                v205 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }

              *(void *)(a1 + 80) = v204;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v147;
              *(void *)(a1 + 96) = &v171[4 * v170];
              if (v166) {
                operator delete(v166);
              }
            }

            else
            {
              *(_DWORD *)__int128 v149 = 0;
              char v147 = v149 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 88);
            double v45 = *(void *)(a1 + 96);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v219, v52);
                __int128 v48 = *(char **)(a1 + 80);
                __int128 v46 = *(char **)(a1 + 88);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + 80) = v54;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v47;
              *(void *)(a1 + 96) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_214;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v151 = *(char **)(a1 + 16);
            v150 = *(void *)(a1 + 24);
            if ((unint64_t)v151 >= v150)
            {
              v172 = (char *)*v11;
              v173 = (v151 - (_BYTE *)*v11) >> 2;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 62) {
LABEL_356:
              }
                sub_100007008();
              int v175 = v150 - (void)v172;
              if (v175 >> 1 > v174) {
                v174 = v175 >> 1;
              }
              else {
                char v176 = v174;
              }
              if (v176)
              {
                v177 = (char *)sub_10000956C(v220, v176);
                v172 = *(char **)(a1 + 8);
                v151 = *(char **)(a1 + 16);
              }

              else
              {
                v177 = 0LL;
              }

              __int16 v206 = &v177[4 * v173];
              *(_DWORD *)__int16 v206 = 0;
              char v147 = v206 + 4;
              while (v151 != v172)
              {
                unint64_t v207 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v206;
              *(void *)(a1 + 16) = v147;
              *(void *)(a1 + 24) = &v177[4 * v176];
              if (v172) {
                operator delete(v172);
              }
            }

            else
            {
              *(_DWORD *)v151 = 0;
              char v147 = v151 + 4;
            }

            *(void *)(a1 + 16) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v57 = *((void *)this + 1);
          uint64_t v58 = *((void *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            uint64_t v60 = *(char **)(a1 + 16);
            uint64_t v59 = *(void *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              double v62 = (char *)*v11;
              uint64_t v63 = (v60 - (_BYTE *)*v11) >> 2;
              double v64 = v63 + 1;
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                double v64 = v65 >> 1;
              }
              else {
                int64_t v66 = v64;
              }
              if (v66)
              {
                int64_t v67 = (char *)sub_10000956C(v220, v66);
                double v62 = *(char **)(a1 + 8);
                uint64_t v60 = *(char **)(a1 + 16);
              }

              else
              {
                int64_t v67 = 0LL;
              }

              int64_t v68 = &v67[4 * v63];
              *(_DWORD *)int64_t v68 = 0;
              double v61 = v68 + 4;
              while (v60 != v62)
              {
                uint64_t v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v68;
              *(void *)(a1 + 16) = v61;
              *(void *)(a1 + 24) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v60 = 0;
              double v61 = v60 + 4;
            }

            *(void *)(a1 + 16) = v61;
            uint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
            uint64_t v58 = *((void *)this + 2);
            __int128 v57 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v57;
          }

          goto LABEL_214;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v153 = *(char **)(a1 + 40);
            v152 = *(void *)(a1 + 48);
            if ((unint64_t)v153 >= v152)
            {
              uint64_t v178 = (char *)*v10;
              v179 = (v153 - (_BYTE *)*v10) >> 2;
              __int128 v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62) {
LABEL_357:
              }
                sub_100007008();
              v181 = v152 - (void)v178;
              if (v181 >> 1 > v180) {
                __int128 v180 = v181 >> 1;
              }
              else {
                char v182 = v180;
              }
              if (v182)
              {
                v183 = (char *)sub_10000956C(v221, v182);
                uint64_t v178 = *(char **)(a1 + 32);
                v153 = *(char **)(a1 + 40);
              }

              else
              {
                v183 = 0LL;
              }

              __int16 v208 = &v183[4 * v179];
              *(_DWORD *)__int16 v208 = 0;
              char v147 = v208 + 4;
              while (v153 != v178)
              {
                unint64_t v209 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }

              *(void *)(a1 + 32) = v208;
              *(void *)(a1 + 40) = v147;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v183[4 * v182];
              if (v178) {
                operator delete(v178);
              }
            }

            else
            {
              *(_DWORD *)v153 = 0;
              char v147 = v153 + 4;
            }

            *(void *)(a1 + 40) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v71 = *((void *)this + 1);
          uint64_t v72 = *((void *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            uint64_t v74 = *(char **)(a1 + 40);
            uint64_t v73 = *(void *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              uint64_t v76 = (char *)*v10;
              uint64_t v77 = (v74 - (_BYTE *)*v10) >> 2;
              uint64_t v78 = v77 + 1;
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                uint64_t v78 = v79 >> 1;
              }
              else {
                uint64_t v80 = v78;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_10000956C(v221, v80);
                uint64_t v76 = *(char **)(a1 + 32);
                uint64_t v74 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v81 = 0LL;
              }

              uint64_t v82 = &v81[4 * v77];
              *(_DWORD *)uint64_t v82 = 0;
              uint64_t v75 = v82 + 4;
              while (v74 != v76)
              {
                unint64_t v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }

              *(void *)(a1 + 32) = v82;
              *(void *)(a1 + 40) = v75;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v74 = 0;
              uint64_t v75 = v74 + 4;
            }

            *(void *)(a1 + 40) = v75;
            uint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v75 - 1) = *(_DWORD *)(*(void *)this + v84);
            uint64_t v72 = *((void *)this + 2);
            uint64_t v71 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v71;
          }

          goto LABEL_214;
        case 6u:
          *(_BYTE *)(a1 + 204) |= 2u;
          std::string v85 = *((void *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v85);
          goto LABEL_344;
        case 7u:
          *(_BYTE *)(a1 + 204) |= 8u;
          uint64_t v86 = *((void *)this + 1);
          if (v86 >= *((void *)this + 2))
          {
            double v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v87 = v86 + 1;
            uint64_t v88 = *(unsigned __int8 *)(*(void *)this + v86);
            *((void *)this + 1) = v87;
            double v89 = v88 != 0;
          }

          *(_BYTE *)(a1 + 200) = v89;
          goto LABEL_346;
        case 8u:
          *(_BYTE *)(a1 + 204) |= 0x10u;
          uint64_t v90 = *((void *)this + 1);
          if (v90 >= *((void *)this + 2))
          {
            uint64_t v93 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v91 = v90 + 1;
            v92 = *(unsigned __int8 *)(*(void *)this + v90);
            *((void *)this + 1) = v91;
            uint64_t v93 = v92 != 0;
          }

          *(_BYTE *)(a1 + 201) = v93;
          goto LABEL_346;
        case 9u:
          *(_BYTE *)(a1 + 204) |= 0x20u;
          uint64_t v94 = *((void *)this + 1);
          if (v94 >= *((void *)this + 2))
          {
            uint64_t v97 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v95 = v94 + 1;
            uint64_t v96 = *(unsigned __int8 *)(*(void *)this + v94);
            *((void *)this + 1) = v95;
            uint64_t v97 = v96 != 0;
          }

          *(_BYTE *)(a1 + 202) = v97;
          goto LABEL_346;
        case 0xAu:
          __int128 v100 = (char *)operator new(0x78uLL);
          *(void *)__int128 v100 = &off_10189AE78;
          *((_DWORD *)v100 + 29) = 0;
          *(_OWORD *)(v100 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
          *(_OWORD *)(v100 + 24) = 0u;
          *(_OWORD *)(v100 + 40) = 0u;
          *(_OWORD *)(v100 + 56) = 0u;
          *((void *)v100 + 9) = 0LL;
          CFStringRef v101 = *(void *)(a1 + 176);
          *(void *)(a1 + 176) = v100;
          if (v101)
          {
            (*(void (**)(uint64_t))(*(void *)v101 + 8LL))(v101);
            __int128 v100 = *(char **)(a1 + 176);
          }

          if (!PB::Reader::placeMark(this, v228, v98, v99)
            || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v100 + 16LL))(v100, this) & 1) == 0)
          {
            return 0LL;
          }

          goto LABEL_214;
        case 0xBu:
          if ((_DWORD)v26 != 2)
          {
            v155 = *(char **)(a1 + 112);
            v154 = *(void *)(a1 + 120);
            if ((unint64_t)v155 >= v154)
            {
              v184 = (char *)*v225;
              uint64_t v185 = (v155 - (_BYTE *)*v225) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62) {
LABEL_358:
              }
                sub_100007008();
              unint64_t v187 = v154 - (void)v184;
              if (v187 >> 1 > v186) {
                v186 = v187 >> 1;
              }
              else {
                uint64_t v188 = v186;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_10000956C(v222, v188);
                v184 = *(char **)(a1 + 104);
                v155 = *(char **)(a1 + 112);
              }

              else
              {
                uint64_t v189 = 0LL;
              }

              __int16 v210 = &v189[4 * v185];
              *(_DWORD *)__int16 v210 = 0;
              char v147 = v210 + 4;
              while (v155 != v184)
              {
                unint64_t v211 = *((_DWORD *)v155 - 1);
                v155 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }

              *(void *)(a1 + 104) = v210;
              *(void *)(a1 + 112) = v147;
              *(void *)(a1 + 120) = &v189[4 * v188];
              if (v184) {
                operator delete(v184);
              }
            }

            else
            {
              *(_DWORD *)v155 = 0;
              char v147 = v155 + 4;
            }

            *(void *)(a1 + 112) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          BOOL v102 = *((void *)this + 1);
          double v103 = *((void *)this + 2);
          while (v102 < v103 && !*((_BYTE *)this + 24))
          {
            unsigned int v105 = *(char **)(a1 + 112);
            __int128 v104 = *(void *)(a1 + 120);
            if ((unint64_t)v105 >= v104)
            {
              uint64_t v107 = (char *)*v225;
              uint64_t v108 = (v105 - (_BYTE *)*v225) >> 2;
              uint64_t v109 = v108 + 1;
              uint64_t v110 = v104 - (void)v107;
              if (v110 >> 1 > v109) {
                uint64_t v109 = v110 >> 1;
              }
              else {
                uint64_t v111 = v109;
              }
              if (v111)
              {
                uint64_t v112 = (char *)sub_10000956C(v222, v111);
                uint64_t v107 = *(char **)(a1 + 104);
                unsigned int v105 = *(char **)(a1 + 112);
              }

              else
              {
                uint64_t v112 = 0LL;
              }

              uint64_t v113 = &v112[4 * v108];
              *(_DWORD *)uint64_t v113 = 0;
              uint64_t v106 = v113 + 4;
              while (v105 != v107)
              {
                uint64_t v114 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v113 - 1) = v114;
                v113 -= 4;
              }

              *(void *)(a1 + 104) = v113;
              *(void *)(a1 + 112) = v106;
              *(void *)(a1 + 120) = &v112[4 * v111];
              if (v107) {
                operator delete(v107);
              }
            }

            else
            {
              *(_DWORD *)unsigned int v105 = 0;
              uint64_t v106 = v105 + 4;
            }

            *(void *)(a1 + 112) = v106;
            uint64_t v115 = *((void *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v106 - 1) = *(_DWORD *)(*(void *)this + v115);
            double v103 = *((void *)this + 2);
            BOOL v102 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v102;
          }

          goto LABEL_214;
        case 0xCu:
          *(_BYTE *)(a1 + 204) |= 4u;
          uint64_t v116 = *((void *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v116);
          goto LABEL_344;
        case 0xDu:
          if ((_DWORD)v26 != 2)
          {
            __int128 v157 = *(char **)(a1 + 136);
            __int128 v156 = *(void *)(a1 + 144);
            if ((unint64_t)v157 >= v156)
            {
              v190 = (char *)*v226;
              int v191 = (v157 - (_BYTE *)*v226) >> 2;
              uint64_t v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62) {
LABEL_359:
              }
                sub_100007008();
              uint64_t v193 = v156 - (void)v190;
              if (v193 >> 1 > v192) {
                uint64_t v192 = v193 >> 1;
              }
              else {
                int v194 = v192;
              }
              if (v194)
              {
                v195 = (char *)sub_10000956C(v223, v194);
                v190 = *(char **)(a1 + 128);
                __int128 v157 = *(char **)(a1 + 136);
              }

              else
              {
                v195 = 0LL;
              }

              int v212 = &v195[4 * v191];
              *(_DWORD *)int v212 = 0;
              char v147 = v212 + 4;
              while (v157 != v190)
              {
                __int128 v213 = *((_DWORD *)v157 - 1);
                v157 -= 4;
                *((_DWORD *)v212 - 1) = v213;
                v212 -= 4;
              }

              *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v212;
              *(void *)(a1 + 136) = v147;
              *(void *)(a1 + 144) = &v195[4 * v194];
              if (v190) {
                operator delete(v190);
              }
            }

            else
            {
              *(_DWORD *)__int128 v157 = 0;
              char v147 = v157 + 4;
            }

            *(void *)(a1 + 136) = v147;
            goto LABEL_340;
          }

          if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v117 = *((void *)this + 1);
          uint64_t v118 = *((void *)this + 2);
          while (v117 < v118 && !*((_BYTE *)this + 24))
          {
            int v120 = *(char **)(a1 + 136);
            uint64_t v119 = *(void *)(a1 + 144);
            if ((unint64_t)v120 >= v119)
            {
              char v122 = (char *)*v226;
              uint64_t v123 = (v120 - (_BYTE *)*v226) >> 2;
              uint64_t v124 = v123 + 1;
              char v125 = v119 - (void)v122;
              if (v125 >> 1 > v124) {
                uint64_t v124 = v125 >> 1;
              }
              else {
                uint64_t v126 = v124;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_10000956C(v223, v126);
                char v122 = *(char **)(a1 + 128);
                int v120 = *(char **)(a1 + 136);
              }

              else
              {
                uint64_t v127 = 0LL;
              }

              uint64_t v128 = &v127[4 * v123];
              *(_DWORD *)uint64_t v128 = 0;
              __int128 v121 = v128 + 4;
              while (v120 != v122)
              {
                uint64_t v129 = *((_DWORD *)v120 - 1);
                v120 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }

              *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v128;
              *(void *)(a1 + 136) = v121;
              *(void *)(a1 + 144) = &v127[4 * v126];
              if (v122) {
                operator delete(v122);
              }
            }

            else
            {
              *(_DWORD *)int v120 = 0;
              __int128 v121 = v120 + 4;
            }

            *(void *)(a1 + 136) = v121;
            uint64_t v130 = *((void *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
              goto LABEL_213;
            }
            *(v121 - 1) = *(_DWORD *)(*(void *)this + v130);
            uint64_t v118 = *((void *)this + 2);
            uint64_t v117 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v117;
          }

          goto LABEL_214;
        case 0xEu:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v228, v26, a4) & 1) != 0) {
              return 0LL;
            }
            v131 = *((void *)this + 1);
            int v132 = *((void *)this + 2);
            while (v131 < v132 && !*((_BYTE *)this + 24))
            {
              int v134 = *(char **)(a1 + 64);
              v133 = *(void *)(a1 + 72);
              if ((unint64_t)v134 >= v133)
              {
                int v136 = (char *)*v227;
                v137 = (v134 - (_BYTE *)*v227) >> 2;
                int v138 = v137 + 1;
                __int16 v139 = v133 - (void)v136;
                if (v139 >> 1 > v138) {
                  int v138 = v139 >> 1;
                }
                else {
                  __int16 v140 = v138;
                }
                if (v140)
                {
                  __int16 v141 = (char *)sub_10000956C(v224, v140);
                  int v136 = *(char **)(a1 + 56);
                  int v134 = *(char **)(a1 + 64);
                }

                else
                {
                  __int16 v141 = 0LL;
                }

                __int16 v142 = &v141[4 * v137];
                *(_DWORD *)__int16 v142 = 0;
                v135 = v142 + 4;
                while (v134 != v136)
                {
                  unint64_t v143 = *((_DWORD *)v134 - 1);
                  v134 -= 4;
                  *((_DWORD *)v142 - 1) = v143;
                  v142 -= 4;
                }

                *(void *)(a1 + 56) = v142;
                *(void *)(a1 + 64) = v135;
                *(void *)(a1 + 72) = &v141[4 * v140];
                if (v136) {
                  operator delete(v136);
                }
              }

              else
              {
                *(_DWORD *)int v134 = 0;
                v135 = v134 + 4;
              }

              *(void *)(a1 + 64) = v135;
              __int16 v144 = *((void *)this + 1);
              if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)this + 2))
              {
LABEL_213:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v135 - 1) = *(_DWORD *)(*(void *)this + v144);
              int v132 = *((void *)this + 2);
              v131 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v131;
            }

  unint64_t v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "pressureQuality", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xBu);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

        if ((v12 & 7) != 4)
        {
          switch((v12 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              unint64_t v21 = *((void *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7LL || v21 + 8 > *((void *)this + 2)) {
                goto LABEL_34;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
              double v22 = *((void *)this + 1) + 8LL;
              goto LABEL_40;
            case 2u:
              double v24 = (void **)operator new(0x18uLL);
              v24[1] = 0LL;
              v24[2] = 0LL;
              void *v24 = 0LL;
              __int128 __p = 0LL;
              unint64_t v25 = *v8;
              *uint64_t v8 = v24;
              if (v25)
              {
                sub_10058A4FC((int)v8, v25);
                unint64_t v26 = (void **)__p;
                __int128 __p = 0LL;
                if (v26) {
                  sub_10058A4FC((int)&__p, v26);
                }
              }

              PB::Reader::read(this, *v8);
              goto LABEL_41;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              __int128 v27 = *((void *)this + 1);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v27);
                double v22 = *((void *)this + 1) + 4LL;
LABEL_40:
                *((void *)this + 1) = v22;
              }

              else
              {
LABEL_34:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_41;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              __int128 v28 = *((void *)this + 1);
              if (v28 >= *((void *)this + 2))
              {
                double v31 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                __int128 v29 = v28 + 1;
                double v30 = *(unsigned __int8 *)(*(void *)this + v28);
                *((void *)this + 1) = v29;
                double v31 = v30 != 0;
              }

              *(_BYTE *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v31;
              goto LABEL_41;
            default:
              uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
LABEL_41:
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
LABEL_37:
        *((void *)this + 1) += 8LL;
        goto LABEL_38;
      }

      if ((_DWORD)v21 == 1)
      {
        sub_1011191F8(v8);
        double v22 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v28, v23, v24)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 84));
  unint64_t v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 0x100) == 0) {
      goto LABEL_13;
    }
LABEL_23:
    PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 93));
    if ((*(_WORD *)(a1 + 96) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v27);
          goto LABEL_102;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v79 = *(char **)(a1 + 40);
            uint64_t v78 = *(void *)(a1 + 48);
            if ((unint64_t)v79 >= v78)
            {
              uint64_t v87 = (char *)*v12;
              uint64_t v88 = (v79 - (_BYTE *)*v12) >> 2;
              double v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 62) {
LABEL_170:
              }
                sub_100007008();
              uint64_t v90 = v78 - (void)v87;
              if (v90 >> 1 > v89) {
                double v89 = v90 >> 1;
              }
              else {
                uint64_t v91 = v89;
              }
              if (v91)
              {
                v92 = (char *)sub_10000956C(v13, v91);
                uint64_t v87 = *(char **)(a1 + 32);
                uint64_t v79 = *(char **)(a1 + 40);
              }

              else
              {
                v92 = 0LL;
              }

              v99 = &v92[4 * v88];
              *(_DWORD *)v99 = 0;
              uint64_t v80 = v99 + 4;
              while (v79 != v87)
              {
                __int128 v100 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }

              *(void *)(a1 + 32) = v99;
              *(void *)(a1 + 40) = v80;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v92[4 * v91];
              if (v87) {
                operator delete(v87);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v79 = 0;
              uint64_t v80 = v79 + 4;
            }

            *(void *)(a1 + 40) = v80;
            goto LABEL_154;
          }

          if ((PB::Reader::placeMark(this, v106, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 40);
            double v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 2;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                double v35 = v36 >> 1;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_10000956C(v13, v37);
                BOOL v33 = *(char **)(a1 + 32);
                double v31 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[4 * v34];
              *(_DWORD *)__int16 v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                double v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }

              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(_DWORD *)double v31 = 0;
              uint64_t v32 = v31 + 4;
            }

            *(void *)(a1 + 40) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_118;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_119;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v106, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v42 = *((void *)this + 1);
            __int128 v43 = *((void *)this + 2);
            while (v42 < v43 && !*((_BYTE *)this + 24))
            {
              double v45 = *(char **)(a1 + 16);
              double v44 = *(void *)(a1 + 24);
              if ((unint64_t)v45 >= v44)
              {
                __int128 v47 = (char *)*v10;
                __int128 v48 = (v45 - (_BYTE *)*v10) >> 2;
                __int128 v49 = v48 + 1;
                __int128 v50 = v44 - (void)v47;
                if (v50 >> 1 > v49) {
                  __int128 v49 = v50 >> 1;
                }
                else {
                  __int128 v51 = v49;
                }
                if (v51)
                {
                  __int128 v52 = (char *)sub_10000956C(v11, v51);
                  __int128 v47 = *(char **)(a1 + 8);
                  double v45 = *(char **)(a1 + 16);
                }

                else
                {
                  __int128 v52 = 0LL;
                }

                __int128 v53 = &v52[4 * v48];
                *(_DWORD *)__int128 v53 = 0;
                __int128 v46 = v53 + 4;
                while (v45 != v47)
                {
                  __int128 v54 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *((_DWORD *)v53 - 1) = v54;
                  v53 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v53;
                *(void *)(a1 + 16) = v46;
                *(void *)(a1 + 24) = &v52[4 * v51];
                if (v47) {
                  operator delete(v47);
                }
              }

              else
              {
                *(_DWORD *)double v45 = 0;
                __int128 v46 = v45 + 4;
              }

              *(void *)(a1 + 16) = v46;
              __int128 v55 = *((void *)this + 1);
              if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2))
              {
LABEL_118:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
              __int128 v43 = *((void *)this + 2);
              __int128 v42 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v42;
            }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 7u);
  uint64_t v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
LABEL_37:
        *((void *)this + 1) += 8LL;
        goto LABEL_38;
      }

      if ((_DWORD)v21 == 1)
      {
        sub_101143160(v8);
        double v22 = *(void *)(*(void *)(a1 + 24) - 8LL);
        if (!PB::Reader::placeMark(this, v28, v23, v24)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          __int128 v27 = *(void *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5LL && v25 + 10 <= v26)
          {
            __int128 v28 = 0;
            __int128 v29 = 0;
            double v30 = 0LL;
            do
            {
              double v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              uint64_t v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_83;
              }
              v28 += 7;
              unint64_t v25 = v31;
              double v18 = v29++ > 8;
            }

            while (!v18);
LABEL_67:
            LODWORD(v30) = 0;
            goto LABEL_83;
          }

          __int128 v52 = 0;
          __int128 v53 = 0;
          double v30 = 0LL;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              __int128 v54 = v25 + 1;
              __int128 v55 = *(_BYTE *)(v27 + v25);
              *((void *)this + 1) = v54;
              v30 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                unint64_t v25 = v54;
                double v18 = v53++ > 8;
                if (v18) {
                  goto LABEL_67;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v30) = 0;
              }
            }

            break;
          }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_101143EDC(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
LABEL_37:
        *((void *)this + 1) += 8LL;
        goto LABEL_38;
      }

      if ((_DWORD)v21 == 1)
      {
        sub_101144604(v8);
        double v22 = *(void *)(*(void *)(a1 + 24) - 8LL);
        if (!PB::Reader::placeMark(this, v28, v23, v24)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 == 2)
        {
          if ((PB::Reader::placeMark(this, v66, v24, a4) & 1) != 0) {
            return 0LL;
          }
          int v34 = *((void *)this + 1);
          double v35 = *((void *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            double v37 = *(char **)(a1 + 16);
            std::string::size_type v36 = *(void *)(a1 + 24);
            if ((unint64_t)v37 >= v36)
            {
              __int16 v39 = (char *)*v10;
              double v40 = (v37 - (_BYTE *)*v10) >> 2;
              __int128 v41 = v40 + 1;
              __int128 v42 = v36 - (void)v39;
              if (v42 >> 1 > v41) {
                __int128 v41 = v42 >> 1;
              }
              else {
                __int128 v43 = v41;
              }
              if (v43)
              {
                double v44 = (char *)sub_10000956C(v11, v43);
                __int16 v39 = *(char **)(a1 + 8);
                double v37 = *(char **)(a1 + 16);
              }

              else
              {
                double v44 = 0LL;
              }

              double v45 = &v44[4 * v40];
              *(_DWORD *)double v45 = 0;
              unint64_t v38 = v45 + 4;
              while (v37 != v39)
              {
                __int128 v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v45;
              *(void *)(a1 + 16) = v38;
              *(void *)(a1 + 24) = &v44[4 * v43];
              if (v39) {
                operator delete(v39);
              }
            }

            else
            {
              *(_DWORD *)double v37 = 0;
              unint64_t v38 = v37 + 4;
            }

            *(void *)(a1 + 16) = v38;
            __int128 v47 = *((void *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }

            *(v38 - 1) = *(_DWORD *)(*(void *)this + v47);
            double v35 = *((void *)this + 2);
            int v34 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v34;
          }

          PB::Reader::recallMark(this, v66);
        }

        else
        {
          __int128 v53 = *(char **)(a1 + 16);
          __int128 v52 = *(void *)(a1 + 24);
          if ((unint64_t)v53 >= v52)
          {
            __int128 v55 = (char *)*v10;
            __int128 v56 = (v53 - (_BYTE *)*v10) >> 2;
            __int128 v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62) {
LABEL_100:
            }
              sub_100007008();
            uint64_t v58 = v52 - (void)v55;
            if (v58 >> 1 > v57) {
              __int128 v57 = v58 >> 1;
            }
            else {
              uint64_t v59 = v57;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_10000956C(v11, v59);
              __int128 v55 = *(char **)(a1 + 8);
              __int128 v53 = *(char **)(a1 + 16);
            }

            else
            {
              uint64_t v60 = 0LL;
            }

            double v61 = &v60[4 * v56];
            *(_DWORD *)double v61 = 0;
            __int128 v54 = v61 + 4;
            while (v53 != v55)
            {
              double v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v61;
            *(void *)(a1 + 16) = v54;
            *(void *)(a1 + 24) = &v60[4 * v59];
            if (v55) {
              operator delete(v55);
            }
          }

          else
          {
            *(_DWORD *)__int128 v53 = 0;
            __int128 v54 = v53 + 4;
          }

          *(void *)(a1 + 16) = v54;
          uint64_t v63 = *((void *)this + 1);
          if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)this + 2))
          {
            *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
            *((void *)this + 1) += 4LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }
        }
      }

      else if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        __int128 v27 = *((void *)this + 2);
        __int128 v28 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v27)
        {
          __int128 v48 = 0;
          __int128 v49 = 0;
          double v31 = 0LL;
          if (v27 <= v26) {
            __int128 v27 = *((void *)this + 1);
          }
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }

            __int128 v50 = v26 + 1;
            __int128 v51 = *(_BYTE *)(v28 + v26);
            *((void *)this + 1) = v50;
            v31 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            unint64_t v26 = v50;
            double v18 = v49++ > 8;
            if (v18)
            {
LABEL_63:
              LODWORD(v31) = 0;
              goto LABEL_77;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
        }

        else
        {
          __int128 v29 = 0;
          double v30 = 0;
          double v31 = 0LL;
          while (1)
          {
            uint64_t v32 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            BOOL v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v26 = v32;
            double v18 = v30++ > 8;
            if (v18) {
              goto LABEL_63;
            }
          }
        }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
LABEL_37:
        *((void *)this + 1) += 8LL;
        goto LABEL_38;
      }

      if ((_DWORD)v21 == 1)
      {
        sub_101143EDC(v8);
        double v22 = *(void *)(*(void *)(a1 + 24) - 8LL);
        if (!PB::Reader::placeMark(this, v28, v23, v24)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 != 2)
        {
          uint64_t v72 = *(char **)(a1 + 16);
          uint64_t v71 = *(void *)(a1 + 24);
          if ((unint64_t)v72 >= v71)
          {
            uint64_t v79 = (char *)*v12;
            uint64_t v80 = (v72 - (_BYTE *)*v12) >> 2;
            uint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62) {
LABEL_144:
            }
              sub_100007008();
            uint64_t v82 = v71 - (void)v79;
            if (v82 >> 1 > v81) {
              uint64_t v81 = v82 >> 1;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83)
            {
              uint64_t v84 = (char *)sub_10000956C(v13, v83);
              uint64_t v79 = *(char **)(a1 + 8);
              uint64_t v72 = *(char **)(a1 + 16);
            }

            else
            {
              uint64_t v84 = 0LL;
            }

            uint64_t v87 = &v84[4 * v80];
            *(_DWORD *)uint64_t v87 = 0;
            uint64_t v70 = v87 + 4;
            while (v72 != v79)
            {
              uint64_t v88 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v87 - 1) = v88;
              v87 -= 4;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v87;
            *(void *)(a1 + 16) = v70;
            *(void *)(a1 + 24) = &v84[4 * v83];
            if (v79) {
              operator delete(v79);
            }
          }

          else
          {
            *(_DWORD *)uint64_t v72 = 0;
            uint64_t v70 = v72 + 4;
          }

          *(void *)(a1 + 16) = v70;
LABEL_129:
          double v89 = *((void *)this + 1);
          if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((void *)this + 2))
          {
            *(v70 - 1) = *(_DWORD *)(*(void *)this + v89);
            *((void *)this + 1) += 4LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_133;
        }

        if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0) {
          return 0LL;
        }
        __int128 v50 = *((void *)this + 1);
        __int128 v51 = *((void *)this + 2);
        while (v50 < v51 && !*((_BYTE *)this + 24))
        {
          __int128 v53 = *(char **)(a1 + 16);
          __int128 v52 = *(void *)(a1 + 24);
          if ((unint64_t)v53 >= v52)
          {
            __int128 v55 = (char *)*v12;
            __int128 v56 = (v53 - (_BYTE *)*v12) >> 2;
            __int128 v57 = v56 + 1;
            uint64_t v58 = v52 - (void)v55;
            if (v58 >> 1 > v57) {
              __int128 v57 = v58 >> 1;
            }
            else {
              uint64_t v59 = v57;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_10000956C(v13, v59);
              __int128 v55 = *(char **)(a1 + 8);
              __int128 v53 = *(char **)(a1 + 16);
            }

            else
            {
              uint64_t v60 = 0LL;
            }

            double v61 = &v60[4 * v56];
            *(_DWORD *)double v61 = 0;
            __int128 v54 = v61 + 4;
            while (v53 != v55)
            {
              double v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v61;
            *(void *)(a1 + 16) = v54;
            *(void *)(a1 + 24) = &v60[4 * v59];
            if (v55) {
              operator delete(v55);
            }
          }

          else
          {
            *(_DWORD *)__int128 v53 = 0;
            __int128 v54 = v53 + 4;
          }

          *(void *)(a1 + 16) = v54;
          uint64_t v63 = *((void *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
          __int128 v51 = *((void *)this + 2);
          __int128 v50 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v50;
        }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "totalValidDuration", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "value", *(_DWORD *)(a1 + 48));
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_WORD *)(a2 + 88) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

    if ((v12 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v12 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 152) |= 0x80u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7LL || v21 + 8 > *((void *)this + 2)) {
          goto LABEL_69;
        }
        *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v21);
        goto LABEL_251;
      case 2u:
        *(_DWORD *)(a1 + 152) |= 0x40u;
        unint64_t v23 = *((void *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7LL || v23 + 8 > *((void *)this + 2)) {
          goto LABEL_69;
        }
        *(void *)(a1 + 80) = *(void *)(*(void *)this + v23);
        goto LABEL_251;
      case 3u:
        *(_DWORD *)(a1 + 152) |= 0x10u;
        double v24 = *((void *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7LL || v24 + 8 > *((void *)this + 2)) {
          goto LABEL_69;
        }
        *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v24);
        goto LABEL_251;
      case 4u:
        *(_DWORD *)(a1 + 152) |= 0x100u;
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        __int128 v27 = *(void *)this;
        if (v25 <= 0xFFFFFFFFFFFFFFF5LL && v25 + 10 <= v26)
        {
          __int128 v28 = 0;
          __int128 v29 = 0;
          double v30 = 0LL;
          do
          {
            double v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            uint64_t v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              goto LABEL_255;
            }
            v28 += 7;
            unint64_t v25 = v31;
            __int128 v15 = v29++ > 8;
          }

          while (!v15);
LABEL_161:
          LODWORD(v30) = 0;
          goto LABEL_255;
        }

        v150 = 0;
        v151 = 0;
        double v30 = 0LL;
        if (v26 <= v25) {
          unint64_t v26 = *((void *)this + 1);
        }
        while (2)
        {
          if (v26 == v25)
          {
            LODWORD(v30) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v152 = v25 + 1;
            v153 = *(_BYTE *)(v27 + v25);
            *((void *)this + 1) = v152;
            v30 |= (unint64_t)(v153 & 0x7F) << v150;
            if (v153 < 0)
            {
              v150 += 7;
              unint64_t v25 = v152;
              __int128 v15 = v151++ > 8;
              if (v15) {
                goto LABEL_161;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v30) = 0;
            }
          }

          break;
        }

  unint64_t v11 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 56) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "rawPace", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "stepCadenceDeltaDistance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 70), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0xBu);
  }

  PB::TextFormatter::format(this, "odometerSmoothMeanPace", *(double *)(a1 + 32));
  unint64_t v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  uint64_t v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  uint64_t result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "peakiness", *(double *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "thetaRollFaceDeg", *(double *)(a1 + 80));
    if ((*(_WORD *)(a1 + 96) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  }

  uint64_t v10 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "runningFormStrideLength", *(double *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  unint64_t v7 = *(_BYTE *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 52) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "xCorr", *(float *)(a1 + 48));
    if ((*(_WORD *)(a1 + 56) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  }

  uint64_t v10 = *(_DWORD *)(a2 + 60);
  v4 |= 0x800u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 60) = v10;
  uint64_t v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  __int128 v15 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) |= 0x200u;
  *(_DWORD *)(a1 + 100) = v15;
  unint64_t v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 2) == 0)
  {
LABEL_11:
    if ((v9 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "sensorTimeBeforeAlignment", *(double *)(a1 + 40));
  uint64_t v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          unint64_t v25 = operator new(0xA0uLL);
          __int128 v28 = sub_1010F2D60((uint64_t)v25);
          __int128 v29 = *(void *)(a1 + 80);
          *(void *)(a1 + 80) = v25;
          if (v29)
          {
            (*(void (**)(uint64_t, double))(*(void *)v29 + 8LL))(v29, v28);
            unint64_t v25 = *(void **)(a1 + 80);
          }

          if (PB::Reader::placeMark(this, v91, v26, v27)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v25 + 16LL))(v25, this) & 1) != 0)
          {
            goto LABEL_27;
          }

          return 0LL;
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v91, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  double v37 = v38 >> 1;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_10000956C(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[4 * v36];
                *(_DWORD *)__int128 v41 = 0;
                int v34 = v41 + 4;
                while (v33 != v35)
                {
                  __int128 v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[4 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(_DWORD *)BOOL v33 = 0;
                int v34 = v33 + 4;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v30;
            }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  uint64_t v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "listenerPitch", *(float *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v25);
          goto LABEL_81;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_106;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x80u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_106;
        case 4u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_106;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v67, v24, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v29 = *((void *)this + 1);
            double v30 = *((void *)this + 2);
            while (v29 < v30 && !*((_BYTE *)this + 24))
            {
              uint64_t v32 = *(char **)(a1 + 16);
              double v31 = *(void *)(a1 + 24);
              if ((unint64_t)v32 >= v31)
              {
                int v34 = (char *)*v10;
                double v35 = (v32 - (_BYTE *)*v10) >> 2;
                std::string::size_type v36 = v35 + 1;
                double v37 = v31 - (void)v34;
                if (v37 >> 1 > v36) {
                  std::string::size_type v36 = v37 >> 1;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  __int16 v39 = (char *)sub_10000956C(v11, v38);
                  int v34 = *(char **)(a1 + 8);
                  uint64_t v32 = *(char **)(a1 + 16);
                }

                else
                {
                  __int16 v39 = 0LL;
                }

                double v40 = &v39[4 * v35];
                *(_DWORD *)double v40 = 0;
                BOOL v33 = v40 + 4;
                while (v32 != v34)
                {
                  __int128 v41 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v40;
                *(void *)(a1 + 16) = v33;
                *(void *)(a1 + 24) = &v39[4 * v38];
                if (v34) {
                  operator delete(v34);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v32 = 0;
                BOOL v33 = v32 + 4;
              }

              *(void *)(a1 + 16) = v33;
              __int128 v42 = *((void *)this + 1);
              if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
              double v30 = *((void *)this + 2);
              __int128 v29 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v29;
            }

            PB::Reader::recallMark(this, v67);
          }

          else
          {
            __int128 v55 = *(char **)(a1 + 16);
            __int128 v54 = *(void *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              __int128 v57 = (char *)*v10;
              uint64_t v58 = (v55 - (_BYTE *)*v10) >> 2;
              uint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62) {
LABEL_116:
              }
                sub_100007008();
              uint64_t v60 = v54 - (void)v57;
              if (v60 >> 1 > v59) {
                uint64_t v59 = v60 >> 1;
              }
              else {
                double v61 = v59;
              }
              if (v61)
              {
                double v62 = (char *)sub_10000956C(v11, v61);
                __int128 v57 = *(char **)(a1 + 8);
                __int128 v55 = *(char **)(a1 + 16);
              }

              else
              {
                double v62 = 0LL;
              }

              uint64_t v63 = &v62[4 * v58];
              *(_DWORD *)uint64_t v63 = 0;
              __int128 v56 = v63 + 4;
              while (v55 != v57)
              {
                double v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v63;
              *(void *)(a1 + 16) = v56;
              *(void *)(a1 + 24) = &v62[4 * v61];
              if (v57) {
                operator delete(v57);
              }
            }

            else
            {
              *(_DWORD *)__int128 v55 = 0;
              __int128 v56 = v55 + 4;
            }

            *(void *)(a1 + 16) = v56;
            uint64_t v65 = *((void *)this + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((void *)this + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(void *)this + v65);
LABEL_106:
              __int128 v53 = *((void *)this + 1) + 4LL;
LABEL_107:
              *((void *)this + 1) = v53;
            }

            else
            {
LABEL_104:
              *((_BYTE *)this + 24) = 1;
            }
          }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((v12 >> 3) == 2)
      {
        unint64_t v23 = (void **)operator new(0x18uLL);
        v23[1] = 0LL;
        v23[2] = 0LL;
        char *v23 = 0LL;
        __int128 __p = 0LL;
        double v24 = *v8;
        *uint64_t v8 = v23;
        if (v24)
        {
          sub_10058A4FC((int)v8, v24);
          unint64_t v25 = (void **)__p;
          __int128 __p = 0LL;
          if (v25) {
            sub_10058A4FC((int)&__p, v25);
          }
        }

        PB::Reader::read(this, *v8);
      }

      else if ((_DWORD)v21 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        double v22 = *((void *)this + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7LL && v22 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v22);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      unint64_t v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v16 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 340) |= 0x40u;
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          __int128 v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5LL && v26 + 10 <= v27)
          {
            __int128 v29 = 0;
            double v30 = 0;
            double v31 = 0LL;
            do
            {
              uint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              BOOL v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_471;
              }
              v29 += 7;
              unint64_t v26 = v32;
              unint64_t v19 = v30++ > 8;
            }

            while (!v19);
LABEL_347:
            LODWORD(v31) = 0;
            goto LABEL_471;
          }

          unint64_t v209 = 0;
          __int16 v210 = 0;
          double v31 = 0LL;
          if (v27 <= v26) {
            __int128 v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v211 = v26 + 1;
              int v212 = *(_BYTE *)(v28 + v26);
              *((void *)this + 1) = v211;
              v31 |= (unint64_t)(v212 & 0x7F) << v209;
              if (v212 < 0)
              {
                v209 += 7;
                unint64_t v26 = v211;
                unint64_t v19 = v210++ > 8;
                if (v19) {
                  goto LABEL_347;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v31) = 0;
              }
            }

            break;
          }

  __int128 v15 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 112) |= 0x20u;
  *(void *)(a1 + 72) = v15;
  uint64_t v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 112) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_101;
        case 2u:
          *(_WORD *)(a1 + 112) |= 0x200u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v26);
          goto LABEL_101;
        case 3u:
          *(_WORD *)(a1 + 112) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v27);
          goto LABEL_101;
        case 4u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v62, v24, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v28 = *((void *)this + 1);
            __int128 v29 = *((void *)this + 2);
            while (v28 < v29 && !*((_BYTE *)this + 24))
            {
              double v31 = *(char **)(a1 + 16);
              double v30 = *(void *)(a1 + 24);
              if ((unint64_t)v31 >= v30)
              {
                BOOL v33 = (char *)*v10;
                int v34 = (v31 - (_BYTE *)*v10) >> 3;
                double v35 = v34 + 1;
                std::string::size_type v36 = v30 - (void)v33;
                if (v36 >> 2 > v35) {
                  double v35 = v36 >> 2;
                }
                else {
                  double v37 = v35;
                }
                if (v37)
                {
                  unint64_t v38 = (char *)sub_1000071BC(v11, v37);
                  BOOL v33 = *(char **)(a1 + 8);
                  double v31 = *(char **)(a1 + 16);
                }

                else
                {
                  unint64_t v38 = 0LL;
                }

                __int16 v39 = &v38[8 * v34];
                *(void *)__int16 v39 = 0LL;
                uint64_t v32 = v39 + 8;
                while (v31 != v33)
                {
                  double v40 = *((void *)v31 - 1);
                  v31 -= 8;
                  *((void *)v39 - 1) = v40;
                  v39 -= 8;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v39;
                *(void *)(a1 + 16) = v32;
                *(void *)(a1 + 24) = &v38[8 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }

              else
              {
                *(void *)double v31 = 0LL;
                uint64_t v32 = v31 + 8;
              }

              *(void *)(a1 + 16) = v32;
              __int128 v41 = *((void *)this + 1);
              if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v32 - 1) = *(void *)(*(void *)this + v41);
              __int128 v29 = *((void *)this + 2);
              __int128 v28 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v28;
            }

            PB::Reader::recallMark(this, v62);
          }

          else
          {
            __int128 v50 = *(char **)(a1 + 16);
            __int128 v49 = *(void *)(a1 + 24);
            if ((unint64_t)v50 >= v49)
            {
              __int128 v52 = (char *)*v10;
              __int128 v53 = (v50 - (_BYTE *)*v10) >> 3;
              __int128 v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 61) {
LABEL_110:
              }
                sub_100007008();
              __int128 v55 = v49 - (void)v52;
              if (v55 >> 2 > v54) {
                __int128 v54 = v55 >> 2;
              }
              else {
                __int128 v56 = v54;
              }
              if (v56)
              {
                __int128 v57 = (char *)sub_1000071BC(v11, v56);
                __int128 v52 = *(char **)(a1 + 8);
                __int128 v50 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v57 = 0LL;
              }

              uint64_t v58 = &v57[8 * v53];
              *(void *)uint64_t v58 = 0LL;
              __int128 v51 = v58 + 8;
              while (v50 != v52)
              {
                uint64_t v59 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v58 - 1) = v59;
                v58 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v58;
              *(void *)(a1 + 16) = v51;
              *(void *)(a1 + 24) = &v57[8 * v56];
              if (v52) {
                operator delete(v52);
              }
            }

            else
            {
              *(void *)__int128 v50 = 0LL;
              __int128 v51 = v50 + 8;
            }

            *(void *)(a1 + 16) = v51;
            uint64_t v60 = *((void *)this + 1);
            if (v60 <= 0xFFFFFFFFFFFFFFF7LL && v60 + 8 <= *((void *)this + 2))
            {
              *(v51 - 1) = *(void *)(*(void *)this + v60);
LABEL_101:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_99:
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  uint64_t v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 16);
            double v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 3;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 2 > v50) {
                __int128 v50 = v51 >> 2;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_1000071BC(v13, v52);
                __int128 v48 = *(char **)(a1 + 8);
                __int128 v46 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[8 * v49];
              *(void *)__int128 v54 = 0LL;
              __int128 v47 = v54 + 8;
              while (v46 != v48)
              {
                __int128 v55 = *((void *)v46 - 1);
                v46 -= 8;
                *((void *)v54 - 1) = v55;
                v54 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(void *)__int128 v46 = 0LL;
              __int128 v47 = v46 + 8;
            }

            *(void *)(a1 + 16) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFF7LL || v56 + 8 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v47 - 1) = *(void *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_83;
        }

        double v61 = *(char **)(a1 + 16);
        uint64_t v60 = *(void *)(a1 + 24);
        if ((unint64_t)v61 >= v60)
        {
          int64_t v68 = (char *)*v12;
          uint64_t v69 = (v61 - (_BYTE *)*v12) >> 3;
          uint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61) {
LABEL_128:
          }
            sub_100007008();
          uint64_t v71 = v60 - (void)v68;
          if (v71 >> 2 > v70) {
            uint64_t v70 = v71 >> 2;
          }
          else {
            uint64_t v72 = v70;
          }
          if (v72)
          {
            uint64_t v73 = (char *)sub_1000071BC(v13, v72);
            int64_t v68 = *(char **)(a1 + 8);
            double v61 = *(char **)(a1 + 16);
          }

          else
          {
            uint64_t v73 = 0LL;
          }

          uint64_t v76 = &v73[8 * v69];
          *(void *)uint64_t v76 = 0LL;
          uint64_t v59 = v76 + 8;
          while (v61 != v68)
          {
            uint64_t v77 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v76 - 1) = v77;
            v76 -= 8;
          }

          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v76;
          *(void *)(a1 + 16) = v59;
          *(void *)(a1 + 24) = &v73[8 * v72];
          if (v68) {
            operator delete(v68);
          }
        }

        else
        {
          *(void *)double v61 = 0LL;
          uint64_t v59 = v61 + 8;
        }

        *(void *)(a1 + 16) = v59;
LABEL_114:
        uint64_t v78 = *((void *)this + 1);
        if (v78 > 0xFFFFFFFFFFFFFFF7LL || v78 + 8 > *((void *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }

        *(v59 - 1) = *(void *)(*(void *)this + v78);
        goto LABEL_118;
      }

      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        __int128 v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
LABEL_118:
        *((void *)this + 1) += 8LL;
        goto LABEL_119;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_119:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
        return 0LL;
      }
      __int128 v29 = *((void *)this + 1);
      double v30 = *((void *)this + 2);
      while (v29 < v30 && !*((_BYTE *)this + 24))
      {
        uint64_t v32 = *(char **)(a1 + 40);
        double v31 = *(void *)(a1 + 48);
        if ((unint64_t)v32 >= v31)
        {
          int v34 = (char *)*v10;
          double v35 = (v32 - (_BYTE *)*v10) >> 3;
          std::string::size_type v36 = v35 + 1;
          double v37 = v31 - (void)v34;
          if (v37 >> 2 > v36) {
            std::string::size_type v36 = v37 >> 2;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            __int16 v39 = (char *)sub_1000071BC(v11, v38);
            int v34 = *(char **)(a1 + 32);
            uint64_t v32 = *(char **)(a1 + 40);
          }

          else
          {
            __int16 v39 = 0LL;
          }

          double v40 = &v39[8 * v35];
          *(void *)double v40 = 0LL;
          BOOL v33 = v40 + 8;
          while (v32 != v34)
          {
            __int128 v41 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }

          *(void *)(a1 + 32) = v40;
          *(void *)(a1 + 40) = v33;
          *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }

        else
        {
          *(void *)uint64_t v32 = 0LL;
          BOOL v33 = v32 + 8;
        }

        *(void *)(a1 + 40) = v33;
        __int128 v42 = *((void *)this + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7LL || v42 + 8 > *((void *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }

        *(v33 - 1) = *(void *)(*(void *)this + v42);
        double v30 = *((void *)this + 2);
        __int128 v29 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v29;
      }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "hasStrideCal", *(_BYTE *)(a1 + 85));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  }

  uint64_t result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 52) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "looseCoveredBagObstructed", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  unint64_t v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_12:
  if ((v9 & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_WORD *)(a1 + 76) |= 2u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
LABEL_31:
          __int128 v27 = *((void *)this + 1) + 8LL;
          goto LABEL_130;
        case 3u:
          *(_WORD *)(a1 + 76) |= 4u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_129;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          __int128 v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_129;
        case 5u:
          *(_WORD *)(a1 + 76) |= 8u;
          double v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_129;
        case 6u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v85, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v31 = *((void *)this + 1);
            uint64_t v32 = *((void *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              int v34 = *(char **)(a1 + 16);
              BOOL v33 = *(void *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                std::string::size_type v36 = (char *)*v10;
                double v37 = (v34 - (_BYTE *)*v10) >> 2;
                unint64_t v38 = v37 + 1;
                __int16 v39 = v33 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                else {
                  double v40 = v38;
                }
                if (v40)
                {
                  __int128 v41 = (char *)sub_10000956C(v11, v40);
                  std::string::size_type v36 = *(char **)(a1 + 8);
                  int v34 = *(char **)(a1 + 16);
                }

                else
                {
                  __int128 v41 = 0LL;
                }

                __int128 v42 = &v41[4 * v37];
                *(_DWORD *)__int128 v42 = 0;
                double v35 = v42 + 4;
                while (v34 != v36)
                {
                  __int128 v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v42;
                *(void *)(a1 + 16) = v35;
                *(void *)(a1 + 24) = &v41[4 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }

              else
              {
                *(_DWORD *)int v34 = 0;
                double v35 = v34 + 4;
              }

              *(void *)(a1 + 16) = v35;
              double v44 = *((void *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v35 - 1) = *(_DWORD *)(*(void *)this + v44);
              uint64_t v32 = *((void *)this + 2);
              double v31 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v31;
            }

            PB::Reader::recallMark(this, v85);
          }

          else
          {
            double v64 = *(char **)(a1 + 16);
            uint64_t v63 = *(void *)(a1 + 24);
            if ((unint64_t)v64 >= v63)
            {
              uint64_t v74 = (char *)*v10;
              uint64_t v75 = (v64 - (_BYTE *)*v10) >> 2;
              uint64_t v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62) {
LABEL_141:
              }
                sub_100007008();
              uint64_t v77 = v63 - (void)v74;
              if (v77 >> 1 > v76) {
                uint64_t v76 = v77 >> 1;
              }
              else {
                uint64_t v78 = v76;
              }
              if (v78)
              {
                uint64_t v79 = (char *)sub_10000956C(v11, v78);
                uint64_t v74 = *(char **)(a1 + 8);
                double v64 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v79 = 0LL;
              }

              uint64_t v80 = &v79[4 * v75];
              *(_DWORD *)uint64_t v80 = 0;
              uint64_t v65 = v80 + 4;
              while (v64 != v74)
              {
                uint64_t v81 = *((_DWORD *)v64 - 1);
                v64 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v80;
              *(void *)(a1 + 16) = v65;
              *(void *)(a1 + 24) = &v79[4 * v78];
              if (v74) {
                operator delete(v74);
              }
            }

            else
            {
              *(_DWORD *)double v64 = 0;
              uint64_t v65 = v64 + 4;
            }

            *(void *)(a1 + 16) = v65;
            uint64_t v82 = *((void *)this + 1);
            if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *((void *)this + 2))
            {
              *(v65 - 1) = *(_DWORD *)(*(void *)this + v82);
LABEL_129:
              __int128 v27 = *((void *)this + 1) + 4LL;
LABEL_130:
              *((void *)this + 1) = v27;
            }

            else
            {
LABEL_127:
              *((_BYTE *)this + 24) = 1;
            }
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 100) |= 0x10u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*(void *)this + v27);
          goto LABEL_122;
        case 2u:
          *(_BYTE *)(a1 + 100) |= 4u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v28);
          goto LABEL_122;
        case 3u:
          *(_BYTE *)(a1 + 100) |= 8u;
          __int128 v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7LL || v29 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v29);
          goto LABEL_122;
        case 4u:
          *(_BYTE *)(a1 + 100) |= 1u;
          double v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v30);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 100) |= 2u;
          double v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFF7LL || v31 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v31);
          goto LABEL_122;
        case 6u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v87, v26, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v32 = *((void *)this + 1);
            BOOL v33 = *((void *)this + 2);
            while (v32 < v33 && !*((_BYTE *)this + 24))
            {
              double v35 = *(char **)(a1 + 40);
              int v34 = *(void *)(a1 + 48);
              if ((unint64_t)v35 >= v34)
              {
                double v37 = (char *)*v12;
                unint64_t v38 = (v35 - (_BYTE *)*v12) >> 3;
                __int16 v39 = v38 + 1;
                double v40 = v34 - (void)v37;
                if (v40 >> 2 > v39) {
                  __int16 v39 = v40 >> 2;
                }
                else {
                  __int128 v41 = v39;
                }
                if (v41)
                {
                  __int128 v42 = (char *)sub_1000071BC(v13, v41);
                  double v37 = *(char **)(a1 + 32);
                  double v35 = *(char **)(a1 + 40);
                }

                else
                {
                  __int128 v42 = 0LL;
                }

                __int128 v43 = &v42[8 * v38];
                *(void *)__int128 v43 = 0LL;
                std::string::size_type v36 = v43 + 8;
                while (v35 != v37)
                {
                  double v44 = *((void *)v35 - 1);
                  v35 -= 8;
                  *((void *)v43 - 1) = v44;
                  v43 -= 8;
                }

                *(void *)(a1 + 32) = v43;
                *(void *)(a1 + 40) = v36;
                *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v42[8 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }

              else
              {
                *(void *)double v35 = 0LL;
                std::string::size_type v36 = v35 + 8;
              }

              *(void *)(a1 + 40) = v36;
              double v45 = *((void *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7LL || v45 + 8 > *((void *)this + 2)) {
                goto LABEL_95;
              }
              *(v36 - 1) = *(void *)(*(void *)this + v45);
              BOOL v33 = *((void *)this + 2);
              uint64_t v32 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v32;
            }

            goto LABEL_96;
          }

          double v62 = *(char **)(a1 + 40);
          double v61 = *(void *)(a1 + 48);
          if ((unint64_t)v62 >= v61)
          {
            int64_t v67 = (char *)*v12;
            int64_t v68 = (v62 - (_BYTE *)*v12) >> 3;
            uint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61) {
LABEL_143:
            }
              sub_100007008();
            uint64_t v70 = v61 - (void)v67;
            if (v70 >> 2 > v69) {
              uint64_t v69 = v70 >> 2;
            }
            else {
              uint64_t v71 = v69;
            }
            if (v71)
            {
              uint64_t v72 = (char *)sub_1000071BC(v13, v71);
              int64_t v67 = *(char **)(a1 + 32);
              double v62 = *(char **)(a1 + 40);
            }

            else
            {
              uint64_t v72 = 0LL;
            }

            uint64_t v79 = &v72[8 * v68];
            *(void *)uint64_t v79 = 0LL;
            uint64_t v63 = v79 + 8;
            while (v62 != v67)
            {
              uint64_t v80 = *((void *)v62 - 1);
              v62 -= 8;
              *((void *)v79 - 1) = v80;
              v79 -= 8;
            }

            *(void *)(a1 + 32) = v79;
            *(void *)(a1 + 40) = v63;
            *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v72[8 * v71];
            if (v67) {
              operator delete(v67);
            }
          }

          else
          {
            *(void *)double v62 = 0LL;
            uint64_t v63 = v62 + 8;
          }

          *(void *)(a1 + 40) = v63;
          uint64_t v81 = *((void *)this + 1);
          if (v81 <= 0xFFFFFFFFFFFFFFF7LL && v81 + 8 <= *((void *)this + 2))
          {
            *(v63 - 1) = *(void *)(*(void *)this + v81);
LABEL_122:
            uint64_t v82 = *((void *)this + 1) + 8LL;
            goto LABEL_134;
          }

          goto LABEL_131;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v87, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v46 = *((void *)this + 1);
            __int128 v47 = *((void *)this + 2);
            while (v46 < v47 && !*((_BYTE *)this + 24))
            {
              __int128 v49 = *(char **)(a1 + 16);
              __int128 v48 = *(void *)(a1 + 24);
              if ((unint64_t)v49 >= v48)
              {
                __int128 v51 = (char *)*v10;
                __int128 v52 = (v49 - (_BYTE *)*v10) >> 2;
                __int128 v53 = v52 + 1;
                __int128 v54 = v48 - (void)v51;
                if (v54 >> 1 > v53) {
                  __int128 v53 = v54 >> 1;
                }
                else {
                  __int128 v55 = v53;
                }
                if (v55)
                {
                  __int128 v56 = (char *)sub_10000956C(v11, v55);
                  __int128 v51 = *(char **)(a1 + 8);
                  __int128 v49 = *(char **)(a1 + 16);
                }

                else
                {
                  __int128 v56 = 0LL;
                }

                __int128 v57 = &v56[4 * v52];
                *(_DWORD *)__int128 v57 = 0;
                __int128 v50 = v57 + 4;
                while (v49 != v51)
                {
                  uint64_t v58 = *((_DWORD *)v49 - 1);
                  v49 -= 4;
                  *((_DWORD *)v57 - 1) = v58;
                  v57 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v57;
                *(void *)(a1 + 16) = v50;
                *(void *)(a1 + 24) = &v56[4 * v55];
                if (v51) {
                  operator delete(v51);
                }
              }

              else
              {
                *(_DWORD *)__int128 v49 = 0;
                __int128 v50 = v49 + 4;
              }

              *(void *)(a1 + 16) = v50;
              uint64_t v59 = *((void *)this + 1);
              if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)this + 2))
              {
LABEL_95:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v50 - 1) = *(_DWORD *)(*(void *)this + v59);
              __int128 v47 = *((void *)this + 2);
              __int128 v46 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v46;
            }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 60) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 60) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v26);
LABEL_31:
          __int128 v27 = *((void *)this + 1) + 8LL;
          goto LABEL_88;
        case 3u:
          *(_BYTE *)(a1 + 60) |= 0x10u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_87;
        case 4u:
          *(_BYTE *)(a1 + 60) |= 8u;
          __int128 v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_87;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v58, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  double v37 = v38 >> 1;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_10000956C(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[4 * v36];
                *(_DWORD *)__int128 v41 = 0;
                int v34 = v41 + 4;
                while (v33 != v35)
                {
                  __int128 v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[4 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(_DWORD *)BOOL v33 = 0;
                int v34 = v33 + 4;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v30;
            }

            PB::Reader::recallMark(this, v58);
          }

          else
          {
            __int128 v46 = *(char **)(a1 + 16);
            double v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v10;
              __int128 v49 = (v46 - (_BYTE *)*v10) >> 2;
              __int128 v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
LABEL_97:
              }
                sub_100007008();
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v11, v52);
                __int128 v48 = *(char **)(a1 + 8);
                __int128 v46 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 16) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *((void *)this + 2))
            {
              *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
LABEL_87:
              __int128 v27 = *((void *)this + 1) + 4LL;
LABEL_88:
              *((void *)this + 1) = v27;
            }

            else
            {
LABEL_85:
              *((_BYTE *)this + 24) = 1;
            }
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 96) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_177;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          goto LABEL_179;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            unint64_t v83 = *(char **)(a1 + 16);
            uint64_t v82 = *(void *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              uint64_t v93 = (char *)*v12;
              uint64_t v94 = (v83 - (_BYTE *)*v12) >> 3;
              uint64_t v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 61) {
LABEL_190:
              }
                sub_100007008();
              uint64_t v96 = v82 - (void)v93;
              if (v96 >> 2 > v95) {
                uint64_t v95 = v96 >> 2;
              }
              else {
                uint64_t v97 = v95;
              }
              if (v97)
              {
                uint64_t v98 = (char *)sub_1000071BC(v13, v97);
                uint64_t v93 = *(char **)(a1 + 8);
                unint64_t v83 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v98 = 0LL;
              }

              uint64_t v111 = &v98[8 * v94];
              *(void *)uint64_t v111 = 0LL;
              uint64_t v84 = v111 + 8;
              while (v83 != v93)
              {
                uint64_t v112 = *((void *)v83 - 1);
                v83 -= 8;
                *((void *)v111 - 1) = v112;
                v111 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v111;
              *(void *)(a1 + 16) = v84;
              *(void *)(a1 + 24) = &v98[8 * v97];
              if (v93) {
                operator delete(v93);
              }
            }

            else
            {
              *(void *)unint64_t v83 = 0LL;
              uint64_t v84 = v83 + 8;
            }

            *(void *)(a1 + 16) = v84;
            goto LABEL_175;
          }

          if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v28 = *((void *)this + 1);
          __int128 v29 = *((void *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            double v31 = *(char **)(a1 + 16);
            double v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*v12;
              int v34 = (v31 - (_BYTE *)*v12) >> 3;
              double v35 = v34 + 1;
              std::string::size_type v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                double v35 = v36 >> 2;
              }
              else {
                double v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_1000071BC(v13, v37);
                BOOL v33 = *(char **)(a1 + 8);
                double v31 = *(char **)(a1 + 16);
              }

              else
              {
                unint64_t v38 = 0LL;
              }

              __int16 v39 = &v38[8 * v34];
              *(void *)__int16 v39 = 0LL;
              uint64_t v32 = v39 + 8;
              while (v31 != v33)
              {
                double v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(void *)double v31 = 0LL;
              uint64_t v32 = v31 + 8;
            }

            *(void *)(a1 + 16) = v32;
            __int128 v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            __int128 v29 = *((void *)this + 2);
            __int128 v28 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v28;
          }

          goto LABEL_125;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v86 = *(char **)(a1 + 40);
            std::string v85 = *(void *)(a1 + 48);
            if ((unint64_t)v86 >= v85)
            {
              v99 = (char *)*v11;
              __int128 v100 = (v86 - (_BYTE *)*v11) >> 3;
              CFStringRef v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61) {
LABEL_191:
              }
                sub_100007008();
              BOOL v102 = v85 - (void)v99;
              if (v102 >> 2 > v101) {
                CFStringRef v101 = v102 >> 2;
              }
              else {
                double v103 = v101;
              }
              if (v103)
              {
                __int128 v104 = (char *)sub_1000071BC(v120, v103);
                v99 = *(char **)(a1 + 32);
                uint64_t v86 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v104 = 0LL;
              }

              uint64_t v113 = &v104[8 * v100];
              *(void *)uint64_t v113 = 0LL;
              uint64_t v84 = v113 + 8;
              while (v86 != v99)
              {
                uint64_t v114 = *((void *)v86 - 1);
                v86 -= 8;
                *((void *)v113 - 1) = v114;
                v113 -= 8;
              }

              *(void *)(a1 + 32) = v113;
              *(void *)(a1 + 40) = v84;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }

            else
            {
              *(void *)uint64_t v86 = 0LL;
              uint64_t v84 = v86 + 8;
            }

            *(void *)(a1 + 40) = v84;
            goto LABEL_175;
          }

          if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v42 = *((void *)this + 1);
          __int128 v43 = *((void *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            double v45 = *(char **)(a1 + 40);
            double v44 = *(void *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              __int128 v47 = (char *)*v11;
              __int128 v48 = (v45 - (_BYTE *)*v11) >> 3;
              __int128 v49 = v48 + 1;
              __int128 v50 = v44 - (void)v47;
              if (v50 >> 2 > v49) {
                __int128 v49 = v50 >> 2;
              }
              else {
                __int128 v51 = v49;
              }
              if (v51)
              {
                __int128 v52 = (char *)sub_1000071BC(v120, v51);
                __int128 v47 = *(char **)(a1 + 32);
                double v45 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v52 = 0LL;
              }

              __int128 v53 = &v52[8 * v48];
              *(void *)__int128 v53 = 0LL;
              __int128 v46 = v53 + 8;
              while (v45 != v47)
              {
                __int128 v54 = *((void *)v45 - 1);
                v45 -= 8;
                *((void *)v53 - 1) = v54;
                v53 -= 8;
              }

              *(void *)(a1 + 32) = v53;
              *(void *)(a1 + 40) = v46;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v52[8 * v51];
              if (v47) {
                operator delete(v47);
              }
            }

            else
            {
              *(void *)double v45 = 0LL;
              __int128 v46 = v45 + 8;
            }

            *(void *)(a1 + 40) = v46;
            __int128 v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v46 - 1) = *(void *)(*(void *)this + v55);
            __int128 v43 = *((void *)this + 2);
            __int128 v42 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v42;
          }

          goto LABEL_125;
        case 4u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v56 = *((void *)this + 1);
            __int128 v57 = *((void *)this + 2);
            while (v56 < v57 && !*((_BYTE *)this + 24))
            {
              uint64_t v59 = *(char **)(a1 + 64);
              uint64_t v58 = *(void *)(a1 + 72);
              if ((unint64_t)v59 >= v58)
              {
                double v61 = (char *)*v10;
                double v62 = (v59 - (_BYTE *)*v10) >> 3;
                uint64_t v63 = v62 + 1;
                double v64 = v58 - (void)v61;
                if (v64 >> 2 > v63) {
                  uint64_t v63 = v64 >> 2;
                }
                else {
                  uint64_t v65 = v63;
                }
                if (v65)
                {
                  int64_t v66 = (char *)sub_1000071BC(v121, v65);
                  double v61 = *(char **)(a1 + 56);
                  uint64_t v59 = *(char **)(a1 + 64);
                }

                else
                {
                  int64_t v66 = 0LL;
                }

                int64_t v67 = &v66[8 * v62];
                *(void *)int64_t v67 = 0LL;
                uint64_t v60 = v67 + 8;
                while (v59 != v61)
                {
                  int64_t v68 = *((void *)v59 - 1);
                  v59 -= 8;
                  *((void *)v67 - 1) = v68;
                  v67 -= 8;
                }

                *(void *)(a1 + 56) = v67;
                *(void *)(a1 + 64) = v60;
                *(void *)(a1 + 72) = &v66[8 * v65];
                if (v61) {
                  operator delete(v61);
                }
              }

              else
              {
                *(void *)uint64_t v59 = 0LL;
                uint64_t v60 = v59 + 8;
              }

              *(void *)(a1 + 64) = v60;
              uint64_t v69 = *((void *)this + 1);
              if (v69 > 0xFFFFFFFFFFFFFFF7LL || v69 + 8 > *((void *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v60 - 1) = *(void *)(*(void *)this + v69);
              __int128 v57 = *((void *)this + 2);
              __int128 v56 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v56;
            }

  PB::TextFormatter::format(this, "isWalkingFiltered", *(_BYTE *)(a1 + 58));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_1011694AC(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v12 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 24) = v12;
  if ((*(_WORD *)(a2 + 64) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 2)
      {
        sub_10116F66C(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  unint64_t v9 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "intervalWakeDetectedToGazeDetected", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  unint64_t v9 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        unint64_t v25 = *((void *)this + 1);
        if (v25 >= *((void *)this + 2))
        {
          __int128 v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          unint64_t v26 = v25 + 1;
          __int128 v27 = *(unsigned __int8 *)(*(void *)this + v25);
          *((void *)this + 1) = v26;
          __int128 v28 = v27 != 0;
        }

        *(_BYTE *)(a1 + 20) = v28;
      }

      else if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        __int128 v29 = *((void *)this + 1);
        double v30 = *((void *)this + 2);
        double v31 = *(void *)this;
        if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v30)
        {
          unint64_t v38 = 0;
          __int16 v39 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }

            double v40 = v29 + 1;
            __int128 v41 = *(_BYTE *)(v31 + v29);
            *((void *)this + 1) = v40;
            v34 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            __int128 v29 = v40;
            __int128 v15 = v39++ > 8;
            if (v15)
            {
LABEL_48:
              LODWORD(v34) = 0;
              goto LABEL_52;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v34) = 0;
          }
        }

        else
        {
          uint64_t v32 = 0;
          BOOL v33 = 0;
          int v34 = 0LL;
          while (1)
          {
            double v35 = v29 + 1;
            *((void *)this + 1) = v29 + 1;
            std::string::size_type v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            __int128 v29 = v35;
            __int128 v15 = v33++ > 8;
            if (v15) {
              goto LABEL_48;
            }
          }
        }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 112) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_196;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_198;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v86 = *(char **)(a1 + 40);
            std::string v85 = *(void *)(a1 + 48);
            if ((unint64_t)v86 >= v85)
            {
              uint64_t v94 = (char *)*v13;
              uint64_t v95 = (v86 - (_BYTE *)*v13) >> 2;
              uint64_t v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62) {
LABEL_207:
              }
                sub_100007008();
              uint64_t v97 = v85 - (void)v94;
              if (v97 >> 1 > v96) {
                uint64_t v96 = v97 >> 1;
              }
              else {
                uint64_t v98 = v96;
              }
              if (v98)
              {
                v99 = (char *)sub_10000956C(v128, v98);
                uint64_t v94 = *(char **)(a1 + 32);
                uint64_t v86 = *(char **)(a1 + 40);
              }

              else
              {
                v99 = 0LL;
              }

              uint64_t v118 = &v99[4 * v95];
              *(_DWORD *)uint64_t v118 = 0;
              uint64_t v87 = v118 + 4;
              while (v86 != v94)
              {
                uint64_t v119 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }

              *(void *)(a1 + 32) = v118;
              *(void *)(a1 + 40) = v87;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v99[4 * v98];
              if (v94) {
                operator delete(v94);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v86 = 0;
              uint64_t v87 = v86 + 4;
            }

            *(void *)(a1 + 40) = v87;
            goto LABEL_194;
          }

          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 40);
            double v31 = *(void *)(a1 + 48);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v13;
              double v35 = (v32 - (_BYTE *)*v13) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v128, v38);
                int v34 = *(char **)(a1 + 32);
                uint64_t v32 = *(char **)(a1 + 40);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + 32) = v40;
              *(void *)(a1 + 40) = v33;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 40) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_125;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            double v89 = *(char **)(a1 + 16);
            uint64_t v88 = *(void *)(a1 + 24);
            if ((unint64_t)v89 >= v88)
            {
              __int128 v100 = (char *)*v12;
              CFStringRef v101 = (v89 - (_BYTE *)*v12) >> 2;
              BOOL v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62) {
LABEL_208:
              }
                sub_100007008();
              double v103 = v88 - (void)v100;
              if (v103 >> 1 > v102) {
                BOOL v102 = v103 >> 1;
              }
              else {
                __int128 v104 = v102;
              }
              if (v104)
              {
                unsigned int v105 = (char *)sub_10000956C(v129, v104);
                __int128 v100 = *(char **)(a1 + 8);
                double v89 = *(char **)(a1 + 16);
              }

              else
              {
                unsigned int v105 = 0LL;
              }

              int v120 = &v105[4 * v101];
              *(_DWORD *)int v120 = 0;
              uint64_t v87 = v120 + 4;
              while (v89 != v100)
              {
                __int128 v121 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v120;
              *(void *)(a1 + 16) = v87;
              *(void *)(a1 + 24) = &v105[4 * v104];
              if (v100) {
                operator delete(v100);
              }
            }

            else
            {
              *(_DWORD *)double v89 = 0;
              uint64_t v87 = v89 + 4;
            }

            *(void *)(a1 + 16) = v87;
            goto LABEL_194;
          }

          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 16);
            double v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 2;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                __int128 v50 = v51 >> 1;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_10000956C(v129, v52);
                __int128 v48 = *(char **)(a1 + 8);
                __int128 v46 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[4 * v49];
              *(_DWORD *)__int128 v54 = 0;
              __int128 v47 = v54 + 4;
              while (v46 != v48)
              {
                __int128 v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(_DWORD *)__int128 v46 = 0;
              __int128 v47 = v46 + 4;
            }

            *(void *)(a1 + 16) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_125;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v91 = *(char **)(a1 + 88);
            uint64_t v90 = *(void *)(a1 + 96);
            if ((unint64_t)v91 >= v90)
            {
              uint64_t v106 = (char *)*v11;
              uint64_t v107 = (v91 - (_BYTE *)*v11) >> 2;
              uint64_t v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62) {
LABEL_209:
              }
                sub_100007008();
              uint64_t v109 = v90 - (void)v106;
              if (v109 >> 1 > v108) {
                uint64_t v108 = v109 >> 1;
              }
              else {
                uint64_t v110 = v108;
              }
              if (v110)
              {
                uint64_t v111 = (char *)sub_10000956C(v130, v110);
                uint64_t v106 = *(char **)(a1 + 80);
                uint64_t v91 = *(char **)(a1 + 88);
              }

              else
              {
                uint64_t v111 = 0LL;
              }

              char v122 = &v111[4 * v107];
              *(_DWORD *)char v122 = 0;
              uint64_t v87 = v122 + 4;
              while (v91 != v106)
              {
                uint64_t v123 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }

              *(void *)(a1 + 80) = v122;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v87;
              *(void *)(a1 + 96) = &v111[4 * v110];
              if (v106) {
                operator delete(v106);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v91 = 0;
              uint64_t v87 = v91 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v87;
            goto LABEL_194;
          }

          if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v57 = *((void *)this + 1);
          uint64_t v58 = *((void *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            uint64_t v60 = *(char **)(a1 + 88);
            uint64_t v59 = *(void *)(a1 + 96);
            if ((unint64_t)v60 >= v59)
            {
              double v62 = (char *)*v11;
              uint64_t v63 = (v60 - (_BYTE *)*v11) >> 2;
              double v64 = v63 + 1;
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                double v64 = v65 >> 1;
              }
              else {
                int64_t v66 = v64;
              }
              if (v66)
              {
                int64_t v67 = (char *)sub_10000956C(v130, v66);
                double v62 = *(char **)(a1 + 80);
                uint64_t v60 = *(char **)(a1 + 88);
              }

              else
              {
                int64_t v67 = 0LL;
              }

              int64_t v68 = &v67[4 * v63];
              *(_DWORD *)int64_t v68 = 0;
              double v61 = v68 + 4;
              while (v60 != v62)
              {
                uint64_t v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }

              *(void *)(a1 + 80) = v68;
              *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v61;
              *(void *)(a1 + 96) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v60 = 0;
              double v61 = v60 + 4;
            }

            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v61;
            uint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
            uint64_t v58 = *((void *)this + 2);
            __int128 v57 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v57;
          }

          goto LABEL_125;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v132, v26, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v71 = *((void *)this + 1);
            uint64_t v72 = *((void *)this + 2);
            while (v71 < v72 && !*((_BYTE *)this + 24))
            {
              uint64_t v74 = *(char **)(a1 + 64);
              uint64_t v73 = *(void *)(a1 + 72);
              if ((unint64_t)v74 >= v73)
              {
                uint64_t v76 = (char *)*v10;
                uint64_t v77 = (v74 - (_BYTE *)*v10) >> 2;
                uint64_t v78 = v77 + 1;
                uint64_t v79 = v73 - (void)v76;
                if (v79 >> 1 > v78) {
                  uint64_t v78 = v79 >> 1;
                }
                else {
                  uint64_t v80 = v78;
                }
                if (v80)
                {
                  uint64_t v81 = (char *)sub_10000956C(v131, v80);
                  uint64_t v76 = *(char **)(a1 + 56);
                  uint64_t v74 = *(char **)(a1 + 64);
                }

                else
                {
                  uint64_t v81 = 0LL;
                }

                uint64_t v82 = &v81[4 * v77];
                *(_DWORD *)uint64_t v82 = 0;
                uint64_t v75 = v82 + 4;
                while (v74 != v76)
                {
                  unint64_t v83 = *((_DWORD *)v74 - 1);
                  v74 -= 4;
                  *((_DWORD *)v82 - 1) = v83;
                  v82 -= 4;
                }

                *(void *)(a1 + 56) = v82;
                *(void *)(a1 + 64) = v75;
                *(void *)(a1 + 72) = &v81[4 * v80];
                if (v76) {
                  operator delete(v76);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v74 = 0;
                uint64_t v75 = v74 + 4;
              }

              *(void *)(a1 + 64) = v75;
              uint64_t v84 = *((void *)this + 1);
              if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v75 - 1) = *(_DWORD *)(*(void *)this + v84);
              uint64_t v72 = *((void *)this + 2);
              uint64_t v71 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v71;
            }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 1)
      {
        if ((_DWORD)v26 != 2)
        {
          __int128 v57 = (char *)a1[2];
          __int128 v56 = a1[3];
          if ((unint64_t)v57 >= v56)
          {
            double v61 = (char *)*v12;
            double v62 = (v57 - (_BYTE *)*v12) >> 3;
            uint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61) {
LABEL_122:
            }
              sub_100007008();
            double v64 = v56 - (void)v61;
            if (v64 >> 2 > v63) {
              uint64_t v63 = v64 >> 2;
            }
            else {
              uint64_t v65 = v63;
            }
            if (v65)
            {
              int64_t v66 = (char *)sub_1000071BC(v13, v65);
              double v61 = (char *)a1[1];
              __int128 v57 = (char *)a1[2];
            }

            else
            {
              int64_t v66 = 0LL;
            }

            uint64_t v73 = &v66[8 * v62];
            *(void *)uint64_t v73 = 0LL;
            uint64_t v58 = v73 + 8;
            while (v57 != v61)
            {
              uint64_t v74 = *((void *)v57 - 1);
              v57 -= 8;
              *((void *)v73 - 1) = v74;
              v73 -= 8;
            }

            a1[1] = v73;
            a1[2] = v58;
            a1[3] = &v66[8 * v65];
            if (v61) {
              operator delete(v61);
            }
          }

          else
          {
            *(void *)__int128 v57 = 0LL;
            uint64_t v58 = v57 + 8;
          }

          a1[2] = v58;
LABEL_110:
          uint64_t v77 = *((void *)this + 1);
          if (v77 <= 0xFFFFFFFFFFFFFFF7LL && v77 + 8 <= *((void *)this + 2))
          {
            *(v58 - 1) = *(void *)(*(void *)this + v77);
            *((void *)this + 1) += 8LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_114;
        }

        if ((PB::Reader::placeMark(this, v79, v26, a4) & 1) != 0) {
          return 0LL;
        }
        __int128 v28 = *((void *)this + 1);
        __int128 v29 = *((void *)this + 2);
        while (v28 < v29 && !*((_BYTE *)this + 24))
        {
          double v31 = (char *)a1[2];
          double v30 = a1[3];
          if ((unint64_t)v31 >= v30)
          {
            BOOL v33 = (char *)*v12;
            int v34 = (v31 - (_BYTE *)*v12) >> 3;
            double v35 = v34 + 1;
            std::string::size_type v36 = v30 - (void)v33;
            if (v36 >> 2 > v35) {
              double v35 = v36 >> 2;
            }
            else {
              double v37 = v35;
            }
            if (v37)
            {
              unint64_t v38 = (char *)sub_1000071BC(v13, v37);
              BOOL v33 = (char *)a1[1];
              double v31 = (char *)a1[2];
            }

            else
            {
              unint64_t v38 = 0LL;
            }

            __int16 v39 = &v38[8 * v34];
            *(void *)__int16 v39 = 0LL;
            uint64_t v32 = v39 + 8;
            while (v31 != v33)
            {
              double v40 = *((void *)v31 - 1);
              v31 -= 8;
              *((void *)v39 - 1) = v40;
              v39 -= 8;
            }

            a1[1] = v39;
            a1[2] = v32;
            a1[3] = &v38[8 * v37];
            if (v33) {
              operator delete(v33);
            }
          }

          else
          {
            *(void *)double v31 = 0LL;
            uint64_t v32 = v31 + 8;
          }

          a1[2] = v32;
          __int128 v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7LL || v41 + 8 > *((void *)this + 2)) {
            goto LABEL_78;
          }
          *(v32 - 1) = *(void *)(*(void *)this + v41);
          __int128 v29 = *((void *)this + 2);
          __int128 v28 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v28;
        }

  uint64_t v10 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 72) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 76) |= 2u;
          __int128 v27 = *((void *)this + 1);
          __int128 v28 = *((void *)this + 2);
          __int128 v29 = *(void *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5LL && v27 + 10 <= v28)
          {
            double v30 = 0;
            double v31 = 0;
            uint64_t v32 = 0LL;
            do
            {
              BOOL v33 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              int v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_118;
              }
              v30 += 7;
              __int128 v27 = v33;
              unint64_t v20 = v31++ > 8;
            }

            while (!v20);
LABEL_92:
            uint64_t v32 = 0LL;
            goto LABEL_118;
          }

          int64_t v66 = 0;
          int64_t v67 = 0;
          uint64_t v32 = 0LL;
          if (v28 <= v27) {
            __int128 v28 = *((void *)this + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              uint64_t v32 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int64_t v68 = v27 + 1;
              uint64_t v69 = *(_BYTE *)(v29 + v27);
              *((void *)this + 1) = v68;
              v32 |= (unint64_t)(v69 & 0x7F) << v66;
              if (v69 < 0)
              {
                v66 += 7;
                __int128 v27 = v68;
                unint64_t v20 = v67++ > 8;
                if (v20) {
                  goto LABEL_92;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v32 = 0LL;
              }
            }

            break;
          }

  unint64_t v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 24) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "metSource", *(_DWORD *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "rawGradeType", *(_DWORD *)(a1 + 60));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xBu);
  }

      unint64_t v25 = v17 & 7;
      if ((_DWORD)v25 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          if ((_DWORD)v25 != 2)
          {
            __int16 v163 = *(char **)(a1 + 136);
            unint64_t v162 = *(void *)(a1 + 144);
            if ((unint64_t)v163 >= v162)
            {
              uint64_t v178 = (char *)*v285;
              v179 = (v163 - (_BYTE *)*v285) >> 2;
              __int128 v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62) {
LABEL_482:
              }
                sub_100007008();
              v181 = v162 - (void)v178;
              if (v181 >> 1 > v180) {
                __int128 v180 = v181 >> 1;
              }
              else {
                char v182 = v180;
              }
              if (v182)
              {
                v183 = (char *)sub_10000956C(v282, v182);
                uint64_t v178 = *(char **)(a1 + 128);
                __int16 v163 = *(char **)(a1 + 136);
              }

              else
              {
                v183 = 0LL;
              }

              v220 = &v183[4 * v179];
              *(_DWORD *)v220 = 0;
              unint64_t v164 = v220 + 4;
              while (v163 != v178)
              {
                char v221 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v220 - 1) = v221;
                v220 -= 4;
              }

              *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v220;
              *(void *)(a1 + 136) = v164;
              *(void *)(a1 + 144) = &v183[4 * v182];
              if (v178) {
                operator delete(v178);
              }
            }

            else
            {
              *(_DWORD *)__int16 v163 = 0;
              unint64_t v164 = v163 + 4;
            }

            *(void *)(a1 + 136) = v164;
            goto LABEL_374;
          }

          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            __int128 v29 = *(char **)(a1 + 136);
            __int128 v28 = *(void *)(a1 + 144);
            if ((unint64_t)v29 >= v28)
            {
              double v31 = (char *)*v285;
              uint64_t v32 = (v29 - (_BYTE *)*v285) >> 2;
              BOOL v33 = v32 + 1;
              int v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                BOOL v33 = v34 >> 1;
              }
              else {
                double v35 = v33;
              }
              if (v35)
              {
                std::string::size_type v36 = (char *)sub_10000956C(v282, v35);
                double v31 = *(char **)(a1 + 128);
                __int128 v29 = *(char **)(a1 + 136);
              }

              else
              {
                std::string::size_type v36 = 0LL;
              }

              double v37 = &v36[4 * v32];
              *(_DWORD *)double v37 = 0;
              double v30 = v37 + 4;
              while (v29 != v31)
              {
                unint64_t v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }

              *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v37;
              *(void *)(a1 + 136) = v30;
              *(void *)(a1 + 144) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }

            else
            {
              *(_DWORD *)__int128 v29 = 0;
              double v30 = v29 + 4;
            }

            *(void *)(a1 + 136) = v30;
            __int16 v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)this + v39);
            __int128 v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v26;
          }

          goto LABEL_296;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            unint64_t v166 = *(char **)(a1 + 112);
            __int16 v165 = *(void *)(a1 + 120);
            if ((unint64_t)v166 >= v165)
            {
              v184 = (char *)*v286;
              uint64_t v185 = (v166 - (_BYTE *)*v286) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62) {
LABEL_483:
              }
                sub_100007008();
              unint64_t v187 = v165 - (void)v184;
              if (v187 >> 1 > v186) {
                v186 = v187 >> 1;
              }
              else {
                uint64_t v188 = v186;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_10000956C(v283, v188);
                v184 = *(char **)(a1 + 104);
                unint64_t v166 = *(char **)(a1 + 112);
              }

              else
              {
                uint64_t v189 = 0LL;
              }

              v222 = &v189[4 * v185];
              *(_DWORD *)v222 = 0;
              unint64_t v164 = v222 + 4;
              while (v166 != v184)
              {
                v223 = *((_DWORD *)v166 - 1);
                v166 -= 4;
                *((_DWORD *)v222 - 1) = v223;
                v222 -= 4;
              }

              *(void *)(a1 + 104) = v222;
              *(void *)(a1 + 112) = v164;
              *(void *)(a1 + 120) = &v189[4 * v188];
              if (v184) {
                operator delete(v184);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v166 = 0;
              unint64_t v164 = v166 + 4;
            }

            *(void *)(a1 + 112) = v164;
            goto LABEL_374;
          }

          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
            return 0LL;
          }
          double v40 = *((void *)this + 1);
          __int128 v41 = *((void *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            __int128 v43 = *(char **)(a1 + 112);
            __int128 v42 = *(void *)(a1 + 120);
            if ((unint64_t)v43 >= v42)
            {
              double v45 = (char *)*v286;
              __int128 v46 = (v43 - (_BYTE *)*v286) >> 2;
              __int128 v47 = v46 + 1;
              __int128 v48 = v42 - (void)v45;
              if (v48 >> 1 > v47) {
                __int128 v47 = v48 >> 1;
              }
              else {
                __int128 v49 = v47;
              }
              if (v49)
              {
                __int128 v50 = (char *)sub_10000956C(v283, v49);
                double v45 = *(char **)(a1 + 104);
                __int128 v43 = *(char **)(a1 + 112);
              }

              else
              {
                __int128 v50 = 0LL;
              }

              __int128 v51 = &v50[4 * v46];
              *(_DWORD *)__int128 v51 = 0;
              double v44 = v51 + 4;
              while (v43 != v45)
              {
                __int128 v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }

              *(void *)(a1 + 104) = v51;
              *(void *)(a1 + 112) = v44;
              *(void *)(a1 + 120) = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }

            else
            {
              *(_DWORD *)__int128 v43 = 0;
              double v44 = v43 + 4;
            }

            *(void *)(a1 + 112) = v44;
            __int128 v53 = *((void *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v44 - 1) = *(_DWORD *)(*(void *)this + v53);
            __int128 v41 = *((void *)this + 2);
            double v40 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v40;
          }

          goto LABEL_296;
        case 3u:
          if ((_DWORD)v25 != 2)
          {
            __int128 v168 = *(char **)(a1 + 160);
            int v167 = *(void *)(a1 + 168);
            if ((unint64_t)v168 >= v167)
            {
              v190 = (char *)*v287;
              int v191 = (v168 - (_BYTE *)*v287) >> 2;
              uint64_t v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62) {
LABEL_484:
              }
                sub_100007008();
              uint64_t v193 = v167 - (void)v190;
              if (v193 >> 1 > v192) {
                uint64_t v192 = v193 >> 1;
              }
              else {
                int v194 = v192;
              }
              if (v194)
              {
                v195 = (char *)sub_10000956C(v284, v194);
                v190 = *(char **)(a1 + 152);
                __int128 v168 = *(char **)(a1 + 160);
              }

              else
              {
                v195 = 0LL;
              }

              v224 = &v195[4 * v191];
              *(_DWORD *)v224 = 0;
              unint64_t v164 = v224 + 4;
              while (v168 != v190)
              {
                v225 = *((_DWORD *)v168 - 1);
                v168 -= 4;
                *((_DWORD *)v224 - 1) = v225;
                v224 -= 4;
              }

              *(void *)(a1 + 152) = v224;
              *(void *)(a1 + 160) = v164;
              *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = &v195[4 * v194];
              if (v190) {
                operator delete(v190);
              }
            }

            else
            {
              *(_DWORD *)__int128 v168 = 0;
              unint64_t v164 = v168 + 4;
            }

            *(void *)(a1 + 160) = v164;
LABEL_374:
            v226 = *((void *)this + 1);
            if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((void *)this + 2))
            {
              *(v164 - 1) = *(_DWORD *)(*(void *)this + v226);
LABEL_378:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_376:
              *((_BYTE *)this + 24) = 1;
            }

            goto LABEL_472;
          }

          if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v54 = *((void *)this + 1);
          __int128 v55 = *((void *)this + 2);
          while (v54 < v55 && !*((_BYTE *)this + 24))
          {
            __int128 v57 = *(char **)(a1 + 160);
            __int128 v56 = *(void *)(a1 + 168);
            if ((unint64_t)v57 >= v56)
            {
              uint64_t v59 = (char *)*v287;
              uint64_t v60 = (v57 - (_BYTE *)*v287) >> 2;
              double v61 = v60 + 1;
              double v62 = v56 - (void)v59;
              if (v62 >> 1 > v61) {
                double v61 = v62 >> 1;
              }
              else {
                uint64_t v63 = v61;
              }
              if (v63)
              {
                double v64 = (char *)sub_10000956C(v284, v63);
                uint64_t v59 = *(char **)(a1 + 152);
                __int128 v57 = *(char **)(a1 + 160);
              }

              else
              {
                double v64 = 0LL;
              }

              uint64_t v65 = &v64[4 * v60];
              *(_DWORD *)uint64_t v65 = 0;
              uint64_t v58 = v65 + 4;
              while (v57 != v59)
              {
                int64_t v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }

              *(void *)(a1 + 152) = v65;
              *(void *)(a1 + 160) = v58;
              *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = &v64[4 * v63];
              if (v59) {
                operator delete(v59);
              }
            }

            else
            {
              *(_DWORD *)__int128 v57 = 0;
              uint64_t v58 = v57 + 4;
            }

            *(void *)(a1 + 160) = v58;
            int64_t v67 = *((void *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2))
            {
LABEL_295:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_296;
            }

            *(v58 - 1) = *(_DWORD *)(*(void *)this + v67);
            __int128 v55 = *((void *)this + 2);
            __int128 v54 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v54;
          }

          goto LABEL_296;
        case 4u:
          *(_BYTE *)(a1 + 180) |= 1u;
          int64_t v68 = *((void *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
            goto LABEL_376;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v68);
          goto LABEL_378;
        case 5u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              uint64_t v69 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v69 >= *v13)
                {
                  uint64_t v70 = (char *)*v281;
                  uint64_t v71 = (v69 - (_BYTE *)*v281) >> 2;
                  uint64_t v72 = v71 + 1;
                  uint64_t v73 = *v13 - (void)v70;
                  if (v73 >> 1 > v72) {
                    uint64_t v72 = v73 >> 1;
                  }
                  else {
                    uint64_t v74 = v72;
                  }
                  if (v74)
                  {
                    uint64_t v75 = (char *)sub_10000956C((uint64_t)v13, v74);
                    uint64_t v70 = *(char **)(a1 + 80);
                    uint64_t v69 = *(char **)(a1 + 88);
                  }

                  else
                  {
                    uint64_t v75 = 0LL;
                  }

                  uint64_t v76 = &v75[4 * v71];
                  *(_DWORD *)uint64_t v76 = 0;
                  uint64_t v77 = v76 + 4;
                  while (v69 != v70)
                  {
                    uint64_t v78 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v76 - 1) = v78;
                    v76 -= 4;
                  }

                  *(void *)(a1 + 80) = v76;
                  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v77;
                  *(void *)(a1 + 96) = &v75[4 * v74];
                  if (v70) {
                    operator delete(v70);
                  }
                  uint64_t v69 = v77;
                }

                else
                {
                  *(_DWORD *)uint64_t v69 = 0;
                  v69 += 4;
                }

                *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v69;
                uint64_t v80 = *((void *)this + 1);
                uint64_t v79 = *((void *)this + 2);
                uint64_t v81 = *(void *)this;
                uint64_t v82 = v80 > 0xFFFFFFFFFFFFFFF5LL || v80 + 10 > v79;
                if (v82)
                {
                  unint64_t v83 = 0;
                  uint64_t v84 = 0;
                  uint64_t v90 = 0LL;
                  if (v79 <= v80) {
                    std::string v85 = *((void *)this + 1);
                  }
                  else {
                    std::string v85 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v85 == v80) {
                      goto LABEL_280;
                    }
                    uint64_t v86 = v80++;
                    uint64_t v87 = *(_BYTE *)(v81 + v86);
                    *((void *)this + 1) = v80;
                    v90 |= (unint64_t)(v87 & 0x7F) << v83;
                    if ((v87 & 0x80) == 0) {
                      break;
                    }
                    v83 += 7;
                    uint64_t v82 = v84++ > 8;
                    if (v82)
                    {
                      LODWORD(v90) = 0;
                      goto LABEL_141;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v90) = 0;
                  }
LABEL_141:
                  uint64_t v91 = v86 + 1;
                }

                else
                {
                  uint64_t v88 = 0;
                  double v89 = 0;
                  uint64_t v90 = 0LL;
                  while (1)
                  {
                    uint64_t v91 = v80 + 1;
                    *((void *)this + 1) = v80 + 1;
                    v92 = *(_BYTE *)(v81 + v80);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    uint64_t v80 = v91;
                    uint64_t v82 = v89++ > 8;
                    if (v82)
                    {
                      LODWORD(v90) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v69 - 1) = v90;
              }

              while (v91 < v79 && !*((_BYTE *)this + 24));
            }

            goto LABEL_296;
          }

          uint64_t v170 = *(char **)(a1 + 88);
          uint64_t v169 = *(void *)(a1 + 96);
          if ((unint64_t)v170 >= v169)
          {
            v196 = (char *)*v281;
            v197 = (v170 - (_BYTE *)*v281) >> 2;
            __int128 v198 = v197 + 1;
            if ((unint64_t)(v197 + 1) >> 62) {
LABEL_485:
            }
              sub_100007008();
            v199 = v169 - (void)v196;
            if (v199 >> 1 > v198) {
              __int128 v198 = v199 >> 1;
            }
            else {
              v200 = v198;
            }
            if (v200)
            {
              v201 = (char *)sub_10000956C((uint64_t)v13, v200);
              v196 = *(char **)(a1 + 80);
              uint64_t v170 = *(char **)(a1 + 88);
            }

            else
            {
              v201 = 0LL;
            }

            v227 = &v201[4 * v197];
            *(_DWORD *)v227 = 0;
            uint64_t v171 = v227 + 4;
            while (v170 != v196)
            {
              v228 = *((_DWORD *)v170 - 1);
              v170 -= 4;
              *((_DWORD *)v227 - 1) = v228;
              v227 -= 4;
            }

            *(void *)(a1 + 80) = v227;
            *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v171;
            *(void *)(a1 + 96) = &v201[4 * v200];
            if (v196) {
              operator delete(v196);
            }
          }

          else
          {
            *(_DWORD *)uint64_t v170 = 0;
            uint64_t v171 = v170 + 4;
          }

          *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v171;
          v229 = *((void *)this + 1);
          uint64_t v230 = *((void *)this + 2);
          v231 = *(void *)this;
          v232 = 0;
          __int128 v233 = 0;
          if (v229 <= 0xFFFFFFFFFFFFFFF5LL && v229 + 10 <= v230)
          {
            v237 = 0LL;
            while (1)
            {
              v238 = v229 + 1;
              *((void *)this + 1) = v229 + 1;
              v239 = *(_BYTE *)(v231 + v229);
              v237 |= (unint64_t)(v239 & 0x7F) << v232;
              if ((v239 & 0x80) == 0) {
                goto LABEL_471;
              }
              v232 += 7;
              v229 = v238;
              uint64_t v82 = v233++ > 8;
              if (v82) {
                goto LABEL_470;
              }
            }
          }

          v237 = 0LL;
          if (v230 <= v229) {
            uint64_t v230 = *((void *)this + 1);
          }
          while (v230 != v229)
          {
            v235 = v229 + 1;
            v236 = *(_BYTE *)(v231 + v229);
            *((void *)this + 1) = v235;
            v237 |= (unint64_t)(v236 & 0x7F) << v232;
            if ((v236 & 0x80) == 0) {
              goto LABEL_464;
            }
            v232 += 7;
            v229 = v235;
            uint64_t v82 = v233++ > 8;
            if (v82) {
              goto LABEL_470;
            }
          }

          goto LABEL_463;
        case 6u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              uint64_t v69 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v69 >= *v12)
                {
                  uint64_t v93 = (char *)*v278;
                  uint64_t v94 = (v69 - (_BYTE *)*v278) >> 2;
                  uint64_t v95 = v94 + 1;
                  uint64_t v96 = *v12 - (void)v93;
                  if (v96 >> 1 > v95) {
                    uint64_t v95 = v96 >> 1;
                  }
                  else {
                    uint64_t v97 = v95;
                  }
                  if (v97)
                  {
                    uint64_t v98 = (char *)sub_10000956C((uint64_t)v12, v97);
                    uint64_t v93 = *(char **)(a1 + 8);
                    uint64_t v69 = *(char **)(a1 + 16);
                  }

                  else
                  {
                    uint64_t v98 = 0LL;
                  }

                  v99 = &v98[4 * v94];
                  *(_DWORD *)v99 = 0;
                  __int128 v100 = v99 + 4;
                  while (v69 != v93)
                  {
                    CFStringRef v101 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v99 - 1) = v101;
                    v99 -= 4;
                  }

                  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v99;
                  *(void *)(a1 + 16) = v100;
                  *(void *)(a1 + 24) = &v98[4 * v97];
                  if (v93) {
                    operator delete(v93);
                  }
                  uint64_t v69 = v100;
                }

                else
                {
                  *(_DWORD *)uint64_t v69 = 0;
                  v69 += 4;
                }

                *(void *)(a1 + 16) = v69;
                double v103 = *((void *)this + 1);
                BOOL v102 = *((void *)this + 2);
                __int128 v104 = *(void *)this;
                if (v103 > 0xFFFFFFFFFFFFFFF5LL || v103 + 10 > v102)
                {
                  uint64_t v106 = 0;
                  uint64_t v107 = 0;
                  uint64_t v113 = 0LL;
                  if (v102 <= v103) {
                    uint64_t v108 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v108 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v108 == v103) {
                      goto LABEL_280;
                    }
                    uint64_t v109 = v103++;
                    uint64_t v110 = *(_BYTE *)(v104 + v109);
                    *((void *)this + 1) = v103;
                    v113 |= (unint64_t)(v110 & 0x7F) << v106;
                    if ((v110 & 0x80) == 0) {
                      break;
                    }
                    v106 += 7;
                    uint64_t v82 = v107++ > 8;
                    if (v82)
                    {
                      LODWORD(v113) = 0;
                      goto LABEL_186;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v113) = 0;
                  }
LABEL_186:
                  uint64_t v114 = v109 + 1;
                }

                else
                {
                  uint64_t v111 = 0;
                  uint64_t v112 = 0;
                  uint64_t v113 = 0LL;
                  while (1)
                  {
                    uint64_t v114 = v103 + 1;
                    *((void *)this + 1) = v103 + 1;
                    uint64_t v115 = *(_BYTE *)(v104 + v103);
                    v113 |= (unint64_t)(v115 & 0x7F) << v111;
                    if ((v115 & 0x80) == 0) {
                      break;
                    }
                    v111 += 7;
                    double v103 = v114;
                    uint64_t v82 = v112++ > 8;
                    if (v82)
                    {
                      LODWORD(v113) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v69 - 1) = v113;
              }

              while (v114 < v102 && !*((_BYTE *)this + 24));
            }

            goto LABEL_296;
          }

          v173 = *(char **)(a1 + 16);
          v172 = *(void *)(a1 + 24);
          if ((unint64_t)v173 >= v172)
          {
            v202 = (char *)*v278;
            v203 = (v173 - (_BYTE *)*v278) >> 2;
            v204 = v203 + 1;
            if ((unint64_t)(v203 + 1) >> 62) {
LABEL_486:
            }
              sub_100007008();
            v205 = v172 - (void)v202;
            if (v205 >> 1 > v204) {
              v204 = v205 >> 1;
            }
            else {
              __int16 v206 = v204;
            }
            if (v206)
            {
              unint64_t v207 = (char *)sub_10000956C((uint64_t)v12, v206);
              v202 = *(char **)(a1 + 8);
              v173 = *(char **)(a1 + 16);
            }

            else
            {
              unint64_t v207 = 0LL;
            }

            v240 = &v207[4 * v203];
            *(_DWORD *)v240 = 0;
            uint64_t v171 = v240 + 4;
            while (v173 != v202)
            {
              v241 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v240 - 1) = v241;
              v240 -= 4;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v240;
            *(void *)(a1 + 16) = v171;
            *(void *)(a1 + 24) = &v207[4 * v206];
            if (v202) {
              operator delete(v202);
            }
          }

          else
          {
            *(_DWORD *)v173 = 0;
            uint64_t v171 = v173 + 4;
          }

          *(void *)(a1 + 16) = v171;
          v242 = *((void *)this + 1);
          v243 = *((void *)this + 2);
          v244 = *(void *)this;
          v245 = 0;
          v246 = 0;
          if (v242 <= 0xFFFFFFFFFFFFFFF5LL && v242 + 10 <= v243)
          {
            v237 = 0LL;
            while (1)
            {
              v250 = v242 + 1;
              *((void *)this + 1) = v242 + 1;
              v251 = *(_BYTE *)(v244 + v242);
              v237 |= (unint64_t)(v251 & 0x7F) << v245;
              if ((v251 & 0x80) == 0) {
                goto LABEL_471;
              }
              v245 += 7;
              v242 = v250;
              uint64_t v82 = v246++ > 8;
              if (v82) {
                goto LABEL_470;
              }
            }
          }

          v237 = 0LL;
          if (v243 <= v242) {
            v243 = *((void *)this + 1);
          }
          while (v243 != v242)
          {
            v248 = v242 + 1;
            v249 = *(_BYTE *)(v244 + v242);
            *((void *)this + 1) = v248;
            v237 |= (unint64_t)(v249 & 0x7F) << v245;
            if ((v249 & 0x80) == 0) {
              goto LABEL_464;
            }
            v245 += 7;
            v242 = v248;
            uint64_t v82 = v246++ > 8;
            if (v82) {
              goto LABEL_470;
            }
          }

          goto LABEL_463;
        case 7u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              uint64_t v69 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v69 >= *v11)
                {
                  uint64_t v116 = (char *)*v279;
                  uint64_t v117 = (v69 - (_BYTE *)*v279) >> 2;
                  uint64_t v118 = v117 + 1;
                  uint64_t v119 = *v11 - (void)v116;
                  if (v119 >> 1 > v118) {
                    uint64_t v118 = v119 >> 1;
                  }
                  else {
                    int v120 = v118;
                  }
                  if (v120)
                  {
                    __int128 v121 = (char *)sub_10000956C((uint64_t)v11, v120);
                    uint64_t v116 = *(char **)(a1 + 32);
                    uint64_t v69 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    __int128 v121 = 0LL;
                  }

                  char v122 = &v121[4 * v117];
                  *(_DWORD *)char v122 = 0;
                  uint64_t v123 = v122 + 4;
                  while (v69 != v116)
                  {
                    uint64_t v124 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v122 - 1) = v124;
                    v122 -= 4;
                  }

                  *(void *)(a1 + 32) = v122;
                  *(void *)(a1 + 40) = v123;
                  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v121[4 * v120];
                  if (v116) {
                    operator delete(v116);
                  }
                  uint64_t v69 = v123;
                }

                else
                {
                  *(_DWORD *)uint64_t v69 = 0;
                  v69 += 4;
                }

                *(void *)(a1 + 40) = v69;
                uint64_t v126 = *((void *)this + 1);
                char v125 = *((void *)this + 2);
                uint64_t v127 = *(void *)this;
                if (v126 > 0xFFFFFFFFFFFFFFF5LL || v126 + 10 > v125)
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = 0;
                  int v136 = 0LL;
                  if (v125 <= v126) {
                    v131 = *((void *)this + 1);
                  }
                  else {
                    v131 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v131 == v126) {
                      goto LABEL_280;
                    }
                    int v132 = v126++;
                    v133 = *(_BYTE *)(v127 + v132);
                    *((void *)this + 1) = v126;
                    v136 |= (unint64_t)(v133 & 0x7F) << v129;
                    if ((v133 & 0x80) == 0) {
                      break;
                    }
                    v129 += 7;
                    uint64_t v82 = v130++ > 8;
                    if (v82)
                    {
                      LODWORD(v136) = 0;
                      goto LABEL_231;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v136) = 0;
                  }
LABEL_231:
                  v137 = v132 + 1;
                }

                else
                {
                  int v134 = 0;
                  v135 = 0;
                  int v136 = 0LL;
                  while (1)
                  {
                    v137 = v126 + 1;
                    *((void *)this + 1) = v126 + 1;
                    int v138 = *(_BYTE *)(v127 + v126);
                    v136 |= (unint64_t)(v138 & 0x7F) << v134;
                    if ((v138 & 0x80) == 0) {
                      break;
                    }
                    v134 += 7;
                    uint64_t v126 = v137;
                    uint64_t v82 = v135++ > 8;
                    if (v82)
                    {
                      LODWORD(v136) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v69 - 1) = v136;
              }

              while (v137 < v125 && !*((_BYTE *)this + 24));
            }

            goto LABEL_296;
          }

          int v175 = *(char **)(a1 + 40);
          v174 = *(void *)(a1 + 48);
          if ((unint64_t)v175 >= v174)
          {
            __int16 v208 = (char *)*v279;
            unint64_t v209 = (v175 - (_BYTE *)*v279) >> 2;
            __int16 v210 = v209 + 1;
            if ((unint64_t)(v209 + 1) >> 62) {
LABEL_487:
            }
              sub_100007008();
            unint64_t v211 = v174 - (void)v208;
            if (v211 >> 1 > v210) {
              __int16 v210 = v211 >> 1;
            }
            else {
              int v212 = v210;
            }
            if (v212)
            {
              __int128 v213 = (char *)sub_10000956C((uint64_t)v11, v212);
              __int16 v208 = *(char **)(a1 + 32);
              int v175 = *(char **)(a1 + 40);
            }

            else
            {
              __int128 v213 = 0LL;
            }

            v252 = &v213[4 * v209];
            *(_DWORD *)v252 = 0;
            uint64_t v171 = v252 + 4;
            while (v175 != v208)
            {
              v253 = *((_DWORD *)v175 - 1);
              v175 -= 4;
              *((_DWORD *)v252 - 1) = v253;
              v252 -= 4;
            }

            *(void *)(a1 + 32) = v252;
            *(void *)(a1 + 40) = v171;
            *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v213[4 * v212];
            if (v208) {
              operator delete(v208);
            }
          }

          else
          {
            *(_DWORD *)int v175 = 0;
            uint64_t v171 = v175 + 4;
          }

          *(void *)(a1 + 40) = v171;
          v254 = *((void *)this + 1);
          v255 = *((void *)this + 2);
          v256 = *(void *)this;
          v257 = 0;
          v258 = 0;
          if (v254 <= 0xFFFFFFFFFFFFFFF5LL && v254 + 10 <= v255)
          {
            v237 = 0LL;
            while (1)
            {
              v262 = v254 + 1;
              *((void *)this + 1) = v254 + 1;
              v263 = *(_BYTE *)(v256 + v254);
              v237 |= (unint64_t)(v263 & 0x7F) << v257;
              if ((v263 & 0x80) == 0) {
                goto LABEL_471;
              }
              v257 += 7;
              v254 = v262;
              uint64_t v82 = v258++ > 8;
              if (v82) {
                goto LABEL_470;
              }
            }
          }

          v237 = 0LL;
          if (v255 <= v254) {
            v255 = *((void *)this + 1);
          }
          while (v255 != v254)
          {
            v260 = v254 + 1;
            v261 = *(_BYTE *)(v256 + v254);
            *((void *)this + 1) = v260;
            v237 |= (unint64_t)(v261 & 0x7F) << v257;
            if ((v261 & 0x80) == 0) {
              goto LABEL_464;
            }
            v257 += 7;
            v254 = v260;
            uint64_t v82 = v258++ > 8;
            if (v82) {
              goto LABEL_470;
            }
          }

          goto LABEL_463;
        case 8u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v288, v25, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              uint64_t v69 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v69 >= *v10)
                {
                  __int16 v139 = (char *)*v280;
                  __int16 v140 = (v69 - (_BYTE *)*v280) >> 2;
                  __int16 v141 = v140 + 1;
                  __int16 v142 = *v10 - (void)v139;
                  if (v142 >> 1 > v141) {
                    __int16 v141 = v142 >> 1;
                  }
                  else {
                    unint64_t v143 = v141;
                  }
                  if (v143)
                  {
                    __int16 v144 = (char *)sub_10000956C((uint64_t)v10, v143);
                    __int16 v139 = *(char **)(a1 + 56);
                    uint64_t v69 = *(char **)(a1 + 64);
                  }

                  else
                  {
                    __int16 v144 = 0LL;
                  }

                  uint64_t v145 = &v144[4 * v140];
                  *(_DWORD *)uint64_t v145 = 0;
                  __int128 v146 = v145 + 4;
                  while (v69 != v139)
                  {
                    char v147 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v145 - 1) = v147;
                    v145 -= 4;
                  }

                  *(void *)(a1 + 56) = v145;
                  *(void *)(a1 + 64) = v146;
                  *(void *)(a1 + 72) = &v144[4 * v143];
                  if (v139) {
                    operator delete(v139);
                  }
                  uint64_t v69 = v146;
                }

                else
                {
                  *(_DWORD *)uint64_t v69 = 0;
                  v69 += 4;
                }

                *(void *)(a1 + 64) = v69;
                __int128 v149 = *((void *)this + 1);
                unsigned int v148 = *((void *)this + 2);
                v150 = *(void *)this;
                if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v148)
                {
                  __int128 v157 = 0;
                  v158 = 0;
                  __int16 v159 = 0LL;
                  while (1)
                  {
                    uint64_t v160 = v149 + 1;
                    *((void *)this + 1) = v149 + 1;
                    __int16 v161 = *(_BYTE *)(v150 + v149);
                    v159 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0) {
                      goto LABEL_277;
                    }
                    v157 += 7;
                    __int128 v149 = v160;
                    uint64_t v82 = v158++ > 8;
                    if (v82)
                    {
                      LODWORD(v159) = 0;
                      goto LABEL_277;
                    }
                  }
                }

                v152 = 0;
                v153 = 0;
                __int16 v159 = 0LL;
                if (v148 <= v149) {
                  v154 = *((void *)this + 1);
                }
                else {
                  v154 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v154 == v149)
                  {
LABEL_280:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v69 - 1) = 0;
                    goto LABEL_296;
                  }

                  v155 = v149++;
                  __int128 v156 = *(_BYTE *)(v150 + v155);
                  *((void *)this + 1) = v149;
                  v159 |= (unint64_t)(v156 & 0x7F) << v152;
                  if ((v156 & 0x80) == 0) {
                    break;
                  }
                  v152 += 7;
                  uint64_t v82 = v153++ > 8;
                  if (v82)
                  {
                    LODWORD(v159) = 0;
                    goto LABEL_276;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v159) = 0;
                }
LABEL_276:
                uint64_t v160 = v155 + 1;
LABEL_277:
                *((_DWORD *)v69 - 1) = v159;
              }

              while (v160 < v148 && !*((_BYTE *)this + 24));
            }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 != 2)
        {
          __int128 v42 = *(char **)(a1 + 16);
          __int128 v41 = *(void *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            double v44 = (char *)*v10;
            double v45 = (v42 - (_BYTE *)*v10) >> 3;
            __int128 v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
LABEL_84:
            }
              sub_100007008();
            __int128 v47 = v41 - (void)v44;
            if (v47 >> 2 > v46) {
              __int128 v46 = v47 >> 2;
            }
            else {
              __int128 v48 = v46;
            }
            if (v48)
            {
              __int128 v49 = (char *)sub_1000071BC(v11, v48);
              double v44 = *(char **)(a1 + 8);
              __int128 v42 = *(char **)(a1 + 16);
            }

            else
            {
              __int128 v49 = 0LL;
            }

            __int128 v50 = &v49[8 * v45];
            *(void *)__int128 v50 = 0LL;
            __int128 v43 = v50 + 8;
            while (v42 != v44)
            {
              __int128 v51 = *((void *)v42 - 1);
              v42 -= 8;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v50;
            *(void *)(a1 + 16) = v43;
            *(void *)(a1 + 24) = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }

          else
          {
            *(void *)__int128 v42 = 0LL;
            __int128 v43 = v42 + 8;
          }

          *(void *)(a1 + 16) = v43;
          __int128 v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7LL || v52 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }

          *(v43 - 1) = *(void *)(*(void *)this + v52);
          goto LABEL_75;
        }

        if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0) {
          return 0LL;
        }
        __int128 v27 = *((void *)this + 1);
        __int128 v28 = *((void *)this + 2);
        while (v27 < v28 && !*((_BYTE *)this + 24))
        {
          double v30 = *(char **)(a1 + 16);
          __int128 v29 = *(void *)(a1 + 24);
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v32 = (char *)*v10;
            BOOL v33 = (v30 - (_BYTE *)*v10) >> 3;
            int v34 = v33 + 1;
            double v35 = v29 - (void)v32;
            if (v35 >> 2 > v34) {
              int v34 = v35 >> 2;
            }
            else {
              std::string::size_type v36 = v34;
            }
            if (v36)
            {
              double v37 = (char *)sub_1000071BC(v11, v36);
              uint64_t v32 = *(char **)(a1 + 8);
              double v30 = *(char **)(a1 + 16);
            }

            else
            {
              double v37 = 0LL;
            }

            unint64_t v38 = &v37[8 * v33];
            *(void *)unint64_t v38 = 0LL;
            double v31 = v38 + 8;
            while (v30 != v32)
            {
              __int16 v39 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v38;
            *(void *)(a1 + 16) = v31;
            *(void *)(a1 + 24) = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }

          else
          {
            *(void *)double v30 = 0LL;
            double v31 = v30 + 8;
          }

          *(void *)(a1 + 16) = v31;
          double v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7LL || v40 + 8 > *((void *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }

          *(v31 - 1) = *(void *)(*(void *)this + v40);
          __int128 v28 = *((void *)this + 2);
          __int128 v27 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v27;
        }

        PB::Reader::recallMark(this, v54);
      }

      else
      {
        if ((_DWORD)v25 == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v26);
LABEL_75:
          *((void *)this + 1) += 8LL;
          goto LABEL_76;
        }

        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0) {
          return 0LL;
        }
      }

  uint64_t v8 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 56) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 60) = v12;
  if ((*(_WORD *)(a2 + 68) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 1u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v27);
          __int128 v28 = *((void *)this + 1) + 8LL;
          goto LABEL_128;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            int64_t v67 = *(char **)(a1 + 16);
            int64_t v66 = *(void *)(a1 + 24);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v71 = (char *)*v12;
              uint64_t v72 = (v67 - (_BYTE *)*v12) >> 2;
              uint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
LABEL_137:
              }
                sub_100007008();
              uint64_t v74 = v66 - (void)v71;
              if (v74 >> 1 > v73) {
                uint64_t v73 = v74 >> 1;
              }
              else {
                uint64_t v75 = v73;
              }
              if (v75)
              {
                uint64_t v76 = (char *)sub_10000956C(v13, v75);
                uint64_t v71 = *(char **)(a1 + 8);
                int64_t v67 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v76 = 0LL;
              }

              unint64_t v83 = &v76[4 * v72];
              *(_DWORD *)unint64_t v83 = 0;
              int64_t v68 = v83 + 4;
              while (v67 != v71)
              {
                uint64_t v84 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v83;
              *(void *)(a1 + 16) = v68;
              *(void *)(a1 + 24) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }

            else
            {
              *(_DWORD *)int64_t v67 = 0;
              int64_t v68 = v67 + 4;
            }

            *(void *)(a1 + 16) = v68;
            goto LABEL_123;
          }

          if ((PB::Reader::placeMark(this, v89, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            uint64_t v32 = *(char **)(a1 + 16);
            double v31 = *(void *)(a1 + 24);
            if ((unint64_t)v32 >= v31)
            {
              int v34 = (char *)*v12;
              double v35 = (v32 - (_BYTE *)*v12) >> 2;
              std::string::size_type v36 = v35 + 1;
              double v37 = v31 - (void)v34;
              if (v37 >> 1 > v36) {
                std::string::size_type v36 = v37 >> 1;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)sub_10000956C(v13, v38);
                int v34 = *(char **)(a1 + 8);
                uint64_t v32 = *(char **)(a1 + 16);
              }

              else
              {
                __int16 v39 = 0LL;
              }

              double v40 = &v39[4 * v35];
              *(_DWORD *)double v40 = 0;
              BOOL v33 = v40 + 4;
              while (v32 != v34)
              {
                __int128 v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v40;
              *(void *)(a1 + 16) = v33;
              *(void *)(a1 + 24) = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v32 = 0;
              BOOL v33 = v32 + 4;
            }

            *(void *)(a1 + 16) = v33;
            __int128 v42 = *((void *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
              goto LABEL_91;
            }
            *(v33 - 1) = *(_DWORD *)(*(void *)this + v42);
            double v30 = *((void *)this + 2);
            __int128 v29 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v29;
          }

          goto LABEL_92;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v89, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v43 = *((void *)this + 1);
            double v44 = *((void *)this + 2);
            while (v43 < v44 && !*((_BYTE *)this + 24))
            {
              __int128 v46 = *(char **)(a1 + 40);
              double v45 = *(void *)(a1 + 48);
              if ((unint64_t)v46 >= v45)
              {
                __int128 v48 = (char *)*v10;
                __int128 v49 = (v46 - (_BYTE *)*v10) >> 2;
                __int128 v50 = v49 + 1;
                __int128 v51 = v45 - (void)v48;
                if (v51 >> 1 > v50) {
                  __int128 v50 = v51 >> 1;
                }
                else {
                  __int128 v52 = v50;
                }
                if (v52)
                {
                  __int128 v53 = (char *)sub_10000956C(v11, v52);
                  __int128 v48 = *(char **)(a1 + 32);
                  __int128 v46 = *(char **)(a1 + 40);
                }

                else
                {
                  __int128 v53 = 0LL;
                }

                __int128 v54 = &v53[4 * v49];
                *(_DWORD *)__int128 v54 = 0;
                __int128 v47 = v54 + 4;
                while (v46 != v48)
                {
                  __int128 v55 = *((_DWORD *)v46 - 1);
                  v46 -= 4;
                  *((_DWORD *)v54 - 1) = v55;
                  v54 -= 4;
                }

                *(void *)(a1 + 32) = v54;
                *(void *)(a1 + 40) = v47;
                *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v53[4 * v52];
                if (v48) {
                  operator delete(v48);
                }
              }

              else
              {
                *(_DWORD *)__int128 v46 = 0;
                __int128 v47 = v46 + 4;
              }

              *(void *)(a1 + 40) = v47;
              __int128 v56 = *((void *)this + 1);
              if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2))
              {
LABEL_91:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
              double v44 = *((void *)this + 2);
              __int128 v43 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v43;
            }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          __int128 v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5LL && v26 + 10 <= v27)
          {
            __int128 v29 = 0;
            double v30 = 0;
            double v31 = 0LL;
            do
            {
              uint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              BOOL v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_84;
              }
              v29 += 7;
              unint64_t v26 = v32;
              double v18 = v30++ > 8;
            }

            while (!v18);
LABEL_70:
            LODWORD(v31) = 0;
            goto LABEL_84;
          }

          __int128 v50 = 0;
          __int128 v51 = 0;
          double v31 = 0LL;
          if (v27 <= v26) {
            __int128 v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              __int128 v52 = v26 + 1;
              __int128 v53 = *(_BYTE *)(v28 + v26);
              *((void *)this + 1) = v52;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v26 = v52;
                double v18 = v51++ > 8;
                if (v18) {
                  goto LABEL_70;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v31) = 0;
              }
            }

            break;
          }

  unint64_t v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 6std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(result + 44) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_55;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 >= *((void *)this + 2))
          {
            __int128 v29 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            __int128 v27 = v26 + 1;
            __int128 v28 = *(unsigned __int8 *)(*(void *)this + v26);
            *((void *)this + 1) = v27;
            __int128 v29 = v28 != 0;
          }

          *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v29;
          goto LABEL_82;
        case 3u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v59, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  double v37 = v38 >> 1;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_10000956C(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[4 * v36];
                *(_DWORD *)__int128 v41 = 0;
                int v34 = v41 + 4;
                while (v33 != v35)
                {
                  __int128 v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[4 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(_DWORD *)BOOL v33 = 0;
                int v34 = v33 + 4;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v30;
            }

            PB::Reader::recallMark(this, v59);
          }

          else
          {
            __int128 v47 = *(char **)(a1 + 16);
            __int128 v46 = *(void *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              __int128 v49 = (char *)*v10;
              __int128 v50 = (v47 - (_BYTE *)*v10) >> 2;
              __int128 v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62) {
LABEL_91:
              }
                sub_100007008();
              __int128 v52 = v46 - (void)v49;
              if (v52 >> 1 > v51) {
                __int128 v51 = v52 >> 1;
              }
              else {
                __int128 v53 = v51;
              }
              if (v53)
              {
                __int128 v54 = (char *)sub_10000956C(v11, v53);
                __int128 v49 = *(char **)(a1 + 8);
                __int128 v47 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v54 = 0LL;
              }

              __int128 v55 = &v54[4 * v50];
              *(_DWORD *)__int128 v55 = 0;
              __int128 v48 = v55 + 4;
              while (v47 != v49)
              {
                __int128 v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v55;
              *(void *)(a1 + 16) = v48;
              *(void *)(a1 + 24) = &v54[4 * v53];
              if (v49) {
                operator delete(v49);
              }
            }

            else
            {
              *(_DWORD *)__int128 v47 = 0;
              __int128 v48 = v47 + 4;
            }

            *(void *)(a1 + 16) = v48;
            __int128 v57 = *((void *)this + 1);
            if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *((void *)this + 2))
            {
              *(v48 - 1) = *(_DWORD *)(*(void *)this + v57);
              double v45 = *((void *)this + 1) + 4LL;
LABEL_56:
              *((void *)this + 1) = v45;
            }

            else
            {
LABEL_81:
              *((_BYTE *)this + 24) = 1;
            }
          }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          __int128 v27 = *((void *)this + 2);
          __int128 v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5LL && v26 + 10 <= v27)
          {
            __int128 v29 = 0;
            double v30 = 0;
            double v31 = 0LL;
            do
            {
              uint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              BOOL v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_84;
              }
              v29 += 7;
              unint64_t v26 = v32;
              double v18 = v30++ > 8;
            }

            while (!v18);
LABEL_70:
            LODWORD(v31) = 0;
            goto LABEL_84;
          }

          __int128 v50 = 0;
          __int128 v51 = 0;
          double v31 = 0LL;
          if (v27 <= v26) {
            __int128 v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              __int128 v52 = v26 + 1;
              __int128 v53 = *(_BYTE *)(v28 + v26);
              *((void *)this + 1) = v52;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v26 = v52;
                double v18 = v51++ > 8;
                if (v18) {
                  goto LABEL_70;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v31) = 0;
              }
            }

            break;
          }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 != 2)
        {
          __int128 v42 = *(char **)(a1 + 16);
          __int128 v41 = *(void *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            double v44 = (char *)*v10;
            double v45 = (v42 - (_BYTE *)*v10) >> 3;
            __int128 v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
LABEL_84:
            }
              sub_100007008();
            __int128 v47 = v41 - (void)v44;
            if (v47 >> 2 > v46) {
              __int128 v46 = v47 >> 2;
            }
            else {
              __int128 v48 = v46;
            }
            if (v48)
            {
              __int128 v49 = (char *)sub_1000071BC(v11, v48);
              double v44 = *(char **)(a1 + 8);
              __int128 v42 = *(char **)(a1 + 16);
            }

            else
            {
              __int128 v49 = 0LL;
            }

            __int128 v50 = &v49[8 * v45];
            *(void *)__int128 v50 = 0LL;
            __int128 v43 = v50 + 8;
            while (v42 != v44)
            {
              __int128 v51 = *((void *)v42 - 1);
              v42 -= 8;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v50;
            *(void *)(a1 + 16) = v43;
            *(void *)(a1 + 24) = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }

          else
          {
            *(void *)__int128 v42 = 0LL;
            __int128 v43 = v42 + 8;
          }

          *(void *)(a1 + 16) = v43;
          __int128 v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7LL || v52 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }

          *(v43 - 1) = *(void *)(*(void *)this + v52);
          goto LABEL_75;
        }

        if ((PB::Reader::placeMark(this, v54, v24, a4) & 1) != 0) {
          return 0LL;
        }
        __int128 v27 = *((void *)this + 1);
        __int128 v28 = *((void *)this + 2);
        while (v27 < v28 && !*((_BYTE *)this + 24))
        {
          double v30 = *(char **)(a1 + 16);
          __int128 v29 = *(void *)(a1 + 24);
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v32 = (char *)*v10;
            BOOL v33 = (v30 - (_BYTE *)*v10) >> 3;
            int v34 = v33 + 1;
            double v35 = v29 - (void)v32;
            if (v35 >> 2 > v34) {
              int v34 = v35 >> 2;
            }
            else {
              std::string::size_type v36 = v34;
            }
            if (v36)
            {
              double v37 = (char *)sub_1000071BC(v11, v36);
              uint64_t v32 = *(char **)(a1 + 8);
              double v30 = *(char **)(a1 + 16);
            }

            else
            {
              double v37 = 0LL;
            }

            unint64_t v38 = &v37[8 * v33];
            *(void *)unint64_t v38 = 0LL;
            double v31 = v38 + 8;
            while (v30 != v32)
            {
              __int16 v39 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }

            *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v38;
            *(void *)(a1 + 16) = v31;
            *(void *)(a1 + 24) = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }

          else
          {
            *(void *)double v30 = 0LL;
            double v31 = v30 + 8;
          }

          *(void *)(a1 + 16) = v31;
          double v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7LL || v40 + 8 > *((void *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }

          *(v31 - 1) = *(void *)(*(void *)this + v40);
          __int128 v28 = *((void *)this + 2);
          __int128 v27 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v27;
        }

        PB::Reader::recallMark(this, v54);
      }

      else
      {
        if ((_DWORD)v25 == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v26);
LABEL_75:
          *((void *)this + 1) += 8LL;
          goto LABEL_76;
        }

        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0) {
          return 0LL;
        }
      }

      __int128 v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v28);
          __int128 v29 = *((void *)this + 1) + 8LL;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          double v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          double v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          uint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          BOOL v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          int v34 = *((void *)this + 1);
          double v35 = *((void *)this + 2);
          std::string::size_type v36 = *(void *)this;
          if (v34 <= 0xFFFFFFFFFFFFFFF5LL && v34 + 10 <= v35)
          {
            double v37 = 0;
            unint64_t v38 = 0;
            __int16 v39 = 0LL;
            do
            {
              double v40 = v34 + 1;
              *((void *)this + 1) = v34 + 1;
              __int128 v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0) {
                goto LABEL_185;
              }
              v37 += 7;
              int v34 = v40;
              unint64_t v21 = v38++ > 8;
            }

            while (!v21);
LABEL_141:
            LODWORD(v39) = 0;
            goto LABEL_185;
          }

          uint64_t v95 = 0;
          uint64_t v96 = 0;
          __int16 v39 = 0LL;
          if (v35 <= v34) {
            double v35 = *((void *)this + 1);
          }
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v97 = v34 + 1;
              uint64_t v98 = *(_BYTE *)(v36 + v34);
              *((void *)this + 1) = v97;
              v39 |= (unint64_t)(v98 & 0x7F) << v95;
              if (v98 < 0)
              {
                v95 += 7;
                int v34 = v97;
                unint64_t v21 = v96++ > 8;
                if (v21) {
                  goto LABEL_141;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v39) = 0;
              }
            }

            break;
          }

  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          unint64_t v25 = operator new(0xA0uLL);
          __int128 v28 = sub_1010F2D60((uint64_t)v25);
          __int128 v29 = *(void *)(a1 + 32);
          *(void *)(a1 + 32) = v25;
          if (v29)
          {
            (*(void (**)(uint64_t, double))(*(void *)v29 + 8LL))(v29, v28);
            unint64_t v25 = *(void **)(a1 + 32);
          }

          if (PB::Reader::placeMark(this, v59, v26, v27)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v25 + 16LL))(v25, this) & 1) != 0)
          {
            goto LABEL_27;
          }

          return 0LL;
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v59, v24, a4) & 1) != 0) {
              return 0LL;
            }
            double v30 = *((void *)this + 1);
            double v31 = *((void *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              BOOL v33 = *(char **)(a1 + 16);
              uint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                double v35 = (char *)*v10;
                std::string::size_type v36 = (v33 - (_BYTE *)*v10) >> 2;
                double v37 = v36 + 1;
                unint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  double v37 = v38 >> 1;
                }
                else {
                  __int16 v39 = v37;
                }
                if (v39)
                {
                  double v40 = (char *)sub_10000956C(v11, v39);
                  double v35 = *(char **)(a1 + 8);
                  BOOL v33 = *(char **)(a1 + 16);
                }

                else
                {
                  double v40 = 0LL;
                }

                __int128 v41 = &v40[4 * v36];
                *(_DWORD *)__int128 v41 = 0;
                int v34 = v41 + 4;
                while (v33 != v35)
                {
                  __int128 v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[4 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }

              else
              {
                *(_DWORD *)BOOL v33 = 0;
                int v34 = v33 + 4;
              }

              *(void *)(a1 + 16) = v34;
              __int128 v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
              double v31 = *((void *)this + 2);
              double v30 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v30;
            }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v15 >> 3))
      {
        case 1u:
          __int128 v27 = operator new(0x50uLL);
          *(void *)__int128 v27 = &off_1018A0538;
          v27[19] = 0;
          __int128 v28 = *(void *)(a1 + 48);
          *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v27;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
            __int128 v27 = *(_DWORD **)(a1 + 48);
          }

          if (PB::Reader::placeMark(this, v93, v25, v26)
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v27 + 16LL))(v27, this) & 1) != 0)
          {
            goto LABEL_27;
          }

          return 0LL;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 4u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_111;
              }
              v32 += 7;
              __int128 v29 = v35;
              double v18 = v33++ > 8;
            }

            while (!v18);
LABEL_81:
            int v34 = 0LL;
            goto LABEL_111;
          }

          int64_t v67 = 0;
          int64_t v68 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              int v34 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v69 = v29 + 1;
              uint64_t v70 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v69;
              v34 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                __int128 v29 = v69;
                double v18 = v68++ > 8;
                if (v18) {
                  goto LABEL_81;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                int v34 = 0LL;
              }
            }

            break;
          }

  uint64_t v6 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_DWORD *)(a1 + 80) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }

  uint64_t v6 = *(_BYTE *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 84) = v3;
  *(_BYTE *)(a1 + 80) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "pocketFlag", *(_BYTE *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 84) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v43 = *((void *)this + 1);
          double v44 = *((void *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            __int128 v46 = *(char **)(a1 + 16);
            double v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              __int128 v48 = (char *)*v12;
              __int128 v49 = (v46 - (_BYTE *)*v12) >> 3;
              __int128 v50 = v49 + 1;
              __int128 v51 = v45 - (void)v48;
              if (v51 >> 2 > v50) {
                __int128 v50 = v51 >> 2;
              }
              else {
                __int128 v52 = v50;
              }
              if (v52)
              {
                __int128 v53 = (char *)sub_1000071BC(v13, v52);
                __int128 v48 = *(char **)(a1 + 8);
                __int128 v46 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v53 = 0LL;
              }

              __int128 v54 = &v53[8 * v49];
              *(void *)__int128 v54 = 0LL;
              __int128 v47 = v54 + 8;
              while (v46 != v48)
              {
                __int128 v55 = *((void *)v46 - 1);
                v46 -= 8;
                *((void *)v54 - 1) = v55;
                v54 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }

            else
            {
              *(void *)__int128 v46 = 0LL;
              __int128 v47 = v46 + 8;
            }

            *(void *)(a1 + 16) = v47;
            __int128 v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFF7LL || v56 + 8 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v47 - 1) = *(void *)(*(void *)this + v56);
            double v44 = *((void *)this + 2);
            __int128 v43 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v43;
          }

          goto LABEL_83;
        }

        double v61 = *(char **)(a1 + 16);
        uint64_t v60 = *(void *)(a1 + 24);
        if ((unint64_t)v61 >= v60)
        {
          int64_t v68 = (char *)*v12;
          uint64_t v69 = (v61 - (_BYTE *)*v12) >> 3;
          uint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61) {
LABEL_128:
          }
            sub_100007008();
          uint64_t v71 = v60 - (void)v68;
          if (v71 >> 2 > v70) {
            uint64_t v70 = v71 >> 2;
          }
          else {
            uint64_t v72 = v70;
          }
          if (v72)
          {
            uint64_t v73 = (char *)sub_1000071BC(v13, v72);
            int64_t v68 = *(char **)(a1 + 8);
            double v61 = *(char **)(a1 + 16);
          }

          else
          {
            uint64_t v73 = 0LL;
          }

          uint64_t v76 = &v73[8 * v69];
          *(void *)uint64_t v76 = 0LL;
          uint64_t v59 = v76 + 8;
          while (v61 != v68)
          {
            uint64_t v77 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v76 - 1) = v77;
            v76 -= 8;
          }

          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v76;
          *(void *)(a1 + 16) = v59;
          *(void *)(a1 + 24) = &v73[8 * v72];
          if (v68) {
            operator delete(v68);
          }
        }

        else
        {
          *(void *)double v61 = 0LL;
          uint64_t v59 = v61 + 8;
        }

        *(void *)(a1 + 16) = v59;
LABEL_114:
        uint64_t v78 = *((void *)this + 1);
        if (v78 > 0xFFFFFFFFFFFFFFF7LL || v78 + 8 > *((void *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }

        *(v59 - 1) = *(void *)(*(void *)this + v78);
        goto LABEL_118;
      }

      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        __int128 v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
LABEL_118:
        *((void *)this + 1) += 8LL;
        goto LABEL_119;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_119:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0) {
        return 0LL;
      }
      __int128 v29 = *((void *)this + 1);
      double v30 = *((void *)this + 2);
      while (v29 < v30 && !*((_BYTE *)this + 24))
      {
        uint64_t v32 = *(char **)(a1 + 40);
        double v31 = *(void *)(a1 + 48);
        if ((unint64_t)v32 >= v31)
        {
          int v34 = (char *)*v10;
          double v35 = (v32 - (_BYTE *)*v10) >> 3;
          std::string::size_type v36 = v35 + 1;
          double v37 = v31 - (void)v34;
          if (v37 >> 2 > v36) {
            std::string::size_type v36 = v37 >> 2;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            __int16 v39 = (char *)sub_1000071BC(v11, v38);
            int v34 = *(char **)(a1 + 32);
            uint64_t v32 = *(char **)(a1 + 40);
          }

          else
          {
            __int16 v39 = 0LL;
          }

          double v40 = &v39[8 * v35];
          *(void *)double v40 = 0LL;
          BOOL v33 = v40 + 8;
          while (v32 != v34)
          {
            __int128 v41 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }

          *(void *)(a1 + 32) = v40;
          *(void *)(a1 + 40) = v33;
          *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }

        else
        {
          *(void *)uint64_t v32 = 0LL;
          BOOL v33 = v32 + 8;
        }

        *(void *)(a1 + 40) = v33;
        __int128 v42 = *((void *)this + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7LL || v42 + 8 > *((void *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }

        *(v33 - 1) = *(void *)(*(void *)this + v42);
        double v30 = *((void *)this + 2);
        __int128 v29 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v29;
      }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        double v30 = *((void *)this + 1);
        if (v30 >= *((void *)this + 2))
        {
          BOOL v33 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          double v31 = v30 + 1;
          uint64_t v32 = *(unsigned __int8 *)(*(void *)this + v30);
          *((void *)this + 1) = v31;
          BOOL v33 = v32 != 0;
        }

        *(_BYTE *)(a1 + 40) = v33;
        goto LABEL_81;
      }

      if ((_DWORD)v25 == 2) {
        break;
      }
      if ((_DWORD)v25 == 1)
      {
        __int128 v28 = (char *)operator new(0x48uLL);
        *(void *)__int128 v28 = &off_1018A06C0;
        *((_DWORD *)v28 + 16) = 0;
        *(_OWORD *)(v28 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_OWORD *)(v28 + 40) = 0u;
        __int128 v29 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
          __int128 v28 = *(char **)(a1 + 32);
        }

        if (!PB::Reader::placeMark(this, v61, v26, v27)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v28 + 16LL))(v28, this) & 1) == 0)
        {
          return 0LL;
        }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      __int128 v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        __int128 v42 = *((void *)this + 1);
        __int128 v43 = *((void *)this + 2);
        double v44 = *(void *)this;
        if (v42 > 0xFFFFFFFFFFFFFFF5LL || v42 + 10 > v43)
        {
          int64_t v67 = 0;
          int64_t v68 = 0;
          __int128 v47 = 0LL;
          if (v43 <= v42) {
            __int128 v43 = *((void *)this + 1);
          }
          while (1)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }

            uint64_t v69 = v42 + 1;
            uint64_t v70 = *(_BYTE *)(v44 + v42);
            *((void *)this + 1) = v69;
            v47 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v67 += 7;
            __int128 v42 = v69;
            unint64_t v20 = v68++ > 8;
            if (v20)
            {
LABEL_90:
              LODWORD(v47) = 0;
              goto LABEL_114;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v47) = 0;
          }
        }

        else
        {
          double v45 = 0;
          __int128 v46 = 0;
          __int128 v47 = 0LL;
          while (1)
          {
            __int128 v48 = v42 + 1;
            *((void *)this + 1) = v42 + 1;
            __int128 v49 = *(_BYTE *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v45 += 7;
            __int128 v42 = v48;
            unint64_t v20 = v46++ > 8;
            if (v20) {
              goto LABEL_90;
            }
          }
        }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v12 >> 3) == 1)
      {
        sub_10119BEF0(v8);
        unint64_t v21 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v25, v22, v23)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "isDistanceValid", *(_BYTE *)(a1 + 89));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

      double v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      unint64_t v25 = v15 >> 3;
      if ((_DWORD)v25 == 2)
      {
        if ((_DWORD)v24 == 2)
        {
          if ((PB::Reader::placeMark(this, v58, v24, a4) & 1) != 0) {
            return 0LL;
          }
          double v31 = *((void *)this + 1);
          uint64_t v32 = *((void *)this + 2);
          while (v31 < v32 && !*((_BYTE *)this + 24))
          {
            int v34 = *(char **)(a1 + 16);
            BOOL v33 = *(void *)(a1 + 24);
            if ((unint64_t)v34 >= v33)
            {
              std::string::size_type v36 = (char *)*v10;
              double v37 = (v34 - (_BYTE *)*v10) >> 3;
              unint64_t v38 = v37 + 1;
              __int16 v39 = v33 - (void)v36;
              if (v39 >> 2 > v38) {
                unint64_t v38 = v39 >> 2;
              }
              else {
                double v40 = v38;
              }
              if (v40)
              {
                __int128 v41 = (char *)sub_1000071BC(v11, v40);
                std::string::size_type v36 = *(char **)(a1 + 8);
                int v34 = *(char **)(a1 + 16);
              }

              else
              {
                __int128 v41 = 0LL;
              }

              __int128 v42 = &v41[8 * v37];
              *(void *)__int128 v42 = 0LL;
              double v35 = v42 + 8;
              while (v34 != v36)
              {
                __int128 v43 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v42 - 1) = v43;
                v42 -= 8;
              }

              *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v42;
              *(void *)(a1 + 16) = v35;
              *(void *)(a1 + 24) = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }

            else
            {
              *(void *)int v34 = 0LL;
              double v35 = v34 + 8;
            }

            *(void *)(a1 + 16) = v35;
            double v44 = *((void *)this + 1);
            if (v44 > 0xFFFFFFFFFFFFFFF7LL || v44 + 8 > *((void *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }

            *(v35 - 1) = *(void *)(*(void *)this + v44);
            uint64_t v32 = *((void *)this + 2);
            double v31 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v31;
          }

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_154;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 72) |= 1u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_154;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v28);
LABEL_31:
          *((void *)this + 1) += 4LL;
          goto LABEL_156;
        case 3u:
          *(_BYTE *)(a1 + 72) |= 4u;
          __int128 v29 = *((void *)this + 1);
          double v30 = *((void *)this + 2);
          double v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            BOOL v33 = 0;
            int v34 = 0LL;
            do
            {
              double v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              std::string::size_type v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_134;
              }
              v32 += 7;
              __int128 v29 = v35;
              unint64_t v20 = v33++ > 8;
            }

            while (!v20);
LABEL_100:
            LODWORD(v34) = 0;
            goto LABEL_134;
          }

          uint64_t v73 = 0;
          uint64_t v74 = 0;
          int v34 = 0LL;
          if (v30 <= v29) {
            double v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v75 = v29 + 1;
              uint64_t v76 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v75;
              v34 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                __int128 v29 = v75;
                unint64_t v20 = v74++ > 8;
                if (v20) {
                  goto LABEL_100;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }

            break;
          }

  uint64_t v12 = *(_BYTE *)(a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(_BYTE *)(result + 45) = v12;
  if ((*(_WORD *)(a2 + 48) & 0x100) != 0) {
    goto LABEL_22;
  }
  return result;
}

      unint64_t v23 = v15 & 7;
      if ((_DWORD)v23 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      if ((v15 >> 3) == 1)
      {
        if ((_DWORD)v23 == 2)
        {
          if ((PB::Reader::placeMark(this, v72, v23, a4) & 1) != 0) {
            return 0LL;
          }
          if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
          {
            double v24 = (char *)a1[2];
            do
            {
              if ((unint64_t)v24 >= *v11)
              {
                unint64_t v25 = (char *)*v10;
                unint64_t v26 = (v24 - (_BYTE *)*v10) >> 2;
                __int128 v27 = v26 + 1;
                __int128 v28 = *v11 - (void)v25;
                if (v28 >> 1 > v27) {
                  __int128 v27 = v28 >> 1;
                }
                else {
                  __int128 v29 = v27;
                }
                if (v29)
                {
                  double v30 = (char *)sub_10000956C((uint64_t)v11, v29);
                  unint64_t v25 = (char *)a1[1];
                  double v24 = (char *)a1[2];
                }

                else
                {
                  double v30 = 0LL;
                }

                double v31 = &v30[4 * v26];
                *(_DWORD *)double v31 = 0;
                uint64_t v32 = v31 + 4;
                while (v24 != v25)
                {
                  BOOL v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v31 - 1) = v33;
                  v31 -= 4;
                }

                a1[1] = v31;
                a1[2] = v32;
                a1[3] = &v30[4 * v29];
                if (v25) {
                  operator delete(v25);
                }
                double v24 = v32;
              }

              else
              {
                *(_DWORD *)double v24 = 0;
                v24 += 4;
              }

              a1[2] = v24;
              double v35 = *((void *)this + 1);
              int v34 = *((void *)this + 2);
              std::string::size_type v36 = *(void *)this;
              double v37 = v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v34;
              if (!v37)
              {
                __int128 v43 = 0;
                double v44 = 0;
                double v45 = 0LL;
                while (1)
                {
                  __int128 v46 = v35 + 1;
                  *((void *)this + 1) = v35 + 1;
                  __int128 v47 = *(_BYTE *)(v36 + v35);
                  v45 |= (unint64_t)(v47 & 0x7F) << v43;
                  if ((v47 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v43 += 7;
                  double v35 = v46;
                  double v37 = v44++ > 8;
                  if (v37)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_65;
                  }
                }
              }

              unint64_t v38 = 0;
              __int16 v39 = 0;
              double v45 = 0LL;
              if (v34 <= v35) {
                double v40 = *((void *)this + 1);
              }
              else {
                double v40 = *((void *)this + 2);
              }
              while (1)
              {
                if (v40 == v35)
                {
                  *((_BYTE *)this + 24) = 1;
                  *((_DWORD *)v24 - 1) = 0;
                  goto LABEL_81;
                }

                __int128 v41 = v35++;
                __int128 v42 = *(_BYTE *)(v36 + v41);
                *((void *)this + 1) = v35;
                v45 |= (unint64_t)(v42 & 0x7F) << v38;
                if ((v42 & 0x80) == 0) {
                  break;
                }
                v38 += 7;
                double v37 = v39++ > 8;
                if (v37)
                {
                  LODWORD(v45) = 0;
                  goto LABEL_64;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v45) = 0;
              }
LABEL_64:
              __int128 v46 = v41 + 1;
LABEL_65:
              *((_DWORD *)v24 - 1) = v45;
            }

            while (v46 < v34 && !*((_BYTE *)this + 24));
          }

      if ((v12 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      unint64_t v21 = v12 >> 3;
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        unint64_t v25 = *((void *)this + 1);
        if (v25 <= 0xFFFFFFFFFFFFFFF7LL && v25 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v25);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v21 == 1)
      {
        double v22 = (void **)operator new(0x18uLL);
        v22[1] = 0LL;
        v22[2] = 0LL;
        void *v22 = 0LL;
        __int128 __p = 0LL;
        unint64_t v23 = *v8;
        *uint64_t v8 = v22;
        if (v23)
        {
          sub_10058A4FC((int)v8, v23);
          double v24 = (void **)__p;
          __int128 __p = 0LL;
          if (v24) {
            sub_10058A4FC((int)&__p, v24);
          }
        }

        PB::Reader::read(this, *v8);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    __int128 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      double v18 = v2 + 1;
      unint64_t v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      uint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        uint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      unint64_t v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        uint64_t v6 = 0;
        return v6 == 0;
      }

      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 164) |= 2u;
          __int128 v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v27);
          goto LABEL_153;
        case 2u:
          *(_DWORD *)(a1 + 164) |= 0x800u;
          __int128 v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 10std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_265;
        case 3u:
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          __int128 v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_265;
        case 4u:
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          double v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_265;
        case 5u:
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          double v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_265;
        case 6u:
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          uint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_265;
        case 7u:
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          BOOL v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_265;
        case 8u:
          *(_DWORD *)(a1 + 164) |= 0x80000u;
          int v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_265;
        case 9u:
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          double v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_265;
        case 0xAu:
          *(_DWORD *)(a1 + 164) |= 0x200000u;
          std::string::size_type v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 14std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_265;
        case 0xBu:
          *(_DWORD *)(a1 + 164) |= 0x100u;
          double v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_265;
        case 0xCu:
          *(_DWORD *)(a1 + 164) |= 0x200u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_265;
        case 0xDu:
          *(_DWORD *)(a1 + 164) |= 0x400u;
          __int16 v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_265;
        case 0xEu:
          *(_DWORD *)(a1 + 164) |= 0x80u;
          double v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_265;
        case 0xFu:
          if ((_DWORD)v26 != 2)
          {
            __int16 v140 = *(char **)(a1 + 40);
            __int16 v139 = *(void *)(a1 + 48);
            if ((unint64_t)v140 >= v139)
            {
              __int128 v156 = (char *)*v12;
              __int128 v157 = (v140 - (_BYTE *)*v12) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_277:
              }
                sub_100007008();
              __int16 v159 = v139 - (void)v156;
              if (v159 >> 1 > v158) {
                v158 = v159 >> 1;
              }
              else {
                uint64_t v160 = v158;
              }
              if (v160)
              {
                __int16 v161 = (char *)sub_10000956C(v13, v160);
                __int128 v156 = *(char **)(a1 + 32);
                __int16 v140 = *(char **)(a1 + 40);
              }

              else
              {
                __int16 v161 = 0LL;
              }

              __int128 v168 = &v161[4 * v157];
              *(_DWORD *)__int128 v168 = 0;
              __int16 v141 = v168 + 4;
              while (v140 != v156)
              {
                uint64_t v169 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }

              *(void *)(a1 + 32) = v168;
              *(void *)(a1 + 40) = v141;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v161[4 * v160];
              if (v156) {
                operator delete(v156);
              }
            }

            else
            {
              *(_DWORD *)__int16 v140 = 0;
              __int16 v141 = v140 + 4;
            }

            *(void *)(a1 + 40) = v141;
            goto LABEL_261;
          }

          if ((PB::Reader::placeMark(this, v175, v26, a4) & 1) != 0) {
            return 0LL;
          }
          __int128 v41 = *((void *)this + 1);
          __int128 v42 = *((void *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            double v44 = *(char **)(a1 + 40);
            __int128 v43 = *(void *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              __int128 v46 = (char *)*v12;
              __int128 v47 = (v44 - (_BYTE *)*v12) >> 2;
              __int128 v48 = v47 + 1;
              __int128 v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                __int128 v48 = v49 >> 1;
              }
              else {
                __int128 v50 = v48;
              }
              if (v50)
              {
                __int128 v51 = (char *)sub_10000956C(v13, v50);
                __int128 v46 = *(char **)(a1 + 32);
                double v44 = *(char **)(a1 + 40);
              }

              else
              {
                __int128 v51 = 0LL;
              }

              __int128 v52 = &v51[4 * v47];
              *(_DWORD *)__int128 v52 = 0;
              double v45 = v52 + 4;
              while (v44 != v46)
              {
                __int128 v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }

              *(void *)(a1 + 32) = v52;
              *(void *)(a1 + 40) = v45;
              *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }

            else
            {
              *(_DWORD *)double v44 = 0;
              double v45 = v44 + 4;
            }

            *(void *)(a1 + 40) = v45;
            __int128 v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
              goto LABEL_217;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
            __int128 v42 = *((void *)this + 2);
            __int128 v41 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v41;
          }

          goto LABEL_218;
        case 0x10u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v175, v26, a4) & 1) != 0) {
              return 0LL;
            }
            __int128 v55 = *((void *)this + 1);
            __int128 v56 = *((void *)this + 2);
            while (v55 < v56 && !*((_BYTE *)this + 24))
            {
              uint64_t v58 = *(char **)(a1 + 16);
              __int128 v57 = *(void *)(a1 + 24);
              if ((unint64_t)v58 >= v57)
              {
                uint64_t v60 = (char *)*v10;
                double v61 = (v58 - (_BYTE *)*v10) >> 2;
                double v62 = v61 + 1;
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 1 > v62) {
                  double v62 = v63 >> 1;
                }
                else {
                  double v64 = v62;
                }
                if (v64)
                {
                  uint64_t v65 = (char *)sub_10000956C(v11, v64);
                  uint64_t v60 = *(char **)(a1 + 8);
                  uint64_t v58 = *(char **)(a1 + 16);
                }

                else
                {
                  uint64_t v65 = 0LL;
                }

                int64_t v66 = &v65[4 * v61];
                *(_DWORD *)int64_t v66 = 0;
                uint64_t v59 = v66 + 4;
                while (v58 != v60)
                {
                  int64_t v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }

                *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v66;
                *(void *)(a1 + 16) = v59;
                *(void *)(a1 + 24) = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v58 = 0;
                uint64_t v59 = v58 + 4;
              }

              *(void *)(a1 + 16) = v59;
              int64_t v68 = *((void *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2))
              {
LABEL_217:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v59 - 1) = *(_DWORD *)(*(void *)this + v68);
              __int128 v56 = *((void *)this + 2);
              __int128 v55 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v55;
            }

  uint64_t result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 104) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "centripetalAccelY", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

        uint64_t v10 = v22;
        if (v22 < v24)
        {
          __int128 v28 = v24;
          do
          {
            uint64_t v118 = *(_OWORD *)v10;
            uint64_t v127 = *((_OWORD *)v10 + 1);
            __int128 v29 = *((_OWORD *)v28 + 1);
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v28;
            *((_OWORD *)v10 + 1) = v29;
            *(_OWORD *)__int128 v28 = v118;
            *((_OWORD *)v28 + 1) = v127;
            double v30 = *a3;
            double v31 = vabdd_f64(*a3, v16);
            do
            {
              uint64_t v32 = v10[6];
              v10 += 4;
            }

            while (vabdd_f64(v30, v32) < v31);
            do
            {
              BOOL v33 = *(v28 - 2);
              v28 -= 4;
            }

            while (vabdd_f64(v30, v33) >= v31);
          }

          while (v10 < v28);
        }

        int v34 = v10 - 4;
        if (v10 - 4 != a1)
        {
          double v35 = *((_OWORD *)v10 - 1);
          *(_OWORD *)a1 = *(_OWORD *)v34;
          *((_OWORD *)a1 + 1) = v35;
        }

        *(_OWORD *)int v34 = v114;
        *(v10 - 2) = v16;
        *((void *)v10 - 1) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_1012051FC(a1, v10 - 4, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }

        std::string::size_type v36 = sub_101205BAC(a1, v10 - 4, a3);
        if (!sub_101205BAC(v10, a2, a3))
        {
          if (v36) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v10 - 4;
        if (!v36) {
          goto LABEL_1;
        }
        return;
    }
  }