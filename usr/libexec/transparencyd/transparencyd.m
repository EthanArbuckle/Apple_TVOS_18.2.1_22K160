void sub_100004218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100004234(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (v15)
  {
    if (qword_1002E6380 != -1) {
      dispatch_once(&qword_1002E6380, &stru_1002764E0);
    }
    v16 = (os_log_s *)qword_1002E6388;
    if (os_log_type_enabled((os_log_t)qword_1002E6388, OS_LOG_TYPE_ERROR))
    {
      int v21 = 141558530;
      uint64_t v22 = 1752392040LL;
      __int16 v23 = 2112;
      id v24 = v11;
      __int16 v25 = 2112;
      id v26 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "verification failed for %{mask.hash}@: %@",  (uint8_t *)&v21,  0x20u);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
    uint64_t v18 = *(void *)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) data]);
    LOBYTE(v18) = [v17 failSMTsIfOverMMD:v18 skipOptInOut:0 proof:v19 underlyingError:v15 errorCode:-306 analyticsData:*(void *)(a1 + 56)];

    if ((v18 & 1) == 0) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
    }
  }

  else
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v20 verifyKTSMTsMerged:*(void *)(a1 + 40) mapLeaf:v13 analyticsData:*(void *)(a1 + 56)];
  }
}

void sub_100004418(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_1000046A0(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = 0LL;
  unsigned __int8 v5 = [v3 validatePendingSMTs:a2 singleQuery:v4 error:&v11];
  id v6 = v11;
  if ((v5 & 1) == 0)
  {
    if (qword_1002E6380 != -1) {
      dispatch_once(&qword_1002E6380, &stru_100276528);
    }
    v7 = (void *)qword_1002E6388;
    if (os_log_type_enabled((os_log_t)qword_1002E6388, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void **)(a1 + 40);
      v9 = v7;
      v10 = (void *)objc_claimAutoreleasedReturnValue([v8 rpcId]);
      *(_DWORD *)buf = 138543618;
      id v13 = v10;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "failed to validate pending SMTs with rpcId %{public}@: %@",  buf,  0x16u);
    }
  }
}

void sub_1000047CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_1000047FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_10000482C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_1000048F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_100004A70(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 rpcType])
  {
    if ([v3 rpcType] == (id)1)
    {
      [*(id *)(a1 + 32) validatePendingSMTsForBatchQuery:v3];
    }

    else
    {
      if (qword_1002E6380 != -1) {
        dispatch_once(&qword_1002E6380, &stru_1002765D0);
      }
      uint64_t v4 = (void *)qword_1002E6388;
      if (os_log_type_enabled((os_log_t)qword_1002E6388, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v5 = v4;
        int v6 = 134217984;
        id v7 = [v3 rpcType];
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "unknown server rpc type: %lld",  (uint8_t *)&v6,  0xCu);
      }
    }
  }

  else
  {
    [*(id *)(a1 + 32) validatePendingSMTsForSingleQuery:v3];
  }
}

void sub_100004B8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_100004BBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6388;
  qword_1002E6388 = (uint64_t)v1;
}

void sub_1000051D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005200(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005230(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005260(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005290(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_1000052C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_1000052F0(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allKeys]);

    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Consistency failed for applications: %@",  v6));

    v50[0] = NSMultipleUnderlyingErrorsKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
    v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allValues]);
    v50[1] = NSLocalizedDescriptionKey;
    v51[0] = v9;
    v51[1] = v7;
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  2LL));

    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyErrorVerify",  -382LL,  v10));
    v39 = v5;
    v36 = (void *)v11;
    v37 = (void *)v10;
    if (([v5 containsObject:kKTApplicationIdentifierIDS] & 1) != 0
      || [v5 containsObject:kKTApplicationIdentifierTLT])
    {
      [*(id *)(a1 + 32) setError:v11];
    }

    else
    {
      if (qword_1002E6390 != -1) {
        dispatch_once(&qword_1002E6390, &stru_1002766F8);
      }
      v31 = (void *)qword_1002E6398;
      if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_ERROR))
      {
        v32 = *(void **)(a1 + 32);
        v33 = v31;
        v34 = (void *)objc_claimAutoreleasedReturnValue([v32 errors]);
        v35 = (void *)objc_claimAutoreleasedReturnValue([v34 allValues]);
        *(_DWORD *)buf = 138543618;
        uint64_t v47 = v7;
        __int16 v48 = 2112;
        v49 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}@: %@", buf, 0x16u);
      }
    }

    v38 = (void *)v7;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) failedRevs]);
    id v14 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v42;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v42 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverHints]);
          v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v18]);
          [v12 appendFormat:@"%@/%@,", v18, v20];

          int v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) failedRevs]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v18]);
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 componentsJoinedByString:@","]);
          [v13 appendFormat:@"%@:%@", v18, v23];
        }

        id v15 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      }

      while (v15);
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundOpId]);
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 smDataStore]);
    v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:",  v24,  v26,  v13,  v27,  v12,  v36);
  }

  if (qword_1002E6390 != -1) {
    dispatch_once(&qword_1002E6390, &stru_100276718);
  }
  v28 = (os_log_s *)qword_1002E6398;
  if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VerifyConsistency: end", buf, 2u);
  }

  v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v29 addOperation:v30];
}

void sub_1000057F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005820(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005E64(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005E94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005EC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100005EF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100006250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100006288(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

uint64_t sub_1000062B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000062C8(uint64_t a1)
{
}

void sub_1000062D0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dataStore]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 createDownloadRecord:3 moc:v4 application:*(void *)(a1 + 40)]);

  objc_msgSend(v7, "setStartSLHRevision:", objc_msgSend(*(id *)(a1 + 48), "longLongValue"));
  uint64_t v8 = *(void *)(a1 + 56);
  id v23 = 0LL;
  v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v8,  0LL,  &v23));
  id v10 = v23;
  [v7 setRevisions:v9];

  if (qword_1002E6390 != -1) {
    dispatch_once(&qword_1002E6390, &stru_100276800);
  }
  uint64_t v11 = (void *)qword_1002E6398;
  if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 64);
    id v14 = v11;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 downloadId]);
    *(_DWORD *)buf = 138543874;
    uint64_t v25 = v12;
    __int16 v26 = 2114;
    uint64_t v27 = v13;
    __int16 v28 = 2114;
    v29 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "fetching consistency proof for %{public}@ %{public}@ with downloadId %{public}@",  buf,  0x20u);
  }

  uint64_t v16 = objc_claimAutoreleasedReturnValue([v7 downloadId]);
  uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v19 dataStore]);
  id v22 = v10;
  [v20 persistWithError:&v22];
  id v21 = v22;
}

void sub_1000064F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100006520(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  v9 = (void *)objc_claimAutoreleasedReturnValue([v8 publicKeyStore]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 applicationPublicKeyStore:*(void *)(a1 + 32)]);

  if ([*(id *)(a1 + 32) isEqual:kKTApplicationIdentifierTLT])
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 publicKeyStore]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 tltKeyStore]);

    id v10 = (void *)v13;
  }

  id v14 = objc_alloc(&OBJC_CLASS___KTContextVerifier);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dataStore]);
  v57 = -[KTContextVerifier initWithApplicationKeyStore:dataStore:applicationID:]( v14,  "initWithApplicationKeyStore:dataStore:applicationID:",  v10,  v16,  *(void *)(a1 + 32));

  uint64_t v68 = 0LL;
  v69 = &v68;
  uint64_t v70 = 0x3032000000LL;
  v71 = sub_1000062B8;
  v72 = sub_1000062C8;
  id v73 = 0LL;
  if (!v5 || v6)
  {
    if (qword_1002E6390 != -1) {
      dispatch_once(&qword_1002E6390, &stru_100276848);
    }
    __int16 v26 = (os_log_s *)qword_1002E6398;
    if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v75 = v27;
      __int16 v76 = 2112;
      id v77 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Failed to fetch consistency proof downloadId %{public}@: %@",  buf,  0x16u);
    }

    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorNetwork,  -145LL,  @"empty consistency proof response"));
    }
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    v29 = (void *)objc_claimAutoreleasedReturnValue([v28 dataStore]);
    uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    v32 = (void *)objc_claimAutoreleasedReturnValue([v31 logClient]);
    [v29 failHeadDownload:v30 failure:v6 logClient:v32];

    v33 = v69;
    id v34 = v6;
    id v23 = (id)v33[5];
    v33[5] = (uint64_t)v34;
  }

  else
  {
    if ([v5 status] == 1)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 dataStore]);
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      id v67 = 0LL;
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472LL;
      v59[2] = sub_100006CC4;
      v59[3] = &unk_1002768D0;
      v60 = v57;
      id v20 = v5;
      uint64_t v21 = *(void *)(a1 + 48);
      v65 = &v68;
      uint64_t v66 = v21;
      id v61 = v20;
      id v62 = WeakRetained;
      id v63 = *(id *)(a1 + 32);
      id v64 = *(id *)(a1 + 40);
      unsigned __int8 v22 = [v18 performAndWaitForDownloadId:v19 error:&v67 block:v59];
      id v23 = v67;

      if ((v22 & 1) == 0)
      {
        if (qword_1002E6390 != -1) {
          dispatch_once(&qword_1002E6390, &stru_1002768F0);
        }
        id v24 = (os_log_s *)qword_1002E6398;
        if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
          *(_DWORD *)buf = 138543618;
          uint64_t v75 = v25;
          __int16 v76 = 2112;
          id v77 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "failed to find downloadId %{public}@: %@",  buf,  0x16u);
        }
      }
    }

    else
    {
      if (qword_1002E6390 != -1) {
        dispatch_once(&qword_1002E6390, &stru_100276868);
      }
      v35 = (os_log_s *)(id)qword_1002E6398;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        unsigned int v37 = [v5 status];
        *(_DWORD *)buf = 138543618;
        uint64_t v75 = v36;
        __int16 v76 = 1024;
        LODWORD(v77) = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "server failed to produce consistency proof downloadId %{public}@: %d",  buf,  0x12u);
      }

      signed int v38 = [v5 status];
      id v39 = [v5 status];
      uint64_t v40 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorServer,  v38,  @"server failed to produce consistency proof: %d",  v39));
      __int128 v41 = (void *)v69[5];
      v69[5] = v40;

      id v23 = (id)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v23 dataStore]);
      uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      uint64_t v44 = v69[5];
      v45 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      v46 = (void *)objc_claimAutoreleasedReturnValue([v45 logClient]);
      [v42 failHeadDownload:v43 failure:v44 logClient:v46];
    }

    id v34 = 0LL;
  }

  uint64_t v47 = (id *)(v69 + 5);
  id obj = (id)v69[5];
  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier failExpiredSTHsForType:error:](v57, "failExpiredSTHsForType:error:", 2LL, &obj));
  objc_storeStrong(v47, obj);
  if (v48 && [v48 count])
  {
    if (v5)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
      v50 = (void *)objc_claimAutoreleasedReturnValue([v49 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
    }

    else
    {
      v50 = 0LL;
    }

    v51 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
    objc_sync_enter(v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverHints]);
    [v52 setObject:v50 forKeyedSubscript:*(void *)(a1 + 32)];

    uint64_t v53 = v69[5];
    v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
    [v54 setObject:v53 forKeyedSubscript:*(void *)(a1 + 32)];

    v55 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained failedRevs]);
    [v55 setObject:v48 forKeyedSubscript:*(void *)(a1 + 32)];

    objc_sync_exit(v51);
  }

  v56 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained fetchGroup]);
  dispatch_group_leave(v56);

  _Block_object_dispose(&v68, 8);
}

void sub_100006C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100006C64(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100006C94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100006CC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [v3 startSLHRevision];

  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id obj = *(id *)(v8 + 40);
  id v9 = [v5 verifyConsistencyProofResponse:v6 startRevision:v7 receivedRevisions:v4 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 settings]);
    unsigned int v12 = [v11 allowsInternalSecurityPolicies];

    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"ConsistencyDownload",  *(void *)(a1 + 56)));
      uint64_t v14 = *(void *)(a1 + 64);
      v38[0] = @"requestedRevisions";
      v38[1] = @"receivedRevisions";
      v39[0] = v14;
      v39[1] = v4;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v39,  v38,  2LL));
      id v16 = [v15 mutableCopy];

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) metadata]);
      uint64_t v18 = kTransparencyResponseMetadataKeyServerHint;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

      if (v19)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) metadata]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v18]);
        [v16 setObject:v21 forKeyedSubscript:v18];
      }

      unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) metadata]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:@"APS"]);

      if (v23) {
        [v16 setObject:&__kCFBooleanTrue forKeyedSubscript:@"APS"];
      }
      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 logger]);
      [v25 logHardFailureForEventNamed:v13 withAttributes:v16];
    }

    if (qword_1002E6390 != -1) {
      dispatch_once(&qword_1002E6390, &stru_1002768A8);
    }
    __int16 v26 = (os_log_s *)qword_1002E6398;
    if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "consistency proof downloadId %{public}@: verification succeeded",  buf,  0xCu);
    }

    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    v29 = (void *)objc_claimAutoreleasedReturnValue([v28 logClient]);
    [v29 deleteDownloadId:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  }

  else
  {
    if (qword_1002E6390 != -1) {
      dispatch_once(&qword_1002E6390, &stru_100276888);
    }
    uint64_t v30 = (os_log_s *)qword_1002E6398;
    if (os_log_type_enabled((os_log_t)qword_1002E6398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = v31;
      __int16 v42 = 2112;
      uint64_t v43 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Consistency proof response verification failed for downloadId %{public}@: %@",  buf,  0x16u);
    }

    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    v29 = (void *)objc_claimAutoreleasedReturnValue([v28 dataStore]);
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 logClient]);
    [v29 failHeadDownload:v33 failure:v34 logClient:v36];
  }
}

void sub_1000070E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100007110(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100007140(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6398;
  qword_1002E6398 = (uint64_t)v1;
}

void sub_100007848(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_100007878(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_1000078A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_100007C10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_100007C40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

LABEL_36:
    uint64_t v31 = v40;
    goto LABEL_37;
  }

  __int16 v76 = v24;
  if (!a11)
  {
    v89 = v40;
    uint64_t v41 = [v28 validateAndUpdateWithSyncedLoggableDatas:v24 accountKey:v29 cloudDevices:v84 requestDate:v83 error:&v89];
    uint64_t v31 = v89;

    if ((v41 & 1) == 0)
    {
      uint64_t v75 = v28;
      if (qword_1002E63A0 != -1) {
        dispatch_once(&qword_1002E63A0, &stru_1002769F8);
      }
      uint64_t v34 = (void *)v33;
      v46 = (os_log_s *)qword_1002E63A8;
      unsigned int v37 = v29;
      id v23 = v78;
      if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 141558530;
        v93 = 1752392040LL;
        v94 = 2112;
        v95 = v82;
        v96 = 2112;
        v97 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Failed to verify %{mask.hash}@ transparent data against synced data: %@",  buf,  0x20u);
      }

      signed int v38 = 0LL;
      __int16 v26 = v81;
      goto LABEL_43;
    }

    uint64_t v40 = v31;
  }

  if (!a15)
  {
    uint64_t v43 = v30;
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext accountKeyServer](v30, "accountKeyServer"));
    v88 = v40;
    v45 = [v44 isAccountIdentity:v29 error:&v88];
    uint64_t v31 = v88;

    if ((v45 & 1) != 0)
    {
      uint64_t v34 = (void *)v33;
      if (a11)
      {
        v35 = v79;
        uint64_t v27 = v82;
        uint64_t v36 = v28;
        goto LABEL_21;
      }

      v50 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext cloudRecords](v43, "cloudRecords"));
      v51 = [v50 enforceCKOptInRecords];

      v52 = v43;
      if (!v51)
      {
LABEL_56:
        v58 = v52;
        v59 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext cloudRecords](v52, "cloudRecords"));
        v60 = [v59 enforceCKOptInRecords];

        id v24 = v76;
        if ((v60 & 1) != 0)
        {
          v35 = v79;
          uint64_t v27 = v82;
          uint64_t v36 = v28;
          unsigned int v37 = v29;
          goto LABEL_22;
        }

        id v61 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext optInServer](v58, "optInServer"));
        v86 = 0LL;
        v35 = (void *)objc_claimAutoreleasedReturnValue([v61 getOptInHistory:&v86]);
        id v62 = v86;

        uint64_t v75 = v28;
        if (!v62)
        {
          uint64_t v68 = 0LL;
          v85 = v31;
          v69 = v28;
          unsigned int v37 = v29;
          uint64_t v70 = [v69 validateOptInHistory:v35 accountKey:v29 responseTime:v83 error:&v85];
          id v62 = v85;

          if ((v70 & 1) != 0)
          {
            uint64_t v31 = v62;
            __int16 v26 = v81;
            uint64_t v27 = v82;
            uint64_t v34 = v80;
            uint64_t v36 = v75;
            goto LABEL_23;
          }

          signed int v38 = 0LL;
          __int16 v26 = v81;
          if (!a16)
          {
            uint64_t v31 = v62;
            uint64_t v27 = v82;
            goto LABEL_85;
          }

          uint64_t v31 = v62;
          uint64_t v27 = v82;
          v72 = a16;
          if (!v62) {
            goto LABEL_85;
          }
          goto LABEL_84;
        }

        id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 domain]);
        if ([v63 isEqualToString:kTransparencyErrorInterface])
        {
          id v64 = (char *)[v62 code];

          v65 = v64 + 308 == 0LL;
          uint64_t v27 = v82;
          unsigned int v37 = v29;
          if (v65)
          {
            __int16 v26 = v81;
            if (qword_1002E63A0 != -1) {
              dispatch_once(&qword_1002E63A0, &stru_100276A98);
            }
            uint64_t v66 = (os_log_s *)qword_1002E63A8;
            if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 141558530;
              v93 = 1752392040LL;
              v94 = 2112;
              v95 = v82;
              v96 = 2112;
              v97 = v62;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_ERROR,  "Failed to get %{mask.hash}@ opt-in history (waiting for first unlock): %@",  buf,  0x20u);
            }

            signed int v38 = 2LL;
LABEL_83:
            uint64_t v68 = v62;
            v72 = a16;
            if (!a16)
            {
LABEL_85:

              uint64_t v34 = v80;
              id v23 = v78;
              goto LABEL_47;
            }

  return v16;
}

        v57 = (v65 - 1) & v65;
        id v62 = __clz(__rbit64(v65)) + (v52 << 6);
      }

      id v67 = 16 * v62;
      uint64_t v68 = (uint64_t *)(*(void *)(v53 + 48) + v67);
      uint64_t v70 = *v68;
      v69 = v68[1];
      v71 = *(void *)(v53 + 56) + v67;
      v72 = *(void *)v71;
      id v73 = *(_BYTE *)(v71 + 8);
      if (v46)
      {
        if (v70 != v60 || v69 != v46)
        {
          uint64_t v75 = v46;
          __int16 v76 = v68[1];
          id v77 = v53;
          v78 = *v68;
          v79 = v54;
          v49 = _stringCompareWithSmolCheck(_:_:expecting:)(*v68, v76, v109, v75, 0LL);
          v54 = v79;
          uint64_t v70 = v78;
          v46 = v114;
          uint64_t v53 = v77;
          v69 = v76;
          v60 = v109;
          if ((v49 & 1) == 0)
          {
            swift_release(v112);
            swift_release(v107);
            goto LABEL_61;
          }
        }
      }

      if ((v73 & 1) == 0)
      {
        v80 = v53;
        swift_bridgeObjectRetain_n(v69, 2LL);
        swift_bridgeObjectRetain(v80);
        v82 = (os_log_s *)Logger.logObject.getter(v100);
        v101 = static os_log_type_t.error.getter(v82);
        if (os_log_type_enabled(v82, v101))
        {
          v84 = swift_slowAlloc(12LL, -1LL);
          v85 = swift_slowAlloc(32LL, -1LL);
          v116 = v85;
          *(_DWORD *)v84 = 136446210;
          swift_bridgeObjectRetain(v69);
          v115 = COERCE_DOUBLE(sub_10007C22C(v70, v69, &v116));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v84 + 4, v84 + 12);
          swift_bridgeObjectRelease_n(v69, 3LL);
          v86 = "No success in the last sample for element %{public}s. Returning aggregate result of false";
          v87 = v82;
          v88 = v101;
          v89 = (uint8_t *)v84;
          v90 = 12;
LABEL_54:
          _os_log_impl((void *)&_mh_execute_header, v87, v88, v86, v89, v90);
          swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v84, -1LL, -1LL);
          swift_release(v112);
          swift_release(v107);
          swift_release(v80);

LABEL_61:
          v96 = v113;
          goto LABEL_62;
        }

  __int16 v26 = swift_retain(_swiftEmptyArrayStorage);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_37;
  }
LABEL_23:
  if (v14 >= 1)
  {
    id v15 = 0LL;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      else {
        id v16 = (id)_swiftEmptyArrayStorage[v15 + 4];
      }
      uint64_t v17 = v16;
      uint64_t v18 = objc_msgSend(v16, "uri", v27);
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        unsigned __int8 v22 = v21;

        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
          v2 = sub_10008CB7C(0LL, v2[2] + 1LL, 1, v2);
        }
        id v24 = v2[2];
        id v23 = v2[3];
        if (v24 >= v23 >> 1) {
          v2 = sub_10008CB7C((void *)(v23 > 1), v24 + 1, 1, v2);
        }
        v2[2] = v24 + 1;
        uint64_t v25 = &v2[2 * v24];
        v25[4] = v20;
        v25[5] = v22;
      }

      else
      {
      }

      ++v15;
    }

    while (v14 != v15);
    goto LABEL_38;
  }

  swift_release(v8);
  id v3 = v41;
  if ((v44 & 1) != 0)
  {
    id v39 = 1LL << *(_BYTE *)(v8 + 32);
    if (v39 >= 64) {
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v43 = -1LL << v39;
    }
    *(void *)(v8 + 16) = 0LL;
  }

  if (a2) {
    *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDecode,  v39,  *a2,  @"SMH missing data required for verification"));
  }
  if (qword_1002EEEA0 != -1) {
    dispatch_once(&qword_1002EEEA0, &stru_1002898B8);
  }
  uint64_t v40 = (os_log_s *)qword_1002EEEA8;
  if (os_log_type_enabled((os_log_t)qword_1002EEEA8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v45 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "SMH missing data required for verification: %ld",  buf,  0xCu);
  }

  v35 = 0LL;
LABEL_43:

  return v35;
}

LABEL_84:
            *v72 = v62;
            goto LABEL_85;
          }
        }

        else
        {

          uint64_t v27 = v82;
          unsigned int v37 = v29;
        }

        __int16 v26 = v81;
        if (qword_1002E63A0 != -1) {
          dispatch_once(&qword_1002E63A0, &stru_100276AB8);
        }
        v71 = (os_log_s *)qword_1002E63A8;
        if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 141558530;
          v93 = 1752392040LL;
          v94 = 2112;
          v95 = v27;
          v96 = 2112;
          v97 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "Failed to get %{mask.hash}@ opt-in history: %@",  buf,  0x20u);
        }

        signed int v38 = 0LL;
        goto LABEL_83;
      }

      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v28 getLogDataForAccountKey:v29 uri:v82]);
      v54 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext cloudRecords](v43, "cloudRecords"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext applicationID](v43, "applicationID"));
      v87 = 0LL;
      v56 = (void *)objc_claimAutoreleasedReturnValue([v54 evaluateKTLogData:v53 application:v55 error:&v87]);
      v74 = v87;

      if (v56)
      {
        if (qword_1002E63A0 != -1) {
          dispatch_once(&qword_1002E63A0, &stru_100276A78);
        }
        v52 = v43;
        v57 = (os_log_s *)qword_1002E63A8;
        if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v93 = (uint64_t)v56;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "evaluateKTLogData eval result: %@",  buf,  0xCu);
        }

        uint64_t v34 = v80;
        goto LABEL_56;
      }

      id v24 = v76;
      if (qword_1002E63A0 != -1) {
        dispatch_once(&qword_1002E63A0, &stru_100276A58);
      }
      uint64_t v27 = v82;
      id v23 = v78;
      uint64_t v75 = v28;
      id v67 = (os_log_s *)qword_1002E63A8;
      unsigned int v37 = v29;
      if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v93 = (uint64_t)v74;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "evaluateKTLogData failure: %@", buf, 0xCu);
      }

      __int16 v26 = v81;
      if (a16 && v74) {
        *a16 = v74;
      }

      signed int v38 = 0LL;
LABEL_46:
      v35 = v79;
LABEL_47:
      uint64_t v36 = v75;
      goto LABEL_48;
    }

    uint64_t v75 = v28;
    uint64_t v34 = (void *)v33;
    if (qword_1002E63A0 != -1) {
      dispatch_once(&qword_1002E63A0, &stru_100276A18);
    }
    uint64_t v27 = v82;
    unsigned int v37 = v29;
    id v23 = v78;
    __int16 v48 = (os_log_s *)qword_1002E63A8;
    __int16 v26 = v81;
    if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 141558530;
      v93 = 1752392040LL;
      v94 = 2112;
      v95 = v82;
      v96 = 2112;
      v97 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Failed to verify %{mask.hash}@ account key: %@",  buf,  0x20u);
    }

    signed int v38 = 0LL;
LABEL_43:
    if (a16 && v31)
    {
      uint64_t v31 = v31;
      signed int v38 = 0LL;
      *a16 = v31;
    }

    goto LABEL_46;
  }

  uint64_t v36 = v28;
  if (([v26 isEqual:v29] & 1) == 0)
  {
    if (qword_1002E63A0 != -1) {
      dispatch_once(&qword_1002E63A0, &stru_100276A38);
    }
    unsigned int v37 = v29;
    uint64_t v47 = (os_log_s *)qword_1002E63A8;
    if (os_log_type_enabled((os_log_t)qword_1002E63A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 141558274;
      v93 = 1752392040LL;
      v94 = 2112;
      v95 = v82;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "Failed to verify %{mask.hash}@ account key",  buf,  0x16u);
    }

    signed int v38 = 0LL;
    goto LABEL_36;
  }

  uint64_t v31 = v40;
  v35 = v79;
  uint64_t v34 = v80;
LABEL_21:
  unsigned int v37 = v29;
LABEL_22:
  __int16 v26 = v81;
LABEL_23:
  signed int v38 = v77;
  id v23 = v78;
  if (a16 && v31)
  {
    uint64_t v31 = v31;
    *a16 = v31;
  }

LABEL_48:
  return v38;
}

void sub_1000088AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_1000088DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_10000890C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_10000893C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_10000896C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_10000899C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_1000089CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_1000089FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

id sub_100008BDC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ResponseTime"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate kt_dateFromString:](&OBJC_CLASS___NSDate, "kt_dateFromString:", v6));

  uint64_t v8 = (*(void *)(a1 + 88) < 6uLL) & (0x31u >> *(void *)(a1 + 88));
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  id v21 = 0LL;
  id v15 = [v9 validatePeer:v10 transparentData:v11 accountKey:v12 loggableDatas:v13 selfVerificationInfo:0 enforceStaticKey:v8 idsResponseTime:v14 re sponseTime:v7 error:&v21];
  id v16 = v21;
  [*(id *)(a1 + 40) reportValidationTime:*(void *)(a1 + 88) initialResult:*(void *)(a1 + 96) result:v15 idsResponseTime:*(void *)(a1 + 80)];
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) analyticsLogger]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
  +[KTContext metricsForResult:type:logger:applicationID:]( &OBJC_CLASS___KTContext,  "metricsForResult:type:logger:applicationID:",  v15,  v17,  v18,  v19);

  *a3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) analyticsForType:*(void *)(a1 + 88) uri:*(void *)(a1 + 48) accountKey:*(void *)(a1 + 64) serverLoggableDatas:*(void *)(a1 + 72) syncedLoggableDatas:0 transparentData :*(void *)(a1 + 56) selfVerificationInfo:0 responseTime:v7 result:v15 failure:v16 responseMetadata:*(void *)(a1 + 32)]);
  if (a2 && v16) {
    *a2 = v16;
  }

  return v15;
}

void sub_100009078(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

void sub_1000090A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63A8;
  qword_1002E63A8 = (uint64_t)v1;
}

id sub_100009404(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  char v15 = *(_BYTE *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 104);
  id v31 = 0LL;
  LOBYTE(v30) = 0;
  LOBYTE(v29) = v15;
  id v17 = [v6 validateSelf:v7 transparentData:v8 accountKey:v9 serverloggableDatas:v10 syncedLoggableDatas:v11 selfVerificationInfo:v12 idsRespon seTime:v13 responseTime:v14 optInCheck:v29 cloudDevices:v16 pcsAccountKey:0 kvsOptInHistory:0 isReplay:v30 error:&v31];
  id v18 = v31;
  if (v17 == (id)1) {
    [*(id *)(a1 + 32) clearSelfTicketState:*(void *)(a1 + 40) responseTime:*(void *)(a1 + 96)];
  }
  [*(id *)(a1 + 32) reportValidationTime:1 initialResult:*(void *)(a1 + 120) result:v17 idsResponseTime:*(void *)(a1 + 88)];
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) analyticsLogger]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
  +[KTContext metricsForResult:type:logger:applicationID:]( &OBJC_CLASS___KTContext,  "metricsForResult:type:logger:applicationID:",  v17,  1LL,  v19,  v20);

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
  +[KTContext checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:]( &OBJC_CLASS___KTContext,  "checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:",  v17,  1LL,  v21,  v18,  v22);

  id v23 = *(void **)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 48);
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) selfDeviceID]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  [v23 selfValidationURIStatus:v24 transparentData:v25 selfDeviceID:v26 logger:v27];

  *a3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) analyticsForType:1 uri:*(void *)(a1 + 40) accountKey:*(void *)(a1 + 56) serverLoggableDatas:*(void *)(a1 + 64) syncedLoggableDatas:*(void *)(a1 + 72) transparentData :*(void *)(a1 + 48) selfVerificationInfo:*(void *)(a1 + 80) responseTime:*(void *)(a1 + 96) result:v17 failure:v18 responseMetadata:*(void *)(a1 + 112)]);
  if (a2 && v18) {
    *a2 = v18;
  }

  return v17;
}

id sub_100009AEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
  id v7 = [v6 handleInsertResponse:*(void *)(a1 + 40) uri:*(void *)(a1 + 48) fetchId:*(void *)(a1 + 56) error:a2 transparentDataHandler:*(void *)(a1 + 64)];

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 metadataForInsertResponse:*(void *)(a1 + 40)]);
  *a3 = (id)objc_claimAutoreleasedReturnValue( [v8 analyticsForResponse:v9 type:2 uri:*(void *)(a1 + 48) result:v7 ktCapable:1]);

  return v7;
}

void sub_10000A150( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29)
{
}

void sub_10000A178(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63B8;
  qword_1002E63B8 = (uint64_t)v1;
}

void sub_10000A1A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63B8;
  qword_1002E63B8 = (uint64_t)v1;
}

void sub_10000A1D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63B8;
  qword_1002E63B8 = (uint64_t)v1;
}

void sub_10000A208(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (qword_1002E63B0 != -1) {
    dispatch_once(&qword_1002E63B0, &stru_100276BF0);
  }
  id v3 = (os_log_s *)qword_1002E63B8;
  if (os_log_type_enabled((os_log_t)qword_1002E63B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Completed fixup %@", (uint8_t *)&v12, 0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 logger]);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [v6 logResultForEvent:v7 hardFailure:1 result:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (!v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 smDataStore]);
    [v11 storeFixup:*(void *)(a1 + 32)];
  }
}

void sub_10000A380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63B8;
  qword_1002E63B8 = (uint64_t)v1;
}

void sub_10000AF38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63C8;
  qword_1002E63C8 = (uint64_t)v1;
}

void sub_10000B33C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63C8;
  qword_1002E63C8 = (uint64_t)v1;
}

void sub_10000B440(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63C8;
  qword_1002E63C8 = (uint64_t)v1;
}

void sub_10000BEB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id a25)
{
}

void sub_10000BEEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000BF1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000BF4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000BF7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000BFAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setTransaction:0];
}

void sub_10000BFDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v5 || v6)
  {
    if (qword_1002E63D0 != -1) {
      dispatch_once(&qword_1002E63D0, &stru_100276D40);
    }
    uint64_t v10 = (void *)qword_1002E63D8;
    if (os_log_type_enabled((os_log_t)qword_1002E63D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = v10;
      int v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 componentsJoinedByString:@","]);
      *(_DWORD *)buf = 138413058;
      id v20 = v12;
      __int16 v21 = 2160;
      uint64_t v22 = 1752392040LL;
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      __int16 v25 = 2112;
      id v26 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "ValidatePendingURIs: failed to get validation context for fetch for %@ for uris %{mask.hash}@: %@",  buf,  0x2Au);
    }

    char v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v15 addOperation:v16];
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained opUUID]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10000C250;
    v17[3] = &unk_100276D88;
    v17[4] = WeakRetained;
    id v18 = *(id *)(a1 + 32);
    [v5 queryForUris:v8 userInitiated:0 cachedYoungerThan:0 backgroundOpId:v9 completionHandler:v17];
  }
}

void sub_10000C220(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000C250(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_1002E63D0 != -1) {
      dispatch_once(&qword_1002E63D0, &stru_100276D60);
    }
    uint64_t v4 = (void *)qword_1002E63D8;
    if (os_log_type_enabled((os_log_t)qword_1002E63D8, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 32);
      id v6 = v4;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 componentsJoinedByString:@","]);
      int v12 = 138413058;
      uint64_t v13 = v7;
      __int16 v14 = 2160;
      uint64_t v15 = 1752392040LL;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "ValidatePendingURIs: failed to trigger query for %@ for uris %{mask.hash}@: %@",  (uint8_t *)&v12,  0x2Au);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v10 addOperation:v11];
}

void sub_10000C3E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63D8;
  qword_1002E63D8 = (uint64_t)v1;
}

void sub_10000C734(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1002E63E0 != -1) {
    dispatch_once(&qword_1002E63E0, &stru_100276DD0);
  }
  uint64_t v7 = (os_log_s *)qword_1002E63E8;
  if (os_log_type_enabled((os_log_t)qword_1002E63E8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "IDS returned result %@", (uint8_t *)&v8, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000C830(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63E8;
  qword_1002E63E8 = (uint64_t)v1;
}

void sub_10000D34C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D37C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D3AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D3DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D40C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D43C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D46C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D49C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D4CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000D780( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10000D7A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000D7B4(uint64_t a1)
{
}

void sub_10000D7BC(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  id v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1002E63F0 != -1) {
      dispatch_once(&qword_1002E63F0, &stru_100276F38);
    }
    int v8 = (os_log_s *)qword_1002E63F8;
    if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
    {
      id v9 = *a4;
      *(_DWORD *)buf = 138412290;
      id v27 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: failed to get pending SMTs: %@",  buf,  0xCu);
    }

    if (*a4) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *a4);
    }
    *a3 = 1;
  }

  else
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v25 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 verifyKTSMTSignatures:v7 error:&v25]);
    id v12 = v25;
    id v13 = v25;
    if (v11 && [v11 count])
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100276F78);
      }
      __int16 v14 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        id v27 = v15;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: %@ SMT signature validation failed: %@",  buf,  0x16u);
      }

      if (v13) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v12);
      }
      [*(id *)(a1 + 48) addObjectsFromArray:v11];
    }

    else
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100276F58);
      }
      __int16 v16 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_INFO))
      {
        id v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v27 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "VerifyPendingSignatures: %@ SMT signature validation succeeded",  buf,  0xCu);
      }
    }

    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 dataStore]);
    id v24 = 0LL;
    unsigned __int8 v20 = [v19 persistAndRefaultObjects:v7 error:&v24];
    id v21 = v24;
    id v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100276F98);
      }
      __int16 v23 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: failed to persist signature verified SMTs: %@",  buf,  0xCu);
      }

      if (v22) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v21);
      }
      *a3 = 1;
    }
  }
}

void sub_10000DB2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000DB5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000DB8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000DBBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000DFB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_10000DFE0(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  id v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1002E63F0 != -1) {
      dispatch_once(&qword_1002E63F0, &stru_100276FE0);
    }
    int v8 = (os_log_s *)qword_1002E63F8;
    if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
    {
      id v9 = *a4;
      *(_DWORD *)buf = 138412290;
      id v27 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: failed to get pending STH/SMH: %@",  buf,  0xCu);
    }

    if (*a4) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *a4);
    }
    *a3 = 1;
  }

  else
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v25 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 verifySTHs:v7 error:&v25]);
    id v12 = v25;
    id v13 = v25;
    if (v11 && [v11 count])
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100277020);
      }
      __int16 v14 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        id v27 = v15;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: %@ STH/SMH signature validation failed: %@",  buf,  0x16u);
      }

      if (v13) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v12);
      }
      [*(id *)(a1 + 48) addObjectsFromArray:v11];
    }

    else
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100277000);
      }
      __int16 v16 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_INFO))
      {
        id v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v27 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "VerifyPendingSignatures: %@ STH/SMH signature validation succeeded",  buf,  0xCu);
      }
    }

    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 dataStore]);
    id v24 = 0LL;
    unsigned __int8 v20 = [v19 persistAndRefaultObjects:v7 error:&v24];
    id v21 = v24;
    id v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1002E63F0 != -1) {
        dispatch_once(&qword_1002E63F0, &stru_100277040);
      }
      __int16 v23 = (os_log_s *)qword_1002E63F8;
      if (os_log_type_enabled((os_log_t)qword_1002E63F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "VerifyPendingSignatures: failed to persist signature verified STHs/SMHs: %@",  buf,  0xCu);
      }

      if (v22) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v21);
      }
      *a3 = 1;
    }
  }
}

void sub_10000E350(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000E380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000E3B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000E3E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E63F8;
  qword_1002E63F8 = (uint64_t)v1;
}

void sub_10000E838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10000E85C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000E88C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v5 || v6)
  {
    if (qword_1002E6400 != -1) {
      dispatch_once(&qword_1002E6400, &stru_100277080);
    }
    __int16 v16 = (os_log_s *)qword_1002E6408;
    if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "ValidatePendingRequests: failed to get validation context for validating pending requests: %@",  buf,  0xCu);
    }

    id v12 = (id)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v12 addOperation:v17];
  }

  else
  {
    dispatch_group_t v8 = dispatch_group_create();
    [WeakRetained setFetchGroup:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dataStore]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    id v21 = 0LL;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10000EB80;
    v19[3] = &unk_1002770C8;
    v19[4] = WeakRetained;
    id v20 = v5;
    [v10 performForRequestsWithPendingResponses:v11 error:&v21 block:v19];
    id v12 = v21;

    if (qword_1002E6400 != -1) {
      dispatch_once(&qword_1002E6400, &stru_1002770E8);
    }
    id v13 = (os_log_s *)qword_1002E6408;
    if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "ValidatePendingRequests: waiting for fetches to finish validating",  buf,  2u);
    }

    __int16 v14 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained fetchGroup]);
    uint64_t v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained fetchQueue]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10000EE10;
    v18[3] = &unk_100276740;
    v18[4] = WeakRetained;
    dispatch_group_notify(v14, v15, v18);
  }
}

void sub_10000EB50(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000EB80(uint64_t a1, void *a2, _BYTE *a3, void *a4)
{
  id v7 = a2;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v23;
    *(void *)&__int128 v9 = 138412290LL;
    __int128 v21 = v9;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)v12);
        __int16 v14 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchGroup", v21));
        dispatch_group_enter(v14);

        [*(id *)(a1 + 32) handleKTRequestDownload:v13 context:*(void *)(a1 + 40)];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dataStore]);
        LOBYTE(v13) = [v16 persistAndRefaultObject:v13 error:a4];

        if ((v13 & 1) == 0)
        {
          if (qword_1002E6400 != -1) {
            dispatch_once(&qword_1002E6400, &stru_1002770A0);
          }
          id v17 = (os_log_s *)qword_1002E6408;
          if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_ERROR))
          {
            if (a4) {
              uint64_t v18 = *a4;
            }
            else {
              uint64_t v18 = 0LL;
            }
            *(_DWORD *)buf = v21;
            uint64_t v27 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "failed to persist pending requests: %@",  buf,  0xCu);
          }

          if (a4 && *a4)
          {
            id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 dataStore]);
            [v20 reportCoreDataPersistEventForLocation:@"handlePendingQueryRequests" underlyingError:*a4];
          }

          *a3 = 1;
        }

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }

    while (v10);
  }
}

void sub_10000EDB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000EDE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000EE10(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
  id v3 = [v2 count];

  if (v3)
  {
    NSErrorUserInfoKey v30 = NSMultipleUnderlyingErrorsKey;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
    id v31 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyErrorVerify",  -381LL,  v5));
    [*(id *)(a1 + 32) setError:v6];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverHints]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsJoinedByString:@","]);

    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestIds]);
    id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v26;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v25 + 1) + 8 * (void)i) UUIDString]);
          [v9 appendFormat:@"%@,", v15];
        }

        id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }

      while (v12);
    }

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundOpId]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 smDataStore]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:",  v16,  v18,  v9,  v19,  v8,  v20);
  }

  if (qword_1002E6400 != -1) {
    dispatch_once(&qword_1002E6400, &stru_100277108);
  }
  __int128 v21 = (os_log_s *)qword_1002E6408;
  if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "ValidatePendingRequests: end", buf, 2u);
  }

  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v22 addOperation:v23];
}

void sub_10000F140(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000F22C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000F248(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11 metadata]);
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

  if (v9 && v10 && v11 && !v12)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10000F5A8;
    v27[3] = &unk_100277158;
    objc_copyWeak(&v30, v13);
    id v28 = v9;
    id v29 = v16;
    [WeakRetained handleKTRequest:v28 queryRequest:v10 queryResponse:v11 completionHandler:v27];

    objc_destroyWeak(&v30);
  }

  else
  {
    id v17 = [v9 type];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  v17,  v18));

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    objc_msgSend(v20, "logResultForEvent:hardFailure:result:", v19, objc_msgSend(v9, "isDeleted"), v12);

    if (qword_1002E6400 != -1) {
      dispatch_once(&qword_1002E6400, &stru_100277178);
    }
    __int128 v21 = (os_log_s *)qword_1002E6408;
    if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v32 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "ValidatePendingRequests:background fetch error: %@",  buf,  0xCu);
    }

    if (!v12) {
      id v12 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorNetwork,  -145LL,  @"empty inclusion proof response"));
    }
    [WeakRetained saveRequestFailure:v9 failure:v12];
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained failExpiredRequest:v9 error:v12]);
    if (v22)
    {
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
      [v23 addObject:v12];

      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained requestIds]);
      [v24 addObject:v22];

      if (v16)
      {
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverHints]);
        [v25 addObject:v16];
      }
    }

    __int128 v26 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained fetchGroup]);
    dispatch_group_leave(v26);
  }
}

void sub_10000F58C(_Unwind_Exception *a1)
{
}

void sub_10000F5A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (a2 == 2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained failExpiredRequest:*(void *)(a1 + 32) error:v12]);
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 errors]);
      [v8 addObject:v12];

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 requestIds]);
      [v9 addObject:v7];

      if (*(void *)(a1 + 40))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 serverHints]);
        [v10 addObject:*(void *)(a1 + 40)];
      }
    }
  }

  id v11 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([v6 fetchGroup]);
  dispatch_group_leave(v11);
}

void sub_10000F690(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000F880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10000F8A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v8 = WeakRetained;
  if (!v5 || v6)
  {
    if (qword_1002E6400 != -1) {
      dispatch_once(&qword_1002E6400, &stru_1002771C0);
    }
    id v12 = (os_log_s *)qword_1002E6408;
    if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "ValidatePendingRequests: failed to get validation context for validating pending request %{public}@: %@",  buf,  0x16u);
    }

    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -167LL,  @"no context for handling pending requestId %@",  *(void *)(a1 + 32)));
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dataStore]);
    uint64_t v11 = *(void *)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10000FAEC;
    v14[3] = &unk_100277208;
    id v15 = v5;
    id v16 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = v8;
    id v19 = *(id *)(a1 + 56);
    [v10 performAndWaitForRequestId:v11 error:0 block:v14];

    id v6 = v15;
  }
}

void sub_10000FABC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10000FAEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 type];
  if (v4 == (id)2) {
    goto LABEL_4;
  }
  if (v4 == (id)1)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    id v10 = (_TtC13transparencyd19KTCloudRecordsCache *)objc_claimAutoreleasedReturnValue([v9 cloudRecords]);

    if (v10)
    {
      uint64_t v11 = objc_alloc(&OBJC_CLASS____TtC13transparencyd19KTCloudRecordsCache);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 cloudRecords]);
      id v10 = -[KTCloudRecordsCache initWithRecords:](v11, "initWithRecords:", v13);
    }

    __int16 v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    id v28 = 0LL;
    [v14 validateSelfKTRequest:v3 queryRequest:v15 queryResponse:v16 selfVerificationInfo:0 optInCheck:0 cloudDevices:v10 transparentData:0 logg ableDatas:0 error:&v28];
    id v8 = v28;
  }

  else
  {
    if (!v4)
    {
LABEL_4:
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      id v29 = 0LL;
      [v5 validatePeerOrEnrollKTRequest:v3 queryRequest:v6 queryResponse:v7 transparentData:0 loggableDatas:0 error:&v29];
      id v8 = v29;
      goto LABEL_13;
    }

    if (qword_1002E6400 != -1) {
      dispatch_once(&qword_1002E6400, &stru_1002771E0);
    }
    id v17 = (void *)qword_1002E6408;
    if (os_log_type_enabled((os_log_t)qword_1002E6408, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = v17;
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v3 requestId]);
      *(_DWORD *)buf = 138543618;
      id v31 = v19;
      __int16 v32 = 2048;
      id v33 = [v3 type];
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "ValidatePendingRequests:deleting requestId %{public}@ with unknown type %lld",  buf,  0x16u);
    }

    uint64_t v20 = kTransparencyErrorDecode;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 requestId]);
    id v8 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v20,  -206LL,  @"deleting requestId %@ with unknown type",  v21));

    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 dataStore]);
    [v23 deleteObject:v3];

    id v24 = [v3 type];
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) application]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  v24,  v25));

    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v27 logResultForEvent:v26 hardFailure:1 result:v8];
  }

LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

    result = sub_10007C4B4(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

        __break(1u);
        goto LABEL_14;
      }

  __break(1u);
  return result;
}

  unsigned int v37 = v49;
  *(void *)v49 = v20;
  *(_BYTE *)(v37 + _Block_object_dispose(va, 8) = 0;
  return result;
}

  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }

  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }

  return v4;
}
}

    uint64_t v15 = 0;
    goto LABEL_44;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 patSigningKeyWithError:a4]);
  if (v16)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(-[TransparencyPublicKeyBag trustedAppSigningKeys](self, "trustedAppSigningKeys"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[TransparencyPublicKeyBag createTrustedSthKeyStoreFromProofSPKI:signingKeysMap:error:]( self,  "createTrustedSthKeyStoreFromProofSPKI:signingKeysMap:error:",  v16,  v17,  a4));

    if (v18)
    {
      if (!-[TransparencyPublicKeyBag allowOldKeys](self, "allowOldKeys")) {
        -[TransparencyPublicKeyBag setAppSthKeyStore:](self, "setAppSthKeyStore:", v18);
      }
      id v30 = 0LL;
      id v19 = -[TransparencyPublicKeyBag copyVRFKeyFromConfigProof:error:]( self,  "copyVRFKeyFromConfigProof:error:",  v6,  &v30);
      id v29 = v30;
      if (v19)
      {
        -[TransparencyPublicKeyBag setVrfKey:](self, "setVrfKey:", v19);
        -[TransparencyPublicKeyBag setVrfType:](self, "setVrfType:", [v19 type]);
      }

      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 data]);
      -[TransparencyPublicKeyBag setPatConfigProof:](self, "setPatConfigProof:", v20);

      uint64_t v21 = [v6 tltLogBeginningMs];
      __int16 v22 = [v6 patLogBeginningMs];
      if (v21) {
        id v23 = v22 == 0LL;
      }
      else {
        id v23 = 1;
      }
      uint64_t v15 = !v23;
      if (v23)
      {
        if (a4) {
          *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -169LL,  @"PAT config proof STHs missing epoch begin times"));
        }
        if (qword_1002EE9F8 != -1) {
          dispatch_once(&qword_1002EE9F8, &stru_1002843C8);
        }
        __int128 v25 = v29;
        __int128 v27 = (os_log_s *)qword_1002EEA00;
        if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "PAT config proof STHs missing epoch begin times",  buf,  2u);
        }
      }

      else
      {
        id v24 = v22;
        -[TransparencyPublicKeyBag setTltLogBeginningMs:](self, "setTltLogBeginningMs:", v21);
        -[TransparencyPublicKeyBag setPatLogBeginningMs:](self, "setPatLogBeginningMs:", v24);
        __int128 v25 = v29;
      }
    }

    else
    {
      if (qword_1002EE9F8 != -1) {
        dispatch_once(&qword_1002EE9F8, &stru_1002843A8);
      }
      __int128 v26 = (os_log_s *)qword_1002EEA00;
      if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "PAT config proof signing key did not match any trusted cert",  buf,  2u);
      }

      uint64_t v15 = 0;
      if (a4) {
        *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -221LL,  *a4,  @"PAT config proof signing key did not match any trusted cert"));
      }
    }
  }

  else
  {
    uint64_t v15 = 0;
  }

LABEL_44:
  return v15;
}
    }

    else
    {
      LOBYTE(v3) = 0;
    }
  }

  return (char)v3;
}
    }

    else
    {
      LOBYTE(v3) = 0;
    }
  }

  return (char)v3;
}
  }
}

      id v30 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      id v10 = v41;
      [v30 logSuccessForEventNamed:v41];

      id v31 = (void *)objc_claimAutoreleasedReturnValue([v14 sortedArrayUsingComparator:&stru_100287190]);
      id v9 = v39;
      id v8 = v40;
LABEL_30:
    }

    else
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -281LL,  @"Top-level opt-in value is not a array"));
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      [v34 logResultForEvent:v10 hardFailure:1 result:v33];

      if (a5 && v33) {
        *a5 = v33;
      }

      id v31 = 0LL;
    }
  }

  else
  {
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v32 logSuccessForEventNamed:v10];

    id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
  }

  return v31;
}

void sub_10000FDFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

void sub_10001013C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6408;
  qword_1002E6408 = (uint64_t)v1;
}

LABEL_15:
  return v11;
}

      id v8 = v17;
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[StaticKeyController log](self, "log"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        id v12 = "updateContact complete";
        goto LABEL_17;
      }

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    uint64_t v44 = (v12 - 1) & v12;
    v45 = v11;
  }

  while (1)
  {
    uint64_t v11 = v38 + 1;
    if (__OFADD__(v38, 1LL)) {
      break;
    }
    if (v11 >= v40) {
      goto LABEL_33;
    }
    id v12 = *(void *)(v39 + 8 * v11);
    ++v38;
    if (v12) {
      goto LABEL_15;
    }
  }

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  id v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  id v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  id v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
  uint64_t v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  __int16 v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      id v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      id v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  id v19 = *v2;
  __int16 v22 = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000C534C();
    id v19 = v22;
  }

  id v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1000C5904(v12);
  uint64_t v20 = *v2;
  void *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

    uint64_t v20 = 1;
    goto LABEL_16;
  }

  return v7;
}

  return v25;
}

  return v15;
}

  return v6;
}

      v9 &= v36;
      v7 |= v35;
      v8 |= v13;
    }

    uint64_t v6 = [obj countByEnumeratingWithState:&v37 objects:v43 count:16];
  }

  while (v6);

  if (!(v7 & 1 | ((v9 & 1) == 0) | v8 & 1))
  {
    id v29 = 1;
    goto LABEL_23;
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue(-[KTResultOperation error](v32, "error"));
  __int128 v25 = v24 == 0LL;

  if (v25)
  {
    uint64_t v41 = NSLocalizedDescriptionKey;
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Operation (%@) cancelled",  v30));
    __int16 v42 = v5;
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"KTResultOperationError",  2LL,  v26));
    -[KTResultOperation setError:](v32, "setError:", v27);

LABEL_22:
    goto LABEL_23;
  }

  id v29 = 0;
LABEL_23:

  objc_sync_exit(v32);
  return v29;
}

void sub_100010AE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100010B10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100010FC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100010FF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011020(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011050(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011080(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011798(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000117C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000117F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011828(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000119AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

LABEL_26:
    __int128 v25 = 0;
    goto LABEL_34;
  }

  id v12 = [v8 succeed];
  id v31 = [v8 staticAccountKeyStatus];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 publicID]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 publicKeyInfo]);

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 uri]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 application]);
  id v33 = 0LL;
  id v17 = +[KTContext validateStaticKeyForPeer:accountKey:application:staticKeyStore:error:]( &OBJC_CLASS___KTContext,  "validateStaticKeyForPeer:accountKey:application:staticKeyStore:error:",  v15,  v14,  v16,  v9,  &v33);
  uint64_t v18 = v33;
  [v8 setStaticAccountKeyStatus:v17];

  if (v18)
  {
    if (qword_1002E6410 != -1) {
      dispatch_once(&qword_1002E6410, &stru_100277430);
    }
    id v19 = (os_log_s *)qword_1002E6418;
    if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v35 = (uint64_t)v18;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "veriferResultForPeer static key failed: %@",  buf,  0xCu);
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v8 failure]);

    if (!v20) {
      [v8 setFailure:v18];
    }
  }

  if ((-[PeerState everOptedIn](self, "everOptedIn") & 1) != 0
    || [v8 staticAccountKeyStatus] != (id)2 && objc_msgSend(v8, "staticAccountKeyStatus"))
  {
    if (v12 == (id)2 && ![v8 staticAccountKeyStatus])
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v8 loggableDatas]);
      __int16 v32 = 0LL;
      __int128 v27 = +[KTContextVerifier verifyLoggableDataSignatures:accountKey:error:]( &OBJC_CLASS___KTContextVerifier,  "verifyLoggableDataSignatures:accountKey:error:",  v26,  v14,  &v32);
      id v28 = v32;

      if ((v27 & 1) == 0)
      {
        [v8 setStaticAccountKeyStatus:4];
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v8 failure]);

        if (!v29) {
          [v8 setFailure:v28];
        }
      }
    }

    else if (![v8 staticAccountKeyStatus] && v31 == (id)4)
    {
      [v8 setStaticAccountKeyStatus:4];
    }

    objc_msgSend( v8,  "updateWithStaticKeyEnforced:isFailureIgnoredForDate:",  objc_msgSend(v8, "staticAccountKeyStatus"),  -[PeerState isFailureIgnoredForDate:](self, "isFailureIgnoredForDate:", v10));
    __int128 v25 = 0;
  }

  else
  {
    __int128 v25 = 1;
    -[PeerState setEverOptedIn:](self, "setEverOptedIn:", 1LL);
    [v8 setEverOptedIn:1];
  }

LABEL_34:
  return v25;
}

      id v10 = (v14 - 1) & v14;
      uint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }

    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    id v17 = v16[1];
    sub_100079A14(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v38);
    v37[0] = v18;
    v37[1] = v17;
    sub_100079A14((uint64_t)v38, (uint64_t)v33);
    swift_bridgeObjectRetain_n(v17, 2LL);
    sub_100077CFC((uint64_t)v37, &qword_1002DF538);
    if (!swift_dynamicCast( &v30,  v33,  (char *)&type metadata for Any + 8,  &type metadata for AnyHashable,  6LL))
    {
      __int16 v32 = 0LL;
      id v30 = 0u;
      id v31 = 0u;
      swift_bridgeObjectRelease(v17);
      sub_100077CFC((uint64_t)&v30, &qword_1002DF540);
      sub_100079A50(a1);
      swift_release(v3);
      return 0LL;
    }

    uint64_t v34 = v30;
    v35 = v31;
    uint64_t v36 = v32;
    result = sub_100079A58(v18, v17);
    id v19 = result;
    if ((v20 & 1) != 0)
    {
      id v9 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v9[1]);
      void *v9 = v18;
      v9[1] = v17;
      result = sub_100079ABC((uint64_t)&v30, v3[7] + 40 * v19);
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v21 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v21 = v18;
    v21[1] = v17;
    __int16 v22 = v3[7] + 40 * result;
    id v23 = v30;
    id v24 = v31;
    *(void *)(v22 + 32) = v32;
    *(_OWORD *)__int16 v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    __int128 v25 = v3[2];
    __int128 v26 = __OFADD__(v25, 1LL);
    __int128 v27 = v25 + 1;
    if (v26) {
      goto LABEL_36;
    }
    v3[2] = v27;
LABEL_8:
    id v8 = v12;
    uint64_t v6 = v10;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

        id v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      id v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      id v24 = -1LL << *(_BYTE *)(v6 + 32);
      __int128 v25 = result & ~v24;
      __int128 v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        __int16 v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v29 = v26 == v28;
          if (v26 == v28) {
            __int128 v26 = 0LL;
          }
          v27 |= v29;
          id v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        __int16 v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    id v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    id v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    id v24 = -1LL << *(_BYTE *)(v6 + 32);
    __int128 v25 = result & ~v24;
    __int128 v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      __int16 v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          __int128 v26 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      __int16 v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2LL);
    v2 = v31;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  uint64_t v40 = (v22 - 1) & v22;
  uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; uint64_t v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    __int128 v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    __int128 v26 = v25[1];
    __int128 v27 = *(void *)(*(void *)(v1 + 56) + 8 * v20);
    __int16 v42 = *v25;
    uint64_t v43 = v26;
    uint64_t v41 = v27;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    id v28 = sub_100072CC4(v11);
    swift_dynamicCast(v7, &v41, v28, v12, 7LL);
    id v29 = v42;
    id v30 = v43;
    sub_10007ADB4(v7, v8);
    sub_10007ADB4(v8, v47);
    sub_10007ADB4(v47, &v45);
    result = sub_100079A58(v29, v30);
    id v31 = result;
    if ((v32 & 1) != 0)
    {
      id v39 = i;
      uint64_t v13 = v8;
      __int16 v14 = v7;
      uint64_t v15 = v1;
      uint64_t v16 = v12;
      id v17 = v11;
      uint64_t v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *uint64_t v18 = v29;
      v18[1] = v30;
      uint64_t v11 = v17;
      id v12 = v16;
      os_log_t v1 = v15;
      uint64_t v7 = v14;
      id v8 = v13;
      i = v39;
      id v19 = (void *)(v3[7] + 32 * v31);
      sub_10007EAFC(v19);
      result = (unint64_t)sub_10007ADB4(&v45, v19);
      uint64_t v6 = v40;
      if (!v40) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v33 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v33 = v29;
    v33[1] = v30;
    result = (unint64_t)sub_10007ADB4(&v45, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v34 = v3[2];
    v35 = __OFADD__(v34, 1LL);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_34;
    }
    v3[2] = v36;
    uint64_t v6 = v40;
    if (!v40) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v40 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  swift_bridgeObjectRelease(v23);
  sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
  result = swift_release(v2);
  __break(1u);
  return result;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}
}

        id v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      __int16 v22 = -1LL << *(_BYTE *)(v6 + 32);
      id v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v25 = 0;
        __int128 v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          __int128 v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    id v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    uint64_t v21 = *(void *)(v6 + 40);
    __int16 v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    id v23 = -1LL << *(_BYTE *)(v6 + 32);
    id v24 = result & ~v23;
    __int128 v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v26 = 0;
      __int128 v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          __int128 v25 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2LL);
    v2 = v30;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    __int16 v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    __int16 v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

          id v17 = (void *)sub_100137E7C((uint64_t)v8, (uint64_t)v14);
          uint64_t v21 = (NSMutableArray *)[v17 copyWithZone:a4];
          goto LABEL_37;
        }

              id v28 = 0LL;
              goto LABEL_27;
            }

            if (!a4) {
              goto LABEL_26;
            }
            id v29 = kTransparencyErrorDecode;
            id v30 = @"failed to parse expiry timestamp from SingleDataRecord";
            id v31 = -254LL;
          }

          else
          {
            if (!a4) {
              goto LABEL_26;
            }
            id v29 = kTransparencyErrorDecode;
            id v30 = @"failed to parse account mismatch from SingleDataRecord";
            id v31 = -253LL;
          }
        }

        else
        {
          if (!a4) {
            goto LABEL_26;
          }
          id v29 = kTransparencyErrorDecode;
          id v30 = @"failed to parse add timestamp from SingleDataRecord";
          id v31 = -252LL;
        }
      }

      else
      {
        if (!a4) {
          goto LABEL_26;
        }
        id v29 = kTransparencyErrorDecode;
        id v30 = @"failed to parse mark timestamp from SingleDataRecord";
        id v31 = -251LL;
      }
    }

    else
    {
      if (!a4) {
        goto LABEL_26;
      }
      id v29 = kTransparencyErrorDecode;
      id v30 = @"failed to parse client data from SingleDataRecord";
      id v31 = -250LL;
    }

  uint64_t v16 = 0;
  if (a6 && v14)
  {
    __int16 v14 = v14;
    uint64_t v16 = 0;
    *a6 = v14;
  }

        id v19 = (char *)v19 + 1;
      }

      while (v15 != v19);
      uint64_t v15 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
      if (!v15) {
        goto LABEL_30;
      }
    }
  }

  uint64_t v16 = 0;
LABEL_30:

  return v16 & 1;
}

    uint64_t v34 = 0;
    goto LABEL_27;
  }

  uint64_t v34 = 1;
  uint64_t v13 = v47;
  id v17 = v45;
LABEL_27:

  return v34;
}

  return v13;
}

void sub_100011E28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011E58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100011E88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100012194(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100012528( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10001254C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001255C(uint64_t a1)
{
}

void sub_100012564(void *a1)
{
  v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchPeer:v3 application:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (!v6)
  {
    id v8 = (void *)a1[4];
    uint64_t v9 = a1[5];
    uint64_t v10 = a1[6];
    uint64_t v11 = *(void *)(a1[8] + 8LL);
    id v15 = *(id *)(v11 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 createPeerState:v9 application:v10 error:&v15]);
    objc_storeStrong((id *)(v11 + 40), v15);
  }

  id v12 = (void *)objc_opt_class(a1[4], v7);
  uint64_t v13 = *(void *)(a1[8] + 8LL);
  id v14 = *(id *)(v13 + 40);
  [v12 cleanseError:&v14];
  objc_storeStrong((id *)(v13 + 40), v14);
  (*(void (**)(void))(a1[7] + 16LL))();
  *(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL) = 1;
}

void sub_1000127F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100012810(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](&OBJC_CLASS___PeerState, "fetchRequest"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application = %@ && (failure != nil || mostRecentSuccess != nil || mostRecentCompleted != nil)",  *(void *)(a1 + 40)));
    [v5 setPredicate:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v27 = *(id *)(v8 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v5 error:&v27]);
    objc_storeStrong((id *)(v8 + 40), v27);

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          [v15 setMostRecentCompleted:0];
          [v15 setMostRecentSuccess:0];
          [v15 setFailure:0];
          [v15 setSeenDate:0];
        }

        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }

      while (v12);
    }

    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v22 = *(id *)(v17 + 40);
    [v16 persistWithError:&v22];
    objc_storeStrong((id *)(v17 + 40), v22);
    id v19 = (void *)objc_opt_class(*(void *)(a1 + 32), v18);
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v21 = *(id *)(v20 + 40);
    [v19 cleanseError:&v21];
    objc_storeStrong((id *)(v20 + 40), v21);
  }
}

void sub_100012A44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100012B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100012B4C(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](&OBJC_CLASS___PeerState, "fetchRequest"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v19 = *(id *)(v7 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v5 error:&v19]);
    objc_storeStrong((id *)(v7 + 40), v19);

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v18 = *(id *)(v10 + 40);
    [v9 persistWithError:&v18];
    objc_storeStrong((id *)(v10 + 40), v18);
    id v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v17 = *(id *)(v13 + 40);
    [v12 cleanseError:&v17];
    objc_storeStrong((id *)(v13 + 40), v17);
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      if (qword_1002E6410 != -1) {
        dispatch_once(&qword_1002E6410, &stru_1002774E0);
      }
      id v14 = (os_log_s *)qword_1002E6418;
      if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "failed to retrieve peer states: %@",  buf,  0xCu);
      }

      uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v16();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_100012D54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100012F7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100012F9C(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:]( &OBJC_CLASS___NSBatchUpdateRequest,  "batchUpdateRequestWithEntityName:",  @"PeerState"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri IN %@ && application = %@ && failure != nil && seenDate == nil",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    [v6 setPredicate:v7];

    __int128 v24 = @"seenDate";
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    [v6 setPropertiesToUpdate:v8];

    [v6 setResultType:1];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v20 = *(id *)(v10 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 executeRequest:v6 error:&v20]);
    objc_storeStrong((id *)(v10 + 40), v20);

    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v19 = *(id *)(v13 + 40);
    [v12 persistWithError:&v19];
    objc_storeStrong((id *)(v13 + 40), v19);
    if (!v11)
    {
      if (qword_1002E6410 != -1) {
        dispatch_once(&qword_1002E6410, &stru_100277528);
      }
      id v14 = (os_log_s *)qword_1002E6418;
      if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "setSeenDate delete: %@", buf, 0xCu);
      }
    }
  }

  uint64_t v16 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v18 = *(id *)(v17 + 40);
  [v16 cleanseError:&v18];
  objc_storeStrong((id *)(v17 + 40), v18);
}

void sub_1000131F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100013220(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000137B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_1000137D8(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = a2;
  objc_msgSend(v4, "setUnsigned:value:", "lastIDSCacheUIStatus", objc_msgSend(v3, "uiStatus"));
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v6 + 40);
  [v5 persistAndRefaultObject:v4 error:&obj];

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = (void *)objc_opt_class(a1[5], v7);
  uint64_t v9 = *(void *)(a1[6] + 8LL);
  id v10 = *(id *)(v9 + 40);
  [v8 cleanseError:&v10];
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_100013888(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000138B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000138E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100013BD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100013E1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100013E3C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  unint64_t v5 = a1[8];
  if (v5 <= 0xD)
  {
    if (((1LL << v5) & 0x20C1) != 0)
    {
      +[TransparencySettings failureIgnorePeriod](&OBJC_CLASS___TransparencySettings, "failureIgnorePeriod");
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:"));
      [v4 setIgnoredFailureExpiry:v6];
    }

    else
    {
      if (v5 != 10) {
        goto LABEL_16;
      }
    }

    uint64_t v7 = (void *)a1[4];
    id v18 = 0LL;
    unsigned __int8 v8 = [v7 persistWithError:&v18];
    id v9 = v18;
    if ((v8 & 1) == 0)
    {
      if (qword_1002E6410 != -1) {
        dispatch_once(&qword_1002E6410, &stru_100277638);
      }
      id v10 = (os_log_s *)qword_1002E6418;
      if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = a1[5];
        uint64_t v13 = a1[6];
        *(_DWORD *)buf = 138544130;
        uint64_t v20 = v12;
        __int16 v21 = 2160;
        uint64_t v22 = 1752392040LL;
        __int16 v23 = 2112;
        uint64_t v24 = v13;
        __int16 v25 = 2112;
        id v26 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to save ignore error for application=%{public}@ uri=%{mask.hash}@: %@",  buf,  0x2Au);
      }

      id v14 = (void *)objc_opt_class(a1[4], v11);
      id v17 = v9;
      [v14 cleanseError:&v17];
      id v15 = v17;
      id v16 = v17;

      if (v16)
      {
        objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), v15);
        id v9 = v16;
      }

      else
      {
        id v9 = 0LL;
      }
    }
  }

LABEL_16:
}

    id v27 = v12;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v28);
    goto LABEL_17;
  }

  __break(1u);
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}
  }

  else
  {
    LOBYTE(v11) = 0;
  }

  return (char)v11;
}

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v13 afterOperation]);

      if (v24)
      {
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v13 afterOperation]);
        id v26 = [v25 isFinished];

        if (v26)
        {
          if (qword_1002EEA08 != -1) {
            dispatch_once(&qword_1002EEA08, &stru_100284620);
          }
          id v27 = (void *)qword_1002EEA10;
          if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
          {
            id v28 = v27;
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
            v49 = v10;
            id v30 = v11;
            id v31 = v2;
            __int16 v32 = v8;
            id v33 = v7;
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v13 afterOperation]);
            *(_DWORD *)buf = v48;
            v57 = v29;
            v58 = 2114;
            v59 = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Operation has ended for pending flag %{public}@: %{public}@",  buf,  0x16u);

            uint64_t v7 = v33;
            unsigned __int8 v8 = v32;
            v2 = v31;
            uint64_t v11 = v30;
            id v10 = v49;
          }
        }

        else
        {
          uint64_t v20 = 0;
        }
      }

      if (![v13 conditions]) {
        goto LABEL_29;
      }
      v35 = (unint64_t)[v13 conditions];
      uint64_t v36 = (id)(-[KTStateMachine currentConditions](v2, "currentConditions") & v35);
      if (v36 == [v13 conditions])
      {
        if (qword_1002EEA08 != -1) {
          dispatch_once(&qword_1002EEA08, &stru_100284640);
        }
        unsigned int v37 = (void *)qword_1002EEA10;
        if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
        {
          signed int v38 = v37;
          id v39 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
          *(_DWORD *)buf = 138543362;
          v57 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Conditions are right for %{public}@",  buf,  0xCu);
        }

    if (v9) {
      *a4 = v9;
    }
    goto LABEL_18;
  }

  id v9 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  [v9 logSuccessForEventNamed:@"KTAccountKeyPublicDecode"];
LABEL_19:

  return v7;
}
}

  return v14;
}

  return v20;
}

void sub_100014030(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100014060(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100014178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100014190(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___KTOptInStatus);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "setEverOptedIn:",  objc_msgSend(v3, "everOptedIn"));
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "setOptedIn:", objc_msgSend(v3, "optedIn"));
  id v7 = [v3 everCompletedVerification];

  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setEverCompletedVerification:v7];
}

void sub_10001437C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100014394(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setDataStore:*(void *)(a1 + 32)];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) staticKeyStore]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 verifierResultWithStaticKeyStore:v4]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id v8 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uiStatus];
  if (v8 != [v3 lastIDSCacheUIStatus])
  {
    if (qword_1002E6410 != -1) {
      dispatch_once(&qword_1002E6410, &stru_1002776C8);
    }
    id v9 = (void *)qword_1002E6418;
    if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_INFO))
    {
      id v10 = v9;
      id v11 = [v3 lastIDSCacheUIStatus];
      id v12 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uiStatus];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218754;
      id v19 = v11;
      __int16 v20 = 2048;
      id v21 = v12;
      __int16 v22 = 2160;
      uint64_t v23 = 1752392040LL;
      __int16 v24 = 2112;
      uint64_t v25 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "verifierResultForPeer cached UI status changed %lld->%llu for %{mask.hash}@, will update IDS cache",  buf,  0x2Au);
    }

    id v14 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
    [v14 updateIDSCacheWithResults:v15];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setSentToIDS:1];
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerOverridesStore]);
  [v16 applyPeerOverrides:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) peer:v3];

  [*(id *)(a1 + 32) persistAndRefaultObject:v3 error:0];
}

void sub_1000145B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100014704( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100014718(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v2 = [WeakRetained verifierResultForPeer:*(void *)(a1 + 32) application:*(void *)(a1 + 40)];
}

void sub_100014A3C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100014CA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100014CD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

id sub_100014DD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onQueueSetCachedPeerOptInState:*(unsigned __int8 *)(a1 + 56) uris:*(void *)(a1 + 40) application:*(void *)(a1 + 48) error:0];
}

id sub_100014E80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onQueueRemoveFailures:*(void *)(a1 + 40) error:0];
}

void sub_1000150AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000150CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_1000150FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](&OBJC_CLASS___PeerState, "fetchRequest"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application = %@ && (failure != nil)",  *(void *)(a1 + 40)));
    [v5 setPredicate:v6];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v26 = *(id *)(v8 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v5 error:&v26]);
    objc_storeStrong((id *)(v8 + 40), v26);

    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v23;
      do
      {
        id v14 = 0LL;
        do
        {
          if (*(void *)v23 != v13) {
            objc_enumerationMutation(v10);
          }
          [*(id *)(*((void *)&v22 + 1) + 8 * (void)v14) setFailure:0];
          id v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }

      while (v12);
    }

    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v21 = *(id *)(v16 + 40);
    [v15 persistWithError:&v21];
    objc_storeStrong((id *)(v16 + 40), v21);
    id v18 = (void *)objc_opt_class(*(void *)(a1 + 32), v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v20 = *(id *)(v19 + 40);
    [v18 cleanseError:&v20];
    objc_storeStrong((id *)(v19 + 40), v20);
  }

void sub_100015308(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100015638( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10001566C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:]( &OBJC_CLASS___NSBatchUpdateRequest,  "batchUpdateRequestWithEntityName:",  @"PeerState"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri IN %@ && application = %@",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    [v6 setPredicate:v7];

    id v27 = @"optedIn";
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
    id v28 = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    id v10 = [v9 mutableCopy];

    if (*(_BYTE *)(a1 + 64))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
      [v10 setObject:v11 forKeyedSubscript:@"everOptedIn"];
    }

    [v6 setPropertiesToUpdate:v10];
    [v6 setResultType:1];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v23 = *(id *)(v13 + 40);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 executeRequest:v6 error:&v23]);
    objc_storeStrong((id *)(v13 + 40), v23);

    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v22 = *(id *)(v16 + 40);
    [v15 persistWithError:&v22];
    objc_storeStrong((id *)(v16 + 40), v22);
    if (!v14)
    {
      if (qword_1002E6410 != -1) {
        dispatch_once(&qword_1002E6410, &stru_100277800);
      }
      uint64_t v17 = (os_log_s *)qword_1002E6418;
      if (os_log_type_enabled((os_log_t)qword_1002E6418, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v26 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "onQueueSetCachedPeerOptInState delete: %@",  buf,  0xCu);
      }
    }
  }

  uint64_t v19 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v21 = *(id *)(v20 + 40);
  [v19 cleanseError:&v21];
  objc_storeStrong((id *)(v20 + 40), v21);
}

void sub_100015918(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

void sub_100015948(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6418;
  qword_1002E6418 = (uint64_t)v1;
}

LABEL_11:
    uint64_t v8 = 0LL;
  }

LABEL_12:
  if (qword_1002E6470 != -1) {
    dispatch_once(&qword_1002E6470, &stru_1002787A8);
  }
  uint64_t v17 = (void *)qword_1002E6478;
  if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void **)(a1 + 40);
    uint64_t v19 = v17;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 selfErrors]);
    *(_DWORD *)buf = 138412290;
    id v39 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "ValidateSelf: finished: %@", buf, 0xCu);
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
  id v22 = [v21 count];

  if (v22)
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 componentsJoinedByString:@","]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"uris failed: %@",  v25));

    v36[0] = NSMultipleUnderlyingErrorsKey;
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 allValues]);
    v36[1] = NSLocalizedDescriptionKey;
    v37[0] = v28;
    v37[1] = v26;
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v37,  v36,  2LL));

    id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyErrorVerify",  -320LL,  v29));
    [*(id *)(a1 + 40) setError:v30];
  }

  [*(id *)(a1 + 40) fillStatus];
  id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operationQueue]);
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) finishedOp]);
  [v31 addOperation:v32];
}

    [WeakRetained retry];
    goto LABEL_12;
  }

  if (qword_1002E6490 != -1) {
    dispatch_once(&qword_1002E6490, &stru_100278C08);
  }
  uint64_t v8 = (os_log_s *)qword_1002E6498;
  if (os_log_type_enabled((os_log_t)qword_1002E6498, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = 134217984;
    id v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "FillStatus: setting server opt-in state to %lu",  (uint8_t *)&v13,  0xCu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stateMonitor]);
  [v10 setServerOptInState:a2];

LABEL_12:
  id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v11 addOperation:v12];
}
}

  return (char)v4;
}
}

      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v9 = v3 + 24;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularBytesField(value:)(v9, a2, a3);
    goto LABEL_11;
  }

  return result;
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int128 v24 = (uint64_t *)(v20[6] + 16 * v14);
    *__int128 v24 = a3;
    v24[1] = a4;
    __int128 v25 = v20[7] + 16 * v14;
    *(void *)__int128 v25 = a1;
    *(_BYTE *)(v25 + _Block_object_dispose(va, 8) = a2 & 1;
    uint64_t v26 = v20[2];
    id v27 = __OFADD__(v26, 1LL);
    id v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_100095818(v17, a5 & 1);
  id v22 = sub_100079A58(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    id v14 = v22;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v23 = (uint64_t *)(v18[6] + 16 * v12);
    *id v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    __int128 v24 = v18[2];
    __int128 v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_1000A3E4C(v15, a4 & 1);
  id v21 = sub_100079A58(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v22 = (uint64_t *)(v18[6] + 16 * v12);
    *id v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v23 = v18[2];
    __int128 v24 = __OFADD__(v23, 1LL);
    __int128 v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1000AB920(v15, a4 & 1);
  uint64_t v20 = sub_100079A58(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v23 = (uint64_t *)(v18[6] + 16 * v12);
    *id v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    __int128 v24 = v18[2];
    __int128 v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return sub_100072B9C(a2, a3);
    }

    goto LABEL_14;
  }

  sub_1000B6F08(v15, a4 & 1);
  id v21 = sub_1000B60DC(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1000B6154);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    __break(1u);
    goto LABEL_12;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int128 v24 = (uint64_t *)(v20[6] + 16 * v14);
    *__int128 v24 = a3;
    v24[1] = a4;
    __int128 v25 = (void *)(v20[7] + 16 * v14);
    *__int128 v25 = a1;
    v25[1] = a2;
    uint64_t v26 = v20[2];
    id v27 = __OFADD__(v26, 1LL);
    id v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_1000D83FC(v17, a5 & 1);
  id v22 = sub_100079A58(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    id v14 = v22;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  return v6;
}

  return v3;
}

    LOBYTE(v11) = 0;
  }

  return (char)v6;
}

  return (char)v6;
}

  __int128 v25 = (void *)objc_opt_class(*(void *)(a1 + 64), v24);
  uint64_t v26 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v27 = *(id *)(v26 + 40);
  [v25 cleanseError:&v27];
  objc_storeStrong((id *)(v26 + 40), v27);
}

  return v6;
}

  return (char)v4;
}

    *a3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  v13,  @"log entry missing data required for verification"));
    goto LABEL_12;
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue(-[LogEntry nodeBytes](self, "nodeBytes"));
  if (!v6
    || (id v7 = (void *)v6,
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry nodeBytes](self, "nodeBytes")),
        id v9 = [v8 length],
        v8,
        v7,
        !v9))
  {
    uint64_t v13 = -19LL;
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  id v10 = objc_claimAutoreleasedReturnValue(-[LogEntry hashesOfPeersInPathToRootArray](self, "hashesOfPeersInPathToRootArray"));
  if (!v10) {
    goto LABEL_8;
  }
  id v11 = (void *)v10;
  if (-[LogEntry nodePosition](self, "nodePosition"))
  {
    id v12 = -[LogEntry hashesOfPeersInPathToRootArray_Count](self, "hashesOfPeersInPathToRootArray_Count");

    if (!v12)
    {
LABEL_8:
      uint64_t v13 = -20LL;
      if (!a3) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }

  else
  {
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry slh](self, "slh"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry verifier](self, "verifier"));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 trustedKeyStore]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 signatureVerifier]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry dataStore](self, "dataStore"));
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[SignedLogHead signedTypeWithObject:verifier:dataStore:]( &OBJC_CLASS___SignedLogHead,  "signedTypeWithObject:verifier:dataStore:",  v17,  v20,  v21));

  id v23 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry verifier](self, "verifier"));
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry nodeBytes](self, "nodeBytes"));
  __int128 v25 = -[LogEntry nodePosition](self, "nodePosition");
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[LogEntry hashesOfPeersInPathToRootArray](self, "hashesOfPeersInPathToRootArray"));
  id v15 = [v23 verifyLogEntryWithLogLeaf:v24 position:v25 hashesToRoot:v26 signedLogHead:v22 error:a3];

  return (unint64_t)v15;
}

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  [v5 addObject:self];
  objc_sync_exit(v5);
}

LABEL_12:
  return v8;
}
  }

  else
  {
    LOBYTE(v9) = 0;
  }

  return (char)v9;
}

      uint64_t v18 = 0LL;
      goto LABEL_24;
    }

    if ([v8 isEqual:@"KTStateCheckCloudKitAccount"])
    {
      [v9 _onqueueRemoveFlag:@"CKAccountChanged"];
      if (!-[KTSMManager isCloudKitManateeAcountAvailable](self, "isCloudKitManateeAcountAvailable"))
      {
        if (qword_1002E64C0 != -1) {
          dispatch_once(&qword_1002E64C0, &stru_100279950);
        }
        v46 = (void *)qword_1002E64C8;
        if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v47 = v46;
          __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager cloudKitAccountInfo](self, "cloudKitAccountInfo"));
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "CloudKit not available for device2device encryption, holding start up: %@",  buf,  0xCu);
        }

        goto LABEL_12;
      }

      id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@",  @"initializing-ck-show-up"));
      id v30 = (KTConfigBagFetchOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  v29,  @"GetStatusInitial"));
      goto LABEL_22;
    }

    v45 = @"WaitForManatee";
    if ([v8 isEqual:@"WaitForManatee"])
    {
      if ([v9 _onqueueContains:@"OctagonTrustChanged"])
      {
        uint64_t v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"ckaccount-probably-changed",  @"Initializing"));
        goto LABEL_9;
      }

      if ([v9 _onqueueContains:@"ManateeViewChanged"])
      {
        uint64_t v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"retry-manatee-check",  @"Initializing"));
        goto LABEL_9;
      }

            v50 = v23;
            v51 = 0LL;
            goto LABEL_29;
          }

          v107 = v16;
          v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v111 = (void *)swift_slowAlloc(32LL, -1LL);
          v121 = v111;
          v110 = v35;
          *(_DWORD *)v35 = 136315138;
          v109 = v35 + 4;
          uint64_t v36 = a2;
          unsigned int v37 = [v32 recordName];
          signed int v38 = v9;
          id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          uint64_t v41 = v40;

          a2 = v36;
          __int16 v42 = v39;
          id v9 = v38;
          v119 = sub_10007C22C(v42, v41, (uint64_t *)&v121);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v109, v35 + 12);

          uint64_t v43 = v41;
          uint64_t v16 = v107;
          swift_bridgeObjectRelease(v43);
          uint64_t v44 = v110;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v33, v34, "self: updating existing record %s", v110, 0xCu);
          v45 = v111;
          swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1LL, -1LL);
          swift_slowDealloc(v44, -1LL, -1LL);
LABEL_27:

          v49 = (NSString)a2[6];
          if (v49) {
            goto LABEL_28;
          }
          goto LABEL_12;
        }

      __break(1u);
      goto LABEL_13;
    }

        __break(1u);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_12;
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

  return v6;
}

  return v11;
}

    unsigned int v4 = 0;
    goto LABEL_13;
  }

  if ([v9 count])
  {
    uint64_t v20 = 0LL;
    id v21 = v9;
  }

  else
  {
    if (v38[5])
    {
      v24[2](v24, 0LL);
      goto LABEL_17;
    }

    id v22 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDatabase,  -299LL,  @"no auditor reports for eventIds: %@",  obj));
    id v23 = (void *)v38[5];
    v38[5] = v22;

    id v21 = 0LL;
    uint64_t v20 = v38[5];
  }

  ((void (*)(void (**)(id, void), void *, uint64_t))v24[2])(v24, v21, v20);
LABEL_17:

  _Block_object_dispose(&v37, 8);
}

  return (char)v6;
}

  return v5;
}

void sub_100016F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtColumn:a2]);
  id v6 = (id)v4;
  if (v4)
  {
    [*(id *)(a1 + 32) setObject:v4 atIndexedSubscript:a2];
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [*(id *)(a1 + 32) setObject:v5 atIndexedSubscript:a2];
  }
}

void sub_100017044(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtColumn:a2]);
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100017584(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017DC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017DF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017E24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017E54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017E84(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017EB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017EE4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017F14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017F44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017F74(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017FA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_100017FD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6428;
  qword_1002E6428 = (uint64_t)v1;
}

void sub_1000181C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6438;
  qword_1002E6438 = (uint64_t)v1;
}

LABEL_8:
  uint64_t v16 = (__objc2_meth_list **)(&OBJC_PROTOCOL___TransparencyFollowUpProtocol + 32);
  if (_os_feature_enabled_impl("Transparency", "KTBackgroundVerificationUI"))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 smDataStore]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 getSettingsDate:off_1002DE050]);

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 smDataStore]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 getSettingsNumber:off_1002DE060]);

    +[TransparencySettings backgroundFollowupDelayPeriod]( &OBJC_CLASS___TransparencySettings,  "backgroundFollowupDelayPeriod");
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v23));
    if ([v19 compare:v24] == (id)-1)
    {
      __int128 v25 = [v22 unsignedIntegerValue];
      uint64_t v26 = +[TransparencySettings backgroundFollowupFailureCount]( &OBJC_CLASS___TransparencySettings,  "backgroundFollowupFailureCount");

      uint64_t v16 = (__objc2_meth_list **)(&OBJC_PROTOCOL___TransparencyFollowUpProtocol + 32);
      if (v25 >= v26)
      {
        if (qword_1002E6440 != -1) {
          dispatch_once(&qword_1002E6440, &stru_100277A58);
        }
        id v27 = (os_log_s *)qword_1002E6448;
        if (os_log_type_enabled((os_log_t)qword_1002E6448, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          id v64 = v22;
          v65 = 2112;
          uint64_t v66 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "BackgroundSystemValidation: posting followup for %@ consistent background validation failures since %@",  buf,  0x16u);
        }

        id v28 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 smDataStore]);
        uint64_t v16 = &OBJC_PROTOCOL___TransparencyFollowUpProtocol.class_meths;
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 getSettingsData:off_1002DE058]);

        if (v30) {
          id v31 = -[NSUUID initWithUUIDBytes:]( [NSUUID alloc], "initWithUUIDBytes:", [v30 bytes]);
        }
        else {
          id v31 = 0LL;
        }
        unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
        signed int v38 = (void *)objc_claimAutoreleasedReturnValue([v37 cloudRecords]);

        if (v38)
        {
          id v61 = v31;
          v62[1] = 0LL;
          v60 = v38;
          id v39 = kKTApplicationIdentifierIDS;
          uint64_t v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "getAggregateOptInStateForApplication:error:"));
          uint64_t v41 = 0LL;
          if (!v40)
          {
            if (qword_1002E6440 != -1) {
              dispatch_once(&qword_1002E6440, &stru_100277A78);
            }
            __int16 v42 = (os_log_s *)qword_1002E6448;
            if (os_log_type_enabled((os_log_t)qword_1002E6448, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v64 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "BackgroundSystemValidation: failed getting optin state for followup: %@",  buf,  0xCu);
            }
          }

          v58 = v41;
          v59 = v30;
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 followup]);
          v62[0] = 0LL;
          v45 = (void *)v40;
          [v44 postFollowup:v39 type:1 eventId:v61 errorCode:-388 optInState:v40 infoLink:0 additionalInfo:0 error:v62];
          v46 = v62[0];

          uint64_t v16 = &OBJC_PROTOCOL___TransparencyFollowUpProtocol.class_meths;
          if (v46)
          {
            if (qword_1002E6440 != -1) {
              dispatch_once(&qword_1002E6440, &stru_100277A98);
            }
            uint64_t v47 = (os_log_s *)qword_1002E6448;
            if (os_log_type_enabled((os_log_t)qword_1002E6448, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v64 = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "BackgroundSystemValidation: failed to post followup: %@",  buf,  0xCu);
            }
          }

          id v30 = v59;
          signed int v38 = v60;
          id v31 = v61;
        }
      }
    }

    else
    {

      uint64_t v16 = (__objc2_meth_list **)(&OBJC_PROTOCOL___TransparencyFollowUpProtocol + 32);
    }

    p_class_meths = &OBJC_PROTOCOL___TransparencyFollowUpProtocol.class_meths;
  }

  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
  v49 = (void *)objc_claimAutoreleasedReturnValue([v48 smDataStore]);
  [v49 setSettingsNumber:off_1002DE048 number:&off_100299AE0];

  v50 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
  v51 = (void *)objc_claimAutoreleasedReturnValue([v50 smDataStore]);
  v52 = v16[11];
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation opUUIDData](self, "opUUIDData"));
  [v51 setSettingsData:v52 data:v53];

  v54 = (void *)objc_claimAutoreleasedReturnValue(-[KTBackgroundSystemValidationOperation deps](self, "deps"));
  v55 = (void *)objc_claimAutoreleasedReturnValue([v54 smDataStore]);
  v56 = p_class_meths[8];
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v55 setSettingsDate:v56 date:v57];
}
}

  if (v12 == *(void *)(a2 + 16)) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v13 = 0;
  return v13 & 1;
}

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

      LOBYTE(v6) = 0;
      return v6;
    }

  if ((var6 - 15) <= 1)
  {
    v7->msgClass_ = v8->var1.var1;
LABEL_14:
    if ((v4 & 1) != 0 && !v10)
    {
      uint64_t v13 = *(unsigned int **)a3;
      v7->defaultValue_.valueInt64 = (int64_t)v13;
      if (var6 == 13)
      {
        if (v13) {
          v7->defaultValue_.valueInt64 = (int64_t)-[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v13 + 1,  bswap32(*v13));
        }
      }
    }

    return v7;
  }

  if (var6 != 17) {
    goto LABEL_14;
  }
  v7->enumDescriptor_ = (TransparencyGPBEnumDescriptor *)((uint64_t (*)(void))v8->var1.var0)();
  if ((v4 & 1) != 0 && !v10) {
    v7->defaultValue_.valueInt64 = *(void *)a3;
  }
  return v7;
}

        uint64_t v40 = 0LL;
        id v27 = [v12 parseExtensions:v37 end:v10 result:&v40];
        id v28 = v40;
        if (v27) {
          goto LABEL_9;
        }

        id v39 = 0LL;
        uint64_t v34 = [v12 parseByteArray:v18 end:v10 minLength:0 maxLength:0x10000 result:&v39];
        id v21 = v39;
        if (!v34)
        {
          id v30 = 0LL;
          id v28 = 0LL;
          if (v36) {
            void *v36 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -360LL,  @"failed to parse devices from OptInOut"));
          }
          goto LABEL_10;
        }

        signed int v38 = 0LL;
        id v27 = [v12 parseExtensions:v34 end:v10 result:&v38];
        id v28 = v38;
        if (v27)
        {
LABEL_9:
          id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v28));
          [v12 setExtensions:v29];

          objc_msgSend(v12, "setParsedLength:", v27 - (_BYTE *)objc_msgSend(objc_retainAutorelease(v8), "bytes"));
          id v30 = v12;
        }

        else
        {
          id v30 = 0LL;
          if (v36) {
            void *v36 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -248LL,  @"failed to parse extensions from OptInOut"));
          }
        }

    *a3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  v22,  @"map entry data required for verification"));
    goto LABEL_9;
  }

  id v9 = objc_claimAutoreleasedReturnValue(-[BatchedMapEntry hashesOfPeersInPathToRootArray](self, "hashesOfPeersInPathToRootArray"));
  if (!v9
    || (id v10 = (void *)v9,
        id v11 = -[BatchedMapEntry hashesOfPeersInPathToRootArray_Count](self, "hashesOfPeersInPathToRootArray_Count"),
        v10,
        !v11))
  {
    id v22 = -17LL;
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry verifier](self, "verifier"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry mapLeaf](self, "mapLeaf"));
  id v29 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry verifier](self, "verifier"));
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v29 entryPosition]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry smh](self, "smh"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v28 parsedMapHead]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 mapHeadHash]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry smh](self, "smh"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 parsedMapHead]);
  uint64_t v19 = [v18 treeId];
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[BatchedMapEntry hashesOfPeersInPathToRootArray](self, "hashesOfPeersInPathToRootArray"));
  LOBYTE(v19) = [v12 verifyInclusionOfMapLeaf:v13 position:v14 treeHead:v16 treeId:v19 hashPath:v20 error:a3];

  if (a3) {
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -43LL,  *a3,  @"failed to verify inclusion proof for map leaf in mapHeadHash"));
  }
  if (qword_1002EEB78 != -1) {
    dispatch_once(&qword_1002EEB78, &stru_100285F70);
  }
  id v27 = qword_1002EEB80;
  if (os_log_type_enabled((os_log_t)qword_1002EEB80, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    __int128 v24 = "failed to verify inclusion proof for map leaf in mapHeadHash";
    __int128 v25 = (os_log_s *)v27;
    uint64_t v26 = 2;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
  }

  return 0LL;
}

  uint64_t v43 = 0u;
  uint64_t v44 = 0u;
  uint64_t v41 = 0u;
  __int16 v42 = 0u;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "loggableData", v5));
  uint64_t v13 = [v12 countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (!v13) {
    goto LABEL_33;
  }
  id v14 = v13;
  id v15 = *(void *)v42;
  do
  {
    uint64_t v16 = 0LL;
    do
    {
      if (*(void *)v42 != v15) {
        objc_enumerationMutation(v12);
      }
      uint64_t v17 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)v16);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);

      if (v18)
      {
        uint64_t v19 = objc_claimAutoreleasedReturnValue([v17 signature]);
        if (!v19
          || (uint64_t v20 = (void *)v19,
              id v21 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]),
              id v22 = [v21 code],
              v21,
              v20,
              v22 == (id)-286LL))
        {
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
          [v6 addDeviceHealableError:3 deviceId:v23];
        }

        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        __int128 v25 = [v24 code];

        if (v25 == (id)-272LL)
        {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
          [v6 addDeviceHealableError:4 deviceId:v26];
        }

        id v27 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        id v28 = [v27 code];

        if (v28 == (id)-101LL)
        {
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
          [v6 addDeviceHealableError:6 deviceId:v29];
        }

        id v30 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        if ([v30 code] == (id)-94) {
          goto LABEL_26;
        }
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        if ([v31 code] == (id)-93) {
          goto LABEL_25;
        }
        __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        if ([v32 code] == (id)-95)
        {

LABEL_25:
LABEL_26:

LABEL_27:
          id v33 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
          [v6 addDeviceHealableError:5 deviceId:v33];

          goto LABEL_28;
        }

        uint64_t v34 = v15;
        v35 = v12;
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v17 failure]);
        uint64_t v40 = [v36 code];

        id v12 = v35;
        id v15 = v34;

        if (v40 == (id)-96LL) {
          goto LABEL_27;
        }
      }

  return v10;
}

void sub_100018A5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_100018A8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_100018ABC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_1000191A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
}

void sub_1000191DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_10001920C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  [WeakRetained setError:v4];
  [WeakRetained setTransaction:0];
}

void sub_100019AF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_100019B20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6448;
  qword_1002E6448 = (uint64_t)v1;
}

void sub_100019D14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v32 = 0LL;
    id v33 = &v32;
    uint64_t v34 = 0x3032000000LL;
    v35 = sub_10001A070;
    uint64_t v36 = sub_10001A080;
    id v37 = 0LL;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
    id v7 = [v6 batchQueryMaxURIs];
    uint64_t v8 = (id *)(v33 + 5);
    id obj = (id)v33[5];
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyRPCRequestBuilder buildBatchQueryRequests:application:maxURIsPerBatch:error:]( &OBJC_CLASS___TransparencyRPCRequestBuilder,  "buildBatchQueryRequests:application:maxURIsPerBatch:error:",  v4,  v5,  v7,  &obj));
    objc_storeStrong(v8, obj);

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
      uint64_t v13 = *(unsigned __int8 *)(a1 + 64);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_10001A0B8;
      v26[3] = &unk_100277C18;
      id v30 = &v32;
      id v27 = v10;
      int8x16_t v20 = *(int8x16_t *)(a1 + 40);
      id v14 = (id)v20.i64[0];
      int8x16_t v28 = vextq_s8(v20, v20, 8uLL);
      id v29 = v11;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_10001A864;
      v21[3] = &unk_100277C40;
      id v15 = v27;
      id v22 = v15;
      id v16 = v29;
      id v23 = v16;
      id v24 = *(id *)(a1 + 56);
      __int128 v25 = &v32;
      [v12 fetchBatchQueries:v9 userInitiated:v13 responseHandler:v26 completionHandler:v21];
    }

    else
    {
      if (qword_1002E6450 != -1) {
        dispatch_once(&qword_1002E6450, &stru_100277B40);
      }
      uint64_t v17 = (os_log_s *)qword_1002E6458;
      if (os_log_type_enabled((os_log_t)qword_1002E6458, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = v33[5];
        *(_DWORD *)buf = 138412290;
        uint64_t v39 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to create query request: %@",  buf,  0xCu);
      }

      uint64_t v19 = *(void *)(a1 + 56);
      id v15 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v33[5]));
      (*(void (**)(uint64_t, void, id))(v19 + 16))(v19, 0LL, v15);
    }

    _Block_object_dispose(&v32, 8);
  }
}

void sub_10001A048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10001A070(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001A080(uint64_t a1)
{
}

void sub_10001A088(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6458;
  qword_1002E6458 = (uint64_t)v1;
}

void sub_10001A0B8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v10)
  {
    if (qword_1002E6450 != -1) {
      dispatch_once(&qword_1002E6450, &stru_100277B80);
    }
    uint64_t v13 = (os_log_s *)qword_1002E6458;
    if (os_log_type_enabled((os_log_t)qword_1002E6458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "fetch batch query succeeded", buf, 2u);
    }

    id v31 = @"responseDebugDescription";
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 diagnosticsJsonDictionary]);
    uint64_t v32 = v14;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v11 UUIDString]);
    [v16 setObject:v15 forKeyedSubscript:v17];

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) xpcContextStore]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v20 = *(void *)(a1 + 48);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ktLogClient]);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10001A46C;
    v29[3] = &unk_100277BA8;
    id v30 = *(id *)(a1 + 56);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10001A74C;
    v27[3] = &unk_100277BF0;
    id v28 = v11;
    [v18 handleBatchQueryResponse:v10 queryRequest:v9 receiptDate:v19 fetchId:v28 application:v20 logClient:v21 transparentDataHandler:v29 completionHandler:v27];

    id v22 = v30;
  }

  else
  {
    if (qword_1002E6450 != -1) {
      dispatch_once(&qword_1002E6450, &stru_100277B60);
    }
    id v23 = (os_log_s *)qword_1002E6458;
    if (os_log_type_enabled((os_log_t)qword_1002E6458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "fetch batch query failed: %@", buf, 0xCu);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a5);
    id v33 = @"error";
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v12 description]);
    uint64_t v34 = v22;
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
    __int128 v25 = *(void **)(a1 + 32);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v11 UUIDString]);
    [v25 setObject:v24 forKeyedSubscript:v26];
  }
}

void sub_10001A40C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6458;
  qword_1002E6458 = (uint64_t)v1;
}

void sub_10001A43C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6458;
  qword_1002E6458 = (uint64_t)v1;
}

void sub_10001A46C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  if (v10)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 mapEntry]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 mapLeaf]);

    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 mapEntry]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 mapLeaf]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[IdsMapLeaf parseFromData:error:](&OBJC_CLASS___IdsMapLeaf, "parseFromData:error:", v17, 0LL));

      if (v18)
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 diagnosticsJsonDictionary]);
        [v13 setObject:v19 forKeyedSubscript:@"mapLeaf"];
      }
    }

    if (objc_msgSend(v10, "pendingSmtsArray_Count"))
    {
      id v30 = v12;
      uint64_t v31 = a1;
      id v32 = v9;
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v10 pendingSmtsArray]);
      id v22 = [v21 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v34;
        do
        {
          for (i = 0LL; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v34 != v24) {
              objc_enumerationMutation(v21);
            }
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[SignedMutationTimestamp signedTypeWithObject:]( &OBJC_CLASS___SignedMutationTimestamp,  "signedTypeWithObject:",  *(void *)(*((void *)&v33 + 1) + 8LL * (void)i)));
            id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 diagnosticsJsonDictionary]);
            [v20 addObject:v27];
          }

          id v23 = [v21 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }

        while (v23);
      }

      if ([v20 count]) {
        [v13 setObject:v20 forKeyedSubscript:@"pendingSmts"];
      }

      a1 = v31;
      id v9 = v32;
      id v12 = v30;
    }
  }

  if (v11)
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v11 diagnosticsJsonDictionary]);
    [v13 setObject:v28 forKeyedSubscript:@"transparentData"];
  }

  if (v12)
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v12 description]);
    [v13 setObject:v29 forKeyedSubscript:@"error"];
  }

  [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v9];
}

void sub_10001A74C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1002E6450 != -1) {
    dispatch_once(&qword_1002E6450, &stru_100277BC8);
  }
  uint64_t v5 = (os_log_s *)qword_1002E6458;
  if (os_log_type_enabled((os_log_t)qword_1002E6458, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "failed to handle fetchId %{public}@ batch query: %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_10001A834(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6458;
  qword_1002E6458 = (uint64_t)v1;
}

void sub_10001A864(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v2, v4);
}

void sub_10001AE08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001AE38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001AE68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001AE98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

LABEL_47:
  return a3;
}

void sub_10001B540(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001B570(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001B5A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001B7EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001BE58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

uint64_t sub_10001BEB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001BEC0(uint64_t a1)
{
}

void sub_10001BEC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    uint64_t v40 = a3;
    uint64_t v41 = *(void *)(a1 + 88);
    id v11 = v8;
    id v12 = v7;
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountKey]);
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    uint64_t v16 = *(void *)(a1 + 96);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsResponseTime]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) metadata]);
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id obj = *(id *)(v19 + 40);
    uint64_t v20 = v13;
    id v7 = v12;
    id v8 = v11;
    id v21 = [v20 validateAndReportPeerOrEnroll:v7 type:v41 transparentData:v11 accountKey:v14 loggableDatas:v15 initialResult:v16 idsResponseTime:v17 re sponseMetadata:v18 error:&obj];
    objc_storeStrong((id *)(v19 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v21;

    if (*(void *)(a1 + 96) == 3LL)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 3LL;
    }

    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    if (v22 == 3)
    {
      id v23 = v40;
      id v9 = 0LL;
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277DC8);
      }
      id v30 = (void *)qword_1002E6468;
      if (!os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      if (*(void *)(a1 + 88)) {
        uint64_t v31 = @"enroll";
      }
      else {
        uint64_t v31 = @"peer";
      }
      id v32 = *(void **)(a1 + 40);
      id v27 = v30;
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v32 requestId]);
      *(_DWORD *)buf = 138412546;
      uint64_t v44 = (uint64_t)v31;
      __int16 v45 = 2114;
      id v46 = v28;
      id v29 = "Ignoring validate %@ result for requestId %{public}@";
    }

    else
    {
      id v23 = v40;
      id v9 = 0LL;
      if (v22 != 1)
      {
        if (qword_1002E6460 != -1) {
          dispatch_once(&qword_1002E6460, &stru_100277DE8);
        }
        __int128 v36 = (void *)qword_1002E6468;
        if (!os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR)) {
          goto LABEL_34;
        }
        if (*(void *)(a1 + 88)) {
          id v37 = @"enroll";
        }
        else {
          id v37 = @"peer";
        }
        signed int v38 = *(void **)(a1 + 40);
        id v27 = v36;
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v38 requestId]);
        uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412802;
        uint64_t v44 = (uint64_t)v37;
        __int16 v45 = 2114;
        id v46 = v28;
        __int16 v47 = 2112;
        id v48 = v39;
        id v29 = "Validate %@ failed for requestId %{public}@: %@";
        __int128 v33 = v27;
        os_log_type_t v34 = OS_LOG_TYPE_ERROR;
        uint32_t v35 = 32;
        goto LABEL_33;
      }

      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277DA8);
      }
      uint64_t v24 = (void *)qword_1002E6468;
      if (!os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      if (*(void *)(a1 + 88)) {
        __int128 v25 = @"enroll";
      }
      else {
        __int128 v25 = @"peer";
      }
      uint64_t v26 = *(void **)(a1 + 40);
      id v27 = v24;
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 requestId]);
      *(_DWORD *)buf = 138412546;
      uint64_t v44 = (uint64_t)v25;
      __int16 v45 = 2114;
      id v46 = v28;
      id v29 = "Validate %@ succeeded for requestId %{public}@";
    }

    __int128 v33 = v27;
    os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
    uint32_t v35 = 22;
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v29, buf, v35);

LABEL_34:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), v23);
    goto LABEL_35;
  }

  if (qword_1002E6460 != -1) {
    dispatch_once(&qword_1002E6460, &stru_100277D88);
  }
  id v10 = (os_log_s *)qword_1002E6468;
  if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v44 = 1752392040LL;
    __int16 v45 = 2112;
    id v46 = v7;
    __int16 v47 = 2112;
    id v48 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "verification failed for %{mask.hash}@: %@",  buf,  0x20u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a4);
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0LL;
LABEL_35:
}

void sub_10001C370(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001C3A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001C3D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001C400(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001C430(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001C7C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001CE88(_Unwind_Exception *a1)
{
}

void sub_10001CEE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v69 = *(id *)(v13 + 40);
    id v70 = 0LL;
    id v14 = [v11 deserializeSyncedLoggableDatas:v12 loggableDatas:&v70 error:&v69];
    id v15 = v70;
    objc_storeStrong((id *)(v13 + 40), v69);
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = v14;
    if (v14 != (id)1)
    {
LABEL_33:

      goto LABEL_34;
    }

    id v65 = a3;
    uint64_t v16 = *(void **)(a1 + 48);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 uriVRFOutput]);
    [v16 setWithUriVRFHash:v17];

    id v64 = *(void **)(a1 + 32);
    uint64_t v18 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountKey]);
    uint64_t v62 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
    id v63 = (void *)v18;
    char v60 = *(_BYTE *)(a1 + 128);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v61 = *(void *)(a1 + 56);
    id v66 = v7;
    id v67 = v15;
    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 72);
    char v22 = *(_BYTE *)(a1 + 129);
    id v23 = v8;
    uint64_t v24 = *(void *)(a1 + 120);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsResponseTime]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) metadata]);
    uint64_t v27 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id obj = *(id *)(v27 + 40);
    uint64_t v59 = v24;
    id v8 = v23;
    LOBYTE(v5_Block_object_dispose((const void *)(v1 - 160), 8) = v22;
    uint64_t v57 = v20;
    id v7 = v66;
    LOBYTE(v56) = v60;
    id v28 = [v64 validateAndReportSelf:v66 transparentData:v23 accountKey:v63 serverloggableDatas:v62 syncedLoggableDatas:v67 selfVerificationInf o:v61 optInCheck:v56 cloudDevices:v19 pcsAccountKey:v57 kvsOptInHistory:v21 isReplay:v58 initialResult:v59 idsResponseTime:v25 responseMetadata:v26 error:&obj];
    objc_storeStrong((id *)(v27 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = v28;

    if (*(void *)(a1 + 120) == 3LL)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 3LL;
    }

    uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL);
    if (v29 == 3)
    {
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277EB0);
      }
      id v9 = 0LL;
      __int128 v36 = (void *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = *(void **)(a1 + 40);
        signed int v38 = v36;
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v37 requestId]);
        *(_DWORD *)buf = 138543362;
        uint64_t v72 = (uint64_t)v39;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Ignoring validate self result for requestId %{public}@",  buf,  0xCu);
      }

      goto LABEL_32;
    }

    if (v29 == 1)
    {
      id v9 = 0LL;
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277E90);
      }
      id v30 = (void *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = *(void **)(a1 + 40);
        id v32 = v30;
        __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 requestId]);
        *(_DWORD *)buf = 138543362;
        uint64_t v72 = (uint64_t)v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Validate self succeeded for requestId %{public}@",  buf,  0xCu);
      }

      os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      uint32_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
      [v34 clearSelfFailureRelatedData:v35 uri:v66 error:0];
    }

    else
    {
      id v9 = 0LL;
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277ED0);
      }
      uint64_t v40 = (void *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void **)(a1 + 40);
        __int16 v42 = v40;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v41 requestId]);
        uint64_t v44 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
        *(_DWORD *)buf = 138543618;
        uint64_t v72 = (uint64_t)v43;
        __int16 v73 = 2112;
        id v74 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Validate self failed for requestId %{public}@: %@",  buf,  0x16u);
      }

      __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsResponseTime]);
      id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountKey]);
      unsigned int v47 = [v8 optInAfter:v45 accountKey:v46];

      if (!v47) {
        goto LABEL_32;
      }
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277EF0);
      }
      id v48 = (void *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(void **)(a1 + 32);
        v50 = v48;
        v51 = (void *)objc_claimAutoreleasedReturnValue([v49 applicationID]);
        *(_DWORD *)buf = 141558530;
        uint64_t v72 = 1752392040LL;
        __int16 v73 = 2112;
        id v74 = v66;
        __int16 v75 = 2112;
        id v76 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Clearing IDS cache for %{mask.hash}@[%@]",  buf,  0x20u);
      }

      v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uri]);
      v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
      [v52 clearIDSCacheForUri:v53 application:v54];

      os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
      [v34 triggerSelfValidate:1.0];
    }

LABEL_32:
    v55 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore serializeLoggableDatas:]( &OBJC_CLASS___TransparencyManagedDataStore,  "serializeLoggableDatas:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL)));
    [*(id *)(a1 + 40) setServerLoggableDatas:v55];

    [*(id *)(a1 + 32) writeLoggableDatas:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) request:*(void *)(a1 + 40)];
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL), v65);
    id v15 = v67;
    goto LABEL_33;
  }

  if (qword_1002E6460 != -1) {
    dispatch_once(&qword_1002E6460, &stru_100277E70);
  }
  id v10 = (os_log_s *)qword_1002E6468;
  if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v72 = 1752392040LL;
    __int16 v73 = 2112;
    id v74 = v7;
    __int16 v75 = 2112;
    id v76 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "verification failed for %{mask.hash}@: %@",  buf,  0x20u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), a4);
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 0LL;
LABEL_34:
}

void sub_10001D5B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D5E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D610(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D640(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D670(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D6A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D97C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001D9AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001DE90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_10001DED0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    id v37 = a3;
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountKey]);
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsResponseTime]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataForInsertResponse:*(void *)(a1 + 56)]);
    uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id obj = *(id *)(v17 + 40);
    id v38 = v7;
    id v18 = [v11 validateAndReportEnroll:v7 transparentData:v8 accountKey:v12 loggableDatas:v14 initialResult:v13 idsResponseTime:v15 responseMetadata:v16 error:&obj];
    objc_storeStrong((id *)(v17 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v18;

    if (*(void *)(a1 + 96) == 3LL)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 3LL;
    }

    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
    id v9 = 0LL;
    if (v19 == 3)
    {
      id v7 = v38;
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277FD8);
      }
      uint64_t v20 = v37;
      uint64_t v27 = (void *)qword_1002E6468;
      if (!os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      id v28 = *(void **)(a1 + 40);
      uint64_t v26 = v27;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 requestId]);
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = (uint64_t)v29;
      id v30 = "Ignoring validate enrollment result for requestId %{public}@";
      uint64_t v31 = v26;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
      uint32_t v33 = 12;
    }

    else
    {
      id v7 = v38;
      if (v19 == 1)
      {
        uint64_t v20 = v37;
        if (qword_1002E6460 != -1) {
          dispatch_once(&qword_1002E6460, &stru_100277FB8);
        }
        uint64_t v21 = (void *)qword_1002E6468;
        if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEFAULT))
        {
          char v22 = *(void **)(a1 + 40);
          id v23 = v21;
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 requestId]);
          *(_DWORD *)buf = 138543362;
          uint64_t v41 = (uint64_t)v24;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Validate enrollment succeeded for requestId %{public}@",  buf,  0xCu);
        }

        __int128 v25 = *(void **)(a1 + 32);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountKey]);
        [v25 recordEnrollOptInRecord:v38 accountKey:v26 transparentData:v8 cloudOptIn:*(void *)(a1 + 64)];
        goto LABEL_25;
      }

      uint64_t v20 = v37;
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100277FF8);
      }
      os_log_type_t v34 = (void *)qword_1002E6468;
      if (!os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint32_t v35 = *(void **)(a1 + 40);
      uint64_t v26 = v34;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v35 requestId]);
      __int128 v36 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = (uint64_t)v29;
      __int16 v42 = 2112;
      id v43 = v36;
      id v30 = "Validate enrollment failed for requestId %{public}@: %@";
      uint64_t v31 = v26;
      os_log_type_t v32 = OS_LOG_TYPE_ERROR;
      uint32_t v33 = 22;
    }

    _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, v33);

LABEL_25:
LABEL_26:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), v20);
    goto LABEL_27;
  }

  if (qword_1002E6460 != -1) {
    dispatch_once(&qword_1002E6460, &stru_100277F98);
  }
  id v10 = (os_log_s *)qword_1002E6468;
  if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v41 = 1752392040LL;
    __int16 v42 = 2112;
    id v43 = v7;
    __int16 v44 = 2112;
    id v45 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "verification failed for %{mask.hash}@: %@",  buf,  0x20u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a4);
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0LL;
LABEL_27:
}

void sub_10001E344(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E374(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E3A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E3D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E404(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E870(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E8A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001E8D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001EB48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001EE9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001EECC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001EEFC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] dataStore]);
  id v8 = a1[5];
  id v22 = 0LL;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10001F044;
  v15[3] = &unk_100278188;
  id v9 = v6;
  id v16 = v9;
  id v21 = a1[7];
  id v10 = v5;
  id v17 = v10;
  id v18 = a1[6];
  id v11 = a1[5];
  id v12 = a1[4];
  id v19 = v11;
  id v20 = v12;
  unsigned __int8 v13 = [v7 performAndWaitForFetchId:v8 error:&v22 block:v15];
  id v14 = v22;

  if ((v13 & 1) == 0) {
    (*((void (**)(void))a1[7] + 2))();
  }
}

void sub_10001F044(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 request]);
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278120);
    }
    id v5 = (void *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_INFO))
    {
      id v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 requestId]);
      *(_DWORD *)buf = 138543362;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "handling fetched response for requestId %{public}@",  buf,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 requestData]);
    id v20 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryRequest,  "parseFromData:error:",  v8,  &v20));
    id v10 = v20;

    if (!*(void *)(a1 + 48))
    {
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100278140);
      }
      id v11 = (os_log_s *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
      {
        id v12 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138543618;
        id v22 = v12;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "parse saved queryRequest for fetchId %{public}@ failed after fetch: %@",  buf,  0x16u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
  [v13 deleteObject:v3];

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
  id v19 = 0LL;
  unsigned __int8 v15 = [v14 persistAndRefaultObject:v3 error:&v19];
  id v16 = v19;

  if ((v15 & 1) == 0)
  {
    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278160);
    }
    id v17 = (os_log_s *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "failed to delete fetch record after fetch: %@",  buf,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
    [v18 reportCoreDataPersistEventForLocation:@"fetchRecordDelete" underlyingError:v16];
  }
}

void sub_10001F35C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001F38C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001F3BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001F64C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001FA7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001FAAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001FADC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  unsigned __int8 v13 = v12;
  if (!v11 || !v10 || !v9 || v12)
  {
    if (!v11 || v12)
    {
      id v19 = *(void **)(a1 + 32);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v9 uri]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v9 accountKey]);
      id v27 = 0LL;
      unsigned int v22 = [v19 peerStaticKeyFallback:v20 accountKey:v21 transparentData:&v27];
      id v17 = v27;

      if (v22)
      {
        __int16 v23 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_20:
        v23();
        goto LABEL_21;
      }
    }

    else
    {
      if (qword_1002E6460 != -1) {
        dispatch_once(&qword_1002E6460, &stru_100278230);
      }
      id v18 = (os_log_s *)qword_1002E6468;
      if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v32 = v11;
        __int16 v33 = 2112;
        uint64_t v34 = 0LL;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validatePeer static key: %@/%@", buf, 0x16u);
      }
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  0LL,  v24));

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    objc_msgSend(v25, "logResultForEvent:hardFailure:result:", v17, objc_msgSend(v9, "isDeleted"), v13);

    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278250);
    }
    uint64_t v26 = (os_log_s *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "validatePeer fetch error: %@", buf, 0xCu);
    }

    __int16 v23 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_20;
  }

  id v14 = *(void **)(a1 + 32);
  id v29 = 0LL;
  id v30 = 0LL;
  id v28 = 0LL;
  [v14 validatePeerOrEnrollKTRequest:v9 queryRequest:v10 queryResponse:v11 transparentData:&v30 loggableDatas:&v29 error:&v28];
  id v15 = v30;
  id v16 = v29;
  id v17 = v28;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_21:
}

void sub_10001FE10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001FE40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10001FE70(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_10002014C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100020188(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v9;
  id v20 = v9;

  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v10;
  id v16 = v10;

  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v11;
  id v19 = v11;

  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100020254(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100020730(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100020760(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100020790(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = v9;
  if (a4 && a3 && a2 && !v9)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v19 = 0LL;
    id v12 = a2;
    [v11 validatePeerOrEnrollKTRequest:v12 queryRequest:a3 queryResponse:a4 transparentData:0 loggableDatas:0 error:&v19];
  }

  else
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = a2;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 applicationID]);
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  2LL,  v15));

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v17 = [v14 isDeleted];

    [v16 logResultForEvent:v12 hardFailure:v17 result:v10];
    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278340);
    }
    uint64_t v18 = (os_log_s *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validateEnrollment fetch error: %@", buf, 0xCu);
    }
  }
}

void sub_100020940(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100020970(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_1000209A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100020B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 verificationResult];
  if (*(_BYTE *)(a1 + 48)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == (id)2;
  }
  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 49);
    id v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472LL;
    id v16 = sub_100020C84;
    id v17 = &unk_1002783D0;
    id v18 = v3;
    id v19 = *(id *)(a1 + 40);
    [v6 fetchAndValidatePeerKTRequest:v18 fetchNow:v7 completionHandler:&v14];
  }

  else
  {
    id v8 = v4;
    id v9 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
    id v12 = -[KTVerifierResult initWithUri:application:ktResult:](v9, "initWithUri:application:ktResult:", v10, v11, v8);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore", v14, v15, v16, v17));
  [v13 refaultObject:v3];
}

void sub_100020C84(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
  uint64_t v15 = -[KTVerifierResult initWithUri:application:ktResult:transparentData:loggableDatas:]( v12,  "initWithUri:application:ktResult:transparentData:loggableDatas:",  v13,  v14,  a2,  v11,  v10);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100020F68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100020FA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v13 = *(id *)(v5 + 40);
  id obj = v4;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v12 = *(id *)(v8 + 40);
  id v9 = a2;
  id v10 = [v6 fetchAndValidateEnrollKTRequest:v9 transparentData:&obj loggableDatas:&v13 cloudOptIn:v7 error:&v12];
  objc_storeStrong((id *)(v3 + 40), obj);
  objc_storeStrong((id *)(v5 + 40), v13);
  objc_storeStrong((id *)(v8 + 40), v12);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  [v11 refaultObject:v9];
}

void sub_100021668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_100021688(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_1000216B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v32 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryRequest,  "parseFromData:error:",  v4,  &v32));
  id v6 = v32;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    id v31 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryResponse,  "parseFromData:error:",  v7,  &v31));
    id v9 = v31;

    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "kt_dateToString"));
    [v8 setMetadataValue:v10 key:@"ResponseTime"];

    id v11 = *(void **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    id v29 = 0LL;
    id v30 = 0LL;
    LOBYTE(v2_Block_object_dispose((const void *)(v26 - 120), 8) = 1;
    id v14 = [v11 validateSelfKTRequest:v3 queryRequest:v5 queryResponse:v8 selfVerificationInfo:v12 optInCheck:0 cloudDevices:0 pcsAccountKey:v13  kvsOptInHistory:0 isReplay:v28 transparentData:&v30 loggableDatas:0 error:&v29];
    id v15 = v30;
    id v16 = v29;
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) diagnosticsJsonDictionary]);
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setKtVerificationInfoDiagnosticsJson:v17];

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 diagnosticsJsonDictionary]);
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setTransparentDataDiagnosticsJson:v18];

    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setRequestTime:*(void *)(a1 + 64)];
    else {
      id v19 = *(&off_1002784E8 + (void)v14);
    }
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setResult:v19];
    if (v16) {
      [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setError:v16];
    }
    [*(id *)(a1 + 88) setObject:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) forKeyedSubscript:*(void *)(a1 + 96)];
    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278480);
    }
    __int16 v23 = (os_log_s *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      __int128 v25 = *(void **)(a1 + 96);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v24;
      __int16 v35 = 2112;
      id v36 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "ReplaySelfValidate: deleting requestId %{public}@ for %@",  buf,  0x16u);
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
    [v26 deleteObject:v3];

    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
    [v27 persistWithError:0];

    id v6 = v9;
  }

  else
  {
    if (qword_1002E6460 != -1) {
      dispatch_once(&qword_1002E6460, &stru_100278460);
    }
    id v20 = (os_log_s *)qword_1002E6468;
    if (os_log_type_enabled((os_log_t)qword_1002E6468, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v21;
      __int16 v35 = 2112;
      id v36 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "ReplayValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@",  buf,  0x16u);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setResult:@"Failed"];
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setError:v6];
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
    [v22 deleteObject:v3];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
    [v8 persistWithError:0];
  }
}

void sub_100021A9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100021ACC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100021AFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6468;
  qword_1002E6468 = (uint64_t)v1;
}

void sub_100021E58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100021E7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100021EAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v41 = a3;
  id v8 = a4;
  from = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v50 = v7;
  id v43 = v8;
  if (!v7 || v8)
  {
    if (qword_1002E6470 != -1) {
      dispatch_once(&qword_1002E6470, &stru_100278528);
    }
    id v38 = (os_log_s *)qword_1002E6478;
    if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v68 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to fetch self verification info: %@",  buf,  0xCu);
    }

    objc_msgSend(WeakRetained, "setError:", v43, v41);
    group = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    -[dispatch_group_s addOperation:](group, "addOperation:", v47);
  }

  else
  {
    if (qword_1002E6470 != -1) {
      dispatch_once(&qword_1002E6470, &stru_100278548);
    }
    id v10 = (void *)qword_1002E6478;
    if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEBUG))
    {
      id v11 = v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uriToServerLoggableDatas", v41));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allKeys]);
      *(_DWORD *)buf = 138412290;
      uint64_t v68 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "ValidateSelf: got self verification info for %@",  buf,  0xCu);
    }

    objc_msgSend(WeakRetained, "setSelfInfo:", v7, v41);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 uriToServerLoggableDatas]);
    BOOL v15 = [v14 count] == 0;

    if (v15)
    {
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_100278568);
      }
      uint64_t v39 = (os_log_s *)qword_1002E6478;
      if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "FetchKTSelf: no uriToServerLoggableDatas",  buf,  2u);
      }

      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kTransparencyErrorServer,  -336LL,  0LL));
      [WeakRetained setError:v40];

      group = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
      unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
      -[dispatch_group_s addOperation:](group, "addOperation:", v47);
    }

    else
    {
      id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      group = dispatch_group_create();
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stateMonitor]);
      [v17 setPendingChanges:1];

      id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 syncedLoggableDatas]);
      unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore serializeLoggableDatas:]( &OBJC_CLASS___TransparencyManagedDataStore,  "serializeLoggableDatas:",  v18));

      __int128 v64 = 0u;
      __int128 v65 = 0u;
      __int128 v62 = 0u;
      __int128 v63 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v7 uriToServerLoggableDatas]);
      id v19 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
      if (v19)
      {
        uint64_t v48 = *(void *)v63;
        do
        {
          id v20 = 0LL;
          do
          {
            if (*(void *)v63 != v48) {
              objc_enumerationMutation(obj);
            }
            uint64_t v21 = *(void *)(*((void *)&v62 + 1) + 8LL * (void)v20);
            unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v50 uriToServerLoggableDatas]);
            __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v21]);

            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication addApplicationPrefixForIdentifier:uri:]( &OBJC_CLASS___TransparencyApplication,  "addApplicationPrefixForIdentifier:uri:",  v24,  v21));

            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v23 accountKey]);
            LODWORD(v24) = v26 == 0LL;

            if ((_DWORD)v24)
            {
              __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"TransparencyErrorVerify",  -389LL,  @"accountKey is nil for KTVerificationInfo"));
              uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained selfErrors]);
              [v34 setObject:v33 forKeyedSubscript:v25];
            }

            else
            {
              id v27 = (void *)objc_claimAutoreleasedReturnValue([v23 accountKey]);
              [v45 addObject:v27];

              dispatch_group_enter(group);
              if (qword_1002E6470 != -1) {
                dispatch_once(&qword_1002E6470, &stru_100278588);
              }
              uint64_t v28 = (os_log_s *)qword_1002E6478;
              if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v68 = v25;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "ValidateSelf: getting KT data for %@",  buf,  0xCu);
              }

              id v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
              id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 smDataStore]);
              id v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
              v54[0] = _NSConcreteStackBlock;
              v54[1] = 3221225472LL;
              v54[2] = sub_100022728;
              v54[3] = &unk_100278720;
              id v32 = v25;
              id v55 = v32;
              id v56 = WeakRetained;
              uint64_t v57 = group;
              objc_copyWeak(&v61, from);
              id v58 = v23;
              id v59 = v47;
              id v60 = v50;
              [v30 fetchKTInfoForApplication:v31 uri:v32 complete:v54];

              objc_destroyWeak(&v61);
              __int16 v33 = v55;
            }

            id v20 = (char *)v20 + 1;
          }

          while (v19 != v20);
          id v19 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
        }

        while (v19);
      }

      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_100278740);
      }
      __int16 v35 = (os_log_s *)qword_1002E6478;
      if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "ValidateSelf: waiting for uris to finish validating",  buf,  2u);
      }

      id v36 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained uriQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10002368C;
      block[3] = &unk_1002777A0;
      id v52 = v45;
      id v53 = WeakRetained;
      id v37 = v45;
      dispatch_group_notify(group, v36, block);
    }
  }
}

void sub_10002264C(_Unwind_Exception *a1)
{
}

void sub_100022668(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022698(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_1000226C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_1000226F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022728(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v43 = a5;
  id v14 = a6;
  id v45 = v11;
  id v46 = v12;
  __int16 v44 = v14;
  if (v11 && v12 && v13 && !v14)
  {
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cachedTimes]);
    [v15 setObject:v13 forKeyedSubscript:*(void *)(a1 + 32)];

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    if (qword_1002E6470 != -1) {
      dispatch_once(&qword_1002E6470, &stru_1002785C8);
    }
    id v17 = (os_log_s *)qword_1002E6478;
    if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v60 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "ValidateSelf: creating requestId for %@",  buf,  0xCu);
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverLoggableDatas]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore serializeLoggableDatas:]( &OBJC_CLASS___TransparencyManagedDataStore,  "serializeLoggableDatas:",  v19));

    id v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dataStore]);
    uint64_t v22 = *(void *)(a1 + 32);
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) accountKey]);
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsResponseTime]);
    id v58 = 0LL;
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue( [v21 createRequestWithUri:v22 application:v23 accountKey:v24 serverData:v41 syncedData:v25 idsResponseTime:v26 queryRequest:v45 que ryResponse:v46 responseDate:v13 type:1 clientId:0 error:&v58]);
    id v40 = v58;

    if (v42)
    {
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_100278608);
      }
      id v27 = (os_log_s *)qword_1002E6478;
      if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        uint64_t v60 = (uint64_t)v42;
        __int16 v61 = 2160;
        uint64_t v62 = 1752392040LL;
        __int16 v63 = 2112;
        id v64 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "ValidateSelf: created requestId %{public}@ for %{mask.hash}@",  buf,  0x20u);
      }

      id v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 contextStore]);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
      id v32 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 logClient]);
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_100022E20;
      v47[3] = &unk_1002786F8;
      id v48 = v42;
      id v49 = WeakRetained;
      id v50 = *(id *)(a1 + 32);
      id v51 = *(id *)(a1 + 48);
      objc_copyWeak(&v57, (id *)(a1 + 80));
      id v52 = v45;
      id v53 = v46;
      id v54 = v43;
      id v55 = v13;
      id v56 = *(id *)(a1 + 72);
      [v30 contextForApplication:v31 logClient:v33 fetchState:1 completionHandler:v47];

      objc_destroyWeak(&v57);
    }

    else
    {
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_1002785E8);
      }
      id v37 = (os_log_s *)qword_1002E6478;
      if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 141558530;
        uint64_t v60 = 1752392040LL;
        __int16 v61 = 2112;
        uint64_t v62 = v38;
        __int16 v63 = 2112;
        id v64 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to save KTRequest for %{mask.hash}@: %@",  buf,  0x20u);
      }

      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained selfErrors]);
      [v39 setObject:v40 forKeyedSubscript:*(void *)(a1 + 32)];

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    }
  }

  else
  {
    if (qword_1002E6470 != -1) {
      dispatch_once(&qword_1002E6470, &stru_1002785A8);
    }
    uint64_t v34 = (os_log_s *)qword_1002E6478;
    if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 141558530;
      uint64_t v60 = 1752392040LL;
      __int16 v61 = 2112;
      uint64_t v62 = v35;
      __int16 v63 = 2112;
      id v64 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to fetch KT data for %{mask.hash}@: %@",  buf,  0x20u);
    }

    id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    [v36 setObject:v44 forKeyedSubscript:*(void *)(a1 + 32)];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_100022D44(_Unwind_Exception *a1)
{
}

void sub_100022D60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022D90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022DC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022DF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100022E20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (qword_1002E6470 != -1) {
      dispatch_once(&qword_1002E6470, &stru_100278628);
    }
    id v17 = (os_log_s *)qword_1002E6478;
    if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v32 = v18;
      __int16 v33 = 2112;
      uint64_t v34 = (uint64_t)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to get validation context for validating requestId %{public}@: %@",  buf,  0x16u);
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    [v19 setObject:v7 forKeyedSubscript:*(void *)(a1 + 48)];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dataStore]);
    uint64_t v11 = *(void *)(a1 + 32);
    id v30 = 0LL;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10002315C;
    v20[3] = &unk_1002786B0;
    id v21 = *(id *)(a1 + 64);
    id v22 = *(id *)(a1 + 32);
    id v23 = WeakRetained;
    id v24 = *(id *)(a1 + 48);
    id v25 = *(id *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v27 = *(id *)(a1 + 88);
    id v28 = v5;
    id v29 = *(id *)(a1 + 96);
    unsigned __int8 v12 = [v10 performAndWaitForRequestId:v11 error:&v30 block:v20];
    id v13 = v30;

    if ((v12 & 1) == 0)
    {
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_1002786D0);
      }
      id v14 = (os_log_s *)qword_1002E6478;
      if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        uint64_t v32 = v15;
        __int16 v33 = 2160;
        uint64_t v34 = 1752392040LL;
        __int16 v35 = 2112;
        uint64_t v36 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to find request for requestId %{public}@ for %{mask.hash}@",  buf,  0x20u);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
}

void sub_10002312C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_10002315C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v37 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryRequest,  "parseFromData:error:",  v4,  &v37));
  id v6 = v37;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    id v36 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryResponse,  "parseFromData:error:",  v7,  &v36));
    id v32 = v36;

    uint64_t v9 = *(void *)(a1 + 72);
    if (v9) {
      [v8 setMetadataValue:v9 key:kTransparencyResponseMetadataKeyServerHint];
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "kt_dateToString"));
    [v8 setMetadataValue:v10 key:@"ResponseTime"];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    unsigned __int8 v12 = (_TtC13transparencyd19KTCloudRecordsCache *)objc_claimAutoreleasedReturnValue([v11 cloudRecords]);

    if (v12)
    {
      id v13 = objc_alloc(&OBJC_CLASS____TtC13transparencyd19KTCloudRecordsCache);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 cloudRecords]);
      unsigned __int8 v12 = -[KTCloudRecordsCache initWithRecords:](v13, "initWithRecords:", v15);
    }

    id v16 = [*(id *)(a1 + 48) isOptInSelfValidation];
    id v17 = *(void **)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    id v34 = 0LL;
    id v35 = 0LL;
    id v33 = 0LL;
    id v19 = [v17 validateSelfKTRequest:v3 queryRequest:v5 queryResponse:v8 selfVerificationInfo:v18 optInCheck:v16 cloudDevices:v12 transparentDat a:&v35 loggableDatas:&v34 error:&v33];
    id v20 = v35;
    id v21 = v34;
    id v22 = v33;
    if (v19 == (id)2)
    {
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_100278688);
      }
      id v23 = (os_log_s *)qword_1002E6478;
      if (!os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 138412290;
      id v39 = v22;
      id v24 = "ValidateSelf: self verification pending: %@";
    }

    else
    {
      if (v19) {
        goto LABEL_22;
      }
      if (qword_1002E6470 != -1) {
        dispatch_once(&qword_1002E6470, &stru_100278668);
      }
      id v23 = (os_log_s *)qword_1002E6478;
      if (!os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 138412290;
      id v39 = v22;
      id v24 = "ValidateSelf: self verification failed: %@";
    }

    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, 0xCu);
LABEL_22:
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transparentDatas]);
    [v27 setObject:v20 forKeyedSubscript:*(void *)(a1 + 56)];

    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v19));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) selfResults]);
    [v29 setObject:v28 forKeyedSubscript:*(void *)(a1 + 56)];

    if (v22)
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) selfErrors]);
      [v30 setObject:v22 forKeyedSubscript:*(void *)(a1 + 56)];
    }

    id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) selfInfo]);
    [v31 updateUri:*(void *)(a1 + 56) serverLoggableDatas:v21];

    id v6 = v32;
    goto LABEL_25;
  }

  if (qword_1002E6470 != -1) {
    dispatch_once(&qword_1002E6470, &stru_100278648);
  }
  id v25 = (os_log_s *)qword_1002E6478;
  if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
  {
    id v26 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    id v39 = v26;
    __int16 v40 = 2112;
    id v41 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "ValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@",  buf,  0x16u);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) selfErrors]);
  [v8 setObject:v6 forKeyedSubscript:*(void *)(a1 + 56)];
LABEL_25:
}

void sub_10002359C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_1000235CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_1000235FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_10002362C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_10002365C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_10002368C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count] != (id)1)
  {
    __int16 v40 = @"publicKeys";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) count]));
    id v41 = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:userinfo:description:",  @"TransparencyErrorVerify",  -379LL,  0LL,  v3,  @"public key count is not expected 1"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    [v5 setObject:v4 forKeyedSubscript:@"publicKeys"];
  }

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100023B70;
  v35[3] = &unk_100278788;
  v35[4] = *(void *)(a1 + 40);
  char v6 = sub_100023B70((uint64_t)v35);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudRecords]);
  if (([v8 disableKTSyncabledKVSStore] & 1) != 0
    || ([*(id *)(a1 + 40) isOptInSelfValidation] & 1) != 0)
  {
    goto LABEL_11;
  }

  if ((v6 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountKeyService]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountKeyService:kKTApplicationIdentifierIDS]);
  id v34 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v11 publicPublicKey:&v34]);
  id v12 = v34;

  if (!v8)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:userinfo:description:",  @"TransparencyErrorVerify",  -271LL,  v12,  0LL,  @"no opt-in state due to missing account key"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    [v16 setObject:v15 forKeyedSubscript:@"optIn"];
    id v7 = v12;
    goto LABEL_10;
  }

  id v13 = *(void **)(a1 + 40);
  id v33 = v12;
  unsigned __int8 v14 = [v13 validateOptInStatusWithAccountKey:v8 error:&v33];
  id v7 = v33;

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:userinfo:description:",  @"TransparencyErrorVerify",  -364LL,  v7,  0LL,  @"optInMismatch"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selfErrors]);
    [v16 setObject:v15 forKeyedSubscript:@"optIn"];
LABEL_10:
  }

uint64_t sub_100023B70(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transparentDatas", 0));
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparentDatas]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v7]);

        if (!v9)
        {
          if (qword_1002E6470 != -1) {
            dispatch_once(&qword_1002E6470, &stru_100278760);
          }
          uint64_t v11 = (os_log_s *)qword_1002E6478;
          if (os_log_type_enabled((os_log_t)qword_1002E6478, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 141558274;
            uint64_t v18 = 1752392040LL;
            __int16 v19 = 2112;
            uint64_t v20 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "No transparentData for URI %{mask.hash}@, skipping opt-in checks",  buf,  0x16u);
          }

          uint64_t v10 = 1LL;
          goto LABEL_15;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v10 = 0LL;
LABEL_15:

  return v10;
}

void sub_100023D30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100023D60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

uint64_t sub_100023D90(unint64_t a1)
{
  if (a1 > 4) {
    return 0LL;
  }
  else {
    return dword_100246430[a1];
  }
}

void sub_1000243AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_1000243DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100024624(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100024654(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

void sub_100024750(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 accountOptInHistory:*(void *)(a1 + 32)]);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v18 = a1;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v10 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v20;
      do
      {
        __int128 v13 = v9;
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v20 != v12) {
            objc_enumerationMutation(v13);
          }
          __int128 v15 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[v15 timestampMs] / 1000.0));
          id v17 = objc_msgSend( [KTOptIOLogState alloc],  "initWithURI:smtTimestamp:optIn:",  v5,  v16,  objc_msgSend(v15, "optIn"));
          [v7 addObject:v17];
        }

        uint64_t v9 = v13;
        id v11 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }

      while (v11);
    }

    [*(id *)(v18 + 40) setObject:v7 forKeyedSubscript:v5];
  }
}

void sub_100025018( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_100025054(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6478;
  qword_1002E6478 = (uint64_t)v1;
}

uint64_t sub_100025084(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100025094(uint64_t a1)
{
}

void sub_10002509C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "kt_hexString"));
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v10 = (id)objc_claimAutoreleasedReturnValue( +[KTAccountPublicID ktAccountPublicIDWithPublicKeyInfo:error:]( &OBJC_CLASS___KTAccountPublicID,  "ktAccountPublicIDWithPublicKeyInfo:error:",  v3,  0LL));
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v10 publicAccountIdentity]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }

void sub_100025740(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025770(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025950(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025980(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

LABEL_33:
}

        id v11 = (v24 - 1) & v24;
        __int128 v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }

      id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
      uint64_t v31 = *v30;
      id v32 = v30[1];
      id v33 = *(void *)(v5 + 56) + 56 * v22;
      id v34 = *(void *)(v33 + 8);
      id v35 = *(void *)(v33 + 24);
      __int16 v42 = *(void *)v33;
      id v43 = *(void *)(v33 + 16);
      __int16 v44 = *(_OWORD *)(v33 + 32);
      id v36 = *(void *)(v33 + 48);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v36);
      }

      Hasher.init(_seed:)(v45, *(void *)(v8 + 40));
      String.hash(into:)(v45, v31, v32);
      result = Hasher._finalize()();
      __int128 v15 = -1LL << *(_BYTE *)(v8 + 32);
      __int128 v16 = result & ~v15;
      id v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v26 = 0;
        id v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          id v28 = v17 == v27;
          if (v17 == v27) {
            id v17 = 0LL;
          }
          v26 |= v28;
          id v29 = *(void *)(v12 + 8 * v17);
        }

        while (v29 == -1);
        uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      __int128 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
      os_log_s *v19 = v31;
      v19[1] = v32;
      __int128 v20 = *(void *)(v8 + 56) + 56 * v18;
      *(void *)__int128 v20 = v42;
      *(void *)(v20 + _Block_object_dispose((const void *)(v31 - 160), 8) = v34;
      *(void *)(v20 + 16) = v43;
      *(void *)(v20 + 24) = v35;
      *(_OWORD *)(v20 + 32) = v44;
      *(void *)(v20 + 4_Block_object_dispose((const void *)(v31 - 160), 8) = v36;
      ++*(void *)(v8 + 16);
    }
  }

  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

        swift_once(&qword_1002E9B90, sub_100086A74);
        goto LABEL_8;
      }
    }

    else
    {
      id v17 = *(id *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v17) {
        goto LABEL_4;
      }
    }

    swift_bridgeObjectRelease(v15);
  }

  else
  {
    uint64_t v31 = v76;
    id v32 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v33);
    swift_errorRelease(v32);
  }

  if (qword_1002E9B90 != -1) {
    swift_once(&qword_1002E9B90, sub_100086A74);
  }
  id v35 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v35, (uint64_t)qword_1002E9B98);
  id v36 = static os_log_type_t.error.getter();
  id v37 = v2;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  id v39 = v36;
  if (os_log_type_enabled(v38, v36))
  {
    __int16 v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v71 = (void *)swift_slowAlloc(32LL, -1LL);
    id v76 = v71;
    *(_DWORD *)__int16 v40 = 136315138;
    id v41 = v40 + 12;
    id v69 = v40 + 4;
    buf = v40;
    __int16 v42 = v1;
    id v43 = [v37 recordName];
    __int16 v44 = v3;
    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unsigned int v47 = v46;

    os_log_t v1 = v42;
    id v48 = v45;
    id v3 = v44;
    id v74 = sub_10007C22C(v48, v47, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v69, v41);
    swift_bridgeObjectRelease(v47);

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "creating new record %s", buf, 0xCu);
    swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(buf, -1LL, -1LL);
  }

  else
  {
  }

  id v49 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  id v50 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v49];

  if (v50)
  {
    id v51 = v50;
    id v52 = [v37 recordName];
    if (!v52)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      id v54 = v53;
      id v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v54);
    }

    [v51 setRecordID:v52];

    id v55 = v51;
    id v56 = Data._bridgeToObjectiveC()().super.isa;
    [v55 setPushToken:v56];

    id v17 = v55;
    id v57 = Data._bridgeToObjectiveC()().super.isa;
    [v17 setRegistrationData:v57];

    goto LABEL_27;
  }

    id v11 = (v26 - 1) & v26;
    id v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    id v32 = 16 * v23;
    id v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    id v35 = *v33;
    id v34 = v33[1];
    id v36 = *(void *)(v5 + 56) + v32;
    id v37 = *(void *)v36;
    uint64_t v38 = *(_BYTE *)(v36 + 8);
    if ((v43 & 1) == 0) {
      swift_bridgeObjectRetain(v33[1]);
    }
    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    __int128 v15 = -1LL << *(_BYTE *)(v8 + 32);
    __int128 v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v28 = 0;
      id v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v30 = v17 == v29;
        if (v17 == v29) {
          id v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int128 v19 = 16 * v18;
    __int128 v20 = (void *)(*(void *)(v8 + 48) + v19);
    void *v20 = v35;
    v20[1] = v34;
    __int128 v21 = *(void *)(v8 + 56) + v19;
    *(void *)__int128 v21 = v37;
    *(_BYTE *)(v21 + _Block_object_dispose((const void *)(v31 - 160), 8) = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v40;
  id v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v11 = (v24 - 1) & v24;
    __int128 v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    id v32 = *v30;
    uint64_t v31 = v30[1];
    id v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    __int128 v15 = -1LL << *(_BYTE *)(v8 + 32);
    __int128 v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      id v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int128 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    os_log_s *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v31 - 160), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v11 = (v24 - 1) & v24;
    __int128 v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    id v32 = *v30;
    uint64_t v31 = v30[1];
    id v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      id v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    __int128 v15 = -1LL << *(_BYTE *)(v8 + 32);
    __int128 v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      id v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int128 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    os_log_s *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v31 - 160), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v36;
  id v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v22);
    id v36 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    id v32 = *(void *)(*(void *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_100072B9C(v36, v32);
      swift_bridgeObjectRetain(v31);
    }

    Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
    Data.hash(into:)(v37, v36, v32);
    result = Hasher._finalize()();
    __int128 v16 = -1LL << *(_BYTE *)(v8 + 32);
    id v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      __int128 v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      __int128 v20 = v36;
    }

    else
    {
      id v27 = 0;
      id v28 = (unint64_t)(63 - v16) >> 6;
      __int128 v20 = v36;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      __int128 v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19) = v20;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v31;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v34;
  id v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    id v33 = *v31;
    id v32 = v31[1];
    id v34 = *(void *)(v5 + 56) + 24 * v22;
    id v36 = *(void **)v34;
    id v35 = *(void **)(v34 + 8);
    id v37 = *(_BYTE *)(v34 + 16);
    id v46 = *(_BYTE *)(v34 + 17);
    if ((v45 & 1) == 0)
    {
      uint64_t v38 = v35;
      swift_bridgeObjectRetain(v32);
      id v39 = v36;
    }

    Hasher.init(_seed:)(v47, *(void *)(v8 + 40));
    String.hash(into:)(v47, v33, v32);
    result = Hasher._finalize()();
    __int128 v15 = -1LL << *(_BYTE *)(v8 + 32);
    __int128 v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v27 = 0;
      id v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v29 = v17 == v28;
        if (v17 == v28) {
          id v17 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int128 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    os_log_s *v19 = v33;
    v19[1] = v32;
    __int128 v20 = *(void *)(v8 + 56) + 24 * v18;
    *(void *)__int128 v20 = v36;
    *(void *)(v20 + _Block_object_dispose((const void *)(v31 - 160), 8) = v35;
    *(_BYTE *)(v20 + 16) = v37;
    *(_BYTE *)(v20 + 17) = v46;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v41;
  id v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v40 = 1LL << *(_BYTE *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v40;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  void *v3 = v8;
  return result;
}

        uint64_t v12 = (v25 - 1) & v25;
        id v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      uint64_t v31 = 16 * v23;
      id v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      id v34 = *v32;
      id v33 = v32[1];
      id v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_retain(*((void *)&v39 + 1));
      }

      Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      __int128 v16 = -1LL << *(_BYTE *)(v9 + 32);
      id v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        __int128 v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v27 = 0;
        id v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          id v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0LL;
          }
          v27 |= v29;
          id v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        __int128 v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      __int128 v20 = 16 * v19;
      __int128 v21 = (void *)(*(void *)(v9 + 48) + v20);
      *__int128 v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v39;
      ++*(void *)(v9 + 16);
    }
  }

  result = swift_release(v5);
  void *v3 = v9;
  return result;
}

  id v27 = swift_retain(_swiftEmptyArrayStorage);
  __int128 v14 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v14) {
    goto LABEL_34;
  }
LABEL_20:
  if (v14 >= 1)
  {
    __int128 v15 = 0LL;
    __int128 v16 = _swiftEmptyArrayStorage;
    do
    {
      else {
        id v17 = (id)_swiftEmptyArrayStorage[v15 + 4];
      }
      uint64_t v18 = v17;
      __int128 v19 = [v17 uri];
      if (v19)
      {
        __int128 v20 = v19;
        __int128 v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        id v23 = v22;

        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
          __int128 v16 = sub_10008CB7C(0LL, v16[2] + 1LL, 1, v16);
        }
        id v25 = v16[2];
        id v24 = v16[3];
        if (v25 >= v24 >> 1) {
          __int128 v16 = sub_10008CB7C((void *)(v24 > 1), v25 + 1, 1, v16);
        }
        v16[2] = v25 + 1;
        id v26 = &v16[2 * v25];
        void v26[4] = v21;
        v26[5] = v23;
      }

      else
      {
      }

      ++v15;
    }

    while (v14 != v15);
    goto LABEL_35;
  }

    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v19;
    }
LABEL_34:
    cc_clear(*v14, v47);
    return v19;
  }

      goto LABEL_34;
    }
  }

  __int128 v19 = -[KTAccount validateEmptyOptInOutHistory:responseTime:error:]( self,  "validateEmptyOptInOutHistory:responseTime:error:",  v8,  v9,  a5);
LABEL_35:

  return v19;
}
      }

      else
      {
        __int128 v16 = 0;
      }
    }

    else
    {
      __int128 v16 = 1;
    }
  }

LABEL_36:
  return v16;
}

void sub_100025D30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025D60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025D90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025DC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025DF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100025FFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 serverLoggableDatas]);
    id v51 = 0LL;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore deserializeLoggableDatas:error:]( &OBJC_CLASS___TransparencyManagedDataStore,  "deserializeLoggableDatas:error:",  v7,  &v51));
    id v9 = v51;

    [*(id *)(a1 + 32) setSelfDevices:v8];
    if (!v8)
    {
      if (qword_1002E6480 != -1) {
        dispatch_once(&qword_1002E6480, &stru_100278A00);
      }
      id v10 = (os_log_s *)qword_1002E6488;
      if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v54 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "FillStatus: no self loggable datas: %@",  buf,  0xCu);
      }
    }

    id v11 = [v5 verificationResult];
    if (v11)
    {
      if (v11 == (id)1)
      {
        if (qword_1002E6480 != -1) {
          dispatch_once(&qword_1002E6480, &stru_100278A20);
        }
        uint64_t v12 = (os_log_s *)qword_1002E6488;
        if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "FillStatus: setting selfStatus to OK",  buf,  2u);
        }

        uint64_t v13 = 0LL;
      }

      else
      {
        if (qword_1002E6480 != -1) {
          dispatch_once(&qword_1002E6480, &stru_100278AA0);
        }
        __int128 v21 = (os_log_s *)qword_1002E6488;
        if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v13 = 2LL;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "FillStatus: setting selfStatus to Unavailable",  buf,  2u);
        }

        else
        {
          uint64_t v13 = 2LL;
        }
      }
    }

    else
    {
      id v41 = v9;
      uint64_t v42 = a1;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v15 = v8;
      id v16 = [v15 countByEnumeratingWithState:&v47 objects:v57 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v48;
        uint64_t v13 = 3LL;
        while (2)
        {
          for (i = 0LL; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v48 != v18) {
              objc_enumerationMutation(v15);
            }
            __int128 v20 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
            if (![v20 result])
            {
              if (qword_1002E6480 != -1) {
                dispatch_once(&qword_1002E6480, &stru_100278A40);
              }
              __int128 v22 = (void *)qword_1002E6488;
              if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_ERROR))
              {
                id v23 = v22;
                id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 deviceID]);
                id v25 = (void *)objc_claimAutoreleasedReturnValue([v20 deviceIdHash]);
                *(_DWORD *)buf = 138412546;
                id v54 = v24;
                __int16 v55 = 2112;
                id v56 = v25;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "FillStatus: failing device is: %@[%@]",  buf,  0x16u);
              }

              uint64_t v13 = 1LL;
              goto LABEL_39;
            }
          }

          id v17 = [v15 countByEnumeratingWithState:&v47 objects:v57 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }

      else
      {
        uint64_t v13 = 3LL;
      }

LABEL_39:
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v5 failures]);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 allObjects]);

      id v28 = [v27 countByEnumeratingWithState:&v43 objects:v52 count:16];
      if (v28)
      {
        id v29 = v28;
        id v39 = v8;
        id v40 = v6;
        uint64_t v30 = *(void *)v44;
        while (2)
        {
          for (j = 0LL; j != v29; j = (char *)j + 1)
          {
            if (*(void *)v44 != v30) {
              objc_enumerationMutation(v27);
            }
            id v32 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)j);
            id v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "errorDomain", v39));
            if ([v33 isEqual:@"com.apple.Transparency"])
            {
              if ([v32 errorCode] == (id)7)
              {

LABEL_54:
                if (qword_1002E6480 != -1) {
                  dispatch_once(&qword_1002E6480, &stru_100278A60);
                }
                id v9 = v41;
                a1 = v42;
                uint64_t v8 = v39;
                id v35 = (os_log_s *)qword_1002E6488;
                if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v54 = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "FillStatus: opt-in failure %@",  buf,  0xCu);
                }

                uint64_t v13 = 4LL;
                id v6 = v40;
                goto LABEL_59;
              }

              id v34 = [v32 errorCode];

              if (v34 == (id)10) {
                goto LABEL_54;
              }
            }

            else
            {
            }
          }

          id v29 = [v27 countByEnumeratingWithState:&v43 objects:v52 count:16];
          if (v29) {
            continue;
          }
          break;
        }

        uint64_t v8 = v39;
        id v6 = v40;
      }

      a1 = v42;
      id v9 = v41;
LABEL_59:

      if (qword_1002E6480 != -1) {
        dispatch_once(&qword_1002E6480, &stru_100278A80);
      }
      id v36 = (void *)qword_1002E6488;
      if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = v36;
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13));
        *(_DWORD *)buf = 138412290;
        id v54 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "FillStatus: setting selfStatus to failure type %@",  buf,  0xCu);
      }
    }

    [*(id *)(a1 + 32) setSelfStatus:v13];
  }

  else
  {
    if (qword_1002E6480 != -1) {
      dispatch_once(&qword_1002E6480, &stru_100278AC0);
    }
    __int128 v14 = (os_log_s *)qword_1002E6488;
    if (os_log_type_enabled((os_log_t)qword_1002E6488, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v54 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "FillStatus: no recent self validation: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setSelfStatus:2];
  }
}

  __break(1u);
  return result;
}

void sub_100026680(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_1000266B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_1000266E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100026710(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100026740(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100026770(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_1000267A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_1000267D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100026A5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100026A8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6488;
  qword_1002E6488 = (uint64_t)v1;
}

void sub_100027034( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100027060(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_100027090(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_1000270C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (qword_1002E6490 != -1) {
      dispatch_once(&qword_1002E6490, &stru_100278BA8);
    }
    id v9 = (os_log_s *)qword_1002E6498;
    if (os_log_type_enabled((os_log_t)qword_1002E6498, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = (uint64_t)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "FillStatus: failed to get context: %@",  buf,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v10 addOperation:v11];
  }

  else
  {
    if (qword_1002E6490 != -1) {
      dispatch_once(&qword_1002E6490, &stru_100278BC8);
    }
    uint64_t v12 = (void *)qword_1002E6498;
    if (os_log_type_enabled((os_log_t)qword_1002E6498, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      __int128 v14 = v12;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained reason]);
      *(_DWORD *)buf = 141558530;
      uint64_t v20 = 1752392040LL;
      __int16 v21 = 2112;
      uint64_t v22 = v13;
      __int16 v23 = 2114;
      id v24 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "querying KT server for opt-in state of %{mask.hash}@ for reason %{public}@",  buf,  0x20u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) prefixedURI]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10002739C;
    v17[3] = &unk_100278C30;
    objc_copyWeak(&v18, v7);
    [v5 optInStateForUri:v16 completionHandler:v17];

    objc_destroyWeak(&v18);
  }
}

void sub_100027320(_Unwind_Exception *a1)
{
}

void sub_10002733C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_10002736C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_10002739C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v5)
  {
    if (qword_1002E6490 != -1) {
      dispatch_once(&qword_1002E6490, &stru_100278BE8);
    }
    uint64_t v7 = (os_log_s *)qword_1002E6498;
    if (os_log_type_enabled((os_log_t)qword_1002E6498, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "FillStatus: failed to check server opt-in: %@",  (uint8_t *)&v13,  0xCu);
    }

void sub_100027570(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_1000275A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_100027720(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6498;
  qword_1002E6498 = (uint64_t)v1;
}

void sub_100027FD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100028008(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100028038(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100028068(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100028098(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100028218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
}

uint64_t sub_100028248(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100028258(uint64_t a1)
{
}

void sub_100028260(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([v5 count])
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id obj = *(id *)(v8 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained verifyMapHeadMMDs:v5 application:v7 error:&obj]);
    objc_storeStrong((id *)(v8 + 40), obj);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-SmhMMD",  *(void *)(a1 + 32)));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained failedSMHs]);
      [v11 setObject:v9 forKeyedSubscript:v10];

      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
      [v13 setObject:v12 forKeyedSubscript:v10];
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dataStore]);
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v22 = *(id *)(v16 + 40);
    unsigned __int8 v17 = [v15 persistAndRefaultObjects:v5 error:&v22];
    objc_storeStrong((id *)(v16 + 40), v22);

    if ((v17 & 1) == 0)
    {
      if (qword_1002E64A0 != -1) {
        dispatch_once(&qword_1002E64A0, &stru_100278D38);
      }
      id v18 = (os_log_s *)qword_1002E64A8;
      if (os_log_type_enabled((os_log_t)qword_1002E64A8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "VerifyMapHeadMMD: failed to save MMD verified SMHs: %@",  buf,  0xCu);
      }

      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dataStore]);
        [v21 reportCoreDataPersistEventForLocation:@"verifyMapHeadMMDs" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
      }

      *a3 = 1;
    }
  }
}

void sub_1000284D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_1000289C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64A8;
  qword_1002E64A8 = (uint64_t)v1;
}

void sub_100029280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000292A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_1000292D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_100029304(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_100029334(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    int v20 = 138412290;
    id v21 = v6;
    id v9 = "Failed to load Core Data stack: %@";
  }

  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    int v20 = 138412290;
    id v21 = v5;
    id v9 = "Load Core Data complete: %@";
  }

  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v20, 0xCu);
LABEL_7:

  id v10 = *(id *)(a1 + 32);
  objc_sync_enter(v10);
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    __assert_rtn( "-[StaticKeyController initCloudDataStore:idsDelegate:configurationStore:notificationCenter:complete:]_block_invoke",  "StaticKeyController.m",  155,  "storeCount >= 1");
  }
  *(void *)(v11 + 24) = v12 - 1;
  BOOL v13 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) == 0LL;
  objc_sync_exit(v10);

  if (v13)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 cloudContainer]);
    unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 persistentStoreCoordinator]);
    [v14 addObserver:v15 selector:"remoteUpdate:" name:NSPersistentStoreRemoteChangeNotification object:v17];

    id v18 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    dispatch_resume(v18);

    (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v19);
  }
}

void sub_10002953C(_Unwind_Exception *exception_object)
{
}

void sub_1000297F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Failed to load Core Data stack: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000299DC(uint64_t a1)
{
  id v2 = (id)os_transaction_create("processCoreDataHistory");
  [*(id *)(a1 + 32) processCoreDataHistory];
}

void sub_100029D24(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSPersistentHistoryChangeRequest fetchHistoryAfterToken:]( &OBJC_CLASS___NSPersistentHistoryChangeRequest,  "fetchHistoryAfterToken:",  *(void *)(a1 + 32)));
  [v2 setResultType:5];
  id v3 = *(void **)(v1 + 40);
  id v59 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 executeRequest:v2 error:&v59]);
  id v5 = v59;
  int v6 = v5;
  if (v4)
  {
    id v41 = v4;
    uint64_t v42 = v2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 result]);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) fetchContactsSyncToken]);

    if (!v8)
    {
      if (qword_1002E64B0 != -1) {
        dispatch_once(&qword_1002E64B0, &stru_100278E50);
      }
      id v9 = (os_log_s *)qword_1002E64B8;
      if (os_log_type_enabled((os_log_t)qword_1002E64B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "processCoreDataHistory no previously existing sync token",  buf,  2u);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) contactStore]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) configurationStore]);
      [v10 fetchAndStoreContactsSyncTokenWithConfigStore:v11];
    }

    id v40 = v6;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    id obj = v7;
    id v45 = [obj countByEnumeratingWithState:&v55 objects:v65 count:16];
    uint64_t v12 = 0LL;
    if (v45)
    {
      uint64_t v44 = *(void *)v56;
      BOOL v13 = off_100275000;
      do
      {
        uint64_t v14 = 0LL;
        id v15 = v12;
        do
        {
          __int128 v47 = v15;
          if (*(void *)v56 != v44) {
            objc_enumerationMutation(obj);
          }
          uint64_t v48 = v14;
          uint64_t v16 = *(void **)(*((void *)&v55 + 1) + 8 * v14);
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v46 = v16;
          unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 changes]);
          id v18 = [v17 countByEnumeratingWithState:&v51 objects:v64 count:16];
          if (v18)
          {
            id v19 = v18;
            __int128 v49 = v17;
            uint64_t v50 = *(void *)v52;
            do
            {
              for (i = 0LL; i != v19; i = (char *)i + 1)
              {
                if (*(void *)v52 != v50) {
                  objc_enumerationMutation(v17);
                }
                id v21 = *(void **)(*((void *)&v51 + 1) + 8LL * (void)i);
                id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 changedObjectID]);
                __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 entityName]);
                unsigned int v24 = [v23 isEqual:@"STStaticKeyHandle"];

                if (v24)
                {
                  id v25 = [v21 changeType];
                  if ((unint64_t)v25 >= 2)
                  {
                    if (v25 == (id)2)
                    {
                      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v21 tombstone]);
                      id v34 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"idsID"]);
                      goto LABEL_29;
                    }

                    id v34 = 0LL;
                  }

                  else
                  {
                    uint64_t v27 = v1;
                    id v28 = *(void **)(v1 + 40);
                    id v29 = (void *)objc_claimAutoreleasedReturnValue([v21 changedObjectID]);
                    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v28 existingObjectWithID:v29 error:0]);

                    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 entity]);
                    id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 name]);
                    unsigned __int8 v33 = [v32 isEqual:@"STStaticKeyHandle"];

                    if ((v33 & 1) != 0)
                    {
                      id v34 = (void *)objc_claimAutoreleasedReturnValue([v30 valueForKey:@"idsID"]);
                    }

                    else
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        id v35 = (void *)objc_claimAutoreleasedReturnValue([v21 changedObjectID]);
                        id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 entityName]);
                        *(_DWORD *)buf = 138412546;
                        __int16 v61 = @"STStaticKeyHandle";
                        __int16 v62 = 2112;
                        __int16 v63 = v36;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "not %@: %@",  buf,  0x16u);
                      }

                      id v34 = 0LL;
                    }

                    uint64_t v1 = v27;
                    BOOL v13 = off_100275000;
                    unsigned __int8 v17 = v49;
LABEL_29:
                  }

                  uint64_t v37 = objc_opt_class(v13[87], v26);
                  if ((objc_opt_isKindOfClass(v34, v37) & 1) != 0) {
                    [*(id *)(v1 + 56) addObject:v34];
                  }

                  continue;
                }
              }

              id v19 = [v17 countByEnumeratingWithState:&v51 objects:v64 count:16];
            }

            while (v19);
          }

          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v46 token]);
          uint64_t v14 = v48 + 1;
          id v15 = v12;
        }

        while ((id)(v48 + 1) != v45);
        id v45 = [obj countByEnumeratingWithState:&v55 objects:v65 count:16];
      }

      while (v45);
    }

    if ([obj count])
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) dataFromHistoryToken:v12]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) configurationStore]);
      [v39 setSettingsData:@"CoreDataSyncToken" data:v38];
    }

    id v4 = v41;
    id v2 = v42;
    int v6 = v40;
    goto LABEL_42;
  }

  if (v5)
  {
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) configurationStore]);
    [obj setSettingsData:@"CoreDataSyncToken" data:0];
LABEL_42:
  }
}

void sub_10002A268(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002A758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002A770(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc(&OBJC_CLASS___NSCloudKitMirroringImportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10002A8AC;
  v13[3] = &unk_100278EA0;
  uint64_t v4 = *(void *)(a1 + 48);
  v13[4] = *(void *)(a1 + 32);
  v13[5] = v4;
  id v5 = [v3 initWithOptions:v2 completionBlock:v13];
  int v6 = *(void **)(a1 + 40);
  id v12 = 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 executeRequest:v5 error:&v12]);
  id v8 = v12;

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "import request finished", v11, 2u);
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_1001DB4DC();
  }
}

void sub_10002A8AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "import result: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10002AA7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002AA94(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc(&OBJC_CLASS___NSCloudKitMirroringExportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10002ABD0;
  v13[3] = &unk_100278EA0;
  uint64_t v4 = *(void *)(a1 + 48);
  v13[4] = *(void *)(a1 + 32);
  v13[5] = v4;
  id v5 = [v3 initWithOptions:v2 completionBlock:v13];
  id v6 = *(void **)(a1 + 40);
  id v12 = 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 executeRequest:v5 error:&v12]);
  id v8 = v12;

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "export request finished", v11, 2u);
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_1001DB53C();
  }
}

void sub_10002ABD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "export result: %@", (uint8_t *)&v5, 0xCu);
  }
}

id sub_10002AD5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) consumeContactsChangeHistory];
}

void sub_10002AFE8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc(&OBJC_CLASS___NSCloudKitMirroringResetZoneRequest);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10002B120;
  v12[3] = &unk_100278EF0;
  v12[4] = *(void *)(a1 + 32);
  id v4 = [v3 initWithOptions:v2 completionBlock:v12];
  int v5 = *(void **)(a1 + 40);
  id v11 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 executeRequest:v4 error:&v11]);
  id v7 = v11;

  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "reset request finished", v10, 2u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_1001DB628();
  }
}

void sub_10002B120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "reset zone: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10002B7CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_10002B808(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

uint64_t sub_10002B838(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002B848(uint64_t a1)
{
}

void sub_10002B850(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  if (*(void *)(a1 + 32)) {
    id v3 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactExternalIdentifier == %@",  *(void *)(a1 + 32));
  }
  else {
    id v3 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactIdentifier == %@",  *(void *)(a1 + 40));
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 setPredicate:v4];

  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id obj = *(id *)(v7 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v7 + 40), obj);
  __int16 v75 = v8;
  if ([v8 count])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 publicIdentity]);
    unsigned __int8 v11 = [v10 isEqual:*(void *)(a1 + 56)];

    if ((v11 & 1) != 0)
    {
      id v12 = v9;
      uint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 publicIdentity]);
      id v12 = v9;
      [v9 setPublicIdentity:*(void *)(a1 + 56)];
    }

    uint64_t v20 = *(void *)(a1 + 56);
    id v19 = *(void **)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v102 = *(id *)(v22 + 40);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v19 fetchHandles:v20 moc:v21 error:&v102]);
    objc_storeStrong((id *)(v22 + 40), v102);
    __int16 v23 = *(void **)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v101 = *(id *)(v25 + 40);
    v78 = (void *)v13;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v23 fetchHandles:v13 moc:v24 error:&v101]);
    objc_storeStrong((id *)(v25 + 40), v101);
    if (v18)
    {
      __int128 v99 = 0u;
      __int128 v100 = 0u;
      __int128 v97 = 0u;
      __int128 v98 = 0u;
      id v27 = v18;
      id v28 = [v27 countByEnumeratingWithState:&v97 objects:v110 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v98;
        do
        {
          for (i = 0LL; i != v29; i = (char *)i + 1)
          {
            if (*(void *)v98 != v30) {
              objc_enumerationMutation(v27);
            }
            [v5 addObject:*(void *)(*((void *)&v97 + 1) + 8 * (void)i)];
          }

          id v29 = [v27 countByEnumeratingWithState:&v97 objects:v110 count:16];
        }

        while (v29);
      }
    }

    if (v26)
    {
      __int128 v95 = 0u;
      __int128 v96 = 0u;
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      id v32 = v26;
      id v33 = [v32 countByEnumeratingWithState:&v93 objects:v109 count:16];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = *(void *)v94;
        do
        {
          for (j = 0LL; j != v34; j = (char *)j + 1)
          {
            if (*(void *)v94 != v35) {
              objc_enumerationMutation(v32);
            }
            [v5 addObject:*(void *)(*((void *)&v93 + 1) + 8 * (void)j)];
          }

          id v34 = [v32 countByEnumeratingWithState:&v93 objects:v109 count:16];
        }

        while (v34);
      }
    }

    id v8 = v75;
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) log]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v108 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "storeStaticKey will create new record, failed to fetch: %@",  buf,  0xCu);
    }

    uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8LL);
    unsigned __int8 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0LL;

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"STStaticKey",  *(void *)(a1 + 48)));
    [v12 setPublicIdentity:*(void *)(a1 + 56)];
    v78 = 0LL;
    id v18 = v5;
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  }

  if (*(void *)(a1 + 40)) {
    objc_msgSend(v12, "setContactIdentifier:");
  }
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v12, "setContactExternalIdentifier:");
  }
  if (*(void *)(a1 + 72))
  {
    __int16 v73 = v12;
    id v74 = v2;
    uint64_t v77 = a1;
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    id v76 = v5;
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
    id v40 = [v39 countByEnumeratingWithState:&v89 objects:v106 count:16];
    if (!v40) {
      goto LABEL_50;
    }
    id v41 = v40;
    uint64_t v42 = *(void *)v90;
    while (1)
    {
      for (k = 0LL; k != v41; k = (char *)k + 1)
      {
        if (*(void *)v90 != v42) {
          objc_enumerationMutation(v39);
        }
        uint64_t v44 = *(void **)(*((void *)&v89 + 1) + 8LL * (void)k);
        id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 idsID]);
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v45]);
        if (v46)
        {

LABEL_42:
          [v38 addObject:v44];
          continue;
        }

        if (v78)
        {
          __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v44 publicIdentity]);
          unsigned int v48 = [v47 isEqualToString:v78];

          if (v48) {
            goto LABEL_42;
          }
        }

        else
        {
        }

        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v44 idsID]);
        [v37 setObject:v44 forKeyedSubscript:v49];
      }

      id v41 = [v39 countByEnumeratingWithState:&v89 objects:v106 count:16];
      if (!v41)
      {
LABEL_50:

        __int128 v87 = 0u;
        __int128 v88 = 0u;
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        id v50 = *(id *)(v77 + 72);
        id v51 = [v50 countByEnumeratingWithState:&v85 objects:v105 count:16];
        if (v51)
        {
          id v52 = v51;
          uint64_t v53 = *(void *)v86;
          do
          {
            for (m = 0LL; m != v52; m = (char *)m + 1)
            {
              if (*(void *)v86 != v53) {
                objc_enumerationMutation(v50);
              }
              uint64_t v55 = *(void *)(*((void *)&v85 + 1) + 8LL * (void)m);
              __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v55]);

              if (v56)
              {
                [v37 setObject:0 forKeyedSubscript:v55];
              }

              else
              {
                __int128 v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"STStaticKeyHandle",  *(void *)(v77 + 48)));
                [v57 setIdsID:v55];
                [v57 setValidated:0];
                [v57 setPublicIdentity:*(void *)(v77 + 56)];
                [v76 addObject:v57];
              }
            }

            id v52 = [v50 countByEnumeratingWithState:&v85 objects:v105 count:16];
          }

          while (v52);
        }

        __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v37 allValues]);
        [v38 addObjectsFromArray:v58];

        __int128 v83 = 0u;
        __int128 v84 = 0u;
        __int128 v81 = 0u;
        __int128 v82 = 0u;
        id v59 = v38;
        id v60 = [v59 countByEnumeratingWithState:&v81 objects:v104 count:16];
        id v2 = v74;
        int v5 = v76;
        a1 = v77;
        if (v60)
        {
          id v61 = v60;
          uint64_t v62 = *(void *)v82;
          do
          {
            for (n = 0LL; n != v61; n = (char *)n + 1)
            {
              if (*(void *)v82 != v62) {
                objc_enumerationMutation(v59);
              }
              [*(id *)(v77 + 48) deleteObject:*(void *)(*((void *)&v81 + 1) + 8 * (void)n)];
            }

            id v61 = [v59 countByEnumeratingWithState:&v81 objects:v104 count:16];
          }

          while (v61);
        }

        id v8 = v75;
        id v12 = v73;
        break;
      }
    }
  }

  id v64 = *(void **)(a1 + 48);
  uint64_t v65 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v80 = *(id *)(v65 + 40);
  unsigned int v66 = [v64 save:&v80];
  objc_storeStrong((id *)(v65 + 40), v80);
  if (v66)
  {
    id v67 = *(void **)(a1 + 64);
    uint64_t v68 = *(void *)(a1 + 48);
    uint64_t v69 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v79 = *(id *)(v69 + 40);
    uint64_t v70 = objc_claimAutoreleasedReturnValue([v67 mapStaticKeyToStoreEntry:v12 handles:v5 moc:v68 error:&v79]);
    objc_storeStrong((id *)(v69 + 40), v79);
    uint64_t v71 = *(void *)(*(void *)(a1 + 88) + 8LL);
    uint64_t v72 = *(void **)(v71 + 40);
    *(void *)(v71 + 40) = v70;
  }
}

id sub_10002C01C(uint64_t a1)
{
  return [*(id *)(a1 + 32) exportToCloud];
}

void sub_10002C6CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002C6F4(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity == %@",  a1[4]));
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  if (v7)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    id v10 = (void *)a1[6];
    uint64_t v11 = *(void *)(a1[7] + 8LL);
    id v20 = *(id *)(v11 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 fetchHandles:v8 moc:v9 error:&v20]);
    objc_storeStrong((id *)(v11 + 40), v20);
    uint64_t v14 = a1[5];
    uint64_t v13 = (void *)a1[6];
    uint64_t v15 = *(void *)(a1[7] + 8LL);
    id v19 = *(id *)(v15 + 40);
    uint64_t v16 = objc_claimAutoreleasedReturnValue([v13 mapStaticKeyToStoreEntry:v7 handles:v12 moc:v14 error:&v19]);
    objc_storeStrong((id *)(v15 + 40), v19);
    uint64_t v17 = *(void *)(a1[8] + 8LL);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
}

void sub_10002C9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002C9F4(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"STStaticKeyHandle"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"idsID == %@",  a1[4]));
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 publicIdentity]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity == %@",  v9));
    [v8 setPredicate:v10];

    uint64_t v11 = (void *)a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    id v28 = *(id *)(v12 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 executeFetchRequest:v8 error:&v28]);
    objc_storeStrong((id *)(v12 + 40), v28);
    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);
      if (v14)
      {
        uint64_t v15 = (void *)a1[6];
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 publicIdentity]);
        uint64_t v17 = a1[5];
        uint64_t v18 = *(void *)(a1[7] + 8LL);
        id v27 = *(id *)(v18 + 40);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v15 fetchHandles:v16 moc:v17 error:&v27]);
        objc_storeStrong((id *)(v18 + 40), v27);

        uint64_t v21 = a1[5];
        id v20 = (void *)a1[6];
        uint64_t v22 = *(void *)(a1[7] + 8LL);
        id v26 = *(id *)(v22 + 40);
        uint64_t v23 = objc_claimAutoreleasedReturnValue([v20 mapStaticKeyToStoreEntry:v14 handles:v19 moc:v21 error:&v26]);
        objc_storeStrong((id *)(v22 + 40), v26);
        uint64_t v24 = *(void *)(a1[8] + 8LL);
        uint64_t v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;
      }
    }
  }
}

LABEL_25:
  return v11;
}
}

  __break(1u);
  return result;
}

    uint64_t v12 = (v31 - 1) & v31;
    uint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = 56 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 24);
    id v26 = *(void *)(v21 + 48);
    id v27 = (void *)(*(void *)(v4 + 48) + v16);
    id v28 = *(_OWORD *)(v21 + 32);
    void *v27 = v19;
    v27[1] = v18;
    id v29 = *(void *)(v4 + 56) + v20;
    *(void *)id v29 = v22;
    *(void *)(v29 + _Block_object_dispose((const void *)(v11 - 96), 8) = v23;
    *(void *)(v29 + 16) = v24;
    *(void *)(v29 + 24) = v25;
    *(_OWORD *)(v29 + 32) = v28;
    *(void *)(v29 + 4_Block_object_dispose((const void *)(v11 - 96), 8) = v26;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    result = (void *)swift_bridgeObjectRetain(v26);
  }

  id v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    uint64_t v9 = v32;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = 40 * v15;
    sub_100080E5C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100085C90(v26, *(void *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    os_log_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = *(void *)(v2 + 56) + v16;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    uint64_t v23 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v23 = v21;
    *(_BYTE *)(v23 + _Block_object_dispose((const void *)(v11 - 96), 8) = v20;
    swift_bridgeObjectRetain(v18);
  }

  id v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    uint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    id v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

  __break(1u);
  return result;
}

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = 40 * v15;
    sub_100080E5C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100085C90(v26, *(void *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    os_log_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    id v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v1_Block_object_dispose((const void *)(v11 - 96), 8) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_100072B9C(v19, *((unint64_t *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

    uint64_t v12 = (v28 - 1) & v28;
    uint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    id v19 = v17[1];
    id v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v23 = *(void **)v21;
    uint64_t v22 = *(void **)(v21 + 8);
    LOWORD(v21) = *(_WORD *)(v21 + 16);
    uint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v24 = v18;
    v24[1] = v19;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v25 = v23;
    *(void *)(v25 + _Block_object_dispose((const void *)(v11 - 96), 8) = v22;
    *(_WORD *)(v25 + 16) = v21;
    id v26 = v22;
    swift_bridgeObjectRetain(v19);
    result = v23;
  }

  id v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  id v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    uint64_t v9 = v29;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    id v20 = (void *)(*(void *)(v4 + 48) + v16);
    void *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(*((void *)&v24 + 1));
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = 32 * v15;
    sub_100079A14(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_10007ADB4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    os_log_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v26 - 1) & v26;
    uint64_t v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    id v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    id v20 = v19[1];
    uint64_t v22 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v22, v15);
    uint64_t v23 = v35;
    uint64_t v24 = (void *)(*(void *)(v35 + 48) + v18);
    *uint64_t v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }

  id v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    id v28 = v31;
    id v29 = v35;
    goto LABEL_28;
  }

  id v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    uint64_t v11 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_26;
    }
    id v26 = *(void *)(v32 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v24 = 0LL;
    goto LABEL_26;
  }

  if (qword_1002EE820 != -1) {
    dispatch_once(&qword_1002EE820, &stru_100283738);
  }
  id v29 = (os_log_s *)qword_1002EE828;
  if (os_log_type_enabled((os_log_t)qword_1002EE828, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    __int128 v89 = (uint64_t)v17;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "BatchQueryResponse for fetchId %{public}@ waiting for keystore refresh",  buf,  0xCu);
  }

  uint64_t v24 = 0LL;
  id v26 = 2LL;
LABEL_26:

  return v26;
}

    id v28 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v29,  v31,  v30));
LABEL_27:

    goto LABEL_28;
  }

  id v28 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -249LL,  @"failed to parse app version from SingleDataRecord"));
  }
LABEL_28:

  return v28;
}

void sub_10002CF18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002CF48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002CF78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002CFA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002D13C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

id sub_10002D16C(uint64_t a1)
{
  if (qword_1002E64B0 != -1) {
    dispatch_once(&qword_1002E64B0, &stru_100279020);
  }
  id v2 = (os_log_s *)qword_1002E64B8;
  if (os_log_type_enabled((os_log_t)qword_1002E64B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Doing initial cloud sync", v4, 2u);
  }

  return [*(id *)(a1 + 32) importFromCloud];
}

void sub_10002D200(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002D3B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002D3D8(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactIdentifier == %@",  a1[4]));
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)a1[6];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 publicIdentity]);
    uint64_t v11 = a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    id v21 = *(id *)(v12 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 fetchHandles:v10 moc:v11 error:&v21]);
    objc_storeStrong((id *)(v12 + 40), v21);

    uint64_t v15 = a1[5];
    uint64_t v14 = (void *)a1[6];
    uint64_t v16 = *(void *)(a1[7] + 8LL);
    id v20 = *(id *)(v16 + 40);
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 mapStaticKeyToStoreEntry:v8 handles:v13 moc:v15 error:&v20]);
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v18 = *(void *)(a1[8] + 8LL);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_10002D6DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002D700(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactExternalIdentifier == %@",  a1[4]));
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)a1[6];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 publicIdentity]);
    uint64_t v11 = a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    id v21 = *(id *)(v12 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 fetchHandles:v10 moc:v11 error:&v21]);
    objc_storeStrong((id *)(v12 + 40), v21);

    uint64_t v15 = a1[5];
    uint64_t v14 = (void *)a1[6];
    uint64_t v16 = *(void *)(a1[7] + 8LL);
    id v20 = *(id *)(v16 + 40);
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 mapStaticKeyToStoreEntry:v8 handles:v13 moc:v15 error:&v20]);
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v18 = *(void *)(a1[8] + 8LL);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_10002DBBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002DBEC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity == %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v5 + 40);
  id v28 = v2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v36;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v36 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(a1 + 40) deleteObject:*(void *)(*((void *)&v35 + 1) + 8 * (void)i)];
      }

      id v9 = [v7 countByEnumeratingWithState:&v35 objects:v41 count:16];
    }

    while (v9);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](&OBJC_CLASS___KTCoreDataSTHandle, "fetchRequest"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity == %@",  *(void *)(a1 + 32)));
  [v12 setPredicate:v13];

  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v34 = *(id *)(v15 + 40);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 executeFetchRequest:v12 error:&v34]);
  objc_storeStrong((id *)(v15 + 40), v34);
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v17 = v16;
  id v18 = [v17 countByEnumeratingWithState:&v30 objects:v40 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v31;
    do
    {
      for (j = 0LL; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v31 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)j);
        uint64_t v23 = *(void **)(a1 + 48);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 idsID]);
        [v23 addObject:v24];

        [*(id *)(a1 + 40) deleteObject:v22];
      }

      id v19 = [v17 countByEnumeratingWithState:&v30 objects:v40 count:16];
    }

    while (v19);
  }

  uint64_t v25 = *(void **)(a1 + 40);
  uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v29 = *(id *)(v26 + 40);
  unsigned int v27 = [v25 save:&v29];
  objc_storeStrong((id *)(v26 + 40), v29);
  if (v27) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
  }
}

void sub_10002E0DC(_Unwind_Exception *a1)
{
}

void sub_10002E108(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactIdentifier == %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v6 + 40);
  __int128 v32 = v2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 publicIdentity]);
        [v4 addObject:v14];

        [*(id *)(a1 + 40) deleteObject:v13];
      }

      id v10 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
    }

    while (v10);
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](&OBJC_CLASS___KTCoreDataSTHandle, "fetchRequest"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity IN %@",  v4));
  [v15 setPredicate:v16];

  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v38 = *(id *)(v18 + 40);
  __int128 v31 = v15;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 executeFetchRequest:v15 error:&v38]);
  objc_storeStrong((id *)(v18 + 40), v38);
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v35;
    do
    {
      for (j = 0LL; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)j);
        uint64_t v26 = *(void **)(a1 + 48);
        unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v25 idsID]);
        [v26 addObject:v27];

        [*(id *)(a1 + 40) deleteObject:v25];
      }

      id v22 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v22);
  }

  id v28 = *(void **)(a1 + 40);
  uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v33 = *(id *)(v29 + 40);
  unsigned int v30 = [v28 save:&v33];
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 count] != 0;
  }
}

void sub_10002E654(_Unwind_Exception *a1)
{
}

void sub_10002E680(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"contactExternalIdentifier == %@",  *(void *)(a1 + 32)));
  [v3 setPredicate:v4];

  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v6 + 40);
  __int128 v32 = v3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 publicIdentity]);
        [v2 addObject:v14];

        [*(id *)(a1 + 40) deleteObject:v13];
      }

      id v10 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
    }

    while (v10);
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](&OBJC_CLASS___KTCoreDataSTHandle, "fetchRequest"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"publicIdentity IN %@",  v2));
  [v15 setPredicate:v16];

  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v38 = *(id *)(v18 + 40);
  __int128 v31 = v15;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 executeFetchRequest:v15 error:&v38]);
  objc_storeStrong((id *)(v18 + 40), v38);
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v35;
    do
    {
      for (j = 0LL; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)j);
        uint64_t v26 = *(void **)(a1 + 48);
        unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v25 idsID]);
        [v26 addObject:v27];

        [*(id *)(a1 + 40) deleteObject:v25];
      }

      id v22 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v22);
  }

  id v28 = *(void **)(a1 + 40);
  uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v33 = *(id *)(v29 + 40);
  unsigned int v30 = [v28 save:&v33];
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 count] != 0;
  }
}

void sub_10002EAFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002EB14(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](&OBJC_CLASS___KTCoreDataSTStaticKey, "fetchRequest"));
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    uint64_t v15 = v2;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 publicIdentity]);

          if (v12)
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 publicIdentity]);
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[KTAccountPublicID ktAccountPublicIDWithStorageString:error:]( &OBJC_CLASS___KTAccountPublicID,  "ktAccountPublicIDWithStorageString:error:",  v13,  0LL));

            if (v14) {
              [*(id *)(a1 + 40) addObject:v14];
            }
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }

      while (v8);
    }

    id v2 = v15;
  }
}

void sub_10002EE44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002EE68(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"STStaticKeyHandle"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"idsID == %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10002EFA4;
    v11[3] = &unk_100279040;
    int v12 = *(_DWORD *)(a1 + 64);
    [v6 enumerateObjectsUsingBlock:v11];
    id v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(id *)(v8 + 40);
    unsigned int v9 = [v7 save:&v10];
    objc_storeStrong((id *)(v8 + 40), v10);
    if (v9) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }
}

id sub_10002EFA4(uint64_t a1, void *a2)
{
  return [a2 setError:*(unsigned int *)(a1 + 32)];
}

void sub_10002F49C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002F4C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002F4F0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_1002E64B0 != -1) {
      dispatch_once(&qword_1002E64B0, &stru_1002790A8);
    }
    id v6 = (os_log_s *)qword_1002E64B8;
    if (os_log_type_enabled((os_log_t)qword_1002E64B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v35 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  " fetch handles return error with %@, continuing anyway",  buf,  0xCu);
    }
  }

  unsigned int v27 = v5;
  id v7 = [*(id *)(a1 + 32) copy];
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  uint64_t v26 = v7;
  id obj = (id)objc_claimAutoreleasedReturnValue([v7 handles]);
  id v8 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    uint64_t v11 = kKTApplicationIdentifierIDS;
    do
    {
      int v12 = 0LL;
      do
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)v12);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication addApplicationPrefixForIdentifier:uri:]( &OBJC_CLASS___TransparencyApplication,  "addApplicationPrefixForIdentifier:uri:",  v11,  v13));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v14]);
        if (v15)
        {
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) handles]);
          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v13]);

          if (v17)
          {
            if (qword_1002E64B0 != -1) {
              dispatch_once(&qword_1002E64B0, &stru_1002790E8);
            }
            __int128 v18 = (void *)qword_1002E64B8;
            if (os_log_type_enabled((os_log_t)qword_1002E64B8, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v19 = v18;
              unsigned int v20 = [v15 succeed];
              *(_DWORD *)buf = 138412546;
              id v35 = v13;
              __int16 v36 = 1024;
              unsigned int v37 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " updating handle %@ with %d",  buf,  0x12u);
            }

            objc_msgSend(v17, "setValid:", objc_msgSend(v15, "succeed") == (id)1);
            id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            [v17 setValidationDate:v21];
          }
        }

        else
        {
          if (qword_1002E64B0 != -1) {
            dispatch_once(&qword_1002E64B0, &stru_1002790C8);
          }
          id v22 = (os_log_s *)qword_1002E64B8;
          if (os_log_type_enabled((os_log_t)qword_1002E64B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            id v35 = v14;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " imHandle %@ not found", buf, 0xCu);
          }
        }

        int v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
    }

    while (v9);
  }

  uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v26;
  id v25 = v26;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10002F89C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002F8CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

void sub_10002F8FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64B8;
  qword_1002E64B8 = (uint64_t)v1;
}

LABEL_18:
      goto LABEL_19;
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v7 contactExternalURI]);
    uint64_t v26 = v8;
    __int128 v19 = -[StaticKeyController deleteStaticKeyByContactExternalURI:error:]( self,  "deleteStaticKeyByContactExternalURI:error:",  v18,  &v26);
    __int128 v17 = v26;

    if ((v19 & 1) != 0) {
      goto LABEL_15;
    }
    unsigned int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[StaticKeyController log](self, "log"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1001DB714();
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 contactIdentifier]);
    id v25 = v17;
    id v22 = -[StaticKeyController deleteStaticKeyByContactIdentifier:error:]( self,  "deleteStaticKeyByContactIdentifier:error:",  v21,  &v25);
    id v8 = v25;

    if ((v22 & 1) == 0)
    {
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[StaticKeyController log](self, "log"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1001DB714();
      }
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[StaticKeyController log](self, "log"));
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR)) {
      sub_1001DB6B4();
    }
  }

    id v52 = 0LL;
    uint64_t v53 = *(void *)v37;
    __int128 v54 = *(void *)v37 + 64LL;
    uint64_t v55 = 1LL << *(_BYTE *)(*(void *)v37 + 32LL);
    __int128 v56 = -1LL;
    if (v55 < 64) {
      __int128 v56 = ~(-1LL << v55);
    }
    __int128 v57 = v56 & *(void *)(*(void *)v37 + 64LL);
    __int128 v58 = (unint64_t)(v55 + 63) >> 6;
    id v59 = (double)v50;
    id v60 = v109;
    while (1)
    {
      if (v57)
      {
        id v61 = __clz(__rbit64(v57));
        v57 &= v57 - 1;
        uint64_t v62 = v61 | (v52 << 6);
      }

      else
      {
        __int16 v63 = v52 + 1;
        if (__OFADD__(v52, 1LL))
        {
          __break(1u);
LABEL_64:
          __break(1u);
          return;
        }

        id v64 = v113;
        if (v63 >= v58) {
          goto LABEL_57;
        }
        uint64_t v65 = *(void *)(v54 + 8 * v63);
        ++v52;
        if (!v65)
        {
          id v52 = v63 + 1;
          if (v63 + 1 >= v58) {
            goto LABEL_57;
          }
          uint64_t v65 = *(void *)(v54 + 8 * v52);
          if (!v65)
          {
            id v52 = v63 + 2;
            if (v63 + 2 >= v58) {
              goto LABEL_57;
            }
            uint64_t v65 = *(void *)(v54 + 8 * v52);
            if (!v65)
            {
              unsigned int v66 = v63 + 3;
              if (v66 >= v58)
              {
LABEL_57:
                id v102 = (os_log_s *)Logger.logObject.getter(v49);
                v103 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v102, v103))
                {
                  v104 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                  *(_WORD *)v104 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v102, v103, "Returning aggregate result of true", v104, 2u);
                  swift_slowDealloc(v104, -1LL, -1LL);
                }

                swift_release(v64);
                swift_release(v112);
                swift_release(v107);
                *v105 = 1;
                return;
              }

              uint64_t v65 = *(void *)(v54 + 8 * v66);
              if (!v65)
              {
                while (1)
                {
                  id v52 = v66 + 1;
                  if (__OFADD__(v66, 1LL)) {
                    goto LABEL_64;
                  }
                  if (v52 >= v58) {
                    goto LABEL_57;
                  }
                  uint64_t v65 = *(void *)(v54 + 8 * v52);
                  ++v66;
                  if (v65) {
                    goto LABEL_36;
                  }
                }
              }

              id v52 = v66;
            }
          }
        }

    if (v8 == (id)++v10)
    {
      id v8 = [v6 countByEnumeratingWithState:&v41 objects:v47 count:16];
      if (v8) {
        goto LABEL_4;
      }
      goto LABEL_73;
    }
  }

  if (v14 != v11)
  {
    if (v12[4] == v11)
    {
      switch(v13[3].i8[6])
      {
        case 0:
          id v21 = &selRef_setBool_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_1002831B0;
          uint64_t v23 = sub_100134DD8;
          goto LABEL_69;
        case 1:
          id v21 = &selRef_setFixed32_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283310;
          uint64_t v23 = sub_100134DE8;
          goto LABEL_69;
        case 2:
          id v21 = &selRef_setSFixed32_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283330;
          uint64_t v23 = sub_100134DF8;
          goto LABEL_69;
        case 3:
          id v21 = &selRef_setFloat_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283350;
          uint64_t v23 = sub_100134E08;
          goto LABEL_69;
        case 4:
          id v21 = &selRef_setFixed64_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283370;
          uint64_t v23 = sub_100134E18;
          goto LABEL_69;
        case 5:
          id v21 = &selRef_setSFixed64_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283390;
          uint64_t v23 = sub_100134E28;
          goto LABEL_69;
        case 6:
          id v21 = &selRef_setDouble_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_1002833B0;
          uint64_t v23 = sub_100134E38;
          goto LABEL_69;
        case 7:
          id v21 = &selRef_setInt32_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283330;
          uint64_t v23 = sub_100134E48;
          goto LABEL_69;
        case 8:
          id v21 = &selRef_setInt64_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283390;
          uint64_t v23 = sub_100134E58;
          goto LABEL_69;
        case 9:
          id v21 = &selRef_setSInt32_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283330;
          uint64_t v23 = sub_100134E68;
          goto LABEL_69;
        case 0xA:
          id v21 = &selRef_setSInt64_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283390;
          uint64_t v23 = sub_100134E78;
          goto LABEL_69;
        case 0xB:
          id v21 = &selRef_setUInt32_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283310;
          uint64_t v23 = sub_100134E88;
          goto LABEL_69;
        case 0xC:
          id v21 = &selRef_setUInt64_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283370;
          uint64_t v23 = sub_100134E98;
          goto LABEL_69;
        case 0xD:
          id v21 = &selRef_setBytes_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283210;
          uint64_t v23 = sub_100134EA8;
          goto LABEL_69;
        case 0xE:
          id v21 = &selRef_setString_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283210;
          uint64_t v23 = sub_100134EDC;
          goto LABEL_69;
        case 0xF:
          id v21 = &selRef_setMessage_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283210;
          uint64_t v23 = sub_100134F10;
          goto LABEL_69;
        case 0x10:
          id v21 = &selRef_setGroup_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283210;
          uint64_t v23 = sub_100134F20;
          goto LABEL_69;
        case 0x11:
          id v21 = &selRef_setEnum_;
          v46[0] = _NSConcreteStackBlock;
          id v22 = &unk_100283330;
          uint64_t v23 = sub_100134F30;
          goto LABEL_69;
        default:
          goto LABEL_34;
      }
    }

    if (v12[5] == v11)
    {
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472LL;
      uint64_t v24 = v13[2];
      v40[2] = sub_100133FCC;
      v40[3] = &unk_100283190;
      v40[4] = vrev64_s32(v24);
      __int128 v19 = imp_implementationWithBlock(v40);
      unsigned int v20 = "getBool";
      goto LABEL_70;
    }

    if (v12[6] == v11)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      void v39[2] = sub_100133FDC;
      v39[3] = &unk_1002831B0;
      v39[4] = v12;
      __int128 v19 = imp_implementationWithBlock(v39);
      unsigned int v20 = "setBool:";
      goto LABEL_70;
    }

    uint64_t v15 = (const char **)v12[2];
    if (v15 && v15[3] == v11)
    {
      id v25 = v13[2].i32[1];
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      void v37[2] = sub_100134070;
      v37[3] = &unk_1002831D0;
      id v38 = v25;
      __int128 v19 = imp_implementationWithBlock(v37);
      unsigned int v20 = "getEnum";
      goto LABEL_70;
    }

    goto LABEL_18;
  }

  switch(v13[3].i8[6])
  {
    case 0:
      id v21 = &selRef_getBool;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283250;
      uint64_t v23 = sub_100134CB8;
      goto LABEL_69;
    case 1:
      id v21 = &selRef_getFixed32;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283270;
      uint64_t v23 = sub_100134CC8;
      goto LABEL_69;
    case 2:
      id v21 = &selRef_getSFixed32;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283290;
      uint64_t v23 = sub_100134CD8;
      goto LABEL_69;
    case 3:
      id v21 = &selRef_getFloat;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002832B0;
      uint64_t v23 = sub_100134CE8;
      goto LABEL_69;
    case 4:
      id v21 = &selRef_getFixed64;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283230;
      uint64_t v23 = sub_100134CF8;
      goto LABEL_69;
    case 5:
      id v21 = &selRef_getSFixed64;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002832D0;
      uint64_t v23 = sub_100134D08;
      goto LABEL_69;
    case 6:
      id v21 = &selRef_getDouble;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002832F0;
      uint64_t v23 = sub_100134D18;
      goto LABEL_69;
    case 7:
      id v21 = &selRef_getInt32;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283290;
      uint64_t v23 = sub_100134D28;
      goto LABEL_69;
    case 8:
      id v21 = &selRef_getInt64;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002832D0;
      uint64_t v23 = sub_100134D38;
      goto LABEL_69;
    case 9:
      id v21 = &selRef_getSInt32;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283290;
      uint64_t v23 = sub_100134D48;
      goto LABEL_69;
    case 0xA:
      id v21 = &selRef_getSInt64;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002832D0;
      uint64_t v23 = sub_100134D58;
      goto LABEL_69;
    case 0xB:
      id v21 = &selRef_getUInt32;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283270;
      uint64_t v23 = sub_100134D68;
      goto LABEL_69;
    case 0xC:
      id v21 = &selRef_getUInt64;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283230;
      uint64_t v23 = sub_100134D78;
      goto LABEL_69;
    case 0xD:
      id v21 = &selRef_getBytes;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002831F0;
      uint64_t v23 = sub_100134D88;
      goto LABEL_69;
    case 0xE:
      id v21 = &selRef_getString;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002831F0;
      uint64_t v23 = sub_100134D98;
      goto LABEL_69;
    case 0xF:
      id v21 = &selRef_getMessage;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002831F0;
      uint64_t v23 = sub_100134DA8;
      goto LABEL_69;
    case 0x10:
      id v21 = &selRef_getGroup;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_1002831F0;
      uint64_t v23 = sub_100134DB8;
      goto LABEL_69;
    case 0x11:
      id v21 = &selRef_getEnum;
      v46[0] = _NSConcreteStackBlock;
      id v22 = &unk_100283290;
      uint64_t v23 = sub_100134DC8;
LABEL_69:
      v46[1] = 3221225472LL;
      v46[2] = v23;
      v46[3] = v22;
      v46[4] = v12;
      __int128 v19 = imp_implementationWithBlock(v46);
      unsigned int v20 = *v21;
      break;
    default:
LABEL_34:
      __int128 v19 = 0LL;
      unsigned int v20 = 0LL;
      break;
  }

      __int128 v30 = 0LL;
      goto LABEL_30;
    }

    if (!a4) {
      goto LABEL_18;
    }
    __int128 v31 = kTransparencyErrorDecode;
    __int128 v32 = @"failed to parse optIn BOOLean from OptInOut";
    __int128 v33 = -274LL;
  }

  else
  {
    if (!a4) {
      goto LABEL_18;
    }
    __int128 v31 = kTransparencyErrorDecode;
    __int128 v32 = @"failed to parse account key from OptInOut";
    __int128 v33 = -242LL;
  }

          goto LABEL_9;
        }
      }
    }
  }

  id v7 = 0LL;
LABEL_9:

  return v7;
}

    LOBYTE(a5) = 0;
    goto LABEL_19;
  }

  if (!-[TransparencyManagedDataStore garbageCollectEntity:predicate:error:]( self,  "garbageCollectEntity:predicate:error:",  @"KTDeviceRecord",  v9,  a5))
  {
    if (!a5) {
      goto LABEL_19;
    }
    if (*a5)
    {
      uint64_t v10 = *a5;
      -[TransparencyManagedDataStore reportCoreDataEventForEntity:write:code:underlyingError:]( self,  "reportCoreDataEventForEntity:write:code:underlyingError:",  @"KTDeviceRecord",  1LL,  -310LL,  v10);
      if (qword_1002EED90 != -1) {
        dispatch_once(&qword_1002EED90, &stru_100288350);
      }
      uint64_t v11 = (os_log_s *)qword_1002EED98;
      if (!os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v15 = v8;
      __int128 v16 = 2112;
      __int128 v17 = v10;
      int v12 = "failed to clear outdated device records for uri %@: %@";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x16u);
LABEL_17:

      goto LABEL_18;
    }

    goto LABEL_18;
  }

  LOBYTE(a5) = 1;
LABEL_19:

  return (char)a5;
}

      uint64_t v53 = v13;
      uint64_t v29 = -[KTContextVerifier verifyRevisionLogProofLogEntry:patSTH:error:]( self,  "verifyRevisionLogProofLogEntry:patSTH:error:",  v14,  &v53,  a5);
      uint64_t v10 = v53;

      if (!v29)
      {
        __int128 v30 = 0;
        goto LABEL_33;
      }

      int v12 = (char *)v12 + 1;
      uint64_t v13 = v10;
    }

    while (v9 != v12);
    id v9 = [obj countByEnumeratingWithState:&v54 objects:v58 count:16];
    if (v9) {
      continue;
    }
    break;
  }

LABEL_19:
}
}

    __int128 v30 = v15;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow(v31);
    goto LABEL_20;
  }

  __break(1u);
}

        v4 += v12;
      }

      else if (sub_100138364((uint64_t)self, *(_DWORD *)(v9 + 20), *(_DWORD *)(v9 + 16)))
      {
        uint64_t v11 = *(_DWORD *)(v7[1] + 16LL);
        switch(v10)
        {
          case 0:
            sub_100138914((uint64_t)self, v7);
            int v12 = sub_10010FAAC(v11);
            goto LABEL_19;
          case 1:
          case 2:
            sub_100138708((uint64_t)self, v7);
            int v12 = sub_10010F960(v11);
            goto LABEL_19;
          case 3:
            sub_100138C60((uint64_t)self, v7);
            int v12 = sub_10010F960(v11);
            goto LABEL_19;
          case 4:
          case 5:
            sub_100138AF8((uint64_t)self, v7);
            int v12 = sub_10010F8C8(v11);
            goto LABEL_19;
          case 6:
            sub_100138DE0((uint64_t)self, v7);
            int v12 = sub_10010F8C8(v11);
            goto LABEL_19;
          case 7:
          case 17:
            unsigned int v37 = sub_100138708((uint64_t)self, v7);
            int v12 = sub_10010FA10(v11, v37);
            goto LABEL_19;
          case 8:
          case 12:
            id v38 = sub_100138AF8((uint64_t)self, v7);
            int v12 = sub_10010F9AC(v11, (unint64_t)v38);
            goto LABEL_19;
          case 9:
            __int128 v39 = sub_100138708((uint64_t)self, v7);
            int v12 = sub_10010FDC8(v11, v39);
            goto LABEL_19;
          case 10:
            __int128 v40 = sub_100138AF8((uint64_t)self, v7);
            int v12 = sub_10010FE60(v11, (uint64_t)v40);
            goto LABEL_19;
          case 11:
            __int128 v41 = sub_100138708((uint64_t)self, v7);
            int v12 = sub_10010FD38(v11, v41);
            goto LABEL_19;
          case 13:
            __int128 v42 = (void *)sub_100137E7C((uint64_t)self, (uint64_t)v7);
            int v12 = (uint64_t)sub_10010FC9C(v11, v42);
            goto LABEL_19;
          case 14:
            __int128 v43 = (void *)sub_100137E7C((uint64_t)self, (uint64_t)v7);
            int v12 = (uint64_t)sub_10010FAF8(v11, v43);
            goto LABEL_19;
          case 15:
            uint64_t v44 = (void *)sub_100137E7C((uint64_t)self, (uint64_t)v7);
            int v12 = (uint64_t)sub_10010FC00(v11, v44);
            goto LABEL_19;
          case 16:
            id v45 = (void *)sub_100137E7C((uint64_t)self, (uint64_t)v7);
            int v12 = (uint64_t)sub_10010FB98(v11, v45);
            goto LABEL_19;
          default:
            break;
        }
      }

  return v14;
}

  return v14;
}

  return v28;
}

  return v14;
}

    uint64_t v26 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v27,  v29,  v28));
LABEL_24:

    goto LABEL_25;
  }

  uint64_t v26 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -354LL,  @"failed to parse device ID from DeviceState"));
  }
LABEL_25:

  return v26;
}
}

void sub_1000303D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1000303F4(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  *a3 = 1;
  return result;
}

void sub_10003042C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10003043C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_100030460(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

  ;
}

void sub_100030814(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100030914(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003173C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, id *a14, uint64_t a15, id *a16, id *a17, id *a18, id *a19, id *a20, id *a21, id *a22)
{
}

void sub_10003187C(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279198);
  }
  id v4 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Octagon changed: %{BOOL}d", (uint8_t *)v6, 8u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v5 handleFlag:@"OctagonTrustChanged"];
}

void sub_10003197C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000319AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_1002791E0);
  }
  id v5 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138543362;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CKKS view changed: %{public}@",  (uint8_t *)&v9,  0xCu);
  }

  if (!v3 || [v3 isEqual:@"Manatee"])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
    [v6 handleFlag:@"ManateeViewChanged"];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 logger]);
    +[KTContext updateEligibilityThreshold:](&OBJC_CLASS___KTContext, "updateEligibilityThreshold:", v8);
  }
}

void sub_100031B10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100031B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279228);
  }
  id v5 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDS status: %{public}@", (uint8_t *)&v7, 0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v6 handleFlag:@"IDSStatusChanged"];

  [WeakRetained newServerOptInFetch:@"idsStatusObserver"];
}

void sub_100031C5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100031C8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerPublicKeyFetch];
}

void sub_100031CB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerEnsureIdentity];
}

void sub_100031CE4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerGetPrimaryAccount];
}

void sub_100031D10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained maybeCreateNewCKFetch];
}

void sub_100031D3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerCheckKTAccountKey];
}

void sub_100031D68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerCheckIDSRegistration];
}

void sub_100031D94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerKTAccountKeySignature:0.0];
}

id sub_100031DC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) triggerCheckAccountIdentityChanged];
}

void sub_100031DCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained maybeCreateServerOptInFetch];
}

void sub_100031DF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained validatePendingURIsAndRequests];
}

void sub_100031E24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained signatureQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100031EEC;
  block[3] = &unk_100276740;
  id v7 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 flagHandler]);
  [v5 cancelPendingFlag:@"ValidateSelf"];
}

id sub_100031EEC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signaturesComplete]);
  [v2 fulfill];

  id result = [*(id *)(a1 + 32) shouldPokeIDSUponSigning];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) triggerRegistrationDataNeedsUpdate:@"updated"];
  }
  return result;
}

void sub_100031F44(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained manateeViewChangedScheduler]);
  [v1 trigger];
}

uint64_t sub_100031F88(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachineQueue]);
    dispatch_sync(v3, &stru_100279298);
  }

  return 1LL;
}

void sub_100032334(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_1002792E0);
    }
    id v4 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "error closing eligibility db %@",  (uint8_t *)&v5,  0xCu);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100032418(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100032448(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000325C8(_Unwind_Exception *a1)
{
}

id sub_100032600(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0LL);
  id v4 = dispatch_group_create();
  id v5 = (id)objc_claimAutoreleasedReturnValue([WeakRetained statusReporting]);

  if (v5)
  {
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v6 = [&off_10029A208 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v22;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v22 != v8) {
            objc_enumerationMutation(&off_10029A208);
          }
          uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)i);
          dispatch_group_enter(v4);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statusReporting]);
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472LL;
          v18[2] = sub_100032878;
          v18[3] = &unk_100279350;
          v18[4] = v10;
          void v18[5] = WeakRetained;
          id v19 = v2;
          unsigned int v20 = v4;
          [v11 aggregateResultWithSamples:30 element:v10 completionHandler:v18];
        }

        id v7 = [&off_10029A208 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v7);
    }

    int v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained metricsQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100032A24;
    block[3] = &unk_100276740;
    uint64_t v13 = v3;
    __int128 v17 = v13;
    dispatch_group_notify(v4, v12, block);

    dispatch_time_t v14 = dispatch_time(0LL, 1000000000LL);
    id v5 = 0LL;
    if (!dispatch_semaphore_wait(v13, v14)) {
      id v5 = v2;
    }
  }

  return v5;
}

void sub_100032878(id *a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] stringByAppendingString:@"Eligible30"]);
  os_unfair_lock_lock((os_unfair_lock_t)a1[5] + 3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [a1[6] setObject:v5 forKeyedSubscript:v4];

  os_unfair_lock_unlock((os_unfair_lock_t)a1[5] + 3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] statusReporting]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100032994;
  v7[3] = &unk_100279350;
  __int128 v8 = *((_OWORD *)a1 + 2);
  id v9 = a1[6];
  id v10 = a1[7];
  [v6 aggregateResultWithSamples:60 element:(void)v8 completionHandler:v7];
}

void sub_100032994(uint64_t a1, uint64_t a2)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringByAppendingString:@"Eligible60"]);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 12LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [*(id *)(a1 + 48) setObject:v4 forKeyedSubscript:v5];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 12LL));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_100032A24(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100032A2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  dispatch_semaphore_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  kTransparencyAnalyticsVersion));
  [v2 setObject:v3 forKeyedSubscript:kTransparencyAnalyticsVersionKey];

  __int128 v57 = WeakRetained;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 settings]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v5 getEnvironment]));
  id v7 = v2;
  [v2 setObject:v6 forKeyedSubscript:kTransparencyAnalyticsEnvironmentKey];

  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics analyticsApplications]( &OBJC_CLASS___TransparencyAnalytics,  "analyticsApplications"));
  id v55 = [obj countByEnumeratingWithState:&v66 objects:v72 count:16];
  if (v55)
  {
    uint64_t v54 = *(void *)v67;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v67 != v54) {
          objc_enumerationMutation(obj);
        }
        uint64_t v56 = v8;
        uint64_t v9 = *(void *)(*((void *)&v66 + 1) + 8 * v8);
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        __int128 v65 = 0u;
        id v10 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext analyticsSuccessNames](&OBJC_CLASS___KTContext, "analyticsSuccessNames"));
        id v11 = [v10 countByEnumeratingWithState:&v62 objects:v71 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v63;
          do
          {
            dispatch_time_t v14 = 0LL;
            do
            {
              if (*(void *)v63 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext successMetricsKey:validationName:]( &OBJC_CLASS___KTContext,  "successMetricsKey:validationName:",  v9,  *(void *)(*((void *)&v62 + 1) + 8LL * (void)v14)));
              if (v15)
              {
                __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
                __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 logger]);
                __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 fuzzyTimeSinceLastSuccess:v15]);
                [v7 setObject:v18 forKeyedSubscript:v15];
              }

              dispatch_time_t v14 = (char *)v14 + 1;
            }

            while (v12 != v14);
            id v12 = [v10 countByEnumeratingWithState:&v62 objects:v71 count:16];
          }

          while (v12);
        }

        __int128 v60 = 0u;
        __int128 v61 = 0u;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext analyticsSelfFlagNames](&OBJC_CLASS___KTContext, "analyticsSelfFlagNames"));
        id v20 = [v19 countByEnumeratingWithState:&v58 objects:v70 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = *(void *)v59;
          do
          {
            __int128 v23 = 0LL;
            do
            {
              if (*(void *)v59 != v22) {
                objc_enumerationMutation(v19);
              }
              __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext selfStatusFlagMetricsKey:name:]( &OBJC_CLASS___KTContext,  "selfStatusFlagMetricsKey:name:",  v9,  *(void *)(*((void *)&v58 + 1) + 8LL * (void)v23)));
              if (v24)
              {
                id v25 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
                uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 logger]);
                unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v26 numberPropertyForKey:v24]);
                [v7 setObject:v27 forKeyedSubscript:v24];
              }

              __int128 v23 = (char *)v23 + 1;
            }

            while (v21 != v23);
            id v21 = [v19 countByEnumeratingWithState:&v58 objects:v70 count:16];
          }

          while (v21);
        }

        uint64_t v8 = v56 + 1;
      }

      while ((id)(v56 + 1) != v55);
      id v55 = [obj countByEnumeratingWithState:&v66 objects:v72 count:16];
    }

    while (v55);
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v57 smState]);
  uint64_t v29 = v7;
  [v7 setObject:v28 forKeyedSubscript:@"smState"];

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "metricsRegistration_ktView"));
  if ([v30 count]) {
    [v7 addEntriesFromDictionary:v30];
  }
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "metricsRegistration_idsView"));
  if ([v31 count]) {
    [v29 addEntriesFromDictionary:v31];
  }
  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 logger]);
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 fuzzyTimeSinceDateKey:off_1002DE268]);
  [v29 setObject:v34 forKeyedSubscript:@"idsRegPoke"];

  id v35 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
  __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 logger]);
  unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 fuzzyTimeSinceDateKey:off_1002DE270]);
  [v29 setObject:v37 forKeyedSubscript:@"idsRegValid"];

  id v38 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 idsConfigBag]);
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v39 ktDisable]));
  [v29 setObject:v40 forKeyedSubscript:@"idsKTDisable"];

  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 idsAccountTracker]);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 messagesStatus]);

  if (v43)
  {
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v43 status] == (id)3));
    [v29 setObject:v44 forKeyedSubscript:@"messages"];
  }

  id v45 = (void *)objc_claimAutoreleasedReturnValue([v57 deps]);
  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue( +[KTFillStatusOperation memoizedKTSelfStatusResult:]( &OBJC_CLASS___KTFillStatusOperation,  "memoizedKTSelfStatusResult:",  v45));

  if (v46 && ([v46 pendingStatusChanges] & 1) == 0)
  {
    __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v46 optIn]));
    [v29 setObject:v47 forKeyedSubscript:@"optIn"];

    if ([v46 everOptIn])
    {
      unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v46 everOptIn]));
      [v29 setObject:v48 forKeyedSubscript:@"everOptIn"];
    }

    __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v46 accountStatus]));
    [v29 setObject:v49 forKeyedSubscript:@"accountStatus"];

    id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v46 selfStatus]));
    [v29 setObject:v50 forKeyedSubscript:@"selfStatus"];

    id v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v46 systemStatus]));
    [v29 setObject:v51 forKeyedSubscript:@"systemStatus"];
  }

  return v29;
}

void sub_1000331EC(uint64_t a1)
{
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279398);
  }
  id v2 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CK account changed to: %@",  (uint8_t *)&v5,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
  [v4 _onqueueHandleFlag:@"CKAccountChanged"];
}

void sub_1000332E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100033450(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000336AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100033914(uint64_t a1)
{
  uint64_t v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"CheckAccountSignatures",  0LL,  *(double *)(a1 + 40));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
  [v2 _onqueueHandlePendingFlagLater:v3];
}

void sub_100033B98(uint64_t a1, uint64_t a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[KTStateTransitionWatcher stripUnexpectedPathError:]( &OBJC_CLASS___KTStateTransitionWatcher,  "stripUnexpectedPathError:",  a2));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_24:
  if (a5)
  {
    __int128 v17 = v17;
    __int128 v33 = 0;
    *a5 = v17;
  }

  else
  {
    __int128 v33 = 0;
  }

    exit(1);
  }

  v0 = realpath_DARWIN_EXTSN((const char *)buf, 0LL);
  if (!v0)
  {
    if (qword_1002E65A0 != -1) {
      dispatch_once(&qword_1002E65A0, &stru_10027CF20);
    }
    uint64_t v26 = (void *)qword_1002E65A8;
    if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_ERROR))
    {
      id v21 = v26;
      unsigned int v27 = *__error();
      uint64_t v28 = __error();
      uint64_t v29 = strerror(*v28);
      *(_DWORD *)__int128 v41 = 67109378;
      __int128 v42 = v27;
      __int128 v43 = 2080;
      uint64_t v44 = v29;
      id v25 = "failed to resolve temporary directory (%d): %s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  os_log_t v1 = v0;
  setenv("SQLITE_TMPDIR", v0, 1);
  free(v1);
  id v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc_init(&OBJC_CLASS___transparencyd);
  id v4 = objc_alloc_init(&OBJC_CLASS___MainServiceDelegate);
  -[MainServiceDelegate setDaemonContext:](v4, "setDaemonContext:", v3);
  int v5 = dispatch_workloop_create("com.apple.transparencyd.xpc");
  -[MainServiceDelegate setXpcQueue:](v4, "setXpcQueue:", v5);

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___KTIDSSupportServiceDelegate);
  -[KTIDSSupportServiceDelegate setDaemonContext:](v6, "setDaemonContext:", v3);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MainServiceDelegate xpcQueue](v4, "xpcQueue"));
  -[KTIDSSupportServiceDelegate setXpcQueue:](v6, "setXpcQueue:", v7);

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___KTAccountsSupportServiceDelegate);
  -[KTAccountsSupportServiceDelegate setDaemonContext:](v8, "setDaemonContext:", v3);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[MainServiceDelegate xpcQueue](v4, "xpcQueue"));
  -[KTAccountsSupportServiceDelegate setXpcQueue:](v8, "setXpcQueue:", v9);

  __int128 v30 = -[KTSignalTermHandler initWithSIGTERMNotification:]( objc_alloc(&OBJC_CLASS___KTSignalTermHandler),  "initWithSIGTERMNotification:",  &stru_10027CDB8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10006BF7C;
  handler[3] = &unk_10027CE40;
  id v10 = v4;
  __int128 v40 = v10;
  xpc_activity_register("com.apple.transparencyd.dutycycle", XPC_ACTIVITY_CHECK_IN, handler);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  void v37[2] = sub_10006C2AC;
  v37[3] = &unk_10027CE40;
  id v11 = v3;
  id v38 = v11;
  xpc_activity_register("com.apple.transparencyd.self-validate", XPC_ACTIVITY_CHECK_IN, v37);
  __int128 v32 = _NSConcreteStackBlock;
  __int128 v33 = 3221225472LL;
  __int128 v34 = sub_10006C488;
  id v35 = &unk_10027CE40;
  id v12 = v11;
  __int16 v36 = v12;
  xpc_activity_register("com.apple.transparencyd.24h", XPC_ACTIVITY_CHECK_IN, &v32);
  uint64_t v13 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.transparencyd");
  -[NSXPCListener setDelegate:](v13, "setDelegate:", v10);
  -[NSXPCListener resume](v13, "resume");
  dispatch_time_t v14 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.transparencyd.ids-support");
  -[NSXPCListener setDelegate:](v14, "setDelegate:", v6);
  -[NSXPCListener resume](v14, "resume");
  uint64_t v15 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.transparencyd.accounts-support");
  -[NSXPCListener setDelegate:](v15, "setDelegate:", v8);
  -[NSXPCListener resume](v15, "resume");

  objc_autoreleasePoolPop(v2);
  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CEC0);
  }
  __int128 v16 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "transparencyd accepting work", buf, 2u);
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop", v30, v32, v33, v34, v35));
  [v17 run];

  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CEE0);
  }
  __int128 v18 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "transparencyd stopping", buf, 2u);
  }

  return 1LL;
}

    id v11 = (v21 - 1) & v21;
    __int128 v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    __int128 v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    id v25 = *v23;
    __int128 v24 = v23[1];
    uint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100085C90(v26, (uint64_t)v40);
    }

    else
    {
      sub_100080E5C((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    id result = Hasher._finalize()();
    unsigned int v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v30 = 0;
      __int128 v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        __int128 v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    __int128 v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    void *v16 = v25;
    v16[1] = v24;
    id result = sub_100085C90(v40, *(void *)(v8 + 56) + 40 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v35;
  id v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  __int128 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    dispatch_group_s *v20 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  id result = swift_release(v5);
  KTPendingFlag *v3 = v8;
  return result;
}

    int v5 = (v19 - 1) & v19;
    id v10 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    id v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    id v12 = v11[1];
    sub_100080E5C(*(void *)(v2 + 56) + 40 * v10, (uint64_t)v31);
    *(void *)&__int128 v30 = v13;
    *((void *)&v30 + 1) = v12;
    unsigned int v27 = v30;
    v28[0] = v31[0];
    v28[1] = v31[1];
    uint64_t v29 = v32;
    sub_100080E5C((uint64_t)v28, (uint64_t)v23);
    sub_100085C90(v23, (uint64_t)v24);
    dispatch_time_t v14 = v25;
    uint64_t v15 = v26;
    sub_100084C04(v24, v25);
    __int128 v16 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 56);
    __int128 v17 = swift_bridgeObjectRetain(v12);
    v8 |= v16(v14, v15, v17);
    sub_10007EAFC(v24);
    id result = sub_100077CFC((uint64_t)&v27, (uint64_t *)&unk_1002E11F8);
  }

  id v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_25:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return v8 & 1;
  }

  id v19 = *(void *)(v21 + 8 * v20);
  if (v19)
  {
    id v7 = v20;
    goto LABEL_24;
  }

  while (1)
  {
    id v7 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v7 >= v22) {
      goto LABEL_25;
    }
    id v19 = *(void *)(v21 + 8 * v7);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }

    id v11 = (v21 - 1) & v21;
    __int128 v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    __int128 v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    id v25 = *v23;
    __int128 v24 = v23[1];
    uint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100085C90(v26, (uint64_t)v40);
    }

    else
    {
      sub_100080E5C((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    id result = Hasher._finalize()();
    unsigned int v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v30 = 0;
      __int128 v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        __int128 v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    __int128 v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    void *v16 = v25;
    v16[1] = v24;
    id result = sub_100085C90(v40, *(void *)(v8 + 56) + 40 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v35;
  id v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  __int128 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    dispatch_group_s *v20 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  id result = swift_release(v5);
  KTPendingFlag *v3 = v8;
  return result;
}

          *__int128 v87 = v93;
          return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for KTEligibilityStatusResult.Status,  v87,  &type metadata for KTEligibilityStatusResult.Status,  &type metadata for Int);
        }
      }

        id v11 = (v20 - 1) & v20;
        __int128 v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      __int128 v24 = *v22;
      __int128 v23 = v22[1];
      id v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10007ADB4(v25, v38);
      }

      else
      {
        sub_100079A14((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      id result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unsigned int v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        __int128 v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          __int128 v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          __int128 v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      __int128 v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      void *v16 = v24;
      v16[1] = v23;
      id result = (uint64_t)sub_10007ADB4(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  id result = swift_release(v5);
  KTPendingFlag *v3 = v8;
  return result;
}

  return v17;
}

  return v16;
}

  if ([v6 hasTopLevelTreeEntry]
    && (__int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v6 topLevelTreeEntry]), v31, v31))
  {
    __int128 v32 = v6;
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v6 topLevelTreeEntry]);
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v32 topLevelTreeEntry]);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 slh]);

    if (v35)
    {
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 topLevelTreeEntry]);
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v33 slh]);
      -[KTContextVerifier checkHeadEpoch:](self, "checkHeadEpoch:", v36);

LABEL_29:
      __int128 v32 = v43;
    }

    unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "topLevelTreeEntry", v43));
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v32 metadata]);
    __int128 v39 = kTransparencyResponseMetadataKeyServerHint;
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
    [v37 setMetadataValue:v40 key:v39];

    id obj = (id)objc_claimAutoreleasedReturnValue([v32 topLevelTreeEntry]);
    __int128 v30 = -[KTContextVerifier verifyRevisionLogTopLevelProof:patSTH:error:]( self,  "verifyRevisionLogTopLevelProof:patSTH:error:") != 0;
    uint64_t v6 = v32;
LABEL_33:
  }

  else
  {
    if (v10)
    {
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier dataStore](self, "dataStore"));
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472LL;
      v49[2] = sub_1001B79D4;
      v49[3] = &unk_1002794B0;
      id v50 = v10;
      id v51 = self;
      id v52 = a5;
      id v10 = v10;
      [v41 performBlockAndWait:v49];

      __int128 v30 = 1;
      id obj = v50;
      goto LABEL_33;
    }

    __int128 v30 = 1;
  }

  return v30;
}

LABEL_27:
  return v33;
}

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    __int128 v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    id v19 = v18[1];
    id v20 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v40[0] = *v18;
    *((void *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v32, v40, &type metadata for String, &type metadata for AnyHashable, 7LL);
    __int128 v31 = v20;
    id v21 = sub_100072CC4(&qword_1002DF638);
    swift_dynamicCast(v35, &v31, v21, (char *)&type metadata for Any + 8, 7LL);
    __int16 v36 = v32;
    unsigned int v37 = v33;
    id v38 = v34;
    sub_10007ADB4(v35, v39);
    __int128 v32 = v36;
    __int128 v33 = v37;
    __int128 v34 = v38;
    sub_10007ADB4(v39, v40);
    sub_10007ADB4(v40, &v36);
    id result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    __int128 v23 = result & ~v22;
    __int128 v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unsigned int v27 = v24 == v26;
        if (v24 == v26) {
          __int128 v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v7[8 * v24];
      }

      while (v28 == -1);
      id v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    id v11 = v3[6] + 40 * v10;
    *(_OWORD *)id v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(void *)(v11 + 32) = v34;
    id result = (uint64_t)sub_10007ADB4(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  __int128 v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_100079A50(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    __int128 v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    __int128 v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v30 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    id v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    __int128 v17 = (void *)(*(void *)(v2 + 48) + v16);
    __int128 v18 = v17[1];
    id v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

  swift_release(v8);
  return (*(uint64_t (**)(void *))(*v1 + 208LL))(&_swiftEmptySetSingleton);
}

      id v25 = 0LL;
      if (v32)
      {
LABEL_31:
        swift_bridgeObjectRelease(a1);

        return (void *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      }

  __break(1u);
  return result;
}

  __break(1u);
}

    id v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 8 * v15;
    __int128 v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  id v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

              continue;
            }

            uint64_t v15 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
LABEL_24:
            id v20 = *v15;
          }

          else
          {
            if ([v9 mapKeyDataType] == 14
              && *(unsigned __int8 *)(v9[1] + 30LL) - 13 <= 3)
            {
              id v19 = objc_opt_class(&OBJC_CLASS___TransparencyGPBAutocreatedDictionary, v18);
              if ((objc_opt_isKindOfClass(v12, v19) & 1) == 0) {
                goto LABEL_27;
              }
              uint64_t v15 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
              goto LABEL_24;
            }

            id v20 = 8LL;
          }

          id v21 = (TransparencyGPBMessage **)&v12[v20];
          if (*v21 == self) {
            *id v21 = 0LL;
          }
          goto LABEL_27;
        }

        __int128 v16 = *(unsigned __int8 *)(v10 + 30);
        if ((v16 - 15) <= 1)
        {
          sub_1001383CC((uint64_t)self, *(void *)(*((void *)&v33 + 1) + 8LL * (void)i));
          __int128 v17 = (void *)sub_100137E7C((uint64_t)self, (uint64_t)v9);
LABEL_21:

          continue;
        }

        if ((v16 - 13) <= 3 && sub_100138364((uint64_t)self, *(_DWORD *)(v10 + 20), *(_DWORD *)(v10 + 16)))
        {
          __int128 v17 = sub_10012F03C((uint64_t)self, v9);
          goto LABEL_21;
        }
      }

      uint64_t v6 = [v4 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }

    while (v6);
  }

  uint64_t v22 = -[NSMutableDictionary allValues](self->autocreatedExtensionMap_, "allValues");

  self->autocreatedExtensionMap_ = 0LL;
  uint64_t v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v23 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v23)
  {
    __int128 v24 = v23;
    id v25 = *(void *)v30;
    do
    {
      for (j = 0LL; j != v24; j = (char *)j + 1)
      {
        if (*(void *)v30 != v25) {
          objc_enumerationMutation(v22);
        }
        sub_10012E124(*(void *)(*((void *)&v29 + 1) + 8LL * (void)j));
      }

      __int128 v24 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }

    while (v24);
  }

  self->extensionMap_ = 0LL;
  self->unknownFields_ = 0LL;
  if (v28) {
    bzero(self->messageStorage_, *((unsigned int *)v27 + 6));
  }
}

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      uint64_t v28 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      id v11 = v28;
    }

    while (v28);
  }

  if (!-[NSMutableDictionary count](self->extensionMap_, "count") && ![*((id *)a3 + 2) count]
    || (uint64_t v9 = -[NSMutableDictionary isEqual:](self->extensionMap_, "isEqual:", *((void *)a3 + 2))) != 0)
  {
    if ((uint64_t v29 = (void *)*((void *)a3 + 1),
          !-[TransparencyGPBUnknownFieldSet countOfFields](self->unknownFields_, "countOfFields"))
      && ![v29 countOfFields]
      || (uint64_t v9 = -[TransparencyGPBUnknownFieldSet isEqual:](self->unknownFields_, "isEqual:", v29)) != 0)
    {
LABEL_39:
      LOBYTE(v9) = 1;
    }
  }

  return v9;
}

  return v22;
}

  uint64_t v44 = *(void **)(a1 + 32);
  id v45 = *(void *)(*(void *)(a1 + 96) + 8LL);
  uint64_t v54 = *(id *)(v45 + 40);
  __int128 v46 = [v44 persistWithError:&v54];
  objc_storeStrong((id *)(v45 + 40), v54);
  if (v46)
  {
    unsigned int v48 = objc_claimAutoreleasedReturnValue([v3 verificationId]);
    __int128 v49 = *(void *)(*(void *)(a1 + 104) + 8LL);
    id v50 = *(void **)(v49 + 40);
    *(void *)(v49 + 40) = v48;
  }

  id v51 = (void *)objc_opt_class(*(void *)(a1 + 32), v47);
  id v52 = *(void *)(*(void *)(a1 + 96) + 8LL);
  uint64_t v53 = *(id *)(v52 + 40);
  [v51 cleanseError:&v53];
  objc_storeStrong((id *)(v52 + 40), v53);
LABEL_30:
}

void sub_100033FF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100034024(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100034054(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003412C(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000341B0;
  v3[3] = &unk_100279400;
  v3[5] = *(void *)(a1 + 48);
  v3[4] = *(void *)(a1 + 32);
  dispatch_async(v2, v3);
}

void sub_1000341B0(uint64_t a1)
{
  id v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"RepairIDSFlag",  2LL,  *(double *)(a1 + 40));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
  [v2 handlePendingFlag:v3];
}

void sub_100034360(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100034434(uint64_t a1)
{
  return _[*(id *)(a1 + 32) maybeCreateNewCKFetchOnQueue];
}

void sub_100034530(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100034948(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100034978(id *a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100034A14;
  block[3] = &unk_100279558;
  id v3 = a1[5];
  id v4 = a1[4];
  id v6 = v3;
  id v7 = v4;
  id v8 = a1[6];
  dispatch_async(v2, block);
}

void sub_100034A14(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  if (v2)
  {
    if ([*(id *)(a1 + 32) shouldRetry])
    {
      id v3 = *(void **)(a1 + 40);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
      int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckFetchScheduler]);
      [v3 inspectErrorForRetryAfter:v4 trigger:v5];

      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 reachabilityTracker]);
      LODWORD(v5) = [v7 isNetworkError:v2];

      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckFetchReasons]);
      uint64_t v9 = v8;
      if ((_DWORD)v5)
      {
        [v8 addObject:off_1002DE2F8];

        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkTimeout]);
        [v10 networkWithFeedback:1];
      }

      else
      {
        [v8 addObject:off_1002DE300];
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckFetchReasons]);
      [v22 unionSet:*(void *)(a1 + 48)];

      if ([*(id *)(a1 + 40) isCloudKitManateeAcountAvailable])
      {
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) specificUser]);

        if (v23)
        {
          [*(id *)(a1 + 40) setNewCKRequests:1];
LABEL_22:
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckFetchScheduler]);
          [v24 trigger];
        }
      }
    }

    else
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279530);
      }
      id v21 = (os_log_s *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        __int128 v30 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Fetcher don't advice retry on error: %{public}@",  buf,  0xCu);
      }
    }
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inflightCKFetchDependencies", 0));
    id v12 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v26;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v26 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operationQueue]);
          [v17 addOperation:v16];
        }

        id v13 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
      }

      while (v13);
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inflightCKFetchDependencies]);
    [v18 removeAllObjects];

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 networkTimeout]);
    [v20 networkWithFeedback:0];
  }

  [*(id *)(a1 + 40) setLastCKFetch:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) setCurrentCKFetch:0];
}

void sub_100034D64(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100034FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100034FE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

uint64_t sub_100035018(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100035028(uint64_t a1)
{
}

void sub_100035030(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) successfulCKFetchDependency]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(a1 + 32) setNewCKRequests:1];
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckFetchReasons]);
  [v5 unionSet:*(void *)(a1 + 40)];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckFetchScheduler]);
  [v6 trigger];
}

void sub_1000353D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100035638( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100035654(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 dateByAddingTimeInterval:*(double *)(a1 + 48)]);
}

void sub_100035810(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000359DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100035C2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100035C44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v21 = 0LL;
  unsigned __int8 v3 = [v2 waitUntilReadyForRPCForOperation:@"background-validation" fast:0 error:&v21];
  id v4 = v21;
  if ((v3 & 1) != 0)
  {
    int v5 = objc_alloc(&OBJC_CLASS___KTBackgroundSystemValidationOperation);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v7 = -[KTBackgroundSystemValidationOperation initWithDependencies:](v5, "initWithDependencies:", v6);

    [*(id *)(a1 + 32) setLastDutyCycle:v7];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100035E18;
    v17[3] = &unk_100279670;
    id v8 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    __int128 v18 = v7;
    id v19 = v8;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v17));
    [v10 addNullableDependency:v9];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 reachabilityTracker]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reachabilityDependency]);
    -[KTBackgroundSystemValidationOperation addNullableDependency:](v9, "addNullableDependency:", v13);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    [v14 addOperation:v9];

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    [v15 addOperation:v10];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v9 = *(KTBackgroundSystemValidationOperation **)(v16 + 40);
    *(void *)(v16 + 40) = 0LL;
  }
}

void sub_100035E18(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100035EBC;
  v5[3] = &unk_100279648;
  id v8 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  uint64_t v9 = *(void *)(a1 + 56);
  dispatch_async(v2, v5);
}

void sub_100035EBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v4)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 smDataStore]);
    [v6 setSettingsNumber:off_1002DE048 number:&off_100299B10];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 smDataStore]);
    [v8 setSettingsData:off_1002DE068 data:0];
  }

  [*(id *)(a1 + 40) triggerStatusUpdate:kKTApplicationIdentifierIDS];
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279620);
  }
  uint64_t v9 = (void *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEBUG))
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = v9;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 opUUID]);
    int v15 = 138543362;
    uint64_t v16 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "BackgroundSystemValidation: end %{public}@",  (uint8_t *)&v15,  0xCu);
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0LL;
}

void sub_10003608C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100036258(uint64_t a1)
{
  id v3 = -[KTPendingFlag initWithFlag:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:delayInSeconds:",  @"StatusUpdate",  0.0);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
  [v2 handlePendingFlag:v3];
}

void sub_10003648C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000364BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000365B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000365CC(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___KTValidatePendingURIsOperation);
  uint64_t v3 = kKTApplicationIdentifierIDS;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  int v5 = -[KTValidatePendingURIsOperation initWithApplication:opId:dependencies:]( v2,  "initWithApplication:opId:dependencies:",  v3,  0LL,  v4);

  id v6 = objc_alloc(&OBJC_CLASS___KTValidatePendingRequestsOperation);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v8 = -[KTValidatePendingRequestsOperation initWithApplication:dependencies:opId:]( v6,  "initWithApplication:dependencies:opId:",  v3,  v7,  0LL);

  uint64_t v9 = objc_alloc(&OBJC_CLASS___KTFillStatusOperation);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v11 = -[KTFillStatusOperation initWithApplication:initialFill:dependencies:intendedState:errorState:]( v9,  "initWithApplication:initialFill:dependencies:intendedState:errorState:",  v3,  1LL,  v10,  @"Ready",  @"Ready");

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100036850;
  v23[3] = &unk_100279700;
  __int128 v24 = *(_OWORD *)(a1 + 32);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v23));
  [v12 addNullableDependency:v5];
  [v12 addNullableDependency:v8];
  [v12 addNullableDependency:v11];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 reachabilityTracker]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 reachabilityDependency]);
  -[KTValidatePendingURIsOperation addNullableDependency:](v5, "addNullableDependency:", v15);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 reachabilityTracker]);
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 reachabilityDependency]);
  -[KTValidatePendingRequestsOperation addNullableDependency:](v8, "addNullableDependency:", v18);

  -[KTFillStatusOperation addNullableDependency:](v11, "addNullableDependency:", v8);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v19 addOperation:v5];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v20 addOperation:v8];

  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v21 addOperation:v11];

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v22 addOperation:v12];
}

void sub_100036850(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000368C4;
  v3[3] = &unk_100279700;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  dispatch_async(v2, v3);
}

void sub_1000368C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingValidationsComplete]);
  [v2 fulfill];

  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_100036B24(_Unwind_Exception *a1)
{
}

void sub_100036B38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 logger]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 setDateProperty:v3 forKey:off_1002DE270];

  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained successfulIDSRegistrationCheck]);
  [v4 fulfill];

  int v5 = objc_alloc_init(&OBJC_CLASS___KTCondition);
  [WeakRetained setSuccessfulIDSRegistrationCheck:v5];
}

void sub_100036EB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100037108(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastValidateSelf]);

    if (v6)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastValidateSelf]);
      [v7 handleOperationResults:*(void *)(a1 + 40)];
      goto LABEL_5;
    }

    id v3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -319LL,  @"no prior self validation operation"));
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue( +[KTStateTransitionWatcher stripUnexpectedPathError:]( &OBJC_CLASS___KTStateTransitionWatcher,  "stripUnexpectedPathError:",  v3));

  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));
  (*(void (**)(uint64_t, void, void, void, void *))(v4 + 16))(v4, 0LL, 0LL, 0LL, v5);

LABEL_5:
}

void sub_100037288(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v12 = a3;
  id v8 = a5;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"selfFetchResult"];

  if (v8)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"selfFetchError"];
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 diagnosticsJsonDictionary]);
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"diagnostics"];
}

void sub_10003741C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int128 v23 = v8;
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279790);
  }
  id v10 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "fetchSelfVerificationInfoForApplication: %@",  buf,  0xCu);
  }

  if (v9)
  {
    __int128 v31 = @"error";
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
    __int128 v32 = v11;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"fetchError"];
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 uriToServerLoggableDatas]);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10003773C;
  v28[3] = &unk_1002797B8;
  id v15 = v13;
  id v29 = v15;
  [v14 enumerateKeysAndObjectsUsingBlock:v28];

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v7 syncedLoggableDatas]);
  id v18 = [v17 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v25;
    do
    {
      for (i = 0LL; i != v19; i = (char *)i + 1)
      {
        if (*(void *)v25 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v24 + 1) + 8 * (void)i) diagnosticsJsonDictionary]);
        [v16 addObject:v22];
      }

      id v19 = [v17 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }

    while (v19);
  }

  if ([v15 count]) {
    [*(id *)(a1 + 32) setObject:v15 forKeyedSubscript:@"serverLoggableDatas"];
  }
  if ([v16 count]) {
    [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"syncedLoggableDatas"];
  }
}

void sub_10003770C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003773C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serverLoggableDatas", 0));
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) diagnosticsJsonDictionary]);
        [v7 addObject:v13];

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v21 count:16];
    }

    while (v10);
  }

  id v19 = @"loggableData";
  uint64_t v20 = v7;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v5];
}

void sub_100037C20(uint64_t a1)
{
  v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 idsOperations]);
  v185[0] = _NSConcreteStackBlock;
  v185[1] = 3221225472LL;
  v185[2] = sub_100038F28;
  v185[3] = &unk_100279830;
  v185[4] = *(void *)(a1 + 32);
  id v172 = v2;
  id v186 = v172;
  dispatch_semaphore_t dsema = v3;
  dispatch_semaphore_t v187 = dsema;
  [v5 fetchKTRegistrationStatus:v185];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v181 = 0u;
  __int128 v182 = 0u;
  __int128 v183 = 0u;
  __int128 v184 = 0u;
  uint64_t v178 = a1;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 publicKeyStore]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 applicationKeyStores]);

  id obj = v9;
  id v10 = [v9 countByEnumeratingWithState:&v181 objects:v188 count:16];
  v177 = v6;
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v182;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v182 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void *)(*((void *)&v181 + 1) + 8LL * (void)i);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 publicKeyStore]);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 applicationKeyStores]);
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v14]);

        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v18 tltLogBeginningMs]));
        [v19 setObject:v20 forKeyedSubscript:@"tltLogBeginMs"];

        id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v18 patLogBeginningMs]));
        [v19 setObject:v21 forKeyedSubscript:@"patLogBeginMs"];

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 vrfKey]);
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 vrfKey]);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "kt_hexString"));
        [v19 setObject:v24 forKeyedSubscript:@"vrfKey"];

        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v18 inResetWindow]));
        [v19 setObject:v25 forKeyedSubscript:@"inResetWindow"];

        id v6 = v177;
        [v177 setObject:v19 forKeyedSubscript:v14];
      }

      id v11 = [obj countByEnumeratingWithState:&v181 objects:v188 count:16];
    }

    while (v11);
  }

  if ([v6 count]) {
    [v174 setObject:v6 forKeyedSubscript:@"trees"];
  }
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) pcsOperation]);
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 getCurrentKTPCSIdentity:off_1002E5928 error:0]);

  id obja = v27;
  if (v27)
  {
    uint64_t PublicKey = PCSIdentityGetPublicKey([v27 identity]);
    uint64_t v29 = objc_claimAutoreleasedReturnValue(PublicKey);
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  v171 = (void *)v29;
  if (v29) {
    __int128 v30 = (const __CFString *)v29;
  }
  else {
    __int128 v30 = @"<no-key>";
  }
  [v174 setObject:v30 forKeyedSubscript:@"accountKey"];
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 accountKeyService]);
  uint64_t v33 = kKTApplicationIdentifierIDS;
  id v34 = [v32 copyCachedPCSIdentityForApplication:kKTApplicationIdentifierIDS];

  if (v34)
  {
    uint64_t v35 = PCSIdentityGetPublicKey([v34 identity]);
    uint64_t v36 = objc_claimAutoreleasedReturnValue(v35);
  }

  else
  {
    uint64_t v36 = 0LL;
  }

  v169 = (void *)v36;
  if (v36) {
    unsigned int v37 = (const __CFString *)v36;
  }
  else {
    unsigned int v37 = @"<no-key>";
  }
  [v174 setObject:v37 forKeyedSubscript:@"accountKeyCache"];
  id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 smDataStore]);
  v179[0] = _NSConcreteStackBlock;
  v179[1] = 3221225472LL;
  v179[2] = sub_1000390BC;
  v179[3] = &unk_100279858;
  id v41 = v38;
  id v180 = v41;
  [v40 fetchIDMSDeviceList:v179];

  if ([v41 count]) {
    [v174 setObject:v41 forKeyedSubscript:@"devices"];
  }
  __int128 v42 = *(void **)(v178 + 32);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 lastValidateSelf]);
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v42 validateSelfDiagnostics:v43]);

  id v45 = *(void **)(v178 + 32);
  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 lastValidateSelfOptIn]);
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 validateSelfDiagnostics:v46]);

  v170 = v34;
  v168 = v47;
  if ([v44 count] || objc_msgSend(v47, "count", v47))
  {
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v44, @"lastValidateSelf", v168);
    [v174 setObject:v47 forKeyedSubscript:@"lastValidateSelfOptIn"];
  }

  else
  {
    v167 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) missingValidateSelfFallbackDiagnostics]);
    [v174 setObject:v167 forKeyedSubscript:@"missingValidateSelfFallback"];
  }

  unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 lockStateTracker]);
  id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 description]);
  [v174 setObject:v50 forKeyedSubscript:@"lockstate"];

  id v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 logger]);
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 nfsReporting]);
  [v174 setObject:v53 forKeyedSubscript:@"nfs"];

  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 kvs]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[KTOptInManagerServer getOptInHistoryDiagnostic:store:]( &OBJC_CLASS___KTOptInManagerServer,  "getOptInHistoryDiagnostic:store:",  v33,  v55));
  [v174 setObject:v56 forKeyedSubscript:@"IDSKVSOptInHistory"];

  __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v57 cloudRecords]);
  __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v58 sysdiagnose]);
  [v174 setObject:v59 forKeyedSubscript:@"cloudRecords"];

  __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v60 networkTimeout]);
  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v61 sysdiagnose]);
  [v174 setObject:v62 forKeyedSubscript:@"networkTimeout"];

  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) launch]);
  __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v63 eventsByTime]);
  [v174 setObject:v64 forKeyedSubscript:@"launch"];

  __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 idsConfigBag]);
  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v66 ktDisable]));
  [v174 setObject:v67 forKeyedSubscript:@"idsKTDisable"];

  __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int128 v69 = (void *)objc_claimAutoreleasedReturnValue([v68 stateMonitor]);
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 ktStatus]);
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v70 diagnosticsJsonDictionary]);
  [v174 setObject:v71 forKeyedSubscript:@"status"];

  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  __int16 v73 = (void *)objc_claimAutoreleasedReturnValue( +[KTFillStatusOperation memoizedKTSelfStatusResult:]( &OBJC_CLASS___KTFillStatusOperation,  "memoizedKTSelfStatusResult:",  v72));
  id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 diagnosticsJsonDictionary]);
  [v174 setObject:v74 forKeyedSubscript:@"memoizedStatus"];

  __int16 v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  id v76 = (void *)objc_claimAutoreleasedReturnValue([v75 idsAccountTracker]);
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 messagesStatus]);

  if (v77)
  {
    v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v77 status] == (id)3));
    [v174 setObject:v78 forKeyedSubscript:@"messages"];
  }

  id v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchIDMS]);

  if (v80)
  {
    __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchIDMS]);
    __int128 v82 = (void *)objc_claimAutoreleasedReturnValue([v81 description]);
    [v79 setObject:v82 forKeyedSubscript:@"fetchIDMS"];
  }

  __int128 v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastValidateSelf]);

  if (v83)
  {
    __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastValidateSelf]);
    __int128 v85 = (void *)objc_claimAutoreleasedReturnValue([v84 description]);
    [v79 setObject:v85 forKeyedSubscript:@"validateSelf"];
  }

  __int128 v86 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastValidateSelfOptIn]);

  if (v86)
  {
    __int128 v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastValidateSelfOptIn]);
    __int128 v88 = (void *)objc_claimAutoreleasedReturnValue([v87 description]);
    [v79 setObject:v88 forKeyedSubscript:@"validateSelfOptIn"];
  }

  __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastSignalIDS]);

  if (v89)
  {
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastSignalIDS]);
    __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([v90 description]);
    [v79 setObject:v91 forKeyedSubscript:@"signalIDS"];
  }

  __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchIDSSelf]);

  if (v92)
  {
    __int128 v93 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchIDSSelf]);
    __int128 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 description]);
    [v79 setObject:v94 forKeyedSubscript:@"fetchIDSSelf"];
  }

  __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchKTSelf]);

  if (v95)
  {
    __int128 v96 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastFetchKTSelf]);
    __int128 v97 = (void *)objc_claimAutoreleasedReturnValue([v96 description]);
    [v79 setObject:v97 forKeyedSubscript:@"fetchKTSelf"];
  }

  __int128 v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastRegistration]);

  if (v98)
  {
    __int128 v99 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastRegistration]);
    __int128 v100 = (void *)objc_claimAutoreleasedReturnValue([v99 description]);
    [v79 setObject:v100 forKeyedSubscript:@"lastRegistration"];
  }

  id v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastForceSyncKVS]);

  if (v101)
  {
    id v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastForceSyncKVS]);
    v103 = (void *)objc_claimAutoreleasedReturnValue([v102 description]);
    [v79 setObject:v103 forKeyedSubscript:@"forceSyncKVS"];
  }

  v104 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastCKFetch]);

  if (v104)
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastCKFetch]);
    v106 = (void *)objc_claimAutoreleasedReturnValue([v105 description]);
    [v79 setObject:v106 forKeyedSubscript:@"lastCKFetch"];
  }

  v107 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastPublicKeyRefresh]);

  if (v107)
  {
    uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastPublicKeyRefresh]);
    v109 = (void *)objc_claimAutoreleasedReturnValue([v108 description]);
    [v79 setObject:v109 forKeyedSubscript:@"publicKeyRefresh"];
  }

  v110 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastCheckIDSRegistration]);

  if (v110)
  {
    v111 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastCheckIDSRegistration]);
    v112 = (void *)objc_claimAutoreleasedReturnValue([v111 description]);
    [v79 setObject:v112 forKeyedSubscript:@"checkIDSRegistration"];
  }

  v113 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastDutyCycle]);

  if (v113)
  {
    v114 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastDutyCycle]);
    v115 = (void *)objc_claimAutoreleasedReturnValue([v114 description]);
    [v79 setObject:v115 forKeyedSubscript:@"lastDutyCycle"];
  }

  [v174 setObject:v79 forKeyedSubscript:@"ops"];
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v118 = (void *)objc_claimAutoreleasedReturnValue( +[KTFetchCloudStorageOperation lastCKFetchWithDeps:]( &OBJC_CLASS____TtC13transparencyd28KTFetchCloudStorageOperation,  "lastCKFetchWithDeps:",  v117));
  v119 = (void *)objc_claimAutoreleasedReturnValue([v118 description]);
  [v116 setObject:v119 forKeyedSubscript:@"ck-fetch"];

  v120 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastPush]);
  v121 = (void *)objc_claimAutoreleasedReturnValue([v120 description]);
  [v116 setObject:v121 forKeyedSubscript:@"push"];

  v122 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) lastSelfValidate]);
  v123 = (void *)objc_claimAutoreleasedReturnValue([v122 description]);
  [v116 setObject:v123 forKeyedSubscript:@"self-validate"];

  v124 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v125 = (void *)objc_claimAutoreleasedReturnValue( +[KTFetchIDSSelfOperation lastSelfIDSFetch:]( &OBJC_CLASS___KTFetchIDSSelfOperation,  "lastSelfIDSFetch:",  v124));
  v126 = (void *)objc_claimAutoreleasedReturnValue([v125 description]);
  [v116 setObject:v126 forKeyedSubscript:@"idsSelfFetch"];

  v127 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v128 = (void *)objc_claimAutoreleasedReturnValue([v127 logger]);
  v129 = (void *)objc_claimAutoreleasedReturnValue([v128 datePropertyForKey:off_1002DE268]);
  v130 = (void *)objc_claimAutoreleasedReturnValue([v129 description]);
  [v116 setObject:v130 forKeyedSubscript:@"idsRegPoke"];

  v131 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v132 = (void *)objc_claimAutoreleasedReturnValue([v131 logger]);
  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 datePropertyForKey:off_1002DE270]);
  v134 = (void *)objc_claimAutoreleasedReturnValue([v133 description]);
  [v116 setObject:v134 forKeyedSubscript:@"idsRegValid"];

  v135 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v136 = (void *)objc_claimAutoreleasedReturnValue([v135 logger]);
  v137 = (void *)objc_claimAutoreleasedReturnValue([v136 datePropertyForKey:off_1002DE278]);
  v138 = (void *)objc_claimAutoreleasedReturnValue([v137 description]);
  [v116 setObject:v138 forKeyedSubscript:@"idsRegEnroll"];

  v139 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v140 = (void *)objc_claimAutoreleasedReturnValue( +[KTBackgroundSystemValidationOperation lastDutyCycle:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "lastDutyCycle:",  v139));
  v141 = (void *)objc_claimAutoreleasedReturnValue([v140 description]);
  [v116 setObject:v141 forKeyedSubscript:@"bkValidate"];

  v142 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v143 = (void *)objc_claimAutoreleasedReturnValue( +[KTBackgroundSystemValidationOperation lastDutyCycleSuccess:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "lastDutyCycleSuccess:",  v142));
  v144 = (void *)objc_claimAutoreleasedReturnValue([v143 description]);
  [v116 setObject:v144 forKeyedSubscript:@"bkSuccess"];

  [v174 setObject:v116 forKeyedSubscript:@"lasts"];
  [v174 setObject:*(void *)(v178 + 40) forKeyedSubscript:@"pendingFlags"];
  v145 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) stateMachine]);
  v146 = (void *)objc_claimAutoreleasedReturnValue([v145 currentState]);
  [v174 setObject:v146 forKeyedSubscript:@"state"];

  v147 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) accountFirstSeenDate]);
  v148 = (void *)objc_claimAutoreleasedReturnValue([v147 description]);
  [v174 setObject:v148 forKeyedSubscript:@"accountFirstSeen"];

  v149 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencySettings cfPrefsJson](&OBJC_CLASS___TransparencySettings, "cfPrefsJson"));
  [v174 setObject:v149 forKeyedSubscript:@"cfprefs"];

  v150 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v151 = (void *)objc_claimAutoreleasedReturnValue( +[KTBackgroundSystemValidationOperation sysdiagnoseInfo:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "sysdiagnoseInfo:",  v150));
  [v174 setObject:v151 forKeyedSubscript:@"backgroundOp"];

  v152 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v153 = (void *)objc_claimAutoreleasedReturnValue([v152 lockStateTracker]);
  v154 = (void *)objc_claimAutoreleasedReturnValue([v153 description]);
  [v174 setObject:v154 forKeyedSubscript:@"lockstate"];

  v155 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v156 = (void *)objc_claimAutoreleasedReturnValue([v155 reachabilityTracker]);
  else {
    v157 = @"no-network";
  }
  [v174 setObject:v157 forKeyedSubscript:@"reachability"];

  v158 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) deps]);
  v159 = (void *)objc_claimAutoreleasedReturnValue([v158 cloudKitAccountTracker]);
  v160 = (void *)objc_claimAutoreleasedReturnValue([v159 description]);
  [v174 setObject:v160 forKeyedSubscript:@"cloudkitaccounttracker"];

  v161 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v178 + 32) ckFetchScheduler]);
  v162 = (void *)objc_claimAutoreleasedReturnValue([v161 description]);
  [v174 setObject:v162 forKeyedSubscript:@"fetcher"];

  dispatch_time_t v163 = dispatch_time(0LL, 1000000000LL);
  if (dispatch_semaphore_wait(dsema, v163))
  {
    [v174 setObject:@"timeout" forKeyedSubscript:@"ids-kt"];
    v164 = v172;
  }

  else
  {
    v164 = v172;
    [v174 setObject:v172 forKeyedSubscript:@"ids-kt"];
  }

  uint64_t v165 = *(void *)(v178 + 48);
  v166 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencySettings jsonDictFromPlistDict:]( &OBJC_CLASS___TransparencySettings,  "jsonDictFromPlistDict:",  v174));
  (*(void (**)(uint64_t, void *))(v165 + 16))(v165, v166);
}

void sub_100038F28(uint64_t a1, void *a2)
{
  dispatch_semaphore_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 ktApplicationToKTRegStatus]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100038FB8;
  v5[3] = &unk_100279808;
  uint64_t v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100038FB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v13 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v7 = *(void **)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 registeredKTData]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 idsKTData:v8]);
  [v13 setObject:v9 forKeyedSubscript:@"reg"];

  id v10 = *(void **)(a1 + 32);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 unregisteredKTData]);

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 idsKTData:v11]);
  [v13 setObject:v12 forKeyedSubscript:@"unreg"];

  [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v6];
}

void sub_1000390BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v28 = a3;
  id v8 = a4;
  id v9 = v8;
  if (v8)
  {
    uint64_t v35 = @"error";
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
    uint64_t v36 = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"fetch_error"];
  }

  __int128 v27 = v9;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id obj = v7;
  id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v31;
    do
    {
      __int128 v15 = 0LL;
      do
      {
        if (*(void *)v31 != v14) {
          objc_enumerationMutation(obj);
        }
        __int128 v16 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)v15);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 name]);
        [v17 setObject:v18 forKeyedSubscript:@"name"];

        id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 deviceID]);
        [v17 setObject:v19 forKeyedSubscript:@"deviceID"];

        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 pushToken]);
        [v17 setObject:v20 forKeyedSubscript:@"pushToken"];

        id v21 = (void *)objc_claimAutoreleasedReturnValue([v16 osVersion]);
        [v17 setObject:v21 forKeyedSubscript:@"osVersion"];

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v16 model]);
        [v17 setObject:v22 forKeyedSubscript:@"model"];

        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v16 build]);
        [v17 setObject:v23 forKeyedSubscript:@"build"];

        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v16 serial]);
        [v17 setObject:v24 forKeyedSubscript:@"serial"];

        __int128 v25 = *(void **)(a1 + 32);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v16 deviceID]);
        [v25 setObject:v17 forKeyedSubscript:v26];

        __int128 v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }

    while (v13);
  }
}

void sub_100039448(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  dispatch_semaphore_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stateMonitor]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 statusFilled]);
  +[TransparencySettings uiBlockingNetworkTimeout](&OBJC_CLASS___TransparencySettings, "uiBlockingNetworkTimeout");
  id v6 = [v4 wait:(uint64_t)(v5 * 1000000000.0)];

  if (v6)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_1002798A0);
    }
    id v7 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      id v8 = *(void **)(a1 + 32);
      id v9 = v7;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 deps]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stateMonitor]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 ktStatus]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 simpleStatus]);
      int v18 = 138412290;
      id v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "returning partially filled status: %@",  (uint8_t *)&v18,  0xCu);
    }
  }

  uint64_t v14 = *(void *)(a1 + 40);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stateMonitor]);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ktStatus]);
  (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v17, 0LL);
}

void sub_100039618(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003984C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003987C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100039964(uint64_t a1, void *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([a2 allValues]);
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 metricsTimeToCreate]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[SFAnalytics fuzzyNumber:](&OBJC_CLASS___SFAnalytics, "fuzzyNumber:", v8));
        id v10 = *(void **)(a1 + 32);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 application]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"KTReg%@",  v11));
        [v10 setObject:v9 forKeyedSubscript:v12];
      }

      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v4);
  }
}

void sub_100039DD0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 ktApplicationToKTRegStatus]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100039E5C;
  v6[3] = &unk_100279808;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100039E5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 registeredKTData]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 idsKTData:v8]);
  id v10 = *(void **)(a1 + 32);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"reg-%@", v7));
  [v10 setObject:v9 forKeyedSubscript:v11];

  id v12 = *(void **)(a1 + 40);
  id v16 = (id)objc_claimAutoreleasedReturnValue([v6 unregisteredKTData]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 idsKTData:v16]);
  __int128 v14 = *(void **)(a1 + 32);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"unreg-%@", v7));

  [v14 setObject:v13 forKeyedSubscript:v15];
}

LABEL_55:
      [v9 _onqueueRemoveFlag:@"CheckAccountSignatures"];
      __int128 v49 = objc_alloc(&OBJC_CLASS___KTEnrollmentRegistrationSignature);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      int v18 = -[KTEnrollmentRegistrationSignature initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:]( v49,  "initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:",  v27,  0LL,  v45,  v45,  self,  self);
      goto LABEL_17;
    }

    id v45 = @"WaitForCKKS";
    if ([v8 isEqual:@"WaitForCKKS"])
    {
      if (([v9 _onqueueContains:@"CKAccountChanged"] & 1) != 0
        || ([v9 _onqueueContains:@"OctagonTrustChanged"] & 1) != 0
        || [v9 _onqueueContains:@"ManateeViewChanged"])
      {
        id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"retry-ckks-check",  @"Initializing"));
        goto LABEL_9;
      }

      if (![v9 _onqueueContains:@"CheckAccountSignatures"])
      {
        if ([v9 _onqueueContains:@"CloudKitOutgoing"])
        {
          [v9 _onqueueRemoveFlag:@"CloudKitOutgoing"];
          v132 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          v129 = (void *)objc_claimAutoreleasedReturnValue([v132 cloudRecords]);
          v128 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 dataStore]);
          id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 controller]);
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v55 backgroundContext]);
          __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v129 updateCloudRecordsOperation:v128 context:v56]);

          v160[0] = _NSConcreteStackBlock;
          v160[1] = 3221225472LL;
          v160[2] = sub_10003C6A0;
          v160[3] = &unk_100279978;
          v160[4] = self;
          int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"processOutgoing",  @"WaitForCKKS",  @"WaitForCKKS",  v160));
          -[KTResultOperation addSuccessDependency:](v18, "addSuccessDependency:", v57);
          __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager operationQueue](self, "operationQueue"));
          [v58 addOperation:v57];

          goto LABEL_24;
        }

        goto LABEL_12;
      }

      goto LABEL_55;
    }

    if ([v8 isEqual:@"CheckKTAccountKeyChanged"])
    {
      [v9 _onqueueRemoveFlag:@"CheckKTAccountKeyChanged"];
      v158[0] = _NSConcreteStackBlock;
      v158[1] = 3221225472LL;
      v158[2] = sub_10003C744;
      v158[3] = &unk_100279A00;
      v158[4] = self;
      v159 = v9;
      int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"check-kt-account-key-changed",  @"Ready",  @"Ready",  v158));

      goto LABEL_24;
    }

    if ([v8 isEqual:@"ForceSyncKTAccountKey"])
    {
      [v9 _onqueueRemoveFlag:@"CheckKTAccountKey"];
      *(void *)buf = 0LL;
      objc_initWeak((id *)buf, self);
      id v50 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 octagonOperations]);
      v156[0] = _NSConcreteStackBlock;
      v156[1] = 3221225472LL;
      v156[2] = sub_10003CA74;
      v156[3] = &unk_100279A48;
      objc_copyWeak(&v157, (id *)buf);
      [v51 ckksRequestViewSync:@"Manatee" complete:v156];

      int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"force-sync-kt-account-key-done",  @"Ready"));
      objc_destroyWeak(&v157);
      objc_destroyWeak((id *)buf);
      goto LABEL_24;
    }

    if ([v8 isEqual:@"KTStateFixups"])
    {
      id v52 = objc_alloc(&OBJC_CLASS___KTFixupOperation);
      unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      uint64_t v44 = -[KTFixupOperation initWithDependenics:intendedState:errorState:]( v52,  "initWithDependenics:intendedState:errorState:",  v37,  @"EnsureAccountIdentity",  @"EnsureAccountIdentity");
      goto LABEL_31;
    }

    if ([v8 isEqual:@"RetryEnsureAccountIdentity"])
    {
      if (([v9 _onqueueContains:@"CKAccountChanged"] & 1) != 0
        || [v9 _onqueueContains:@"OctagonTrustChanged"])
      {
        id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"recheck-accountstate",  @"Initializing"));
        goto LABEL_9;
      }

      if (([v9 _onqueueContains:@"EnsureIdentity"] & 1) == 0
        && ![v9 _onqueueContains:@"ManateeViewChanged"])
      {
        goto LABEL_12;
      }

        swift_release(v112);
        swift_release(v107);
        swift_release(v80);

        swift_bridgeObjectRelease_n(v69, 2LL);
        goto LABEL_61;
      }

      if ((double)v72 / v59 < a8)
      {
        id v80 = v53;
        swift_bridgeObjectRetain_n(v69, 2LL);
        swift_bridgeObjectRetain(v80);
        __int128 v82 = (os_log_s *)Logger.logObject.getter(v81);
        __int128 v83 = static os_log_type_t.error.getter(v82);
        if (os_log_type_enabled(v82, v83))
        {
          __int128 v84 = swift_slowAlloc(22LL, -1LL);
          __int128 v85 = swift_slowAlloc(32LL, -1LL);
          v116 = v85;
          *(_DWORD *)__int128 v84 = 134218242;
          v115 = (double)v72 / v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v84 + 4, v84 + 12);
          *(_WORD *)(v84 + 12) = 2082;
          swift_bridgeObjectRetain(v69);
          v115 = COERCE_DOUBLE(sub_10007C22C(v70, v69, &v116));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v84 + 14, v84 + 22);
          swift_bridgeObjectRelease_n(v69, 3LL);
          __int128 v86 = "Present rate of %f is too low for element %{public}s. Returning aggregate result of false";
          __int128 v87 = v82;
          __int128 v88 = v83;
          __int128 v89 = (uint8_t *)v84;
          __int128 v90 = 22;
          goto LABEL_54;
        }

        goto LABEL_55;
      }
    }
  }

  swift_bridgeObjectRetain(v114);
  sub_100079A58(v109, v46);
  __int128 v47 = v113;
  if ((v48 & 1) != 0)
  {
    v107 = (char *)v21;
    __int128 v49 = swift_bridgeObjectRelease(v46);
    id v50 = v110;
    goto LABEL_18;
  }

  swift_bridgeObjectRetain(v46);
  __int128 v92 = (void *)Logger.logObject.getter(v91);
  __int128 v93 = static os_log_type_t.error.getter(v92);
  if (!os_log_type_enabled((os_log_t)v92, v93))
  {
    swift_release(v112);
    swift_release(v21);
    swift_bridgeObjectRelease_n(v46, 2LL);

    id v45 = v47;
LABEL_12:
    swift_release(v45);
    *__int128 v43 = 0;
    return;
  }

  __int128 v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  __int128 v95 = swift_slowAlloc(32LL, -1LL);
  v116 = v95;
  v107 = (char *)v21;
  *(_DWORD *)__int128 v94 = 136446210;
  swift_bridgeObjectRetain(v46);
  v115 = COERCE_DOUBLE(sub_10007C22C(v109, v46, &v116));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v94 + 4, v94 + 12);
  swift_bridgeObjectRelease_n(v46, 3LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v92,  v93,  "No entries for given element %{public}s. Returning aggregate result of false",  v94,  0xCu);
  swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v95, -1LL, -1LL);
  swift_slowDealloc(v94, -1LL, -1LL);
  swift_release(v112);
  swift_release(v107);

  __int128 v96 = v47;
LABEL_62:
  swift_release(v96);
  void *v105 = 0;
}

LABEL_157:
      id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"retry-ensure-identity",  @"EnsureAccountIdentity"));
      goto LABEL_9;
    }

    if ([v8 isEqual:@"EnsureAccountIdentity"])
    {
      [v9 _onqueueRemoveFlag:@"EnsureIdentity"];
      __int128 v59 = objc_alloc(&OBJC_CLASS___KTEnsureAccountIdentityOperation);
      __int128 v60 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager pcsOperation](self, "pcsOperation"));
      __int128 v62 = -[KTEnsureAccountIdentityOperation initWithDependencies:pcsOperation:]( v59,  "initWithDependencies:pcsOperation:",  v60,  v61);

      v154[0] = _NSConcreteStackBlock;
      v154[1] = 3221225472LL;
      v154[2] = sub_10003CC48;
      v154[3] = &unk_100279A00;
      v154[4] = self;
      v155 = v62;
      __int128 v63 = v62;
      int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"ensure-identity",  @"KTStateCheckCloudKitAccount",  @"Error",  v154));
      -[KTSetOptInStateOperation addNullableDependency:](v18, "addNullableDependency:", v63);
      __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager operationQueue](self, "operationQueue"));
      [v64 addOperation:v63];

      goto LABEL_24;
    }

    if ([v8 isEqual:@"SignalIDS"])
    {
      [v9 _onqueueRemoveFlag:@"RepairIDSFlag"];
      __int128 v65 = objc_alloc(&OBJC_CLASS___KTSignalIDSOperation);
      __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager selfValidationResult](self, "selfValidationResult"));
      __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager stateMachine](self, "stateMachine"));
      int v18 = -[KTSignalIDSOperation initWithDependencies:intendedState:errorState:selfValidationResult:stateMachine:]( v65,  "initWithDependencies:intendedState:errorState:selfValidationResult:stateMachine:",  v66,  @"InitialIDMSCheck",  @"Ready",  v67,  v68);

      -[KTSMManager setLastSignalIDS:](self, "setLastSignalIDS:", v18);
      goto LABEL_24;
    }

    if ([v8 isEqual:@"FetchConfigBag"])
    {
      [v9 _onqueueRemoveFlag:@"ConfigBagFetch"];
      __int128 v69 = objc_alloc(&OBJC_CLASS___KTConfigBagFetchOperation);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v30 = -[KTConfigBagFetchOperation initWithDependencies:intendedState:errorState:triggerInterface:]( v69,  "initWithDependencies:intendedState:errorState:triggerInterface:",  v29,  @"Ready",  @"Ready",  self);
LABEL_22:
      int v18 = (KTSetOptInStateOperation *)v30;
LABEL_23:

      goto LABEL_24;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      [v9 _onqueueRemoveFlag:@"FetchSelf"];
      uint64_t v70 = objc_alloc(&OBJC_CLASS___KTFetchIDSSelfOperation);
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      uint64_t v72 = kKTApplicationIdentifierIDS;
      __int16 v73 = off_10028AC28;
LABEL_79:
      int v18 = -[KTFetchIDSSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v70,  "initWithApplication:dependencies:intendedState:errorState:",  v72,  v71,  *v73,  @"Ready");

      -[KTSMManager setLastFetchIDSSelf:](self, "setLastFetchIDSSelf:", v18);
      goto LABEL_24;
    }

    if ([v8 isEqual:@"FetchKTSelf"])
    {
LABEL_81:
      id v74 = objc_alloc(&OBJC_CLASS___KTFetchKTSelfOperation);
      __int16 v75 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      int v18 = -[KTFetchKTSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v74,  "initWithApplication:dependencies:intendedState:errorState:",  kKTApplicationIdentifierIDS,  v75,  @"Ready",  @"Ready");

      -[KTSMManager setLastFetchKTSelf:](self, "setLastFetchKTSelf:", v18);
      goto LABEL_24;
    }

    if ([v8 isEqual:@"ValidateFetchIDSSelf"])
    {
      [v9 _onqueueRemoveFlag:@"ValidateSelf"];
      [v9 _onqueueRemoveFlag:@"FetchSelf"];
      uint64_t v70 = objc_alloc(&OBJC_CLASS___KTFetchIDSSelfOperation);
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      uint64_t v72 = kKTApplicationIdentifierIDS;
      __int16 v73 = off_10028AC48;
      goto LABEL_79;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      [v9 _onqueueRemoveFlag:@"FetchIDMS"];
      id v76 = objc_alloc(&OBJC_CLASS___KTFetchIDMSOperation);
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      v78 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager specificUser](self, "specificUser"));
      int v18 = -[KTFetchIDMSOperation initWithDependencies:specificUser:intendedState:errorState:]( v76,  "initWithDependencies:specificUser:intendedState:errorState:",  v77,  v78,  @"Ready",  @"Ready");

      -[KTSMManager setLastFetchIDMS:](self, "setLastFetchIDMS:", v18);
      goto LABEL_24;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      [v9 _onqueueRemoveFlag:@"CheckIDSRegistration"];
      v153[0] = _NSConcreteStackBlock;
      v153[1] = 3221225472LL;
      v153[2] = sub_10003D300;
      v153[3] = &unk_100279B30;
      v153[4] = self;
      id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"check-ids-registration",  @"Ready",  @"Ready",  v153));
      goto LABEL_9;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      id v79 = objc_alloc(&OBJC_CLASS___KTCheckInitialCache);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      id v80 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager stateMachine](self, "stateMachine"));
      __int128 v81 = -[KTCheckInitialCache initWithDependencies:intendedState:errorState:stateMachine:]( v79,  "initWithDependencies:intendedState:errorState:stateMachine:",  v29,  @"ZoneSetup",  @"ZoneSetup",  v80);
      goto LABEL_90;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      [v9 _onqueueRemoveFlag:@"CloudKitZoneRecreate"];
      *(void *)buf = 0LL;
      objc_initWeak((id *)buf, self);
      v151[0] = _NSConcreteStackBlock;
      v151[1] = 3221225472LL;
      v151[2] = sub_10003D5F4;
      v151[3] = &unk_100279BC0;
      objc_copyWeak(&v152, (id *)buf);
      int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"zone-setup",  @"ProcessIncomingInitial",  @"InitialSignRegistrationData",  v151));
      objc_destroyWeak(&v152);
      objc_destroyWeak((id *)buf);
      goto LABEL_24;
    }

    if ([v8 isEqual:@"ProcessIncomingInitial"])
    {
      v133 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      v130 = (void *)objc_claimAutoreleasedReturnValue([v133 fetchCloudStorage]);
      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v83 = off_1002DE308;
      __int128 v84 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v85 = (void *)objc_claimAutoreleasedReturnValue([v84 dataStore]);
      __int128 v86 = (void *)objc_claimAutoreleasedReturnValue([v85 controller]);
      __int128 v87 = (void *)objc_claimAutoreleasedReturnValue([v86 backgroundContext]);
      __int128 v88 = (void *)objc_claimAutoreleasedReturnValue( [v130 cloudFetchOperationWithDeps:v82 initialFetch:0 userInteractive:1 reason:v83 context:v87]);

      v148[0] = _NSConcreteStackBlock;
      v148[1] = 3221225472LL;
      v148[2] = sub_10003DBE0;
      v148[3] = &unk_100279A00;
      v149 = v88;
      v150 = self;
      __int128 v89 = v88;
      int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"initial-fetch",  @"InitialSignRegistrationData",  @"InitialSignRegistrationData",  v148));
      -[KTSetOptInStateOperation addNullableDependency:](v18, "addNullableDependency:", v89);
      __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager operationQueue](self, "operationQueue"));
      [v90 addOperation:v89];

      goto LABEL_24;
    }

    if (objc_msgSend(v8, "isEqual:"))
    {
      [v9 _onqueueRemoveFlag:@"CloudKitIncoming"];
      v147[0] = _NSConcreteStackBlock;
      v147[1] = 3221225472LL;
      v147[2] = sub_10003DC88;
      v147[3] = &unk_100279B30;
      v147[4] = self;
      id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"process-incoming",  @"Ready",  @"Ready",  v147));
      goto LABEL_9;
    }

    if ([v8 isEqual:@"InitialSignRegistrationData"])
    {
      [v9 _onqueueRemoveFlag:@"CheckAccountSignatures"];
      __int128 v91 = objc_alloc(&OBJC_CLASS___KTEnrollmentRegistrationSignature);
      __int128 v92 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v93 = v91;
      __int128 v94 = v92;
      __int128 v95 = 0LL;
    }

    else
    {
      if (!objc_msgSend(v8, "isEqual:"))
      {
        if ([v8 isEqual:@"ForceSyncKVS"])
        {
          __int128 v98 = objc_alloc(&OBJC_CLASS___KTForceSyncKVSOperation);
          __int128 v99 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          int v18 = -[KTForceSyncKVSOperation initWithDependencies:timeout:intendedState:errorState:]( v98,  "initWithDependencies:timeout:intendedState:errorState:",  v99,  30000000000LL,  @"Ready",  @"Ready");

          -[KTSMManager setLastForceSyncKVS:](self, "setLastForceSyncKVS:", v18);
          goto LABEL_24;
        }

        if (objc_msgSend(v8, "isEqual:"))
        {
          [v9 _onqueueRemoveFlag:@"ValidateSelf"];
          [v9 _onqueueRemoveFlag:@"FetchSelf"];
          [v9 _onqueueRemoveFlag:@"ValidateSelfOptIn"];
          __int128 v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          -[KTSMManager setLastSelfValidate:](self, "setLastSelfValidate:", v100);

          *(void *)buf = 0LL;
          objc_initWeak((id *)buf, self);
          v145[0] = _NSConcreteStackBlock;
          v145[1] = 3221225472LL;
          v145[2] = sub_10003DCA8;
          v145[3] = &unk_100279BC0;
          objc_copyWeak(&v146, (id *)buf);
          int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"validate-self",  @"Ready",  @"Ready",  v145));
          objc_destroyWeak(&v146);
          objc_destroyWeak((id *)buf);
          goto LABEL_24;
        }

        if (objc_msgSend(v8, "isEqual:"))
        {
          [v9 _onqueueRemoveFlag:@"ChangeOptInState"];
          id v101 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager optInStates](self, "optInStates"));
          id v102 = (void *)objc_claimAutoreleasedReturnValue([v101 targetOptInStates]);
          v103 = [v102 count];

          if (!v103)
          {
            id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"Done with all opt-in changes",  @"Ready"));
            goto LABEL_9;
          }

          v104 = objc_alloc(&OBJC_CLASS___KTChangeOptInStateOperation);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          id v80 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager optInStates](self, "optInStates"));
          v105 = @"SetOptIO";
          v106 = v104;
          v107 = v29;
        }

        else
        {
          if (!objc_msgSend(v8, "isEqual:"))
          {
            if ([v8 isEqual:@"ValidateSelfOptIn"])
            {
              *(void *)buf = 0LL;
              objc_initWeak((id *)buf, self);
              v143[0] = _NSConcreteStackBlock;
              v143[1] = 3221225472LL;
              v143[2] = sub_10003E598;
              v143[3] = &unk_100279BC0;
              objc_copyWeak(&v144, (id *)buf);
              int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"validate-self-opt-in",  @"SetOptIO",  @"Ready",  v143));
              objc_destroyWeak(&v144);
              objc_destroyWeak((id *)buf);
              goto LABEL_24;
            }

            if (objc_msgSend(v8, "isEqual:"))
            {
              [v9 _onqueueRemoveFlag:@"CloudKitOutgoing"];
              v134 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              v131 = (void *)objc_claimAutoreleasedReturnValue([v134 cloudRecords]);
              v109 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              v110 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              v111 = (void *)objc_claimAutoreleasedReturnValue([v110 dataStore]);
              v112 = (void *)objc_claimAutoreleasedReturnValue([v111 controller]);
              v113 = (void *)objc_claimAutoreleasedReturnValue([v112 backgroundContext]);
              v114 = (void *)objc_claimAutoreleasedReturnValue([v131 updateCloudRecordsOperation:v109 context:v113]);

              v140[0] = _NSConcreteStackBlock;
              v140[1] = 3221225472LL;
              v140[2] = sub_10003ED74;
              v140[3] = &unk_100279A00;
              v141 = v114;
              v142 = self;
              v115 = v114;
              int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"processOutgoing",  @"Ready",  @"Ready",  v140));
              -[KTGroupOperation addDependency:](v18, "addDependency:", v115);
              v116 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager operationQueue](self, "operationQueue"));
              [v116 addOperation:v115];

              goto LABEL_24;
            }

            if (objc_msgSend(v8, "isEqual:"))
            {
              [v9 _onqueueRemoveFlag:@"FetchPublicKeys"];
              v117 = objc_alloc(&OBJC_CLASS___KTPublicKeyStoreRefresh);
              id v12 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              id v13 = @"Ready";
              __int128 v15 = v117;
              id v16 = v12;
              __int128 v17 = 0LL;
              __int128 v14 = @"Ready";
              goto LABEL_3;
            }

            if (objc_msgSend(v8, "isEqual:"))
            {
              [v9 _onqueueRemoveFlag:@"AccountChanged"];
              id v19 = objc_claimAutoreleasedReturnValue(-[KTSMManager recheckAccount](self, "recheckAccount"));
              goto LABEL_9;
            }

            if ([v8 isEqual:@"EnvironmentSwitch"])
            {
              *(void *)buf = 0LL;
              objc_initWeak((id *)buf, self);
              v138[0] = _NSConcreteStackBlock;
              v138[1] = 3221225472LL;
              v138[2] = sub_10003EE30;
              v138[3] = &unk_100279BC0;
              objc_copyWeak(&v139, (id *)buf);
              int v18 = (KTSetOptInStateOperation *)objc_claimAutoreleasedReturnValue( +[KTStateTransitionGroupOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionGroupOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"transparency-environment-switch",  @"ResetLocalState",  @"ResetLocalState",  v138));
              objc_destroyWeak(&v139);
              objc_destroyWeak((id *)buf);
              goto LABEL_24;
            }

            if ([v8 isEqual:@"ResetLocalState"])
            {
              v137[0] = _NSConcreteStackBlock;
              v137[1] = 3221225472LL;
              v137[2] = sub_10003F110;
              v137[3] = &unk_100279978;
              v137[4] = self;
              id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"transparency-reset-local",  @"Initializing",  @"Error",  v137));
              goto LABEL_9;
            }

            if ([v8 isEqual:@"ResetLocalCloudState"])
            {
              v136[0] = _NSConcreteStackBlock;
              v136[1] = 3221225472LL;
              v136[2] = sub_10003F488;
              v136[3] = &unk_100279978;
              v136[4] = self;
              id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"transparency-reset-local-cloud-state",  @"Initializing",  @"Initializing",  v136));
              goto LABEL_9;
            }

            if ([v8 isEqual:@"GetStatusInitial"])
            {
              [v9 _onqueueRemoveFlag:@"StatusUpdate"];
              v118 = objc_alloc(&OBJC_CLASS___KTFillStatusOperation);
              unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              id v38 = kKTApplicationIdentifierIDS;
              __int128 v39 = v118;
              __int128 v40 = 1LL;
              id v41 = v37;
              __int128 v42 = @"InitialIDMSCheck";
            }

            else
            {
              if (!objc_msgSend(v8, "isEqual:"))
              {
                if (objc_msgSend(v8, "isEqual:"))
                {
                  [v9 _onqueueRemoveFlag:@"PokeIDS"];
                  v135[0] = _NSConcreteStackBlock;
                  v135[1] = 3221225472LL;
                  v135[2] = sub_10003F538;
                  v135[3] = &unk_100279978;
                  v135[4] = self;
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"poke-ids",  @"Ready",  @"Ready",  v135));
                  goto LABEL_9;
                }

                v125 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager stateMachine](self, "stateMachine"));
                [v125 _onqueueCancelPendingFlag:@"CheckServerOptIn"];

                v126 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager readyComplete](self, "readyComplete"));
                [v126 fulfill];

                v127 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
                v124 = (void *)objc_claimAutoreleasedReturnValue([v127 stateMonitor]);
                [v124 setAccountStatus:4];

                if ([v9 _onqueueContains:@"AccountChanged"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"account-probably-changed",  @"RecheckAccount"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"CheckAccountSignatures"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"make-signatures",  @"SignRegistrationData"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"OctagonTrustChanged"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"recheck-after-octagon-change",  @"Initializing"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"RepairIDSFlag"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"repair-ids",  @"SignalIDS"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"ConfigBagFetch"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"fetch-config-bag",  @"FetchConfigBag"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"FetchSelf"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"fetch-ids-self",  @"FetchIDSSelf"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"FetchIDMS"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"fetch-idms",  @"FetchIDMS"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"FetchPublicKeys"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"public-keys-fetch",  @"PublicKeysFetch"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"CheckIDSRegistration"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"check-ids-registration",  @"CheckIDSRegistration"));
                  goto LABEL_9;
                }

                if ([v9 _onqueueContains:@"ChangeOptInState"])
                {
                  id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"process-opt-in-out",  @"ChangeOptIn"));
                  goto LABEL_9;
                }

                if (![v9 _onqueueContains:@"EnsureIdentity"])
                {
                  if ([v9 _onqueueContains:@"CloudKitZoneRecreate"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"zone-needs-resetup",  @"ZoneSetup"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"CloudKitOutgoing"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"upload-to-ck",  @"ProcessOutgoing"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"CloudKitIncoming"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"fetch-from-ck",  @"ProcessIncoming"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"ValidateSelf"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"validate-self",  @"ValidateSelf"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"CheckKTAccountKey"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"check-kt-account-key",  @"ForceSyncKTAccountKey"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"StatusUpdate"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"fill-status",  @"GetStatus"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"CheckKTAccountKeyChanged"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"check-account-key-changed",  @"CheckKTAccountKeyChanged"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"IDSStatusChanged"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"check-ids-account",  @"Initializing"));
                    goto LABEL_9;
                  }

                  if ([v9 _onqueueContains:@"PokeIDS"])
                  {
                    id v19 = objc_claimAutoreleasedReturnValue( +[KTStateTransitionOperation named:entering:]( &OBJC_CLASS___KTStateTransitionOperation,  "named:entering:",  @"poke-ids",  @"PokeIDS"));
                    goto LABEL_9;
                  }

                  v120 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager launch](self, "launch"));
                  [v120 launch];

                  v121 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
                  v122 = (void *)objc_claimAutoreleasedReturnValue([v121 logger]);
                  v123 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager launch](self, "launch"));
                  [v122 noteLaunchSequence:v123];

                  goto LABEL_12;
                }

                goto LABEL_157;
              }

              [v9 _onqueueRemoveFlag:@"StatusUpdate"];
              v119 = objc_alloc(&OBJC_CLASS___KTFillStatusOperation);
              unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
              id v38 = kKTApplicationIdentifierIDS;
              __int128 v42 = @"Ready";
              __int128 v39 = v119;
              __int128 v40 = 0LL;
              id v41 = v37;
            }

            __int128 v43 = v42;
LABEL_30:
            uint64_t v44 = -[KTFillStatusOperation initWithApplication:initialFill:dependencies:intendedState:errorState:]( v39,  "initWithApplication:initialFill:dependencies:intendedState:errorState:",  v38,  v40,  v41,  v42,  v43);
LABEL_31:
            int v18 = (KTSetOptInStateOperation *)v44;

            goto LABEL_24;
          }

          uint64_t v108 = objc_alloc(&OBJC_CLASS___KTSetOptInStateOperation);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
          id v80 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager optInStates](self, "optInStates"));
          v105 = @"Ready";
          v106 = v108;
          v107 = v29;
        }

        __int128 v81 = (KTCheckInitialCache *)[v106 initWithDependenics:v107 intendedState:v105 errorState:@"Ready" optinStates:v80];
LABEL_90:
        int v18 = (KTSetOptInStateOperation *)v81;

        goto LABEL_23;
      }

      __int128 v96 = [v9 _onqueueContains:@"CheckAccountSignatures"];
      [v9 _onqueueRemoveFlag:@"CheckAccountSignatures"];
      __int128 v97 = objc_alloc(&OBJC_CLASS___KTEnrollmentRegistrationSignature);
      __int128 v92 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
      __int128 v93 = v97;
      __int128 v94 = v92;
      __int128 v95 = v96;
    }

    int v18 = -[KTEnrollmentRegistrationSignature initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:]( v93,  "initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:",  v94,  v95,  @"Ready",  @"Ready",  self,  self);

    -[KTSMManager setLastRegistration:](self, "setLastRegistration:", v18);
    goto LABEL_24;
  }

  id v11 = objc_alloc(&OBJC_CLASS___KTPublicKeyStoreRefresh);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[KTSMManager deps](self, "deps"));
  id v13 = @"Initializing";
  __int128 v14 = @"PublicKeysWait";
  __int128 v15 = v11;
  id v16 = v12;
  __int128 v17 = 1LL;
LABEL_3:
  int v18 = -[KTPublicKeyStoreRefresh initWithDependencies:initialFetch:intendedState:errorState:]( v15,  "initWithDependencies:initialFetch:intendedState:errorState:",  v16,  v17,  v13,  v14);

  -[KTSMManager setLastPublicKeyRefresh:](self, "setLastPublicKeyRefresh:", v18);
LABEL_24:

  return v18;
}

void sub_10003C5D4(_Unwind_Exception *a1)
{
}

void sub_10003C670(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003C6A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"PokeIDS",  2LL,  0.0);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
  [v4 handlePendingFlag:v6];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
  [v3 setNextState:v5];
}

void sub_10003C744(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) checkAccountKeyChanged];
  if (v2 == 1)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_1002799D8);
    }
    id v12 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "PCS KT identity no change, all is good",  (uint8_t *)&v20,  2u);
    }
  }

  else
  {
    if (v2 == 2)
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_1002799B8);
      }
      id v13 = (void *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v14 = *(void **)(a1 + 32);
        __int128 v15 = v13;
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 deps]);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stateMonitor]);
        int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 ktStatus]);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 accountKey]);
        int v20 = 138412290;
        id v21 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PCS KT Identity no longer exists, ensure identity: %@",  (uint8_t *)&v20,  0xCu);
      }

      id v10 = *(void **)(a1 + 40);
      id v11 = off_10028AD98;
    }

    else
    {
      if (v2 != 3) {
        return;
      }
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279998);
      }
      id v3 = (void *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = *(void **)(a1 + 32);
        uint64_t v5 = v3;
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 deps]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 stateMonitor]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 ktStatus]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountKey]);
        int v20 = 138412290;
        id v21 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PCS KT Identity changed, asking for new signatures: %@",  (uint8_t *)&v20,  0xCu);
      }

      id v10 = *(void **)(a1 + 40);
      id v11 = off_10028AD68;
    }

    [v10 setFlag:*v11];
  }

void sub_10003C9E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003CA14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003CA44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003CA74(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained checkKTAccountKeyScheduler]);
    if (a3 == 0.0)
    {
      if (!v5)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 checkKTSignatureScheduler]);
        [v12 trigger];

        goto LABEL_11;
      }

      [v7 inspectErrorForRetryAfter:v5 trigger:v8];
    }

    else
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279A20);
      }
      id v9 = (void *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = v9;
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);
        int v13 = 138412802;
        __int128 v14 = v11;
        __int16 v15 = 2048;
        double v16 = a3;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CKKS sync operation asked to retry later, scheduling %@ delay for %.1f seconds: %@",  (uint8_t *)&v13,  0x20u);
      }

      [v8 waitUntil:1000000000 * (unint64_t)a3];
    }

    [v8 trigger];
LABEL_11:
  }
}

void sub_10003CC18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003CC48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lockStateTracker]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  unsigned int v7 = [v5 isLockedError:v6];

  if (v7)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279A68);
    }
    uint64_t v8 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v46) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Device is locked, pending ensure identity on unlock",  (uint8_t *)&v46,  2u);
    }

    id v9 = objc_alloc(&OBJC_CLASS___KTPendingFlag);
    uint64_t v10 = 3LL;
LABEL_13:
    __int16 v17 = -[KTPendingFlag initWithFlag:conditions:](v9, "initWithFlag:conditions:", @"EnsureIdentity", v10);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 flagHandler]);
    [v19 handlePendingFlag:v17];

    int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 stateMonitor]);
    [v21 setAccountStatus:3];

    [v3 setNextState:@"RetryEnsureAccountIdentity"];
    goto LABEL_14;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 reachabilityTracker]);
  __int128 v14 = (void *)objc_opt_class(v12, v13);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  LODWORD(v14) = [v14 isNetworkError:v15];

  if ((_DWORD)v14)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279A88);
    }
    double v16 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v46) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Device have network issues, pending ensure identity on network",  (uint8_t *)&v46,  2u);
    }

    id v9 = objc_alloc(&OBJC_CLASS___KTPendingFlag);
    uint64_t v10 = 2LL;
    goto LABEL_13;
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);

  if (v22)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279AA8);
    }
    __int128 v23 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      __int128 v24 = *(void **)(a1 + 40);
      __int128 v25 = v23;
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v24 error]);
      int v46 = 138412290;
      __int128 v47 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Device have issues %@, triggering retry",  (uint8_t *)&v46,  0xCu);
    }

    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) retryEnsureIdentity]);
    [v27 trigger];

    id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 stateMonitor]);
    [v29 setAccountStatus:3];

    [v3 setNextState:@"RetryEnsureAccountIdentity"];
    goto LABEL_14;
  }

  if ([*(id *)(a1 + 40) identityCreated])
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279AC8);
    }
    __int128 v30 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v31 = *(void **)(a1 + 40);
      __int128 v32 = v30;
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 identity]);
      int v46 = 138412290;
      __int128 v47 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Identity created, make sure we check signatures: %@",  (uint8_t *)&v46,  0xCu);
    }

    id v34 = -[KTPendingFlag initWithFlag:conditions:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:",  @"CheckAccountSignatures",  0LL);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 flagHandler]);
    [v36 handlePendingFlag:v34];
  }

  else
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279AE8);
    }
    unsigned int v37 = (void *)qword_1002E64C8;
    if (!os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO)) {
      goto LABEL_32;
    }
    id v38 = *(void **)(a1 + 40);
    id v34 = v37;
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v38 identity]);
    int v46 = 138412290;
    __int128 v47 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  OS_LOG_TYPE_INFO,  "Have identity, all good: %@",  (uint8_t *)&v46,  0xCu);
  }

LABEL_32:
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);

  if (v39)
  {
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 stateMonitor]);
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
    [v41 setKTAccountKey:v42];
  }

  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 stateMonitor]);
  [v44 setAccountStatus:4];

  id v45 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
  [v3 setNextState:v45];

LABEL_14:
}

void sub_10003D210(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D240(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D270(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D2A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D2D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D300(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___KTCheckIDSRegistrationOperation);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v6 = kKTApplicationIdentifierIDS;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pcsOperation]);
  uint64_t v8 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:]( v4,  "initWithDependencies:application:pcs:idsRegistrationInterface:",  v5,  v6,  v7,  *(void *)(a1 + 32));

  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  __int16 v15 = sub_10003D46C;
  double v16 = &unk_1002777A0;
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = v8;
  id v9 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[KTResultOperation named:withBlock:]( &OBJC_CLASS___KTResultOperation,  "named:withBlock:",  @"ids-reg-finish",  &v13));
  objc_msgSend(v10, "addNullableDependency:", v9, v13, v14, v15, v16, v17);
  [v3 dependOnBeforeGroupFinished:v10];

  [*(id *)(a1 + 32) setLastCheckIDSRegistration:v9];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v11 addOperation:v9];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  [v12 addOperation:v10];
}

void sub_10003D46C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 logger]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [v3 logResultForEvent:@"CheckIDSRegistration" hardFailure:0 result:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v5)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279B08);
    }
    uint64_t v6 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v7 = *(void **)(a1 + 40);
      uint64_t v8 = v6;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
      int v10 = 138543362;
      id v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "CheckIDSRegistrationOperation failed, trying again: %{public}@",  (uint8_t *)&v10,  0xCu);
    }
  }

void sub_10003D5C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D5F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 staticKeyStore]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dew]);
  [v10 coreDataInitialDelaySync];
  objc_msgSend(v7, "launchCloudSyncing:initialDelay:", v8);

  id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 ckdatabase]);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 cloudRecords]);

    if (v15)
    {
      double v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 cloudRecords]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 cloudKitZones]);

      if ([v18 count])
      {
        id v34 = objc_alloc(&OBJC_CLASS____TtC13transparencyd11KTZoneSetup);
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v35 ckdatabase]);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v36 = v3;
        int v20 = (void *)objc_claimAutoreleasedReturnValue([v19 logger]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 dataStore]);
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 controller]);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 backgroundContext]);
        __int128 v25 = -[KTZoneSetup initWithCkdatabase:analytics:context:zoneCreate:]( v34,  "initWithCkdatabase:analytics:context:zoneCreate:",  v33,  v20,  v24,  v18);

        id v3 = v36;
      }

      else
      {
        __int128 v25 = 0LL;
      }

      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      void v37[2] = sub_10003D9F0;
      v37[3] = &unk_100279B98;
      objc_copyWeak(&v41, v4);
      __int128 v27 = v25;
      id v38 = v27;
      id v28 = v3;
      id v39 = v28;
      id v29 = v18;
      id v40 = v29;
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v37));
      [v28 dependOnBeforeGroupFinished:v30];
      [v30 addNullableDependency:v27];
      if (v27)
      {
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
        [v31 addOperation:v27];
      }

      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
      [v32 addOperation:v30];

      objc_destroyWeak(&v41);
      goto LABEL_15;
    }
  }

  else
  {
  }

  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279B50);
  }
  __int128 v26 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "zone setup have no cloudRecords", buf, 2u);
  }

  [v3 setNextState:@"InitialSignRegistrationData"];
LABEL_15:
}

void sub_10003D9A8(_Unwind_Exception *a1)
{
}

void sub_10003D9C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003D9F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([*(id *)(a1 + 32) initialFetch])
  {
    [*(id *)(a1 + 40) setNextState:@"ProcessIncomingInitial"];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained launch]);
    [v3 setFirstLaunch:1];
  }

  else
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279B70);
    }
    id v4 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(void **)(a1 + 48);
      uint64_t v6 = v4;
      v12[0] = 67109120;
      v12[1] = [v5 count];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "already done initial fetch: %d",  (uint8_t *)v12,  8u);
    }

    [*(id *)(a1 + 40) setNextState:@"InitialSignRegistrationData"];
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudRecords]);
  unsigned int v9 = [v8 havePendingRecords];

  if (v9)
  {
    int v10 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"CloudKitOutgoing",  2LL,  5.0);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
    [v11 handlePendingFlag:v10];
  }
}

void sub_10003DBB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003DBE0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckFetchScheduler]);
    [v4 inspectErrorForRetryAfter:v5 trigger:v6];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 intendedState]);
    [v7 setNextState:v5];
  }
}

void sub_10003DC88(uint64_t a1)
{
}

void sub_10003DCA8(uint64_t a1, void *a2)
{
  id v50 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = kKTApplicationIdentifierIDS;
  id v5 = objc_alloc(&OBJC_CLASS___KTEnsureAccountIdentityOperation);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pcsOperation]);
  uint64_t v8 = -[KTEnsureAccountIdentityOperation initWithDependencies:pcsOperation:]( v5,  "initWithDependencies:pcsOperation:",  v6,  v7);

  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472LL;
  v59[2] = sub_10003E24C;
  v59[3] = &unk_1002777A0;
  unsigned int v9 = v8;
  __int128 v60 = v9;
  id v61 = WeakRetained;
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v59));
  unsigned int v48 = v9;
  [v10 addNullableDependency:v9];
  id v11 = objc_alloc(&OBJC_CLASS___KTEnrollmentRegistrationSignature);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v13 = -[KTEnrollmentRegistrationSignature initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:]( v11,  "initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:",  v12,  0LL,  @"Ready",  @"Ready",  WeakRetained,  WeakRetained);

  uint64_t v14 = v13;
  id v52 = v10;
  -[KTEnrollmentRegistrationSignature addNullableDependency:](v13, "addNullableDependency:", v10);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", off_1002DE310));
  double v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained requestSuccessfulCKFetchForManyReasons:v15]);

  if (v16)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 dew]);
    [v18 selfValidateCloudKitTimeout];
    double v20 = v19;

    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[KTResultOperation operationWithBlock:]( &OBJC_CLASS___KTResultOperation,  "operationWithBlock:",  &stru_100279BE0));
    id v22 = [v21 timeout:(unint64_t)(v20 * 1000000000.0)];
    [v21 addNullableDependency:v16];
  }

  else
  {
    id v21 = 0LL;
  }

  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_10003E2B4;
  v56[3] = &unk_1002777A0;
  id v23 = v21;
  id v57 = v23;
  id v58 = v16;
  id v49 = v16;
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v56));
  __int128 v25 = v24;
  if (v24) {
    [v24 addNullableDependency:v23];
  }
  __int128 v26 = objc_alloc(&OBJC_CLASS___KTFetchIDSSelfOperation);
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v28 = v4;
  id v29 = -[KTFetchIDSSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v26,  "initWithApplication:dependencies:intendedState:errorState:",  v4,  v27,  @"Ready",  @"Ready");

  -[KTFetchIDSSelfOperation addNullableDependency:](v29, "addNullableDependency:", v14);
  -[KTFetchIDSSelfOperation addNullableDependency:](v29, "addNullableDependency:", v23);
  __int128 v30 = objc_alloc(&OBJC_CLASS___KTFetchKTSelfOperation);
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  __int128 v47 = v28;
  __int128 v32 = -[KTFetchKTSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v30,  "initWithApplication:dependencies:intendedState:errorState:",  v28,  v31,  @"Ready",  @"Ready");

  -[KTFetchKTSelfOperation addNullableDependency:](v32, "addNullableDependency:", v14);
  -[KTFetchKTSelfOperation addNullableDependency:](v32, "addNullableDependency:", v23);
  -[KTResultOperation addSuccessDependency:](v32, "addSuccessDependency:", v29);
  __int128 v33 = objc_alloc(&OBJC_CLASS___KTValidateSelfOperation);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v35 = -[KTValidateSelfOperation initWithApplication:dependencies:isOptInSelfValidation:]( v33,  "initWithApplication:dependencies:isOptInSelfValidation:",  v28,  v34,  0LL);

  -[KTValidateSelfOperation addNullableDependency:](v35, "addNullableDependency:", v23);
  -[KTResultOperation addSuccessDependency:](v35, "addSuccessDependency:", v32);
  -[KTResultOperation addSuccessDependency:](v35, "addSuccessDependency:", v29);
  [WeakRetained setLastValidateSelf:v35];
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_10003E534;
  v53[3] = &unk_1002777A0;
  id v54 = v50;
  id v55 = v35;
  id v36 = v35;
  id v51 = v50;
  unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation named:withBlock:]( &OBJC_CLASS___NSBlockOperation,  "named:withBlock:",  @"validate-self-finish",  v53));
  [v37 addNullableDependency:v36];
  [v51 dependOnBeforeGroupFinished:v37];
  id v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v38 addOperation:v23];

  id v39 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v39 addOperation:v25];

  id v40 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v40 addOperation:v48];

  id v41 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v41 addOperation:v52];

  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v42 addOperation:v14];

  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v43 addOperation:v32];

  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v44 addOperation:v29];

  id v45 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v45 addOperation:v36];

  int v46 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v46 addOperation:v37];
}

void sub_10003E24C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) retryEnsureIdentity]);
    [v3 trigger];
  }

void sub_10003E2B4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279C00);
    }
    uint64_t v2 = qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      id v3 = *(void **)(a1 + 40);
      int v14 = 138543362;
      __int16 v15 = v3;
      id v4 = "CloudKit fetch timed out: %{public}@";
      id v5 = (os_log_s *)v2;
      os_log_type_t v6 = OS_LOG_TYPE_ERROR;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v14, 0xCu);
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);

    if (v7)
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279C20);
      }
      uint64_t v8 = (void *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v9 = *(void **)(a1 + 40);
        int v10 = v8;
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 error]);
        int v14 = 138543362;
        __int16 v15 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "CloudKit fetch failed: %{public}@",  (uint8_t *)&v14,  0xCu);
      }
    }

    else
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279C40);
      }
      uint64_t v12 = qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void **)(a1 + 40);
        int v14 = 138412290;
        __int16 v15 = v13;
        id v4 = "CloudKit fetch complete: %@{public}";
        id v5 = (os_log_s *)v12;
        os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_15;
      }
    }
  }

void sub_10003E4A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003E4D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003E504(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003E534(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intendedState]);
  [*(id *)(a1 + 32) setNextState:v3];
}

void sub_10003E598(uint64_t a1, void *a2)
{
  id v41 = a2;
  id v3 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 currentTarget]);

  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 targetOptInStates]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v42]);

  if (v8)
  {
    unsigned int v9 = objc_alloc(&OBJC_CLASS____TtC13transparencyd28KTFetchCloudStorageOperation);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 dataStore]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 controller]);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 backgroundContext]);
    id v40 = -[KTFetchCloudStorageOperation initWithDeps:initialFetch:userInteractive:reason:context:]( v9,  "initWithDeps:initialFetch:userInteractive:reason:context:",  v10,  0LL,  1LL,  @"optIn",  v14);

    __int16 v15 = objc_alloc(&OBJC_CLASS___KTCheckIDSRegistrationOperation);
    double v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pcsOperation]);
    uint64_t v18 = kKTApplicationIdentifierIDS;
    double v19 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:]( v15,  "initWithDependencies:application:pcs:idsRegistrationInterface:",  v16,  kKTApplicationIdentifierIDS,  v17,  WeakRetained);

    double v20 = objc_alloc(&OBJC_CLASS___KTFetchIDSSelfOperation);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v22 = -[KTFetchIDSSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v20,  "initWithApplication:dependencies:intendedState:errorState:",  v18,  v21,  @"Ready",  @"Ready");

    id v23 = objc_alloc(&OBJC_CLASS___KTFetchKTSelfOperation);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int128 v25 = -[KTFetchKTSelfOperation initWithApplication:dependencies:intendedState:errorState:]( v23,  "initWithApplication:dependencies:intendedState:errorState:",  v18,  v24,  @"Ready",  @"Ready");

    __int128 v26 = objc_alloc(&OBJC_CLASS___KTValidateSelfOperation);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v28 = -[KTValidateSelfOperation initWithApplication:dependencies:isOptInSelfValidation:]( v26,  "initWithApplication:dependencies:isOptInSelfValidation:",  v18,  v27,  1LL);

    -[KTResultOperation addSuccessDependency:](v25, "addSuccessDependency:", v22);
    -[KTValidateSelfOperation addNullableDependency:](v28, "addNullableDependency:", v40);
    -[KTResultOperation addSuccessDependency:](v28, "addSuccessDependency:", v25);
    -[KTResultOperation addSuccessDependency:](v28, "addSuccessDependency:", v22);
    [WeakRetained setLastValidateSelfOptIn:v28];
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_10003EB0C;
    v43[3] = &unk_100279CA8;
    objc_copyWeak(&v49, v3);
    id v29 = v28;
    uint64_t v44 = v29;
    id v45 = v8;
    id v30 = v41;
    id v46 = v30;
    __int128 v31 = v19;
    __int128 v47 = v31;
    id v48 = v42;
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[KTResultOperation operationWithBlock:]( &OBJC_CLASS___KTResultOperation,  "operationWithBlock:",  v43));
    [v32 addNullableDependency:v29];
    [v32 addNullableDependency:v31];
    [v30 dependOnBeforeGroupFinished:v32];
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v33 addOperation:v40];

    id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v34 addOperation:v31];

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v35 addOperation:v25];

    id v36 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v36 addOperation:v22];

    unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v37 addOperation:v29];

    id v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v38 addOperation:v32];

    objc_destroyWeak(&v49);
  }

  else
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279C60);
    }
    id v39 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v51 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Warning: no target application available: %@",  buf,  0xCu);
    }

    id v22 = (KTFetchIDSSelfOperation *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
    -[KTFetchIDSSelfOperation setCurrentTarget:](v22, "setCurrentTarget:", 0LL);
  }
}

void sub_10003EABC(_Unwind_Exception *a1)
{
}

void sub_10003EADC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003EB0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [*(id *)(a1 + 40) setError:v4];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [*(id *)(a1 + 48) setError:v5];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10003ED38;
    v14[3] = &unk_100279770;
    os_log_type_t v6 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    [v6 handleOperationResults:v14];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
    [v7 completedCurrentTarget];
  }

  else if ([*(id *)(a1 + 56) checkIDSResult] == (id)1)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) intendedState]);
    [*(id *)(a1 + 48) setNextState:v8];
  }

  else
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279C80);
    }
    unsigned int v9 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "IDS have not completed KT registration: %@",  buf,  0xCu);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) error]);
    [*(id *)(a1 + 40) setError:v11];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) error]);
    [*(id *)(a1 + 48) setError:v12];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
    [v13 completedCurrentTarget];
  }
}

id sub_10003ED38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) setLoggableData:a4];
}

void sub_10003ED44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003ED74(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v5)
  {
    os_log_type_t v6 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"PokeIDS",  2LL,  0.0);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachine]);
    [v7 handlePendingFlag:v6];
  }

  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 intendedState]);
  [v4 setNextState:v8];
}

void sub_10003EE30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 publicKeyStore]);
  [v7 clearForEnvironmentChange];

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[KTResultOperation named:withBlock:]( &OBJC_CLASS___KTResultOperation,  "named:withBlock:",  @"reset-configure-client",  &stru_100279CC8));
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dew]);
  [v10 resetEnvLogClientNetworkTimeout];
  id v12 = [v8 timeout:(unint64_t)(v11 * 1000000000.0)];

  [v3 dependOnBeforeGroupFinished:v8];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 logClient]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10003EFD0;
  v16[3] = &unk_100279D10;
  objc_copyWeak(&v18, v4);
  id v15 = v8;
  id v17 = v15;
  [v14 configure:v16];

  objc_destroyWeak(&v18);
}

void sub_10003EFB8(_Unwind_Exception *a1)
{
}

void sub_10003EFD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_100279CE8);
  }
  id v5 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "environment switch log client: %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 32) setError:v3];
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v6 addOperation:*(void *)(a1 + 32)];
}

void sub_10003F0E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003F110(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountKeyService]);
  [v6 clearCachedPCSIdentities];

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 accountStateHolder]);
  [v8 clearAccountMetadata];

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 smDataStore]);
  id v27 = 0LL;
  unsigned __int8 v11 = [v10 clearDataStore:&v27];
  id v12 = v27;

  if ((v11 & 1) == 0)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279D30);
    }
    uint64_t v13 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "dataStore clearDataStore failed: %@",  buf,  0xCu);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dataStore]);
  id v26 = 0LL;
  unsigned __int8 v16 = [v15 clearState:&v26];
  id v17 = v26;

  if ((v16 & 1) == 0)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279D50);
    }
    id v18 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "dataStore clearState failed: %@", buf, 0xCu);
    }
  }

  double v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  double v20 = (void *)objc_claimAutoreleasedReturnValue([v19 cloudRecords]);
  [v20 clearDataStore:0];

  [*(id *)(a1 + 32) resetLastAccountOperations];
  [*(id *)(a1 + 32) clearAccountMetrics];
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stateMonitor]);
  [v22 reset];

  [*(id *)(a1 + 32) setSpecificUser:0];
  [*(id *)(a1 + 32) setPcsOperation:0];
  [*(id *)(a1 + 32) clearAllFollowups:@"reset-local-state"];
  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stateMonitor]);
  [v24 setPendingChanges:1];

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v4 intendedState]);
  [v4 setNextState:v25];
}

void sub_10003F428(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003F458(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003F488(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudRecords]);
  [v6 clearLocalCloudState];

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudRecords]);
  [v8 clearDataStore:1];

  id v9 = (id)objc_claimAutoreleasedReturnValue([v4 intendedState]);
  [v4 setNextState:v9];
}

void sub_10003F538(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 pokeIDS]);
  [v4 trigger];

  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 intendedState]);
  [v3 setNextState:v5];
}

id sub_10003F60C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueMaybeCreateNewServerOptInFetch];
}

void sub_10003F790(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003FA18(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003FA8C;
  block[3] = &unk_100276740;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

id sub_10003FA8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCurrentServerOptInFetch:0];
}

void sub_10003FCC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003FCF4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverOptInFetchReasons]);
  [v2 unionSet:*(void *)(a1 + 40)];

  if (*(double *)(a1 + 48) > 0.0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverOptInScheduler]);
    [v3 waitUntil:(unint64_t)(*(double *)(a1 + 48) * 1000000000.0)];
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverOptInScheduler]);
  [v4 trigger];
}

void sub_10003FE2C(id a1, KTBAAKey *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));

  if (v3)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279DF0);
    }
    id v4 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error fetching BAA cert from triggerBAACertFetcher: %@",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_10003FF34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10003FFC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279E10);
    }
    int v7 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Error getting opt in state to post a followup CFU after receiving IDS disable notification: %@",  buf,  0xCu);
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 followup]);
  uint64_t v10 = kKTApplicationIdentifierIDS;
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 idsConfigBag]);
  int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 kbInfoArticleUrl]);
  [v9 postFollowup:v10 type:6 eventId:v11 errorCode:-390 optInState:v5 infoLink:v14 additionalInfo:0 error:0];
}

void sub_100040164(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100040220(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = v3;
  id v5 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if (*(_BYTE *)(a1 + 40))
        {
          uint64_t v10 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
          unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 uri]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 application]);
          uint64_t v13 = -[KTVerifierResult initWithUri:application:](v10, "initWithUri:application:", v11, v12);

          -[KTVerifierResult setUiStatus:](v13, "setUiStatus:", 3LL);
        }

        else
        {
          int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dataStore]);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 uri]);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 application]);
          uint64_t v13 = (KTVerifierResult *)objc_claimAutoreleasedReturnValue([v15 verifierResultForPeer:v16 application:v17]);
        }

        -[NSMutableArray addObject:](v4, "addObject:", v13);
      }

      id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v6);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  double v19 = (void *)objc_claimAutoreleasedReturnValue([v18 idsOperations]);
  [v19 peerVerificationFinishedWithResults:v4];
}

void sub_10004050C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100040528(uint64_t a1, void *a2)
{
  id v153 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (![WeakRetained isKTDisabled])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stateMonitor]);
    [v11 setSystemStatus:0];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stateMonitor]);
    [v13 setAccountStatus:4];

    [WeakRetained updateKTDisabledForIDS:0];
    int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 followup]);
    id v167 = 0LL;
    [v15 clearFollowupsByType:kKTApplicationIdentifierIDS type:6 error:&v167];
    id v16 = v167;

    if (v16)
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279E80);
      }
      id v17 = (os_log_s *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)v169 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Error clearing IDS disable CFU %@",  buf,  0xCu);
      }
    }

LABEL_10:
    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained initializedComplete]);
    [v18 fulfill];

    double v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    double v20 = (void *)objc_claimAutoreleasedReturnValue([v19 lockStateTracker]);
    unsigned __int8 v21 = [v20 hasBeenUnlocked];

    if ((v21 & 1) == 0)
    {
      id v9 = off_10028AD08;
      goto LABEL_16;
    }

    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statusReporting]);

    if (!v22)
    {
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 eligibilitySupport]);
      id v166 = 0LL;
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 eligibilityContainerPathAndReturnError:&v166]);
      id v26 = v166;

      if (!v25 || v26)
      {
        if (qword_1002E64C0 != -1) {
          dispatch_once(&qword_1002E64C0, &stru_100279EA0);
        }
        __int128 v33 = (os_log_s *)qword_1002E64C8;
        if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)v169 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Error initializing eligibility status reporter %@",  buf,  0xCu);
        }
      }

      else
      {
        id v27 = objc_alloc(&OBJC_CLASS____TtC13transparencyd28KTEligibilityStatusReporting);
        id v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 idsReporting]);
        id v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 eligibilitySupport]);
        id v165 = 0LL;
        __int128 v32 = -[KTEligibilityStatusReporting initWithPath:idsReporting:eligibilitySupport:error:]( v27,  "initWithPath:idsReporting:eligibilitySupport:error:",  v25,  v29,  v31,  &v165);
        id v26 = v165;
        [WeakRetained setStatusReporting:v32];
      }
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 accountOperations]);
    id v164 = 0LL;
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 primaryAccount:&v164]);
    id v37 = v164;

    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279EC0);
    }
    id v38 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
    {
      if (v36) {
        id v39 = @"yes";
      }
      else {
        id v39 = @"no";
      }
      id v40 = v38;
      id v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "aa_personID"));
      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "aa_altDSID"));
      *(_DWORD *)buf = 138544130;
      *(void *)v169 = v39;
      *(_WORD *)&v169[8] = 2112;
      *(void *)&v169[10] = v41;
      __int16 v170 = 2112;
      v171 = v42;
      __int16 v172 = 2112;
      id v173 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "TransparencyAccount Primary account found %{public}@ %@ %@: %@",  buf,  0x2Au);
    }

    if (v36)
    {
      __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 accountOperations]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 idsAccountTracker]);
      id v163 = v37;
      __int128 v47 = (char *)[v44 ktAccountStatus:v36 idsAccountsTracker:v46 error:&v163];
      id v152 = v163;

      id v48 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 stateMonitor]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 idsAccountTracker]);
      objc_msgSend(v49, "setIDSAccountStatus:", objc_msgSend(v51, "idsAccountType"));

      if ((unint64_t)(v47 - 1) < 2)
      {
        if (qword_1002E64C0 != -1) {
          dispatch_once(&qword_1002E64C0, &stru_100279F40);
        }
        id v52 = v152;
        uint64_t v53 = (os_log_s *)qword_1002E64C8;
        if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v169 = (_DWORD)v47;
          *(_WORD *)&v169[4] = 2112;
          *(void *)&v169[6] = v152;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "TransparencyAccount no account: %d: %@",  buf,  0x12u);
        }

        id v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 stateMonitor]);
        [v55 setAccountStatus:5];

        [v153 setNextState:@"NoAccount"];
        goto LABEL_139;
      }

      if (v47 == (char *)3)
      {
        __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v61 = (void *)objc_claimAutoreleasedReturnValue([v60 stateMonitor]);
        [v61 setAccountStatus:5];

        [WeakRetained newServerOptInFetch:@"noCloudKitAccount"];
        [v153 setNextState:@"NoAccount"];
        id v37 = v152;
LABEL_140:

        goto LABEL_141;
      }

      uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "aa_altDSID"));
      if (!v72)
      {
        if (qword_1002E64C0 != -1) {
          dispatch_once(&qword_1002E64C0, &stru_100279F60);
        }
        id v52 = v152;
        v124 = (os_log_s *)qword_1002E64C8;
        if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "TransparencyAccount no altDSID", buf, 2u);
        }

        v125 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        v126 = (void *)objc_claimAutoreleasedReturnValue([v125 stateMonitor]);
        [v126 setAccountStatus:5];

        [v153 setNextState:@"NoAccount"];
        goto LABEL_138;
      }

      __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 settings]);
      id v75 = [v74 getEnvironment];

      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_100279F80);
      }
      id v76 = (os_log_s *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v169 = (_DWORD)v75;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Environment at start time: %d", buf, 8u);
      }

      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      v78 = (void *)objc_claimAutoreleasedReturnValue([v77 settings]);
      unsigned int v79 = [v78 systemFailureFeatureEnabled];

      id v80 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([v80 accountStateHolder]);
      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue([v81 loadAccountMetadata]);

      if (v82
        && (__int128 v83 = (void *)objc_claimAutoreleasedReturnValue([v82 altDSID]), v83, v83))
      {
        __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v82 altDSID]);
        unsigned __int8 v85 = [v84 isEqual:v72];

        if ((v85 & 1) == 0)
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_100279FC8);
          }
          id v52 = v152;
          v136 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_ERROR,  "Account have switch since last load, start over",  buf,  2u);
          }

          v137 = off_10028AC80;
LABEL_117:
          [v153 setNextState:*v137];
LABEL_137:

LABEL_138:
LABEL_139:
          id v37 = v52;
          goto LABEL_140;
        }

        if ([v82 environment] != v75)
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_100279FE8);
          }
          id v52 = v152;
          v142 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_ERROR,  "Environment switched since last load, starting over",  buf,  2u);
          }

          [v153 setNextState:@"EnvironmentSwitch"];
          v132 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          v133 = (void *)objc_claimAutoreleasedReturnValue([v132 accountStateHolder]);
          v134 = v133;
          v158[0] = _NSConcreteStackBlock;
          v158[1] = 3221225472LL;
          v158[2] = sub_100041DC8;
          v158[3] = &unk_10027A008;
          v158[4] = v75;
          v135 = v158;
          goto LABEL_123;
        }

        if (v79 != [v82 hasBeenEnabled])
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_10027A028);
          }
          __int128 v86 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "Feature state changed", buf, 2u);
          }

          __int128 v87 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          __int128 v88 = (void *)objc_claimAutoreleasedReturnValue([v87 accountStateHolder]);
          v156[0] = _NSConcreteStackBlock;
          v156[1] = 3221225472LL;
          v156[2] = sub_100041E28;
          v156[3] = &unk_10027A048;
          char v157 = v79;
          [v88 persistAccountChanges:v156];

          if ((v79 & 1) == 0) {
            [WeakRetained clearAllFollowups:@"clear all CFU since feature is now off"];
          }
        }
      }

      else
      {
        __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([v89 accountStateHolder]);
        v159[0] = _NSConcreteStackBlock;
        v159[1] = 3221225472LL;
        v159[2] = sub_100041D20;
        v159[3] = &unk_100279FA8;
        char v162 = v79;
        id v160 = v72;
        id v161 = v75;
        [v90 persistAccountChanges:v159];
      }

      __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([v91 logClient]);
      id v93 = [v92 currentEnvironment];

      if (v93 == v75)
      {
        [WeakRetained addEvent:@"AccountPresent"];
        __int128 v94 = -[KTActualSpecificUser initWithACAccount:]( objc_alloc(&OBJC_CLASS___KTActualSpecificUser),  "initWithACAccount:",  v36);
        [WeakRetained setSpecificUser:v94];

        __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v96 = objc_msgSend(objc_msgSend(v95, "pcsOperationsClass"), "alloc");
        uint64_t v97 = objc_claimAutoreleasedReturnValue([WeakRetained specificUser]);
        id v98 = [v96 initWithSpecificUser:v97];
        [WeakRetained setPcsOperation:v98];

        [WeakRetained newServerOptInFetch:@"accountPresent"];
        __int128 v99 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v100 = (void *)objc_claimAutoreleasedReturnValue([v99 octagonOperations]);
        LOBYTE(v97) = [v100 getCachedOctagonStatus];

        if ((v97 & 1) != 0)
        {
          [WeakRetained storeEligiblilitySuccess:@"octagon"];
          [WeakRetained addEvent:@"OctagonReady"];
          id v101 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          id v102 = (void *)objc_claimAutoreleasedReturnValue([v101 octagonOperations]);
          id v154 = 0LL;
          unsigned __int8 v103 = [v102 ckksViewReady:@"Manatee" error:&v154];
          id v104 = v154;

          if ((v103 & 1) != 0)
          {
            [WeakRetained addEvent:@"CKKSManateeReady"];
            [WeakRetained storeEligiblilitySuccess:@"ckks"];
            v151 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountFirstSeenDate]);
            if (!v151)
            {
              v105 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
              v106 = (void *)objc_claimAutoreleasedReturnValue([v105 logger]);
              v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
              [v106 setDateProperty:v107 forKey:off_1002DE280];
            }

            if (qword_1002E64C0 != -1) {
              dispatch_once(&qword_1002E64C0, &stru_10027A0C8);
            }
            uint64_t v108 = (os_log_s *)qword_1002E64C8;
            if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_INFO,  "initializingOperation: Checking for a cached BAA certificate and triggering a network fetch if cert is m issing or expired.",  buf,  2u);
            }

            v109 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v110 = (void *)objc_claimAutoreleasedReturnValue([v109 certFetcher]);
            [v110 getDeviceCertWithForcedFetch:0 completionHandler:&stru_10027A0E8];

            v111 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v112 = (void *)objc_claimAutoreleasedReturnValue([v111 rebootTracker]);
            v113 = (void *)objc_claimAutoreleasedReturnValue([v112 getLastRebootTime]);

            v114 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v115 = (void *)objc_claimAutoreleasedReturnValue([v114 smDataStore]);
            v116 = (void *)objc_claimAutoreleasedReturnValue([v115 getSettingsDate:off_1002DE290]);

            if (!v116
              || v113 != v116
              && (v117 = (void *)objc_claimAutoreleasedReturnValue([v113 earlierDate:v116]),
                  v117,
                  v117 == v116))
            {
              if (qword_1002E64C0 != -1) {
                dispatch_once(&qword_1002E64C0, &stru_10027A128);
              }
              v118 = v113;
              v119 = (os_log_s *)qword_1002E64C8;
              if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "Device has rebooted since last initializing, fetching CK records",  buf,  2u);
              }

              v120 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"CloudKitIncoming",  2LL,  0.0);
              v121 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
              [v121 handlePendingFlag:v120];

              v122 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
              v123 = (void *)objc_claimAutoreleasedReturnValue([v122 smDataStore]);
              [v123 setSettingsDate:off_1002DE290 date:v118];

              v113 = v118;
            }

            [v153 setNextState:@"KTStateFixups"];

            id v52 = v152;
            goto LABEL_136;
          }

          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_10027A0A8);
          }
          id v52 = v152;
          v143 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v169 = v104;
            _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "TransparencyAccount waiting for Manatee view: %@",  buf,  0xCu);
          }

          v144 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          v145 = (void *)objc_claimAutoreleasedReturnValue([v144 octagonOperations]);
          v146 = (char *)[v145 ckksGetKnownBadState:@"Manatee"];

          if ((unint64_t)v146 < 2)
          {
            v147 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v148 = (void *)objc_claimAutoreleasedReturnValue([v147 stateMonitor]);
            v149 = v148;
            uint64_t v150 = 3LL;
          }

          else if ((unint64_t)(v146 - 2) >= 2)
          {
            if (v146 != (char *)4)
            {
LABEL_135:
              [v153 setNextState:@"WaitForCKKS"];
LABEL_136:

              goto LABEL_137;
            }

            v147 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v148 = (void *)objc_claimAutoreleasedReturnValue([v147 stateMonitor]);
            v149 = v148;
            uint64_t v150 = 5LL;
          }

          else
          {
            v147 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
            v148 = (void *)objc_claimAutoreleasedReturnValue([v147 stateMonitor]);
            v149 = v148;
            uint64_t v150 = 2LL;
          }

          [v148 setAccountStatus:v150];

          goto LABEL_135;
        }

        if (qword_1002E64C0 != -1) {
          dispatch_once(&qword_1002E64C0, &stru_10027A088);
        }
        id v52 = v152;
        v138 = (os_log_s *)qword_1002E64C8;
        if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "TransparencyAccount waiting for Octagon",  buf,  2u);
        }

        v139 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        v140 = (void *)objc_claimAutoreleasedReturnValue([v139 stateMonitor]);
        [v140 setAccountStatus:2];

        v141 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorEligibility,  -395LL,  @"octagon status is pending or untrusted"));
        [WeakRetained storeEligiblilityFailure:@"octagon" error:v141];

        v137 = off_10028AC08;
        goto LABEL_117;
      }

      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_10027A068);
      }
      id v52 = v152;
      v127 = (void *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
      {
        v128 = v127;
        v129 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        v130 = (void *)objc_claimAutoreleasedReturnValue([v129 logClient]);
        id v131 = [v130 currentEnvironment];
        *(_DWORD *)buf = 134218240;
        *(void *)v169 = v131;
        *(_WORD *)&v169[8] = 2048;
        *(void *)&v169[10] = v75;
        _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_ERROR,  "Environment for logClient (%lu) != current environment (%lu). Clearing state & reconfiguring",  buf,  0x16u);
      }

      [v153 setNextState:@"EnvironmentSwitch"];
      v132 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      v133 = (void *)objc_claimAutoreleasedReturnValue([v132 accountStateHolder]);
      v134 = v133;
      v155[0] = _NSConcreteStackBlock;
      v155[1] = 3221225472LL;
      v155[2] = sub_100041E88;
      v155[3] = &unk_10027A008;
      v155[4] = v75;
      v135 = v155;
LABEL_123:
      [v133 persistAccountChanges:v135];

      goto LABEL_137;
    }

    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v37 userInfo]);
    id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:NSUnderlyingErrorKey]);

    if (!+[TransparencyAccount isAccountsErrorRetryable:]( &OBJC_CLASS___TransparencyAccount,  "isAccountsErrorRetryable:",  v37))
    {
      if (!v57) {
        goto LABEL_49;
      }
      __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v57 domain]);
      id v62 = [v57 code];

      if (v62 != (id)10002)
      {
LABEL_49:
        __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v63 stateMonitor]);
        [v64 setAccountStatus:5];

        __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 accountStateHolder]);
        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 loadAccountMetadata]);

        if (v67
          && (__int128 v68 = (void *)objc_claimAutoreleasedReturnValue([v67 altDSID]), v68, v68))
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_100279F00);
          }
          __int128 v69 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "User seems to have logged out, cleaning state",  buf,  2u);
          }

          uint64_t v70 = off_10028AC80;
        }

        else
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_100279F20);
          }
          uint64_t v71 = (os_log_s *)qword_1002E64C8;
          if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Still no account", buf, 2u);
          }

          uint64_t v70 = off_10028ABB0;
        }

        [v153 setNextState:*v70];

        goto LABEL_140;
      }
    }

    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_100279EE0);
    }
    id v58 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "Failed to get primary account due to XPC issue; triggering retry",
        buf,
        2u);
    }

    __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryGetPrimaryAccount]);
    [v59 trigger];
LABEL_48:

    goto LABEL_49;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  [v4 noteEventNamed:@"ktDisabledEvent"];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stateMonitor]);
  [v6 setSystemStatus:5];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stateMonitor]);
  [v8 setAccountStatus:6];

  [WeakRetained postKTDisabledFollowup];
  [WeakRetained updateKTDisabledForIDS:1];
  id v9 = off_10028AD10;
LABEL_16:
  [v153 setNextState:*v9];
LABEL_141:
}

void sub_100041B70(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041BA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041BD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041C00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041C30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041C60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041C90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041CC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041CF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100041D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAltDSID:*(void *)(a1 + 32)];
  [v3 setHasBeenEnabled:*(unsigned __int8 *)(a1 + 48)];
  [v3 setEnvironment:*(void *)(a1 + 40)];
  return v3;
}

void sub_100041D68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041D98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100041DC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setEnvironment:*(void *)(a1 + 32)];
  return v3;
}

void sub_100041DF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100041E28(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHasBeenEnabled:*(unsigned __int8 *)(a1 + 32)];
  return v3;
}

void sub_100041E58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100041E88(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setEnvironment:*(void *)(a1 + 32)];
  return v3;
}

void sub_100041EB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041EE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041F18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100041F48(id a1, KTBAAKey *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));

  if (v3)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A108);
    }
    id v4 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error fetching BAA cert from KTStateInitializing: %@",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_100042050(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100042080(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100042180( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10004219C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountOperations]);
  id v21 = 0LL;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 primaryAccount:&v21]);
  id v8 = v21;

  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A170);
  }
  id v9 = (void *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      uint64_t v10 = @"yes";
    }
    else {
      uint64_t v10 = @"no";
    }
    unsigned __int8 v11 = v9;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_personID"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_altDSID"));
    *(_DWORD *)buf = 138544130;
    __int128 v23 = v10;
    __int16 v24 = 2112;
    __int128 v25 = v12;
    __int16 v26 = 2112;
    id v27 = v13;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "TransparencyAccount Primary account found %{public}@ %@ %@: %@",  buf,  0x2Au);
  }

  if (v7)
  {
    int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 accountStateHolder]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 loadAccountMetadata]);

    if (v16
      && (id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 altDSID]),
          id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_altDSID")),
          unsigned __int8 v19 = [v17 isEqual:v18],
          v18,
          v17,
          (v19 & 1) != 0))
    {
      double v20 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
      [v3 setNextState:v20];
    }

    else
    {
      [v3 setNextState:@"ResetLocalState"];
    }
  }

  else
  {
    [v3 setNextState:@"ResetLocalState"];
  }
}

void sub_10004240C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

uint64_t sub_100042710(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100042EBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100042EE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100042F10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100042F40(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) optInStates]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 targetOptInStates]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v4)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) optInStates]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 targetOptInStates]);
    [v6 setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
  }

void sub_1000431D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100043208(uint64_t a1)
{
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A240);
  }
  uint64_t v2 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "IDS registration timeout hit", v7, 2u);
  }

  id v3 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
  dispatch_source_cancel(v3);

  id v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkIDSTimer]);
  dispatch_source_cancel(v4);

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kTransparencyErrorIDSRegistrationTimeout,  -391LL,  0LL));
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_100043304(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100043448(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  id v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v3 timer]);
  dispatch_source_cancel(v4);

  uint64_t v5 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkIDSTimer]);
  dispatch_source_cancel(v5);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100043614(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100043684;
  v2[3] = &unk_10027A288;
  os_log_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 checkIDSHealth:v2];
}

void sub_100043684(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:@"hsa2upsell"])
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A260);
    }
    id v3 = (void *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = v3;
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 deps]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 idsOperations]);
      [v7 sleepTimeBetweenIDSCheckups];
      int v9 = 134217984;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "_waitForIDSRegistration, unregistered with IDS, will try again in %f seconds",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
  }

void sub_1000437D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000439FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100043A24(uint64_t a1, void *a2)
{
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = objc_alloc(&OBJC_CLASS___KTCheckIDSRegistrationOperation);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v6 = kKTApplicationIdentifierIDS;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pcsOperation]);
    uint64_t v8 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:]( v4,  "initWithDependencies:application:pcs:idsRegistrationInterface:",  v5,  v6,  v7,  *(void *)(a1 + 32));

    [v9 runBeforeGroupFinished:v8];
  }
}

void sub_100043AE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A2D0);
    }
    id v4 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to check self validation: %@", buf, 0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"timeout: %@", v3));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) reason]);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_100043C24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10004419C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_1000441CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldPokeIDSUponSigning:0];
}

void sub_1000441D8(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v34 = a2;
  id v33 = a5;
  uint64_t v49 = 0LL;
  id v50 = &v49;
  uint64_t v51 = 0x3032000000LL;
  id v52 = sub_100035018;
  uint64_t v53 = sub_100035028;
  id v54 = 0LL;
  id v54 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v34 allValues]);
  id v7 = [v6 countByEnumeratingWithState:&v45 objects:v57 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v46;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v46 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)v9);
        unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uploadedAt]);
        if (v11
          && (id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 uploadedAt]),
              BOOL v13 = [v12 compare:v50[5]] == (id)-1,
              v12,
              v11,
              v13))
        {
          int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 application]);
          [v36 setValue:v10 forKey:v14];
        }

        else
        {
          if (qword_1002E64C0 != -1) {
            dispatch_once(&qword_1002E64C0, &stru_10027A338);
          }
          int v14 = (os_log_s *)(id)qword_1002E64C8;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 application]);
            *(_DWORD *)buf = 138543362;
            uint64_t v56 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "updateClientData callback: Skipping rdata for application %{public}@ because it has not been uploaded to CloudKit",  buf,  0xCu);
          }
        }

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v6 countByEnumeratingWithState:&v45 objects:v57 count:16];
    }

    while (v7);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v36);
  if (a4)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stateMonitor]);
    [v17 setAccountStatus:3];
  }

  id v18 = objc_alloc_init(&OBJC_CLASS___TransparencyIDSRegistrationResponse);
  if (a3)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A358);
    }
    unsigned __int8 v19 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "New keys inserted. Waiting while we try to make signatures.",  buf,  2u);
    }

    double v20 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) smState]);
    [v20 setNumberProperty:v21 forKey:@"stateAtSigFetchStart"];

    __int128 v22 = objc_alloc_init(&OBJC_CLASS___KTCondition);
    [*(id *)(a1 + 32) setSignaturesComplete:v22];

    [*(id *)(a1 + 32) triggerKTAccountKeySignature:0.0];
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signaturesComplete]);
    [v23 wait:5000000000];

    __int16 v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signatureQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100044868;
    block[3] = &unk_10027A408;
    __int128 v25 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    __int128 v43 = &v49;
    id v26 = v25;
    uint64_t v27 = *(void *)(a1 + 56);
    id v39 = v26;
    uint64_t v44 = v27;
    id v40 = v18;
    id v42 = *(id *)(a1 + 48);
    id v41 = v33;
    dispatch_async(v24, block);
  }

  else
  {
    [*(id *)(a1 + 32) triggerStatusUpdate:kKTApplicationIdentifierIDS];
    __int16 v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signatureQueue]);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    void v37[2] = sub_100044D84;
    v37[3] = &unk_100276740;
    void v37[4] = *(void *)(a1 + 32);
    dispatch_async(v28, v37);

    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A428);
    }
    id v29 = (os_log_s *)(id)qword_1002E64C8;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count];
      *(_DWORD *)buf = 67109120;
      LODWORD(v56) = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Returning existing signatures: %d. insertedKeys [0]",  buf,  8u);
    }

    [v18 setRegistrationData:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  _Block_object_dispose(&v49, 8);
}

void sub_1000447D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_100044808(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044838(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044868(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A378);
  }
  uint64_t v5 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to fetch signatures again.", buf, 2u);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requests]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allKeys]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 smDataStore]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100044B08;
  v16[3] = &unk_10027A3C0;
  __int128 v17 = *(_OWORD *)(a1 + 72);
  [v9 fetchDeviceSignature:v7 complete:v16];

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) smState]);
  [v10 setNumberProperty:v11 forKey:@"stateAtSigFetchEnd"];

  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A3E0);
  }
  id v12 = (void *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    int v14 = v12;
    unsigned int v15 = [v13 count];
    *(_DWORD *)buf = 67109120;
    unsigned int v19 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Returning existing signatures: %d. insertedKeys [1]",  buf,  8u);
  }

  [*(id *)(a1 + 48) setRegistrationData:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100044AD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044B08(uint64_t a1, void *a2)
{
  if (a2)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 allValues]);
    id v4 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
    if (v4)
    {
      id v6 = v4;
      uint64_t v7 = *(void *)v21;
      *(void *)&__int128 v5 = 138543362LL;
      __int128 v19 = v5;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(v3);
          }
          id v9 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v8);
          uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uploadedAt", v19));
          if (v10
            && (unsigned __int8 v11 = (void *)v10,
                id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 uploadedAt]),
                id v13 = [v12 compare:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)],
                v12,
                v11,
                v13 == (id)-1LL))
          {
            __int128 v17 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 application]);
            [v17 setValue:v9 forKey:v18];
          }

          else
          {
            if (qword_1002E64C0 != -1) {
              dispatch_once(&qword_1002E64C0, &stru_10027A398);
            }
            int v14 = (void *)qword_1002E64C8;
            if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v15 = v14;
              id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 application]);
              *(_DWORD *)buf = v19;
              __int128 v25 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "fetchDeviceSignature callback: Skipping rdata for application %{public}@ because it has not been uploaded to CloudKit",  buf,  0xCu);
            }
          }

          uint64_t v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
      }

      while (v6);
    }
  }

void sub_100044D24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044D54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

id sub_100044D84(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldPokeIDSUponSigning:1];
}

void sub_100044D90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100044E6C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___TransparencyIDSRegistrationResponse);
    [v3 setRegistrationData:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

id sub_100044FEC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  else {
    return [*(id *)(a1 + 32) transparencyDumpKTRegistrationData:*(void *)(a1 + 40)];
  }
}

void sub_10004588C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100045C04(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A4D0);
  }
  id v3 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    __int128 v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "cloud-data-reset: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100045CD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100045DF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100045F7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000461B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000461E8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A570);
  }
  id v3 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    __int128 v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ids-server-bag-update: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000462B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000462E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046530(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046560(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (v4 || !a2)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A610);
    }
    __int128 v5 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Did not store eligiblity result, error %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_100046638(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046790(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000467C0(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (v4 || !a2)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A670);
    }
    __int128 v5 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Did not store eligiblity result, error  %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_100046898(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046A5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046A8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 lastReport]);
  [v7 timeIntervalSinceDate:v8];
  double v10 = v9;
  [v5 timeBetweenReports];
  double v12 = v11;

  if (v10 < v12)
  {
    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A6B0);
    }
    id v13 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Last eligibility report was too recent, skipping report",  buf,  2u);
    }

    uint64_t v14 = *(void *)(a1 + 40);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"transparencyd.KTEligibilityError",  10LL,  @"Last eligibility report was too recent, skipping report"));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
  }

  else
  {
LABEL_8:
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusReporting]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100046C7C;
    v18[3] = &unk_10027A760;
    __int128 v17 = *(void **)(a1 + 40);
    v18[4] = *(void *)(a1 + 32);
    id v19 = v17;
    [v16 iCloudAnalyticsEnabledWithCompletionHandler:v18];
  }
}

void sub_100046C4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046C7C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusReporting]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100046E6C;
    v10[3] = &unk_10027A6F8;
    id v11 = *(id *)(a1 + 40);
    [v7 reportWithCompletionHandler:v10];
  }

  else
  {
    if (v5)
    {
      if (qword_1002E64C0 != -1) {
        dispatch_once(&qword_1002E64C0, &stru_10027A718);
      }
      uint64_t v8 = (os_log_s *)qword_1002E64C8;
      if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "iCloudAnalytics error %@", buf, 0xCu);
      }
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"transparencyd.KTEligibilityError",  8LL,  @"iCloudAnalytics not enabled"));
    }

    if (qword_1002E64C0 != -1) {
      dispatch_once(&qword_1002E64C0, &stru_10027A738);
    }
    double v9 = (os_log_s *)qword_1002E64C8;
    if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "iCloudAnalytics not enabled, not reporting eligibility",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100046E6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_1002E64C0 != -1) {
    dispatch_once(&qword_1002E64C0, &stru_10027A6D0);
  }
  id v6 = (os_log_s *)qword_1002E64C8;
  if (os_log_type_enabled((os_log_t)qword_1002E64C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2 == 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "KT Eligibility IDS recommendation %d",  (uint8_t *)v7,  8u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100046F68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046F98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100046FC8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_1000471A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

uint64_t sub_1000471D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000472D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000473D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000474E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000476F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10004771C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_10004774C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statusReporting]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000477E4;
  v5[3] = &unk_10027A838;
  id v4 = *(id *)(a1 + 32);
  void v5[4] = WeakRetained;
  id v6 = v4;
  [v3 reportWithCompletionHandler:v5];
}

void sub_1000477E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, BOOL))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), a2 == 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusReporting]);
  [v3 clearReportOverridesWithCompletionHandler:&stru_10027A810];
}

void sub_100047A08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100047A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:"));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_100047F08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100047F24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100047F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100047FA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004804C;
  block[3] = &unk_1002774A0;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_10004804C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void *)(v3 + 40);
    id v4 = (id *)(v3 + 40);
    if (!v5) {
      objc_storeStrong(v4, v2);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100048088(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100048B2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64C8;
  qword_1002E64C8 = (uint64_t)v1;
}

void sub_100048DB8(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_10029A220));
  id v2 = (void *)qword_1002E64D8;
  qword_1002E64D8 = v1;
}

void sub_100048F38(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_10029A238));
  id v2 = (void *)qword_1002E64E8;
  qword_1002E64E8 = v1;
}

void sub_10004A094(uint64_t a1, uint64_t a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"selfOptIn"];
}

void sub_10004A1A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 <= 6)
  {
    uint64_t v3 = (uint64_t)*(&off_10027AAB8 + v1);
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 == 1)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue( +[KTEligibilityStatusResult statusResultWithSuccessWithElement:]( &OBJC_CLASS____TtC13transparencyd25KTEligibilityStatusResult,  "statusResultWithSuccessWithElement:",  v3));
    }

    else
    {
      if (v4) {
        return;
      }
      uint64_t v5 = objc_claimAutoreleasedReturnValue( +[KTEligibilityStatusResult statusResultWithFailureWithElement:error:]( &OBJC_CLASS____TtC13transparencyd25KTEligibilityStatusResult,  "statusResultWithFailureWithElement:error:",  v3,  *(void *)(a1 + 32)));
    }

    id v6 = (void *)v5;
    if (v5)
    {
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) eligibilityStatusReporter]);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10004A284;
      v8[3] = &unk_10027AA08;
      v8[4] = *(void *)(a1 + 40);
      [v7 storeWithStatus:v6 completionHandler:v8];
    }
  }

void sub_10004A284(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 && (a2 & 1) == 0)
  {
    if (qword_1002E64F0 != -1) {
      dispatch_once(&qword_1002E64F0, &stru_10027A9E0);
    }
    id v6 = (os_log_s *)qword_1002E64F8;
    if (os_log_type_enabled((os_log_t)qword_1002E64F8, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Error storing eligibility metric %{public}@",  (uint8_t *)&v8,  0xCu);
    }
  }

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storedEligibilityResult]);
  [v7 fulfill];
}

void sub_10004A380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E64F8;
  qword_1002E64F8 = (uint64_t)v1;
}

LABEL_7:
}

      ++v17;

      if (v16 == v17) {
        goto LABEL_30;
      }
    }
  }

  __break(1u);
}

  __break(1u);
  return result;
}

        __int128 v7 = v30 + 1;
      }

      while ((id)(v30 + 1) != v28);
      id result = [a2 countByEnumeratingWithState:&v32 objects:v36 count:16];
      __int16 v28 = result;
    }

    while (result);
  }

  return result;
}

  id v11 = [v5 hasTopLevelTreeEntry];
  double v12 = v18;
  if (v11)
  {
    id v13 = objc_claimAutoreleasedReturnValue([v18 topLevelTreeEntry]);
    double v12 = v18;
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v18 topLevelTreeEntry]);
      if (![v15 hasSlh])
      {
LABEL_12:

        double v12 = v18;
        goto LABEL_13;
      }

      id v16 = (void *)objc_claimAutoreleasedReturnValue([v18 topLevelTreeEntry]);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 slh]);

      double v12 = v18;
      if (v17)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v18 topLevelTreeEntry]);
        unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 slh]);
        -[KTContextVerifier checkHeadEpoch:](self, "checkHeadEpoch:", v15);
        goto LABEL_12;
      }
    }
  }

    id WeakRetained = v8;
  }
}
}
}

void sub_10004AE14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6508;
  qword_1002E6508 = (uint64_t)v1;
}

void sub_10004AE44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6508;
  qword_1002E6508 = (uint64_t)v1;
}

void sub_10004B014(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6508;
  qword_1002E6508 = (uint64_t)v1;
}

void sub_10004B5A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004B5D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004B600(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004B630(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004B660(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004B690(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allKeys]);

    id v34 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Inclusion failed for applications: %@",  v6));

    v42[0] = NSMultipleUnderlyingErrorsKey;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errors]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allValues]);
    v42[1] = NSLocalizedDescriptionKey;
    v43[0] = v9;
    id v33 = (void *)v7;
    v43[1] = v7;
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v43,  v42,  2LL));

    __int128 v32 = (void *)v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyErrorVerify",  -385LL,  v10));
    [*(id *)(a1 + 32) setError:v11];

    double v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) failedRevs]);
    id v14 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v38;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v38 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void *)(*((void *)&v37 + 1) + 8LL * (void)i);
          id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverHints]);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v18]);
          [v12 appendFormat:@"%@/%@,", v18, v20];

          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) failedRevs]);
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v18]);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 componentsJoinedByString:@","]);
          [v13 appendFormat:@"%@:%@", v18, v23];
        }

        id v15 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
      }

      while (v15);
    }

    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundOpId]);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 smDataStore]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:]( &OBJC_CLASS___KTBackgroundSystemValidationOperation,  "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:",  v24,  v26,  v13,  v27,  v12,  v28);
  }

  if (qword_1002E6510 != -1) {
    dispatch_once(&qword_1002E6510, &stru_10027ABF0);
  }
  id v29 = (os_log_s *)qword_1002E6518;
  if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "VerifyRevisionInclusion: end", buf, 2u);
  }

  unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v30 addOperation:v31];
}

void sub_10004BAB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004BD48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004BF20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004C1C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004C4C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_10004C4FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

uint64_t sub_10004C52C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004C53C(uint64_t a1)
{
}

void sub_10004C544(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dataStore]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [v6 createDownloadRecord:*(void *)(a1 + 64) moc:v4 application:*(void *)(a1 + 40)]);

  int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  *(void *)(a1 + 48),  0LL,  *(void *)(a1 + 72)));
  [v7 setRevisions:v8];

  if (qword_1002E6510 != -1) {
    dispatch_once(&qword_1002E6510, &stru_10027AC90);
  }
  id v9 = (void *)qword_1002E6518;
  if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    double v12 = v9;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 downloadId]);
    *(_DWORD *)buf = 138543874;
    id v26 = v10;
    __int16 v27 = 2114;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    unsigned int v30 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Fetching Inclusion Proofs for %{public}@ %{public}@ with downloadId %{public}@",  buf,  0x20u);
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue([v7 downloadId]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 dataStore]);
  id v24 = 0LL;
  unsigned __int8 v19 = [v18 persistWithError:&v24];
  id v20 = v24;

  if ((v19 & 1) == 0)
  {
    if (qword_1002E6510 != -1) {
      dispatch_once(&qword_1002E6510, &stru_10027ACB0);
    }
    __int128 v21 = (os_log_s *)qword_1002E6518;
    if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to save downloadRecord: %@", buf, 0xCu);
    }

    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 dataStore]);
    [v23 reportCoreDataPersistEventForLocation:@"verifyConsistency" underlyingError:v20];
  }
}

void sub_10004C7E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004C810(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004C840(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 publicKeyStore]);
  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v9 applicationPublicKeyStore:*(void *)(a1 + 32)]);

  uint64_t v10 = objc_alloc(&OBJC_CLASS___KTContextVerifier);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  double v12 = (void *)objc_claimAutoreleasedReturnValue([v11 dataStore]);
  id v13 = -[KTContextVerifier initWithApplicationKeyStore:dataStore:applicationID:]( v10,  "initWithApplicationKeyStore:dataStore:applicationID:",  v72,  v12,  *(void *)(a1 + 32));

  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (!v5 || v6)
  {
    if (qword_1002E6510 != -1) {
      dispatch_once(&qword_1002E6510, &stru_10027ACF8);
    }
    id v36 = (os_log_s *)qword_1002E6518;
    if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v78 = v37;
      __int16 v79 = 2112;
      id v80 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "Failed inclusion proof downloadId %{public}@: %@",  buf,  0x16u);
    }

    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorNetwork,  -145LL,  @"empty inclusion proof response"));
    }
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 dataStore]);
    uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 logClient]);
    [v39 failHeadDownload:v40 failure:v6 logClient:v42];

    id v15 = v6;
    __int128 v43 = v15;
  }

  else
  {
    if ([v5 status] == 1)
    {
      id v74 = 0LL;
      unsigned __int8 v14 = -[KTContextVerifier verifyRevisionLogInclusionProofResponse:receivedRevisions:error:]( v13,  "verifyRevisionLogInclusionProofResponse:receivedRevisions:error:",  v5,  v71,  &v74);
      id v15 = v74;
      if ((v14 & 1) != 0)
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 settings]);
        unsigned int v18 = [v17 allowsInternalSecurityPolicies];

        if (v18)
        {
          unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"InclusionDownload",  *(void *)(a1 + 32)));
          uint64_t v20 = *(void *)(a1 + 40);
          v75[0] = @"requestedRevisions";
          v75[1] = @"receivedRevisions";
          v76[0] = v20;
          v76[1] = v71;
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v76,  v75,  2LL));
          id v22 = [v21 mutableCopy];

          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
          uint64_t v24 = kTransparencyResponseMetadataKeyServerHint;
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

          if (v25)
          {
            id v26 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
            __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v24]);
            [v22 setObject:v27 forKeyedSubscript:v24];
          }

          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
          __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:@"APS"]);

          if (v29) {
            [v22 setObject:&__kCFBooleanTrue forKeyedSubscript:@"APS"];
          }
          unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 logger]);
          [v31 logHardFailureForEventNamed:v19 withAttributes:v22];
        }

        if (qword_1002E6510 != -1) {
          dispatch_once(&qword_1002E6510, &stru_10027AD58);
        }
        __int128 v32 = (os_log_s *)qword_1002E6518;
        if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
          *(_DWORD *)buf = 138543362;
          uint64_t v78 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Revision log inclusion proof downloadId %{public}@: verification succeeded",  buf,  0xCu);
        }

        id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 logClient]);
        [v35 deleteDownloadId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      }

      else
      {
        if (qword_1002E6510 != -1) {
          dispatch_once(&qword_1002E6510, &stru_10027AD38);
        }
        id v54 = (os_log_s *)qword_1002E6518;
        if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
          *(_DWORD *)buf = 138543618;
          uint64_t v78 = v55;
          __int16 v79 = 2112;
          id v80 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "Inclusion proof response donwloadId %{public}@: verification failed %@",  buf,  0x16u);
        }

        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 dataStore]);
        uint64_t v58 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v59 logClient]);
        [v57 failHeadDownload:v58 failure:v15 logClient:v60];
      }
    }

    else
    {
      if (qword_1002E6510 != -1) {
        dispatch_once(&qword_1002E6510, &stru_10027AD18);
      }
      uint64_t v44 = (void *)qword_1002E6518;
      if (os_log_type_enabled((os_log_t)qword_1002E6518, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        __int128 v46 = v44;
        *(_DWORD *)buf = 138543618;
        uint64_t v78 = v45;
        __int16 v79 = 1024;
        LODWORD(v80) = [v5 status];
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "server failed to produce inclusion proof for downloadId %{public}@: %d",  buf,  0x12u);
      }

      signed int v47 = [v5 status];
      id v48 = [v5 status];
      id v15 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorServer,  v47,  @"server failed to produce inclusion proof: %d",  v48));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 dataStore]);
      uint64_t v51 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      id v52 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 logClient]);
      [v50 failHeadDownload:v51 failure:v15 logClient:v53];
    }

    __int128 v43 = 0LL;
  }

  id v73 = v15;
  id v61 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier failExpiredSTHsForType:error:](v13, "failExpiredSTHsForType:error:", 1LL, &v73));
  id v62 = v73;

  if (v61 && [v61 count])
  {
    if (v5)
    {
      __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
      __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
    }

    else
    {
      __int128 v64 = 0LL;
    }

    __int128 v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%lu",  *(void *)(a1 + 32),  *(void *)(a1 + 64)));
    __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
    objc_sync_enter(v66);
    __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverHints]);
    [v67 setObject:v64 forKeyedSubscript:v65];

    __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errors]);
    [v68 setObject:v62 forKeyedSubscript:v65];

    __int128 v69 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained failedRevs]);
    [v69 setObject:v61 forKeyedSubscript:v65];

    objc_sync_exit(v66);
  }

  uint64_t v70 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([WeakRetained fetchGroup]);
  dispatch_group_leave(v70);
}

void sub_10004D0D4(_Unwind_Exception *a1)
{
}

void sub_10004D0F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004D120(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004D150(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

void sub_10004D180(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6518;
  qword_1002E6518 = (uint64_t)v1;
}

LABEL_20:
}

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

    uint64_t v45 = sub_100072CC4(&qword_1002E0F08);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v24, 1LL, 1LL, v45);
    v215 = 0LL;
LABEL_21:
    sub_1000A9A0C((uint64_t)v24, (uint64_t)v26, &qword_1002E0F00);
    __int128 v46 = sub_100072CC4(&qword_1002E0F08);
    __int128 v32 = (os_log_s *)v26[1];
    signed int v47 = (char *)v26 + *(int *)(v46 + 48);
    id v48 = *v26;
    (*((void (**)(char *, char *, uint64_t))v35 + 4))(v221, v47, v34);
    v227 = 0LL;
    uint64_t v49 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
    sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
    id v50 = sub_100072CC4((uint64_t *)&unk_1002E0440);
    uint64_t v51 = swift_allocObject(v50, 112LL, 7LL);
    *(_OWORD *)(v51 + 16) = v210;
    *(void *)(v51 + 56) = &type metadata for String;
    id v52 = sub_1000914E8();
    *(void *)(v51 + 32) = v48;
    *(void *)(v51 + 40) = v32;
    *(void *)(v51 + 96) = &type metadata for String;
    *(void *)(v51 + 104) = v52;
    uint64_t v53 = v218;
    id v54 = v219;
    *(void *)(v51 + 64) = v52;
    *(void *)(v51 + 72) = v53;
    *(void *)(v51 + 80) = v54;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v54);
    uint64_t v55 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, v209, v51);
    [v49 setPredicate:v55];

    v226 = 0LL;
    v217 = v49;
    uint64_t v56 = [v49 execute:&v226];
    id v57 = v226;
    if (!v56)
    {
      __int128 v89 = v226;
      __int128 v90 = _convertNSErrorToError(_:)(v57);

      swift_willThrow(v91);
      swift_errorRelease(v90);
      v192 = 0LL;
      uint64_t v24 = (void *)v214;
      uint64_t v10 = v221;
      goto LABEL_38;
    }

    uint64_t v58 = v56;
    __int128 v59 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
    __int128 v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v58, v59);
    id v61 = v57;

    uint64_t v24 = (void *)v214;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0) {
        __int16 v172 = v60;
      }
      else {
        __int16 v172 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v60);
      id v62 = (void *)_CocoaArrayWrapper.endIndex.getter(v172);
      swift_bridgeObjectRelease(v60);
      uint64_t v10 = v221;
      if (v62)
      {
LABEL_25:
        if ((v60 & 0xC000000000000001LL) != 0)
        {
          __int128 v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v60);
        }

        else
        {
          if (!*(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            swift_once(&qword_1002EA8B0, sub_1000972A0);
LABEL_84:
            sub_100072DEC((uint64_t)v24, (uint64_t)qword_1002EA8B8);
            uint64_t v178 = static os_log_type_t.error.getter();
            v179 = swift_bridgeObjectRetain(v32);
            id v180 = (os_log_s *)Logger.logObject.getter(v179);
            if (os_log_type_enabled(v180, v178))
            {
              __int128 v181 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              __int128 v182 = (void *)swift_slowAlloc(32LL, -1LL);
              v226 = v182;
              *(_DWORD *)__int128 v181 = v191;
              swift_bridgeObjectRetain(v32);
              v222 = COERCE_DOUBLE(sub_10007C22C((uint64_t)v204, (unint64_t)v32, (uint64_t *)&v226));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v181 + 4, v181 + 12);
              swift_bridgeObjectRelease_n(v32, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v180, v178, "failed to create recordID %s", v181, 0xCu);
              swift_arrayDestroy(v182, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v182, -1LL, -1LL);
              swift_slowDealloc(v181, -1LL, -1LL);

              (*((void (**)(char *, uint64_t))v213 + 1))(v10, v34);
            }

            else
            {
              swift_bridgeObjectRelease_n(v32, 2LL);

              (*((void (**)(char *, uint64_t))v35 + 1))(v10, v34);
            }

            goto LABEL_88;
          }

          __int128 v63 = *(id *)(v60 + 32);
        }

        id v62 = v63;
      }
    }

    else
    {
      id v62 = *(void **)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v10 = v221;
      if (v62) {
        goto LABEL_25;
      }
    }

    __int128 v64 = v35;
    swift_bridgeObjectRelease(v60);
    swift_beginAccess(&v227, v223, 1LL, 0LL);
    __int128 v65 = v227;
    v227 = v62;

    __int128 v66 = v202;
    if (v62)
    {
      swift_bridgeObjectRelease(v32);
      if (qword_1002EA8B0 != -1) {
        swift_once(&qword_1002EA8B0, sub_1000972A0);
      }
      __int128 v67 = sub_100072DEC((uint64_t)v24, (uint64_t)qword_1002EA8B8);
      __int128 v68 = v199;
      (*(void (**)(char *, uint64_t, void *))(v66 + 16))(v199, v67, v24);
      __int128 v69 = v64;
      uint64_t v70 = (void (*)(char *, char *, uint64_t))*((void *)v64 + 2);
      uint64_t v71 = v197;
      uint64_t v72 = v10;
      v70(v197, v10, v34);
      id v73 = v24;
      id v74 = v198;
      id v75 = ((uint64_t (*)(char *, char *, uint64_t))v70)(v198, v72, v34);
      id v76 = v66;
      uint64_t v77 = (os_log_s *)Logger.logObject.getter(v75);
      uint64_t v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, (os_log_type_t)v78))
      {
        LODWORD(v204) = v78;
        __int16 v79 = swift_slowAlloc(42LL, -1LL);
        id v80 = (void *)swift_slowAlloc(96LL, -1LL);
        v226 = v80;
        *(_DWORD *)__int16 v79 = v194;
        __int128 v81 = v227;
        if (v227)
        {
          __int128 v82 = v77;
          __int128 v83 = [v227 recordID];
          __int128 v84 = v197;
          if (v83)
          {
            unsigned __int8 v85 = v83;
            __int128 v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
            __int128 v88 = v87;
          }

          else
          {
            __int128 v88 = 0xE300000000000000LL;
            __int128 v86 = 7104878LL;
          }
        }

        else
        {
          __int128 v82 = v77;
          __int128 v88 = 0xE300000000000000LL;
          __int128 v86 = 7104878LL;
          __int128 v84 = v197;
        }

        v222 = COERCE_DOUBLE(sub_10007C22C(v86, v88, (uint64_t *)&v226));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v208, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease(v88);
        *(_WORD *)(v79 + 12) = 2080;
        if (v81)
        {
          v123 = [v81 uri];
          v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
          v126 = v125;
        }

        else
        {
          v124 = 0LL;
          v126 = 0xE000000000000000LL;
        }

        id v34 = v211;
        v222 = COERCE_DOUBLE(sub_10007C22C(v124, v126, (uint64_t *)&v226));
        v127 = v208;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v208, v79 + 14, v79 + 22);
        swift_bridgeObjectRelease(v126);
        *(_WORD *)(v79 + 22) = 2080;
        v128 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        v129 = dispatch thunk of CustomStringConvertible.description.getter(v34, v128);
        id v131 = v130;
        v222 = COERCE_DOUBLE(sub_10007C22C(v129, v130, (uint64_t *)&v226));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v127, v79 + 24, v79 + 32);
        swift_bridgeObjectRelease(v131);
        v132 = (uint64_t (*)(char *, uint64_t))*((void *)v213 + 1);
        v133 = v132(v84, v34);
        *(_WORD *)(v79 + 32) = 2048;
        v134 = v198;
        v222 = Date.timeIntervalSince1970.getter(v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v127, v79 + 34, v79 + 42);
        v132(v134, v34);
        uint64_t v10 = v213;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  (os_log_type_t)v204,  "optInStore: updating existing record %s %s %s[%f",  (uint8_t *)v79,  0x2Au);
        swift_arrayDestroy(v80, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);

        v121 = v214;
        (*(void (**)(char *, uint64_t))(v202 + 8))(v199, v214);
        v114 = v221;
      }

      else
      {
        v122 = (void (*)(char *, uint64_t))*((void *)v69 + 1);
        v122(v71, v34);
        v122(v74, v34);

        (*(void (**)(char *, void *))(v76 + 8))(v68, v73);
        v114 = v221;
        v121 = (uint64_t)v73;
        uint64_t v10 = v69;
      }

      goto LABEL_56;
    }

    uint64_t v35 = v64;
LABEL_38:
    __int128 v92 = (*(uint64_t (**)(void *, os_log_s *, uint64_t, uint64_t))(*(void *)v220 + 240LL))( v48,  v32,  v218,  v219);
    v204 = v48;
    if (!v92)
    {
      if (qword_1002EA8B0 == -1) {
        goto LABEL_84;
      }
      goto LABEL_91;
    }

    id v93 = (void *)v92;
    if (qword_1002EA8B0 != -1) {
      swift_once(&qword_1002EA8B0, sub_1000972A0);
    }
    sub_100072DEC((uint64_t)v24, (uint64_t)qword_1002EA8B8);
    __int128 v94 = v93;
    __int128 v95 = (os_log_s *)Logger.logObject.getter(v94);
    id v96 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = v94;
      id v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      __int128 v99 = (void *)swift_slowAlloc(32LL, -1LL);
      v226 = v99;
      *(_DWORD *)id v98 = v191;
      v195 = v98 + 4;
      __int128 v100 = [v97 recordName];
      id v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      v196 = v32;
      unsigned __int8 v103 = v102;

      id v104 = v221;
      v222 = COERCE_DOUBLE(sub_10007C22C(v101, v103, (uint64_t *)&v226));
      v105 = v213;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v208, v195, v98 + 12);

      v106 = v103;
      __int128 v32 = v196;
      swift_bridgeObjectRelease(v106);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "creating new record %s", v98, 0xCu);
      swift_arrayDestroy(v99, 1LL, v188);
      swift_slowDealloc(v99, -1LL, -1LL);
      v107 = v98;
      __int128 v94 = v97;
      swift_slowDealloc(v107, -1LL, -1LL);
    }

    else
    {
      v105 = v35;
      id v104 = v10;
    }

    uint64_t v108 = (void *)(*(uint64_t (**)(void))(*(void *)v220 + 152LL))();
    v109 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v108];

    swift_beginAccess(&v227, v225, 1LL, 0LL);
    v110 = v227;
    v227 = v109;

    if (v109)
    {
      v111 = v109;
      v112 = v94;
      v113 = [v94 recordName];
      v114 = v104;
      uint64_t v10 = v105;
      if (!v113)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        v116 = v115;
        v113 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v116);
      }

      [v111 setRecordID:v113];

      v117 = v111;
      v118 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
      [v117 setUri:v118];

      v119 = v117;
      v120 = String._bridgeToObjectiveC()();
      [v119 setApplication:v120];

      id v34 = v211;
      v121 = v214;
    }

    else
    {

      swift_bridgeObjectRelease(v32);
      v114 = v104;
      id v34 = v211;
      uint64_t v10 = v105;
      v121 = v214;
    }

    uint64_t v7 = (v13 - 1) & v13;
  }

  unsigned __int8 v14 = v12 + 4;
  if (v14 >= v8)
  {
LABEL_25:
    swift_release(a2);
    return;
  }

  id v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    id v9 = v14;
    goto LABEL_20;
  }

  while (1)
  {
    id v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_25;
    }
    id v13 = *(void *)(v4 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }

    id v9 = (v15 - 1) & v15;
  }

  uint64_t v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_25:
    swift_release(a2);
    return;
  }

  id v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    uint64_t v11 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_25;
    }
    id v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }

          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v3;
}

    LOBYTE(v6) = 1;
  }

  return v6;
}
}
}
}

          id v26 = 0LL;
          goto LABEL_24;
        }

        if (!a4) {
          goto LABEL_20;
        }
        __int16 v27 = kTransparencyErrorDecode;
        uint64_t v28 = @"failed to parse add timestamp from DeviceState";
        __int16 v29 = -357LL;
      }

      else
      {
        if (!a4) {
          goto LABEL_20;
        }
        __int16 v27 = kTransparencyErrorDecode;
        uint64_t v28 = @"failed to parse app version from DeviceState";
        __int16 v29 = -356LL;
      }
    }

    else
    {
      if (!a4) {
        goto LABEL_20;
      }
      __int16 v27 = kTransparencyErrorDecode;
      uint64_t v28 = @"failed to parse client data from DeviceState";
      __int16 v29 = -355LL;
    }

  return v10;
}

  return v10;
}

  return v10;
}

    id v6 = 0LL;
  }
}

        id v9 = (char *)v9 + 1;
      }

      while (v46 != v9);
      __int128 v38 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
      __int128 v46 = v38;
    }

    while (v38);
  }
}
}
}

void sub_10004D7D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6528;
  qword_1002E6528 = (uint64_t)v1;
}

void sub_10004D804(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6528;
  qword_1002E6528 = (uint64_t)v1;
}

void sub_10004D834(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 && !v5) {
    goto LABEL_3;
  }
  if (qword_1002E6520 != -1) {
    dispatch_once(&qword_1002E6520, &stru_10027ADE0);
  }
  uint64_t v7 = (os_log_s *)qword_1002E6528;
  if (os_log_type_enabled((os_log_t)qword_1002E6528, OS_LOG_TYPE_ERROR))
  {
    int v16 = 138412290;
    __int128 v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "createManateeIdentity: %@", (uint8_t *)&v16, 0xCu);
  }

  if (v6)
  {
    if (qword_1002E6520 != -1) {
      dispatch_once(&qword_1002E6520, &stru_10027AE00);
    }
    int v8 = (os_log_s *)qword_1002E6528;
    if (os_log_type_enabled((os_log_t)qword_1002E6528, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      __int128 v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "createManateeIdentity: %@",  (uint8_t *)&v16,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v6];
  }

  else
  {
    if (a2)
    {
LABEL_3:
      [*(id *)(a1 + 32) setIdentityCreated:1];
      [*(id *)(a1 + 32) setIdentity:PCSIdentityGetPublicKey(a2)];
      goto LABEL_14;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInterface,  -327LL,  @"Identity creation failed"));
    [*(id *)(a1 + 32) setError:v11];

    if (qword_1002E6520 != -1) {
      dispatch_once(&qword_1002E6520, &stru_10027AE20);
    }
    double v12 = (void *)qword_1002E6528;
    if (os_log_type_enabled((os_log_t)qword_1002E6528, OS_LOG_TYPE_ERROR))
    {
      id v13 = *(void **)(a1 + 32);
      unsigned __int8 v14 = v12;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 error]);
      int v16 = 138412290;
      __int128 v17 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "createManateeIdentity no identity returned: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

LABEL_14:
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v9 addOperation:v10];

  [*(id *)(a1 + 32) setTransaction:0];
}

  unsigned __int8 v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  __int128 v21 = __OFADD__(v20, 1LL);
  id v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

        id v13 = sub_100095E84();
        unsigned __int8 v14 = swift_allocError(&type metadata for KTEligibilityError, v13, 0LL, 0LL);
        *id v15 = 5LL;
        swift_willThrow(v14);
        swift_task_dealloc(*(void *)(v0 + 88));
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      if ((v3 & 0x1000000000000000LL) != 0)
      {
        id v6 = (*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = (void (*)(uint64_t *__return_ptr))sub_1000D51D4;
      }

      else
      {
        id v6 = _StringObject.sharedUTF8.getter(*(void *)(v0 + 112), v1);
        uint64_t v7 = *(void (**)(uint64_t *__return_ptr))(v5 + 16);
        if (!v6)
        {
          uint64_t v33 = *(void *)(v0 + 128);
          v7((uint64_t *)((char *)&v34 + 1));
          if (v33) {
            return swift_task_dealloc(v5);
          }
          int v16 = BYTE1(v34);
LABEL_16:
          swift_task_dealloc(v5);
          swift_bridgeObjectRelease(v1);
          goto LABEL_17;
        }
      }

      int v8 = *(void *)(v0 + 128);
      ((void (*)(uint64_t *__return_ptr, uint64_t))v7)(&v34, v6);
      if (v8) {
        return swift_task_dealloc(v5);
      }
      int v16 = v34;
      goto LABEL_16;
    }
  }

  __int128 v32 = *(void *)(v0 + 128);
  id result = _StringGuts._slowWithCString<A>(_:)(sub_1000D51D4, v2, *(void *)(v0 + 112), v1, &type metadata for Bool);
  if (!v32)
  {
    swift_bridgeObjectRelease(v1);
    int v16 = *(_BYTE *)(v0 + 136);
LABEL_17:
    __int128 v17 = swift_task_dealloc(v2);
    if ((v16 & 1) != 0)
    {
LABEL_18:
      unsigned __int8 v19 = *(void **)(v0 + 80);
      unsigned int v18 = *(void *)(v0 + 88);
      uint64_t v20 = *(double *)(v0 + 72);
      __int128 v21 = *(void **)((char *)v19 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
      id v22 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v19) + 0xB0LL))(v17);
      __int128 v23 = (*(double (**)(uint64_t))((swift_isaMask & *v21) + 0x110LL))(v22);
      Date.init(timeIntervalSinceReferenceDate:)(v20);
      uint64_t v24 = type metadata accessor for Date(0LL);
      __int128 v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL);
      v25(v18, 0LL, 1LL, v24);
      id v26 = (objc_class *)type metadata accessor for ReportTime(0LL);
      __int16 v27 = (char *)objc_allocWithZone(v26);
      uint64_t v28 = (uint64_t)&v27[OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport];
      v25((uint64_t)&v27[OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport], 1LL, 1LL, v24);
      swift_beginAccess(v28, v0 + 16, 33LL, 0LL);
      __int16 v29 = v27;
      sub_1000D5130(v18, v28);
      swift_endAccess(v0 + 16);
      *(double *)&v29[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = v23;

      *(void *)(v0 + 40) = v29;
      *(void *)(v0 + 4_Block_object_dispose(va, 8) = v26;
      uint64_t v10 = objc_msgSendSuper2((objc_super *)(v0 + 40), "init");
      sub_100077CFC(v18, (uint64_t *)&unk_1002DF740);
      goto LABEL_10;
    }

    goto LABEL_14;
  }

  return result;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v9;
}

    if (qword_1002EE830 != -1) {
      dispatch_once(&qword_1002EE830, &stru_1002839B8);
    }
    uint64_t v28 = (os_log_s *)qword_1002EE838;
    if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }

    goto LABEL_18;
  }

  if (qword_1002EE830 != -1) {
    dispatch_once(&qword_1002EE830, &stru_100283998);
  }
  unsigned __int8 v14 = (os_log_s *)qword_1002EE838;
  if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
  }
}
}

void sub_10004DAD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6528;
  qword_1002E6528 = (uint64_t)v1;
}

void sub_10004DB04(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6528;
  qword_1002E6528 = (uint64_t)v1;
}

void sub_10004DB34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6528;
  qword_1002E6528 = (uint64_t)v1;
}

void sub_10004DE28(_Unwind_Exception *a1)
{
}

void sub_10004E088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

uint64_t sub_10004E0D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004E0E0(uint64_t a1)
{
}

void sub_10004E0E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E118(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id to = 0LL;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v7 = objc_loadWeakRetained(&to);

  if (v7)
  {
    if ([v5 isEqual:@"TransparencySFASettings"])
    {
      if (qword_1002E6530 != -1) {
        dispatch_once(&qword_1002E6530, &stru_10027AE88);
      }
      int v8 = (os_log_s *)qword_1002E6538;
      if (os_log_type_enabled((os_log_t)qword_1002E6538, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating configuration for SFA", buf, 2u);
      }

      id v9 = objc_loadWeakRetained(&to);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 delegate]);
      [v10 updateSFAConfigurationWithData:v6];
    }

    if ([v5 isEqual:@"TransparencyDewSettings"])
    {
      if (qword_1002E6530 != -1) {
        dispatch_once(&qword_1002E6530, &stru_10027AEA8);
      }
      uint64_t v11 = (os_log_s *)qword_1002E6538;
      if (os_log_type_enabled((os_log_t)qword_1002E6538, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)unsigned __int8 v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Updating configuration for dew", v14, 2u);
      }

      id v12 = objc_loadWeakRetained(&to);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 delegate]);
      [v13 updateDewConfigurationWithData:v6];
    }
  }

  objc_destroyWeak(&to);
}

void sub_10004E2D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_10004E2E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E318(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E348(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1002E6530 != -1) {
    dispatch_once(&qword_1002E6530, &stru_10027AEF0);
  }
  id v3 = (os_log_s *)qword_1002E6538;
  if (os_log_type_enabled((os_log_t)qword_1002E6538, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    id v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating configuration done: %{public}@",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_10004E414(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E58C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E8F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004E920(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_1002E6530 != -1) {
      dispatch_once(&qword_1002E6530, &stru_10027AF78);
    }
    uint64_t v10 = (os_log_s *)qword_1002E6538;
    if (os_log_type_enabled((os_log_t)qword_1002E6538, OS_LOG_TYPE_ERROR))
    {
      int v17 = 138543362;
      id v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "ConfigurationData not present/wrong type: %{public}@",  (uint8_t *)&v17,  0xCu);
    }
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 recordID]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 recordName]);

    if (v12)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"configurationData"]);
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSData, v14);
      if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      }

      else
      {
        if (qword_1002E6530 != -1) {
          dispatch_once(&qword_1002E6530, &stru_10027AF98);
        }
        int v16 = (os_log_s *)qword_1002E6538;
        if (os_log_type_enabled((os_log_t)qword_1002E6538, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v17) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "ConfigurationData not present/wrong type",  (uint8_t *)&v17,  2u);
        }
      }
    }
  }
}

void sub_10004EB08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

void sub_10004EB38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6538;
  qword_1002E6538 = (uint64_t)v1;
}

uint64_t sub_10004EB68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004F730(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_10004F760(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_10004F790(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_10004F7C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_10004F7F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_10004FC9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004FCC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004FCD0(uint64_t a1)
{
}

void sub_10004FCD8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTRequest"));
  [v2 setPropertiesToFetch:&off_10029A250];
  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"sequenceId",  0LL));
  uint64_t v14 = v3;
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  [v2 setSortDescriptors:v4];

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v6 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7 && [v7 count])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:0]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"sequenceId"]);

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (char *)[v9 longLongValue] + 1;
  }

  else if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    objc_msgSend( *(id *)(a1 + 40),  "reportCoreDataEventForEntity:write:code:underlyingError:",  @"KTRequest",  0,  -126);
  }

  uint64_t v10 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_10004FF28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (qword_1002E6540 != -1) {
      dispatch_once(&qword_1002E6540, &stru_10027B0B0);
    }
    id v8 = (void *)qword_1002E6548;
    if (os_log_type_enabled((os_log_t)qword_1002E6548, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v8;
      uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 URL]);
      *(_DWORD *)buf = 138412290;
      __int16 v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loaded store at %@", buf, 0xCu);
    }

    uint64_t v11 = *(void **)(a1 + 32);
    id v25 = 0LL;
    unsigned int v12 = [v11 createContexts:&v25];
    id v13 = v25;
    uint64_t v14 = v13;
    if (v12)
    {
      uint64_t v15 = *(void **)(a1 + 32);
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 logger]);
      int v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyFollowup instance](&OBJC_CLASS___TransparencyFollowup, "instance"));
      id v24 = v14;
      unsigned int v18 = [v15 createDataStores:v16 followup:v17 error:&v24];
      id v7 = v24;

      if (v18) {
        goto LABEL_20;
      }
    }

    else
    {
      id v7 = v13;
    }
  }

  if (qword_1002E6540 != -1) {
    dispatch_once(&qword_1002E6540, &stru_10027B0D0);
  }
  unsigned __int8 v19 = (void *)qword_1002E6548;
  if (os_log_type_enabled((os_log_t)qword_1002E6548, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = *(void **)(a1 + 32);
    __int128 v21 = v19;
    unsigned int v22 = [v20 movedDatabase];
    __int128 v23 = &stru_10028E390;
    if (v22) {
      __int128 v23 = @" again";
    }
    *(_DWORD *)buf = 138412546;
    __int16 v27 = v23;
    __int16 v28 = 2112;
    id v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to load stack%@: %@", buf, 0x16u);
  }

  if (![*(id *)(a1 + 32) shouldMoveAsideDatabase:v7]
    || ![*(id *)(a1 + 32) moveAsideDatabase:v7])
  {
    [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"Initialization" hardFailure:1 write:1 code:-127 underlyingError:v7];
    [*(id *)(a1 + 32) setPersistentContainer:0];
LABEL_20:
    [*(id *)(a1 + 32) setupComplete];
    goto LABEL_21;
  }

  [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"Initialization" hardFailure:0 write:1 code:-127 underlyingError:v7];
  [*(id *)(a1 + 32) setMovedDatabase:1];
  [*(id *)(a1 + 32) loadPersistentStores];
LABEL_21:
}

void sub_100050218(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050248(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050674( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const __CFString *a11, const __CFString *a12, const __CFString *a13, const __CFString *a14, const __CFString *a15, _UNKNOWN **a16, uint64_t a17, void *a18, const __CFString *a19, void *a20, __int128 buf)
{
  if (a2 == 1)
  {
    id v23 = objc_begin_catch(a1);
    if (qword_1002E6540 != -1) {
      dispatch_once(&qword_1002E6540, &stru_10027B158);
    }
    id v24 = (os_log_s *)qword_1002E6548;
    if (os_log_type_enabled((os_log_t)qword_1002E6548, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "CoreData context save exception: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);
    [v25 setValue:v26 forKey:@"CoreDataExceptionName"];

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v23 reason]);
    [v25 setValue:v27 forKey:@"CoreDataExceptionReason"];

    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v23 userInfo]);
    [v25 setValue:v28 forKey:@"CoreDataExceptionUserInfo"];

    if (v21 && *v21) {
      [v25 setValue:*v21 forKey:NSUnderlyingErrorKey];
    }
    id v29 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v30 = kTransparencyErrorDatabase;
    __int128 v31 = -[NSError initWithDomain:code:userInfo:]( v29,  "initWithDomain:code:userInfo:",  kTransparencyErrorDatabase,  -110LL,  v25);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v23 reason]);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  v30,  -110LL,  v31,  @"Error persisting to database: %@"));

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v22 logger]);
    a11 = @"errorCode";
    a12 = @"errorDomain";
    a16 = &off_100299B88;
    a17 = v30;
    a13 = @"exceptionName";
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);
    a18 = v34;
    a19 = @"Persistence";
    a14 = @"entityType";
    a15 = @"write";
    a20 = &__kCFBooleanTrue;
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &a16,  &a11,  5LL));
    [v33 logHardFailureForEventNamed:@"ktCoreDataEvent" withAttributes:v35];

    if (qword_1002E6540 != -1) {
      dispatch_once(&qword_1002E6540, &stru_10027B178);
    }
    id v36 = (os_log_s *)(id)qword_1002E6548;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v23 reason]);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "Error saving to database: %@",  (uint8_t *)&buf,  0xCu);
    }

    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v32));
    if (v38) {
      BOOL v39 = v21 != 0LL;
    }
    else {
      BOOL v39 = 0;
    }
    if (v39) {
      *__int128 v21 = v38;
    }

    objc_end_catch();
    JUMPOUT(0x100050600LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000509E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050A18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050A48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050A78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6548;
  qword_1002E6548 = (uint64_t)v1;
}

void sub_100050F9C(_Unwind_Exception *a1)
{
}

void sub_100051038(_Unwind_Exception *a1)
{
}

void sub_100051318(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100051348(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000514C8(_Unwind_Exception *a1)
{
}

void sub_1000514E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100051C38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100051C58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

uint64_t sub_100051C88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100051C98(uint64_t a1)
{
}

void sub_100051CA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_1002E6550 != -1) {
      dispatch_once(&qword_1002E6550, &stru_10027B218);
    }
    id v7 = (os_log_s *)qword_1002E6558;
    if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412546;
      id v15 = v5;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "ContextStore configuration error for %@: %@",  (uint8_t *)&v14,  0x16u);
    }
  }

  else
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 dataStore]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) staticKeyStore]);
    uint64_t v11 = *(void *)(a1 + 48);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachine]);
    id v13 =  [v8 createContextForApplication:v5 dataStore:v9 staticKeyStore:v10 logClient:v11 stateMachine:v12];
  }
}

void sub_100051E34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100051E64(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contexts]);
  id v4 = [v3 count];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dataStore]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) staticKeyStore]);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachine]);
    id v10 = [v5 createContextForTLT:v6 staticKeyStore:v7 logClient:v8 stateMachine:v9];
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contexts]);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:*(void *)(a1 + 48)]);

    if (v12)
    {
      id v13 = 0LL;
    }

    else
    {
      id v13 = v14;
      if (!v13) {
        id v13 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -148LL,  @"Failed to configure public key store for %@",  *(void *)(a1 + 48)));
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100051FD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000521A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = -[KTVerifierResult initWithUri:application:ktResult:]( objc_alloc(&OBJC_CLASS___KTVerifierResult),  "initWithUri:application:ktResult:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  0LL);
    (*(void (**)(uint64_t, KTVerifierResult *, id))(v6 + 16))(v6, v7, v10);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  0LL,  *(void *)(a1 + 40)));
    [v8 logResultForEvent:v9 hardFailure:0 result:v10];
  }

  else
  {
    [a2 validatePeerRequestId:*(void *)(a1 + 48) revalidate:*(unsigned __int8 *)(a1 + 64) fetchNow:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_10005241C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(a1[7] + 16LL))();
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[KTContext validateEventName:application:]( &OBJC_CLASS___KTContext,  "validateEventName:application:",  2LL,  a1[4]));
    [v12 logResultForEvent:v13 hardFailure:0 result:v6];
  }

  else
  {
    id v15 = 0LL;
    id v16 = 0LL;
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    id v14 = 0LL;
    [a2 validateEnrollmentRequestId:v7 transparentData:&v16 loggableDatas:&v15 cloudOptIn:v8 error:&v14];
    id v9 = v16;
    id v10 = v15;
    id v11 = v14;
    (*(void (**)(void))(a1[7] + 16LL))();
  }
}

void sub_10005272C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_10005275C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100052978(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000529A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000529D8(id a1, NSString *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_1002E6550 != -1) {
      dispatch_once(&qword_1002E6550, &stru_10027B3B8);
    }
    uint64_t v6 = (os_log_s *)qword_1002E6558;
    if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to update key store for %@ with error %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100052ACC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100052B6C(_Unwind_Exception *a1)
{
}

void sub_100052C34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifyInclusionProofEvent",  *(void *)(a1 + 32)));
    [v12 logResultForEvent:v13 hardFailure:0 result:v6];
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v14 = 0LL;
    unsigned int v8 = [a2 verifyInclusionProofDownload:v7 error:&v14];
    id v9 = v14;
    id v10 = v9;
    if (!v8 || v9)
    {
      if (qword_1002E6550 != -1) {
        dispatch_once(&qword_1002E6550, &stru_10027B3D8);
      }
      id v11 = (os_log_s *)qword_1002E6558;
      if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "failed to handle inclusion proof download: %@",  buf,  0xCu);
      }
    }
  }
}

void sub_100052D98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100052E7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifyConsistencyProofEvent",  *(void *)(a1 + 32)));
    [v11 logResultForEvent:v12 hardFailure:0 result:v6];
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v13 = 0LL;
    id v8 = [a2 verifyConsistencyProofDownload:v7 error:&v13];
    id v9 = v13;
    if (v8 != (id)1)
    {
      if (qword_1002E6550 != -1) {
        dispatch_once(&qword_1002E6550, &stru_10027B420);
      }
      id v10 = (os_log_s *)qword_1002E6558;
      if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to handle consistency proof download: %@",  buf,  0xCu);
      }
    }
  }
}

void sub_100052FE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_10005310C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifyUnknownProofEvent",  *(void *)(a1 + 32)));
    [v6 logResultForEvent:v7 hardFailure:0 result:v8];
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    [v6 failHeadDownload:*(void *)(a1 + 48) failure:*(void *)(a1 + 56) logClient:*(void *)(a1 + 64)];
  }
}

void sub_100053254(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 transcript]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 serialize]);
  [v3 addObject:v4];
}

LABEL_23:
}

        unsigned int v12 = (v25 - 1) & v25;
        id v23 = __clz(__rbit64(v25)) + (v16 << 6);
      }

      __int16 v27 = 8 * v23;
      __int16 v28 = *(void **)(*(void *)(v5 + 48) + v27);
      id v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((v38 & 1) == 0)
      {
        uint64_t v30 = v28;
        __int128 v31 = v29;
      }

      id result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      id v17 = -1LL << *(_BYTE *)(v8 + 32);
      unsigned int v18 = result & ~v17;
      unsigned __int8 v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          id v34 = v19 == v33;
          if (v19 == v33) {
            unsigned __int8 v19 = 0LL;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v14 + 8 * v19);
        }

        while (v35 == -1);
        uint64_t v20 = __clz(__rbit64(~v35)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      __int128 v21 = 8 * v20;
      *(void *)(*(void *)(v8 + 48) + v21) = v28;
      *(void *)(*(void *)(v8 + 56) + v21) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  id result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10007D178(0LL, (unint64_t *)&qword_1002E1220, &OBJC_CLASS___KTOptInState_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

  swift_bridgeObjectRelease(v4);
  return 0LL;
}

        a1 = (v60 - 1) & v60;
        uint64_t v58 = __clz(__rbit64(v60)) + (v39 << 6);
      }

      id v62 = *((void *)v184 + 6) + 16 * v58;
      uint64_t v20 = *(int **)v62;
      id v23 = *(char **)(v62 + 8);
      id v25 = *(void *)(*((void *)v184 + 7) + 8 * v58);
      swift_bridgeObjectRetain(v23);
      __int128 v63 = swift_bridgeObjectRetain(v25);
      id v42 = (uint64_t)v3;
      __int128 v64 = v85(v63);
      a2 = (id)(*(uint64_t (**)(uint64_t, int *, char *))((swift_isaMask & *v3) + 0xB0LL))(v64, v20, v23);
      swift_bridgeObjectRelease(v64);
      __int128 v65 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v65) {
        goto LABEL_26;
      }
LABEL_73:
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v23);
    }

    if (v25 < 0) {
      __int128 v86 = v25;
    }
    else {
      __int128 v86 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v25);
    __int128 v65 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v25);
    if (!v65) {
      goto LABEL_73;
    }
LABEL_26:
    __int128 v66 = v65 - 1;
    if (__OFSUB__(v65, 1LL)) {
      break;
    }
    id v163 = v25 & 0xC000000000000001LL;
    if ((v25 & 0xC000000000000001LL) != 0)
    {
      swift_bridgeObjectRetain(v25);
      unsigned __int8 v103 = specialized _ArrayBuffer._getElementSlowPath(_:)(v65 - 1, v25);
      swift_bridgeObjectRelease(v25);
      __int128 v67 = (id)v103;
    }

    else
    {
      if ((v66 & 0x8000000000000000LL) != 0) {
        goto LABEL_118;
      }
      if (v66 >= *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_119;
      }
      __int128 v67 = *(id *)(v25 + 8 * v66 + 32);
    }

    __int128 v68 = v179 == 1;
    v171 = v67;
    if (v68 == [v67 optIn])
    {
LABEL_35:
      if (a2)
      {
        v151 = a2;
        uint64_t v71 = [v151 smtTimestamp];
        if (v71)
        {
          uint64_t v72 = v71;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

          id v73 = v181;
          id v154 = *(void (**)(uint64_t, char *, void *))(v180 + 32);
          v154((uint64_t)v167, v174, v181);
          v158((uint64_t)v167, 0LL, 1LL, v73);
          char v157 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v180 + 48);
          if (v157((uint64_t)v167, 1LL, v73) != 1)
          {
            v154((uint64_t)v172, v167, v73);
            id v153 = v25 & 0xFFFFFFFFFFFFFF8LL;
            id v152 = v25 + 32;
            id v74 = (uint64_t)v169;
            while (1)
            {
              __int128 v59 = __OFSUB__(v65--, 1LL);
              if (v59) {
                goto LABEL_120;
              }
              if (v163)
              {
                id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v25);
              }

              else
              {
                if ((v65 & 0x8000000000000000LL) != 0) {
                  goto LABEL_121;
                }
                if (v65 >= *(void *)(v153 + 16)) {
                  goto LABEL_122;
                }
                id v75 = *(id *)(v152 + 8 * v65);
              }

              a2 = v75;
              sub_100085CA8(v177, v74, (uint64_t *)&unk_1002DF740);
              if (v157(v74, 1LL, v181) == 1)
              {
                sub_10009691C(v74);
              }

              else
              {
                v154((uint64_t)v173, (char *)v74, v181);
                id v160 = [a2 smtTimestamp];
                id v76 = v174;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v160);

                LODWORD(v160) = static Date.> infix(_:_:)(v173, v76);
                uint64_t v77 = v76;
                id v42 = *(void *)(v180 + 8);
                ((void (*)(char *, void *))v42)(v77, v181);
                ((void (*)(char *, void *))v42)(v173, v181);
                if ((v160 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v25);

                  id v25 = (uint64_t)v151;
                  swift_bridgeObjectRelease(v23);
                  unsigned __int8 v85 = v185;
                  goto LABEL_71;
                }
              }

              LODWORD(v160) = v179 == 1;
              uint64_t v78 = [a2 optIn];
              v155 = *(void (**)(char *, char *, void *))(v180 + 16);
              v155(v175, v172, v181);
              id v161 = a2;
              if ((_DWORD)v160 == v78)
              {
                v156 = *(void (**)(char *, void *))(v180 + 8);
                v156(v175, v181);
              }

              else
              {
                __int16 v79 = [a2 smtTimestamp];
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

                id v80 = v168;
                Date.addingTimeInterval(_:)(1.0);
                LODWORD(v160) = static Date.> infix(_:_:)(v174, v80);
                __int128 v81 = *(void (**)(char *, void *))(v180 + 8);
                __int128 v82 = v80;
                __int128 v83 = v181;
                v81(v82, v181);
                v81(v174, v83);
                v156 = v81;
                v81(v175, v83);
                if ((v160 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v25);
                  __int128 v87 = (void *)type metadata accessor for KTError(0LL);
                  id v160 = v87;
                  __int128 v88 = sub_1000E29D8();
                  id v163 = swift_allocError(v87, v88, 0LL, 0LL);
                  __int128 v90 = v89;
                  __int128 v91 = sub_100072CC4(&qword_1002E21C0);
                  __int128 v92 = (char *)v90 + *(int *)(v91 + 48);
                  id v93 = (char *)v90 + *(int *)(v91 + 64);
                  *__int128 v90 = v20;
                  v90[1] = (int *)v23;
                  uint64_t v20 = (int *)[v161 smtTimestamp];
                  __int128 v94 = v166;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

                  __int128 v95 = v94;
                  id v96 = v181;
                  v154((uint64_t)v92, v95, v181);
                  uint64_t v97 = v92;
                  id v98 = (void (*)(char *, void, uint64_t, void *))v158;
                  v158((uint64_t)v97, 0LL, 1LL, v96);
                  v155(v93, v172, v96);
                  v98(v93, 0LL, 1LL, v96);
                  swift_storeEnumTagMultiPayload(v90, v160, 1LL);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v178);
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v178 = sub_1000E2680(0LL, v178[2] + 1LL, 1, v178);
                  }
                  unsigned __int8 v85 = v185;
                  __int128 v100 = v178;
                  id v102 = v178[2];
                  id v101 = v178[3];
                  a2 = v161;
                  if (v102 >= v101 >> 1) {
                    __int128 v100 = sub_1000E2680((void *)(v101 > 1), v102 + 1, 1, v178);
                  }
                  v100[2] = v102 + 1;
                  uint64_t v178 = v100;
                  v100[v102 + 4] = v163;

                  id v25 = (uint64_t)v151;
LABEL_70:
                  id v42 = (uint64_t)v156;
LABEL_71:
                  ((void (*)(char *, void *))v42)(v172, v181);
                  goto LABEL_11;
                }
              }

              LODWORD(v160) = v179 == 1;
              a2 = v161;
              __int128 v84 = [v161 optIn];

              if ((_DWORD)v160 == v84)
              {
                id v74 = (uint64_t)v169;
                if (v65) {
                  continue;
                }
              }

              swift_bridgeObjectRelease(v25);
              id v25 = (uint64_t)v151;

              swift_bridgeObjectRelease(v23);
              unsigned __int8 v85 = v185;
              goto LABEL_70;
            }
          }
        }

        else
        {
          v158((uint64_t)v167, 1LL, 1LL, v181);
        }

        swift_bridgeObjectRelease(v25);

        sub_10009691C((uint64_t)v167);
      }

      else
      {
        swift_bridgeObjectRelease(v25);
      }

      v111 = [v171 smtTimestamp];
      v112 = (uint64_t)v165;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v111);

      v113 = v181;
      v158(v112, 0LL, 1LL, v181);
      v114 = v180;
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v180 + 48))(v112, 1LL, v113) == 1)
      {
        sub_10009691C(v112);
        v115 = (int *)v162;
        swift_bridgeObjectRetain(v162);
        id v25 = sub_100079A58((uint64_t)v20, (uint64_t)v23);
        v117 = v116;
        swift_bridgeObjectRelease(v115);
        if ((v117 & 1) != 0)
        {
          v118 = swift_isUniquelyReferenced_nonNull_native(v115);
          id v186 = v115;
          uint64_t v20 = v115;
          v119 = (uint64_t)v164;
          if (!v118)
          {
            sub_1000E2424();
            uint64_t v20 = v186;
          }

          swift_bridgeObjectRelease(*(void *)(*((void *)v20 + 6) + 16 * v25 + 8));
          id v42 = (uint64_t)v181;
          (*(void (**)(uint64_t, uint64_t, void *))(v180 + 32))( v119,  *((void *)v20 + 7) + *(void *)(v180 + 72) * v25,  v181);
          char v162 = (unint64_t)v20;
          sub_1000E205C(v25, (uint64_t)v20);
          swift_bridgeObjectRelease(0x8000000000000000LL);
          v120 = 0LL;
        }

        else
        {
          v120 = 1LL;
          id v42 = (uint64_t)v181;
          v119 = (uint64_t)v164;
        }

        v158(v119, v120, 1LL, (id)v42);
        swift_bridgeObjectRelease(v23);
        sub_10009691C(v119);
      }

      else
      {
        v121 = v112;
        v122 = (uint64_t)v174;
        (*(void (**)(char *, uint64_t, void *))(v114 + 32))(v174, v121, v113);
        id v25 = v162;
        v123 = swift_isUniquelyReferenced_nonNull_native(v162);
        id v186 = (int *)v25;
        id v42 = (uint64_t)&v186;
        sub_1000E2258(v122, (uint64_t)v20, (uint64_t)v23, v123);
        char v162 = (unint64_t)v186;

        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }
    }

    else
    {
      __int128 v69 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x80LL))();
      if (v69 != 2)
      {
        uint64_t v70 = v69;
        if (((v69 ^ [v171 optIn]) & 1) == 0)
        {
          v179 = v70 & 1;
          v159 = 1;
          goto LABEL_35;
        }
      }

      swift_bridgeObjectRelease(v25);
      id v104 = type metadata accessor for KTError(0LL);
      v105 = sub_1000E29D8();
      id v25 = swift_allocError(v104, v105, 0LL, 0LL);
      void *v106 = v20;
      v106[1] = (int *)v23;
      if (v179 == 1) {
        v107 = 3LL;
      }
      else {
        v107 = 4LL;
      }
      swift_storeEnumTagMultiPayload(v106, v104, v107);
      if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) != 0) {
        uint64_t v108 = v178;
      }
      else {
        uint64_t v108 = sub_1000E2680(0LL, v178[2] + 1LL, 1, v178);
      }
      v110 = v108[2];
      v109 = v108[3];
      id v42 = v110 + 1;
      if (v110 >= v109 >> 1) {
        uint64_t v108 = sub_1000E2680((void *)(v109 > 1), v110 + 1, 1, v108);
      }
      v108[2] = v42;
      uint64_t v178 = v108;
      v108[v110 + 4] = v25;
    }
  }

  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
}

    id v14 = (v23 - 1) & v23;
    __int128 v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    id v25 = *(void *)(v8 + 56);
    id v26 = v8;
    __int16 v27 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    id v29 = *v27;
    __int16 v28 = v27[1];
    uint64_t v30 = *(void *)(v6 + 72);
    __int128 v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v47, *(void *)(v10 + 40));
    String.hash(into:)(v47, v29, v28);
    id result = Hasher._finalize()();
    __int128 v32 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v33 = result & ~v32;
    id v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      unsigned int v18 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          id v34 = 0LL;
        }
        v35 |= v37;
        __int128 v38 = *(void *)(v15 + 8 * v34);
      }

      while (v38 == -1);
      unsigned int v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unsigned __int8 v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    void *v19 = v29;
    v19[1] = v28;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v10 + 56) + v30 * v18,  v45,  v46);
    ++*(void *)(v10 + 16);
    id v8 = v26;
  }

  id v24 = v22 + 2;
  if (v24 < v42)
  {
    id v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        id v17 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_43;
        }
        if (v17 >= v42) {
          goto LABEL_36;
        }
        id v23 = v43[v17];
        ++v24;
        if (v23) {
          goto LABEL_23;
        }
      }
    }

    id v17 = v24;
    goto LABEL_23;
  }

          id v25 = 0LL;
          goto LABEL_24;
        }

        if (!a4) {
          goto LABEL_23;
        }
        id v26 = kTransparencyErrorDecode;
        __int16 v27 = @"failed to parse account mismatch from Mutation";
        __int16 v28 = -246LL;
      }

      else
      {
        if (!a4) {
          goto LABEL_23;
        }
        id v26 = kTransparencyErrorDecode;
        __int16 v27 = @"failed to parse app version from Mutation";
        __int16 v28 = -245LL;
      }
    }

    else
    {
      if (!a4) {
        goto LABEL_23;
      }
      id v26 = kTransparencyErrorDecode;
      __int16 v27 = @"failed to parse client data from Mutation";
      __int16 v28 = -244LL;
    }

  return v10;
}

void sub_100053688(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000536B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000536E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100053718(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"RetrieveTLTSTHEvent",  kKTApplicationIdentifierTLT));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v11 logResultForEvent:v9 hardFailure:0 result:v7];

    if (qword_1002E6550 != -1) {
      dispatch_once(&qword_1002E6550, &stru_10027B4F0);
    }
    unsigned int v12 = (os_log_s *)qword_1002E6558;
    if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "failed to get context for TLT STH retrieval: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (qword_1002E6550 != -1) {
      dispatch_once(&qword_1002E6550, &stru_10027B510);
    }
    id v8 = (os_log_s *)qword_1002E6558;
    if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "retrieving STH for gossip", buf, 2u);
    }

    id v14 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 retrieveTLTSTH:&v14]);
    id v10 = v14;
    if (v9)
    {
      [*(id *)(a1 + 32) setCachedGossip:v9];
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
      [*(id *)(a1 + 32) setCachedGossip:v13];
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100053954(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100053984(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_100053AA0(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"ReceivedSTHsFromPeersEvent",  kKTApplicationIdentifierTLT));
    [v6 logResultForEvent:v7 hardFailure:0 result:v8];

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    [a2 processSTHsFromPeers:a1[4] verifier:a1[5] completionHandler:a1[6]];
  }
}

void sub_100053C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100053C60(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 contextShouldGossip];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) |= result;
  return result;
}

void sub_100053D60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v6 logResultForEvent:@"KTAccountKeySign" hardFailure:0 result:v7];
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 accountKeyServer]);
    [v6 signData:*(void *)(a1 + 32) completionBlock:*(void *)(a1 + 40)];
  }
}

void sub_100053EA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v6 logResultForEvent:@"KTAccountKeyRoll" hardFailure:0 result:v7];
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 accountKeyServer]);
    [v6 rollKey:*(void *)(a1 + 32)];
  }
}

void sub_100053FFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OptInServerGet",  *(void *)(a1 + 32)));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v7 logResultForEvent:v6 hardFailure:0 result:v8];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 optInServer]);
    [v6 getOptInState:*(unsigned __int8 *)(a1 + 48) completionBlock:*(void *)(a1 + 40)];
  }
}

void sub_100054184(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (!a2 || v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OptInServerSet",  *(void *)(a1 + 32)));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v9 logResultForEvent:v6 hardFailure:0 result:v10];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 optInServer]);
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    [v6 changeOptInState:v7 dataStore:v8 completionBlock:*(void *)(a1 + 48)];
  }
}

void sub_1000543C0(void *a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    (*(void (**)(void))(a1[8] + 16LL))();
  }

  else
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    id v9 = 0LL;
    [a2 handleBatchQueryResponse:v4 queryRequest:v5 receiptDate:v6 fetchId:v7 error:&v9 transparentDataHandler:a1[9]];
    id v8 = v9;
    (*(void (**)(void))(a1[8] + 16LL))();
  }

void sub_100054568(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    if (qword_1002E6550 != -1) {
      dispatch_once(&qword_1002E6550, &stru_10027B648);
    }
    id v8 = (os_log_s *)qword_1002E6558;
    if (os_log_type_enabled((os_log_t)qword_1002E6558, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Context for application %@ unavailable",  buf,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorInternal,  -167LL,  v7,  @"Context for application %@ unavailable",  *(void *)(a1 + 32)));
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    [v5 queryForUris:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 64) cachedYoungerThan:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_1000546C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

id sub_100054844(void *a1, void *a2, uint64_t a3)
{
  if (!a2 || a3) {
    return (id)(*(uint64_t (**)(void))(a1[9] + 16LL))();
  }
  else {
    return _[a2 replaySelfValidate:a1[4] pcsAccountKey:a1[5] queryRequest:a1[6] queryResponse:a1[7] responseTime:a1[8] completionHandler:a1[9]];
  }
}

void sub_100054960(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[KTVerifierResult resultsForUris:application:failure:]( &OBJC_CLASS___KTVerifierResult,  "resultsForUris:application:failure:",  v7,  *(void *)(a1 + 40),  v9));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }

  else
  {
    [a2 validatePeers:*(void *)(a1 + 32) fetchNow:*(unsigned __int8 *)(a1 + 56) completionBlock:*(void *)(a1 + 48)];
  }
}

void sub_100054BDC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6558;
  qword_1002E6558 = (uint64_t)v1;
}

void sub_1000552F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_10005531C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005532C(uint64_t a1)
{
}

void sub_100055334(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 createSingleQuery:v3 backgroundOpId:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1000553B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_1000553E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorNetwork,  -329LL,  v6,  @"Failed to get a response for single query rpc with id: %@",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if (qword_1002E6560 != -1) {
      dispatch_once(&qword_1002E6560, &stru_10027B748);
    }
    unsigned int v18 = (os_log_s *)qword_1002E6568;
    if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v30 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to get a response for single query rpc with id: %@",  buf,  0xCu);
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v28 = *(id *)(v22 + 40);
    [v20 failRpcId:v21 failure:v7 error:&v28];
    objc_storeStrong((id *)(v22 + 40), v28);
  }

  else
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v26 = (void *)v8;
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v5 status]));
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"APS"]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id obj = *(id *)(v13 + 40);
    unsigned int v14 = [v26 setResponseForRpcId:v25 response:v24 responseStatus:v9 usedReversePush:v10 != 0 serverHint:v12 error:&obj];
    objc_storeStrong((id *)(v13 + 40), obj);

    uint64_t v7 = 0LL;
    if (v14)
    {
      [*(id *)(a1 + 32) validatePendingPeersForRpcId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      [*(id *)(a1 + 32) validatePendingSMTsForRpcId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    }
  }
}

void sub_1000556D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100055AC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_100055AF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100055B20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100055B50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (qword_1002E6560 != -1) {
      dispatch_once(&qword_1002E6560, &stru_10027B7D0);
    }
    uint64_t v7 = (os_log_s *)qword_1002E6568;
    if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 141558530;
      uint64_t v12 = 1752392040LL;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Created RPCSingleQuery for %{mask.hash}@ with rpcId %{public}@",  (uint8_t *)&v11,  0x20u);
    }
  }

  else
  {
    if (qword_1002E6560 != -1) {
      dispatch_once(&qword_1002E6560, &stru_10027B7F0);
    }
    id v9 = (os_log_s *)qword_1002E6568;
    if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 141558530;
      uint64_t v12 = 1752392040LL;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to create RPCSingleQuery for %{mask.hash}@: %@",  (uint8_t *)&v11,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }
}

void sub_100055D08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100055D38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100056070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_10005609C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_1000560CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_1000560FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!v5 || v6)
  {
    if (qword_1002E6560 != -1) {
      dispatch_once(&qword_1002E6560, &stru_10027B878);
    }
    id v17 = (os_log_s *)qword_1002E6568;
    if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "optInStateForUri: failed to check opt-in, network failure: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"ResponseTime"]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate kt_dateFromString:](&OBJC_CLASS___NSDate, "kt_dateFromString:", v9));

    int v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained verifier]);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    id v20 = 0LL;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1000563B0;
    v18[3] = &unk_10027B8C0;
    id v19 = *(id *)(a1 + 48);
    id v14 = [v11 handleQueryResponse:v5 queryRequest:v12 receiptDate:v10 fetchId:v13 error:&v20 transparentDataHandler:v18];
    id v15 = v20;

    if (v14 != (id)1)
    {
      if (qword_1002E6560 != -1) {
        dispatch_once(&qword_1002E6560, &stru_10027B8E0);
      }
      id v16 = (os_log_s *)qword_1002E6568;
      if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v22 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "optInStateForUri: failed to check opt-in, KT server failure: %@",  buf,  0xCu);
      }
    }
  }
}

void sub_100056380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_1000563B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_1002E6560 != -1) {
      dispatch_once(&qword_1002E6560, &stru_10027B898);
    }
    uint64_t v10 = (os_log_s *)qword_1002E6568;
    if (os_log_type_enabled((os_log_t)qword_1002E6568, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138412290;
      id v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "optInStateForUri: failed to verify opt-in, KT server failure: %@",  (uint8_t *)&v11,  0xCu);
    }

    (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), 2LL, v9);
  }

  else
  {
    (*(void (**)(void, id, void))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [v8 currentAccountOptInState],  0);
  }
}

void sub_1000564E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_100056518(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6568;
  qword_1002E6568 = (uint64_t)v1;
}

void sub_1000579B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000579E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

id sub_100057A1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performInitialDispatches];
}

id sub_100057A24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) generateFallbackSysdiagnose];
}

uint64_t sub_100057B74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100057B84(uint64_t a1)
{
}

void sub_100057B8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

void sub_100057E1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100058094(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005843C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10005846C(uint64_t a1)
{
  v17[0] = 0LL;
  v17[1] = v17;
  v17[2] = 0x3032000000LL;
  v17[3] = sub_100057B74;
  void v17[4] = sub_100057B84;
  id v18 = 0LL;
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcDataStore]);
  id v16 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 addValidateRequest:v3 dataStore:v4 error:&v16]);
  id v6 = v16;
  id v18 = v5;

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 settings]);
  unsigned __int8 v9 = [v8 getBool:kTransparencyFlagDisableAsyncValidation];

  if ((v9 & 1) == 0)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100058604;
    v11[3] = &unk_10027B9F8;
    uint64_t v10 = *(void **)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    id v15 = v17;
    id v13 = v10;
    id v14 = *(id *)(a1 + 48);
    [v12 runAsynchronousTransactionName:"com.apple.transparencyd.validatePeer" block:v11];
  }

  _Block_object_dispose(v17, 8);
}

void sub_1000585EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100058604(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workloopContextStore]);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ktLogClient]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000586CC;
  v7[3] = &unk_10027B9D0;
  void v7[4] = *(void *)(a1 + 32);
  [v2 validatePeerRequestId:v4 uri:v5 application:v3 logClient:v6 completionHandler:v7];
}

id sub_1000586CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a3) {
    return [v3 logFinishFailureEvent:@"validatePeerUri-Async" error:a3];
  }
  else {
    return [v3 logFinishSuccessEvent:@"validatePeerUri-Async"];
  }
}

void sub_100058964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100058980(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v41 = 0LL;
  id v42 = &v41;
  uint64_t v43 = 0x3032000000LL;
  uint64_t v44 = sub_100057B74;
  uint64_t v45 = sub_100057B84;
  id v46 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInterface,  -159LL,  @"Request associated with UUID %@ does not have expected uri %@. Got %@",  v14,  v15,  v16));
    uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    [*(id *)(a1 + 48) logFinishFailureEvent:@"validatePeerResult" error:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    id v20 = -[KTVerifierResult initWithUri:application:ktResult:]( objc_alloc(&OBJC_CLASS___KTVerifierResult),  "initWithUri:application:ktResult:",  *(void *)(a1 + 32),  0LL,  0LL);
    uint64_t v21 = (void *)v42[5];
    v42[5] = (uint64_t)v20;

    uint64_t v22 = v42[5];
    uint64_t v23 = *(void *)(a1 + 56);
    id v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
    (*(void (**)(uint64_t, uint64_t, void *))(v23 + 16))(v23, v22, v24);
LABEL_7:

    goto LABEL_8;
  }

  if ([v3 type] && objc_msgSend(v3, "type") != (id)1)
  {
    uint64_t v25 = *(void *)(a1 + 40);
    id v26 = [v3 type];
    uint64_t v27 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInterface,  -124LL,  @"Request associated with UUID %@ is not of expected type %llu. Got %lld.",  v25,  0LL,  v26));
    uint64_t v28 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = v27;

    [*(id *)(a1 + 48) logFinishFailureEvent:@"validatePeerResult" error:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    uint64_t v30 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
    uint64_t v31 = *(void *)(a1 + 32);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
    uint64_t v33 = -[KTVerifierResult initWithUri:application:ktResult:](v30, "initWithUri:application:ktResult:", v31, v32, 0LL);
    id v34 = (void *)v42[5];
    v42[5] = (uint64_t)v33;

    uint64_t v35 = v42[5];
    uint64_t v36 = *(void *)(a1 + 56);
    id v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
    (*(void (**)(uint64_t, uint64_t, void *))(v36 + 16))(v36, v35, v24);
    goto LABEL_7;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) xpcContextStore]);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 72);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  void v37[2] = sub_100058CF8;
  v37[3] = &unk_10027BA48;
  id v13 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  BOOL v39 = &v41;
  uint64_t v40 = v12;
  void v37[4] = *(void *)(a1 + 48);
  id v38 = v13;
  [v6 validatePeerRequestId:v7 uri:v8 application:v9 logClient:v10 revalidate:1 fetchNow:v11 completionHandler:v37];

LABEL_8:
  _Block_object_dispose(&v41, 8);
}

void sub_100058CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100058CF8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
  uint64_t v7 = *(void **)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)) {
    objc_msgSend(v7, "logFinishFailureEvent:error:", @"validatePeerResult");
  }
  else {
    [v7 logFinishSuccessEvent:@"validatePeerResult"];
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)]);
  (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, v8, v10);
}

void sub_100059140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100059178(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x3032000000LL;
  v13[3] = sub_100057B74;
  v13[4] = sub_100057B84;
  id v14 = 0LL;
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcDataStore]);
  id v12 = 0LL;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v2 addValidateRequest:v3 dataStore:v4 error:&v12]);
  id v6 = v12;
  id v14 = v5;

  if ((+[TransparencySettings getBool:]( &OBJC_CLASS___TransparencySettings,  "getBool:",  kTransparencyFlagDisableAsyncValidation) & 1) == 0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000592D4;
    v8[3] = &unk_1002774A0;
    uint64_t v7 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    id v11 = v13;
    id v10 = v7;
    [v9 runAsynchronousTransactionName:"com.apple.transparencyd.validateEnrollment" block:v8];
  }

  _Block_object_dispose(v13, 8);
}

void sub_1000592BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000592D4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workloopContextStore]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ktLogClient]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudRecords]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000593C8;
  v8[3] = &unk_10027BA98;
  void v8[4] = *(void *)(a1 + 32);
  [v2 validateEnrollmentRequestId:v4 application:v3 logClient:v5 cloudOptIn:v7 completionHandler:v8];
}

id sub_1000593C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5 = *(void **)(a1 + 32);
  if (a5) {
    return [v5 logFinishFailureEvent:@"validateEnrollmentUri-Async" error:a5];
  }
  else {
    return [v5 logFinishSuccessEvent:@"validateEnrollmentUri-Async"];
  }
}

void sub_1000595E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    uint64_t v13 = kTransparencyErrorInterface;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v13,  -159LL,  @"Request associated with UUID %@ does not have expected uri %@. Got %@",  v14,  v15,  v16));

LABEL_6:
    [*(id *)(a1 + 48) logFinishFailureEvent:@"validateEnrollmentUriResult" error:v17];
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = [v3 verificationResult];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cleanseErrorForXPC:v17]);
    (*(void (**)(uint64_t, uint64_t, id, void, void, void *))(v18 + 16))(v18, v19, v20, 0LL, 0LL, v21);

    goto LABEL_7;
  }

  if ([v3 type] != (id)2)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInterface,  -124,  @"Request associated with UUID %@ is not of expected type %llu. Got %lld.",  *(void *)(a1 + 40),  2,  [v3 type]));
    goto LABEL_6;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) xpcContextStore]);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 cloudRecords]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10005983C;
  v22[3] = &unk_10027BAE8;
  id v12 = *(void **)(a1 + 56);
  v22[4] = *(void *)(a1 + 48);
  id v24 = v12;
  id v23 = *(id *)(a1 + 32);
  [v6 validateEnrollmentRequestId:v7 application:v8 logClient:v9 cloudOptIn:v11 completionHandler:v22];

LABEL_7:
}

void sub_10005983C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  [v9 logFinishSuccessEvent:@"validateEnrollmentUriResult"];
  id v13 = [v12 verifiedAccountOptInState];

  BOOL v14 = v13 == (id)1;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 logger]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v16 setDateProperty:v17 forKey:off_1002DE278];

  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  id v20 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v10]);

  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, id, id))(v18 + 16))(v18, v19, a2, v14, v11, v20);
}

id sub_100059AA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) logFinishSuccessEvent:@"GetLoggableDataForDeviceID"];
}

void sub_100059CA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100059CC0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 xpcContextStore]);
  id v8 = 0LL;
  [v5 ignoreFailure:v4 error:&v8];

  id v6 = v8;
  id v7 = v8;

  if (v7) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v6);
  }
}

void sub_10005A0E0(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  unsigned __int8 v5 = *(void **)(a1 + 32);
  id v6 = a3;
  if (v11)
  {
    [v5 logFinishSuccessEvent:@"copyApplicationState"];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [v11 copyState];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v6]);

    (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v8, v9);
  }

  else
  {
    [v5 logFinishFailureEvent:@"copyApplicationState" error:v6];
    uint64_t v10 = *(void *)(a1 + 40);
    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v6]);

    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v8);
  }
}

void sub_10005A2F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005A474(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005A5F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005AA0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  if (v8)
  {
    [*(id *)(a1 + 32) logFinishSuccessEvent:@"copyApplicationTranscript"];
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 transcript]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 serialize]);
    (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v7, 0LL);
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorInternal,  -167LL,  a3,  @"Context for application %@ unavailable",  *(void *)(a1 + 40)));
    [*(id *)(a1 + 32) logFinishFailureEvent:@"copyApplicationTranscript" error:v6];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10005ABC4(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"forceConfigUpdate" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"forceConfigUpdate"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v5]);

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005AD98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = v6;
  if (a3) {
    [v5 logFinishFailureEvent:@"forceApplicationConfig" error:v6];
  }
  else {
    [v5 logFinishSuccessEvent:@"forceApplicationConfig"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005B124(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32)
    && (id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]),
        unsigned __int8 v6 = [v5 isEqualToString:*(void *)(a1 + 32)],
        v5,
        (v6 & 1) == 0))
  {
    uint64_t v15 = kTransparencyErrorInterface;
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v4 uri]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v15,  -159LL,  @"Request associated with UUID %@ does not have expected uri %@. Got %@",  v16,  v17,  v18));

    [*(id *)(a1 + 48) logFinishFailureEvent:@"forceValidateUUID" error:v19];
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cleanseErrorForXPC:v19]);
    (*(void (**)(uint64_t, uint64_t, void, void, void, void *))(v21 + 16))(v21, v20, 0LL, 0LL, 0LL, v22);
  }

  else
  {
    id v7 = [v4 type];
    if (v7 == (id)2)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) xpcContextStore]);
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 cloudRecords]);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      void v37[2] = sub_10005B57C;
      v37[3] = &unk_10027BAE8;
      id v29 = *(void **)(a1 + 56);
      void v37[4] = *(void *)(a1 + 48);
      id v39 = v29;
      id v38 = v4;
      [v23 validateEnrollmentRequestId:v24 application:v25 logClient:v26 cloudOptIn:v28 completionHandler:v37];

      BOOL v14 = v39;
      goto LABEL_9;
    }

    if (v7 == (id)1)
    {
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v4 uri]);
      __int128 v32 = *(void **)(a1 + 48);
      uint64_t v33 = NSStringFromSelector(*(SEL *)(a1 + 64));
      id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"KTValidateTypeSelf in %@",  v34));
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v32 unimplementedError:v35]);
      (*(void (**)(uint64_t, void *, void, void, void, void *))(v30 + 16))(v30, v31, 0LL, 0LL, 0LL, v36);

      goto LABEL_11;
    }

    if (!v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) xpcContextStore]);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ktLogClient]);
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472LL;
      v40[2] = sub_10005B484;
      v40[3] = &unk_10027BC38;
      id v13 = *(void **)(a1 + 56);
      v40[4] = *(void *)(a1 + 48);
      id v42 = v13;
      id v41 = v4;
      [v8 validatePeerRequestId:v9 uri:v10 application:v11 logClient:v12 revalidate:1 fetchNow:0 completionHandler:v40];

      BOOL v14 = v42;
LABEL_9:
    }
  }

void sub_10005B484(uint64_t a1, void *a2, void *a3)
{
  unsigned __int8 v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"forceValidateUUID" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"forceValidateUUID"];
  }
  uint64_t v9 = *(void *)(a1 + 48);
  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uri]);
  id v10 = [v8 succeed];
  id v11 = [v8 optedIn];
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 loggableDatas]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v7]);
  (*(void (**)(uint64_t, id, id, id, void *, void *))(v9 + 16))(v9, v14, v10, v11, v12, v13);
}

void sub_10005B57C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v10 = *(void **)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  if (a5) {
    [v10 logFinishFailureEvent:@"forceValidateUUID" error:v11];
  }
  else {
    [v10 logFinishSuccessEvent:@"forceValidateUUID"];
  }
  id v14 = [v13 verifiedAccountOptInState];

  uint64_t v15 = *(void *)(a1 + 48);
  id v17 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uri]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v11]);

  (*(void (**)(uint64_t, id, uint64_t, BOOL, id, void *))(v15 + 16))(v15, v17, a2, v14 == (id)1, v12, v16);
}

void sub_10005B700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:a6]);
  (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a3, v8);
}

void sub_10005B8EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setVerificationResult:2];
  [v3 setResponseTime:0];
  [v3 setQueryResponse:0];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcDataStore]);
  id v9 = 0LL;
  unsigned __int8 v5 = [v4 persistWithError:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_1002E6570 != -1) {
      dispatch_once(&qword_1002E6570, &stru_10027BCA8);
    }
    uint64_t v7 = (os_log_s *)qword_1002E6578;
    if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "failed to save request reset to pending: %@",  buf,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcDataStore]);
    [v8 reportCoreDataPersistEventForLocation:@"resetToPending" underlyingError:v6];
  }
}

void sub_10005BA40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005BC18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005BC48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002E6570 != -1) {
    dispatch_once(&qword_1002E6570, &stru_10027BD10);
  }
  id v4 = (os_log_s *)qword_1002E6578;
  if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "runDutyCycle done: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_10005BD38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005C46C(_Unwind_Exception *a1)
{
}

void sub_10005C498(void *a1)
{
  if (qword_1002E6570 != -1) {
    dispatch_once(&qword_1002E6570, &stru_10027BD30);
  }
  uint64_t v2 = (os_log_s *)qword_1002E6578;
  if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to get gossip message within %fs",  buf,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorNetwork,  -151LL,  @"failed to get gossip message within %fs",  a1[7]));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(void *)(v5 + 40) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
    (*(void (**)(void))(a1[4] + 16LL))();
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
  }
}

void sub_10005C5F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005C628(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)a1[4];
  if (!v10 || v5) {
    [v6 logFinishFailureEvent:@"retrieveCurrentVerifiedTLTSTH" error:v5];
  }
  else {
    [v6 logFinishSuccessEvent:@"retrieveCurrentVerifiedTLTSTH"];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
  int v7 = *(dispatch_source_s **)(*(void *)(a1[7] + 8LL) + 40LL);
  if (v7)
  {
    dispatch_source_cancel(v7);
    uint64_t v8 = *(void *)(a1[7] + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
  }
}

void sub_10005C9C4(_Unwind_Exception *a1)
{
}

void sub_10005C9F0(void *a1)
{
  if (qword_1002E6570 != -1) {
    dispatch_once(&qword_1002E6570, &stru_10027BDA0);
  }
  uint64_t v2 = (os_log_s *)qword_1002E6578;
  if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to get gossip message within %fs",  buf,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorNetwork,  -151LL,  @"failed to get gossip message within %fs",  a1[7]));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(void *)(v5 + 40) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
    (*(void (**)(void))(a1[4] + 16LL))();
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
  }
}

void sub_10005CB4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005CB7C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  id v8 = v3;
  if (v3) {
    objc_msgSend(v4, "logFinishFailureEvent:error:", @"receivedSTHsFromPeers");
  }
  else {
    [v4 logFinishSuccessEvent:@"receivedSTHsFromPeers"];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
  uint64_t v5 = *(dispatch_source_s **)(*(void *)(a1[7] + 8LL) + 40LL);
  if (v5)
  {
    dispatch_source_cancel(v5);
    uint64_t v6 = *(void *)(a1[7] + 8LL);
    int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8LL) + 32LL));
  }
}

void sub_10005CD48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = *(void **)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  if (a5) {
    [v10 logFinishFailureEvent:@"accountKeySignData" error:v11];
  }
  else {
    [v10 logFinishSuccessEvent:@"accountKeySignData"];
  }
  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v11));

  (*(void (**)(uint64_t, id, id, id, id))(v15 + 16))(v15, v14, v13, v12, v16);
}

void sub_10005CF20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"accountKeyRoll" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"accountKeyRoll"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

uint64_t sub_10005D068(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005D3A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005D3D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005D408(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005D438(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005D5CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005D6A8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005D7A8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005D8A8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005D9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10005DA88(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005DBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10005DCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10005DDC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005DEF4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005E048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:"));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_10005E12C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005E248(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005E378(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:"));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_10005E618( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10005E63C(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  id v14 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v9 = objc_alloc(&OBJC_CLASS___KTOptInState);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
  id v11 = [v9 initWithApplication:v10];

  if (v7)
  {
    [v11 setState:2];
    [WeakRetained logFinishFailureEvent:@"GetOptIn" error:v7];
  }

  else
  {
    [WeakRetained logFinishSuccessEvent:@"GetOptIn"];
    [v11 setState:a2];
    [v11 setSmtTimestamp:v14];
  }

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v11, v13);
}

void sub_10005E898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10005E8BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a4;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained(v7);
  id v13 = WeakRetained;
  if (v8) {
    [WeakRetained logFinishFailureEvent:@"SetOptIn" error:v8];
  }
  else {
    [WeakRetained logFinishSuccessEvent:@"SetOptIn"];
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v8));

  (*(void (**)(uint64_t, uint64_t, id, void *))(v11 + 16))(v11, a2, v9, v12);
}

void sub_10005EB44(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"GetStatus" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"GetStatus"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v8 simpleStatus]);

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));
  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v11, v10);
}

void sub_10005ECCC(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"GetSelfStatus" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"GetSelfStatus"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10005EE68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  if (a2 == 1) {
    [v7 logFinishSuccessEvent:@"GetKTErrorForEventId"];
  }
  else {
    [v7 logFinishFailureEvent:@"GetKTErrorForEventId" error:v8];
  }
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v8));

  (*(void (**)(uint64_t, uint64_t, id, id))(v10 + 16))(v10, a2, v9, v11);
}

void sub_10005F00C(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"IgnoreKTErrorEvent" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"IgnoreKTErrorEvent"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005F1E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"getAuditorReport" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"getAuditorReport"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10005F3B4(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"makeAuditorReport" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"makeAuditorReport"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005F780(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005F7B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005FCF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10005FD28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10006000C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10006003C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000602E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100060310(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000605B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000605E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000607B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000607E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_1002E6570 != -1) {
      dispatch_once(&qword_1002E6570, &stru_10027C1C8);
    }
    id v7 = (os_log_s *)qword_1002E6578;
    if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v32 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Error fetching opt in state to check static key store mapping %{public}@",  buf,  0xCu);
    }
  }

  if ([v5 state])
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v30 = 0LL;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 ensureContactFieldsPresent:v9 error:&v30]);
    id v11 = v30;
    if (!v10)
    {
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v11]);
      (*(void (**)(uint64_t, void, void *))(v26 + 16))(v26, 0LL, v22);
      goto LABEL_23;
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) staticKeyController]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 externalURI]);
    id v29 = v11;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 findStaticKeyByContactExternalURI:v13 error:&v29]);
    id v15 = v29;

    if (!v14)
    {
      if (qword_1002E6570 != -1) {
        dispatch_once(&qword_1002E6570, &stru_10027C208);
      }
      id v16 = (void *)qword_1002E6578;
      if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
      {
        id v17 = v16;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 externalURI]);
        *(_DWORD *)buf = 138412546;
        id v32 = v18;
        __int16 v33 = 2112;
        id v34 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "findStaticKeyStoreMappingByContactExternalURI: %@ error: %@",  buf,  0x16u);
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) staticKeyController]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
      id v28 = v15;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v19 findStaticKeyByContactIdentifier:v20 error:&v28]);
      id v11 = v28;

      if (!v14)
      {
        uint64_t v22 = 0LL;
        goto LABEL_16;
      }

      id v15 = v11;
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) staticKeyController]);
    id v27 = v15;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 validateStoreEntry:v14 error:&v27]);
    id v11 = v27;

LABEL_16:
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v11]);
    (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v22, v24);

LABEL_23:
    goto LABEL_24;
  }

  if (qword_1002E6570 != -1) {
    dispatch_once(&qword_1002E6570, &stru_10027C1E8);
  }
  uint64_t v25 = (os_log_s *)qword_1002E6578;
  if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Ignoring static key store entry request because user is not opted into KT",  buf,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_24:
}

void sub_100060B94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100060BC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100060BF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100060DE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100060FBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100061190(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10006142C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10006145C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000616B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000616E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

uint64_t sub_100061D10(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 tapToRadar]);
  [v3 clearTapToRadarWithUnique:*(void *)(a1 + 32)];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100061ECC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000621C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000622C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"fetchBatchQuery" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"fetchBatchQuery"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_100062894(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  id v5 = *(void **)(a1 + 32);
  if (a3)
  {
    [v5 logFinishFailureEvent:@"triggerTapToRadarNotification" error:a3];
  }

  else
  {
    [v5 logFinishSuccessEvent:@"triggerTapToRadarNotification"];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 tapToRadar]);
    [v6 presentTapToRadarError:@"triggerTapToRadarNotification" title:@"Contact Key Verification Error" message:@"Please attach sysdiagnose from all devices"];
  }
}

uint64_t sub_1000629B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100062B68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100062C2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100062C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v16 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v3,  1LL,  &v16));
  id v5 = v16;
  id v15 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyFileSupport transparencyFilesPath:]( &OBJC_CLASS___TransparencyFileSupport,  "transparencyFilesPath:",  &v15));
  id v7 = v15;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 URLByAppendingPathComponent:@"transparency_start.log" isDirectory:0]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 relativePath]);
  NSFileAttributeKey v19 = NSFileProtectionKey;
  NSFileProtectionType v20 = NSFileProtectionNone;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  unsigned __int8 v12 = [v9 createFileAtPath:v10 contents:v4 attributes:v11];

  if ((v12 & 1) == 0)
  {
    if (qword_1002E6570 != -1) {
      dispatch_once(&qword_1002E6570, &stru_10027C418);
    }
    id v13 = (os_log_s *)qword_1002E6578;
    if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "transparencyd: create fallback sysdiagnose error %@",  buf,  0xCu);
    }
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 absoluteString]);
  [v4 writeToFile:v14 atomically:1];
}

void sub_100062E94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_1000631F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006330C;
  block[3] = &unk_1002777A0;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v9 = v5;
  id v15 = v9;
  dispatch_sync(v7, block);
  if (v6)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100063350;
    v10[3] = &unk_1002777A0;
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = v6;
    dispatch_sync(v8, v10);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

id sub_10006330C(uint64_t a1)
{
  os_log_t v1 = *(void **)(a1 + 32);
  if ([*(id *)(a1 + 40) state] == (id)1) {
    uint64_t v2 = @"true";
  }
  else {
    uint64_t v2 = @"false";
  }
  return [v1 setValue:v2 forKey:@"optedIn"];
}

void sub_100063350(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) description]);
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"error"];
}

void sub_10006339C(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100063438;
  block[3] = &unk_1002777A0;
  id v4 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  dispatch_sync(v4, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_100063438(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"stateMachine"];
}

void sub_100063448(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  uint64_t v53 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 registrationData]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allValues]);

  id obj = v6;
  id v7 = [v6 countByEnumeratingWithState:&v58 objects:v62 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v59;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v59 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 application]);
        [v12 setObject:v13 forKeyedSubscript:@"app"];

        id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 signature]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "kt_hexString"));
        [v12 setObject:v15 forKeyedSubscript:@"signature"];

        id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 publicKey]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "kt_hexString"));
        [v12 setObject:v17 forKeyedSubscript:@"publicKey"];

        id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 orderedTimestamp]);
        NSFileAttributeKey v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "kt_toISO_8601_UTCString"));
        [v12 setObject:v19 forKeyedSubscript:@"orderedTimestamp"];

        NSFileProtectionType v20 = (void *)objc_claimAutoreleasedReturnValue([v11 tbsKTIDSRegistrationData]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "kt_hexString"));
        [v12 setObject:v21 forKeyedSubscript:@"tbs"];

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 createdAt]);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 description]);
        [v12 setObject:v23 forKeyedSubscript:@"createdAt"];

        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v11 signedAt]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 description]);
        [v12 setObject:v25 forKeyedSubscript:@"signedAt"];

        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v11 uploadedAt]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 description]);
        [v12 setObject:v27 forKeyedSubscript:@"uploadedAt"];

        id v28 = (void *)objc_claimAutoreleasedReturnValue([v11 pushToken]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "kt_hexString"));
        [v12 setObject:v29 forKeyedSubscript:@"pushToken"];

        uint64_t v30 = objc_claimAutoreleasedReturnValue([v11 createdAt]);
        if (v30)
        {
          uint64_t v31 = (void *)v30;
          id v32 = (void *)objc_claimAutoreleasedReturnValue([v11 signedAt]);

          if (v32)
          {
            __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v11 signedAt]);
            id v34 = (void *)objc_claimAutoreleasedReturnValue([v11 createdAt]);
            [v33 timeIntervalSinceDate:v34];
            double v36 = v35;

            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[SFAnalytics fuzzyInteger:](&OBJC_CLASS___SFAnalytics, "fuzzyInteger:", (uint64_t)v36)));
            [v12 setObject:v37 forKeyedSubscript:@"delay"];
          }
        }

        uint64_t v38 = objc_claimAutoreleasedReturnValue([v11 signedAt]);
        if (v38)
        {
          id v39 = (void *)v38;
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v11 uploadedAt]);

          if (v40)
          {
            id v41 = (void *)objc_claimAutoreleasedReturnValue([v11 uploadedAt]);
            id v42 = (void *)objc_claimAutoreleasedReturnValue([v11 signedAt]);
            [v41 timeIntervalSinceDate:v42];
            double v44 = v43;

            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[SFAnalytics fuzzyInteger:](&OBJC_CLASS___SFAnalytics, "fuzzyInteger:", (uint64_t)v44)));
            [v12 setObject:v45 forKeyedSubscript:@"networkDelay"];
          }
        }

        id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
        signed int v47 = (void *)objc_claimAutoreleasedReturnValue([v46 settings]);
        unsigned int v48 = [v47 allowsInternalSecurityPolicies];

        if (v48)
        {
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v11 altDSID]);
          [v12 setObject:v49 forKeyedSubscript:@"altDSID"];

          id v50 = (void *)objc_claimAutoreleasedReturnValue([v11 dsid]);
          [v12 setObject:v50 forKeyedSubscript:@"dsid"];
        }

        [v4 addObject:v12];

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
    }

    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000639DC;
  block[3] = &unk_1002777A0;
  uint64_t v51 = *(dispatch_queue_s **)(a1 + 40);
  id v56 = *(id *)(a1 + 48);
  id v57 = v4;
  id v52 = v4;
  dispatch_sync(v51, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

id sub_1000639DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"registration"];
}

void sub_1000639EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  if (!v4)
  {
    if (qword_1002E6570 != -1) {
      dispatch_once(&qword_1002E6570, &stru_10027C4D8);
    }
    id v7 = (os_log_s *)qword_1002E6578;
    if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v35 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "KTIDStaticKeyStore listStaticKey: %@",  buf,  0xCu);
    }

    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:@"failed"];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    [v6 setObject:v8 forKeyedSubscript:@"error"];
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  if (+[TransparencyAnalytics hasInternalDiagnostics]( &OBJC_CLASS___TransparencyAnalytics,  "hasInternalDiagnostics"))
  {
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v10 = v4;
    id v11 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v11)
    {
      id v12 = v11;
      id v19 = v5;
      uint64_t v13 = *(void *)v30;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v30 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 publicAccountIdentity]);
          if (v16)
          {
            id v17 = *(void **)(a1 + 32);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472LL;
            v24[2] = sub_100063D64;
            v24[3] = &unk_10027C520;
            id v25 = v9;
            uint64_t v26 = v15;
            id v27 = v6;
            id v28 = v16;
            [v17 findStaticKeyStoreMappingByKey:v15 complete:v24];
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }

      while (v12);
      id v5 = v19;
    }
  }

  else
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v6 count]));
    [v9 setObject:v10 forKeyedSubscript:@"peers"];
  }

  if ([v6 count])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100063F88;
    block[3] = &unk_1002777A0;
    id v18 = *(dispatch_queue_s **)(a1 + 40);
    id v22 = *(id *)(a1 + 48);
    id v23 = v6;
    dispatch_sync(v18, block);
  }
}

void sub_100063D34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100063D64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 mappings]);
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"mappings"];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"contactIdentifier"];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 contactExternalURI]);
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"contactExternalURI"];

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 valid]));
    id v11 = *(void **)(a1 + 32);
    id v12 = @"valid";
  }

  else
  {
    if (qword_1002E6570 != -1) {
      dispatch_once(&qword_1002E6570, &stru_10027C4F8);
    }
    uint64_t v13 = (os_log_s *)qword_1002E6578;
    if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v14;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "KTIDStaticKeyStore findByIdentifier: %@: %@",  (uint8_t *)&v15,  0x16u);
    }

    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"failed"];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
    id v11 = *(void **)(a1 + 32);
    id v12 = @"error";
  }

  [v11 setObject:v10 forKeyedSubscript:v12];

  [*(id *)(a1 + 48) setObject:*(void *)(a1 + 32) forKeyedSubscript:*(void *)(a1 + 56)];
}

void sub_100063F58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

id sub_100063F88(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"static_key_peers"];
}

void sub_100063F98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

uint64_t sub_100063FC8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000640E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (!v5 || v6)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    id v22 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v6));
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v22);
  }

  else
  {
    id v23 = v5;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v29;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v29 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          id v13 = objc_alloc_init(&OBJC_CLASS___KTDeviceStatus);
          [v13 setIdms:v12];
          id v14 = objc_claimAutoreleasedReturnValue([v12 pushToken]);
          int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSData kt_dataWithHexString:]( NSData,  "kt_dataWithHexString:",  [v14 UTF8String]));

          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcDataStore]);
          uint64_t v17 = *(void *)(a1 + 40);
          id v27 = 0LL;
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472LL;
          v25[2] = sub_10006436C;
          v25[3] = &unk_10027C590;
          id v18 = v13;
          id v26 = v18;
          unsigned __int8 v19 = [v16 performAndWaitForDeviceId:v15 application:v17 error:&v27 block:v25];
          id v20 = v27;

          if ((v19 & 1) == 0) {
            [v18 setLoggableDataError:v20];
          }
          [v7 addObject:v18];
        }

        id v9 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    id v6 = 0LL;
    id v5 = v23;
  }
}

id sub_10006436C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setLoggableData:a2];
}

uint64_t sub_100064408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10006461C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100064720(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"initiateQueryForUris" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"initiateQueryForUris"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:v5]);

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_1000648C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanseErrorForXPC:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000650C8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_1002E6570 != -1) {
    dispatch_once(&qword_1002E6570, &stru_10027C620);
  }
  id v3 = (os_log_s *)qword_1002E6578;
  if (os_log_type_enabled((os_log_t)qword_1002E6578, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "uploadedDeviceSignature:tbs:complete: %@",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_100065194(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_10006550C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6578;
  qword_1002E6578 = (uint64_t)v1;
}

void sub_100065E98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100065EC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100065ED4(uint64_t a1)
{
}

void sub_100065EDC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = a2;
  LOBYTE(v3) = [v3 verifyInclusionProofDownloadRecord:v5 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)v3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C680);
    }
    uint64_t v6 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "revision log inclusion proof downloadId %{public}@: verification succeeded",  buf,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logClient]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 downloadId]);

    [v8 deleteDownloadId:v9];
  }

  else
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C660);
    }
    uint64_t v10 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v11;
      __int16 v26 = 2112;
      uint64_t v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to verify inclusion proof downloadId %{public}@: %@",  buf,  0x16u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v22 = *(id *)(v13 + 40);
    objc_msgSend(v8, "failHeadDownloadRecord:failure:error:", v5);

    id v14 = v22;
    id v9 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v14;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v21 = *(id *)(v16 + 40);
  unsigned __int8 v17 = [v15 persistWithError:&v21];
  objc_storeStrong((id *)(v16 + 40), v21);

  if ((v17 & 1) == 0)
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C6A0);
    }
    uint64_t v18 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "failed to save inclusion proof results: %@",  buf,  0xCu);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v20 reportCoreDataPersistEventForLocation:@"handleInclusionDownload" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }

void sub_1000661F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066224(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066254(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066284(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_10006657C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_1000665AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10006683C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = a2;
  id v6 = [v3 verifyConsistencyProofDownloadRecord:v5 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v6;
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) == 1LL)
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C768);
    }
    uint64_t v7 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "consistency proof downloadId %{public}@: verification succeeded",  buf,  0xCu);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logClient]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 downloadId]);

    [v9 deleteDownloadId:v10];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextStore]);
    [v11 clearGossip];
  }

  else
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C748);
    }
    uint64_t v12 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      uint64_t v26 = v13;
      __int16 v27 = 2112;
      uint64_t v28 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "failed to verify consistency proof for downloadId %{public}@: %@",  buf,  0x16u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v23 = *(id *)(v15 + 40);
    objc_msgSend(v11, "failHeadDownloadRecord:failure:error:", v5);

    objc_storeStrong((id *)(v15 + 40), v23);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v22 = *(id *)(v17 + 40);
  unsigned __int8 v18 = [v16 persistWithError:&v22];
  objc_storeStrong((id *)(v17 + 40), v22);

  if ((v18 & 1) == 0)
  {
    if (qword_1002E6580 != -1) {
      dispatch_once(&qword_1002E6580, &stru_10027C788);
    }
    uint64_t v19 = (os_log_s *)qword_1002E6588;
    if (os_log_type_enabled((os_log_t)qword_1002E6588, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v26 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "failed to save consistency proof results: %@",  buf,  0xCu);
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v21 reportCoreDataPersistEventForLocation:@"handleConsistencyDownload" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }

void sub_100066B68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066B98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066BC8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100066BF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100067038(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100067068(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100067098(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_1000670C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

LABEL_56:
        uint64_t v15 = (char *)v15 + 1;
      }

      while (v11 != v15);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v93 objects:v103 count:16];
      if (!v11) {
        goto LABEL_60;
      }
    }
  }

  uint64_t v12 = 0LL;
LABEL_60:

  if ([v82 count]
    && (uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[KTContext verifier](self, "verifier")),
        __int128 v90 = 0LL,
        [v77 processSTHsFromGossipPeers:v82 verifier:v81 error:&v90],
        uint64_t v78 = v90,
        v77,
        v78))
  {
    __int16 v79 = v80;
    (*((void (**)(id, id))v80 + 2))(v80, v78);
  }

  else
  {
    __int16 v79 = v80;
    (*((void (**)(id, void))v80 + 2))(v80, 0LL);
  }
}

    swift_beginAccess(&v227, v224, 0LL, 0LL);
    if (!v227)
    {

      (*((void (**)(char *, uint64_t))v10 + 1))(v114, v34);
LABEL_88:
      swift_release(v203);

      return;
    }

    v135 = v227;
    isa = Date._bridgeToObjectiveC()().super.isa;
    [v135 setSmtTimestamp:isa];

    v137 = String._bridgeToObjectiveC()();
    [v135 setCkstate:v137];

    sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
    v138 = NSNumber.init(integerLiteral:)(v205).super.super.isa;
    [v135 setState:v138];

    [v135 setCkrecord:0];
    v139 = (void *)(*(uint64_t (**)(id))(*(void *)v220 + 432LL))(v135);
    if (v139)
    {
      v140 = v121;
      v141 = v139;
      v142 = v201;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v144 = *(void *)((*v142 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      v143 = *(void *)((*v142 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v144 >= v143 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v143 > 1, v144 + 1, 1LL);
      }
      v145 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v144, v141);
      specialized Array._endMutation()(v145);
      if (qword_1002EA8B0 != -1) {
        swift_once(&qword_1002EA8B0, sub_1000972A0);
      }
      sub_100072DEC(v140, (uint64_t)qword_1002EA8B8);
      v146 = (void (*)(char *, char *, uint64_t))*((void *)v10 + 2);
      v147 = v200;
      v146(v200, v114, v34);
      v146(v212, v114, v34);
      v148 = v141;
      v149 = (os_log_s *)Logger.logObject.getter(v148);
      uint64_t v150 = static os_log_type_t.default.getter();
      v151 = v150;
      if (os_log_type_enabled(v149, v150))
      {
        id v152 = swift_slowAlloc(38LL, -1LL);
        v204 = (void *)swift_slowAlloc(64LL, -1LL);
        v226 = v204;
        *(_DWORD *)id v152 = v194;
        v196 = v149;
        id v153 = [v148 recordID];
        LODWORD(v195) = v151;
        id v154 = v153;
        v155 = [v153 recordName];

        v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
        v158 = v157;

        v222 = COERCE_DOUBLE(sub_10007C22C(v156, v158, (uint64_t *)&v226));
        v159 = v208;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v208, v152 + 4, v152 + 12);

        id v160 = v158;
        id v161 = v211;
        swift_bridgeObjectRelease(v160);
        *(_WORD *)(v152 + 12) = 1024;
        LODWORD(v222) = v190;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v189, v152 + 14, v152 + 18);
        *(_WORD *)(v152 + 1_Block_object_dispose(va, 8) = 2080;
        char v162 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        id v163 = dispatch thunk of CustomStringConvertible.description.getter(v161, v162);
        id v165 = v164;
        v222 = COERCE_DOUBLE(sub_10007C22C(v163, v164, (uint64_t *)&v226));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v159, v152 + 20, v152 + 28);
        swift_bridgeObjectRelease(v165);
        uint64_t v10 = (char *)*((void *)v213 + 1);
        id v166 = ((uint64_t (*)(char *, uint64_t))v10)(v147, v161);
        *(_WORD *)(v152 + 2_Block_object_dispose(va, 8) = 2048;
        id v167 = v212;
        v222 = Date.timeIntervalSince1970.getter(v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v159, v152 + 30, v152 + 38);
        ((void (*)(char *, uint64_t))v10)(v167, v161);
        v168 = v196;
        _os_log_impl( (void *)&_mh_execute_header,  v196,  (os_log_type_t)v195,  "trying to update record %s %{BOOL}d smtTimeStamp: %s:[%f]",  (uint8_t *)v152,  0x26u);
        v169 = v204;
        swift_arrayDestroy(v204, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v169, -1LL, -1LL);
        swift_slowDealloc(v152, -1LL, -1LL);

        id v34 = v161;
        ((void (*)(char *, uint64_t))v10)(v221, v161);
        id v35 = v213;
      }

      else
      {

        __int16 v170 = v114;
        id v35 = v10;
        v171 = (void (*)(char *, uint64_t))*((void *)v10 + 1);
        v171(v212, v34);
        v171(v147, v34);

        v171(v170, v34);
      }
    }

    else
    {
      double v36 = v114;
      id v35 = v10;
      (*((void (**)(char *, uint64_t))v10 + 1))(v36, v34);
    }

    uint64_t v24 = v207;
    uint64_t v26 = v206;
    __int128 v32 = (os_log_s *)&qword_1002E0F08;
    __int128 v30 = v215;
    __int128 v31 = v216;
  }

  id v173 = swift_release(v203);
  v174 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v220 + 152LL))(v173);
  v227 = 0LL;
  v175 = [v174 save:&v227];

  v176 = v227;
  if ((v175 & 1) != 0)
  {
    v177 = v227;
  }

  else
  {
    __int128 v183 = v227;
    _convertNSErrorToError(_:)(v176);

    swift_willThrow(v184);
  }

  uint64_t v10 = v60;
LABEL_57:
}

void sub_100067FF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100068028(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100068058(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100068088(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_1000680B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_1000680E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_100068118(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6588;
  qword_1002E6588 = (uint64_t)v1;
}

void sub_10006859C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_1000685CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100068B44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100068B88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100068B98(uint64_t a1)
{
}

void sub_100068BA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100068BD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_1002E6590 != -1) {
      dispatch_once(&qword_1002E6590, &stru_10027C988);
    }
    uint64_t v10 = (os_log_s *)qword_1002E6598;
    if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 141558530;
      uint64_t v51 = 1752392040LL;
      __int16 v52 = 2112;
      id v53 = v7;
      __int16 v54 = 2112;
      id v55 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "verification failed for %{mask.hash}@: %@",  buf,  0x20u);
    }

    uint64_t v11 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
    uint64_t v13 = -[KTVerifierResult initWithUri:application:failure:](v11, "initWithUri:application:failure:", v7, v12, v9);
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
LABEL_7:

    goto LABEL_25;
  }

  id v16 = [*(id *)(a1 + 32) getUnsigned:"verificationResult"];
  uint64_t v17 = *(void *)(a1 + 72);
  unsigned __int8 v18 = *(void **)(a1 + 40);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKey]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) loggableDatas]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsResponseTime]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) metadata]);
  id v49 = 0LL;
  id v23 = [v18 validateAndReportPeerOrEnroll:v7 type:v17 transparentData:v8 accountKey:v19 loggableDatas:v20 initialResult:v16 idsResponseTime:v21 resp onseMetadata:v22 error:&v49];
  id v12 = v49;

  if (v23 == (id)1)
  {
    if (qword_1002E6590 != -1) {
      dispatch_once(&qword_1002E6590, &stru_10027C9A8);
    }
    id v9 = 0LL;
    uint64_t v24 = (void *)qword_1002E6598;
    if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      uint64_t v26 = v24;
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v25 verificationId]);
      *(_DWORD *)buf = 138543362;
      uint64_t v51 = (uint64_t)v27;
      uint64_t v28 = "Validate peer succeeded for verificationId %{public}@";
      __int128 v29 = v26;
      os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
      uint32_t v31 = 12;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, v31);
    }
  }

  else
  {
    if (qword_1002E6590 != -1) {
      dispatch_once(&qword_1002E6590, &stru_10027C9C8);
    }
    id v9 = 0LL;
    __int128 v32 = (void *)qword_1002E6598;
    if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_ERROR))
    {
      __int16 v33 = *(void **)(a1 + 32);
      uint64_t v26 = v32;
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v33 verificationId]);
      *(_DWORD *)buf = 138543618;
      uint64_t v51 = (uint64_t)v27;
      __int16 v52 = 2112;
      id v53 = v12;
      uint64_t v28 = "Validate Peer failed for verificationId %{public}@: %@";
      __int128 v29 = v26;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      uint32_t v31 = 22;
      goto LABEL_17;
    }
  }

  id v34 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
  id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
  double v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) loggableDatas]);
  uint64_t v37 = -[KTVerifierResult initWithUri:application:ktResult:transparentData:loggableDatas:]( v34,  "initWithUri:application:ktResult:transparentData:loggableDatas:",  v7,  v35,  v23,  v8,  v36);
  uint64_t v38 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v39 = *(void **)(v38 + 40);
  *(void *)(v38 + 40) = v37;

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setFailure:v12];
  if (!v23)
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsResponseTime]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKey]);
    unsigned int v42 = [v8 optInAfter:v40 accountKey:v41];

    if (v42)
    {
      if (qword_1002E6590 != -1) {
        dispatch_once(&qword_1002E6590, &stru_10027C9E8);
      }
      double v43 = (void *)qword_1002E6598;
      if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
      {
        double v44 = *(void **)(a1 + 40);
        uint64_t v45 = v43;
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v44 applicationID]);
        *(_DWORD *)buf = 141558530;
        uint64_t v51 = 1752392040LL;
        __int16 v52 = 2112;
        id v53 = v7;
        __int16 v54 = 2112;
        id v55 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Clearing IDS cache for %{mask.hash}@[%@]",  buf,  0x20u);
      }

      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setOptedIn:0];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setOptInTernaryState:0];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachine]);
      signed int v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
      unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
      [v15 clearIDSCacheForUri:v47 application:v48];

      goto LABEL_7;
    }
  }

void sub_100069138(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069168(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069198(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_1000691C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069668(id *a1, void *a2)
{
  id v3 = a2;
  if ([v3 getUnsigned:"verificationResult"] == (id)2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 idsResponseTime]);
    if (!v4) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 creationTime]);
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[6] dataStore]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] applicationID]);
    id v42 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [v5 getLatestSuccessfulSingleQueryForUri:v6 application:v7 requestYoungerThan:v4 error:&v42]);
    id v9 = v42;

    if (v8)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] dataStore]);
      id v41 = v9;
      uint32_t v31 = _NSConcreteStackBlock;
      uint64_t v32 = 3221225472LL;
      __int16 v33 = sub_100069B6C;
      id v34 = &unk_10027CAC0;
      id v11 = v8;
      id v35 = v11;
      id v36 = a1[4];
      id v12 = a1[5];
      id v13 = a1[6];
      id v37 = v12;
      id v38 = v13;
      id v14 = v3;
      id v39 = v14;
      id v40 = a1[7];
      unsigned __int8 v15 = [v10 performAndWaitForRpcId:v11 error:&v41 block:&v31];
      id v16 = v41;

      if ((v15 & 1) == 0)
      {
        if (qword_1002E6590 != -1) {
          dispatch_once(&qword_1002E6590, &stru_10027CAE0);
        }
        uint64_t v17 = (os_log_s *)qword_1002E6598;
        if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543618;
          id v44 = v11;
          __int16 v45 = 2112;
          uint64_t v46 = (uint64_t)v16;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "failed to find ServerRPC %{public}@: %@",  buf,  0x16u);
        }

        unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore", v31, v32, v33, v34));
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 onMocSetPendingResultForVerification:v14]);

        (*((void (**)(void))a1[7] + 2))();
      }

      uint64_t v20 = v35;
      id v9 = v16;
    }

    else
    {
      if (qword_1002E6590 != -1) {
        dispatch_once(&qword_1002E6590, &stru_10027CA50);
      }
      __int16 v27 = (os_log_s *)qword_1002E6598;
      if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
      {
        id v28 = a1[4];
        id v29 = a1[5];
        *(_DWORD *)buf = 138543874;
        id v44 = v28;
        __int16 v45 = 2160;
        uint64_t v46 = 1752392040LL;
        __int16 v47 = 2112;
        id v48 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "validatePeer: no successful rpc for %{public}@ for %{mask.hash}@",  buf,  0x20u);
      }

      os_log_type_t v30 = (void *)objc_claimAutoreleasedReturnValue([a1[6] dataStore]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v30 onMocSetPendingResultForVerification:v3]);

      (*((void (**)(void))a1[7] + 2))();
    }

    goto LABEL_24;
  }

  if (qword_1002E6590 != -1) {
    dispatch_once(&qword_1002E6590, &stru_10027CA30);
  }
  id v21 = (os_log_s *)qword_1002E6598;
  if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = a1[4];
    id v23 = a1[5];
    *(_DWORD *)buf = 138543874;
    id v44 = v22;
    __int16 v45 = 2160;
    uint64_t v46 = 1752392040LL;
    __int16 v47 = 2112;
    id v48 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "validatePeer: reusing completed result %{public}@ for %{mask.hash}@",  buf,  0x20u);
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[6] dataStore]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 uri]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1[6] applicationID]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v24 verifierResultForPeer:v25 application:v26]);

  if (v9)
  {
    (*((void (**)(void))a1[7] + 2))();
LABEL_24:
  }
}

void sub_100069B0C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069B3C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002E6590 != -1) {
    dispatch_once(&qword_1002E6590, &stru_10027CA70);
  }
  uint64_t v4 = (os_log_s *)qword_1002E6598;
  if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    __int16 v17 = 2160;
    uint64_t v18 = 1752392040LL;
    __int16 v19 = 2112;
    uint64_t v20 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "validatePeer: validating rpc %{public}@ for %{public}@ for %{mask.hash}@",  buf,  0x2Au);
  }

  id v9 = *(void **)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100069D18;
  v10[3] = &unk_10027CA98;
  void v10[4] = v9;
  id v11 = v8;
  id v12 = *(id *)(a1 + 72);
  [v9 validatePeerIDSKTVerification:v11 serverRPC:v3 completionBlock:v10];
}

void sub_100069CE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_100069D18(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uri]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 verifierResultForPeer:v4 application:v5]);

  if (v6) {
    id v7 = v6;
  }
  else {
    id v7 = v8;
  }
  (*(void (**)(void, id, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v7, 0LL);
}

void sub_100069DD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006A1D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_10006A21C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (qword_1002E6590 != -1) {
    dispatch_once(&qword_1002E6590, &stru_10027CB28);
  }
  uint64_t v6 = (void *)qword_1002E6598;
  if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = v6;
    uint64_t String = KTUIStatusGetString([v5 uiStatus]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(String);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 uri]);
    int v11 = 138543874;
    id v12 = v9;
    __int16 v13 = 2160;
    uint64_t v14 = 1752392040LL;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "validatePeers: UIStatus %{public}@ for uri %{mask.hash}@",  (uint8_t *)&v11,  0x20u);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v5];
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  if (a3) {
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
  }
}

void sub_10006A3A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006A3D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006A400(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    if (qword_1002E6590 != -1) {
      dispatch_once(&qword_1002E6590, &stru_10027CBB0);
    }
    id v3 = (os_log_s *)qword_1002E6598;
    if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "failed to kick off query for validatePeers uris with no current RPC: %@",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_10006A4D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006A834(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006A864(uint64_t a1, void *a2)
{
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id obj = a2;
  id v2 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v29;
    p_name = &OBJC_PROTOCOL___KTAccountDependency.name;
    uint64_t v6 = &OBJC_PROTOCOL___KTAccountDependency.name;
    id v7 = _NSConcreteStackBlock;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v29 != v4) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        uint64_t v10 = v6[179];
        if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEBUG))
        {
          int v11 = v10;
          id v12 = v3;
          uint64_t v13 = v4;
          uint64_t v14 = v7;
          __int16 v15 = v6;
          uint64_t v16 = p_name;
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v9 verificationId]);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rpcId]);
          *(_DWORD *)buf = 138543618;
          __int16 v33 = v17;
          __int16 v34 = 2114;
          id v35 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "performing peer validation for verificationId %{public}@ with received rpcId %{public}@",  buf,  0x16u);

          p_name = v16;
          uint64_t v6 = v15;
          id v7 = v14;
          uint64_t v4 = v13;
          id v3 = v12;
        }

        __int16 v19 = *(void **)(a1 + 32);
        uint64_t v20 = *(void **)(a1 + 40);
        v25[0] = v7;
        v25[1] = 3221225472LL;
        v25[2] = sub_10006AAE0;
        v25[3] = &unk_10027CC38;
        void v25[4] = v9;
        id v21 = v19;
        uint64_t v22 = *(void *)(a1 + 40);
        id v26 = v21;
        uint64_t v27 = v22;
        [v20 validatePeerIDSKTVerification:v9 singleQuery:v21 completionBlock:v25];
      }

      id v3 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
    }

    while (v3);
  }
}

void sub_10006AAB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006AAE0(id *a1, void *a2)
{
  id v3 = a2;
  if (qword_1002E6590 != -1) {
    dispatch_once(&qword_1002E6590, &stru_10027CC10);
  }
  uint64_t v4 = (void *)qword_1002E6598;
  if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_INFO))
  {
    id v5 = a1[4];
    uint64_t v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 verificationId]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] rpcId]);
    uint64_t String = KTResultGetString([v3 succeed]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(String);
    int v15 = 138543874;
    uint64_t v16 = v7;
    __int16 v17 = 2114;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    uint64_t v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "verificationId %{public}@ with rpcId %{public}@ result: %@",  (uint8_t *)&v15,  0x20u);
  }

  int v11 = (void *)objc_claimAutoreleasedReturnValue([a1[6] dataStore]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] uri]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] application]);
  id v14 = [v11 verifierResultForPeer:v12 application:v13];
}

void sub_10006AC7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006ACAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006ACDC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006ADA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006AF20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 rpcType])
  {
    if ([v3 rpcType] == (id)1)
    {
      [*(id *)(a1 + 32) validatePendingPeersForBatchQuery:v3];
    }

    else
    {
      if (qword_1002E6590 != -1) {
        dispatch_once(&qword_1002E6590, &stru_10027CCB8);
      }
      uint64_t v4 = (void *)qword_1002E6598;
      if (os_log_type_enabled((os_log_t)qword_1002E6598, OS_LOG_TYPE_ERROR))
      {
        id v5 = v4;
        int v6 = 134217984;
        id v7 = [v3 rpcType];
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "unknown server rpc type: %lld",  (uint8_t *)&v6,  0xCu);
      }
    }
  }

  else
  {
    [*(id *)(a1 + 32) validatePendingPeersForSingleQuery:v3];
  }
}

void sub_10006B03C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006B06C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E6598;
  qword_1002E6598 = (uint64_t)v1;
}

void sub_10006B2C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006B2F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006B5CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006B5FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006B88C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006B8BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

uint64_t start()
{
  if (!_set_user_dir_suffix("com.apple.transparencyd")
    || !confstr(65537, (char *)buf, 0x400uLL)
    || mkdir((const char *)buf, 0x1C0u) && *__error() != 17)
  {
    if (qword_1002E65A0 != -1) {
      dispatch_once(&qword_1002E65A0, &stru_10027CF00);
    }
    uint64_t v20 = (void *)qword_1002E65A8;
    if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_ERROR))
    {
      id v21 = v20;
      int v22 = *__error();
      id v23 = __error();
      uint64_t v24 = strerror(*v23);
      *(_DWORD *)id v41 = 67109378;
      int v42 = v22;
      __int16 v43 = 2080;
      id v44 = v24;
      uint64_t v25 = "failed to initialize temporary directory (%d): %s";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v25, v41, 0x12u);
    }

void sub_10006BEC4(id a1)
{
  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CDD8);
  }
  os_log_t v1 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Received signal SIGTERM. Will terminate when clean.",  v2,  2u);
  }

void sub_10006BF4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006BF7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CDF8);
  }
  int v6 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    xpc_activity_state_t v20 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "XPC dutycycle activity triggered, state: %ld",  buf,  0xCu);
  }

  if (state == 2)
  {
    id v7 = (dispatch_queue_s *)xpc_activity_copy_dispatch_queue(v3);
    *(_DWORD *)buf = 0;
    dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(v7, (int *)buf);
    dispatch_queue_attr_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    uint64_t v10 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v9);
    dispatch_queue_attr_t v11 = dispatch_queue_attr_make_with_qos_class(v10, qos_class, *(int *)buf);
    id v12 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v11);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) daemonContext]);
    id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v13 workloop]);
    int v15 = dispatch_queue_create_with_target_V2("com.apple.transparencyd.dutycycle.workloop", v12, v14);

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10006C1A4;
    v16[3] = &unk_1002777A0;
    __int16 v17 = v3;
    id v18 = *(id *)(a1 + 32);
    dispatch_sync(v15, v16);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_10006C174(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C1A4(uint64_t a1)
{
  id v2 = *(_xpc_activity_s **)(a1 + 32);
  if (v2 && xpc_activity_should_defer(v2) && xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3LL))
  {
    if (qword_1002E65A0 != -1) {
      dispatch_once(&qword_1002E65A0, &stru_10027CE18);
    }
    id v3 = (os_log_s *)qword_1002E65A8;
    if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "duty cycle deferred", buf, 2u);
    }
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) daemonContext]);
    [v4 runDutyCycleForActivity:*(void *)(a1 + 32)];
  }

void sub_10006C27C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C2AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CE60);
  }
  dispatch_workloop_t v5 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    xpc_activity_state_t v8 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "XPC self-validate activity triggered, state: %ld",  (uint8_t *)&v7,  0xCu);
  }

  if (state == 2)
  {
    if ((+[TransparencySettings enableSelfValidationXPCActivity]( &OBJC_CLASS___TransparencySettings,  "enableSelfValidationXPCActivity") & 1) != 0)
    {
      [*(id *)(a1 + 32) selfValidateNotification:v3];
    }

    else
    {
      if (qword_1002E65A0 != -1) {
        dispatch_once(&qword_1002E65A0, &stru_10027CE80);
      }
      int v6 = (os_log_s *)qword_1002E65A8;
      if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "XPC self-validate activity ignored by setting on internal build",  (uint8_t *)&v7,  2u);
      }

      xpc_activity_set_state(v3, 5LL);
    }
  }
}

void sub_10006C428(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C458(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C488(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_1002E65A0 != -1) {
    dispatch_once(&qword_1002E65A0, &stru_10027CEA0);
  }
  dispatch_workloop_t v5 = (os_log_s *)qword_1002E65A8;
  if (os_log_type_enabled((os_log_t)qword_1002E65A8, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    xpc_activity_state_t v8 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "XPC settings activity triggered, state: %ld",  (uint8_t *)&v7,  0xCu);
  }

  if (state == 2)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) globalSettings]);
    [v6 fetchSettings:v3 force:0];

    [*(id *)(a1 + 32) xpc24HrNotification:v3];
  }
}

void sub_10006C59C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C5CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C5FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C62C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

void sub_10006C65C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002E65A8;
  qword_1002E65A8 = (uint64_t)v1;
}

uint64_t sub_10006C68C()
{
  return 0LL;
}

void sub_10006C698()
{
}

void sub_10006C6BC()
{
  qword_1002EF010 = (uint64_t)&off_10027CF50;
}

uint64_t *sub_10006C6D0()
{
  if (qword_1002E65B0 != -1) {
    swift_once(&qword_1002E65B0, sub_10006C6BC);
  }
  return &qword_1002EF010;
}

uint64_t sub_10006C710()
{
  return sub_10006CA3C(&qword_1002E65B0, &qword_1002EF010);
}

void sub_10006C72C(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_10006C75C()
{
  return *(void *)v0;
}

uint64_t sub_10006C764@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006CAD4(&qword_1002E65B0, &qword_1002EF010, (uint64_t)sub_10006C6BC, a1);
}

void sub_10006C780(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void sub_10006C7B4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10006C7C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100077C38();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_10006C800(uint64_t a1, uint64_t *a2)
{
  return sub_10006C81C(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

BOOL sub_10006C81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

  ;
}

uint64_t sub_10006C83C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  return result;
}

void sub_10006C848()
{
  qword_1002EF018 = (uint64_t)&off_10027CFF0;
}

uint64_t *sub_10006C85C()
{
  if (qword_1002E65B8 != -1) {
    swift_once(&qword_1002E65B8, sub_10006C848);
  }
  return &qword_1002EF018;
}

uint64_t sub_10006C89C()
{
  return sub_10006CA3C(&qword_1002E65B8, &qword_1002EF018);
}

uint64_t sub_10006C8B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_10006C8D0()
{
  if ((v0[8] & 1) != 0) {
    return 0LL;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_10006C8E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006CAD4(&qword_1002E65B8, &qword_1002EF018, (uint64_t)sub_10006C848, a1);
}

void *sub_10006C904@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0LL;
  *(void *)a2 = *result;
  char v3 = v2;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_10006C920(void *a1@<X8>)
{
  if ((*(_BYTE *)(v1 + 8) & 1) != 0) {
    *a1 = 0LL;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t sub_10006C93C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100074020();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_10006C974(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((a1[1] & 1) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((_BYTE *)a2 + 8)) {
    uint64_t v2 = 0LL;
  }
  return v3 == v2;
}

  ;
}

BOOL sub_10006C9B8(BOOL result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

void sub_10006C9CC()
{
  qword_1002EF020 = (uint64_t)&off_10027D020;
}

uint64_t *sub_10006C9E0()
{
  if (qword_1002E65C0 != -1) {
    swift_once(&qword_1002E65C0, sub_10006C9CC);
  }
  return &qword_1002EF020;
}

uint64_t sub_10006CA20()
{
  return sub_10006CA3C(&qword_1002E65C0, &qword_1002EF020);
}

uint64_t sub_10006CA3C(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

void sub_10006CA74(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
}

unint64_t sub_10006CA84@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_10006CA9C()
{
  if (v0[8]) {
    return *(void *)v0 != 0LL;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_10006CAB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006CAD4(&qword_1002E65C0, &qword_1002EF020, (uint64_t)sub_10006C9CC, a1);
}

uint64_t sub_10006CAD4@<X0>(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

void *sub_10006CB18@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_10006CB34(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

Swift::Int sub_10006CB54(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(v2 + 8);
  v7[9] = *(void *)v2;
  char v8 = v5;
  Hasher.init(_seed:)(v7, 0LL);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10006CBBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100072E04();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10006CBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(v3 + 8);
  v8[9] = *(void *)v3;
  char v9 = v6;
  Hasher.init(_seed:)(v8, a1);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_10006CC58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void *variable initialization expression of KTStoreOptInOperation.storedRecords()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10006CCA0()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10006CCA8(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*sub_10006CCD0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CCE0()
{
  return 0LL;
}

uint64_t sub_10006CCEC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100072B9C(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_10006CD1C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + _Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_10006CD50())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t (*sub_10006CD60())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CD74@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CEF4(type metadata accessor for SASAnnounce, a1);
}

uint64_t sub_10006CD80(uint64_t a1)
{
  return sub_10006CF4C(a1, type metadata accessor for SASAnnounce);
}

uint64_t (*sub_10006CD8C())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CDB4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = xmmword_1002464B0;
  *(_OWORD *)(a1 + 24) = xmmword_1002464B0;
  type metadata accessor for SASAnnounce(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006CE00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100072B9C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10006CE30(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_10006CE64())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CE74()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100072B9C(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t sub_10006CEA4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_10006CED8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CEE8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CEF4(type metadata accessor for SASCommit, a1);
}

uint64_t sub_10006CEF4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10006CF40(uint64_t a1)
{
  return sub_10006CF4C(a1, type metadata accessor for SASCommit);
}

uint64_t sub_10006CF4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_10006CF94())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006CFBC@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006D318((void (*)(void))type metadata accessor for SASCommit, a1);
}

uint64_t sub_10006CFC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for SASSelected, a1);
}

uint64_t sub_10006CFD4(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for SASSelected);
}

uint64_t (*sub_10006CFE0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D008@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  type metadata accessor for SASSelected(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006D044()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10006D050(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t sub_10006D060@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTeardown(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10006D0A8(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTeardown(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_10006D0F0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D118@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002464B0;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  type metadata accessor for SASTeardown(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006D160()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100072B9C(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t sub_10006D190(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*sub_10006D1C4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D1D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASSetupB(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10006D21C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASSetupB(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_10006D264())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D28C@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  a1[1] = xmmword_1002464B0;
  a1[2] = xmmword_1002464B0;
  a1[3] = xmmword_1002464B0;
  type metadata accessor for SASSetupB(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006D2CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CEF4(type metadata accessor for SASReveal, a1);
}

uint64_t sub_10006D2D8(uint64_t a1)
{
  return sub_10006CF4C(a1, type metadata accessor for SASReveal);
}

uint64_t (*sub_10006D2E4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D30C@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006D318((void (*)(void))type metadata accessor for SASReveal, a1);
}

uint64_t sub_10006D318@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1002464B0;
  a2[1] = xmmword_1002464B0;
  a2[2] = xmmword_1002464B0;
  a1(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006D35C()
{
  uint64_t v1 = *(void *)v0;
  sub_100072B9C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_10006D38C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t variable initialization expression of KTSwiftDB.db()
{
  return 0LL;
}

uint64_t sub_10006D3C8()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10006D3D0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10006D3D8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100072B9C(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t sub_10006D408(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100072BE0(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t sub_10006D43C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CEF4(type metadata accessor for SASConfirm, a1);
}

uint64_t sub_10006D448(uint64_t a1)
{
  return sub_10006CF4C(a1, type metadata accessor for SASConfirm);
}

uint64_t (*sub_10006D454())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D47C@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002464B0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xC000000000000000LL;
  type metadata accessor for SASConfirm(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_10006D4C4()
{
  return 0LL;
}

uint64_t sub_10006D4D0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10006D4FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t sub_10006D530()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_10006D538(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_10006D560@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CEF4(type metadata accessor for ErrorDomainCode, a1);
}

uint64_t sub_10006D56C(uint64_t a1)
{
  return sub_10006CF4C(a1, type metadata accessor for ErrorDomainCode);
}

uint64_t (*sub_10006D578())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006D5A0@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = _swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for ErrorDomainCode(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t sub_10006D5E4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002DEAA0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSFailingDevice(0LL);
  sub_100072D18(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for ErrorDomainCode(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_100077CFC((uint64_t)v5, &qword_1002DEAA0);
}

uint64_t sub_10006D6C8(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IDSFailingDevice(0LL) + 24);
  sub_100077CFC(v3, &qword_1002DEAA0);
  sub_100072D60(a1, v3);
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_10006D730(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002DEAA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for ErrorDomainCode(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for IDSFailingDevice(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_100072D18(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    void *v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = _swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_100077CFC((uint64_t)v5, &qword_1002DEAA0);
  }

  else
  {
    sub_100072D60((uint64_t)v5, (uint64_t)v9);
  }

  return sub_10006D84C;
}

void sub_10006D84C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 24LL);
  size_t v8 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v9 = **(void **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    sub_100077C7C(*(void *)(*(void *)a1 + 40LL), (uint64_t)v4, type metadata accessor for ErrorDomainCode);
    sub_100077CFC(v9, &qword_1002DEAA0);
    sub_100072D60((uint64_t)v4, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
    sub_100077CC0((uint64_t)v5, type metadata accessor for ErrorDomainCode);
  }

  else
  {
    sub_100077CFC(**(void **)a1 + v3, &qword_1002DEAA0);
    sub_100072D60((uint64_t)v5, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
  }

  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL sub_10006D944()
{
  uint64_t v1 = sub_100072CC4(&qword_1002DEAA0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for IDSFailingDevice(0LL);
  sub_100072D18(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for ErrorDomainCode(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100077CFC((uint64_t)v3, &qword_1002DEAA0);
  return v6;
}

uint64_t sub_10006D9F4()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for IDSFailingDevice(0LL) + 24);
  sub_100077CFC(v1, &qword_1002DEAA0);
  uint64_t v2 = type metadata accessor for ErrorDomainCode(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_10006DA4C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for IDSFailingDevice, a1);
}

uint64_t sub_10006DA58@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10006DAA4(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for IDSFailingDevice);
}

uint64_t sub_10006DAB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_10006DAF8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006DB20@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  uint64_t v2 = type metadata accessor for IDSFailingDevice(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t sub_10006DB88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ErrorDomainCode(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
}

uint64_t sub_10006DBC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10006DBF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t sub_10006DC24()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t sub_10006DC50(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t sub_10006DC84()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_10006DC8C(uint64_t result)
{
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10006DC94()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_10006DC9C(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*sub_10006DCA4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006DCB4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t sub_10006DCBC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_10006DCE4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006DCF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTTR(0LL) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10006DD3C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTTR(0LL) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_10006DD84())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006DDAC@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = _swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for SASTTR(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t sub_10006DDFC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF028);
  sub_100072DEC(v0, (uint64_t)qword_1002EF028);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1002464C0;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 0LL;
  *(void *)uint64_t v8 = "announce";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  dispatch_queue_attr_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "commit";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  id v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)id v14 = "selected";
  *((void *)v14 + 1) = 8LL;
  uint8_t v14[16] = 2;
  v11();
  int v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *int v15 = 3LL;
  *(void *)uint64_t v16 = "teardown";
  *((void *)v16 + 1) = 8LL;
  v16[16] = 2;
  v11();
  __int16 v17 = (void *)(v7 + 4 * v4);
  id v18 = (char *)v17 + *(int *)(v2 + 48);
  void *v17 = 4LL;
  *(void *)id v18 = "setupB";
  *((void *)v18 + 1) = 6LL;
  v18[16] = 2;
  v11();
  __int16 v19 = (void *)(v7 + 5 * v4);
  xpc_activity_state_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 5LL;
  *(void *)xpc_activity_state_t v20 = "revealA";
  *((void *)v20 + 1) = 7LL;
  v20[16] = 2;
  v11();
  id v21 = (void *)(v7 + 6 * v4);
  int v22 = (char *)v21 + *(int *)(v2 + 48);
  *id v21 = 6LL;
  *(void *)int v22 = "confirm";
  *((void *)v22 + 1) = 7LL;
  v22[16] = 2;
  v11();
  id v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *id v23 = 7LL;
  *(void *)uint64_t v24 = "tapToRadar";
  *((void *)v24 + 1) = 10LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_10006E094()
{
  return sub_10006E120(&qword_1002E65C8, (uint64_t)qword_1002EF028, (uint64_t)sub_10006DDFC);
}

uint64_t sub_10006E0B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65C8, (uint64_t)qword_1002EF028, (uint64_t)sub_10006DDFC, a1);
}

uint64_t sub_10006E0CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65C8, (uint64_t)qword_1002EF028, (uint64_t)sub_10006DDFC, a1);
}

uint64_t sub_10006E0E8(uint64_t a1)
{
  return sub_10006EDDC(a1, qword_1002EF040, 0LL, (uint64_t)"newerSession", 12LL);
}

uint64_t sub_10006E104()
{
  return sub_10006E120(&qword_1002E65D0, (uint64_t)qword_1002EF040, (uint64_t)sub_10006E0E8);
}

uint64_t sub_10006E120(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for _NameMap(0LL);
  return sub_100072DEC(v4, a2);
}

uint64_t sub_10006E160@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65D0, (uint64_t)qword_1002EF040, (uint64_t)sub_10006E0E8, a1);
}

uint64_t sub_10006E17C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_100072DEC(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_10006E1E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65D0, (uint64_t)qword_1002EF040, (uint64_t)sub_10006E0E8, a1);
}

uint64_t sub_10006E200@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_100072DEC(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_10006E26C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF058);
  sub_100072DEC(v0, (uint64_t)qword_1002EF058);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 0LL;
  *(void *)uint64_t v9 = "HMAC_SHA256_VERSION_1";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 21LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "HMAC_SHA256_VERSION_2";
  *((void *)v13 + 1) = 21LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10006E3C0()
{
  return sub_10006E120(&qword_1002E65D8, (uint64_t)qword_1002EF058, (uint64_t)sub_10006E26C);
}

uint64_t sub_10006E3DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65D8, (uint64_t)qword_1002EF058, (uint64_t)sub_10006E26C, a1);
}

uint64_t sub_10006E3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65D8, (uint64_t)qword_1002EF058, (uint64_t)sub_10006E26C, a1);
}

const char *sub_10006E414()
{
  return "SASAnnounce";
}

uint64_t sub_10006E420()
{
  return 0x756F6E6E41534153LL;
}

uint64_t sub_10006E440()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF070);
  sub_100072DEC(v0, (uint64_t)qword_1002EF070);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464E0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "aProtocolVersion";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sessionID";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 6LL;
  *(void *)uint64_t v14 = "peerSessionID";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10006E5D4()
{
  return sub_10006E120(&qword_1002E65E0, (uint64_t)qword_1002EF070, (uint64_t)sub_10006E440);
}

uint64_t sub_10006E5F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65E0, (uint64_t)qword_1002EF070, (uint64_t)sub_10006E440, a1);
}

uint64_t sub_10006E60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 6) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = v3 + 8;
        goto LABEL_5;
      }

      if (result == 1)
      {
        unint64_t v10 = sub_100072E04();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)(v3, &type metadata for SASProtocol, v10, a2, a3);
      }

uint64_t sub_10006E700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  if (!*(void *)(*v3 + 16)
    || (unint64_t v8 = sub_100072E04(),
        uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)( v7,  1LL,  &type metadata for SASProtocol,  v8,  a2,  a3),  !v4))
  {
    __asm { BR              X10 }
  }

  return result;
}

Swift::Int sub_10006E88C()
{
  return sub_100071C3C(type metadata accessor for SASAnnounce, &qword_1002DEAB0, (uint64_t)&unk_100246AF0);
}

uint64_t sub_10006E8A8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = xmmword_1002464B0;
  *(_OWORD *)(a1 + 24) = xmmword_1002464B0;
  return UnknownStorage.init()();
}

uint64_t (*sub_10006E8EC())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006E900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006E60C(a1, a2, a3);
}

uint64_t sub_10006E914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006E700(a1, a2, a3);
}

uint64_t sub_10006E92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF218, type metadata accessor for SASAnnounce, (uint64_t)&unk_100246A68);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006E980@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65E0, (uint64_t)qword_1002EF070, (uint64_t)sub_10006E440, a1);
}

uint64_t sub_10006E99C(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEB98, type metadata accessor for SASAnnounce, (uint64_t)&unk_1002469F0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006E9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEB98, type metadata accessor for SASAnnounce, (uint64_t)&unk_1002469F0);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_10006EA34()
{
  return "SASCommit";
}

uint64_t sub_10006EA40()
{
  return 0x696D6D6F43534153LL;
}

uint64_t sub_10006EA5C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF088);
  sub_100072DEC(v0, (uint64_t)qword_1002EF088);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464E0;
  unint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "sessionID";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "publicInfo";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "aCommitRandom";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10006EBF0()
{
  return sub_10006E120(&qword_1002E65E8, (uint64_t)qword_1002EF088, (uint64_t)sub_10006EA5C);
}

uint64_t sub_10006EC0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65E8, (uint64_t)qword_1002EF088, (uint64_t)sub_10006EA5C, a1);
}

uint64_t sub_10006EC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000700C4(a1, a2, a3);
}

void sub_10006EC3C()
{
}

uint64_t sub_10006EC58(uint64_t *a1, uint64_t a2)
{
  return sub_1000733AC(a1, a2, type metadata accessor for SASCommit) & 1;
}

Swift::Int sub_10006EC78()
{
  return sub_100071C3C(type metadata accessor for SASCommit, &qword_1002DEAB8, (uint64_t)&unk_100246C58);
}

uint64_t sub_10006EC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF210, type metadata accessor for SASCommit, (uint64_t)&unk_100246BD0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006ECE8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65E8, (uint64_t)qword_1002EF088, (uint64_t)sub_10006EA5C, a1);
}

uint64_t sub_10006ED04(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEBB0, type metadata accessor for SASCommit, (uint64_t)&unk_100246B58);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEBB0, type metadata accessor for SASCommit, (uint64_t)&unk_100246B58);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_10006ED94()
{
  return "SASSelected";
}

uint64_t sub_10006EDA0()
{
  return 0x63656C6553534153LL;
}

uint64_t sub_10006EDC0(uint64_t a1)
{
  return sub_10006EDDC(a1, qword_1002EF0A0, 1LL, (uint64_t)"sessionID", 9LL);
}

uint64_t sub_10006EDDC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v9, a2);
  sub_100072DEC(v9, (uint64_t)a2);
  uint64_t v10 = sub_100072CC4(&qword_1002DF238);
  uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1002464F0;
  uint64_t v17 = v16 + v15 + *(int *)(v11 + 48);
  *(void *)(v16 + v15) = a3;
  *(void *)uint64_t v17 = a4;
  *(void *)(v17 + _Block_object_dispose(va, 8) = a5;
  *(_BYTE *)(v17 + 16) = 2;
  uint64_t v18 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v19 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  return _NameMap.init(dictionaryLiteral:)(v16);
}

uint64_t sub_10006EEE8()
{
  return sub_10006E120(&qword_1002E65F0, (uint64_t)qword_1002EF0A0, (uint64_t)sub_10006EDC0);
}

uint64_t sub_10006EF04@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65F0, (uint64_t)qword_1002EF0A0, (uint64_t)sub_10006EDC0, a1);
}

uint64_t sub_10006EF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

void sub_10006EF8C()
{
  __asm { BR              X10 }

uint64_t sub_10006EFD4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    type metadata accessor for SASSelected(0LL);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnknownStorage.traverse<A>(visitor:))(v5, v4, v3);
  }

  return result;
}

Swift::Int sub_10006F064()
{
  return sub_100071C3C(type metadata accessor for SASSelected, &qword_1002DEAC0, (uint64_t)&unk_100246DC0);
}

uint64_t sub_10006F080@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  return UnknownStorage.init()();
}

uint64_t (*sub_10006F0B0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006F0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006EF20(a1, a2, a3);
}

void sub_10006F0D8()
{
}

uint64_t sub_10006F0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF208, type metadata accessor for SASSelected, (uint64_t)&unk_100246D38);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006F13C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65F0, (uint64_t)qword_1002EF0A0, (uint64_t)sub_10006EDC0, a1);
}

uint64_t sub_10006F158(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEBC8, type metadata accessor for SASSelected, (uint64_t)&unk_100246CC0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006F198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEBC8, type metadata accessor for SASSelected, (uint64_t)&unk_100246CC0);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_10006F1E8()
{
  return "SASTeardown";
}

uint64_t sub_10006F1F4()
{
  return 0x6472616554534153LL;
}

uint64_t sub_10006F214(uint64_t a1)
{
  return sub_10006F234(a1, qword_1002EF0B8, (uint64_t)"sessionID", (uint64_t)"reason", 6LL);
}

uint64_t sub_10006F234(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v7, a2);
  sub_100072DEC(v7, (uint64_t)a2);
  uint64_t v8 = sub_100072CC4(&qword_1002DF238);
  uint64_t v9 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1002464D0;
  uint64_t v15 = (void *)(v14 + v13);
  uint64_t v16 = v14 + v13 + *(int *)(v9 + 48);
  *uint64_t v15 = 1LL;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v16 + 16) = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  xpc_activity_state_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)xpc_activity_state_t v20 = a4;
  *((void *)v20 + 1) = a5;
  v20[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t sub_10006F384()
{
  return sub_10006E120(&qword_1002E65F8, (uint64_t)qword_1002EF0B8, (uint64_t)sub_10006F214);
}

uint64_t sub_10006F3A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E65F8, (uint64_t)qword_1002EF0B8, (uint64_t)sub_10006F214, a1);
}

uint64_t sub_10006F3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        unint64_t v9 = sub_100074020();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 16,  &type metadata for SASTeardownReason,  v9,  a2,  a3);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

void sub_10006F49C()
{
  __asm { BR              X10 }

uint64_t sub_10006F4E8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    if ((*(_BYTE *)(v5 + 24) & 1) != 0
      || !*(void *)(v5 + 16)
      || (uint64_t v9 = *(void *)(v5 + 16),
          char v10 = 0,
          unint64_t v8 = sub_100074020(),
          uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:))( &v9,  2LL,  &type metadata for SASTeardownReason,  v8,  v4,  v3),  !v2))
    {
      type metadata accessor for SASTeardown(0LL);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnknownStorage.traverse<A>(visitor:))(v6, v4, v3);
    }
  }

  return result;
}

Swift::Int sub_10006F5C8()
{
  return sub_100071C3C(type metadata accessor for SASTeardown, &qword_1002DEAD0, (uint64_t)&unk_100246F28);
}

uint64_t sub_10006F5E4@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002464B0;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_10006F618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10006F658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_10006F698())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006F6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F3BC(a1, a2, a3);
}

void sub_10006F6C0()
{
}

uint64_t sub_10006F6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF200, type metadata accessor for SASTeardown, (uint64_t)&unk_100246EA0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006F724@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E65F8, (uint64_t)qword_1002EF0B8, (uint64_t)sub_10006F214, a1);
}

uint64_t sub_10006F740(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEBE0, type metadata accessor for SASTeardown, (uint64_t)&unk_100246E28);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006F780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEBE0, type metadata accessor for SASTeardown, (uint64_t)&unk_100246E28);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_10006F7D0()
{
  return "SASSetupB";
}

uint64_t sub_10006F7DC()
{
  return 0x7075746553534153LL;
}

uint64_t sub_10006F7F8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF0D0);
  sub_100072DEC(v0, (uint64_t)qword_1002EF0D0);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100246500;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "sessionID";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "bRandom";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "publicInfo";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "peerSessionID";
  *((void *)v17 + 1) = 13LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10006F9B8()
{
  return sub_10006E120(&qword_1002E6600, (uint64_t)qword_1002EF0D0, (uint64_t)sub_10006F7F8);
}

uint64_t sub_10006F9D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E6600, (uint64_t)qword_1002EF0D0, (uint64_t)sub_10006F7F8, a1);
}

uint64_t sub_10006F9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = v3 + 16;
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = v3 + 32;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + 48;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

void sub_10006FAB4()
{
  __asm { BR              X10 }

uint64_t sub_10006FAFC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    __asm { BR              X10 }
  }

  return result;
}

Swift::Int sub_10006FCD0()
{
  return sub_100071C3C(type metadata accessor for SASSetupB, &qword_1002DEAD8, (uint64_t)&unk_100247090);
}

uint64_t sub_10006FCEC@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  a1[1] = xmmword_1002464B0;
  a1[2] = xmmword_1002464B0;
  a1[3] = xmmword_1002464B0;
  return UnknownStorage.init()();
}

uint64_t sub_10006FD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10006FD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_10006FD98())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006FDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F9F0(a1, a2, a3);
}

void sub_10006FDC0()
{
}

uint64_t sub_10006FDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1F8, type metadata accessor for SASSetupB, (uint64_t)&unk_100247008);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006FE24@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E6600, (uint64_t)qword_1002EF0D0, (uint64_t)sub_10006F7F8, a1);
}

uint64_t sub_10006FE40(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEBF8, type metadata accessor for SASSetupB, (uint64_t)&unk_100246F90);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006FE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEBF8, type metadata accessor for SASSetupB, (uint64_t)&unk_100246F90);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_10006FED0()
{
  return "SASReveal";
}

uint64_t sub_10006FEDC()
{
  return 0x6165766552534153LL;
}

uint64_t sub_10006FEF8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF0E8);
  sub_100072DEC(v0, (uint64_t)qword_1002EF0E8);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464E0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "sessionID";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "aRandom";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "peerSessionID";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10007008C()
{
  return sub_10006E120(&qword_1002E6608, (uint64_t)qword_1002EF0E8, (uint64_t)sub_10006FEF8);
}

uint64_t sub_1000700A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E6608, (uint64_t)qword_1002EF0E8, (uint64_t)sub_10006FEF8, a1);
}

uint64_t sub_1000700C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = v3 + 16;
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v9 = v3;
        goto LABEL_5;
      }

LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + 32;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularBytesField(value:)(v9, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v10 = type metadata accessor for ErrorDomainCode(0LL);
    uint64_t v11 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
    uint64_t v12 = v9;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 24, v10, v11, a2, a3);
LABEL_5:
    uint64_t v9 = v12;
    goto LABEL_6;
  }

  return result;
}

  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160LL))(v11);
  if (v18)
  {
    swift_release(v18);
    uint64_t v19 = sub_100095E84();
    xpc_activity_state_t v20 = swift_allocError(&type metadata for KTEligibilityError, v19, 0LL, 0LL);
    *id v21 = 4LL;
    swift_willThrow(v20);
  }

  else
  {
    (*(void (**)(void))(*(void *)v8 + 96LL))();
  }

  swift_release(v8);
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + 8;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v9, a2, a3);
    goto LABEL_6;
  }

  return result;
}

  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

  memset_s(v11, __n[0], 0, __n[0]);
  free(v11);
  return v15;
}

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);

  return v6;
}
}

void sub_100070168()
{
}

void sub_100070184()
{
  __asm { BR              X10 }

uint64_t sub_1000701D4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_10007033C(uint64_t *a1, uint64_t a2)
{
  return sub_1000733AC(a1, a2, type metadata accessor for SASReveal) & 1;
}

Swift::Int sub_10007035C()
{
  return sub_100071C3C(type metadata accessor for SASReveal, &qword_1002DEAE0, (uint64_t)&unk_1002471F8);
}

uint64_t sub_100070378@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002464B0;
  a1[1] = xmmword_1002464B0;
  a1[2] = xmmword_1002464B0;
  return UnknownStorage.init()();
}

uint64_t sub_1000703A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1F0, type metadata accessor for SASReveal, (uint64_t)&unk_100247170);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000703F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E6608, (uint64_t)qword_1002EF0E8, (uint64_t)sub_10006FEF8, a1);
}

uint64_t sub_100070410(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEC10, type metadata accessor for SASReveal, (uint64_t)&unk_1002470F8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100070450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEC10, type metadata accessor for SASReveal, (uint64_t)&unk_1002470F8);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000704A0()
{
  return "SASConfirm";
}

uint64_t sub_1000704AC()
{
  return 0x69666E6F43534153LL;
}

uint64_t sub_1000704C8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF100);
  sub_100072DEC(v0, (uint64_t)qword_1002EF100);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464E0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "sessionID";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sentTime";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "peerSessionID";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10007065C()
{
  return sub_10006E120(&qword_1002E6610, (uint64_t)qword_1002EF100, (uint64_t)sub_1000704C8);
}

uint64_t sub_100070678@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E6610, (uint64_t)qword_1002EF100, (uint64_t)sub_1000704C8, a1);
}

uint64_t sub_100070694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 16, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v9 = v3;
LABEL_12:
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v9, a2, a3);
      }

LABEL_5:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + 24;
    goto LABEL_12;
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    int v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    id v23 = (-1LL << result) - 1;
  }

  *int v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  int v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  xpc_activity_state_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int v22 = *v21;
    id v23 = (-1LL << v3) - 1;
  }

  else
  {
    id v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    id v23 = *v21;
    int v22 = (-1LL << result) - 1;
  }

  *id v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  return 1LL;
}

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[KTOptInManagerServer applicationId](self, "applicationId"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication applicationPrefixForIdentifier:]( &OBJC_CLASS___TransparencyApplication,  "applicationPrefixForIdentifier:",  v5));

  return v6;
}

void sub_100070748()
{
  __asm { BR              X10 }

uint64_t sub_100070790(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    uint64_t v7 = *(void *)(v5 + 16);
    if (!v7
      || (uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:))( v7,  2LL,  v4,  v3),  !v2))
    {
      __asm { BR              X10 }
    }
  }

  return result;
}

Swift::Int sub_1000708B4()
{
  return sub_100071C3C(type metadata accessor for SASConfirm, &qword_1002DEAE8, (uint64_t)&unk_100247360);
}

uint64_t sub_1000708D0@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002464B0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xC000000000000000LL;
  return UnknownStorage.init()();
}

uint64_t sub_100070904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100070694(a1, a2, a3);
}

void sub_100070918()
{
}

uint64_t sub_10007092C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1E8, type metadata accessor for SASConfirm, (uint64_t)&unk_1002472D8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007097C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E6610, (uint64_t)qword_1002EF100, (uint64_t)sub_1000704C8, a1);
}

uint64_t sub_100070998(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEC28, type metadata accessor for SASConfirm, (uint64_t)&unk_100247260);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000709D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEC28, type metadata accessor for SASConfirm, (uint64_t)&unk_100247260);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100070A28()
{
  return &unk_1002465D8;
}

uint64_t sub_100070A34()
{
  return 0x6D6F44726F727245LL;
}

uint64_t sub_100070A58()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF118);
  sub_100072DEC(v0, (uint64_t)qword_1002EF118);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464E0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "errorDomain";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "errorCode";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "underlyingErrors";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100070BEC()
{
  return sub_10006E120(&qword_1002E6618, (uint64_t)qword_1002EF118, (uint64_t)sub_100070A58);
}

uint64_t sub_100070C08@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E6618, (uint64_t)qword_1002EF118, (uint64_t)sub_100070A58, a1);
}

uint64_t sub_100070C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v12 = v9;
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 16, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v12 = v9;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
        goto LABEL_5;
      }

uint64_t sub_100070D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v11 = v3[2];
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v11, 2LL, a2, a3), !v4))
    {
      uint64_t v12 = v3[3];
      if (!*(void *)(v12 + 16)
        || (uint64_t v13 = type metadata accessor for ErrorDomainCode(0LL),
            uint64_t v14 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8),
            uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v12,  3LL,  v13,  v14,  a2,  a3),  !v4))
      {
        type metadata accessor for ErrorDomainCode(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

Swift::Int sub_100070E78()
{
  return sub_100071C3C(type metadata accessor for ErrorDomainCode, &qword_1002DEAF8, (uint64_t)&unk_1002474C8);
}

uint64_t sub_100070E94@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_100070EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100070F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_100070F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100070C24(a1, a2, a3);
}

uint64_t sub_100070F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100070D44(a1, a2, a3);
}

uint64_t sub_100070F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1E0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_100247440);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100070FBC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E6618, (uint64_t)qword_1002EF118, (uint64_t)sub_100070A58, a1);
}

uint64_t sub_100070FD8(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100071018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100071068()
{
  return &unk_10027CF40;
}

unint64_t sub_100071074()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100071090(uint64_t a1)
{
  return sub_10006F234(a1, qword_1002EF130, (uint64_t)"pushToken", (uint64_t)"error", 5LL);
}

uint64_t sub_1000710B0()
{
  return sub_10006E120(&qword_1002E6620, (uint64_t)qword_1002EF130, (uint64_t)sub_100071090);
}

uint64_t sub_1000710CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002E6620, (uint64_t)qword_1002EF130, (uint64_t)sub_100071090, a1);
}

uint64_t sub_1000710E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for IDSFailingDevice(0LL) + 24);
        uint64_t v10 = type metadata accessor for ErrorDomainCode(0LL);
        uint64_t v11 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

void sub_100071200()
{
  __asm { BR              X10 }

uint64_t sub_100071248(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    uint64_t result = sub_1000712F4(v5, v6, v4, v3);
    if (!v2)
    {
      type metadata accessor for IDSFailingDevice(0LL);
      return UnknownStorage.traverse<A>(visitor:)(v6, v4, v3);
    }
  }

  return result;
}

uint64_t sub_1000712F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002DEAA0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IDSFailingDevice(0LL);
  sub_100072D18(a1 + *(int *)(v14 + 24), (uint64_t)v9);
  sub_100072D60((uint64_t)v9, (uint64_t)v13);
  uint64_t v16 = sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v13, 2LL, v10, v16, a3, a4);
  return sub_100077CC0((uint64_t)v13, type metadata accessor for ErrorDomainCode);
}

Swift::Int sub_100071460()
{
  return sub_100071C3C(type metadata accessor for IDSFailingDevice, &qword_1002DEB00, (uint64_t)&unk_100247630);
}

uint64_t sub_10007147C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1002464B0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for ErrorDomainCode(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000714DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10007151C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_10007155C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000710E8(a1, a2, a3);
}

void sub_100071570()
{
}

uint64_t sub_100071584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1D8, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_1002475A8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000715D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002E6620, (uint64_t)qword_1002EF130, (uint64_t)sub_100071090, a1);
}

uint64_t sub_1000715F0(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DEB08, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247530);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100071630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DEB08, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247530);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_100071680()
{
  return "SASTTR";
}

uint64_t sub_10007168C()
{
  return 0x525454534153LL;
}

uint64_t sub_1000716A0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF148);
  sub_100072DEC(v0, (uint64_t)qword_1002EF148);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100246510;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "unique";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "title";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 5LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "description";
  *((void *)v15 + 1) = 11LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "relatedRadar";
  *((void *)v17 + 1) = 12LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "radar";
  *((void *)v19 + 1) = 5LL;
  v19[16] = 2;
  v12();
  xpc_activity_state_t v20 = (void *)(v8 + 5 * v4);
  id v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)id v21 = "idsFailingDevices";
  *((void *)v21 + 1) = 17LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000718D4()
{
  return sub_10006E120(qword_1002E6628, (uint64_t)qword_1002EF148, (uint64_t)sub_1000716A0);
}

uint64_t sub_1000718F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(qword_1002E6628, (uint64_t)qword_1002EF148, (uint64_t)sub_1000716A0, a1);
}

uint64_t sub_10007190C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = v3 + 16;
          goto LABEL_5;
        case 3LL:
          uint64_t v10 = v3 + 32;
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v10, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v12 = v3 + 48;
          goto LABEL_14;
        case 5LL:
          uint64_t v12 = v3 + 56;
LABEL_14:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v12, a2, a3);
          goto LABEL_6;
        case 6LL:
          uint64_t v13 = type metadata accessor for IDSFailingDevice(0LL);
          uint64_t v14 = sub_100073FE0(&qword_1002DEB08, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247530);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 64, v13, v14, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100071A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v12 = v5[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      unint64_t v14 = v5[5];
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v5[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
      {
        uint64_t v16 = v5[6];
        if (!v16
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v16, 4LL, a2, a3), !v4))
        {
          uint64_t v17 = v5[7];
          if (!v17
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v17, 5LL, a2, a3), !v4))
          {
            uint64_t v18 = v5[8];
            if (!*(void *)(v18 + 16)
              || (uint64_t v19 = type metadata accessor for IDSFailingDevice(0LL),
                  uint64_t v20 = sub_100073FE0( &qword_1002DEB08,  type metadata accessor for IDSFailingDevice,  (uint64_t)&unk_100247530),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v18,  6LL,  v19,  v20,  a2,  a3),  !v4))
            {
              type metadata accessor for SASTTR(0LL);
              return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int sub_100071C20()
{
  return sub_100071C3C(type metadata accessor for SASTTR, &qword_1002DEB10, (uint64_t)&unk_100247798);
}

Swift::Int sub_100071C3C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = sub_100073FE0(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_100071CB8@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_100071CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100071D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_100071D74())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100071D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007190C(a1, a2, a3);
}

uint64_t sub_100071D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071A68(a1, a2, a3);
}

uint64_t sub_100071DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF1D0, type metadata accessor for SASTTR, (uint64_t)&unk_100247710);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100071E00@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(qword_1002E6628, (uint64_t)qword_1002EF148, (uint64_t)sub_1000716A0, a1);
}

uint64_t sub_100071E1C(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0((unint64_t *)&qword_1002E10B0, type metadata accessor for SASTTR, (uint64_t)&unk_100247698);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_100071E5C(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_100071EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0((unint64_t *)&qword_1002E10B0, type metadata accessor for SASTTR, (uint64_t)&unk_100247698);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100071F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

void sub_100071F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100071FB0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100072194LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  BOOL *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1000721B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100072CC4(&qword_1002DEAA0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100072CC4(&qword_1002DF230);
  __chkstk_darwin(v23);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for IDSFailingDevice(0LL);
  uint64_t v12 = __chkstk_darwin(v26);
  unint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (v18 && a1 != a2)
    {
      v22[7] = v4;
      v22[8] = v11;
      v22[3] = v6;
      v22[4] = v9;
      unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      void v22[5] = *(void *)(v15 + 72);
      v22[6] = 0LL;
      v22[1] = a2;
      v22[2] = a1;
      uint64_t v25 = v18 - 1;
      sub_100077C7C(a1 + v19, (uint64_t)v22 - v16, type metadata accessor for IDSFailingDevice);
      sub_100077C7C(a2 + v19, (uint64_t)v14, type metadata accessor for IDSFailingDevice);
      __asm { BR              X10 }
    }

    char v20 = 1;
  }

  else
  {
    char v20 = 0;
  }

  return v20 & 1;
}

uint64_t sub_100072910(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v4 = __chkstk_darwin(v26);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  unint64_t v9 = (uint64_t *)((char *)&v25 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16))
  {
LABEL_20:
    char v21 = 0;
    return v21 & 1;
  }

  if (v10 && a1 != a2)
  {
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v25 = *(void *)(v7 + 72);
    uint64_t v12 = v10 - 1;
    while (1)
    {
      sub_100077C7C(a1 + v11, (uint64_t)v9, type metadata accessor for ErrorDomainCode);
      sub_100077C7C(a2 + v11, (uint64_t)v6, type metadata accessor for ErrorDomainCode);
      uint64_t v13 = v9[1];
      uint64_t v14 = v6[1];
      BOOL v15 = *v9 == *v6 && v13 == v14;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v13, *v6, v14, 0LL) & 1) == 0
        || v9[2] != v6[2]
        || (sub_100072910(v9[3], v6[3]) & 1) == 0)
      {
        break;
      }

      uint64_t v16 = *(int *)(v26 + 28);
      uint64_t v17 = (char *)v9 + v16;
      uint64_t v18 = (char *)v6 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v20 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v18, v19, v20);
      sub_100077CC0((uint64_t)v6, type metadata accessor for ErrorDomainCode);
      sub_100077CC0((uint64_t)v9, type metadata accessor for ErrorDomainCode);
      BOOL v23 = v12-- != 0;
      if ((v21 & 1) != 0)
      {
        v11 += v25;
        if (v23) {
          continue;
        }
      }

      return v21 & 1;
    }

    sub_100077CC0((uint64_t)v6, type metadata accessor for ErrorDomainCode);
    sub_100077CC0((uint64_t)v9, type metadata accessor for ErrorDomainCode);
    goto LABEL_20;
  }

  char v21 = 1;
  return v21 & 1;
}

uint64_t sub_100072AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (_BYTE *)(a1 + 40);
    uint64_t v4 = (_BYTE *)(a2 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (*v3) {
        uint64_t v6 = *((void *)v3 - 1) != 0LL;
      }
      else {
        uint64_t v6 = *((void *)v3 - 1);
      }
      if (*v4 == 1)
      {
        if (v5)
        {
          if (v6 != 1) {
            return 0LL;
          }
        }

        else if (v6)
        {
          return 0LL;
        }
      }

      else if (v6 != v5)
      {
        return 0LL;
      }

      v3 += 16;
      v4 += 16;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

  ;
}

uint64_t sub_100072B9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100072BE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_release)();
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t type metadata accessor for SASAnnounce(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D30, (uint64_t)&nominal type descriptor for SASAnnounce);
}

uint64_t type metadata accessor for SASCommit(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D40, (uint64_t)&nominal type descriptor for SASCommit);
}

uint64_t type metadata accessor for SASSelected(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D50, (uint64_t)&nominal type descriptor for SASSelected);
}

uint64_t type metadata accessor for SASTeardown(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D60, (uint64_t)&nominal type descriptor for SASTeardown);
}

uint64_t type metadata accessor for SASSetupB(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D70, (uint64_t)&nominal type descriptor for SASSetupB);
}

uint64_t type metadata accessor for SASReveal(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D80, (uint64_t)&nominal type descriptor for SASReveal);
}

uint64_t type metadata accessor for SASConfirm(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8D90, (uint64_t)&nominal type descriptor for SASConfirm);
}

uint64_t type metadata accessor for ErrorDomainCode(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8DA0, (uint64_t)&nominal type descriptor for ErrorDomainCode);
}

uint64_t sub_100072CC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for IDSFailingDevice(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E8DB0, (uint64_t)&nominal type descriptor for IDSFailingDevice);
}

uint64_t sub_100072D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4(&qword_1002DEAA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SASTTR(uint64_t a1)
{
  return sub_100072DB8(a1, qword_1002E8DC0, (uint64_t)&nominal type descriptor for SASTTR);
}

uint64_t sub_100072DB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100072DEC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_100072E04()
{
  unint64_t result = qword_1002DEAA8;
  if (!qword_1002DEAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246858, &type metadata for SASProtocol);
    atomic_store(result, (unint64_t *)&qword_1002DEAA8);
  }

  return result;
}

uint64_t sub_100072E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_100071F50((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100072F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100071F50(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_100072FD0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10007301C()
{
  return ((uint64_t (*)(void))((char *)&loc_100073050 + *((int *)qword_100073228 + (v0 >> 62))))();
}

uint64_t sub_100073060@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_100073248(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v22 - v9;
  sub_100072FD0(*a1, a1[1]);
  if ((v11 & 1) != 0
    && (sub_100072FD0(a1[2], a1[3]), (v12 & 1) != 0)
    && (sub_100072FD0(a1[4], a1[5]), (v13 & 1) != 0)
    && (sub_100072FD0(a1[6], a1[7]), (v14 & 1) != 0))
  {
    uint64_t v15 = type metadata accessor for SASSetupB(0LL);
    uint64_t v16 = (char *)a1 + *(int *)(v15 + 32);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, (char *)(a2 + *(int *)(v15 + 32)), v4);
    uint64_t v18 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t sub_1000733AC(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  char v12 = (char *)&v23 - v11;
  sub_100072FD0(*a1, a1[1]);
  if ((v13 & 1) != 0 && (sub_100072FD0(a1[2], a1[3]), (v14 & 1) != 0) && (sub_100072FD0(a1[4], a1[5]), (v15 & 1) != 0))
  {
    uint64_t v16 = a3(0LL);
    uint64_t v17 = (char *)a1 + *(int *)(v16 + 28);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v18(v12, v17, v6);
    v18(v10, (char *)(a2 + *(int *)(v16 + 28)), v6);
    uint64_t v19 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v19);
    char v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v21(v12, v6);
  }

  else
  {
    char v20 = 0;
  }

  return v20 & 1;
}

uint64_t sub_100073504(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v30 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = a1[2];
    uint64_t v16 = a1[3];
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v18 = *((void *)a2 + 3);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      if ((v20 = a1[4], uint64_t v21 = a1[5], v22 = *((void *)a2 + 4), v23 = *((void *)a2 + 5), v20 == v22) && v21 == v23
        || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0LL) & 1) != 0))
      {
        if (a1[6] == *((void *)a2 + 6)
          && a1[7] == *((void *)a2 + 7)
          && (sub_1000721B8(a1[8], *((void *)a2 + 8)) & 1) != 0)
        {
          uint64_t v24 = type metadata accessor for SASTTR(0LL);
          uint64_t v25 = (char *)a1 + *(int *)(v24 + 40);
          uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v26(v10, v25, v4);
          v26(v8, &a2[*(int *)(v24 + 40)], v4);
          uint64_t v27 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v27);
          __int128 v28 = *(void (**)(char *, uint64_t))(v5 + 8);
          v28(v8, v4);
          v28(v10, v4);
        }

        else
        {
          char v14 = 0;
        }
      }
    }
  }

  return v14 & 1;
}

uint64_t sub_1000736C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v45 - v9;
  uint64_t v11 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100072CC4(&qword_1002DF230);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100072CC4(&qword_1002DEAA0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v45 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v45 - v24;
  sub_100072FD0(*a1, a1[1]);
  if ((v26 & 1) == 0) {
    goto LABEL_8;
  }
  char v47 = v8;
  id v48 = v20;
  char v45 = v13;
  char v46 = v10;
  uint64_t v27 = type metadata accessor for IDSFailingDevice(0LL);
  sub_100072D18((uint64_t)a1 + *(int *)(v27 + 24), (uint64_t)v25);
  sub_100072D18(a2 + *(int *)(v27 + 24), (uint64_t)v23);
  uint64_t v28 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_100072D18((uint64_t)v25, (uint64_t)v16);
  sub_100072D18((uint64_t)v23, v28);
  __int128 v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  uint64_t v30 = a2;
  if (v29((uint64_t)v16, 1LL, v52) == 1)
  {
    sub_100077CFC((uint64_t)v23, &qword_1002DEAA0);
    sub_100077CFC((uint64_t)v25, &qword_1002DEAA0);
    if (v29(v28, 1LL, v52) == 1)
    {
      sub_100077CFC((uint64_t)v16, &qword_1002DEAA0);
LABEL_11:
      id v36 = (char *)a1 + *(int *)(v27 + 20);
      uint64_t v37 = v49;
      uint64_t v38 = v50;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
      uint64_t v40 = v46;
      v39(v46, v36, v49);
      id v41 = (char *)(v30 + *(int *)(v27 + 20));
      uint64_t v42 = v47;
      v39(v47, v41, v37);
      uint64_t v43 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v42, v37, v43);
      char v44 = *(void (**)(char *, uint64_t))(v38 + 8);
      v44(v42, v37);
      v44(v40, v37);
      return v32 & 1;
    }

    goto LABEL_7;
  }

  __int128 v31 = v48;
  sub_100072D18((uint64_t)v16, (uint64_t)v48);
  if (v29(v28, 1LL, v52) == 1)
  {
    sub_100077CFC((uint64_t)v23, &qword_1002DEAA0);
    sub_100077CFC((uint64_t)v25, &qword_1002DEAA0);
    sub_100077CC0((uint64_t)v31, type metadata accessor for ErrorDomainCode);
LABEL_7:
    sub_100077CFC((uint64_t)v16, &qword_1002DF230);
    goto LABEL_8;
  }

  __int16 v34 = v45;
  sub_100072D60(v28, (uint64_t)v45);
  char v35 = sub_100073A8C(v31, v34);
  sub_100077CC0((uint64_t)v34, type metadata accessor for ErrorDomainCode);
  sub_100077CFC((uint64_t)v23, &qword_1002DEAA0);
  sub_100077CFC((uint64_t)v25, &qword_1002DEAA0);
  sub_100077CC0((uint64_t)v31, type metadata accessor for ErrorDomainCode);
  sub_100077CFC((uint64_t)v16, &qword_1002DEAA0);
  if ((v35 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_100073A8C(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v21 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    if (a1[2] == *((void *)a2 + 2) && (sub_100072910(a1[3], *((void *)a2 + 3)) & 1) != 0)
    {
      uint64_t v15 = type metadata accessor for ErrorDomainCode(0LL);
      uint64_t v16 = (char *)a1 + *(int *)(v15 + 28);
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v17(v10, v16, v4);
      v17(v8, &a2[*(int *)(v15 + 28)], v4);
      uint64_t v18 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v8, v4);
      v19(v10, v4);
    }

    else
    {
      char v14 = 0;
    }
  }

  return v14 & 1;
}

uint64_t sub_100073BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v20 - v9;
  sub_100072FD0(*(void *)a1, *(void *)(a1 + 8));
  if ((v11 & 1) == 0) {
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
    {
      uint64_t v12 = 0LL;
      goto LABEL_8;
    }

LABEL_9:
    uint64_t v14 = type metadata accessor for SASTeardown(0LL);
    uint64_t v15 = a1 + *(int *)(v14 + 24);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, a2 + *(int *)(v14 + 24), v4);
    uint64_t v17 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v17);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
    return v13 & 1;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    if (v12) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }

  uint64_t v43 = v25;
  uint64_t v20 = v26;
LABEL_14:
  *(void *)&result.value._private1 = v22;
  result.value._private = v21;
  result.value.super.isa = v20;
  result.is_nil = v23;
  return result;
}

  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

  sub_1000F6D80(v17);
  return v15;
}

  memset_s(__s, v6, 0, v6);
  return v3;
}

    LOBYTE(v6) = 1;
  }

  return v6;
}

  return v10;
}

    uint64_t v17 = 0LL;
    goto LABEL_10;
  }

  uint64_t v14 = v13;
  [v12 setOptIn:v23];
  uint64_t v22 = 0LL;
  uint64_t v15 = [v12 parseUint64:v14 end:v10 result:&v22];
  if (!v15)
  {
    if (a4)
    {
      uint64_t v18 = kTransparencyErrorDecode;
      uint64_t v19 = @"failed to parse timestampMs from OptInOut";
      uint64_t v20 = -275LL;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  uint64_t v16 = v15;
  [v12 setTimestampMs:v22];
  objc_msgSend(v12, "setParsedLength:", v16 - (_BYTE *)objc_msgSend(objc_retainAutorelease(v8), "bytes"));
  uint64_t v17 = v12;
LABEL_10:

  return v17;
}

  mutationType = self->_mutationType;
  mutationMs = self->_mutationMs;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSData kt_hexString](self->_uriVRFOutput, "kt_hexString"));
  char v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{\tmutationType:%hhu\n\tmutationMs:%llu\n\turiVRFOutput:%@\n\tsubMutation:\n%@\n}",  mutationType,  mutationMs,  v9,  v4));

  return v10;
}

  mutationType = self->_mutationType;
  mutationMs = self->_mutationMs;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSData kt_hexString](self->_uriVRFOutput, "kt_hexString"));
  char v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mutationType:%hhu; mutationMs:%llu; uriVRFOutput:%@; subMutation:%@",
                    mutationType,
                    mutationMs,
                    v9,
                    v4));

  return v10;
}

      char v13 = objc_claimAutoreleasedReturnValue([v7 topLevelTreeEntry]);
      if (!v13) {
        goto LABEL_15;
      }
      uint64_t v14 = (void *)v13;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 topLevelTreeEntry]);
      if ([v15 hasSlh])
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 topLevelTreeEntry]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 slh]);

        if (!v17)
        {
LABEL_15:

          uint64_t v5 = v18;
          goto LABEL_16;
        }

        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 topLevelTreeEntry]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 slh]);
        -[KTContextVerifier checkHeadEpoch:](self, "checkHeadEpoch:", v15);
      }

      goto LABEL_15;
    }
  }

uint64_t sub_100073D58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v19 - v9;
  sub_100072FD0(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = type metadata accessor for SASSelected(0LL);
    char v13 = (char *)a1 + *(int *)(v12 + 20);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    uint64_t v15 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_100073E8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v20 - v9;
  if ((sub_100072AFC(*a1, *a2) & 1) != 0
    && (sub_100072FD0(a1[1], a1[2]), (v11 & 1) != 0)
    && (sub_100072FD0(a1[3], a1[4]), (v12 & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for SASAnnounce(0LL);
    uint64_t v14 = (char *)a1 + *(int *)(v13 + 28);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 28), v4);
    uint64_t v16 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_100073FE0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100074020()
{
  unint64_t result = qword_1002DEAC8;
  if (!qword_1002DEAC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246738, &type metadata for SASTeardownReason);
    atomic_store(result, (unint64_t *)&qword_1002DEAC8);
  }

  return result;
}

uint64_t sub_100074064(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v20 - v9;
  sub_100072FD0(*a1, a1[1]);
  if ((v11 & 1) != 0 && a1[2] == *(void *)(a2 + 16) && (sub_100072FD0(a1[3], a1[4]), (v12 & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for SASConfirm(0LL);
    uint64_t v14 = (char *)a1 + *(int *)(v13 + 28);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 28)), v4);
    uint64_t v16 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

unint64_t sub_1000741BC()
{
  unint64_t result = qword_1002DEB18;
  if (!qword_1002DEB18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002466D0, &type metadata for SASIDSProtocolNumbers);
    atomic_store(result, (unint64_t *)&qword_1002DEB18);
  }

  return result;
}

unint64_t sub_100074204()
{
  unint64_t result = qword_1002DEB20;
  if (!qword_1002DEB20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246698, &type metadata for SASIDSProtocolNumbers);
    atomic_store(result, (unint64_t *)&qword_1002DEB20);
  }

  return result;
}

uint64_t sub_100074248()
{
  return sub_1000744A8(&qword_1002DEB28, &qword_1002DEB30);
}

uint64_t sub_10007426C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1000742B4()
{
  unint64_t result = qword_1002DEB38;
  if (!qword_1002DEB38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246710, &type metadata for SASIDSProtocolNumbers);
    atomic_store(result, (unint64_t *)&qword_1002DEB38);
  }

  return result;
}

unint64_t sub_1000742FC()
{
  unint64_t result = qword_1002DEB40;
  if (!qword_1002DEB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002467F0, &type metadata for SASTeardownReason);
    atomic_store(result, (unint64_t *)&qword_1002DEB40);
  }

  return result;
}

unint64_t sub_100074344()
{
  unint64_t result = qword_1002DEB48;
  if (!qword_1002DEB48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002467B8, &type metadata for SASTeardownReason);
    atomic_store(result, (unint64_t *)&qword_1002DEB48);
  }

  return result;
}

uint64_t sub_100074388()
{
  return sub_1000744A8(&qword_1002DEB50, &qword_1002DEB58);
}

unint64_t sub_1000743B0()
{
  unint64_t result = qword_1002DEB60;
  if (!qword_1002DEB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246830, &type metadata for SASTeardownReason);
    atomic_store(result, (unint64_t *)&qword_1002DEB60);
  }

  return result;
}

unint64_t sub_1000743F8()
{
  unint64_t result = qword_1002DEB68;
  if (!qword_1002DEB68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246910, &type metadata for SASProtocol);
    atomic_store(result, (unint64_t *)&qword_1002DEB68);
  }

  return result;
}

unint64_t sub_100074440()
{
  unint64_t result = qword_1002DEB70;
  if (!qword_1002DEB70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002468D8, &type metadata for SASProtocol);
    atomic_store(result, (unint64_t *)&qword_1002DEB70);
  }

  return result;
}

uint64_t sub_100074484()
{
  return sub_1000744A8(&qword_1002DEB78, &qword_1002DEB80);
}

uint64_t sub_1000744A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10007426C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000744EC()
{
  unint64_t result = qword_1002DEB88;
  if (!qword_1002DEB88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246950, &type metadata for SASProtocol);
    atomic_store(result, (unint64_t *)&qword_1002DEB88);
  }

  return result;
}

uint64_t sub_100074530()
{
  return sub_100073FE0(&qword_1002DEB90, type metadata accessor for SASAnnounce, (uint64_t)&unk_100246AC8);
}

uint64_t sub_10007455C()
{
  return sub_100073FE0(&qword_1002DEB98, type metadata accessor for SASAnnounce, (uint64_t)&unk_1002469F0);
}

uint64_t sub_100074588()
{
  return sub_100073FE0(&qword_1002DEAB0, type metadata accessor for SASAnnounce, (uint64_t)&unk_100246AF0);
}

uint64_t sub_1000745B4()
{
  return sub_100073FE0(&qword_1002DEBA0, type metadata accessor for SASAnnounce, (uint64_t)&unk_100246B30);
}

uint64_t sub_1000745E0()
{
  return sub_100073FE0(&qword_1002DEBA8, type metadata accessor for SASCommit, (uint64_t)&unk_100246C30);
}

uint64_t sub_10007460C()
{
  return sub_100073FE0(&qword_1002DEBB0, type metadata accessor for SASCommit, (uint64_t)&unk_100246B58);
}

uint64_t sub_100074638()
{
  return sub_100073FE0(&qword_1002DEAB8, type metadata accessor for SASCommit, (uint64_t)&unk_100246C58);
}

uint64_t sub_100074664()
{
  return sub_100073FE0(&qword_1002DEBB8, type metadata accessor for SASCommit, (uint64_t)&unk_100246C98);
}

uint64_t sub_100074690()
{
  return sub_100073FE0(&qword_1002DEBC0, type metadata accessor for SASSelected, (uint64_t)&unk_100246D98);
}

uint64_t sub_1000746BC()
{
  return sub_100073FE0(&qword_1002DEBC8, type metadata accessor for SASSelected, (uint64_t)&unk_100246CC0);
}

uint64_t sub_1000746E8()
{
  return sub_100073FE0(&qword_1002DEAC0, type metadata accessor for SASSelected, (uint64_t)&unk_100246DC0);
}

uint64_t sub_100074714()
{
  return sub_100073FE0(&qword_1002DEBD0, type metadata accessor for SASSelected, (uint64_t)&unk_100246E00);
}

uint64_t sub_100074740()
{
  return sub_100073FE0(&qword_1002DEBD8, type metadata accessor for SASTeardown, (uint64_t)&unk_100246F00);
}

uint64_t sub_10007476C()
{
  return sub_100073FE0(&qword_1002DEBE0, type metadata accessor for SASTeardown, (uint64_t)&unk_100246E28);
}

uint64_t sub_100074798()
{
  return sub_100073FE0(&qword_1002DEAD0, type metadata accessor for SASTeardown, (uint64_t)&unk_100246F28);
}

uint64_t sub_1000747C4()
{
  return sub_100073FE0(&qword_1002DEBE8, type metadata accessor for SASTeardown, (uint64_t)&unk_100246F68);
}

uint64_t sub_1000747F0()
{
  return sub_100073FE0(&qword_1002DEBF0, type metadata accessor for SASSetupB, (uint64_t)&unk_100247068);
}

uint64_t sub_10007481C()
{
  return sub_100073FE0(&qword_1002DEBF8, type metadata accessor for SASSetupB, (uint64_t)&unk_100246F90);
}

uint64_t sub_100074848()
{
  return sub_100073FE0(&qword_1002DEAD8, type metadata accessor for SASSetupB, (uint64_t)&unk_100247090);
}

uint64_t sub_100074874()
{
  return sub_100073FE0(&qword_1002DEC00, type metadata accessor for SASSetupB, (uint64_t)&unk_1002470D0);
}

uint64_t sub_1000748A0()
{
  return sub_100073FE0(&qword_1002DEC08, type metadata accessor for SASReveal, (uint64_t)&unk_1002471D0);
}

uint64_t sub_1000748CC()
{
  return sub_100073FE0(&qword_1002DEC10, type metadata accessor for SASReveal, (uint64_t)&unk_1002470F8);
}

uint64_t sub_1000748F8()
{
  return sub_100073FE0(&qword_1002DEAE0, type metadata accessor for SASReveal, (uint64_t)&unk_1002471F8);
}

uint64_t sub_100074924()
{
  return sub_100073FE0(&qword_1002DEC18, type metadata accessor for SASReveal, (uint64_t)&unk_100247238);
}

uint64_t sub_100074950()
{
  return sub_100073FE0(&qword_1002DEC20, type metadata accessor for SASConfirm, (uint64_t)&unk_100247338);
}

uint64_t sub_10007497C()
{
  return sub_100073FE0(&qword_1002DEC28, type metadata accessor for SASConfirm, (uint64_t)&unk_100247260);
}

uint64_t sub_1000749A8()
{
  return sub_100073FE0(&qword_1002DEAE8, type metadata accessor for SASConfirm, (uint64_t)&unk_100247360);
}

uint64_t sub_1000749D4()
{
  return sub_100073FE0(&qword_1002DEC30, type metadata accessor for SASConfirm, (uint64_t)&unk_1002473A0);
}

uint64_t sub_100074A00()
{
  return sub_100073FE0(&qword_1002DEC38, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002474A0);
}

uint64_t sub_100074A2C()
{
  return sub_100073FE0(&qword_1002DEAF0, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002473C8);
}

uint64_t sub_100074A58()
{
  return sub_100073FE0(&qword_1002DEAF8, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_1002474C8);
}

uint64_t sub_100074A84()
{
  return sub_100073FE0(&qword_1002DEC40, type metadata accessor for ErrorDomainCode, (uint64_t)&unk_100247508);
}

uint64_t sub_100074AB0()
{
  return sub_100073FE0(&qword_1002DEC48, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247608);
}

uint64_t sub_100074ADC()
{
  return sub_100073FE0(&qword_1002DEB08, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247530);
}

uint64_t sub_100074B08()
{
  return sub_100073FE0(&qword_1002DEB00, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247630);
}

uint64_t sub_100074B34()
{
  return sub_100073FE0(&qword_1002DEC50, type metadata accessor for IDSFailingDevice, (uint64_t)&unk_100247670);
}

uint64_t sub_100074B60()
{
  return sub_100073FE0(&qword_1002DEC58, type metadata accessor for SASTTR, (uint64_t)&unk_100247770);
}

uint64_t sub_100074B8C()
{
  return sub_100073FE0((unint64_t *)&qword_1002E10B0, type metadata accessor for SASTTR, (uint64_t)&unk_100247698);
}

uint64_t sub_100074BB8()
{
  return sub_100073FE0(&qword_1002DEB10, type metadata accessor for SASTTR, (uint64_t)&unk_100247798);
}

uint64_t sub_100074BE4()
{
  return sub_100073FE0(&qword_1002DEC60, type metadata accessor for SASTTR, (uint64_t)&unk_1002477D8);
}

uint64_t initializeBufferWithCopyOfBuffer for SASIDSProtocolNumbers(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SASIDSProtocolNumbers()
{
  return &type metadata for SASIDSProtocolNumbers;
}

ValueMetadata *type metadata accessor for SASTeardownReason()
{
  return &type metadata for SASTeardownReason;
}

uint64_t getEnumTagSinglePayload for SASProtocol(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SASProtocol(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100074C98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100074CB4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for SASProtocol()
{
  return &type metadata for SASProtocol;
}

uint64_t *sub_100074CE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain(v5);
    sub_100072B9C(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a2[3];
    unint64_t v11 = a2[4];
    sub_100072B9C(v10, v11);
    a1[3] = v10;
    a1[4] = v11;
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  }

  return a1;
}

uint64_t sub_100074DA0(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100074DF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a1 = *a2;
  unint64_t v8 = a2[2];
  swift_bridgeObjectRetain(v6);
  sub_100072B9C(v7, v8);
  a1[1] = v7;
  a1[2] = v8;
  uint64_t v9 = a2[3];
  unint64_t v10 = a2[4];
  sub_100072B9C(v9, v10);
  a1[3] = v9;
  a1[4] = v10;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

uint64_t *sub_100074E90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  sub_100072B9C(v8, v9);
  uint64_t v10 = a1[1];
  unint64_t v11 = a1[2];
  a1[1] = v8;
  a1[2] = v9;
  sub_100072BE0(v10, v11);
  uint64_t v12 = a2[3];
  unint64_t v13 = a2[4];
  sub_100072B9C(v12, v13);
  uint64_t v14 = a1[3];
  unint64_t v15 = a1[4];
  a1[3] = v12;
  a1[4] = v13;
  sub_100072BE0(v14, v15);
  uint64_t v16 = *(int *)(a3 + 28);
  char v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_100074F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_100074FB0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100072BE0(v7, v8);
  uint64_t v9 = a1[3];
  unint64_t v10 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_100072BE0(v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_10007503C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075048);
}

uint64_t sub_100075048(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v8);
  }

uint64_t sub_1000750C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000750D0);
}

char *sub_1000750D0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100075144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076C30( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&unk_100247860,  (uint64_t)&unk_100247860);
}

uint64_t sub_100075178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075184);
}

uint64_t sub_100075188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075194);
}

uint64_t sub_100075198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076C30(a1, a2, a3, (uint64_t)&unk_100247860, (uint64_t)&unk_100247860, (uint64_t)&unk_100247860);
}

uint64_t *sub_1000751AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_100075250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_10007529C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t *sub_100075314(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100075394(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000753F0(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_100075460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007546C);
}

uint64_t sub_10007546C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_1000754F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075500);
}

char *sub_100075500(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10007557C(uint64_t a1)
{
  v4[0] = &unk_100247860;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000755F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_100072B9C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_1000756A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1000756F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100072B9C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_100075778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100072B9C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_100075808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_100075874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100072BE0(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000758F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075900);
}

uint64_t sub_100075900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_100075988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075994);
}

char *sub_100075994(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100075A10(uint64_t a1)
{
  v4[0] = &unk_100247860;
  v4[1] = "\t";
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100075A8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100072B9C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_100072B9C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_100072B9C(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)a1 + v15;
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
  }

  return a1;
}

uint64_t sub_100075B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100075BD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100072B9C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_100072B9C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_100072B9C(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  return a1;
}

uint64_t *sub_100075C84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100072B9C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100072BE0(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_100072B9C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100072BE0(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_100072B9C(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_100072BE0(v20, v21);
  uint64_t v22 = *(int *)(a3 + 32);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24LL))(v23, v24, v25);
  return a1;
}

_OWORD *sub_100075D58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  __int128 v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  return a1;
}

uint64_t *sub_100075DBC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100072BE0(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100072BE0(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100072BE0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  return a1;
}

uint64_t sub_100075E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075E68);
}

uint64_t sub_100075E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t sub_100075EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075EFC);
}

char *sub_100075EFC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  __int128 v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 32)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100075F78(uint64_t a1)
{
  v4[0] = &unk_100247860;
  v4[1] = &unk_100247860;
  void v4[2] = &unk_100247860;
  void v4[3] = &unk_100247860;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100075FF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100072B9C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_100072B9C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return a1;
}

uint64_t sub_1000760BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100076118(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100072B9C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_100072B9C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

uint64_t *sub_1000761B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100072B9C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100072BE0(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_100072B9C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100072BE0(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  return a1;
}

_OWORD *sub_100076270(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000762D4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100072BE0(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100072BE0(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_100076364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100076370);
}

uint64_t sub_100076374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076380);
}

uint64_t *sub_100076384(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    unint64_t v10 = a2[4];
    sub_100072B9C(v9, v10);
    a1[3] = v9;
    a1[4] = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)a1 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  }

  return a1;
}

uint64_t sub_100076444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100076498(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  unint64_t v9 = a2[4];
  sub_100072B9C(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  return a1;
}

uint64_t *sub_10007652C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = a2[3];
  unint64_t v11 = a2[4];
  sub_100072B9C(v10, v11);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_100072BE0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

uint64_t sub_1000765D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10007663C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  sub_100072BE0(v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000766C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000766D0);
}

uint64_t sub_1000766D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_10007675C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076768);
}

char *sub_10007676C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000767E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076C30( a1,  a2,  a3,  (uint64_t)&unk_100247860,  (uint64_t)&value witness table for Builtin.Int64 + 64,  (uint64_t)&unk_100247860);
}

uint64_t *sub_100076804(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t sub_1000768B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_100076908(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

void *sub_100076990(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100076A2C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *sub_100076A88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_100076B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100076B10);
}

uint64_t sub_100076B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_100076B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076B98);
}

uint64_t sub_100076B98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100076C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076C30( a1,  a2,  a3,  (uint64_t)&unk_1002478E8,  (uint64_t)&value witness table for Builtin.Int64 + 64,  (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_100076C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v9[0] = a4;
  v9[1] = a5;
  v9[2] = a6;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v8 <= 0x3F)
  {
    v9[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v9, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100076CA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for ErrorDomainCode(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100072CC4(&qword_1002DEAA0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = *(int *)(v17 + 28);
      uint64_t v24 = (char *)v15 + v23;
      uint64_t v25 = (char *)v16 + v23;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v13(v24, v25, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return a1;
}

uint64_t sub_100076E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }

  return result;
}

uint64_t *sub_100076ECC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100072CC4(&qword_1002DEAA0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    uint64_t v21 = *(int *)(v16 + 28);
    uint64_t v22 = (char *)v14 + v21;
    uint64_t v23 = (char *)v15 + v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v12(v22, v23, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t *sub_100077000(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21(v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v31 = *((void *)v18 + 1);
      uint64_t v32 = *((void *)v17 + 1);
      *((void *)v17 + 1) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      *((void *)v17 + 2) = *((void *)v18 + 2);
      uint64_t v33 = *((void *)v18 + 3);
      uint64_t v34 = *((void *)v17 + 3);
      *((void *)v17 + 3) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34);
      v15(&v17[*(int *)(v19 + 28)], &v18[*(int *)(v19 + 28)], v13);
      return a1;
    }

    sub_100077CC0((uint64_t)v17, type metadata accessor for ErrorDomainCode);
    goto LABEL_6;
  }

  if (v22)
  {
LABEL_6:
    uint64_t v29 = sub_100072CC4(&qword_1002DEAA0);
    memcpy(v17, v18, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v23 = *((void *)v18 + 1);
  *((void *)v17 + 1) = v23;
  *((void *)v17 + 2) = *((void *)v18 + 2);
  uint64_t v24 = *((void *)v18 + 3);
  *((void *)v17 + 3) = v24;
  uint64_t v25 = *(int *)(v19 + 28);
  char v26 = &v17[v25];
  uint64_t v27 = &v18[v25];
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  v28(v26, v27, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

_OWORD *sub_1000771D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100072CC4(&qword_1002DEAA0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t *sub_1000772D8(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v24 = *((void *)v16 + 1);
      uint64_t v25 = *((void *)v15 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v24;
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = *((void *)v16 + 3);
      uint64_t v27 = *((void *)v15 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v26;
      swift_bridgeObjectRelease(v27);
      v13(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v11);
      return a1;
    }

    sub_100077CC0((uint64_t)v15, type metadata accessor for ErrorDomainCode);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_100072CC4(&qword_1002DEAA0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  __int128 v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t sub_100077458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077464);
}

uint64_t sub_100077464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100072CC4(&qword_1002DEAA0);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_100077514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077520);
}

char *sub_100077520(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100072CC4(&qword_1002DEAA0);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1000775C8(uint64_t a1)
{
  v6[0] = &unk_100247860;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_100077658(319LL);
    if (v5 <= 0x3F)
    {
      _DWORD v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

void sub_100077658(uint64_t a1)
{
  if (!qword_1002DF100)
  {
    uint64_t v2 = type metadata accessor for ErrorDomainCode(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002DF100);
    }
  }

void *sub_1000776AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v14 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v14);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *((_OWORD *)a2 + 3);
    uint64_t v8 = a2[8];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(void *)(a1 + 64) = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
  }

  return v3;
}

uint64_t sub_100077790(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1000777F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(a1 + 64) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  return a1;
}

void *sub_1000778A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

uint64_t sub_10007798C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000779F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t sub_100077A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077AA8);
}

uint64_t sub_100077AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t sub_100077B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077B30);
}

uint64_t sub_100077B30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100077BA4(uint64_t a1)
{
  v4[0] = &unk_1002478E8;
  v4[1] = &unk_1002478E8;
  void v4[2] = &unk_1002478E8;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_100077C38()
{
  unint64_t result = qword_1002DF220;
  if (!qword_1002DF220)
  {
    unint64_t result = swift_getWitnessTable(&unk_100246618, &type metadata for SASIDSProtocolNumbers);
    atomic_store(result, (unint64_t *)&qword_1002DF220);
  }

  return result;
}

uint64_t sub_100077C7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100077CC0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100077CFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100072CC4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t *sub_100077D38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void *sub_100077DBC()
{
  return &unk_10027D420;
}

unint64_t sub_100077DC8()
{
  return 0xD000000000000018LL;
}

uint64_t variable initialization expression of KTEligibilityDB.schemaVersion()
{
  return 1LL;
}

unint64_t sub_100077DEC()
{
  return 0xD000000000000013LL;
}

void sub_100077E08()
{
}

Swift::Int sub_100077E2C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100077E6C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100077EA8(uint64_t a1)
{
  unint64_t v2 = sub_1000799D0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100077ED0(uint64_t a1)
{
  unint64_t v2 = sub_1000799D0();
  return Error<>._code.getter(a1, v2);
}

id static KTSwiftDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 && (swift_beginAccess(a2 + 16, &v6, 0LL, 0LL), *(void *)(a2 + 16))) {
    return objc_msgSend(v4, "isEqual:");
  }
  else {
    return 0LL;
  }
}

void *sub_100077F88()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void sub_100077FC8(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

void *sub_10007800C(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t KTSwiftDB.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002DF250);
  __chkstk_darwin(v4);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = swift_allocObject(v2, 24LL, 7LL);
  *(void *)(v7 + 16) = 0LL;
  sub_1000782E0(a1, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1LL, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }

  id v13 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v11];

  sub_100077CFC(a1, &qword_1002DF250);
  if (v13)
  {
    swift_beginAccess(v7 + 16, v17, 1LL, 0LL);
    uint64_t v14 = *(void **)(v7 + 16);
    *(void *)(v7 + 16) = v13;
  }

  else
  {
    swift_release(v7);
    return 0LL;
  }

  return v7;
}

uint64_t KTSwiftDB.init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002DF250);
  __chkstk_darwin(v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *(void *)(v2 + 16) = 0LL;
  sub_1000782E0(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }

  id v12 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v10];

  sub_100077CFC(a1, &qword_1002DF250);
  if (v12)
  {
    swift_beginAccess(v2 + 16, v16, 1LL, 0LL);
    id v13 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v12;
  }

  else
  {
    swift_release(v2);
    return 0LL;
  }

  return v2;
}

uint64_t sub_1000782E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4(&qword_1002DF250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100078328()
{
  uint64_t v1 = (void **)(v0 + 16);
  swift_beginAccess(v0 + 16, v4, 1LL, 0LL);
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    [v2 close];
    uint64_t v3 = *v1;
    *uint64_t v1 = 0LL;
  }

void sub_100078380()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 executeSQLStmt:v3];
  }

void sub_100078408()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    id v12 = 0LL;
    id v4 = [v2 prepareStatement:v3 error:&v12];

    id v5 = v12;
    if (v4)
    {
      id v6 = v12;

      uint64_t v7 = type metadata accessor for KTSwiftDB.SQLStatement();
      *(void *)(swift_allocObject(v7, 24LL, 7LL) + 16) = v4;
    }

    else
    {
      id v10 = v12;
      _convertNSErrorToError(_:)(v5);

      swift_willThrow(v11);
    }
  }

  else
  {
    unint64_t v8 = sub_100078544();
    uint64_t v9 = swift_allocError(&type metadata for KTSwiftDBError, v8, 0LL, 0LL);
    swift_willThrow(v9);
  }

unint64_t sub_100078544()
{
  unint64_t result = qword_1002DF258;
  if (!qword_1002DF258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100247984, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_1002DF258);
  }

  return result;
}

uint64_t sub_100078588(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLStatement()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13transparencyd9KTSwiftDB12SQLStatement);
}

id sub_1000785D8()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_1000785E0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

id sub_1000785EC()
{
  return [*(id *)(v0 + 16) reset];
}

void sub_1000785FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_100078610(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt:a2 column:a1];
}

id sub_100078628(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt64:a2 column:a1];
}

void sub_100078640(uint64_t a1)
{
  NSString v3 = *(void **)(v1 + 16);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v3 bindDate:isa column:a1];
}

id sub_100078698(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + 16), "bindDouble:column:", a1);
}

void sub_1000786AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000786C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  unint64_t v8 = *(void **)(v5 + 16);
  id v9 = (id)a4(a2, a3);
  objc_msgSend(v8, *a5, v9, a1);
}

id sub_10007871C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject(&unk_10027D440, 32LL, 7LL);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  aBlock[4] = sub_100078864;
  uint64_t v12 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000788C4;
  aBlock[3] = &unk_10027D458;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = v12;
  swift_retain(a2);
  swift_release(v8);
  aBlock[0] = 0LL;
  LODWORD(a2) = [v5 steps:v7 error:aBlock];
  _Block_release(v7);
  id result = aBlock[0];
  if (!(_DWORD)a2)
  {
    id v10 = result;
    _convertNSErrorToError(_:)(result);

    return (id)swift_willThrow();
  }

  return result;
}

uint64_t sub_100078840()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100078864(uint64_t a1)
{
  NSString v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  uint64_t v4 = type metadata accessor for KTSwiftDB.SQLRow();
  uint64_t v5 = swift_allocObject(v4, 24LL, 7LL);
  *(void *)(v5 + 16) = a1;
  swift_unknownObjectRetain(a1);
  LOBYTE(a1) = v3(v5);
  swift_release(v5);
  return a1 & 1;
}

uint64_t sub_1000788C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  LOBYTE(v4) = v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v4 & 1;
}

uint64_t sub_100078918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100078928(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100078930()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v18 = 0LL;
  id v2 = [v1 stepWithError:&v18];
  id v3 = v18;
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = type metadata accessor for KTSwiftDB.SQLRow();
    uint64_t v6 = swift_allocObject(v5, 24LL, 7LL);
    *(void *)(v6 + 16) = v4;
    id v7 = v3;
  }

  else
  {
    id v8 = v18;
    id v9 = (void *)_convertNSErrorToError(_:)(v3);

    ((void (*)(void))swift_willThrow)();
    id v18 = v9;
    swift_errorRetain(v9);
    uint64_t v10 = sub_100072CC4(&qword_1002DF260);
    type metadata accessor for KTSDBObjcError(0LL);
    uint64_t v6 = v11;
    if (swift_dynamicCast(&v17, &v18, v10, v11, 0LL)
      && (uint64_t v12 = v17,
          uint64_t v13 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C),  _BridgedStoredNSError.code.getter(&v16, v6, v13),  v12,  v16 == 2))
    {
      swift_errorRelease(v9);
      swift_errorRelease(v18);
      return 0LL;
    }

    else
    {
      uint64_t v14 = swift_errorRelease(v18);
      swift_willThrow(v14);
    }
  }

  return v6;
}

uint64_t KTSwiftDB.deinit()
{
  return v0;
}

uint64_t KTSwiftDB.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_100078AF4()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

void type metadata accessor for KTSDBObjcError(uint64_t a1)
{
}

uint64_t sub_100078B10(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) textAtColumn:a1];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100078B68(uint64_t a1)
{
  return [*(id *)(v1 + 16) intAtColumn:a1];
}

id sub_100078BA4(uint64_t a1)
{
  return [*(id *)(v1 + 16) int64AtColumn:a1];
}

uint64_t sub_100078BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [*(id *)(v2 + 16) dateAtColumn:a1];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(a2, 0LL, 1LL, v5);
}

uint64_t sub_100078C34(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) blobAtColumn:a1];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double sub_100078C8C(uint64_t a1)
{
  return result;
}

unint64_t sub_100078CB8()
{
  id v1 = [*(id *)(v0 + 16) allObjectsByColumnName];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  unint64_t v3 = sub_100078D2C(v2);
  swift_bridgeObjectRelease(v2);
  return v3;
}

unint64_t sub_100078D2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100072CC4(&qword_1002DF530);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v10 = (v6 - 1) & v6;
      unint64_t v11 = __clz(__rbit64(v6)) | (v8 << 6);
      int64_t v12 = v8;
    }

    else
    {
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_37;
      }
      if (v13 >= v28)
      {
LABEL_33:
        sub_100079A50(a1);
        return (unint64_t)v3;
      }

      unint64_t v14 = *(void *)(v29 + 8 * v13);
      int64_t v12 = v8 + 1;
      if (!v14)
      {
        int64_t v12 = v8 + 2;
        if (v8 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v8 + 3;
          if (v8 + 3 >= v28) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v29 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v8 + 4;
            if (v8 + 4 >= v28) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v29 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v8 + 5;
              if (v8 + 5 >= v28) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v29 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v29 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v8 + 5;
            }
          }
        }
      }

uint64_t sub_1000790B4()
{
  return v0;
}

uint64_t sub_1000790D0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

id sub_1000790F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a1 + 16, v7, 0LL, 0LL);
  uint64_t v4 = *(void **)(v2 + 16);
  if (v4 && (swift_beginAccess(v3 + 16, &v6, 0LL, 0LL), *(void *)(v3 + 16))) {
    return objc_msgSend(v4, "isEqual:");
  }
  else {
    return 0LL;
  }
}

id sub_10007916C()
{
  return *v0;
}

uint64_t sub_100079174@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_10007917C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLRow()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13transparencyd9KTSwiftDB6SQLRow);
}

unint64_t sub_1000791B0()
{
  unint64_t result = qword_1002DF270;
  if (!qword_1002DF270)
  {
    unint64_t result = swift_getWitnessTable(&unk_10024791C, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_1002DF270);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for KTSwiftDBError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for KTSwiftDBError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10007928C + 4 * byte_100247910[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000792AC + 4 * byte_100247915[v4]))();
  }
}

_BYTE *sub_10007928C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000792AC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000792B4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000792BC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000792C4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000792CC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t variable initialization expression of KTUpdateCloudStorageOperation.shouldRetry()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for KTSwiftDBError()
{
  return &type metadata for KTSwiftDBError;
}

uint64_t type metadata accessor for KTSwiftDB()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd9KTSwiftDB);
}

uint64_t *initializeBufferWithCopyOfBuffer for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for KTSwiftDB.SQLStepResult(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

void *initializeWithTake for KTSwiftDB.SQLStepResult(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t *assignWithTake for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for KTSwiftDB.SQLStepResult( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

uint64_t sub_10007945C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_100079474(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDB.SQLStepResult()
{
  return &type metadata for KTSwiftDB.SQLStepResult;
}

uint64_t sub_1000794A4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"KTSDBObjcError");
}

uint64_t sub_1000794B4(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000794F4(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100079534(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100079598()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000795CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10007961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100079678(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF4F0,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247BEC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000796B8(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF4F0,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247BEC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000796F8(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100079738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100079790()
{
  return sub_100073FE0( &qword_1002DF4E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247B14);
}

uint64_t sub_1000797BC()
{
  return sub_100073FE0( &qword_1002DF4E8,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247B3C);
}

uint64_t sub_1000797E8()
{
  return sub_100073FE0( &qword_1002DF4F0,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247BEC);
}

uint64_t sub_100079814()
{
  return sub_100073FE0( &qword_1002DF4F8,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247BBC);
}

uint64_t sub_100079840()
{
  return sub_100073FE0( &qword_1002DF500,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247B7C);
}

uint64_t sub_10007986C()
{
  return sub_100073FE0( &qword_1002DF508,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100247CCC);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1000798AC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1000798F0()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF510,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100247C94);
}

unint64_t sub_100079920()
{
  unint64_t result = qword_1002E0920;
  if (!qword_1002E0920)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002E0920);
  }

  return result;
}

uint64_t sub_100079964()
{
  return sub_100073FE0( &qword_1002DF520,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100247D04);
}

uint64_t sub_100079990()
{
  return sub_100073FE0( &qword_1002DF268,  (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError,  (uint64_t)&unk_100247C2C);
}

BOOL sub_1000799BC(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1000799D0()
{
  unint64_t result = qword_1002DF528;
  if (!qword_1002DF528)
  {
    unint64_t result = swift_getWitnessTable(&unk_100247A0C, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_1002DF528);
  }

  return result;
}

uint64_t sub_100079A14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100079A50(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100079A58(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100079AF8(a1, a2, v5);
}

uint64_t sub_100079ABC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100079AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_100079BE4()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100079C28(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

void *sub_100079C70(uint64_t a1)
{
  return &j__swift_endAccess;
}

id KTUpdateCloudStorageOperation.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id sub_100079CD4()
{
  v0[OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockIDSEventReportingManager();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for MockIDSEventReportingManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd28MockIDSEventReportingManager);
}

uint64_t sub_100079D78()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1002DF5C0 + dword_1002DF5C0);
  uint64_t v1 = (void *)swift_task_alloc(unk_1002DF5C4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100079DD0;
  return v3();
}

uint64_t sub_100079DD0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

unint64_t sub_100079E24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002DF648);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 24;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100079F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002DF640);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007A04C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100072CC4(&qword_1002DF630);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v29) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v29) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v29) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v29) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v30 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_10007A540(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = unk_1002DF5C4;
  unint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_1002DF5C0 + dword_1002DF5C0);
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  void *v8 = v3;
  v8[1] = sub_10007A5C8;
  return v10();
}

uint64_t sub_10007A5C8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 16);
  id v7 = *(void **)(*v2 + 24);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v11 = (void *)a1;
  }

  else if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    a1 = 0LL;
    uint64_t v11 = isa;
  }

  else
  {
    Class isa = 0LL;
    uint64_t v11 = 0LL;
  }

  unint64_t v12 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v12)[2](v12, isa, a1);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

id sub_10007A6C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockIDSEventReportingManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10007A6F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10007ADC4;
  return v6();
}

uint64_t sub_10007A744(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  id v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10007ADC4;
  return v7();
}

uint64_t sub_10007A798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10007ACE0(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_10027D7D0, 32LL, 7LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    int64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    int64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1002DF618, v16);
}

uint64_t sub_10007A8DC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10007A940;
  return v6(a1);
}

uint64_t sub_10007A940()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10007A98C()
{
  *(void *)(v1 + 12_Block_object_dispose(va, 8) = v0;
  return swift_task_switch(sub_10007A9A4, 0LL, 0LL);
}

uint64_t sub_10007A9A4()
{
  uint64_t v1 = *(void **)(v0 + 128);
  uint64_t v2 = sub_100072CC4(&qword_1002DF620);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1002464F0;
  *(void *)(inited + 32) = 0x722D74726F706572LL;
  *(void *)(inited + 40) = 0xEF65736E6F707365LL;
  uint64_t v4 = sub_100072CC4(&qword_1002DF628);
  uint64_t v5 = swift_initStackObject(v4, v0 + 72);
  *(_OWORD *)(v5 + 16) = xmmword_1002464F0;
  uint64_t v6 = sub_1000CD128();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x58LL);
  uint64_t v10 = swift_bridgeObjectRetain(v7);
  *(_BYTE *)(v5 + 4_Block_object_dispose(va, 8) = v9(v10) & 1;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = sub_100079E24(v5);
  unint64_t v11 = sub_100079F34(inited);
  uint64_t v12 = sub_10007A04C(v11);
  swift_bridgeObjectRelease(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_10007AAB8()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10007AAEC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v4 = (void *)v0[4];
  uint64_t v3 = (void *)v0[5];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002DF5FC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007AB68;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1002DF5F8 + dword_1002DF5F8))(v2, v4, v3);
}

uint64_t sub_10007AB68()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10007ABB4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1B44);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002E1B40 + dword_1002E1B40))(v2, v3, v4);
}

uint64_t sub_10007AC30()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10007AC5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1002E1B54);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10007ADC4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002E1B50 + dword_1002E1B50))( a1,  v4,  v5,  v6);
}

uint64_t sub_10007ACE0(uint64_t a1)
{
  uint64_t v2 = sub_100072CC4(&qword_1002DF5F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10007AD20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10007AD44(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1B64);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007AB68;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002E1B60 + dword_1002E1B60))(a1, v4);
}

_OWORD *sub_10007ADB4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10007ADC8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002E9558);
  sub_100072DEC(v0, (uint64_t)qword_1002E9558);
  return Logger.init(transparencyCategory:)(0x656E6F5A4B43544BLL, 0xE800000000000000LL);
}

void sub_10007AE24()
{
  byte_1002E9578 = 1;
  qword_1002E9580 = 0xED00006863746546LL;
}

void sub_10007AE4C()
{
  byte_1002E9590 = 1;
  qword_1002E9598 = 0xEB00000000686374LL;
}

uint64_t sub_10007AE70()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10007AEB4(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

void *sub_10007AEFC(uint64_t a1)
{
  return &j__swift_endAccess;
}

unint64_t variable initialization expression of KTFetchCloudStorageOperation.serverChangeTokens()
{
  return sub_10007AF4C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10007AF4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4((uint64_t *)&unk_1002DF770);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_10007C86C((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v12) = v8;
    *(void *)(v4[7] + v12) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007B054()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10007B09C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10007B0EC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id sub_10007B130()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context);
}

uint64_t sub_10007B140()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler));
}

uint64_t sub_10007B150()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch);
}

uint64_t sub_10007B160()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason + 8));
  return v1;
}

uint64_t KTFetchCloudStorageOperation.shouldRetry.getter()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD8LL))();
}

uint64_t static KTFetchCloudStorageOperation.lastCKFetch(deps:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [a1 smDataStore];
  if (qword_1002E9588 != -1) {
    swift_once(&qword_1002E9588, sub_10007AE4C);
  }
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 getSettingsDate:v4];

  swift_unknownObjectRelease(v3);
  if (v5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);

    uint64_t v6 = type metadata accessor for Date(0LL);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a2;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for Date(0LL);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a2;
    uint64_t v9 = 1LL;
  }

  return v7(v8, v9, 1LL, v6);
}

id KTFetchCloudStorageOperation.__allocating_init(deps:initialFetch:userInteractive:reason:context:)( void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = sub_10007D03C(a1, a2, a3, a4, a5, a6);

  return v14;
}

id KTFetchCloudStorageOperation.init(deps:initialFetch:userInteractive:reason:context:)( void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = sub_10007D03C(a1, a2, a3, a4, a5, a6);

  return v8;
}

uint64_t sub_10007B618(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_29:
    if (a1 < 0) {
      uint64_t v31 = a1;
    }
    else {
      uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v31);
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v3)
    {
LABEL_3:
      Swift::Int v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
      uint64_t v5 = 4LL;
      uint64_t v34 = v3;
      __int128 v35 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)(v1
                                                                     + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler)
                                                       + 96LL);
      while (1)
      {
        uint64_t v1 = v5 - 4;
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
        }
        else {
          id v8 = *(id *)(a1 + 8 * v5);
        }
        uint64_t v9 = v8;
        uint64_t v10 = v5 - 3;
        if (__OFADD__(v1, 1LL))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        id v11 = [objc_allocWithZone(CKFetchRecordZoneChangesConfiguration) init];
        id v12 = [v9 zoneName];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v15 = v14;

        uint64_t v16 = (void *)v35(v13, v15);
        swift_bridgeObjectRelease(v15);
        [v11 setPreviousServerChangeToken:v16];

        if ((v4 & 0xC000000000000001LL) != 0)
        {
          if (v4 < 0) {
            uint64_t v1 = v4;
          }
          else {
            uint64_t v1 = v4 & 0xFFFFFFFFFFFFFF8LL;
          }
          uint64_t v17 = __CocoaDictionary.count.getter(v1);
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_27;
          }
          Swift::Int v4 = sub_10007C9B4(v1, v17 + 1);
        }

        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
        uint64_t v1 = v4;
        unint64_t v20 = sub_10007C86C((uint64_t)v9);
        uint64_t v21 = *(void *)(v4 + 16);
        BOOL v22 = (v19 & 1) == 0;
        uint64_t v23 = v21 + v22;
        if (__OFADD__(v21, v22)) {
          goto LABEL_26;
        }
        char v24 = v19;
        if (*(void *)(v4 + 24) >= v23)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10007CEB0();
          }
        }

        else
        {
          sub_10007CC04(v23, isUniquelyReferenced_nonNull_native);
          unint64_t v25 = sub_10007C86C((uint64_t)v9);
          if ((v24 & 1) != (v26 & 1))
          {
            uint64_t v33 = sub_10007D178(0LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
            __break(1u);
            return result;
          }

          unint64_t v20 = v25;
        }

        uint64_t v1 = v34;
        if ((v24 & 1) != 0)
        {
          uint64_t v6 = *(void *)(v4 + 56);
          uint64_t v7 = *(void **)(v6 + 8 * v20);
          *(void *)(v6 + 8 * v20) = v11;
        }

        else
        {
          *(void *)(v4 + 8 * (v20 >> 6) + 64) |= 1LL << v20;
          *(void *)(*(void *)(v4 + 48) + 8 * v20) = v9;
          *(void *)(*(void *)(v4 + 56) + 8 * v20) = v11;
          uint64_t v27 = *(void *)(v4 + 16);
          BOOL v28 = __OFADD__(v27, 1LL);
          uint64_t v29 = v27 + 1;
          if (v28) {
            goto LABEL_28;
          }
          *(void *)(v4 + 16) = v29;
          id v30 = v9;
        }

        swift_bridgeObjectRelease(0x8000000000000000LL);
        ++v5;
        if (v10 == v34) {
          goto LABEL_34;
        }
      }
    }
  }

  Swift::Int v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
LABEL_34:
  swift_bridgeObjectRelease(a1);
  return v4;
}

Swift::Void __swiftcall KTFetchCloudStorageOperation.groupStart()()
{
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  id v2 = [v1 ckdatabase];
  if (v2)
  {
    id v31 = v2;
    id v3 = [v1 cloudRecords];
    if (v3)
    {
      Swift::Int v4 = v3;
      uint64_t v5 = (objc_class *)[v3 cloudKitZones];
      Class isa = v5;
      if (!v5)
      {
        uint64_t v7 = sub_10007D178(0LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
        uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, v7);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v8);
      }

      uint64_t v9 = sub_10007D178(0LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
      uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
      id v11 = [objc_allocWithZone(NSBlockOperation) init];
      [v0 dependOnBeforeGroupFinished:v11];
      id v12 = [objc_allocWithZone(CKFetchRecordZoneChangesOperation) init];
      uint64_t v13 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation);
      *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation) = v12;
      id v14 = v12;

      uint64_t v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x118LL))(v10);
      swift_bridgeObjectRelease(v10);
      sub_10007D178(0LL, &qword_1002DF698, &OBJC_CLASS___CKFetchRecordZoneChangesConfiguration_ptr);
      sub_10007D1B0();
      Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      [v14 setConfigurationsByRecordZoneID:v16];

      [v14 setRecordZoneIDs:isa];
      if (*((_BYTE *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch) == 1) {
        [v4 clearDataStore:1];
      }
      if (*((_BYTE *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive) == 1) {
        [v14 setQualityOfService:25];
      }
      id v17 = v14;
      NSString v18 = String._bridgeToObjectiveC()();
      [v17 setName:v18];

      uint64_t v19 = swift_allocObject(&unk_10027D7F8, 24LL, 7LL);
      *(void *)(v19 + 16) = v0;
      aBlock[4] = sub_10007D22C;
      uint64_t v33 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10007BD50;
      aBlock[3] = &unk_10027D810;
      unint64_t v20 = _Block_copy(aBlock);
      uint64_t v21 = v33;
      BOOL v22 = v0;
      swift_release(v21);
      [v17 setRecordZoneChangeTokensUpdatedBlock:v20];
      _Block_release(v20);
      uint64_t v23 = swift_allocObject(&unk_10027D848, 24LL, 7LL);
      *(void *)(v23 + 16) = v22;
      char v24 = v22;
      CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_10007D2F4, v23);
      uint64_t v25 = swift_allocObject(&unk_10027D870, 24LL, 7LL);
      *(void *)(v25 + 16) = v4;
      swift_unknownObjectRetain(v4);
      CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10007DEFC, v25);
      uint64_t v26 = swift_allocObject(&unk_10027D898, 32LL, 7LL);
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = v4;
      uint64_t v27 = v24;
      swift_unknownObjectRetain(v4);
      CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_10007E0CC, v26);
      uint64_t v28 = swift_allocObject(&unk_10027D8C0, 32LL, 7LL);
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = v11;
      uint64_t v29 = v27;
      id v30 = v11;
      CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_10007E5AC, v28);
      [v31 addOperation:v17];

      swift_unknownObjectRelease(v4);
    }

    else
    {
    }
  }

uint64_t sub_10007BD50(uint64_t a1, void *a2, void *a3, void *a4)
{
  Swift::Int v4 = a4;
  uint64_t v8 = *(void (**)(void *, void *, void *, unint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (a4)
  {
    swift_retain(v7);
    id v9 = a2;
    id v10 = a3;
    id v11 = v4;
    Swift::Int v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v13 = v12;
  }

  else
  {
    swift_retain(v7);
    id v14 = a2;
    id v15 = a3;
    unint64_t v13 = 0xF000000000000000LL;
  }

  v8(a2, a3, v4, v13);

  sub_10007EB9C((uint64_t)v4, v13);
  return swift_release(v7);
}

uint64_t sub_10007BE00(void *a1)
{
  if (a1)
  {
    [a1 setZoneCreated:0];
    [a1 setZoneSubscribed:0];
    [a1 setServerChangeToken:0];
  }

  return 1LL;
}

void KTFetchCloudStorageOperation.init()()
{
}

id KTFetchCloudStorageOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10007BFD0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10007BFE0(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10007C020(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10007C060(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10007C0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10007C114(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( (unint64_t *)&unk_1002DF790,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F3C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10007C154(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( (unint64_t *)&unk_1002DF790,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F3C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10007C194(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10007C1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10007C22C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10007C2FC(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100079A14((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100079A14((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10007EAFC(v12);
  return v7;
}

uint64_t sub_10007C2FC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10007C4B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10007C548(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10007C720(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10007C720(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10007C548(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_10007C6BC(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_10007C6BC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF750);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10007C720(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002DF750);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  swift_release(v9);
  sub_1000E2994(v35, v44);
  swift_release(v9);
}

  __break(1u);
}

          Class v16 = 0;
          NSString v18 = v31;
          uint64_t v13 = 0LL;
        }

        else
        {
          Class v16 = 1;
        }

  return v10;
}

unint64_t sub_10007C86C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10007C89C(a1, v4);
}

unint64_t sub_10007C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10007D178(0LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

Swift::Int sub_10007C9B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100072CC4(&qword_1002DF768);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_10007D178(0LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_10007D178(0LL, &qword_1002DF698, &OBJC_CLASS___CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_10007CC04(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

Swift::Int sub_10007CC04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002DF768);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    __int128 v37 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v16 << 6);
      }

      else
      {
        if (__OFADD__(v16++, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v13)
        {
LABEL_34:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((v38 & 1) != 0)
          {
            uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
            if (v36 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
            }
            else {
              void *v10 = -1LL << v36;
            }
            *(void *)(v5 + 16) = 0LL;
          }

          break;
        }

        unint64_t v25 = v10[v16];
        if (!v25)
        {
          int64_t v26 = v16 + 1;
          if (v16 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v25 = v10[v26];
          if (!v25)
          {
            while (1)
            {
              int64_t v16 = v26 + 1;
              if (__OFADD__(v26, 1LL)) {
                break;
              }
              if (v16 >= v13) {
                goto LABEL_34;
              }
              unint64_t v25 = v10[v16];
              ++v26;
              if (v25) {
                goto LABEL_23;
              }
            }

LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }

          ++v16;
        }

  __break(1u);
  return result;
}

        swift_once(&qword_1002E9B90, sub_100086A74);
        goto LABEL_8;
      }
    }

    else if (*(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_4;
    }

    swift_bridgeObjectRelease(v28);
  }

  else
  {
    char v46 = v121;
    char v47 = _convertNSErrorToError(_:)(v25);

    swift_willThrow(v48);
    swift_errorRelease(v47);
  }

  if (qword_1002E9B90 != -1) {
    swift_once(&qword_1002E9B90, sub_100086A74);
  }
  id v53 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v53, (uint64_t)qword_1002E9B98);
  __int16 v54 = static os_log_type_t.error.getter();
  id v55 = a1;
  id v56 = (os_log_s *)Logger.logObject.getter(v55);
  if (os_log_type_enabled(v56, v54))
  {
    id v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v106 = (void *)swift_slowAlloc(32LL, -1LL);
    v121 = v106;
    *(_DWORD *)id v57 = 136315138;
    v107 = v16;
    v105 = v57 + 4;
    __int128 v58 = a2;
    __int128 v59 = [v55 recordName];
    __int128 v60 = v9;
    __int128 v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    __int128 v63 = v62;

    a2 = v58;
    __int128 v64 = v61;
    uint64_t v9 = v60;
    v119 = sub_10007C22C(v64, v63, (uint64_t *)&v121);
    int64_t v16 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v105, v57 + 12);

    swift_bridgeObjectRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v56, v54, "creating new record %s", v57, 0xCu);
    __int128 v65 = v106;
    swift_arrayDestroy(v106, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {
  }

  __int128 v66 = (void *)(*(uint64_t (**)(void))(*a2 + 152LL))();
  __int128 v67 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v66];

  if (v67)
  {
    __int128 v68 = v67;
    __int128 v69 = [v55 recordName];
    if (!v69)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v71 = v70;
      __int128 v69 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v71);
    }

    [v68 setRecordID:v69];

    uint64_t v72 = v68;
    id v73 = Data._bridgeToObjectiveC()().super.isa;
    [v72 setPushToken:v73];

    unint64_t v23 = v72;
    unint64_t v33 = Data._bridgeToObjectiveC()().super.isa;
    [v23 setRegistrationData:v33];

    goto LABEL_27;
  }

  __break(1u);
  return result;
}

  return v8;
}

            -[KTStateMachine _onqueuePokeStateMachine](v2, "_onqueuePokeStateMachine");
            goto LABEL_42;
          }

          if ((v50 & 1) != 0) {
            goto LABEL_40;
          }
LABEL_41:
          uint64_t v10 = 0LL;
          goto LABEL_42;
        }

        goto LABEL_4;
      }
    }

    if (qword_1002EEA08 != -1) {
      dispatch_once(&qword_1002EEA08, &stru_100284600);
    }
    uint64_t v21 = (void *)qword_1002EEA10;
    if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = v21;
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
      *(_DWORD *)buf = 138543362;
      id v57 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Delay has ended for pending flag %{public}@",  buf,  0xCu);
    }

  if ([v6 count]) {
    uint64_t v39 = v6;
  }
  else {
    uint64_t v39 = 0LL;
  }
  uint64_t v40 = v39;

  return v40;
}

  return v39;
}

id sub_10007CEB0()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002DF768);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    if (__OFADD__(v9++, 1LL)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    if (!v21) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }

  int64_t v22 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id sub_10007D03C(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation] = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_previousServerChangeToken] = 0LL;
  v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage] = 0;
  uint64_t v13 = OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens;
  unint64_t v14 = v6;
  unint64_t v15 = sub_10007AF4C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v6[v13] = v15;
  Date.init()(v15);
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps] = a1;
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context] = a6;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch] = a2;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive] = a3;
  type metadata accessor for KTCKZone();
  id v16 = a6;
  id v17 = a1;
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler] = sub_100078588((uint64_t)v16);
  unint64_t v18 = &v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason];
  *unint64_t v18 = a4;
  v18[1] = a5;

  v20.receiver = v14;
  v20.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation(0LL);
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t sub_10007D178(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_10007D1B0()
{
  unint64_t result = qword_1002DF6A0;
  if (!qword_1002DF6A0)
  {
    uint64_t v1 = sub_10007D178(255LL, &qword_1002DF680, &OBJC_CLASS___CKRecordZoneID_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002DF6A0);
  }

  return result;
}

uint64_t sub_10007D208()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007D22C(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    id v6 = a2;
    id v7 = [v4 zoneName];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    uint64_t v11 = *(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 104LL);
    id v12 = v6;
    v11(v8, v10, a2);

    return swift_bridgeObjectRelease(v10);
  }

  return result;
}

uint64_t sub_10007D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007D2EC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10007D2F4(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v6 = a2;
  uint64_t v8 = *(void **)(v5 + 16);
  uint64_t v9 = *(void **)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  if ((a5 & 0x100) == 0)
  {
    id v10 = a2;
    id v11 = [v9 logger];
    if (qword_1002E9570 != -1) {
      swift_once(&qword_1002E9570, sub_10007AE24);
    }
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 logResultForEvent:v12 hardFailure:1 result:0];

    if (qword_1002E9550 != -1) {
      swift_once(&qword_1002E9550, sub_10007ADC8);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v13, (uint64_t)qword_1002E9558);
    id v14 = a1;
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v116 = (void *)v18;
      v112 = v6;
      *(_DWORD *)id v17 = 136315138;
      id v19 = [v14 zoneName];
      objc_super v20 = v8;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      unint64_t v23 = v22;

      uint64_t v24 = v21;
      uint64_t v8 = v20;
      v115 = (void *)sub_10007C22C(v24, v23, (uint64_t *)&v116);
      id v6 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v23);

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "zone fetch success: %s ", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v48 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    id v49 = [v14 zoneName];
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    uint64_t v52 = v51;

    id v53 = *(void (**)(uint64_t, uint64_t, void *))(*(void *)v48 + 104LL);
    id v54 = v10;
    v53(v50, v52, v6);

    swift_bridgeObjectRelease(v52);
    return;
  }

  uint64_t v25 = a5;
  swift_errorRetain(a2);
  id v28 = [v9 logger];
  if (qword_1002E9570 != -1) {
    swift_once(&qword_1002E9570, sub_10007AE24);
  }
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = (void *)_convertErrorToNSError(_:)(v6);
  [v28 logResultForEvent:v29 hardFailure:1 result:v30];

  if (qword_1002E9550 != -1) {
    swift_once(&qword_1002E9550, sub_10007ADC8);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v31, (uint64_t)qword_1002E9558);
  id v32 = a1;
  sub_10007EB20(v6, a3, a4, v25, 1);
  id v33 = v32;
  uint64_t v34 = sub_10007EB20(v6, a3, a4, v25, 1);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  uint64_t v113 = a3;
  id v106 = v33;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    __int128 v99 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    bufa = (uint8_t *)swift_slowAlloc(32LL, -1LL);
    v116 = bufa;
    *(_DWORD *)uint64_t v37 = 136315394;
    unsigned int v109 = v25;
    id v38 = [v33 zoneName];
    id v102 = v9;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    unint64_t v40 = a4;
    id v41 = v8;
    uint64_t v42 = v6;
    unint64_t v44 = v43;

    v115 = (void *)sub_10007C22C(v39, v44, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v37 + 4, v37 + 12);
    unint64_t v45 = v44;
    id v6 = v42;
    uint64_t v8 = v41;
    a4 = v40;
    swift_bridgeObjectRelease(v45);

    *(_WORD *)(v37 + 12) = 2112;
    swift_errorRetain(v6);
    uint64_t v46 = _swift_stdlib_bridgeErrorToNSError(v6);
    v115 = (void *)v46;
    uint64_t v25 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v37 + 14, v37 + 22);
    *__int128 v99 = v46;
    uint64_t v9 = v102;
    sub_10007EB68(v6, v113, v40, v109, 1);
    sub_10007EB68(v6, v113, v40, v109, 1);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "zone fetch fail: %s %@", (uint8_t *)v37, 0x16u);
    uint64_t v47 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v99, 1LL, v47);
    swift_slowDealloc(v99, -1LL, -1LL);
    swift_arrayDestroy(bufa, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(bufa, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {

    sub_10007EB68(v6, a3, a4, v25, 1);
    sub_10007EB68(v6, a3, a4, v25, 1);
  }

  v116 = v6;
  swift_errorRetain(v6);
  uint64_t v55 = sub_100072CC4(&qword_1002DF260);
  type metadata accessor for CKError(0LL);
  uint64_t v57 = v56;
  if ((swift_dynamicCast(&v115, &v116, v55, v56, 6LL) & 1) == 0)
  {
    id v69 = 0LL;
    goto LABEL_32;
  }

  os_log_t log = (os_log_t)a4;
  __int128 v58 = v115;
  uint64_t v59 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
  _BridgedStoredNSError.code.getter(&v116, v57, v59);
  if (v116 != (void *)5)
  {
    if (v116 == (void *)21)
    {
      unsigned int v110 = v25;
      uint64_t v81 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
      id v82 = [v106 zoneName];
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      uint64_t v85 = v84;

      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v81 + 104LL))(v83, v85, 0LL);
      swift_bridgeObjectRelease(v85);
      id v86 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
      NSString v87 = String._bridgeToObjectiveC()();
      id v69 = [v86 initWithFlag:v87 delayInSeconds:0.1];

      id v70 = v106;
      uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        id v104 = v9;
        __int128 v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v105 = swift_slowAlloc(32LL, -1LL);
        v115 = (void *)v105;
        buf = v88;
        *(_DWORD *)__int128 v88 = 136315138;
        id v89 = [v70 zoneName];
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        uint64_t v108 = v8;
        __int128 v91 = v6;
        unint64_t v93 = v92;

        uint64_t v9 = v104;
        uint64_t v114 = sub_10007C22C(v90, v93, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v88 + 4, v88 + 12);
        unint64_t v94 = v93;
        id v6 = v91;
        uint64_t v8 = v108;
        swift_bridgeObjectRelease(v94);

        id v80 = "will re-fetch the zone %s";
        goto LABEL_26;
      }

LABEL_29:
      goto LABEL_30;
    }

    if (v116 == (void *)26)
    {
      unsigned int v110 = v25;
      uint64_t v60 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
      id v61 = [v106 zoneName];
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      uint64_t v64 = v63;

      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v60 + 120LL))( v62,  v64,  sub_10007BE00,  0LL);
      swift_bridgeObjectRelease(v64);
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"CloudKitZoneRecreate");
      uint64_t v66 = v65;
      id v67 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
      NSString v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v66);
      id v69 = [v67 initWithFlag:v68 delayInSeconds:0.1];

      id v70 = v106;
      uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        unsigned __int8 v103 = v9;
        id v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v105 = swift_slowAlloc(32LL, -1LL);
        v115 = (void *)v105;
        buf = v73;
        *(_DWORD *)id v73 = 136315138;
        id v74 = [v70 zoneName];
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v107 = v8;
        id v76 = v6;
        unint64_t v78 = v77;

        uint64_t v9 = v103;
        uint64_t v114 = sub_10007C22C(v75, v78, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v73 + 4, v73 + 12);
        unint64_t v79 = v78;
        id v6 = v76;
        uint64_t v8 = v107;
        swift_bridgeObjectRelease(v79);

        id v80 = "will recreate the zone %s";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v71, v72, v80, buf, 0xCu);
        swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(buf, -1LL, -1LL);

LABEL_30:
        uint64_t v25 = v110;
        goto LABEL_31;
      }

      goto LABEL_29;
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0xE0LL))(1LL);
  }

  id v69 = 0LL;
LABEL_31:
  a4 = (unint64_t)log;
LABEL_32:
  __int128 v95 = (void *)_convertErrorToNSError(_:)(v6);
  [v8 setError:v95];

  sub_10007EB68(v6, v113, a4, v25, 1);
  if (v69)
  {
    id v96 = v69;
    id v97 = [v9 flagHandler];
    if (v97)
    {
      id v98 = v97;
      [v97 handlePendingFlag:v96];

      swift_unknownObjectRelease(v98);
    }

    else
    {
    }
  }

    swift_once(&qword_1002E9B90, sub_100086A74);
    goto LABEL_12;
  }

  id v14 = v12;
  unint64_t v15 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  os_log_type_t v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    id v17 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002E9B90 != -1) {
      swift_once(&qword_1002E9B90, sub_100086A74);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v46, (uint64_t)qword_1002E9B98);
    uint64_t v47 = static os_log_type_t.error.getter();
    uint64_t v48 = swift_bridgeObjectRetain(v1);
    uint64_t v35 = (void *)Logger.logObject.getter(v48);
    id v49 = v47;
    if (!os_log_type_enabled((os_log_t)v35, v47))
    {
      swift_bridgeObjectRelease_n(v1, 2LL);
      goto LABEL_26;
    }

    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v50;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v51 = swift_bridgeObjectRetain(v1);
    uint64_t v52 = Array.description.getter(v51, v15);
    id v54 = v53;
    swift_bridgeObjectRelease(v1);
    uint64_t v55 = sub_10007C22C(v52, v54, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v49, "no response %s", v37, 0xCu);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    id v41 = v50;
    goto LABEL_24;
  }

  if (v1 < 0) {
    unint64_t v45 = v1;
  }
  else {
    unint64_t v45 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v45)) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_7;
  }

  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v18 = *(id *)(v1 + 32);
LABEL_7:
  id v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2LL);
  objc_super v20 = (*(uint64_t (**)(void *))(*(void *)v3 + 336LL))(v19);
  uint64_t v21 = *v2;
  uint64_t *v2 = (id)v20;

  unint64_t v22 = *v2;
  unint64_t v23 = *(uint64_t (**)(void *, id))(*(void *)v3 + 384LL);
  uint64_t v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }

  uint64_t v25 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152LL))();
  uint64_t v57 = 0LL;
  int64_t v26 = [v25 save:&v57];

  uint64_t v27 = v57;
  if (v26)
  {
    id v28 = v57;
    goto LABEL_10;
  }

  uint64_t v42 = v57;
  unint64_t v43 = _convertNSErrorToError(_:)(v27);

  swift_willThrow(v44);
  swift_errorRelease(v43);
}

    swift_once(&qword_1002EA8B0, sub_1000972A0);
    goto LABEL_22;
  }

    swift_once(&qword_1002EA8B0, sub_1000972A0);
    goto LABEL_12;
  }

  id v14 = v12;
  unint64_t v15 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  os_log_type_t v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    id v17 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002EA8B0 != -1) {
      swift_once(&qword_1002EA8B0, sub_1000972A0);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v46, (uint64_t)qword_1002EA8B8);
    uint64_t v47 = static os_log_type_t.error.getter();
    uint64_t v48 = swift_bridgeObjectRetain(v1);
    uint64_t v35 = (void *)Logger.logObject.getter(v48);
    id v49 = v47;
    if (!os_log_type_enabled((os_log_t)v35, v47))
    {
      swift_bridgeObjectRelease_n(v1, 2LL);
      goto LABEL_26;
    }

    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v50;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v51 = swift_bridgeObjectRetain(v1);
    uint64_t v52 = Array.description.getter(v51, v15);
    id v54 = v53;
    swift_bridgeObjectRelease(v1);
    uint64_t v55 = sub_10007C22C(v52, v54, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v49, "no response %s", v37, 0xCu);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    id v41 = v50;
    goto LABEL_24;
  }

  if (v1 < 0) {
    unint64_t v45 = v1;
  }
  else {
    unint64_t v45 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v45)) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_7;
  }

  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v18 = *(id *)(v1 + 32);
LABEL_7:
  id v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2LL);
  objc_super v20 = (*(uint64_t (**)(void *))(*(void *)v3 + 432LL))(v19);
  uint64_t v21 = *v2;
  uint64_t *v2 = (id)v20;

  unint64_t v22 = *v2;
  unint64_t v23 = *(uint64_t (**)(void *, id))(*(void *)v3 + 448LL);
  uint64_t v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }

  uint64_t v25 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152LL))();
  uint64_t v57 = 0LL;
  int64_t v26 = [v25 save:&v57];

  uint64_t v27 = v57;
  if (v26)
  {
    id v28 = v57;
    goto LABEL_10;
  }

  uint64_t v42 = v57;
  unint64_t v43 = _convertNSErrorToError(_:)(v27);

  swift_willThrow(v44);
  swift_errorRelease(v43);
}

    swift_once(&qword_1002EB540, sub_1000C17AC);
    goto LABEL_12;
  }

  id v14 = v12;
  unint64_t v15 = sub_10007D178(0LL, &qword_1002E18A8, off_100275008);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  os_log_type_t v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    id v17 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002EB540 != -1) {
      swift_once(&qword_1002EB540, sub_1000C17AC);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v46, (uint64_t)qword_1002EB548);
    uint64_t v47 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain(v1);
    uint64_t v35 = (void *)Logger.logObject.getter(v48);
    id v49 = v47;
    if (!os_log_type_enabled((os_log_t)v35, v47))
    {
      swift_bridgeObjectRelease_n(v1, 2LL);
      goto LABEL_26;
    }

    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v50;
    *(_DWORD *)uint64_t v37 = 136315138;
    swift_bridgeObjectRetain(v1);
    uint64_t v52 = Array.description.getter(v51, v15);
    id v54 = v53;
    swift_bridgeObjectRelease(v1);
    uint64_t v55 = sub_10007C22C(v52, v54, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v49, "no response %s", v37, 0xCu);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    id v41 = v50;
    goto LABEL_24;
  }

  if (v1 < 0) {
    unint64_t v45 = v1;
  }
  else {
    unint64_t v45 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v45)) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_7;
  }

  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v18 = *(id *)(v1 + 32);
LABEL_7:
  id v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2LL);
  objc_super v20 = (*(uint64_t (**)(void *))(*(void *)v3 + 200LL))(v19);
  uint64_t v21 = *v2;
  uint64_t *v2 = (id)v20;

  unint64_t v22 = *v2;
  unint64_t v23 = *(uint64_t (**)(void *, id))(*(void *)v3 + 248LL);
  uint64_t v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }

  uint64_t v25 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 136LL))();
  uint64_t v57 = 0LL;
  int64_t v26 = [v25 save:&v57];

  uint64_t v27 = v57;
  if (v26)
  {
    id v28 = v57;
    goto LABEL_10;
  }

  uint64_t v42 = v57;
  unint64_t v43 = _convertNSErrorToError(_:)(v27);

  swift_willThrow(v44);
  swift_errorRelease(v43);
}

    uint64_t v59 = v32;
    goto LABEL_59;
  }

  id v98 = a1;
  if (a4 != a2 || &a2[v31] <= a4) {
    memmove(a4, a2, 8 * v31);
  }
  id v33 = &a4[v31];
  uint64_t v60 = v90;
  if (v30 < 8)
  {
    uint64_t v59 = a2;
    goto LABEL_59;
  }

  uint64_t v59 = a2;
  if (v98 < a2)
  {
    id v61 = (char *)(v93 - 1);
    __int128 v88 = a4;
    while (1)
    {
      unint64_t v92 = (char *)v33;
      unint64_t v93 = v59;
      uint64_t v62 = v33 - 1;
      uint64_t v63 = v59 - 1;
      uint64_t v64 = *(v59 - 1);
      uint64_t v65 = *(v33 - 1);
      id v97 = v64;
      __int128 v91 = v65;
      uint64_t v66 = [v65 smtTimestamp];
      if (!v66) {
        break;
      }
      id v67 = v66;
      NSString v68 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

      id v69 = v99;
      id v70 = (void (*)(char *, char *, uint64_t))v99[4];
      uint64_t v71 = (uint64_t)v89;
      v70(v89, v68, v16);
      os_log_type_t v72 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v69[7];
      v72((char *)v71, 0LL, 1LL, v16);
      id v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v69[6])(v71, 1LL, v16);
      id v74 = v95;
      if ((_DWORD)v73 == 1)
      {
        uint64_t v60 = v90;
LABEL_40:
        static Date.distantPast.getter(v73);
        sub_10009691C(v71);
        goto LABEL_42;
      }

      v70(v94, (char *)v71, v16);
      uint64_t v60 = v90;
LABEL_42:
      uint64_t v75 = [v97 smtTimestamp];
      if (v75)
      {
        id v76 = v75;
        unint64_t v77 = v96;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        unint64_t v78 = v99;
        unint64_t v79 = (void (*)(char *, char *, uint64_t))v99[4];
        id v80 = v77;
        uint64_t v60 = v90;
        id v74 = v95;
        v79(v95, v80, v16);
        v72(v74, 0LL, 1LL, v16);
        uint64_t v81 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78[6])(v74, 1LL, v16);
        if ((_DWORD)v81 != 1)
        {
          v79(v60, v74, v16);
          goto LABEL_47;
        }
      }

      else
      {
        uint64_t v81 = v72(v74, 1LL, 1LL, v16);
      }

      static Date.distantPast.getter(v81);
      sub_10009691C((uint64_t)v74);
LABEL_47:
      id v82 = v61 + 8;
      uint64_t v83 = v94;
      uint64_t v84 = static Date.< infix(_:_:)(v94, v60);
      uint64_t v85 = (void (*)(char *, uint64_t))v99[1];
      v85(v60, v16);
      v85(v83, v16);

      if ((v84 & 1) != 0)
      {
        id v33 = (void **)v92;
        a4 = v88;
        if (v82 == (char *)v93)
        {
          uint64_t v59 = v63;
        }

        else
        {
          uint64_t v59 = v63;
        }
      }

      else
      {
        a4 = v88;
        uint64_t v63 = v62;
        if (v82 == v92)
        {
          id v33 = v62;
          uint64_t v59 = v93;
          if (v61 < v92) {
            goto LABEL_57;
          }
        }

        else
        {
          id v33 = v62;
          uint64_t v59 = v93;
        }
      }

      *(void *)id v61 = *v63;
LABEL_57:
      if (v33 > a4)
      {
        v61 -= 8;
        if (v59 > v98) {
          continue;
        }
      }

      goto LABEL_59;
    }

    os_log_type_t v72 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v99[7];
    uint64_t v71 = (uint64_t)v89;
    id v73 = v72(v89, 1LL, 1LL, v16);
    id v74 = v95;
    goto LABEL_40;
  }

      int64_t v26 = *v14;
      if (*(void *)&v11[v26] == a1) {
        *(void *)&v11[v26] = 0LL;
      }
      goto LABEL_31;
    }
  }

  else
  {
    unint64_t v15 = (void *)a2[2];
    if (v15)
    {
      sub_10013828C(a1, v15, *(_DWORD *)(v6 + 20), *(_DWORD *)(v6 + 16));
      uint64_t v8 = *(_WORD *)(v6 + 28);
    }

    os_log_type_t v16 = v3 != 0LL;
    if ((v8 & 0x20) != 0 && ![v3 length])
    {

      os_log_type_t v16 = 0;
      uint64_t v3 = 0LL;
    }

    id v17 = *(unsigned int *)(v6 + 20);
    uint64_t v18 = *(void *)(a1 + 64);
    if ((v17 & 0x80000000) != 0)
    {
      unint64_t v23 = *(_DWORD *)(v6 + 16);
      if (!v16) {
        unint64_t v23 = 0;
      }
      *(_DWORD *)(v18 + 4LL * -(int)v17) = v23;
    }

    else
    {
      id v19 = v17 >> 5;
      objc_super v20 = 1 << v17;
      if (v16) {
        *(_DWORD *)(v18 + 4 * v19) |= v20;
      }
      else {
        *(_DWORD *)(v18 + 4LL * v19) &= ~v20;
      }
    }

    uint64_t v24 = *(void *)(a1 + 64);
    uint64_t v25 = *(unsigned int *)(v6 + 24);
    id v11 = *(char **)(v24 + v25);
    *(void *)(v24 + v25) = v3;
    if (v11)
    {
      goto LABEL_31;
    }
  }

  return sub_10012DE18(a1);
}

        if (v20)
        {
          unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[KTStateMachine currentFlags](v2, "currentFlags"));
          id v41 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
          [v40 _onqueueSetFlag:v41];

          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[KTStateMachine pendingFlags](v2, "pendingFlags"));
          unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
          [v42 setObject:0 forKeyedSubscript:v43];

          uint64_t v50 = 1;
        }
      }

      if (v51 == (id)++v12)
      {
        unint64_t v44 = [v8 countByEnumeratingWithState:&v52 objects:v60 count:16];
        uint64_t v51 = v44;
        if (!v44)
        {

          if (v10)
          {
            [v10 timeIntervalSinceDate:v7];
            uint64_t v46 = (unint64_t)(v45 * 1000000000.0);
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[KTStateMachine pendingFlagsScheduler](v2, "pendingFlagsScheduler"));
            [v47 triggerAt:v46];

            if ((v50 & 1) == 0)
            {
LABEL_42:

              return;
            }

  return v16;
}

    if (+[KTSignalTermHandler terminated](&OBJC_CLASS___KTSignalTermHandler, "terminated"))
    {
      if (qword_1002EED00 != -1) {
        dispatch_once(&qword_1002EED00, &stru_100287BB0);
      }
      uint64_t v56 = qword_1002EED08;
      NSString v12 = v59;
      if (os_log_type_enabled((os_log_t)qword_1002EED08, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        id v53 = "terminated while syncing, abandon sync";
        id v54 = (os_log_s *)v56;
        uint64_t v55 = OS_LOG_TYPE_ERROR;
        goto LABEL_55;
      }

      goto LABEL_56;
    }
  }

  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v60 currentHistoryToken]);

  if (v48)
  {
    id v49 = (void *)objc_claimAutoreleasedReturnValue(-[StaticKeyContactsSync storage](self, "storage"));
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v60 currentHistoryToken]);
    [v49 storeContactsSyncToken:v50];
  }

  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[StaticKeyContactsSync storage](self, "storage"));
  [v51 updateLastContactSyncDate];

  if (qword_1002EED00 != -1) {
    dispatch_once(&qword_1002EED00, &stru_100287BD0);
  }
  NSString v12 = v59;
  uint64_t v52 = qword_1002EED08;
  if (os_log_type_enabled((os_log_t)qword_1002EED08, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    id v53 = "mergeChangesFromContacts: mergeChangesFromContacts done";
    id v54 = (os_log_s *)v52;
    uint64_t v55 = OS_LOG_TYPE_DEFAULT;
LABEL_55:
    _os_log_impl((void *)&_mh_execute_header, v54, v55, v53, buf, 2u);
  }

uint64_t sub_10007DED8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_10007DEFC(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (qword_1002E9550 != -1) {
    swift_once(&qword_1002E9550, sub_10007ADC8);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v4, (uint64_t)qword_1002E9558);
  id v5 = a1;
  id v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v13 = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "delete block: %@", v8, 0xCu);
    uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  return [v3 deleteRecordIDWithCkrecordID:v5];
}

uint64_t sub_10007E0A0()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007E0CC(void *a1, void *a2, char a3)
{
  char v4 = a3;
  if ((a3 & 1) != 0)
  {
    os_log_type_t v7 = *(void **)(v3 + 16);
    swift_errorRetain(a2);
    if (qword_1002E9550 != -1) {
      swift_once(&qword_1002E9550, sub_10007ADC8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v8, (uint64_t)qword_1002E9558);
    sub_10007EAE4(a2, 1);
    id v9 = a1;
    sub_10007EAE4(a2, 1);
    id v10 = v9;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      char v38 = v4;
      uint64_t v14 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138412546;
      uint64_t v41 = (uint64_t)v10;
      id v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v13 + 4, v13 + 12);
      *uint64_t v14 = v10;

      *(_WORD *)(v13 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v41 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v13 + 14, v13 + 22);
      v14[1] = v16;
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "merge error: %@ %@", (uint8_t *)v13, 0x16u);
      uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v14, 2LL, v17);
      uint64_t v18 = v14;
      char v4 = v38;
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
    }

    uint64_t v35 = (void *)_convertErrorToNSError(_:)(a2);
    [v7 setError:v35];
  }

  else
  {
    id v19 = *(void **)(v3 + 24);
    uint64_t v20 = qword_1002E9550;
    id v21 = a2;
    if (v20 != -1) {
      swift_once(&qword_1002E9550, sub_10007ADC8);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v22, (uint64_t)qword_1002E9558);
    sub_10007EAE4(a2, 0);
    id v23 = a1;
    sub_10007EAE4(a2, 0);
    id v24 = v23;
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      char v39 = v4;
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      id v28 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = (uint64_t)v24;
      uint64_t v41 = v37;
      *(_DWORD *)uint64_t v27 = 138412546;
      id v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 4, v27 + 12);
      void *v28 = v24;

      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v30 = CKRecord.recordType.getter();
      unint64_t v32 = v31;
      uint64_t v40 = sub_10007C22C(v30, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v32);
      sub_10007EAF0(a2, 0);
      sub_10007EAF0(a2, 0);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "merge block: %@[%s]", (uint8_t *)v27, 0x16u);
      uint64_t v33 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v28, 1LL, v33);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v34 = v27;
      char v4 = v39;
      swift_slowDealloc(v34, -1LL, -1LL);

      objc_msgSend(v19, "updatedRecordWithCkrecord:", v21, v25);
    }

    else
    {

      sub_10007EAF0(a2, 0);
      sub_10007EAF0(a2, 0);

      objc_msgSend(v19, "updatedRecordWithCkrecord:", v21, log);
    }
  }

  sub_10007EAF0(a2, v4 & 1);
}

uint64_t sub_10007E580()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007E5AC(uint64_t a1, char a2)
{
  char v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  id v5 = &unk_1002DF000;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1002E9550 != -1) {
      swift_once(&qword_1002E9550, sub_10007ADC8);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v15, (uint64_t)qword_1002E9558);
    swift_errorRetain(a1);
    uint64_t v16 = swift_errorRetain(a1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v19 = 138412290;
      swift_errorRetain(a1);
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v31 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
      uint64_t *v20 = v21;
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "fetchRecordZoneChangesResultBlock: %@", v19, 0xCu);
      uint64_t v22 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v20, 1LL, v22);
      id v23 = v20;
      id v5 = (void *)&unk_1002DF000;
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
    }

    id v24 = (void *)_convertErrorToNSError(_:)(a1);
    [v4 setError:v24];

    sub_10007EAD8(a1, 1);
  }

  else
  {
    id v6 = [*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps] smDataStore];
    if (qword_1002E9588 != -1) {
      swift_once(&qword_1002E9588, sub_10007AE4C);
    }
    NSString v7 = String._bridgeToObjectiveC()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v6 setSettingsDate:v7 date:isa];

    swift_unknownObjectRelease(v6);
    if (qword_1002E9550 != -1) {
      swift_once(&qword_1002E9550, sub_10007ADC8);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100072DEC(v9, (uint64_t)qword_1002E9558);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetchRecordZoneChangesResultBlock", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }
  }

  id v25 = [*(id *)&v4[v5[209]] logger];
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v4 error];
  if (v27)
  {
    id v28 = v27;
    id v29 = (void *)_convertErrorToNSError(_:)(v27);
  }

  else
  {
    id v29 = 0LL;
  }

  [v25 logResultForEvent:v26 hardFailure:0 result:v29];

  id v30 = [v4 operationQueue];
  [v30 addOperation:v3];
}

uint64_t type metadata accessor for KTFetchCloudStorageOperation(uint64_t a1)
{
  uint64_t result = qword_1002E95A8;
  if (!qword_1002E95A8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTFetchCloudStorageOperation);
  }
  return result;
}

uint64_t sub_10007EA14()
{
  return type metadata accessor for KTFetchCloudStorageOperation(0LL);
}

uint64_t sub_10007EA1C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  void v4[2] = "\b";
  void v4[3] = &unk_100247DE8;
  v4[4] = &unk_100247DE8;
  void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = &unk_100247DE8;
  v4[9] = &unk_100247E00;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10007EAD8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

id sub_10007EAE4(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_10007EAF0(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_10007EAFC(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007EB20(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  id v8 = a1;
  return sub_10007EB54(a2, a3);
}

uint64_t sub_10007EB54(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100072B9C(a1, a2);
  }
  return a1;
}

uint64_t sub_10007EB68(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRelease(a1);
  }

  return sub_10007EB9C(a2, a3);
}

uint64_t sub_10007EB9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100072BE0(a1, a2);
  }
  return a1;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_10007EBC4()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF780,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247E54);
}

uint64_t sub_10007EBF0()
{
  return sub_100073FE0( (unint64_t *)&unk_1002E08F0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247E80);
}

uint64_t sub_10007EC1C()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF790,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F3C);
}

uint64_t sub_10007EC48()
{
  return sub_100073FE0( (unint64_t *)&unk_1002E0900,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F08);
}

uint64_t sub_10007EC74()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF7A0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247EC4);
}

uint64_t sub_10007ECA0()
{
  return sub_100073FE0( (unint64_t *)&unk_1002E0910,  (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0,  (uint64_t)&unk_100248028);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10007ECE0()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF7B0,  (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0,  (uint64_t)&unk_100247FEC);
}

uint64_t sub_10007ED0C()
{
  return sub_100073FE0( (unint64_t *)&unk_1002DF7C0,  (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0,  (uint64_t)&unk_100248064);
}

uint64_t sub_10007ED38()
{
  return sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
}

void sub_10007ED64()
{
}

uint64_t sub_10007ED7C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10007EDAC(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  *(void *)(v1 + 16) = a1;
  return result;
}

void *sub_10007EDE8(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

void sub_10007EE24()
{
  qword_1002EF160 = 0x3436746E49LL;
  *(void *)algn_1002EF168 = 0xE500000000000000LL;
}

uint64_t *sub_10007EE44()
{
  if (qword_1002E9A40 != -1) {
    swift_once(&qword_1002E9A40, sub_10007EE24);
  }
  return &qword_1002EF160;
}

uint64_t sub_10007EE84()
{
  return sub_10007F6C4(&qword_1002E9A40, &qword_1002EF160, algn_1002EF168, (uint64_t)sub_10007EE24);
}

uint64_t sub_10007EEA4(uint64_t a1, uint64_t a2)
{
  return sub_10007F750(a1, a2, &qword_1002E9A40, &qword_1002EF160, (uint64_t *)algn_1002EF168, (uint64_t)sub_10007EE24);
}

uint64_t (*sub_10007EEC4(uint64_t a1))(void)
{
  if (qword_1002E9A40 != -1) {
    swift_once(&qword_1002E9A40, sub_10007EE24);
  }
  swift_beginAccess(&qword_1002EF160, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10007EF30()
{
  return v0;
}

uint64_t sub_10007EF38()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_10007EF48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88LL))();
  *a1 = result;
  return result;
}

uint64_t sub_10007EF78(uint64_t a1, uint64_t a2)
{
  return sub_10007F90C(a1, a2, &qword_1002E9A40, &qword_1002EF160, algn_1002EF168, (uint64_t)sub_10007EE24);
}

double sub_10007EF98()
{
  return *(double *)(v0 + 16);
}

uint64_t sub_10007EFC8(double a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  *(double *)(v1 + 16) = a1;
  return result;
}

void sub_10007F004()
{
  algn_1002EF178[5] = 0;
  *(_WORD *)&algn_1002EF178[6] = -5120;
}

uint64_t *sub_10007F030()
{
  if (qword_1002E9A48 != -1) {
    swift_once(&qword_1002E9A48, sub_10007F004);
  }
  return &qword_1002EF170;
}

uint64_t sub_10007F070()
{
  return sub_10007F6C4(&qword_1002E9A48, &qword_1002EF170, algn_1002EF178, (uint64_t)sub_10007F004);
}

uint64_t sub_10007F090(uint64_t a1, uint64_t a2)
{
  return sub_10007F750(a1, a2, &qword_1002E9A48, &qword_1002EF170, (uint64_t *)algn_1002EF178, (uint64_t)sub_10007F004);
}

uint64_t (*sub_10007F0B0(uint64_t a1))(void)
{
  if (qword_1002E9A48 != -1) {
    swift_once(&qword_1002E9A48, sub_10007F004);
  }
  swift_beginAccess(&qword_1002EF170, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10007F11C(double a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(double *)(result + 16) = a1;
  return result;
}

uint64_t sub_10007F14C(double a1)
{
  uint64_t result = v1;
  *(double *)(v1 + 16) = a1;
  return result;
}

void sub_10007F158(double *a1@<X8>)
{
  *a1 = (*(double (**)(void))(**(void **)v1 + 88LL))();
}

uint64_t sub_10007F188(uint64_t a1, uint64_t a2)
{
  return sub_10007F90C(a1, a2, &qword_1002E9A48, &qword_1002EF170, algn_1002EF178, (uint64_t)sub_10007F004);
}

uint64_t sub_10007F1A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10007F1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

void sub_10007F240()
{
  qword_1002EF180 = 0x676E69727453LL;
  *(void *)algn_1002EF188 = 0xE600000000000000LL;
}

uint64_t *sub_10007F260()
{
  if (qword_1002E9A50 != -1) {
    swift_once(&qword_1002E9A50, sub_10007F240);
  }
  return &qword_1002EF180;
}

uint64_t sub_10007F2A0()
{
  return sub_10007F6C4(&qword_1002E9A50, &qword_1002EF180, algn_1002EF188, (uint64_t)sub_10007F240);
}

uint64_t sub_10007F2C0(uint64_t a1, uint64_t a2)
{
  return sub_10007F750(a1, a2, &qword_1002E9A50, &qword_1002EF180, (uint64_t *)algn_1002EF188, (uint64_t)sub_10007F240);
}

uint64_t (*sub_10007F2E0(uint64_t a1))(void)
{
  if (qword_1002E9A50 != -1) {
    swift_once(&qword_1002E9A50, sub_10007F240);
  }
  swift_beginAccess(&qword_1002EF180, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10007F34C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject(v2, 32LL, 7LL);
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_10007F388(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_10007F394()
{
  return v0;
}

uint64_t sub_10007F3B0()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10007F3D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88LL))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10007F404(uint64_t a1, uint64_t a2)
{
  return sub_10007F90C(a1, a2, &qword_1002E9A50, &qword_1002EF180, algn_1002EF188, (uint64_t)sub_10007F240);
}

uint64_t sub_10007F424()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10007F454(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

void sub_10007F490()
{
  qword_1002EF190 = 1819242306LL;
  *(void *)algn_1002EF198 = 0xE400000000000000LL;
}

uint64_t *sub_10007F4AC()
{
  if (qword_1002E9A58 != -1) {
    swift_once(&qword_1002E9A58, sub_10007F490);
  }
  return &qword_1002EF190;
}

uint64_t sub_10007F4EC()
{
  return sub_10007F6C4(&qword_1002E9A58, &qword_1002EF190, algn_1002EF198, (uint64_t)sub_10007F490);
}

uint64_t sub_10007F50C(uint64_t a1, uint64_t a2)
{
  return sub_10007F750(a1, a2, &qword_1002E9A58, &qword_1002EF190, (uint64_t *)algn_1002EF198, (uint64_t)sub_10007F490);
}

uint64_t (*sub_10007F52C(uint64_t a1))(void)
{
  if (qword_1002E9A58 != -1) {
    swift_once(&qword_1002E9A58, sub_10007F490);
  }
  swift_beginAccess(&qword_1002EF190, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10007F598(char a1)
{
  uint64_t result = swift_allocObject(v1, 17LL, 7LL);
  *(_BYTE *)(result + 16) = a1;
  return result;
}

uint64_t sub_10007F5C8(char a1)
{
  *(_BYTE *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_10007F5D4()
{
  return swift_deallocClassInstance(v0, 17LL, 7LL);
}

uint64_t sub_10007F5E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88LL))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007F618(uint64_t a1, uint64_t a2)
{
  return sub_10007F90C(a1, a2, &qword_1002E9A58, &qword_1002EF190, algn_1002EF198, (uint64_t)sub_10007F490);
}

void sub_10007F640()
{
  qword_1002EF1A0 = 0x73676E69727453LL;
  *(void *)algn_1002EF1A8 = 0xE700000000000000LL;
}

uint64_t *sub_10007F664()
{
  if (qword_1002E9A60 != -1) {
    swift_once(&qword_1002E9A60, sub_10007F640);
  }
  return &qword_1002EF1A0;
}

uint64_t sub_10007F6A4()
{
  return sub_10007F6C4(&qword_1002E9A60, &qword_1002EF1A0, algn_1002EF1A8, (uint64_t)sub_10007F640);
}

uint64_t sub_10007F6C4(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  swift_beginAccess(a2, v8, 0LL, 0LL);
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v6;
}

uint64_t sub_10007F730(uint64_t a1, uint64_t a2)
{
  return sub_10007F750(a1, a2, &qword_1002E9A60, &qword_1002EF1A0, (uint64_t *)algn_1002EF1A8, (uint64_t)sub_10007F640);
}

uint64_t sub_10007F750(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  swift_beginAccess(a4, v12, 1LL, 0LL);
  uint64_t v10 = *a5;
  *a4 = a1;
  *a5 = a2;
  return swift_bridgeObjectRelease(v10);
}

uint64_t (*sub_10007F7C8(uint64_t a1))(void)
{
  if (qword_1002E9A60 != -1) {
    swift_once(&qword_1002E9A60, sub_10007F640);
  }
  swift_beginAccess(&qword_1002EF1A0, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10007F834(uint64_t a1, uint64_t a2)
{
  void v4[2] = a1;
  void v4[3] = a2;
  v4[0] = a1;
  v4[1] = a2;
  unint64_t v2 = sub_10007F884();
  return StringProtocol.contains<A>(_:)(v4, &type metadata for String, &type metadata for String, v2, v2) & 1;
}

unint64_t sub_10007F884()
{
  unint64_t result = qword_1002DF8F0;
  if (!qword_1002DF8F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002DF8F0);
  }

  return result;
}

uint64_t sub_10007F8C8()
{
  return v0;
}

uint64_t sub_10007F8E4()
{
  return sub_100080F3C(24LL);
}

uint64_t sub_10007F8EC(uint64_t a1, uint64_t a2)
{
  return sub_10007F90C(a1, a2, &qword_1002E9A60, &qword_1002EF1A0, algn_1002EF1A8, (uint64_t)sub_10007F640);
}

uint64_t sub_10007F90C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  swift_beginAccess(a4, v10, 0LL, 0LL);
  uint64_t v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_10007F97C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t sub_10007F9A4(void *a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)v1 + 120LL))(*a1, a1[1]) & 1;
}

double sub_10007F9D8()
{
  return *(double *)(v0 + 24);
}

uint64_t sub_10007FA08(double a1)
{
  uint64_t result = swift_beginAccess(v1 + 24, v4, 1LL, 0LL);
  *(double *)(v1 + 24) = a1;
  return result;
}

void *sub_10007FA44(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

double sub_10007FA80()
{
  return *(double *)(v0 + 32);
}

uint64_t sub_10007FAB0(double a1)
{
  uint64_t result = swift_beginAccess(v1 + 32, v4, 1LL, 0LL);
  *(double *)(v1 + 32) = a1;
  return result;
}

void *sub_10007FAEC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

double sub_10007FB28(double a1)
{
  return result;
}

double *sub_10007FB84(double a1, double a2, double a3)
{
  double result = (double *)swift_allocObject(v3, 40LL, 7LL);
  result[3] = a2;
  result[4] = a3;
  result[2] = a1;
  return result;
}

double *sub_10007FBC8(double a1, double a2, double a3)
{
  double result = v3;
  v3[3] = a2;
  void v3[4] = a3;
  v3[2] = a1;
  return result;
}

void sub_10007FBD8()
{
}

void sub_10007FC04(double *a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(double))(**(void **)v2 + 184LL))(*a1);
}

uint64_t sub_10007FC38()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_10007FC68(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 32, v4, 1LL, 0LL);
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_10007FCA4(uint64_t a1)
{
  else {
    return (*(uint64_t (**)(void))(*(void *)v1 + 88LL))();
  }
}

void *sub_10007FD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject(v3, 40LL, 7LL);
  result[3] = a2;
  result[4] = a3;
  result[2] = a1;
  return result;
}

void *sub_10007FD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  void v3[4] = a3;
  v3[2] = a1;
  return v3;
}

void sub_10007FD54()
{
}

uint64_t sub_10007FD80()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_10007FD90@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 184LL))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007FDC4(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_10007FDF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)v2 + 120LL))(*a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_10007FE2C(char a1)
{
  return a1 & 1;
}

uint64_t sub_10007FE34@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 120LL))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10007FE6C()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_10007FE74()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t sub_10007FEA0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

id sub_10007FEB4()
{
  return *(id *)(v0 + 24);
}

void sub_10007FEE4(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t sub_10007FF28()
{
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  sub_10007FF5C();
  return v1;
}

uint64_t sub_10007FF5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = sub_100080118((uint64_t)_swiftEmptyArrayStorage);
  sub_100080288();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100073FE0( (unint64_t *)&unk_1002E20F0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100072CC4(&qword_1002DF900);
  unint64_t v14 = sub_1000802C4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000011LL,  0x800000010020EB70LL,  v11,  v8,  v5,  0LL);
  return v1;
}

unint64_t sub_100080118(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E03E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  uint64_t v23 = v3 + 64;
  swift_retain(v3);
  uint64_t v22 = v1;
  uint64_t v6 = (uint64_t *)(v1 + 48);
  while (1)
  {
    uint64_t v24 = v5;
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    uint64_t v10 = v6[1];
    uint64_t v12 = v6[2];
    uint64_t v11 = v6[3];
    uint64_t v13 = v6[4];
    uint64_t v25 = v6[5];
    uint64_t v14 = v6[6];
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v16 & 1) != 0) {
      break;
    }
    *(void *)(v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v17 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v17 = v7;
    v17[1] = v8;
    os_log_type_t v18 = (void *)(v4[7] + 56 * result);
    *os_log_type_t v18 = v9;
    v18[1] = v10;
    v18[2] = v12;
    v18[3] = v11;
    void v18[4] = v13;
    void v18[5] = v25;
    void v18[6] = v14;
    uint64_t v19 = v4[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v4[2] = v21;
    v6 += 9;
    uint64_t v5 = v24 - 1;
    if (v24 == 1)
    {
      swift_release(v4);
      uint64_t v1 = v22;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100080288()
{
  unint64_t result = qword_1002DF8F8;
  if (!qword_1002DF8F8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002DF8F8);
  }

  return result;
}

unint64_t sub_1000802C4()
{
  unint64_t result = qword_1002E2100;
  if (!qword_1002E2100)
  {
    uint64_t v1 = sub_10007426C(&qword_1002DF900);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E2100);
  }

  return result;
}

unint64_t sub_100080310(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100072CC4(&qword_1002E03C8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100085CA8(v7, (uint64_t)&v17, &qword_1002E03D0);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_100079A58(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_100085C90(&v19, v4[7] + 40 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100080450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (dispatch_queue_s *)(*(uint64_t (**)(void))(*(void *)v3 + 120LL))();
  uint64_t v8 = swift_allocObject(&unk_10027DA60, 96LL, 7LL);
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 32);
  *(void *)(v8 + 8_Block_object_dispose(va, 8) = *(void *)(a3 + 48);
  uint64_t v10 = swift_allocObject(&unk_10027DA88, 32LL, 7LL);
  *(void *)(v10 + 16) = sub_10008060C;
  *(void *)(v10 + 24) = v8;
  void v15[4] = sub_1000807AC;
  uint64_t v16 = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_1000807CC;
  v15[3] = &unk_10027DAA0;
  char v11 = _Block_copy(v15);
  uint64_t v12 = v16;
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  sub_100080804((void *)a3);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v7, v11);

  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 116LL, 139LL, 20LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000805C8()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10008060C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(uint64_t (**)(_BYTE *))(**(void **)(v0 + 16) + 112LL);
  swift_bridgeObjectRetain(v2);
  sub_100080804((void *)(v0 + 40));
  uint64_t v4 = (uint64_t (*)(_BYTE *, void))v3(v11);
  uint64_t v6 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v10 = *v6;
  *uint64_t v6 = 0x8000000000000000LL;
  sub_1000838F8(v0 + 40, v1, v2, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = *v6;
  *uint64_t v6 = v10;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v2);
  return v4(v11, 0LL);
}

uint64_t sub_1000806C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_100085C90((__int128 *)a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_100083A6C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_100077CFC(a1, &qword_1002DF910);
    sub_100082FA0(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_100077CFC((uint64_t)v11, &qword_1002DF910);
  }

uint64_t sub_10008079C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000807AC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000807CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000807EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000807FC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100080804(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10008084C()
{
  uint64_t v1 = (dispatch_queue_s *)(*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
  uint64_t v2 = swift_allocObject(&unk_10027DAD8, 32LL, 7LL);
  *(void *)(v2 + 16) = sub_100080964;
  *(void *)(v2 + 24) = v0;
  void v6[4] = sub_100085D2C;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  _DWORD v6[2] = sub_1000807CC;
  void v6[3] = &unk_10027DAF0;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 116LL, 144LL, 20LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  return result;
}

uint64_t sub_100080964()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v25 = result + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v22 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v22 >= v26) {
      return swift_release(v2);
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v3;
    if (!v23)
    {
      int64_t v3 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release(v2);
      }
      unint64_t v23 = *(void *)(v25 + 8 * v3);
      if (!v23)
      {
        int64_t v3 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release(v2);
        }
        unint64_t v23 = *(void *)(v25 + 8 * v3);
        if (!v23)
        {
          int64_t v3 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release(v2);
          }
          unint64_t v23 = *(void *)(v25 + 8 * v3);
          if (!v23) {
            break;
          }
        }
      }
    }

LABEL_22:
    unint64_t v6 = (v23 - 1) & v23;
    unint64_t v8 = __clz(__rbit64(v23)) + (v3 << 6);
LABEL_5:
    __int128 v9 = (uint64_t *)(*(void *)(v2 + 56) + 56 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v13 = v9[2];
    uint64_t v12 = (void *)v9[3];
    uint64_t v15 = v9[5];
    BOOL v14 = (void *)v9[6];
    uint64_t v16 = sub_100072CC4(&qword_1002E03D8);
    uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_1002464F0;
    swift_bridgeObjectRetain_n(v11, 2LL);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v18._countAndFlagsBits = 2108704LL;
    v18._object = (void *)0xE300000000000000LL;
    String.append(_:)(v18);
    swift_bridgeObjectRetain(v14);
    v19._countAndFlagsBits = v15;
    v19._object = v14;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v14);
    v20._countAndFlagsBits = 2108704LL;
    v20._object = (void *)0xE300000000000000LL;
    String.append(_:)(v20);
    swift_bridgeObjectRetain(v12);
    v21._countAndFlagsBits = v13;
    v21._object = v12;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease(v14);
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 32) = v10;
    *(void *)(v17 + 40) = v11;
    print(_:separator:terminator:)(v17, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    uint64_t result = swift_bridgeObjectRelease(v17);
  }

  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release(v2);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v3 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v3 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v3 >= v26) {
      return swift_release(v2);
    }
    unint64_t v23 = *(void *)(v25 + 8 * v3);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

  unint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  int64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *int64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  int64_t v26 = __OFADD__(v25, 1LL);
  id v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    unint64_t v6 = (v19 - 1) & v19;
    uint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    BOOL v14 = *(uint64_t (**)(_BYTE *, __n128))((swift_isaMask & *a2) + 0xA8LL);
    uint64_t v15 = swift_bridgeObjectRetain(v13);
    uint64_t v16 = (void (*)(_BYTE *, void))v14(v21, v15);
    sub_1000ABF38(v12, v13);
    swift_bridgeObjectRelease(v17);
    v16(v21, 0LL);
    swift_bridgeObjectRelease(v13);
  }

  Swift::String v20 = v18 + 4;
  if (v20 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  Swift::String v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    unint64_t v8 = v20;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    Swift::String v19 = *(void *)(v22 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }

    unint64_t v6 = (v16 - 1) & v16;
    uint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
    BOOL v14 = *v12;
    uint64_t v13 = v12[1];
    sub_100080E5C(*(void *)(v2 + 56) + 40 * v11, (uint64_t)v21);
    *(void *)&Swift::String v20 = v14;
    *((void *)&v20 + 1) = v13;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    Swift::String v19 = v22;
    swift_bridgeObjectRetain(v13);
    sub_1000B31F0((uint64_t)&v23, (uint64_t)v18);
    uint64_t result = sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
  }

  uint64_t v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v23;
  }

  uint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    __int128 v9 = v17;
    goto LABEL_22;
  }

  while (1)
  {
    __int128 v9 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_23;
    }
    uint64_t v16 = *(void *)(v3 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }

    unint64_t v6 = (v16 - 1) & v16;
    uint64_t v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    sub_100080E5C(*(void *)(a1 + 56) + 40 * v10, (uint64_t)v19);
    v18[0] = v12;
    v18[1] = v13;
    BOOL v14 = swift_bridgeObjectRetain(v13);
    a2(v12, v13, v19, v14);
    sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
  }

  uint64_t v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    unint64_t v8 = v17;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    uint64_t v16 = *(void *)(v20 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }

    uint64_t v4 = (v19 - 1) & v19;
    int64_t v26 = v20;
    unint64_t v8 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_5:
    __int128 v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = *(void *)(a1 + 56) + 24 * v8;
    uint64_t v13 = *(void **)v12;
    BOOL v14 = *(void **)(v12 + 8);
    uint64_t v15 = *(unsigned __int16 *)(v12 + 16);
    swift_bridgeObjectRetain(v11);
    uint64_t v16 = v13;
    uint64_t v17 = v14;
    a2(v10, v11, v13, v14, v15);

    uint64_t result = swift_bridgeObjectRelease(v11);
  }

  Swift::String v21 = i + 5;
  if (i + 5 >= v23) {
    return swift_release(a1);
  }
  Swift::String v19 = *(void *)(v22 + 8 * v21);
  if (v19)
  {
    Swift::String v20 = i + 5;
    goto LABEL_22;
  }

  while (1)
  {
    Swift::String v20 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v20 >= v23) {
      return swift_release(a1);
    }
    Swift::String v19 = *(void *)(v22 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_22;
    }
  }

        unint64_t v8 = (char *)v8 + 1;
      }

      while (v8 != v6);
      unint64_t v6 = [a1 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }

    while (v6);
  }

  return v4;
}

            sub_100131590(self, v12, (uint64_t)a3);
            goto LABEL_57;
          }
        }

        BOOL v14 = [v12 fieldType];
        if (v14 == 1)
        {
          if (![v12 isPackable])
          {
LABEL_25:
            sub_100131774(self, v12, (uint64_t *)a3, (uint64_t)a4);
            goto LABEL_58;
          }

          goto LABEL_22;
        }

        if (v14)
        {
          objc_msgSend( a3,  "readMapEntry:extensionRegistry:field:parentMessage:",  sub_100131A00((uint64_t)self, v12),  a4,  v12,  self);
          goto LABEL_58;
        }

        uint64_t v15 = v12[1];
        switch(*(_BYTE *)(v15 + 30))
        {
          case 0:
            uint64_t v16 = sub_10010BCF0((uint64_t *)a3 + 1);
            sub_1001389C8(self, (uint64_t)v12, v16);
            break;
          case 1:
            uint64_t v17 = sub_10010BC78((void *)a3 + 1);
            goto LABEL_35;
          case 2:
            Swift::String v18 = sub_10010BC78((void *)a3 + 1);
            goto LABEL_32;
          case 3:
            Swift::String v19 = sub_10010BB6C((void *)a3 + 1);
            sub_100138CF8(self, (uint64_t)v12, v19);
            break;
          case 4:
            Swift::String v20 = sub_10010BC40((void *)a3 + 1);
            goto LABEL_37;
          case 5:
            Swift::String v20 = sub_10010BC40((void *)a3 + 1);
            goto LABEL_37;
          case 6:
            uint64_t v25 = sub_10010BB34((void *)a3 + 1);
            sub_100138E78(self, (uint64_t)v12, v25);
            break;
          case 7:
            Swift::String v18 = sub_10010BC2C((uint64_t *)a3 + 1);
            goto LABEL_32;
          case 8:
            Swift::String v20 = sub_10010BBA4((char *)a3 + 8);
            goto LABEL_37;
          case 9:
            Swift::String v18 = sub_10010BCB0((uint64_t *)a3 + 1);
LABEL_32:
            Swift::String v21 = v18;
            int64_t v22 = self;
            unint64_t v23 = (uint64_t)v12;
            goto LABEL_33;
          case 0xA:
            Swift::String v20 = sub_10010BCD0((uint64_t *)a3 + 1);
            goto LABEL_37;
          case 0xB:
            uint64_t v17 = sub_10010BC2C((uint64_t *)a3 + 1);
LABEL_35:
            sub_100138828(self, (uint64_t)v12, v17);
            break;
          case 0xC:
            Swift::String v20 = sub_10010BBA4((char *)a3 + 8);
LABEL_37:
            sub_100138B7C(self, (uint64_t)v12, v20);
            break;
          case 0xD:
            int64_t v24 = sub_10010BFA0((uint64_t *)a3 + 1);
            goto LABEL_49;
          case 0xE:
            int64_t v24 = (void *)sub_10010BEB4((uint64_t *)a3 + 1);
LABEL_49:
            int64_t v26 = v24;
            id v27 = self;
            id v28 = v12;
            goto LABEL_56;
          case 0xF:
            if (sub_100138364((uint64_t)self, *(_DWORD *)(v15 + 20), *(_DWORD *)(v15 + 16)))
            {
              objc_msgSend(a3, "readMessage:extensionRegistry:", sub_100137E7C((uint64_t)self, (uint64_t)v12), a4);
              break;
            }

            id v30 = objc_alloc_init((Class)[v12 msgClass]);
            [a3 readMessage:v30 extensionRegistry:a4];
            goto LABEL_55;
          case 0x10:
            if (sub_100138364((uint64_t)self, *(_DWORD *)(v15 + 20), *(_DWORD *)(v15 + 16)))
            {
              objc_msgSend( a3,  "readGroup:message:extensionRegistry:",  *(unsigned int *)(v12[1] + 16),  sub_100137E7C((uint64_t)self, (uint64_t)v12),  a4);
            }

            else
            {
              id v30 = objc_alloc_init((Class)[v12 msgClass]);
              [a3 readGroup:*(unsigned int *)(v12[1] + 16) message:v30 extensionRegistry:a4];
LABEL_55:
              id v27 = self;
              id v28 = v12;
              int64_t v26 = v30;
LABEL_56:
              sub_100138498((uint64_t)v27, v28, v26);
            }

            break;
          case 0x11:
            id v29 = sub_10010BC2C((uint64_t *)a3 + 1);
            if ((*(_WORD *)(v12[1] + 28) & 0x1000) != 0 && ![v12 isValidEnumValue:v29])
            {
              [(id)sub_100130E98(self) mergeVarintField:*(unsigned int *)(v12[1] + 16) value:v29];
            }

            else
            {
              int64_t v22 = self;
              unint64_t v23 = (uint64_t)v12;
              Swift::String v21 = v29;
LABEL_33:
              sub_100138828(v22, v23, v21);
            }

            break;
          default:
            break;
        }

  if (a7) {
    *a7 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorFile,  -54LL,  @"missing fields from the disk store for %@",  self->_application));
  }
  if (qword_1002EE9F8 != -1) {
    dispatch_once(&qword_1002EE9F8, &stru_100284088);
  }
  uint64_t v35 = (os_log_s *)qword_1002EEA00;
  if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
  {
    application = self->_application;
    *(_DWORD *)buf = 138412290;
    uint64_t v57 = application;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "missing fields from the disk store for %@",  buf,  0xCu);
  }

  uint64_t v37 = 0LL;
LABEL_29:

  return v37;
}

    uint64_t v25 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v26,  v28,  v27));
    goto LABEL_24;
  }

  uint64_t v25 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -242LL,  @"failed to parse account key from Mutation"));
  }
LABEL_26:

  return v25;
}

    ++v24;
  }

  while (v24 < (unint64_t)objc_msgSend(v10, "responsesArray_Count"));
  char v39 = 1LL;
  if (v52)
  {
    uint64_t v51 = a4;
    if (v52 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v41 = v52 - 1;
      char v39 = 1LL;
      uint64_t v42 = 1LL;
      while (1)
      {
        unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v10 responsesArray]);
        unint64_t v44 = v12;
        unint64_t v45 = v18;
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v43 objectAtIndexedSubscript:v41]);

        uint64_t v47 = v45;
        uint64_t v12 = v44;
        uint64_t v48 = -[KTContextVerifier verifyLogConsistencyResponse:startRevision:receivedRevisions:forwards:serverHint:error:]( self,  "verifyLogConsistencyResponse:startRevision:receivedRevisions:forwards:serverHint:error:",  v46,  v51,  v47,  0LL,  v44,  a6);

        if (v48 != 1) {
          break;
        }
        ++v42;
        --v41;
        Swift::String v18 = v53;
        if (v42 > v52) {
          goto LABEL_40;
        }
      }

      char v39 = v48;
LABEL_42:
      Swift::String v18 = v53;
    }
  }

uint64_t sub_100080C08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100080C18()
{
  return v0;
}

uint64_t sub_100080C3C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void *sub_100080C68()
{
  return &unk_1002480D8;
}

uint64_t sub_100080C74()
{
  return -1LL;
}

BOOL sub_100080C7C(uint64_t a1)
{
  return a1 == -1;
}

unint64_t sub_100080C88()
{
  return sub_100080310((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100080C94()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100080CC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100080D0C()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_100080D3C(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 24, v4, 1LL, 0LL);
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_100080D78()
{
  unint64_t v1 = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(unint64_t))(*(void *)v0 + 104LL))(v1);
}

void (*sub_100080DAC(uint64_t a1, uint64_t a2, uint64_t a3))(_BYTE *, void)
{
  uint64_t result = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)v3 + 136LL))(v12);
  if (__OFADD__(*v8, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++*v8;
    result(v12, 0LL);
    sub_100080E5C(a3, (uint64_t)v12);
    __int128 v9 = *(uint64_t (**)(_BYTE *))(*(void *)v3 + 112LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v10 = (uint64_t (*)(_BYTE *, void))v9(v11);
    sub_1000806C8((uint64_t)v12, a1, a2);
    return (void (*)(_BYTE *, void))v10(v11, 0LL);
  }

  return result;
}

uint64_t sub_100080E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100080EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96LL);
  uint64_t v8 = swift_bridgeObjectRetain(a2);
  uint64_t v9 = v7(v8);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100079A58(a1, a2), (v11 & 1) != 0))
  {
    sub_100080E5C(*(void *)(v9 + 56) + 40 * v10, a3);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  swift_bridgeObjectRelease(a2);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_100080F34()
{
  return sub_100080F3C(32LL);
}

uint64_t sub_100080F3C(uint64_t a1)
{
  return swift_deallocClassInstance(v1, a1, 7LL);
}

uint64_t sub_100080F6C()
{
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  *(void *)(v1 + 16) = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 24) = 0LL;
  return v1;
}

uint64_t sub_100080FAC()
{
  *(void *)(v0 + 16) = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 24) = 0LL;
  return v0;
}

uint64_t sub_100080FD0()
{
  uint64_t v0 = type metadata accessor for DewGlobalState();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  uint64_t result = sub_10007FF5C();
  qword_1002E9A70 = v1;
  return result;
}

char *sub_100081008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v16 = sub_100084A60(a1, a2, a3, a4, a5, a6, a7);

  (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 80) - 8LL) + 8LL))(a4);
  swift_bridgeObjectRelease(a2);
  return v16;
}

char *sub_1000810B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *v7;
  uint64_t v12 = sub_100084A60(a1, a2, a3, a4, a5, a6, a7);

  (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 80) - 8LL) + 8LL))(a4);
  swift_bridgeObjectRelease(a2);
  return v12;
}

uint64_t sub_10008111C(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = -1LL;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess(v4, v7, 33LL, 0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 88),  *(void *)(v3 + 80),  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( v4,  a1,  AssociatedTypeWitness);
  return swift_endAccess(v7);
}

uint64_t sub_1000811B0@<X0>(uint64_t a1@<X8>)
{
  void (*v24)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void v40[3];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4[11],  v4[10],  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  uint64_t v6 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = __chkstk_darwin(v7);
  uint64_t v14 = v4[15];
  if (*(void *)((char *)v2 + v14) == -1LL)
  {
    id v28 = (char *)v2 + v4[14];
    swift_beginAccess(v28, v40, 0LL, 0LL);
  }

  else
  {
    os_log_type_t v36 = v13;
    uint64_t v37 = v11;
    char v38 = (char *)&v35 - v12;
    char v39 = a1;
    uint64_t v15 = *(void *)((char *)v2 + v4[16]);
    uint64_t v16 = OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides;
    uint64_t v17 = *(void *)(v15 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
    Swift::String v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 120LL);
    uint64_t v19 = swift_retain(v17);
    uint64_t v20 = v18(v19);
    swift_release(v17);
    if (*(void *)((char *)v2 + v14) < v20)
    {
      *(void *)((char *)v2 + v14) = v20;
      uint64_t v21 = *(void *)(v15 + v16);
      uint64_t v22 = v2[2];
      uint64_t v23 = v2[3];
      int64_t v24 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v21 + 160LL);
      swift_retain(v21);
      v24(v40, v22, v23);
      swift_release(v21);
      uint64_t v25 = v41;
      if (v41)
      {
        int64_t v26 = v42;
        sub_100084C04(v40, v41);
        id v27 = *(void (**)(uint64_t, uint64_t))(v26 + 16);
        *((void *)&v44 + 1) = swift_getAssociatedTypeWitness( 0LL,  v26,  v25,  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
        sub_100084C28(&v43);
        v27(v25, v26);
        sub_10007EAFC(v40);
      }

      else
      {
        sub_100077CFC((uint64_t)v40, &qword_1002DF910);
        unint64_t v43 = 0u;
        unint64_t v44 = 0u;
      }

      id v29 = sub_100072CC4(&qword_1002DF918);
      id v30 = swift_dynamicCast(v9, &v43, v29, AssociatedTypeWitness, 6LL);
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      if ((v30 & 1) != 0)
      {
        v31(v9, 0LL, 1LL, AssociatedTypeWitness);
        uint64_t v32 = v38;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v38, v9, AssociatedTypeWitness);
        uint64_t v33 = (char *)v2 + *(void *)(*v2 + 112LL);
        swift_beginAccess(v33, v40, 33LL, 0LL);
        (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v33, v32, AssociatedTypeWitness);
        swift_endAccess(v40);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v32, AssociatedTypeWitness);
      }

      else
      {
        v31(v9, 1LL, 1LL, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
      }
    }

    id v28 = (char *)v2 + *(void *)(*v2 + 112LL);
    swift_beginAccess(v28, v40, 0LL, 0LL);
    a1 = v39;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 16))(a1, v28, AssociatedTypeWitness);
}

void *sub_1000814A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = (char *)v0 + *(void *)(*v0 + 112LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v1 + 88),  *(void *)(v1 + 80),  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v4, AssociatedTypeWitness);

  return v0;
}

uint64_t sub_100081530()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100081554@<X0>(uint64_t a1@<X8>)
{
  return sub_100082F90(v1 + 16, a1);
}

uint64_t sub_100081560()
{
  return *(void *)(v0 + 72);
}

uint64_t *sub_100081568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = sub_100084C64(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease(a2);
  return v15;
}

uint64_t *sub_1000815F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = sub_100084C64(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease(a2);
  return v8;
}

uint64_t sub_100081628(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = a1;
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = -1LL;
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100081654(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (*(uint64_t (**)(void))(*v1 + 208))();
  uint64_t v7 = v3 + 80;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v5, v6, &unk_1002641A0, &unk_1002641B8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &unk_1002641A0,  &unk_1002641B0);
  LOBYTE(a1) = Set.contains(_:)(a1, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease(v4);
  return a1 & 1;
}

uint64_t sub_1000816F4()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v1 = v0;
  if (v0[11] == -1LL) {
    return swift_bridgeObjectRetain(v1[10]);
  }
  uint64_t v2 = *v0;
  uint64_t v3 = v0[12];
  uint64_t v4 = OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 120LL);
  uint64_t v7 = swift_retain(v5);
  uint64_t v8 = v6(v7);
  swift_release(v5);
  if (v1[11] >= v8) {
    return swift_bridgeObjectRetain(v1[10]);
  }
  v1[11] = v8;
  uint64_t v9 = *(void *)(v3 + v4);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 160LL);
  swift_retain(v9);
  v12(v23, v10, v11);
  swift_release(v9);
  uint64_t v13 = v24;
  if (!v24)
  {
    sub_100077CFC((uint64_t)v23, &qword_1002DF910);
    int64_t v26 = 0u;
    id v27 = 0u;
    goto LABEL_8;
  }

  uint64_t v14 = v25;
  sub_100084C04(v23, v24);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
  *((void *)&v27 + 1) = swift_getAssociatedTypeWitness( 0LL,  v14,  v13,  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  sub_100084C28(&v26);
  v15(v13, v14);
  sub_10007EAFC(v23);
  if (!*((void *)&v27 + 1))
  {
LABEL_8:
    sub_100077CFC((uint64_t)&v26, &qword_1002DF918);
    return swift_bridgeObjectRetain(v1[10]);
  }

  uint64_t v17 = *(void *)(v2 + 80);
  uint64_t v16 = *(void *)(v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v16, v17, &unk_1002641A0, &unk_1002641B8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v16,  v17,  AssociatedTypeWitness,  &unk_1002641A0,  &unk_1002641B0);
  uint64_t v20 = type metadata accessor for Set(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((swift_dynamicCast(v23, &v26, (char *)&type metadata for Any + 8, v20, 6LL) & 1) != 0)
  {
    uint64_t v21 = v1[10];
    v1[10] = v23[0];
    swift_bridgeObjectRelease(v21);
  }

  return swift_bridgeObjectRetain(v1[10]);
}

uint64_t sub_1000818D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  return v0;
}

uint64_t sub_100081928()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_100081948()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides));
}

uint64_t sub_100081958()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings));
}

uint64_t sub_100081968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t DewConfiguration.__allocating_init(settings:)(uint64_t a1)
{
  uint64_t v3 = objc_allocWithZone(v1);
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v5 = type metadata accessor for DewGlobalOverrides();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  *(void *)(v6 + 16) = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v6 + 24) = 0LL;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v6, a1);
  swift_deallocPartialClassInstance( v3,  ObjectType,  *(unsigned int *)((swift_isaMask & *v3) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v3) + 0x34LL));
  return v7;
}

uint64_t DewConfiguration.init(settings:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = type metadata accessor for DewGlobalOverrides();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  *(void *)(v6 + 16) = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v6 + 24) = 0LL;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v6, a1);
  swift_deallocPartialClassInstance( v2,  ObjectType,  *(unsigned int *)((swift_isaMask & *v2) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v2) + 0x34LL));
  return v7;
}

char *sub_100081B80(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100081BC0(a1, a2);
}

char *sub_100081BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings] = a2;
  swift_unknownObjectRetain(a2);
  uint64_t v9 = v2;
  swift_retain(a1);
  Logger.init(subsystem:category:)(0xD000000000000010LL, 0x80000001002480C0LL, 0x6769666E6F63LL, 0xE600000000000000LL);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))( &v9[OBJC_IVAR____TtC13transparencyd16DewConfiguration_logger],  v8,  v5);

  uint64_t v10 = (objc_class *)type metadata accessor for DewConfiguration(0LL);
  v25.receiver = v9;
  v25.super_class = v10;
  uint64_t v11 = (char *)objc_msgSendSuper2(&v25, "init");
  uint64_t v12 = v11;
  uint64_t v13 = *(void **)&v11[OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings];
  if (v13)
  {
    uint64_t v14 = v11;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v13 getSettingsData:v15];

    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "dew loading cached cloud configuration", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *(void *)v14) + 0x80LL))(v17, v19);
    swift_release(a1);
    swift_unknownObjectRelease(a2);
    sub_100072BE0(v17, v19);
  }

  else
  {
    swift_release(a1);
    swift_unknownObjectRelease(a2);
  }

  return v12;
}

uint64_t sub_100081E18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200LL))();
}

uint64_t sub_100081E40()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "resetCloudConfiguration", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }
}

uint64_t sub_100081EF4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100072CC4(&qword_1002DF928);
  __chkstk_darwin(v9);
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for CloudConfiguration(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v30[0] = a1;
  v30[1] = a2;
  uint64_t v29 = 0LL;
  memset(v28, 0, sizeof(v28));
  uint64_t v16 = sub_100072B9C(a1, a2);
  BinaryDecodingOptions.init()(v16);
  uint64_t v17 = sub_100073FE0(&qword_1002DF930, type metadata accessor for CloudConfiguration, (uint64_t)&unk_100249FAC);
  Message.init<A>(serializedBytes:extensions:partial:options:)( v30,  v28,  0LL,  v8,  v12,  &type metadata for Data,  v17,  &protocol witness table for Data);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  sub_100085C04((uint64_t)v11, (uint64_t)v15, type metadata accessor for CloudConfiguration);
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *(void *)(*(void *)v15 + 16LL);
  if (v19)
  {
    uint64_t v20 = *(void *)(type metadata accessor for DewValue(0LL) - 8);
    uint64_t v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v22 = *(void *)(v20 + 72);
    swift_bridgeObjectRetain(v18);
    do
    {
      sub_100082184(v21, v3);
      v21 += v22;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(v18);
  }

  uint64_t v23 = *(void **)(v3 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings);
  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v23 setSettingsData:v24 data:isa];
  }

  return sub_100077CC0((uint64_t)v15, type metadata accessor for CloudConfiguration);
}

uint64_t sub_100082184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Strings(0LL);
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = type metadata accessor for ConfigurationValue(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DewValue(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100085BC0(a1, (uint64_t)v17);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = a2;
    uint64_t v23 = v22;
    v37[0] = v22;
    uint64_t v34 = v11;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v31 = v21 + 4;
    uint64_t v32 = v9;
    uint64_t v24 = *v17;
    unint64_t v25 = v17[1];
    swift_bridgeObjectRetain(v25);
    uint64_t v36 = sub_10007C22C(v24, v25, v37);
    uint64_t v11 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v31, v21 + 12);
    unint64_t v26 = v25;
    uint64_t v9 = v32;
    swift_bridgeObjectRelease(v26);
    sub_100077CC0((uint64_t)v17, type metadata accessor for DewValue);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "cloud dew configuration: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    sub_100077CC0((uint64_t)v17, type metadata accessor for DewValue);
  }

  sub_1000E381C((uint64_t)v14);
  sub_100085CA8((uint64_t)v14, (uint64_t)v11, &qword_1002E03B8);
  sub_100077CC0((uint64_t)v14, type metadata accessor for ConfigurationValue);
  uint64_t v27 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v11, 1LL, v27) != 1)
  {
    sub_100085CA8((uint64_t)v11, (uint64_t)v9, &qword_1002E03B8);
    id v28 = (char *)&loc_100082498 + 4 * byte_1002480D0[swift_getEnumCaseMultiPayload(v9, v27)];
    __asm { BR              X10 }
  }

  return sub_100077CFC((uint64_t)v11, &qword_1002E03B8);
}

void DewConfiguration.init()()
{
}

id DewConfiguration.__deallocating_deinit()
{
  return sub_100082EC8(0LL, (uint64_t (*)(void))type metadata accessor for DewConfiguration);
}

id sub_100082730()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config, v3, 0LL, 0LL);
  return *v1;
}

void sub_100082774(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  void *v3 = a1;
}

id sub_1000827C4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_100084E78(a1);
  swift_unknownObjectRelease(a1);
  return v4;
}

id sub_100082804(uint64_t a1)
{
  id v2 = sub_100084E78(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t sub_100082874()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90LL))();
}

double sub_1000828D8()
{
  return sub_100082B58(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment);
}

uint64_t sub_1000828F0(double a1)
{
  return sub_100082AB4(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment, a1);
}

double sub_100082908()
{
  return sub_100082B58(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync);
}

uint64_t sub_100082920(double a1)
{
  return sub_100082AB4(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync, a1);
}

uint64_t sub_100082938()
{
  return sub_10008295C(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingURILimitConfig);
}

uint64_t sub_100082950()
{
  return sub_10008295C(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingSMTLimitConfig);
}

uint64_t sub_10008295C(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + *a1) + 200LL))(&v4);
  uint64_t result = v4;
  if (v4 < 0)
  {
    char v3 = 2;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v3,  3451LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1000829F0(char *a1, uint64_t a2, void *a3)
{
  void (*v3)(uint64_t *__return_ptr);
  char *v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  char v3 = *(void (**)(uint64_t *__return_ptr))(**(void **)&a1[*a3] + 200LL);
  uint64_t v4 = a1;
  v3(&v8);
  uint64_t v5 = v8;
  if (v8 < 0)
  {
    uint64_t v7 = 2;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v7,  3451LL,  0);
    __break(1u);
  }

  else
  {

    return v5;
  }

  return result;
}

double sub_100082A90()
{
  return sub_100082B58(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig);
}

uint64_t sub_100082AA8(double a1)
{
  return sub_100082AB4( &OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig,  a1);
}

uint64_t sub_100082AB4(void *a1, double a2)
{
  uint64_t v3 = *(void *)(v2 + *a1);
  double v5 = a2;
  return (*(uint64_t (**)(double *))(*(void *)v3 + 192LL))(&v5);
}

void sub_100082AFC(char *a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)&a1[*a4];
  double v7 = a2;
  double v5 = *(void (**)(double *))(*(void *)v4 + 192LL);
  uint64_t v6 = a1;
  v5(&v7);
}

double sub_100082B4C()
{
  return sub_100082B58(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_resetEnvLogClientNetworkTimeoutConfig);
}

double sub_100082B58(void *a1)
{
  (*(void (**)(double *__return_ptr))(**(void **)(v1 + *a1) + 200LL))(&v3);
  return v3;
}

double sub_100082BA0(char *a1, uint64_t a2, void *a3)
{
  void (*v3)(double *__return_ptr);
  char *v4;
  double v6;
  double v3 = *(void (**)(double *__return_ptr))(**(void **)&a1[*a3] + 200LL);
  uint64_t v4 = a1;
  v3(&v6);

  return v6;
}

uint64_t sub_100082BF0()
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v0
                                                              + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_fastWatchDogExit)
                                                + 200LL))(&v2);
  return v2;
}

uint64_t sub_100082C84()
{
  if (qword_1002E9A68 != -1) {
    swift_once(&qword_1002E9A68, sub_100080FD0);
  }
  return (*(uint64_t (**)(void))(*(void *)qword_1002E9A70 + 160LL))();
}

void sub_100082D40(uint64_t a1, uint64_t a2)
{
  double v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90LL))();
  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v5) + 0x80LL))(a1, a2);
}

void sub_100082E64()
{
}

id sub_100082EBC(uint64_t a1)
{
  return sub_100082EC8(a1, type metadata accessor for DewConfigurationObjectiveC);
}

id sub_100082EC8(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100082F90(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DewName(a2, a1);
}

double sub_100082FA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  objc_super v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100079A58(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *objc_super v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100083DFC();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100085C90((__int128 *)(*(void *)(v12 + 56) + 40 * v9), a3);
    sub_100083710(v9, v12);
    uint64_t v13 = *v4;
    *objc_super v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

Swift::Int sub_100083098(uint64_t a1, uint64_t a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E03E0);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    char v39 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }

      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v23 >= v38) {
          goto LABEL_36;
        }
        unint64_t v24 = v39[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_36;
          }
          unint64_t v24 = v39[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_36:
              swift_release(v5);
              double v3 = v2;
              if ((v41 & 1) != 0)
              {
                uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v39 = -1LL << v37;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v38) {
                  goto LABEL_36;
                }
                unint64_t v24 = v39[v14];
                ++v25;
                if (v24) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v25;
          }
        }

Swift::Int sub_1000833EC(uint64_t a1, uint64_t a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E03C8);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    uint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          double v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

unint64_t sub_100083710(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }

        else if (v15 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          unint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            _OWORD *v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          unint64_t v20 = v19 + 40 * v3;
          unint64_t v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            __int128 v9 = *v21;
            __int128 v10 = v21[1];
            *(void *)(v20 + 32) = *((void *)v21 + 4);
            *(_OWORD *)unint64_t v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            int64_t v3 = v6;
          }
        }

uint64_t sub_1000838F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100083C0C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      return sub_100085CEC(a1, v18[7] + 56 * v12);
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1LL << v12;
    int64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *int64_t v22 = a2;
    v22[1] = a3;
    uint64_t v23 = v18[7] + 56 * v12;
    __int128 v24 = *(_OWORD *)a1;
    __int128 v25 = *(_OWORD *)(a1 + 16);
    __int128 v26 = *(_OWORD *)(a1 + 32);
    *(void *)(v23 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 48);
    *(_OWORD *)(v23 + 16) = v25;
    *(_OWORD *)(v23 + 32) = v26;
    *(_OWORD *)uint64_t v23 = v24;
    uint64_t v27 = v18[2];
    BOOL v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      v18[2] = v29;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_100083098(v15, a4 & 1);
  unint64_t v20 = sub_100079A58(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      return sub_100085CEC(a1, v18[7] + 56 * v12);
    }
    goto LABEL_11;
  }

uint64_t sub_100083A6C(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 40 * v12);
        sub_10007EAFC(v19);
        return sub_100085C90(a1, (uint64_t)v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100083DFC();
      goto LABEL_7;
    }

    sub_1000833EC(v15, a4 & 1);
    unint64_t v21 = sub_100079A58(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100083BA0(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100083BA0(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100085C90(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100083C0C()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E03E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v30 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

      if (v25)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        __int128 v28 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t v27 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v28 >= v27 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1LL);
        }
        uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
        specialized Array._endMutation()(v6);
      }

      ++v5;
      if (v9 == v4) {
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_34:
    if (a1 < 0) {
      int64_t v30 = a1;
    }
    else {
      int64_t v30 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v30);
  }

  __break(1u);
  return result;
}

    uint64_t v29 = (v40 - 1) & v40;
    uint64_t v33 = __clz(__rbit64(v40)) + (v31 << 6);
LABEL_9:
    uint64_t v34 = (uint64_t *)(*(void *)(a9 + 48) + 16 * v33);
    uint64_t v35 = *v34;
    int64_t v36 = v34[1];
    uint64_t v37 = *(void **)(*(void *)(a9 + 56) + 8 * v33);
    sub_100072B9C(*v34, v36);
    char v38 = v37;
    sub_10006DB20(v20);
    sub_100072B9C(v35, v36);
    sub_100072BE0(*(void *)v20, *((void *)v20 + 1));
    *(void *)uint64_t v20 = v35;
    *((void *)v20 + 1) = v36;
    sub_1000AE0E4(v38, v17);
    sub_10006D6C8((uint64_t)v17);
    sub_100077CC0((uint64_t)v20, type metadata accessor for IDSFailingDevice);
    sub_100072BE0(v35, v36);
  }

  char v41 = v39 + 5;
  if (v41 >= v30)
  {
LABEL_29:
    swift_release(a9);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = swift_bridgeObjectRelease(v52[8]);
    *(void *)(v42 + 64) = _swiftEmptyArrayStorage;
    __int128 v44 = v48;
    BinaryEncodingOptions.init()(v43);
    unint64_t v45 = sub_1000AF898();
    Message.serializedBytes<A>(partial:options:)( &v53,  0LL,  v44,  v47,  &type metadata for Data,  v45,  &protocol witness table for Data);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v50);
    sub_100077CC0(v42, type metadata accessor for SASTTR);
    return;
  }

  uint64_t v40 = *((void *)v54 + v41);
  if (v40)
  {
    unint64_t v31 = v41;
    goto LABEL_28;
  }

  while (1)
  {
    unint64_t v31 = v41 + 1;
    if (__OFADD__(v41, 1LL)) {
      break;
    }
    if (v31 >= v30) {
      goto LABEL_29;
    }
    uint64_t v40 = *((void *)v54 + v31);
    ++v41;
    if (v40) {
      goto LABEL_28;
    }
  }

  __break(1u);
}

  __break(1u);
}

    swift_release(v30);
    return;
  }

  __break(1u);
LABEL_30:
  __break(1u);
}

    swift_once(&qword_1002EB080, sub_1000B9B18);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[KTApplicationPublicKeyStore keyBag](self, "keyBag"));
  char v41 = (void *)objc_claimAutoreleasedReturnValue([v40 tltKeyStore]);
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 signatureVerifier]);
  uint64_t v43 = [v42 needsRefresh];

  if (v43)
  {
    if (qword_1002EECE0 != -1) {
      dispatch_once(&qword_1002EECE0, &stru_100287310);
    }
    __int128 v44 = (void *)qword_1002EECE8;
    uint64_t v24 = 0;
    if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v45 = v44;
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[KTApplicationPublicKeyStore application](self, "application"));
      id v49 = 138412290;
      uint64_t v50 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Trusted TLT signing keys need refresh: %@",  (uint8_t *)&v49,  0xCu);

      uint64_t v24 = 0;
    }
  }

  if ((v24 & 1) == 0 && v3)
  {
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[KTApplicationPublicKeyStore delegate](self, "delegate"));
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[KTApplicationPublicKeyStore application](self, "application"));
    [v47 storeNeedsUpdate:v48];

    return 0;
  }

  return v24;
}

      uint64_t v16 = (char *)v16 + 1;
    }

    while (v14 != v16);
    uint64_t v37 = [v12 countByEnumeratingWithState:&v41 objects:v45 count:16];
    unint64_t v14 = v37;
  }

  while (v37);
LABEL_33:

  return v6;
}

void *sub_100083DFC()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E03C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_100083FE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10008446C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int sub_100084190(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100072CC4(&qword_1002E03C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_10008446C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100084190(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_100084604();
      goto LABEL_22;
    }

    sub_1000847B4(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_100084604()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E03C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1000847B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100072CC4(&qword_1002E03C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

char *sub_100084A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (char *)v7;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a4;
  int64_t v32 = a5;
  uint64_t v28 = a3;
  uint64_t v11 = *(void *)(*v7 + 80LL);
  uint64_t v12 = *(void *)(*v7 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v12,  v11,  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v16 = (char *)&v28 - v15;
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  swift_bridgeObjectRetain(a2);
  uint64_t v18 = v17(v11, v12);
  uint64_t v33 = a1;
  _DWORD v7[2] = a1;
  unint64_t v19 = v7 + 2;
  uint64_t v20 = v29;
  v7[3] = a2;
  void v7[4] = v20;
  uint64_t v21 = v28;
  void v7[5] = v30;
  v7[6] = v21;
  v7[7] = v18;
  v7[8] = v22;
  void v7[9] = v21;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))( &v8[*(void *)(*(void *)v8 + 112LL)],  v16,  AssociatedTypeWitness);
  *(void *)((char *)v7 + *(void *)(*v7 + 120LL)) = 0LL;
  uint64_t v23 = v32;
  *(void *)((char *)v7 + *(void *)(*v7 + 128LL)) = v32;
  uint64_t v24 = qword_1002E9A68;
  id v25 = v23;
  if (v24 != -1) {
    swift_once(&qword_1002E9A68, sub_100080FD0);
  }
  __int128 v26 = *((_OWORD *)v8 + 2);
  v34[0] = *v19;
  v34[1] = v26;
  v34[2] = *((_OWORD *)v8 + 3);
  uint64_t v35 = *((void *)v8 + 8);
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)qword_1002E9A70 + 152LL))(v33, a2, v34);
  return v8;
}

void *sub_100084C04(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void *sub_100084C28(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t *sub_100084C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = *v7;
  uint64_t v16 = *(void *)(*v7 + 80);
  uint64_t v17 = *(void *)(*(void *)(v15 + 88) + 8LL);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 24);
  swift_bridgeObjectRetain(a2);
  uint64_t v19 = v18(v16, v17);
  uint64_t v28 = v8;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v20 = v8 + 2;
  v20[2] = a6;
  v20[3] = a7;
  void v20[4] = a3;
  v20[5] = v19;
  v20[6] = v21;
  v20[7] = a3;
  v20[8] = a4;
  v20[9] = 0LL;
  v20[10] = (uint64_t)a5;
  uint64_t v22 = qword_1002E9A68;
  id v23 = a5;
  if (v22 != -1) {
    swift_once(&qword_1002E9A68, sub_100080FD0);
  }
  __int128 v24 = *((_OWORD *)v20 + 1);
  v29[0] = *(_OWORD *)v20;
  v29[1] = v24;
  v29[2] = *((_OWORD *)v20 + 2);
  uint64_t v30 = v20[6];
  id v25 = *(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)qword_1002E9A70 + 152LL);
  sub_100080804(v29);
  v25(a1, a2, v29);

  sub_100085C48(v29);
  return v28;
}

uint64_t type metadata accessor for DewGlobalOverrides()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd18DewGlobalOverrides);
}

uint64_t type metadata accessor for DewConfiguration(uint64_t a1)
{
  uint64_t result = qword_1002E9B78;
  if (!qword_1002E9B78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DewConfiguration);
  }
  return result;
}

uint64_t sub_100084DE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100083FE4(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

id sub_100084E78(uint64_t a1)
{
  uint64_t v3 = objc_allocWithZone((Class)type metadata accessor for DewConfiguration(0LL));
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v5 = type metadata accessor for DewGlobalOverrides();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  swift_unknownObjectRetain(a1);
  uint64_t v7 = v1;
  *(void *)(v6 + 16) = sub_100080310((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v6 + 24) = 0LL;
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v6, a1);
  swift_deallocPartialClassInstance( v3,  ObjectType,  *(unsigned int *)((swift_isaMask & *v3) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v3) + 0x34LL));
  uint64_t v9 = v7;
  unint64_t v10 = (void **)&v7[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config];
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config] = v8;
  uint64_t v63 = sub_100072CC4(&qword_1002E03A0);
  uint64_t v11 = (void *)swift_allocObject(v63, 104LL, 7LL);
  uint64_t v12 = qword_1002E9A48;
  id v13 = v8;
  if (v12 != -1) {
    swift_once(&qword_1002E9A48, sub_10007F004);
  }
  swift_beginAccess(&qword_1002EF170, v68, 0LL, 0LL);
  uint64_t v14 = qword_1002EF170;
  uint64_t v15 = *(void *)algn_1002EF178;
  __int128 v11[2] = 0xD000000000000026LL;
  v11[3] = 0x800000010020F040LL;
  void v11[4] = 0xD000000000000090LL;
  v11[5] = 0x800000010020F070LL;
  v11[6] = 0LL;
  v11[7] = v14;
  uint8_t v11[8] = v15;
  v11[9] = 0LL;
  v11[10] = 0x4024000000000000LL;
  v11[11] = 0LL;
  v11[12] = v13;
  uint64_t v16 = qword_1002E9A68;
  id v17 = v13;
  swift_bridgeObjectRetain(v15);
  if (v16 != -1) {
    swift_once(&qword_1002E9A68, sub_100080FD0);
  }
  __int128 v18 = *((_OWORD *)v11 + 2);
  v93[0] = *((_OWORD *)v11 + 1);
  v93[1] = v18;
  v93[2] = *((_OWORD *)v11 + 3);
  uint64_t v94 = v11[8];
  (*(void (**)(unint64_t, unint64_t, _OWORD *))(*(void *)qword_1002E9A70 + 152LL))( 0xD000000000000026LL,  0x800000010020F040LL,  v93);

  *(void *)&v9[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment] = v11;
  swift_beginAccess(v10, v67, 0LL, 0LL);
  uint64_t v19 = *v10;
  uint64_t v20 = swift_allocObject(v63, 104LL, 7LL);
  uint64_t v21 = *(void *)algn_1002EF178;
  *(void *)&__int128 v89 = 0xD00000000000001ALL;
  *((void *)&v89 + 1) = 0x800000010020F110LL;
  *(void *)&__int128 v90 = 0xD000000000000089LL;
  *((void *)&v90 + 1) = 0x800000010020F130LL;
  *(void *)&__int128 v91 = 1LL;
  *((void *)&v91 + 1) = qword_1002EF170;
  uint64_t v92 = *(void *)algn_1002EF178;
  __int128 v22 = v90;
  *(_OWORD *)(v20 + 16) = v89;
  *(_OWORD *)(v20 + 32) = v22;
  *(_OWORD *)(v20 + 4_Block_object_dispose(va, 8) = v91;
  *(void *)(v20 + 64) = v21;
  *(void *)(v20 + 72) = 1LL;
  *(void *)(v20 + 80) = 0x4024000000000000LL;
  *(void *)(v20 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v20 + 96) = v19;
  id v23 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v24 = v19;
  swift_bridgeObjectRetain(v21);
  v23(0xD00000000000001ALL, 0x800000010020F110LL, &v89);

  uint64_t v62 = v9;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync] = v20;
  id v25 = *v10;
  uint64_t v26 = sub_100072CC4(&qword_1002E03A8);
  uint64_t v27 = swift_allocObject(v26, 104LL, 7LL);
  uint64_t v28 = qword_1002E9A40;
  id v29 = v25;
  if (v28 != -1) {
    swift_once(&qword_1002E9A40, sub_10007EE24);
  }
  swift_beginAccess(&qword_1002EF160, v66, 0LL, 0LL);
  uint64_t v30 = *(void *)algn_1002EF168;
  *(void *)&__int128 v85 = 0xD000000000000019LL;
  *((void *)&v85 + 1) = 0x800000010020F1C0LL;
  *(void *)&__int128 v86 = 0xD00000000000003CLL;
  *((void *)&v86 + 1) = 0x800000010020F1E0LL;
  *(void *)&__int128 v87 = 1LL;
  *((void *)&v87 + 1) = qword_1002EF160;
  uint64_t v88 = *(void *)algn_1002EF168;
  *(void *)(v27 + 64) = *(void *)algn_1002EF168;
  __int128 v31 = v86;
  *(_OWORD *)(v27 + 16) = v85;
  *(_OWORD *)(v27 + 32) = v31;
  *(_OWORD *)(v27 + 4_Block_object_dispose(va, 8) = v87;
  *(_OWORD *)(v27 + 72) = xmmword_1002480C0;
  *(void *)(v27 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v27 + 96) = v29;
  int64_t v32 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v33 = v29;
  swift_bridgeObjectRetain(v30);
  v32(0xD000000000000019LL, 0x800000010020F1C0LL, &v85);

  *(void *)&v9[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingURILimitConfig] = v27;
  uint64_t v34 = *v10;
  uint64_t v35 = swift_allocObject(v26, 104LL, 7LL);
  uint64_t v36 = *(void *)algn_1002EF168;
  *(void *)&__int128 v81 = 0xD000000000000019LL;
  *((void *)&v81 + 1) = 0x800000010020F220LL;
  *(void *)&__int128 v82 = 0xD00000000000003CLL;
  *((void *)&v82 + 1) = 0x800000010020F240LL;
  *(void *)&__int128 v83 = 1LL;
  *((void *)&v83 + 1) = qword_1002EF160;
  uint64_t v84 = *(void *)algn_1002EF168;
  *(void *)(v35 + 64) = *(void *)algn_1002EF168;
  __int128 v37 = v82;
  *(_OWORD *)(v35 + 16) = v81;
  *(_OWORD *)(v35 + 32) = v37;
  *(_OWORD *)(v35 + 4_Block_object_dispose(va, 8) = v83;
  *(_OWORD *)(v35 + 72) = xmmword_1002480C0;
  *(void *)(v35 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v35 + 96) = v34;
  char v38 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v39 = v34;
  swift_bridgeObjectRetain(v36);
  v38(0xD000000000000019LL, 0x800000010020F220LL, &v81);

  *(void *)&v62[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingSMTLimitConfig] = v35;
  uint64_t v40 = *v10;
  uint64_t v41 = swift_allocObject(v63, 104LL, 7LL);
  uint64_t v42 = *(void *)algn_1002EF178;
  *(void *)&__int128 v77 = 0xD00000000000001ALL;
  *((void *)&v77 + 1) = 0x800000010020F110LL;
  *(void *)&__int128 v78 = 0xD000000000000089LL;
  *((void *)&v78 + 1) = 0x800000010020F130LL;
  *(void *)&__int128 v79 = 1LL;
  *((void *)&v79 + 1) = qword_1002EF170;
  uint64_t v80 = *(void *)algn_1002EF178;
  __int128 v43 = v78;
  *(_OWORD *)(v41 + 16) = v77;
  *(_OWORD *)(v41 + 32) = v43;
  *(_OWORD *)(v41 + 4_Block_object_dispose(va, 8) = v79;
  *(void *)(v41 + 64) = v42;
  *(void *)(v41 + 72) = 1LL;
  *(void *)(v41 + 80) = 0x4024000000000000LL;
  *(void *)(v41 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v41 + 96) = v40;
  __int128 v44 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v45 = v40;
  swift_bridgeObjectRetain(v42);
  v44(0xD00000000000001ALL, 0x800000010020F110LL, &v77);

  *(void *)&v62[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig] = v41;
  uint64_t v46 = *v10;
  uint64_t v47 = swift_allocObject(v63, 104LL, 7LL);
  uint64_t v48 = *(void *)algn_1002EF178;
  *(void *)&__int128 v73 = 0xD000000000000021LL;
  *((void *)&v73 + 1) = 0x800000010020F280LL;
  *(void *)&__int128 v74 = 0xD000000000000046LL;
  *((void *)&v74 + 1) = 0x800000010020F2B0LL;
  *(void *)&__int128 v75 = 1LL;
  *((void *)&v75 + 1) = qword_1002EF170;
  uint64_t v76 = *(void *)algn_1002EF178;
  __int128 v49 = v74;
  *(_OWORD *)(v47 + 16) = v73;
  *(_OWORD *)(v47 + 32) = v49;
  *(_OWORD *)(v47 + 4_Block_object_dispose(va, 8) = v75;
  *(void *)(v47 + 64) = v48;
  *(void *)(v47 + 72) = 1LL;
  *(void *)(v47 + 80) = 0x403E000000000000LL;
  *(void *)(v47 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v47 + 96) = v46;
  uint64_t v50 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v51 = v46;
  swift_bridgeObjectRetain(v48);
  v50(0xD000000000000021LL, 0x800000010020F280LL, &v73);

  *(void *)&v62[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_resetEnvLogClientNetworkTimeoutConfig] = v47;
  uint64_t v52 = *v10;
  uint64_t v53 = sub_100072CC4(&qword_1002E03B0);
  uint64_t v54 = swift_allocObject(v53, 104LL, 7LL);
  uint64_t v55 = qword_1002E9A58;
  id v56 = v52;
  if (v55 != -1) {
    swift_once(&qword_1002E9A58, sub_10007F490);
  }
  swift_beginAccess(&qword_1002EF190, v65, 0LL, 0LL);
  uint64_t v57 = *(void *)algn_1002EF198;
  *(void *)&__int128 v69 = 0xD000000000000012LL;
  *((void *)&v69 + 1) = 0x800000010020F300LL;
  *(void *)&__int128 v70 = 0xD00000000000002DLL;
  *((void *)&v70 + 1) = 0x800000010020F320LL;
  *(void *)&__int128 v71 = 1LL;
  *((void *)&v71 + 1) = qword_1002EF190;
  uint64_t v72 = *(void *)algn_1002EF198;
  __int128 v58 = v70;
  *(_OWORD *)(v54 + 16) = v69;
  *(_OWORD *)(v54 + 32) = v58;
  *(_OWORD *)(v54 + 4_Block_object_dispose(va, 8) = v71;
  *(void *)(v54 + 64) = v57;
  *(void *)(v54 + 72) = 1LL;
  *(_BYTE *)(v54 + 80) = 1;
  *(void *)(v54 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v54 + 96) = v56;
  uint64_t v59 = *(void (**)(unint64_t, unint64_t, __int128 *))(*(void *)qword_1002E9A70 + 152LL);
  id v60 = v56;
  swift_bridgeObjectRetain(v57);
  v59(0xD000000000000012LL, 0x800000010020F300LL, &v69);

  *(void *)&v62[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_fastWatchDogExit] = v54;
  v64.receiver = v62;
  v64.super_class = (Class)type metadata accessor for DewConfigurationObjectiveC();
  return objc_msgSendSuper2(&v64, "init");
}

uint64_t type metadata accessor for DewConfigurationObjectiveC()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd26DewConfigurationObjectiveC);
}

void *sub_10008564C()
{
  return &protocol witness table for String;
}

uint64_t type metadata accessor for DewTypeInt64()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd12DewTypeInt64);
}

uint64_t type metadata accessor for DewTypeTimeInterval()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd19DewTypeTimeInterval);
}

uint64_t type metadata accessor for DewTypeString()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd13DewTypeString);
}

uint64_t type metadata accessor for DewTypeBool()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd11DewTypeBool);
}

uint64_t type metadata accessor for DewTypeStrings()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd14DewTypeStrings);
}

uint64_t type metadata accessor for DewConfigurationTimeInterval()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd28DewConfigurationTimeInterval);
}

uint64_t type metadata accessor for DewConfigurationInt()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd19DewConfigurationInt);
}

uint64_t type metadata accessor for DewConfigurationString()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd22DewConfigurationString);
}

uint64_t type metadata accessor for DewConfigurationBool()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd20DewConfigurationBool);
}

uint64_t initializeBufferWithCopyOfBuffer for DewName(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for DewName(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for DewName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DewName(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DewName(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DewName(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DewName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DewName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DewName()
{
  return &type metadata for DewName;
}

uint64_t type metadata accessor for DewGlobalState()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd14DewGlobalState);
}

uint64_t sub_100085A08(uint64_t a1)
{
  v4[0] = "8";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = swift_getAssociatedTypeWitness( 319LL,  *(void *)(a1 + 88),  *(void *)(a1 + 80),  &protocol descriptor for DewConfigurationBaseTypeProtocol.NumRequirements,  &unk_100264160);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for DewConfigurationObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100085CFC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DewConfigurationObject);
}

uint64_t sub_100085ABC(uint64_t a1)
{
  v2[0] = "8";
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 5LL, v2, a1 + 96);
}

uint64_t type metadata accessor for DewMatchObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100085CFC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DewMatchObject);
}

uint64_t sub_100085B34()
{
  return type metadata accessor for DewConfiguration(0LL);
}

uint64_t sub_100085B3C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_100248458;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100085BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DewValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100085C04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void *sub_100085C48(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100085C90(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100085CA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100072CC4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100085CEC(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DewName(a2, a1);
}

uint64_t sub_100085CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _DWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100085D58()
{
  uint64_t v1 = *(void *)v0;
  sub_10007EB54(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_100085D88()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10007EB54(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100085DB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CloudDeviceData(0LL) + 24);
  return sub_100085DFC(v3, a1);
}

uint64_t type metadata accessor for CloudDeviceData(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002E9CC0, (uint64_t)&nominal type descriptor for CloudDeviceData);
}

uint64_t sub_100085DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100085E44()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0LL) + 28));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100085E80()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0LL) + 32));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100085EBC()
{
  uint64_t v1 = type metadata accessor for CloudDeviceData(0LL);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 36)));
}

uint64_t sub_100085EDC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0LL) + 40));
}

uint64_t sub_100085EFC(char a1)
{
  return *(void *)&aPushtokedata[8 * a1];
}

BOOL sub_100085F1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100085F30()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100085F74()
{
}

Swift::Int sub_100085F9C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100085FDC()
{
  return sub_100085EFC(*v0);
}

uint64_t sub_100085FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10008FA00(a1, a2);
  *a3 = result;
  return result;
}

void sub_100086008(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100086014(uint64_t a1)
{
  unint64_t v2 = sub_100086308();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008603C(uint64_t a1)
{
  unint64_t v2 = sub_100086308();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100086064(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100072CC4(&qword_1002E03E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100084C04(a1, v9);
  unint64_t v11 = sub_100086308();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CloudDeviceData.CodingKeys,  &type metadata for CloudDeviceData.CodingKeys,  v11,  v9,  v10);
  __int128 v29 = *v3;
  char v28 = 0;
  unint64_t v12 = sub_10008634C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v12);
  if (!v2)
  {
    __int128 v29 = v3[1];
    char v28 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v12);
    id v13 = (int *)type metadata accessor for CloudDeviceData(0LL);
    uint64_t v14 = (char *)v3 + v13[6];
    LOBYTE(v29) = 2;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = sub_100073FE0( &qword_1002E0A90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    id v17 = (uint64_t *)((char *)v3 + v13[7]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v29, v5);
    uint64_t v20 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    *(void *)&__int128 v29 = *(void *)((char *)v3 + v13[9]);
    char v28 = 5;
    uint64_t v23 = sub_100072CC4((uint64_t *)&unk_1002E0400);
    uint64_t v24 = sub_1000868CC( (unint64_t *)&unk_1002E16B0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, v23, v24);
    uint64_t v25 = *((unsigned __int8 *)v3 + v13[10]);
    LOBYTE(v29) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v29, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100086308()
{
  unint64_t result = qword_1002E9BB0[0];
  if (!qword_1002E9BB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1002486C4, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, qword_1002E9BB0);
  }

  return result;
}

unint64_t sub_10008634C()
{
  unint64_t result = qword_1002E03F0;
  if (!qword_1002E03F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002E03F0);
  }

  return result;
}

uint64_t sub_100086390@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = sub_100072CC4(&qword_1002E0410);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (int *)type metadata accessor for CloudDeviceData(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  __int128 v31 = a1;
  sub_100084C04(a1, v11);
  unint64_t v12 = sub_100086308();
  uint64_t v13 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CloudDeviceData.CodingKeys,  &type metadata for CloudDeviceData.CodingKeys,  v12,  v11,  v10);
  if (v13) {
    return sub_10007EAFC(v31);
  }
  uint64_t v32 = v6;
  uint64_t v14 = v9;
  char v34 = 0;
  unint64_t v15 = sub_100086840();
  uint64_t v16 = v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v33,  &type metadata for Data,  &v34,  v30,  &type metadata for Data,  v15);
  *uint64_t v14 = v33;
  char v34 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v33,  &type metadata for Data,  &v34,  v16,  &type metadata for Data,  v15);
  v14[1] = v33;
  uint64_t v17 = type metadata accessor for Date(0LL);
  LOBYTE(v33) = 2;
  uint64_t v18 = sub_100073FE0( (unint64_t *)&unk_1002E0420,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v17, &v33, v16, v17, v18);
  sub_100086884((uint64_t)v5, (uint64_t)v14 + v7[6]);
  LOBYTE(v33) = 3;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  uint64_t v20 = (uint64_t *)((char *)v14 + v7[7]);
  uint64_t *v20 = v19;
  v20[1] = v21;
  LOBYTE(v33) = 4;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  uint64_t v23 = v32;
  uint64_t v24 = (uint64_t *)((char *)v14 + v7[8]);
  *uint64_t v24 = v22;
  v24[1] = v25;
  uint64_t v26 = sub_100072CC4((uint64_t *)&unk_1002E0400);
  char v34 = 5;
  uint64_t v27 = sub_1000868CC( (unint64_t *)&unk_1002E18E0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, v26, &v34, v16, v26, v27);
  *(void *)((char *)v14 + v7[9]) = v33;
  LOBYTE(v33) = 6;
  LOBYTE(v26) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  (*(void (**)(void, uint64_t))(v23 + 8))(0LL, v16);
  *((_BYTE *)v14 + v7[10]) = v26;
  sub_10008692C((uint64_t)v14, v29);
  sub_10007EAFC(v31);
  return sub_100086970((uint64_t)v14);
}

unint64_t sub_100086840()
{
  unint64_t result = qword_1002E0418;
  if (!qword_1002E0418)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002E0418);
  }

  return result;
}

uint64_t sub_100086884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000868CC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10007426C((uint64_t *)&unk_1002E0400);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10008692C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudDeviceData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086970(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudDeviceData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000869AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v17 = (int *)type metadata accessor for CloudDeviceData(0LL);
  uint64_t result = sub_100086884(a5, (uint64_t)a9 + v17[6]);
  uint64_t v19 = (void *)((char *)a9 + v17[7]);
  void *v19 = a6;
  v19[1] = a7;
  uint64_t v20 = (void *)((char *)a9 + v17[8]);
  void *v20 = a8;
  v20[1] = a10;
  *(void *)((char *)a9 + v17[9]) = a11;
  *((_BYTE *)a9 + v17[10]) = a12;
  return result;
}

uint64_t sub_100086A4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100086390(a1, a2);
}

uint64_t sub_100086A60(void *a1)
{
  return sub_100086064(a1);
}

uint64_t sub_100086A74()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002E9B98);
  sub_100072DEC(v0, (uint64_t)qword_1002E9B98);
  return Logger.init(transparencyCategory:)(0x76656464756F6C63LL, 0xEB00000000656369LL);
}

uint64_t sub_100086AD8()
{
  return 0x76654464756F6C43LL;
}

id sub_100086AF8()
{
  return *(id *)(v0 + 32);
}

void sub_100086B28(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

id sub_100086B6C()
{
  return *(id *)(v0 + 40);
}

uint64_t sub_100086B74()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 48));
}

uint64_t sub_100086B7C()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 56);
}

uint64_t sub_100086BBC(uint64_t a1)
{
  uint64_t v3 = v1 + 56;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_100086C0C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = v1;
  swift_beginAccess(v1 + 56, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 56);
  return sub_100086C74;
}

void sub_100086C74(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_unknownObjectWeakAssign(*(void *)(*(void *)a1 + 32LL) + 56LL, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

void *sub_100086CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject(v4, 72LL, 7LL);
  v9[2] = 0x76654464756F6C43LL;
  v9[3] = 0xEB00000000656369LL;
  uint64_t v10 = swift_unknownObjectWeakInit(v9 + 7, 0LL);
  v9[8] = 0x404B800000000000LL;
  void v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  swift_beginAccess(v10, v12, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v9 + 7, a4);
  swift_unknownObjectRelease(a4);
  return v9;
}

void *sub_100086DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = 0x76654464756F6C43LL;
  void v4[3] = 0xEB00000000656369LL;
  uint64_t v9 = swift_unknownObjectWeakInit(v4 + 7, 0LL);
  v4[8] = 0x404B800000000000LL;
  void v4[4] = a1;
  void v4[5] = a2;
  v4[6] = a3;
  swift_beginAccess(v9, v11, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v4 + 7, a4);
  swift_unknownObjectRelease(a4);
  return v4;
}

double sub_100086E4C()
{
  return 55.0;
}

double sub_100086E5C()
{
  return *(double *)(v0 + 64);
}

uint64_t sub_100086E8C(double a1)
{
  uint64_t result = swift_beginAccess(v1 + 64, v4, 1LL, 0LL);
  *(double *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_100086EC8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100086F04()
{
  double v1 = (*(double (**)(void))(*(void *)v0 + 208LL))();
  return Date.addingTimeInterval(_:)(v1 * 24.0 * 3600.0);
}

uint64_t sub_100086F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - v13;
  sub_100085DFC(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_100077CFC((uint64_t)v7, (uint64_t *)&unk_1002DF740);
    char v15 = 1;
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    double v17 = (*(double (**)(uint64_t))(*(void *)v2 + 208LL))(v16);
    Date.addingTimeInterval(_:)(v17 * -2.0 / 3.0 * 24.0 * 3600.0);
    char v15 = static Date.< infix(_:_:)(v12, a2);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }

  return v15 & 1;
}

uint64_t sub_1000870E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v5 + 304LL))();
  if (result)
  {
    unint64_t v12 = (void *)result;
    if (qword_1002E9B90 != -1) {
      swift_once(&qword_1002E9B90, sub_100086A74);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v13, (uint64_t)qword_1002E9B98);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    id v15 = v12;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    if (os_log_type_enabled(v16, v14))
    {
      unint64_t v36 = a2;
      id v38 = (id)a3;
      double v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v34;
      *(_DWORD *)double v17 = 136315138;
      id v18 = [v15 recordName];
      uint64_t v19 = v15;
      uint64_t v20 = a5;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v35 = v6;
      uint64_t v22 = a1;
      unint64_t v24 = v23;

      a2 = v36;
      uint64_t v25 = v21;
      a5 = v20;
      id v15 = v19;
      uint64_t v41 = sub_10007C22C(v25, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, aBlock, v17 + 4, v17 + 12);

      unint64_t v26 = v24;
      a1 = v22;
      uint64_t v6 = v35;
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v14, "updating record %s", v17, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      uint64_t v27 = v17;
      a3 = (uint64_t)v38;
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
    }

    id v39 = (id)(*(uint64_t (**)(void))(*(void *)v6 + 152LL))();
    char v28 = (void *)swift_allocObject(&unk_10027DD88, 72LL, 7LL);
    _OWORD v28[2] = v15;
    v28[3] = v6;
    void v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a4;
    v28[8] = a5;
    uint64_t v29 = swift_allocObject(&unk_10027DDB0, 32LL, 7LL);
    *(void *)(v29 + 16) = sub_100087F24;
    *(void *)(v29 + 24) = v28;
    aBlock[4] = (uint64_t)sub_1000807AC;
    uint64_t v43 = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000807CC;
    aBlock[3] = (uint64_t)&unk_10027DDC8;
    uint64_t v30 = _Block_copy(aBlock);
    __int128 v31 = v15;
    uint64_t v32 = v30;
    uint64_t v33 = v43;
    id v37 = v31;
    swift_retain(v6);
    sub_100072B9C(a1, a2);
    sub_100072B9C(a3, a4);
    swift_bridgeObjectRetain(a5);
    swift_retain(v29);
    swift_release(v33);
    [v39 performBlockAndWait:v32];

    _Block_release(v32);
    LOBYTE(v32) = swift_isEscapingClosureAtFileLocation(v29, "", 120LL, 105LL, 32LL, 1LL);
    swift_release(v28);
    uint64_t result = swift_release(v29);
  }

  return result;
}

void sub_100087464(void *a1, void *a2, uint64_t a3, uint8_t *a4, uint8_t *a5, void *a6, void *a7)
{
  uint64_t v113 = a7;
  unsigned int v110 = a5;
  v111 = a6;
  uint64_t v108 = a3;
  unsigned int v109 = a4;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  v116 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v117 = (char *)&v105 - v13;
  uint64_t v14 = type metadata accessor for String.Encoding(0LL);
  uint64_t v114 = *(void *)(v14 - 8);
  uint64_t v115 = v14;
  __chkstk_darwin(v14);
  v112 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v16 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1002464F0;
  id v19 = [a1 recordName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000914E8();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  id v23 = (id)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v18);
  [v16 setPredicate:v23];

  id v121 = 0LL;
  id v24 = [v16 execute:&v121];
  id v25 = v121;
  uint64_t v118 = v10;
  if (v24)
  {
    unint64_t v26 = v24;
    uint64_t v27 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);
    id v29 = v25;

    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        id v23 = (id)v28;
      }
      else {
        id v23 = (id)(v28 & 0xFFFFFFFFFFFFFF8LL);
      }
      swift_bridgeObjectRetain(v28);
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v28);
      if (v52)
      {
LABEL_4:
        if ((v28 & 0xC000000000000001LL) != 0)
        {
          id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v28);
        }

        else
        {
          if (!*(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            goto LABEL_40;
          }

          id v30 = *(id *)(v28 + 32);
        }

        id v23 = v30;
        swift_bridgeObjectRelease(v28);
        if (qword_1002E9B90 == -1)
        {
LABEL_8:
          uint64_t v31 = type metadata accessor for Logger(0LL);
          sub_100072DEC(v31, (uint64_t)qword_1002E9B98);
          id v32 = a1;
          Class v33 = (Class)Logger.logObject.getter(v32);
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled((os_log_t)v33, v34))
          {

            NSString v49 = (NSString)a2[6];
            if (v49)
            {
LABEL_28:
              id v74 = v23;
              id v75 = [v49 osVersion];
              static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
              uint64_t v77 = v76;

              NSString v51 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v77);
LABEL_29:
              [v23 setOsVersion:v51];

              if (v49)
              {
                id v78 = [v49 serialNumber];
                NSString v49 = v78;
                if (v78)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
                  uint64_t v80 = v79;

                  NSString v49 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v80);
                }
              }

              [v23 setSerialNumber:v49];

              sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
              Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
              [v23 setInjected:isa];

              Class v82 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
              [v23 setLocal:v82];

              id v121 = v113;
              uint64_t v83 = sub_100072CC4((uint64_t *)&unk_1002E0400);
              unint64_t v84 = sub_10008EAC4();
              uint64_t v85 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v83, v84);
              uint64_t v87 = v86;
              uint64_t v88 = v112;
              static String.Encoding.utf8.getter();
              uint64_t v89 = String.data(using:allowLossyConversion:)(v88, 0LL, v85, v87);
              unint64_t v91 = v90;
              swift_bridgeObjectRelease(v87);
              (*(void (**)(char *, uint64_t))(v114 + 8))(v88, v115);
              Class v92 = 0LL;
              if (v91 >> 60 != 15)
              {
                Class v92 = Data._bridgeToObjectiveC()().super.isa;
                sub_10007EB9C(v89, v91);
              }

              [v23 setApplications:v92];

              NSString v93 = String._bridgeToObjectiveC()();
              [v23 setCkstate:v93];

              uint64_t v94 = v116;
              Date.init()(v95);
              id v96 = v117;
              (*(void (**)(char *))(*a2 + 232LL))(v94);
              id v97 = *(void (**)(char *, uint64_t))(v118 + 8);
              v97(v94, v9);
              Class v98 = Date._bridgeToObjectiveC()().super.isa;
              v97(v96, v9);
              [v23 setTimeToLive:v98];

              __int128 v99 = (void *)(*(uint64_t (**)(void))(*a2 + 152LL))();
              id v121 = 0LL;
              LODWORD(v97) = [v99 save:&v121];

              id v100 = v121;
              if ((_DWORD)v97)
              {
                id v101 = v121;
              }

              else
              {
                id v102 = v121;
                uint64_t v103 = _convertNSErrorToError(_:)(v100);

                swift_willThrow(v104);
                swift_errorRelease(v103);
                id v16 = v23;
              }

              goto LABEL_37;
            }

LABEL_37:
}

  __break(1u);
}

uint64_t sub_100087EE0()
{
  swift_release(*(void *)(v0 + 24));
  sub_100072BE0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100072BE0(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100087F24()
{
}

uint64_t sub_100087F38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100087F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100087F58(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100087F60( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v6 + 304LL))();
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = (void *)v13;
  unsigned __int8 v39 = 0;
  id v34 = (id)(*(uint64_t (**)(void))(*(void *)v6 + 152LL))();
  uint64_t v15 = (void *)swift_allocObject(&unk_10027DE00, 88LL, 7LL);
  v15[2] = v14;
  v15[3] = &v39;
  void v15[4] = a3;
  void v15[5] = a4;
  v15[6] = a1;
  v15[7] = a2;
  v15[8] = v6;
  v15[9] = a5;
  v15[10] = a6;
  uint64_t v16 = swift_allocObject(&unk_10027DE28, 32LL, 7LL);
  *(void *)(v16 + 16) = sub_10008CED4;
  *(void *)(v16 + 24) = v15;
  Class v33 = v15;
  aBlock[4] = (uint64_t)sub_100085D2C;
  uint64_t v38 = v16;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000807CC;
  aBlock[3] = (uint64_t)&unk_10027DE40;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v38;
  id v19 = v14;
  sub_100072B9C(a3, a4);
  sub_100072B9C(a1, a2);
  swift_bridgeObjectRetain(a6);
  swift_retain(v16);
  swift_retain(v6);
  swift_release(v18);
  [v34 performBlockAndWait:v17];

  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v16, "", 120LL, 145LL, 32LL, 1LL);
  swift_release(v16);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (qword_1002E9B90 != -1) {
LABEL_11:
  }
    swift_once(&qword_1002E9B90, sub_100086A74);
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v21, (uint64_t)qword_1002E9B98);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  sub_100072B9C(a1, a2);
  uint64_t v23 = sub_100072B9C(a1, a2);
  id v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = v22;
  if (os_log_type_enabled(v24, v22))
  {
    uint64_t v26 = swift_slowAlloc(18LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v27;
    *(_DWORD *)uint64_t v26 = 67109378;
    swift_beginAccess(&v39, v36, 0LL, 0LL);
    LODWORD(v35) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v26 + 4, v26 + 8);
    *(_WORD *)(v26 + _Block_object_dispose(va, 8) = 2080;
    sub_1000B485C(a1, a2);
    unint64_t v29 = v28;
    uint64_t v35 = sub_10007C22C(v30, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v26 + 10, v26 + 18);
    swift_bridgeObjectRelease(v29);
    sub_100072BE0(a1, a2);
    sub_100072BE0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "should update record %{BOOL}d %s", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    sub_100072BE0(a1, a2);
    sub_100072BE0(a1, a2);
  }

  swift_beginAccess(&v39, aBlock, 0LL, 0LL);
  uint64_t v31 = v39;
  swift_release(v33);
  return v31;
}

uint64_t sub_100088314( void *a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v58 = a7;
  unint64_t v63 = a6;
  uint64_t v66 = a5;
  unint64_t v67 = a4;
  uint64_t v70 = a3;
  id v68 = a2;
  uint64_t v57 = type metadata accessor for Date(0LL);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  id v55 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v16 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1002464F0;
  id v18 = [a1 recordName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000914E8();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  os_log_type_t v22 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v17);
  [v15 setPredicate:v22];

  id v75 = 0LL;
  id v23 = [v15 execute:&v75];
  id v24 = v75;
  if (!v23)
  {
    id v44 = v75;
    uint64_t v45 = _convertNSErrorToError(_:)(v24);

    swift_willThrow(v46);
    return swift_errorRelease(v45);
  }

  os_log_type_t v25 = v23;
  uint64_t v26 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);
  id v28 = v24;

  v49[1] = a8;
  id v54 = v15;
  uint64_t v53 = v14;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0) {
      uint64_t v48 = v27;
    }
    else {
      uint64_t v48 = v27 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v27);
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v48);
    uint64_t v30 = v68;
    if (v29) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v27);
    uint64_t v30 = v68;
    if (v29)
    {
LABEL_4:
      if (v29 < 1)
      {
        __break(1u);
        JUMPOUT(0x100088EDCLL);
      }

      uint64_t v31 = 0LL;
      uint64_t v69 = 0LL;
      BOOL v32 = __OFSUB__(HIDWORD(v70), (_DWORD)v70);
      BOOL v60 = v32;
      uint64_t v59 = HIDWORD(v70) - (int)v70;
      uint64_t v72 = BYTE6(v67);
      BOOL v33 = __OFSUB__(HIDWORD(v66), (_DWORD)v66);
      BOOL v50 = v33;
      v49[2] = HIDWORD(v66) - (int)v66;
      uint64_t v65 = BYTE6(v63);
      uint64_t v51 = a9;
      unint64_t v71 = v67 >> 62;
      unint64_t v64 = v63 >> 62;
      unint64_t v61 = v27 & 0xC000000000000001LL;
      uint64_t v62 = v29;
      uint64_t v52 = v27;
      do
      {
        if ((v27 & 0xC000000000000001LL) != 0) {
          id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v27);
        }
        else {
          id v34 = *(id *)(v27 + 8 * v31 + 32);
        }
        uint64_t v35 = v34;
        id v36 = [v34 registrationData];
        if (v36)
        {
          id v37 = v36;
          uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
          unint64_t v40 = v39;

          id v41 = [v35 pushToken];
          if (v41)
          {
            uint64_t v42 = v41;
            uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
            uint64_t v74 = v43;

            __asm { BR              X10 }
          }

          sub_100072BE0(v38, v40);
        }

        _BYTE *v30 = 1;

        ++v31;
      }

      while (v29 != v31);
    }
  }

  return swift_bridgeObjectRelease_n(v27, 2LL);
}

uint64_t sub_100088F60(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  id v23 = 0LL;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v4 + 304LL))();
  if (!v9)
  {
    id v18 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_5;
  }

  uint64_t v10 = (void *)v9;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v4 + 152LL))();
  uint64_t v12 = (void *)swift_allocObject(&unk_10027DE78, 64LL, 7LL);
  _DWORD v12[2] = v10;
  uint64_t v12[3] = a3;
  v12[4] = a4;
  void v12[5] = a1;
  v12[6] = a2;
  v12[7] = &v23;
  uint64_t v13 = swift_allocObject(&unk_10027DEA0, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_10008CF5C;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_100085D2C;
  uint64_t v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027DEB8;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v22;
  id v16 = v10;
  sub_100072B9C(a3, a4);
  sub_100072B9C(a1, a2);
  swift_retain(v13);
  swift_release(v15);
  [(id)v11 performBlockAndWait:v14];

  _Block_release(v14);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v13, "", 120LL, 189LL, 32LL, 1LL);
  uint64_t result = swift_release(v13);
  if ((v11 & 1) == 0)
  {
    id v18 = v23;
    id v19 = v23;
    uint64_t v20 = sub_10008CF5C;
LABEL_5:

    sub_10008CF18((uint64_t)v20, (uint64_t)v12);
    return (uint64_t)v18;
  }

  __break(1u);
  return result;
}

uint64_t sub_100089128()
{
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027DEF0, 24LL, 7LL);
  *(void *)(v2 + 16) = &v10;
  uint64_t v3 = swift_allocObject(&unk_10027DF18, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008D460;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027DF30;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v9;
  swift_retain(v3);
  swift_release(v5);
  [(id)v1 performBlockAndWait:v4];

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 120LL, 219LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v10;
    swift_release(v2);
    return (uint64_t)v7;
  }

  return result;
}

uint64_t sub_100089274()
{
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027DF68, 24LL, 7LL);
  *(void *)(v2 + 16) = &v10;
  uint64_t v3 = swift_allocObject(&unk_10027DF90, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008D828;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027DFA8;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v9;
  swift_retain(v3);
  swift_release(v5);
  [(id)v1 performBlockAndWait:v4];

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 120LL, 242LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v10;
    swift_release(v2);
    return (uint64_t)v7;
  }

  return result;
}

uint64_t sub_1000893C0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 304LL))();
  if (result)
  {
    uint64_t v9 = (void *)result;
    uint64_t v32 = v4;
    uint64_t v33 = a1;
    if (qword_1002E9B90 != -1) {
      swift_once(&qword_1002E9B90, sub_100086A74);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v10, (uint64_t)qword_1002E9B98);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    id v12 = v9;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    if (os_log_type_enabled(v13, v11))
    {
      os_log_type_t type = v11;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v30 = (id)swift_slowAlloc(32LL, -1LL);
      aBlock[0] = (uint64_t)v30;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v15 = v14 + 12;
      uint64_t v26 = v14 + 4;
      buf = v14;
      id v16 = [v12 recordName];
      unint64_t v17 = a2;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v20 = v19;

      uint64_t v21 = v18;
      a2 = v17;
      uint64_t v37 = sub_10007C22C(v21, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v26, v15);

      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v13, type, "adding device record %s", buf, 0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(buf, -1LL, -1LL);
    }

    else
    {
    }

    id v31 = (id)(*(uint64_t (**)(void))(*(void *)v32 + 152LL))();
    uint64_t v22 = (void *)swift_allocObject(&unk_10027DFE0, 64LL, 7LL);
    v22[2] = v12;
    v22[3] = v32;
    v22[4] = v33;
    void v22[5] = a2;
    v22[6] = a3;
    v22[7] = a4;
    uint64_t v23 = swift_allocObject(&unk_10027E008, 32LL, 7LL);
    *(void *)(v23 + 16) = sub_10008DCB4;
    *(void *)(v23 + 24) = v22;
    aBlock[4] = (uint64_t)sub_100085D2C;
    uint64_t v36 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000807CC;
    aBlock[3] = (uint64_t)&unk_10027E020;
    id v24 = _Block_copy(aBlock);
    uint64_t v25 = v36;
    id v29 = v12;
    swift_retain(v32);
    sub_100072B9C(v33, a2);
    sub_100072B9C(a3, a4);
    swift_retain(v23);
    swift_release(v25);
    [v31 performBlockAndWait:v24];

    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 120LL, 276LL, 32LL, 1LL);
    swift_release(v22);
    uint64_t result = swift_release(v23);
  }

  return result;
}

void sub_100089718(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v4 + 304LL))();
  if (v10)
  {
    os_log_type_t v11 = (void *)v10;
    if (qword_1002E9B90 != -1) {
      swift_once(&qword_1002E9B90, sub_100086A74);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v12, (uint64_t)qword_1002E9B98);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    sub_100072B9C(a1, a2);
    sub_100072B9C(a3, a4);
    sub_100072B9C(a1, a2);
    uint64_t v14 = sub_100072B9C(a3, a4);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    if (os_log_type_enabled(v15, v13))
    {
      uint64_t v27 = v11;
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v30 = v26;
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_100072B9C(a1, a2);
      uint64_t v25 = v15;
      uint64_t v17 = Data.description.getter(a1, a2);
      unint64_t v19 = v18;
      sub_100072BE0(a1, a2);
      uint64_t v28 = sub_10007C22C(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v19);
      sub_100072BE0(a1, a2);
      sub_100072BE0(a1, a2);
      *(_WORD *)(v16 + 12) = 2080;
      sub_100072B9C(a3, a4);
      uint64_t v20 = Data.description.getter(a3, a4);
      unint64_t v22 = v21;
      sub_100072BE0(a3, a4);
      uint64_t v28 = sub_10007C22C(v20, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v22);
      sub_100072BE0(a3, a4);
      sub_100072BE0(a3, a4);
      uint64_t v15 = v25;
      _os_log_impl((void *)&_mh_execute_header, v25, v13, "deleting record %s %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v23 = v16;
      os_log_type_t v11 = v27;
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      sub_100072BE0(a1, a2);
      sub_100072BE0(a1, a2);
      sub_100072BE0(a3, a4);
      sub_100072BE0(a3, a4);
    }

    id v24 = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 152LL))();
    __chkstk_darwin(v24);
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10008E480);
  }

void sub_100089A60(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for SHA256(0LL);
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for SHA256Digest(0LL);
  void v17[2] = *(void *)(v11 - 8);
  v17[3] = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v17[1] = (char *)v17 - v13;
  v17[9] = a1;
  unint64_t v18 = a2;
  sub_100072B9C(a1, a2);
  sub_100072B9C(a3, a4);
  sub_10008E8AC(a3, a4);
  sub_100072BE0(a3, a4);
  unint64_t v14 = v18;
  uint64_t v15 = sub_100073FE0( (unint64_t *)&unk_1002E0430,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v10, v15);
  uint64_t v16 = (char *)&loc_100089BB0 + *((int *)qword_100089F70 + (v14 >> 62));
  v17[0] = v5;
  __asm { BR              X10 }

Class sub_100089BC4()
{
  *(void *)(v7 - 12_Block_object_dispose(va, 8) = v5;
  *(_WORD *)(v7 - 120) = v6;
  *(_BYTE *)(v7 - 11_Block_object_dispose(va, 8) = BYTE2(v6);
  *(_BYTE *)(v7 - 117) = BYTE3(v6);
  *(_BYTE *)(v7 - 116) = BYTE4(v6);
  *(_BYTE *)(v7 - 115) = BYTE5(v6);
  dispatch thunk of HashFunction.update(bufferPointer:)(v7 - 128, v7 - 128 + BYTE6(v6), v2, v0);
  sub_100072BE0(v5, v6);
  uint64_t v8 = *(void *)(v7 - 168);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
  sub_100072BE0(v5, v6);
  uint64_t v9 = *(void *)(v7 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 160) + 16LL))(v3, v8, v9);
  uint64_t v10 = sub_100073FE0( &qword_1002E0AA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest,  (uint64_t)&protocol conformance descriptor for SHA256Digest);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of Sequence.makeIterator())(v9, v10);
  uint64_t v11 = *(void *)(v7 - 104);
  unint64_t v12 = *(void *)(v7 - 96);
  uint64_t v13 = *(void *)(v11 + 16);
  if (v12 != v13)
  {
    if ((uint64_t)v12 < v13)
    {
      unint64_t v14 = _swiftEmptyArrayStorage;
      *(_OWORD *)(v7 - 144) = xmmword_1002464F0;
      while ((v12 & 0x8000000000000000LL) == 0)
      {
        if (v12 >= *(void *)(v11 + 16)) {
          goto LABEL_15;
        }
        char v24 = *(_BYTE *)(v11 + 32 + v12);
        uint64_t v25 = sub_100072CC4((uint64_t *)&unk_1002E0440);
        uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
        *(_OWORD *)(v26 + 16) = *(_OWORD *)(v7 - 144);
        *(void *)(v26 + 56) = &type metadata for UInt8;
        *(void *)(v26 + 64) = &protocol witness table for UInt8;
        *(_BYTE *)(v26 + 32) = v24;
        uint64_t v27 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))( 2016555045LL,  0xE400000000000000LL,  v26);
        uint64_t v29 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          unint64_t v14 = sub_10008CB7C(0LL, v14[2] + 1LL, 1, v14);
        }
        unint64_t v31 = v14[2];
        unint64_t v30 = v14[3];
        if (v31 >= v30 >> 1) {
          unint64_t v14 = sub_10008CB7C((void *)(v30 > 1), v31 + 1, 1, v14);
        }
        ++v12;
        v14[2] = v31 + 1;
        uint64_t v32 = &v14[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
        if (v13 == v12) {
          goto LABEL_3;
        }
      }

      __break(1u);
LABEL_15:
      __break(1u);
    }

    __break(1u);
    JUMPOUT(0x100089F68LL);
  }

  unint64_t v14 = _swiftEmptyArrayStorage;
LABEL_3:
  swift_bridgeObjectRelease(v11);
  *(void *)(v7 - 104) = v14;
  uint64_t v15 = sub_100072CC4((uint64_t *)&unk_1002E0400);
  unint64_t v16 = sub_10008EAC4();
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v15, v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease(v14);
  sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
  id v20 = *(id *)(*(void *)(v7 - 176) + 40LL);
  v21._countAndFlagsBits = v17;
  v21._object = v19;
  Class isa = CKRecordID.init(recordName:zoneID:)(v21, (CKRecordZoneID)v20).super.isa;
  (*(void (**)(void, void))(*(void *)(v7 - 160) + 8LL))(*(void *)(v7 - 168), *(void *)(v7 - 152));
  return isa;
}

CKRecordID sub_100089F80(void *a1)
{
  id v3 = [a1 recordID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
    id v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }

  else
  {
    result.super.Class isa = (Class)[a1 registrationData];
    if (result.super.isa)
    {
      Class isa = result.super.isa;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result.super.isa);
      unint64_t v14 = v13;

      id v15 = [a1 pushToken];
      if (v15)
      {
        unint64_t v16 = v15;
        uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
        unint64_t v19 = v18;

        uint64_t v20 = (*((uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))*v1 + 38))( v17,  v19,  v12,  v14);
        sub_100072BE0(v17, v19);
        sub_100072BE0(v12, v14);
        return (CKRecordID)v20;
      }

      else
      {
        sub_100072BE0(v12, v14);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10008A0C4(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1002E9B90 != -1) {
    swift_once(&qword_1002E9B90, sub_100086A74);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v4, (uint64_t)qword_1002E9B98);
  id v5 = a1;
  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v9;
    *(_DWORD *)id v8 = 136315138;
    id v10 = [v5 recordID];
    id v11 = [v10 recordName];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    uint64_t v17 = sub_10007C22C(v12, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud device: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  id v15 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 152LL))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_10008EB10);

  return LOBYTE(v18[0]);
}

void sub_10008A314(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v140 = a2;
  v136 = a3;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v138 = *(void *)(v6 - 8);
  uint64_t v139 = v6;
  __chkstk_darwin(v6);
  v137 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v128 = *(void *)(v8 - 8);
  uint64_t v129 = v8;
  __chkstk_darwin(v8);
  v127 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v10);
  uint64_t v130 = (uint64_t)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100072CC4(&qword_1002E07F8);
  __chkstk_darwin(v12);
  v132 = (int *)((char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for CloudDeviceData(0LL);
  uint64_t v131 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v134 = (uint64_t *)((char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v16 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1002464F0;
  id v141 = a1;
  id v19 = [a1 recordID];
  id v20 = [v19 recordName];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000914E8();
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v23;
  char v24 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v18);
  [v16 setPredicate:v24];

  v143[0] = 0LL;
  id v135 = v16;
  id v25 = [v16 execute:v143];
  id v26 = v143[0];
  if (!v25)
  {
    id v35 = v143[0];
    uint64_t v36 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v37);
    uint64_t v38 = swift_errorRelease(v36);
    unint64_t v31 = 0LL;
LABEL_13:
    id v41 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v140 + 152LL))(v38);
    id v42 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v41];

    if (!v42) {
      goto LABEL_34;
    }
    id v34 = v42;
    id v32 = v141;
    id v43 = [v141 recordID];
    NSString v44 = [v43 recordName];

    if (!v44)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v46 = v45;
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v46);
    }

    [v34 setRecordID:v44];

    goto LABEL_17;
  }

  uint64_t v27 = v25;
  uint64_t v28 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);
  id v30 = v26;

  if (!((unint64_t)v29 >> 62))
  {
    unint64_t v31 = v3;
    if (*(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }

  if (v29 < 0) {
    uint64_t v39 = v29;
  }
  else {
    uint64_t v39 = v29 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v29);
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);
  swift_bridgeObjectRelease(v29);
  unint64_t v31 = v4;
  if (!v40)
  {
LABEL_12:
    uint64_t v38 = swift_bridgeObjectRelease(v29);
    goto LABEL_13;
  }

LABEL_4:
  if ((v29 & 0xC000000000000001LL) != 0)
  {
    id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v29);
    swift_bridgeObjectRelease(v29);
    id v32 = v141;
LABEL_17:
    uint64_t v33 = v139;
    goto LABEL_18;
  }

  id v32 = v141;
  uint64_t v33 = v139;
  if (!*(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    __break(1u);
  }
  id v34 = *(id *)(v29 + 32);
  swift_bridgeObjectRelease(v29);
LABEL_18:
  uint64_t v47 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  id v48 = v34;
  uint64_t v49 = JSONDecoder.init()();
  id v50 = [v32 encryptedValues];
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v50 objectForKeyedSubscript:v51];
  swift_unknownObjectRelease(v50);

  uint64_t v133 = v49;
  if (v52)
  {
    uint64_t v142 = (uint64_t)v52;
    uint64_t v53 = sub_100072CC4(&qword_1002E0860);
    char v54 = swift_dynamicCast(v143, &v142, v53, &type metadata for Data, 6LL);
    uint64_t v56 = v137;
    uint64_t v55 = v138;
    if ((v54 & 1) != 0)
    {
      id v126 = v48;
      id v57 = v143[0];
      id v58 = v143[1];
      uint64_t v59 = sub_100073FE0(&qword_1002E0868, type metadata accessor for CloudDeviceData, (uint64_t)&unk_1002484AC);
      uint64_t v60 = (uint64_t)v132;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, v57, v58, v14, v59);
      if (!v31)
      {
        unint64_t v31 = 0LL;
        uint64_t v124 = (uint64_t)v57;
        unint64_t v125 = (unint64_t)v58;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v131 + 56))(v60, 0LL, 1LL, v14);
        uint64_t v88 = v134;
        sub_100085C04(v60, (uint64_t)v134, type metadata accessor for CloudDeviceData);
        unint64_t v89 = v88[1];
        if (v89 >> 60 == 15)
        {
          Class isa = 0LL;
        }

        else
        {
          uint64_t v91 = *v134;
          sub_100072B9C(*v134, v89);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v92 = v91;
          uint64_t v88 = v134;
          sub_10007EB9C(v92, v89);
        }

        id v32 = v141;
        uint64_t v33 = v139;
        id v48 = v126;
        [v126 setPushToken:isa];

        unint64_t v93 = v88[3];
        if (v93 >> 60 == 15)
        {
          Class v94 = 0LL;
        }

        else
        {
          uint64_t v95 = v134[2];
          sub_100072B9C(v95, v93);
          Class v94 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v96 = v95;
          uint64_t v88 = v134;
          sub_10007EB9C(v96, v93);
        }

        [v48 setRegistrationData:v94];

        v132 = (int *)v14;
        uint64_t v97 = (uint64_t)v88 + *(int *)(v14 + 24);
        uint64_t v98 = v130;
        sub_100085DFC(v97, v130);
        uint64_t v99 = type metadata accessor for Date(0LL);
        uint64_t v100 = *(void *)(v99 - 8);
        Class v101 = 0LL;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v98, 1LL, v99) != 1)
        {
          Class v101 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
        }

        [v48 setTimeToLive:v101];

        id v102 = v132;
        uint64_t v103 = *(void **)((char *)v88 + v132[9]);
        if (!v103) {
          goto LABEL_47;
        }
        v143[0] = v103;
        swift_bridgeObjectRetain(v103);
        uint64_t v104 = sub_100072CC4((uint64_t *)&unk_1002E0400);
        unint64_t v105 = sub_10008EAC4();
        uint64_t v106 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v104, v105);
        uint64_t v108 = v107;
        uint64_t v109 = swift_bridgeObjectRelease(v103);
        unsigned int v110 = v127;
        static String.Encoding.utf8.getter(v109);
        uint64_t v111 = String.data(using:allowLossyConversion:)(v110, 0LL, v106, v108);
        unint64_t v113 = v112;
        swift_bridgeObjectRelease(v108);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v110, v129);
        if (v113 >> 60 != 15)
        {
          Class v114 = Data._bridgeToObjectiveC()().super.isa;
          sub_10007EB9C(v111, v113);
        }

        else
        {
LABEL_47:
          Class v114 = 0LL;
        }

        [v48 setApplications:v114];

        uint64_t v115 = (char *)v134 + v102[7];
        uint64_t v116 = *((void *)v115 + 1);
        if (v116)
        {
          swift_bridgeObjectRetain(*((void *)v115 + 1));
          NSString v117 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v116);
        }

        else
        {
          NSString v117 = 0LL;
        }

        uint64_t v56 = v137;
        [v48 setOsVersion:v117];

        uint64_t v118 = (char *)v134 + v102[8];
        uint64_t v119 = *((void *)v118 + 1);
        if (v119)
        {
          swift_bridgeObjectRetain(*((void *)v118 + 1));
          NSString v120 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v119);
        }

        else
        {
          NSString v120 = 0LL;
        }

        uint64_t v55 = v138;
        [v48 setSerialNumber:v120];

        NSString v121 = String._bridgeToObjectiveC()();
        [v48 setCkstate:v121];

        if (*((_BYTE *)v134 + v102[10]) == 2)
        {
          [v48 setInjected:0];
          sub_100072BE0(v124, v125);
        }

        else
        {
          Class v122 = Bool._bridgeToObjectiveC()().super.super.isa;
          [v48 setInjected:v122];
          sub_100072BE0(v124, v125);
        }

        sub_100086970((uint64_t)v134);
        goto LABEL_24;
      }

      swift_errorRelease(v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v60, 1LL, 1LL, v14);
      sub_100072BE0((uint64_t)v57, (unint64_t)v58);
      sub_100077CFC(v60, &qword_1002E07F8);
      unint64_t v31 = 0LL;
      id v32 = v141;
      uint64_t v33 = v139;
      id v48 = v126;
    }
  }

  else
  {
    uint64_t v56 = v137;
    uint64_t v55 = v138;
  }

  NSString v61 = String._bridgeToObjectiveC()();
  [v48 setCkstate:v61];

LABEL_24:
  if (qword_1002E9B90 != -1) {
    swift_once(&qword_1002E9B90, sub_100086A74);
  }
  uint64_t v62 = sub_100072DEC(v33, (uint64_t)qword_1002E9B98);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v62, v33);
  id v63 = v48;
  unint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v134 = v31;
    uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v67 = (void *)swift_slowAlloc(32LL, -1LL);
    v143[0] = v67;
    *(_DWORD *)uint64_t v66 = 136315138;
    id v68 = [v63 pushToken];
    if (v68)
    {
      uint64_t v69 = v68;
      uint64_t v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
      unint64_t v72 = v71;

      sub_1000B485C(v70, v72);
      uint64_t v74 = v73;
      unint64_t v76 = v75;
      uint64_t v77 = v70;
      uint64_t v33 = v139;
      sub_100072BE0(v77, v72);
    }

    else
    {
      unint64_t v76 = 0xE100000000000000LL;
      uint64_t v74 = 45LL;
    }

    uint64_t v142 = sub_10007C22C(v74, v76, (uint64_t *)v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v66 + 4, v66 + 12);

    swift_bridgeObjectRelease(v76);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "merged cloud device: %s", v66, 0xCu);
    swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v33);
    id v32 = v141;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v33);
  }

  uint64_t v78 = v140;
  uint64_t v79 = (*(uint64_t (**)(id, id))(*(void *)v140 + 384LL))(v63, v32);
  uint64_t v80 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v78 + 152LL))(v79);
  v143[0] = 0LL;
  unsigned int v81 = [v80 save:v143];

  id v82 = v143[0];
  if (!v81)
  {
    id v86 = v143[0];
    id v42 = (id)_convertNSErrorToError(_:)(v82);

    swift_willThrow(v87);
    swift_release(v133);

    swift_errorRelease(v42);
    LOBYTE(v42) = 1;
    id v84 = v63;
    uint64_t v85 = v136;
    goto LABEL_36;
  }

  id v83 = v143[0];
  swift_release(v133);

  LOBYTE(v42) = 1;
LABEL_34:
  id v84 = v135;
  uint64_t v85 = v136;
LABEL_36:

  *uint64_t v85 = (_BYTE)v42;
}

  if (v16 >= 1)
  {
    uint64_t v18 = 0LL;
    while (1)
    {
      id v19 = (v14 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14)
          : *(id *)(v14 + 8 * v18 + 32);
      id v20 = v19;
      uint64_t v21 = [v19 ckstate];
      if (!v21) {
        break;
      }
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      id v25 = v24;

      if (!v25) {
        break;
      }
      if (v23 == 0x646574656C6564LL && v25 == 0xE700000000000000LL)
      {
        swift_bridgeObjectRelease(0xE700000000000000LL);
      }

      else
      {
        uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, 0x646574656C6564LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v25);
        if ((v27 & 1) == 0) {
          break;
        }
      }

LABEL_8:
      if (v16 == ++v18)
      {
        swift_bridgeObjectRelease(v14);
        id v32 = (void *)v37;
        goto LABEL_29;
      }
    }

    uint64_t v28 = sub_100097300();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    id v30 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v29 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v30 >= v29 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
    }
    unint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
    specialized Array._endMutation()(v31);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

  if ((v16 & 0xC000000000000001LL) != 0)
  {
    uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
    goto LABEL_7;
  }

  if (!*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v18 = *(id *)(v16 + 32);
LABEL_7:
  id v19 = v18;
  swift_bridgeObjectRelease(v16);
LABEL_18:
  sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
  Class isa = NSNumber.init(integerLiteral:)(integerLiteral).super.super.isa;
  [v19 setState:isa];

  if (v43) {
    [v19 setCkrecord:0];
  }
  id v35 = (*(uint64_t (**)(id))(*v2 + 432LL))(v19);

LABEL_26:
  *a1 = v35;
}

  if ((v13 & 0xC000000000000001LL) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
  }

  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_29:
      swift_once(&qword_1002EB080, sub_1000B9B18);
      goto LABEL_18;
    }

    id v16 = *(id *)(v13 + 32);
  }

  uint64_t v15 = v16;
  swift_bridgeObjectRelease(v13);
LABEL_16:
  uint64_t v1 = v15;
  char v24 = ((uint64_t (*)(id))v4)(v15);

  if ((v24 & 1) == 0)
  {

    goto LABEL_26;
  }

  if (qword_1002EB080 != -1) {
    goto LABEL_29;
  }
LABEL_18:
  id v25 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v25, (uint64_t)qword_1002EB088);
  id v26 = v1;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  uint64_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v40 = v3;
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v29 = 138412290;
    id v41 = v26;
    id v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 4, v29 + 12);
    void *v39 = v15;

    id v3 = v40;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "saving zone: %@", v29, 0xCu);
    unint64_t v31 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v39, 1LL, v31);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    uint64_t v27 = (os_log_s *)v26;
  }

  id v32 = *(void **)(v3 + 16);
  id v41 = 0LL;
  uint64_t v33 = [v32 save:&v41];
  id v34 = v41;
  if (v33)
  {
    id v35 = v41;
  }

  else
  {
    uint64_t v36 = v41;
    uint64_t v37 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v38);
    swift_errorRelease(v37);
    id v5 = v26;
  }

  if ((v19 & 0xC000000000000001LL) != 0) {
    goto LABEL_97;
  }
  if (!*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    __break(1u);
  }
  uint64_t v21 = *(id *)(v19 + 32);
LABEL_7:
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v19);
LABEL_18:
  id v35 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = v22;
  uint64_t v138 = JSONDecoder.init()();
  id v19 = (uint64_t)[v145 encryptedValues];
  if (qword_1002EB530 != -1) {
    goto LABEL_95;
  }
  while (1)
  {
    uint64_t v37 = String._bridgeToObjectiveC()();
    uint64_t v38 = [(id)v19 objectForKeyedSubscript:v37];
    swift_unknownObjectRelease(v19);

    uint64_t v39 = v142;
    if (!v38) {
      break;
    }
    id v154 = (uint64_t)v38;
    uint64_t v40 = sub_100072CC4(&qword_1002E0860);
    id v41 = swift_dynamicCast(&v156, &v154, v40, &type metadata for Data, 6LL);
    id v42 = v150;
    if ((v41 & 1) == 0) {
      goto LABEL_24;
    }
    id v43 = (uint64_t)v156;
    NSString v44 = v157;
    uint64_t v45 = sub_1000C77A8();
    uint64_t v46 = v149;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for StaticKeyData,  v43,  v44,  &type metadata for StaticKeyData,  v45);
    if (v46)
    {
      sub_100072BE0(v43, v44);
      swift_errorRelease(v46);
      v149 = 0LL;
      uint64_t v39 = v142;
      goto LABEL_24;
    }

    v149 = 0LL;
    unint64_t v72 = v158;
    uint64_t v73 = v159;
    uint64_t v74 = v160;
    v146 = v157;
    unint64_t v75 = String._bridgeToObjectiveC()();
    [v36 setPublicId:v75];

    if (v74)
    {
      swift_bridgeObjectRetain(v74);
      unint64_t v76 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v74);
    }

    else
    {
      unint64_t v76 = 0LL;
    }

    [v36 setContactIdentifier:v76];

    if (v73)
    {
      swift_bridgeObjectRetain(v73);
      uint64_t v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v73);
    }

    else
    {
      uint64_t v77 = 0LL;
    }

    [v36 setContactExternalURI:v77];

    uint64_t v78 = [v36 uris];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
      unsigned int v81 = sub_1000C6368();
      id v82 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v79, v80, v81);

      id v83 = v149;
      sub_1000C1ECC(v82);
      id v19 = v84;
      v149 = v83;
      swift_bridgeObjectRelease(v82);
    }

    else
    {
      id v19 = (uint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v85 = sub_100084DE4(v19);
    swift_bridgeObjectRelease(v19);
    id v154 = v85;
    id v86 = v72;
    uint64_t v87 = *(void *)(v72 + 16);
    v147 = v44;
    v148 = v36;
    v143 = v43;
    if (v87)
    {
      v144 = v86;
      v136 = v73;
      v137 = v74;
      Class isa = (Class)[v36 uris];
      if (!isa)
      {
        sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
        sub_1000C6368();
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        [v36 setUris:isa];
      }

      unint64_t v89 = v144;
      swift_bridgeObjectRetain_n(v144, 2LL);
      unint64_t v90 = (uint64_t *)(v89 + 40);
      do
      {
        uint64_t v92 = *(v90 - 1);
        unint64_t v93 = *v90;
        Class v94 = v154;
        swift_bridgeObjectRetain(*v90);
        swift_bridgeObjectRetain(v94);
        uint64_t v95 = sub_1000C3490(v92, v93, v94);
        uint64_t v96 = swift_bridgeObjectRelease(v94);
        if ((v95 & 1) != 0)
        {
          sub_1000ABF38(v92, v93);
          id v19 = v91;
        }

        else
        {
          uint64_t v97 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v153 + 136LL))(v96);
          uint64_t v98 = [objc_allocWithZone((Class)CloudStaticKeyURI) initWithContext:v97];

          uint64_t v99 = String._bridgeToObjectiveC()();
          [v98 setUri:v99];

          uint64_t v100 = [v36 uris];
          if (v100)
          {
            Class v101 = v100;
            id v102 = v98;
            uint64_t v103 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
            uint64_t v104 = sub_1000C6368();
            unint64_t v105 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v101, v103, v104);

            v155 = v105;
            uint64_t i = v102;
            sub_1000C4848((Swift::Int *)&v156, v102);
            uint64_t v106 = v155;
            if (v155)
            {
              v107.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v106);
            }

            else
            {
              v107.super.Class isa = 0LL;
            }

            uint64_t v36 = v148;
            [v148 setUris:v107.super.isa];

            NSString v44 = v147;
            uint64_t v98 = i;
          }

          else
          {
            [v36 setUris:0];
          }

          sub_1000ABF38(v92, v93);
          swift_bridgeObjectRelease(v108);
          swift_bridgeObjectRetain(v93);
          sub_100083FE4((uint64_t *)&v156, v92, v93);

          id v19 = v157;
        }

        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v19);
        v90 += 2;
        --v87;
      }

      while (v87);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease_n(v144, 3LL);
      swift_bridgeObjectRelease(v136);
      swift_bridgeObjectRelease(v137);
      uint64_t v85 = v154;
      id v43 = v143;
    }

    else
    {
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v74);
    }

    uint64_t v109 = *(void *)(v85 + 56);
    v144 = v85 + 56;
    unsigned int v110 = 1LL << *(_BYTE *)(v85 + 32);
    uint64_t v111 = -1LL;
    if (v110 < 64) {
      uint64_t v111 = ~(-1LL << v110);
    }
    unint64_t v112 = v111 & v109;
    v146 = (unint64_t)(v110 + 63) >> 6;
    swift_bridgeObjectRetain(v85);
    unint64_t v113 = 0LL;
    for (i = (void *)v85; ; uint64_t v85 = (uint64_t)i)
    {
      if (v112)
      {
        Class v114 = __clz(__rbit64(v112));
        v112 &= v112 - 1;
        uint64_t v115 = v114 | (v113 << 6);
        goto LABEL_82;
      }

      if (__OFADD__(v113++, 1LL)) {
        break;
      }
      if (v113 >= v146)
      {
        uint64_t v39 = v142;
        id v42 = v150;
LABEL_93:
        swift_release(v85);
        uint64_t v47 = String._bridgeToObjectiveC()();
        [v36 setCkstate:v47];
        sub_100072BE0(v43, v44);
        swift_bridgeObjectRelease(v85);
        goto LABEL_25;
      }

      NSString v117 = *(void *)(v144 + 8 * v113);
      id v42 = v150;
      if (!v117)
      {
        uint64_t v118 = v113 + 1;
        if (v113 + 1 >= v146) {
          goto LABEL_92;
        }
        NSString v117 = *(void *)(v144 + 8 * v118);
        if (!v117)
        {
          uint64_t v118 = v113 + 2;
          if (v113 + 2 >= v146) {
            goto LABEL_92;
          }
          NSString v117 = *(void *)(v144 + 8 * v118);
          if (!v117)
          {
            uint64_t v118 = v113 + 3;
            if (v113 + 3 >= v146)
            {
LABEL_92:
              uint64_t v39 = v142;
              goto LABEL_93;
            }

            NSString v117 = *(void *)(v144 + 8 * v118);
            if (!v117)
            {
              while (1)
              {
                unint64_t v113 = v118 + 1;
                if (__OFADD__(v118, 1LL)) {
                  break;
                }
                if (v113 >= v146) {
                  goto LABEL_92;
                }
                NSString v117 = *(void *)(v144 + 8 * v113);
                ++v118;
                if (v117) {
                  goto LABEL_81;
                }
              }

              __break(1u);
LABEL_97:
              uint64_t v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v19);
              goto LABEL_7;
            }
          }
        }

        unint64_t v113 = v118;
      }

uint64_t sub_10008AFE4(void *a1)
{
  id v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v4 = swift_allocObject(&unk_10027E058, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject(&unk_10027E080, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10008EB54;
  *(void *)(v5 + 24) = v4;
  void v11[4] = sub_100085D2C;
  uint64_t v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  __int128 v11[2] = sub_1000807CC;
  v11[3] = &unk_10027E098;
  uint64_t v6 = _Block_copy(v11);
  uint64_t v7 = v12;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120LL, 389LL, 32LL, 1LL);
  swift_release(v4);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

Class sub_10008B130(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for CloudDeviceData(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [a1 ckrecord];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0LL;
    unint64_t v17 = 0xF000000000000000LL;
  }

  uint64_t v18 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 440))(v15, v17);
  sub_10007EB9C(v15, v17);
  if (!isa)
  {
    uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v2 + 312LL))(a1);
    if (!v20) {
      return 0LL;
    }
    v21.super.Class isa = (Class)v20;
    sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    v22._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v2 + 128LL))();
    Class isa = CKRecord.init(recordType:recordID:)(v22, v21).super.isa;
  }

  id v23 = [a1 applications];
  if (v23)
  {
    char v24 = v23;
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v27 = v26;
  }

  else
  {
    uint64_t v25 = 0LL;
    unint64_t v27 = 0xC000000000000000LL;
  }

  static String.Encoding.utf8.getter(v23);
  unint64_t v78 = v27;
  uint64_t v28 = String.init(data:encoding:)(v25, v27, v12);
  if (v29)
  {
    unint64_t v30 = v29;
    uint64_t v80 = v28;
    unint64_t v81 = v29;
    v79[0] = 44LL;
    v79[1] = 0xE100000000000000LL;
    unint64_t v31 = sub_10007F884();
    uint64_t v76 = StringProtocol.components<A>(separatedBy:)( v79,  &type metadata for String,  &type metadata for String,  v31,  v31);
    swift_bridgeObjectRelease(v30);
  }

  else
  {
    uint64_t v76 = 0LL;
  }

  id v32 = [a1 pushToken];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
    unint64_t v74 = v35;
    uint64_t v75 = v34;
  }

  else
  {
    unint64_t v74 = 0xF000000000000000LL;
    uint64_t v75 = 0LL;
  }

  id v36 = [a1 registrationData];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v72 = v39;
    uint64_t v73 = v38;
  }

  else
  {
    unint64_t v72 = 0xF000000000000000LL;
    uint64_t v73 = 0LL;
  }

  id v40 = [a1 timeToLive];
  if (v40)
  {
    id v41 = v40;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    uint64_t v42 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v6, 0LL, 1LL, v42);
  }

  else
  {
    uint64_t v43 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v6, 1LL, 1LL, v43);
  }

  id v44 = [a1 osVersion];
  uint64_t v77 = v25;
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v48 = v47;
  }

  else
  {
    uint64_t v46 = 0LL;
    uint64_t v48 = 0LL;
  }

  Class v49 = isa;
  id v50 = [a1 serialNumber];
  if (v50)
  {
    NSString v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    uint64_t v54 = v53;
  }

  else
  {
    uint64_t v52 = 0LL;
    uint64_t v54 = 0LL;
  }

  id v55 = [a1 injected];
  if (v55)
  {
    uint64_t v56 = v55;
    unsigned __int8 v57 = [v55 BOOLValue];
  }

  else
  {
    unsigned __int8 v57 = 2;
  }

  unint64_t v58 = v74;
  uint64_t *v9 = v75;
  v9[1] = v58;
  unint64_t v59 = v72;
  v9[2] = v73;
  v9[3] = v59;
  sub_100086884((uint64_t)v6, (uint64_t)v9 + v7[6]);
  uint64_t v60 = (uint64_t *)((char *)v9 + v7[7]);
  uint64_t *v60 = v46;
  v60[1] = v48;
  NSString v61 = (uint64_t *)((char *)v9 + v7[8]);
  *NSString v61 = v52;
  v61[1] = v54;
  *(uint64_t *)((char *)v9 + v7[9]) = v76;
  *((_BYTE *)v9 + v7[10]) = v57;
  uint64_t v62 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  uint64_t v63 = JSONEncoder.init()();
  uint64_t v64 = sub_100073FE0( (unint64_t *)&unk_1002E0460,  type metadata accessor for CloudDeviceData,  (uint64_t)&unk_1002484D4);
  uint64_t v65 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v7, v64);
  unint64_t v67 = v66;
  id v68 = -[objc_class encryptedValues](v49, "encryptedValues");
  uint64_t ObjectType = swift_getObjectType(v68);
  id v82 = &type metadata for Data;
  id v83 = &protocol witness table for Data;
  uint64_t v80 = v65;
  unint64_t v81 = v67;
  sub_100072B9C(v65, v67);
  CKRecordKeyValueSetting.subscript.setter(&v80, 1635017060LL, 0xE400000000000000LL, ObjectType);
  swift_release(v63);
  sub_100072BE0(v77, v78);
  swift_unknownObjectRelease(v68);
  sub_100072BE0(v65, v67);
  sub_100086970((uint64_t)v9);
  return v49;
}

uint64_t sub_10008B688()
{
  unsigned __int8 v11 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027E0D0, 32LL, 7LL);
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v11;
  uint64_t v3 = swift_allocObject(&unk_10027E0F8, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008EE48;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027E110;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120LL, 432LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return v8;
  }

  return result;
}

uint64_t sub_10008B7D4()
{
  unsigned __int8 v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027E148, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027E170, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008F018;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027E188;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120LL, 446LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_10008B928()
{
  unsigned __int8 v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027E1C0, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027E1E8, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008F040;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027E200;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120LL, 464LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_10008BA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v36 = _swiftEmptyArrayStorage;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v3 + 152LL))();
  uint64_t v9 = (void *)swift_allocObject(&unk_10027E238, 56LL, 7LL);
  v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  v9[5] = &v36;
  v9[6] = v4;
  uint64_t v10 = swift_allocObject(&unk_10027E260, 32LL, 7LL);
  *(void *)(v10 + 16) = sub_10008F26C;
  *(void *)(v10 + 24) = v9;
  _OWORD v34[3] = sub_100085D2C;
  uint64_t v35 = v10;
  aBlock = _NSConcreteStackBlock;
  v34[0] = 1107296256LL;
  v34[1] = sub_1000807CC;
  v34[2] = &unk_10027E278;
  unsigned __int8 v11 = _Block_copy(&aBlock);
  uint64_t v12 = v35;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v4);
  swift_retain(v10);
  swift_release(v12);
  [(id)v8 performBlockAndWait:v11];

  _Block_release(v11);
  LOBYTE(v_Block_object_dispose(va, 8) = swift_isEscapingClosureAtFileLocation(v10, "", 120LL, 487LL, 32LL, 1LL);
  swift_release(v10);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else if (qword_1002E9B90 == -1)
  {
    goto LABEL_3;
  }

  swift_once(&qword_1002E9B90, sub_100086A74);
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100072DEC(v13, (uint64_t)qword_1002E9B98);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v17 = 134217984;
    swift_beginAccess(&v36, v32, 0LL, 0LL);
    aBlock = (void **)v36[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v34, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "record update device cloudstate: %ld", v17, 0xCu);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  swift_beginAccess(&v36, &aBlock, 0LL, 0LL);
  uint64_t v18 = v36;
  uint64_t v19 = v36[2];
  if (v19)
  {
    unint64_t v31 = v9;
    uint64_t v20 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0LL) - 8);
    CKRecordID v21 = (char *)v18 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    Swift::String v22 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 176LL);
    uint64_t v23 = *(void *)(v20 + 72);
    unint64_t v30 = v18;
    uint64_t v24 = swift_bridgeObjectRetain(v18);
    do
    {
      uint64_t v24 = v22(v24);
      if (v24)
      {
        uint64_t v25 = (void *)v24;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v27 = Data._bridgeToObjectiveC()().super.isa;
        Class v28 = Date._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v25, "cloudDeviceUploadedWithPushToken:tbsRegistrationData:uploadedAt:", isa, v27, v28, v30);

        uint64_t v24 = swift_unknownObjectRelease(v25);
      }

      v21 += v23;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(v30);
    uint64_t v18 = v36;
    uint64_t v9 = v31;
  }

  swift_release(v9);
  return swift_bridgeObjectRelease(v18);
}

void sub_10008BDE8(void **a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v73 = a4;
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v5 = type metadata accessor for KTCloudDevice.CloudState(0LL);
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v72 = v5;
  __chkstk_darwin(v5);
  uint64_t v76 = (uint64_t *)((char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = (os_log_s *)type metadata accessor for Date(0LL);
  uint64_t v80 = *((void *)v7 - 1);
  os_log_t v81 = v7;
  __chkstk_darwin(v7);
  uint64_t v77 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  id v10 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1002464F0;
  id v13 = [v9 recordName];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000914E8();
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  unint64_t v17 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v12);
  [v10 setPredicate:v17];

  id v82 = 0LL;
  id v70 = v10;
  id v18 = [v10 execute:&v82];
  id v19 = v82;
  if (v18)
  {
    uint64_t v20 = v18;
    uint64_t v21 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
    id v23 = v19;

    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0) {
        uint64_t v68 = v22;
      }
      else {
        uint64_t v68 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v22, 2LL);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease(v22);
    }

    else
    {
      uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v22);
    }

    uint64_t v26 = v74;
    uint64_t v25 = v75;
    Class v27 = v77;
    if (!v24)
    {
LABEL_29:

      swift_bridgeObjectRelease_n(v22, 2LL);
      return;
    }

    if (v24 >= 1)
    {
      uint64_t v28 = 0LL;
      unint64_t v79 = v22 & 0xC000000000000001LL;
      BOOL v30 = v74 == 1701736292 && v75 == 0xE400000000000000LL;
      BOOL v78 = v30;
      do
      {
        if (v79) {
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v22);
        }
        else {
          id v31 = *(id *)(v22 + 8 * v28 + 32);
        }
        id v32 = v31;
        NSString v33 = String._bridgeToObjectiveC()();
        [v32 setCkstate:v33];

        if (v78
          || (uint64_t v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, 1701736292LL, 0xE400000000000000LL, 0LL),
              (v34 & 1) != 0))
        {
          Date.init()(v34);
          id v35 = [v32 pushToken];
          if (v35)
          {
            id v36 = v35;
            uint64_t v37 = v24;
            uint64_t v38 = v22;
            uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
            unint64_t v41 = v40;

            id v42 = [v32 registrationData];
            if (v42)
            {
              uint64_t v43 = v42;
              uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
              uint64_t v46 = v45;

              uint64_t v47 = v76;
              (*(void (**)(uint64_t, char *, os_log_t))(v80 + 16))( (uint64_t)v76 + *(int *)(v72 + 24),  v77,  v81);
              *uint64_t v47 = v39;
              v47[1] = v41;
              v47[2] = v44;
              v47[3] = v46;
              uint64_t v48 = v73;
              unint64_t v49 = *v73;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v73);
              *uint64_t v48 = v49;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v49 = sub_10008CC88(0, *(void *)(v49 + 16) + 1LL, 1, v49);
                *uint64_t v73 = v49;
              }

              unint64_t v52 = *(void *)(v49 + 16);
              unint64_t v51 = *(void *)(v49 + 24);
              uint64_t v26 = v74;
              Class v27 = v77;
              if (v52 >= v51 >> 1)
              {
                unint64_t v49 = sub_10008CC88(v51 > 1, v52 + 1, 1, v49);
                *uint64_t v73 = v49;
              }

              *(void *)(v49 + 16) = v52 + 1;
              sub_100085C04( (uint64_t)v76,  v49 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
              + *(void *)(v71 + 72) * v52,
                type metadata accessor for KTCloudDevice.CloudState);
              (*(void (**)(char *, os_log_t))(v80 + 8))(v27, v81);
              uint64_t v25 = v75;
            }

            else
            {
              Class v27 = v77;
              (*(void (**)(char *, os_log_t))(v80 + 8))(v77, v81);
              sub_100072BE0(v39, v41);
            }

            uint64_t v22 = v38;
            uint64_t v24 = v37;
          }

          else
          {
            (*(void (**)(char *, os_log_t))(v80 + 8))(v27, v81);
          }
        }

        ++v28;
      }

      while (v24 != v28);
      goto LABEL_29;
    }

    __break(1u);
  }

  else
  {
    id v53 = v82;
    uint64_t v25 = _convertNSErrorToError(_:)(v19);

    swift_willThrow(v54);
    if (qword_1002E9B90 == -1) {
      goto LABEL_31;
    }
  }

  swift_once(&qword_1002E9B90, sub_100086A74);
LABEL_31:
  uint64_t v55 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v55, (uint64_t)qword_1002E9B98);
  id v56 = v9;
  swift_errorRetain(v25);
  id v57 = v56;
  uint64_t v58 = swift_errorRetain(v25);
  unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v61 = 138412546;
    id v82 = v57;
    id v63 = v57;
    os_log_t v81 = v59;
    id v64 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v61 + 4, v61 + 12);
    *uint64_t v62 = v57;

    *(_WORD *)(v61 + 12) = 2112;
    swift_errorRetain(v25);
    uint64_t v65 = (void *)_swift_stdlib_bridgeErrorToNSError(v25);
    id v82 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v61 + 14, v61 + 22);
    v62[1] = v65;
    swift_errorRelease(v25);
    swift_errorRelease(v25);
    os_log_t v66 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, v60, "record to update not found %@: %@", (uint8_t *)v61, 0x16u);
    uint64_t v67 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v62, 2LL, v67);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);

    swift_errorRelease(v25);
  }

  else
  {

    swift_errorRelease(v25);
    swift_errorRelease(v25);
    swift_errorRelease(v25);
  }

uint64_t sub_10008C500(void *a1)
{
  uint64_t v14 = 0LL;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v4 = (void *)swift_allocObject(&unk_10027E2B0, 40LL, 7LL);
  void v4[2] = a1;
  void v4[3] = &v14;
  void v4[4] = v1;
  uint64_t v5 = swift_allocObject(&unk_10027E2D8, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10008F438;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_100085D2C;
  uint64_t v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027E2F0;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v13;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120LL, 521LL, 32LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = v14;
    swift_release(v4);
    return v11;
  }

  return result;
}

uint64_t sub_10008C660(void *a1, void *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(uint64_t (**)(void *))(type metadata accessor for KTCloudRecords() + 448);
  id v5 = a2;
  uint64_t v6 = v4(a2);
  if (v7 >> 60 == 15)
  {

    return 0LL;
  }

  uint64_t v9 = v6;
  unint64_t v10 = v7;
  id v11 = [a1 ckrecord];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;

    sub_10007EB54(v9, v10);
    sub_100072B9C(v13, v15);
    sub_100072FD0(v13, v15);
    LOBYTE(v12) = v16;
    sub_10007EB9C(v9, v10);
    sub_100072BE0(v13, v15);
    sub_100072BE0(v13, v15);
    if ((v12 & 1) != 0)
    {

      sub_10007EB9C(v9, v10);
      return 0LL;
    }
  }

  else
  {
    sub_100072B9C(v9, v10);
    sub_10007EB9C(0LL, 0xF000000000000000LL);
    sub_10007EB9C(v9, v10);
  }

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 setCkrecord:isa];

  sub_10007EB9C(v9, v10);
  return 1LL;
}

uint64_t sub_10008C7E8(char a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v4 = swift_allocObject(&unk_10027E328, 32LL, 7LL);
  *(_BYTE *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject(&unk_10027E350, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10008FDE8;
  *(void *)(v5 + 24) = v4;
  void v10[4] = sub_100085D2C;
  uint64_t v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_1000807CC;
  v10[3] = &unk_10027E368;
  uint64_t v6 = _Block_copy(v10);
  uint64_t v7 = v11;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120LL, 555LL, 32LL, 1LL);
  swift_release(v4);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008C92C()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  sub_100090218(v0 + 56);
  return v0;
}

uint64_t sub_10008C968()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  sub_100090218(v0 + 56);
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t sub_10008C9AC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t sub_10008C9D4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320LL))() & 1;
}

uint64_t sub_10008CA00()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328LL))();
}

uint64_t sub_10008CA28()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352LL))();
}

uint64_t sub_10008CA50()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360LL))();
}

uint64_t sub_10008CA78()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 344LL))() & 1;
}

uint64_t sub_10008CAA4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368LL))();
}

uint64_t sub_10008CACC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376LL))();
}

uint64_t sub_10008CAF4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 336LL))();
}

uint64_t sub_10008CB1C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312LL))();
}

uint64_t sub_10008CB44()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392LL))();
}

void *sub_10008CB7C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100072CC4(&qword_1002E0870);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      __int128 v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      unint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      unint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10008FCA4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10008CC88(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100072CC4(&qword_1002E07F0);
  uint64_t v11 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for KTCloudDevice.CloudState(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000916FC(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10008CE90()
{
  sub_100072BE0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100072BE0(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10008CED4()
{
  return sub_100088314( *(void **)(v0 + 16),  *(_BYTE **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
}

uint64_t sub_10008CF08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008CF18(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10008CF28()
{
  sub_100072BE0(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_100072BE0(*(void *)(v0 + 40), *(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10008CF5C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  unint64_t v51 = *(void ***)(v0 + 56);
  id v2 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1002464F0;
  id v5 = [v1 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000914E8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v4);
  [v2 setPredicate:v9];

  id v53 = 0LL;
  id v10 = [v2 execute:&v53];
  id v11 = v53;
  if (!v10)
  {
    id v45 = v53;
    uint64_t v46 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v47);
    swift_errorRelease(v46);
    return;
  }

  uint64_t v12 = v10;
  unint64_t v49 = v2;
  uint64_t v13 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  id v15 = v11;

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v48 = v14;
    }
    else {
      uint64_t v48 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v48);
    if (v16) {
      goto LABEL_4;
    }
LABEL_30:
    swift_bridgeObjectRelease_n(v14, 2LL);

    return;
  }

  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v14);
  if (!v16) {
    goto LABEL_30;
  }
LABEL_4:
  if (v16 >= 1)
  {
    uint64_t v17 = 0LL;
    unint64_t v18 = v14 & 0xC000000000000001LL;
    uint64_t v52 = v16;
    uint64_t v50 = v14;
    while (1)
    {
      if (v18) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      }
      else {
        id v19 = *(id *)(v14 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      id v21 = objc_msgSend(v19, "registrationData", v49);
      if (!v21) {
        goto LABEL_7;
      }
      unint64_t v22 = v21;
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v25 = v24;

      id v26 = [v20 pushToken];
      if (v26)
      {
        Class v27 = v26;
        uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
        unint64_t v30 = v29;

        sub_100072FD0(v23, v25);
        if ((v31 & 1) != 0)
        {
          sub_100072FD0(v28, v30);
          if ((v32 & 1) != 0)
          {
            id v33 = [v20 ckstate];
            if (!v33) {
              goto LABEL_23;
            }
            uint64_t v34 = v33;
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
            uint64_t v37 = v36;

            if (!v37) {
              goto LABEL_23;
            }
            if (v35 == 0x646574656C6564LL && v37 == 0xE700000000000000LL)
            {
              swift_bridgeObjectRelease(0xE700000000000000LL);
              goto LABEL_22;
            }

            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, 0x646574656C6564LL, 0xE700000000000000LL, 0LL);
            swift_bridgeObjectRelease(v37);
            if ((v38 & 1) != 0)
            {
LABEL_22:
              sub_100072BE0(v28, v30);
              sub_100072BE0(v23, v25);
            }

            else
            {
LABEL_23:
              id v39 = objc_allocWithZone(&OBJC_CLASS___KTLoggableData);
              sub_100072B9C(v23, v25);
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              id v41 = [v39 initWithClientData:isa];
              sub_100072BE0(v23, v25);

              Class v42 = Data._bridgeToObjectiveC()().super.isa;
              [v41 setDeviceID:v42];

              id v43 = [v20 osVersion];
              [v41 setBuild:v43];
              sub_100072BE0(v23, v25);
              sub_100072BE0(v28, v30);

              uint64_t v44 = *v51;
              void *v51 = v41;
            }

            uint64_t v16 = v52;
            uint64_t v14 = v50;
            goto LABEL_7;
          }
        }

        sub_100072BE0(v28, v30);
        sub_100072BE0(v23, v25);
        uint64_t v16 = v52;
      }

      else
      {
        sub_100072BE0(v23, v25);
      }

uint64_t sub_10008D440()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008D450()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10008D460()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  id v47 = 0LL;
  id v3 = [v2 execute:&v47];
  id v4 = v47;
  if (!v3)
  {
    id v39 = v47;
    uint64_t v40 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v41);
    swift_errorRelease(v40);
    return;
  }

  id v5 = v3;
  uint64_t v6 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  id v8 = v4;

  id v43 = v2;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v42 = v7;
    }
    else {
      uint64_t v42 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v42);
    if (v9) {
      goto LABEL_4;
    }
LABEL_29:
    swift_bridgeObjectRelease_n(v7, 2LL);

    return;
  }

  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v7);
  if (!v9) {
    goto LABEL_29;
  }
LABEL_4:
  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    unint64_t v11 = v7 & 0xC000000000000001LL;
    uint64_t v12 = &selRef_recheck;
    uint64_t v45 = v9;
    uint64_t v46 = v7;
    unint64_t v44 = v7 & 0xC000000000000001LL;
    while (1)
    {
      if (v11) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      }
      else {
        id v13 = *(id *)(v7 + 8 * v10 + 32);
      }
      uint64_t v14 = v13;
      id v15 = objc_msgSend(v13, v12[21], v43);
      if (!v15) {
        goto LABEL_7;
      }
      uint64_t v16 = v15;
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v19 = v18;

      id v20 = [v14 pushToken];
      if (v20) {
        break;
      }
      sub_100072BE0(v17, v19);
LABEL_7:
      ++v10;

      if (v9 == v10) {
        goto LABEL_29;
      }
    }

    id v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v24 = v23;

    id v25 = [v14 ckstate];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v29 = v28;

      if (v29)
      {
        if (v27 == 0x646574656C6564LL && v29 == 0xE700000000000000LL)
        {
          swift_bridgeObjectRelease(0xE700000000000000LL);
LABEL_19:
          sub_100072BE0(v22, v24);
          sub_100072BE0(v17, v19);
LABEL_23:
          uint64_t v9 = v45;
          uint64_t v7 = v46;
          unint64_t v11 = v44;
          uint64_t v12 = &selRef_recheck;
          goto LABEL_7;
        }

        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, 0x646574656C6564LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v29);
        if ((v30 & 1) != 0) {
          goto LABEL_19;
        }
      }
    }

    id v31 = objc_allocWithZone(&OBJC_CLASS___KTLoggableData);
    sub_100072B9C(v17, v19);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v33 = [v31 initWithClientData:isa];
    sub_100072BE0(v17, v19);

    Class v34 = Data._bridgeToObjectiveC()().super.isa;
    [v33 setDeviceID:v34];

    id v35 = v33;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v37 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v36 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v37 >= v36 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
    }
    uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
    specialized Array._endMutation()(v38);
    sub_100072BE0(v17, v19);
    sub_100072BE0(v22, v24);

    goto LABEL_23;
  }

  __break(1u);
}

uint64_t sub_10008D808()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008D818()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10008D828()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  id v50 = 0LL;
  id v3 = [v2 execute:&v50];
  id v4 = v50;
  if (!v3)
  {
    id v42 = v50;
    uint64_t v43 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v44);
    swift_errorRelease(v43);
    return;
  }

  id v5 = v3;
  uint64_t v6 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  id v8 = v4;

  uint64_t v46 = v2;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v45 = v7;
    }
    else {
      uint64_t v45 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v45);
    if (v9) {
      goto LABEL_4;
    }
LABEL_29:
    swift_bridgeObjectRelease_n(v7, 2LL);

    return;
  }

  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v7);
  if (!v9) {
    goto LABEL_29;
  }
LABEL_4:
  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    unint64_t v11 = v7 & 0xC000000000000001LL;
    uint64_t v12 = &selRef_recheck;
    uint64_t v48 = v9;
    uint64_t v49 = v7;
    unint64_t v47 = v7 & 0xC000000000000001LL;
    while (1)
    {
      if (v11) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      }
      else {
        id v13 = *(id *)(v7 + 8 * v10 + 32);
      }
      uint64_t v14 = v13;
      id v15 = objc_msgSend(v13, v12[21], v46);
      if (!v15) {
        goto LABEL_7;
      }
      uint64_t v16 = v15;
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v19 = v18;

      id v20 = [v14 pushToken];
      if (v20) {
        break;
      }
      sub_100072BE0(v17, v19);
LABEL_7:
      ++v10;

      if (v9 == v10) {
        goto LABEL_29;
      }
    }

    id v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v24 = v23;

    id v25 = [v14 ckstate];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v29 = v28;

      if (v29)
      {
        if (v27 == 0x646574656C6564LL && v29 == 0xE700000000000000LL)
        {
          swift_bridgeObjectRelease(0xE700000000000000LL);
LABEL_19:
          sub_100072BE0(v22, v24);
          sub_100072BE0(v17, v19);
LABEL_23:
          uint64_t v9 = v48;
          uint64_t v7 = v49;
          unint64_t v11 = v47;
          uint64_t v12 = &selRef_recheck;
          goto LABEL_7;
        }

        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, 0x646574656C6564LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v29);
        if ((v30 & 1) != 0) {
          goto LABEL_19;
        }
      }
    }

    id v31 = objc_allocWithZone(&OBJC_CLASS___KTLoggableData);
    sub_100072B9C(v17, v19);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v33 = [v31 initWithClientData:isa];
    sub_100072BE0(v17, v19);

    Class v34 = Data._bridgeToObjectiveC()().super.isa;
    [v33 setDeviceID:v34];

    id v35 = [objc_allocWithZone(TransparencyCloudDevice) init];
    [v35 setLoggableData:v33];
    id v36 = [v14 ckstate];
    [v35 setState:v36];

    id v37 = [v14 serialNumber];
    [v35 setSerialNumber:v37];

    id v38 = v35;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v40 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v39 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v40 >= v39 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1LL);
    }
    uint64_t v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
    specialized Array._endMutation()(v41);
    sub_100072BE0(v17, v19);
    sub_100072BE0(v22, v24);

    goto LABEL_23;
  }

  __break(1u);
}

uint64_t sub_10008DC68()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008DC78()
{
  swift_release(*(void *)(v0 + 24));
  sub_100072BE0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100072BE0(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10008DCB4()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464F0;
  id v6 = [v2 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000914E8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  uint64_t v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v5);
  [v3 setPredicate:v10];

  id v76 = 0LL;
  id v11 = [v3 execute:&v76];
  id v12 = v76;
  if (v11)
  {
    id v13 = v11;
    uint64_t v14 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    id v16 = v12;

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0) {
        uint64_t v34 = v15;
      }
      else {
        uint64_t v34 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      id v17 = (id)_CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v15);
      if (v17)
      {
LABEL_4:
        if ((v15 & 0xC000000000000001LL) != 0)
        {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
        }

        else
        {
          if (!*(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            goto LABEL_33;
          }

          id v18 = *(id *)(v15 + 32);
        }

        id v17 = v18;
        swift_bridgeObjectRelease(v15);
        if (qword_1002E9B90 == -1)
        {
LABEL_8:
          uint64_t v19 = type metadata accessor for Logger(0LL);
          sub_100072DEC(v19, (uint64_t)qword_1002E9B98);
          id v20 = v2;
          id v21 = (os_log_s *)Logger.logObject.getter(v20);
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            id v73 = v3;
            unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v72 = v1;
            unint64_t v24 = (void *)swift_slowAlloc(32LL, -1LL);
            id v76 = v24;
            *(_DWORD *)unint64_t v23 = 136315138;
            id v25 = [v20 recordName];
            uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            unint64_t v28 = v27;

            uint64_t v74 = sub_10007C22C(v26, v28, (uint64_t *)&v76);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v23 + 4, v23 + 12);
            unint64_t v29 = v28;
            id v3 = v73;
            swift_bridgeObjectRelease(v29);

            _os_log_impl((void *)&_mh_execute_header, v21, v22, "add device: updating existing record %s", v23, 0xCu);
            swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
            char v30 = v24;
            uint64_t v1 = v72;
            swift_slowDealloc(v30, -1LL, -1LL);
            swift_slowDealloc(v23, -1LL, -1LL);
          }

          else
          {
          }

LABEL_27:
          sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
          id v58 = v17;
          Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          [v58 setInjected:isa];

          Class v60 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
          [v58 setLocal:v60];

          NSString v61 = String._bridgeToObjectiveC()();
          [v58 setCkstate:v61];

          uint64_t v62 = (void *)(*(uint64_t (**)(id))(*(void *)v1 + 152))([v58 setTimeToLive:0]);
          id v76 = 0LL;
          unsigned int v63 = [v62 save:&v76];

          id v64 = v76;
          if (v63)
          {
            id v65 = v76;
          }

          else
          {
            id v66 = v76;
            uint64_t v67 = _convertNSErrorToError(_:)(v64);

            swift_willThrow(v68);
            swift_errorRelease(v67);
            id v3 = v58;
          }

          goto LABEL_30;
        }

uint64_t sub_10008E470()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10008E480()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464F0;
  id v6 = [v2 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000914E8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  uint64_t v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v5);
  [v3 setPredicate:v10];

  id v29 = 0LL;
  id v11 = [v3 execute:&v29];
  id v12 = v29;
  if (!v11) {
    goto LABEL_16;
  }
  id v13 = v11;
  uint64_t v14 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  id v16 = v12;

  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v22 = v15;
    }
    else {
      uint64_t v22 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v15, 2LL);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v15);
    if (!v17) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v15);
    if (!v17) {
      goto LABEL_14;
    }
  }

  if (v17 >= 1)
  {
    uint64_t v18 = 0LL;
    do
    {
      if ((v15 & 0xC000000000000001LL) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
      }
      else {
        id v19 = *(id *)(v15 + 8 * v18 + 32);
      }
      id v20 = v19;
      ++v18;
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 setCkstate:v21];
    }

    while (v17 != v18);
LABEL_14:
    uint64_t v23 = swift_bridgeObjectRelease_n(v15, 2LL);
    unint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 152LL))(v23);
    id v29 = 0LL;
    unsigned __int8 v25 = [v24 save:&v29];

    id v12 = v29;
    if ((v25 & 1) != 0)
    {
      id v26 = v29;
LABEL_17:

      return;
    }

uint64_t sub_10008E758(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_10008E7E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = sub_100073FE0( (unint64_t *)&unk_1002E0430,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

void sub_10008E8AC(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  void v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  id v2 = (char *)&loc_10008E910 + dword_10008EAB4[sub_100084C04(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_10008E920()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_100072B9C(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_10007EAFC(&v11);
}

unint64_t sub_10008EAC4()
{
  unint64_t result = qword_1002E16C0;
  if (!qword_1002E16C0)
  {
    uint64_t v1 = sub_10007426C((uint64_t *)&unk_1002E0400);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E16C0);
  }

  return result;
}

void sub_10008EB10(_BYTE *a1@<X8>)
{
}

uint64_t sub_10008EB28()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10008EB54()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464F0;
  id v6 = [v2 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000914E8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  char v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v5);
  [v3 setPredicate:v10];

  id v31 = 0LL;
  id v11 = [v3 execute:&v31];
  id v12 = v31;
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    id v16 = v12;

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (v17) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v15);
      if (v17)
      {
LABEL_4:
        if (v17 < 1)
        {
          __break(1u);
          return;
        }

        uint64_t v18 = 0LL;
        id v19 = *(uint64_t (**)(void))(*(void *)v1 + 152LL);
        do
        {
          if ((v15 & 0xC000000000000001LL) != 0) {
            id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
          }
          else {
            id v20 = *(id *)(v15 + 8 * v18 + 32);
          }
          NSString v21 = v20;
          ++v18;
          uint64_t v22 = (void *)v19();
          [v22 deleteObject:v21];
        }

        while (v17 != v18);
      }
    }

    uint64_t v24 = swift_bridgeObjectRelease_n(v15, 2LL);
    unsigned __int8 v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 152LL))(v24);
    id v31 = 0LL;
    unsigned __int8 v26 = [v25 save:&v31];

    id v12 = v31;
    if ((v26 & 1) != 0)
    {
      id v27 = v31;

      return;
    }
  }

  id v28 = v12;
  uint64_t v29 = _convertNSErrorToError(_:)(v12);

  swift_willThrow(v30);
  swift_errorRelease(v29);
}

uint64_t sub_10008EE14()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008EE24()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10008EE48()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(_BYTE **)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 112LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464D0;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v6 = sub_1000914E8();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 32) = 0x676E696F6774756FLL;
  *(void *)(v5 + 40) = 0xE800000000000000LL;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 72) = 0x646574656C6564LL;
  *(void *)(v5 + 80) = 0xE700000000000000LL;
  uint64_t v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x800000010020F560LL, v5);
  [v3 setPredicate:v7];

  id v10 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v8 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1) {
    _BYTE *v2 = 1;
  }
}

uint64_t sub_10008F008()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008F018()
{
  return sub_10008F058(0x676E696F6774756FLL, 0xE800000000000000LL);
}

uint64_t sub_10008F030()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008F040()
{
  return sub_10008F058(0x646574656C6564LL, 0xE700000000000000LL);
}

uint64_t sub_10008F058(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(uint64_t **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  id v7 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1002464F0;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000914E8();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  id v10 = (void *)NSPredicate.init(format:_:)(0x2065746174736B63LL, 0xEC0000004025203DLL, v9);
  [v7 setPredicate:v10];

  id v23 = 0LL;
  id v11 = [v7 execute:&v23];
  id v12 = v23;
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    id v16 = v12;

    swift_retain(v5);
    uint64_t v17 = sub_10009152C(v15, v5);
    swift_release(v5);

    swift_bridgeObjectRelease(v15);
    uint64_t v18 = *v6;
    *unint64_t v6 = (uint64_t)v17;
    return swift_bridgeObjectRelease(v18);
  }

  else
  {
    id v20 = v23;
    uint64_t v21 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v22);
    return swift_errorRelease(v21);
  }

uint64_t sub_10008F228()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008F238()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

id sub_10008F26C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = (unint64_t *)v0[5];
  uint64_t v5 = v0[6];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v11 = v1;
    }
    else {
      uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    id result = (id)_CocoaArrayWrapper.endIndex.getter(v11);
    uint64_t v6 = (uint64_t)result;
    if (!result) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id result = (id)swift_bridgeObjectRetain(v1);
    if (!v6) {
      goto LABEL_13;
    }
  }

  if (v6 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v8 = 0LL;
  do
  {
    if ((v1 & 0xC000000000000001LL) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v1);
    }
    else {
      id v9 = *(id *)(v1 + 8 * v8 + 32);
    }
    id v10 = v9;
    ++v8;
    id v19 = v9;
    sub_10008BDE8(&v19, v2, v3, v4);
  }

  while (v6 != v8);
LABEL_13:
  uint64_t v12 = swift_bridgeObjectRelease(v1);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v12);
  id v19 = 0LL;
  unsigned __int8 v14 = [v13 save:&v19];

  if ((v14 & 1) != 0) {
    return v19;
  }
  id v18 = v19;
  id v15 = v19;
  uint64_t v16 = _convertNSErrorToError(_:)(v18);

  swift_willThrow(v17);
  return (id)swift_errorRelease(v16);
}

uint64_t sub_10008F3E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for KTCloudDevice.CloudState(uint64_t a1)
{
  return sub_100072DB8(a1, qword_1002E9CD0, (uint64_t)&nominal type descriptor for KTCloudDevice.CloudState);
}

uint64_t sub_10008F40C()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10008F438()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1002464F0;
  id v7 = [(id)v1 recordName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000914E8();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v6);
  [v4 setPredicate:v11];

  id v57 = 0LL;
  id v12 = [v4 execute:&v57];
  id v13 = v57;
  if (!v12)
  {
    id v29 = v57;
    uint64_t v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v31);
    swift_errorRelease(v30);
    if (qword_1002E9B90 == -1)
    {
LABEL_12:
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v32, (uint64_t)qword_1002E9B98);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      id v34 = (id)v1;
      uint64_t v35 = (void *)Logger.logObject.getter(v34);
      os_log_type_t v36 = v33;
      if (!os_log_type_enabled((os_log_t)v35, v33))
      {

LABEL_26:
        return;
      }

      id v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v38 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v37 = 138412290;
      id v57 = v34;
      id v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v37 + 4, v37 + 12);
      void *v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v36, "record not found %@", v37, 0xCu);
      uint64_t v40 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v38, 1LL, v40);
      uint64_t v41 = v38;
LABEL_24:
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      goto LABEL_26;
    }

uint64_t sub_10008F9F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008FA00(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x656B6F5468737570LL && a2 == 0xE90000000000006ELL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656B6F5468737570LL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 1635017060 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 7107700 && a2 == 0xE300000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(7107700LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else if (a1 == 0x754E6C6169726573LL && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  else if (a1 == 1936748641 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1936748641LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  else if (a1 == 0x64657463656A6E69LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 6LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64657463656A6E69LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

unint64_t sub_10008FCA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_9;
  }

  unint64_t v5 = a4 + 16 * a1 + 32;
  unint64_t v6 = a3 + 16 * v4;
  if (v5 < v6 && v5 + 16 * v4 > a3)
  {
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
    __break(1u);
    JUMPOUT(0x10008FD94LL);
  }

  swift_arrayInitWithCopy(a3);
  return v6;
}

uint64_t sub_10008FDC4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10008FDE8()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  if (v1 == 1)
  {
    sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
    unint64_t v6 = (void *)NSPredicate.init(format:_:)(0x3D3D206C61636F6CLL, 0xEE0065736C616620LL, _swiftEmptyArrayStorage);
    [v5 setPredicate:v6];
  }

  id v7 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v5];
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v2 + 152LL);
  uint64_t v9 = (void *)v8();
  id v41 = 0LL;
  id v10 = [v9 executeRequest:v7 error:&v41];

  id v11 = v41;
  if (v10)
  {
    id v12 = v41;

    if (!v1) {
      goto LABEL_22;
    }
  }

  else
  {
    id v13 = v41;
    uint64_t v14 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    if (!v1) {
      goto LABEL_22;
    }
  }

  id v16 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v17 = (void *)NSPredicate.init(format:_:)(0x3D3D206C61636F6CLL, 0xED00006575727420LL, _swiftEmptyArrayStorage);
  [v16 setPredicate:v17];

  id v41 = 0LL;
  id v18 = [v16 execute:&v41];
  id v19 = v41;
  if (v18)
  {
    uint64_t v20 = v18;
    uint64_t v21 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
    id v23 = v19;

    uint64_t v40 = v8;
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0) {
        uint64_t v32 = v22;
      }
      else {
        uint64_t v32 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v22, 2LL);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v32);
      swift_bridgeObjectRelease(v22);
      if (v24) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v22);
      if (v24)
      {
LABEL_10:
        if (v24 < 1)
        {
          __break(1u);
          return;
        }

        uint64_t v25 = 0LL;
        do
        {
          if ((v22 & 0xC000000000000001LL) != 0) {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v22);
          }
          else {
            id v26 = *(id *)(v22 + 8 * v25 + 32);
          }
          id v27 = v26;
          [v26 setCkrecord:0];
          ++v25;
          NSString v28 = String._bridgeToObjectiveC()();
          [v27 setCkstate:v28];
        }

        while (v24 != v25);
      }
    }

    swift_bridgeObjectRelease_n(v22, 2LL);

    uint64_t v8 = v40;
    goto LABEL_22;
  }

  id v29 = v41;
  uint64_t v30 = _convertNSErrorToError(_:)(v19);

  swift_willThrow(v31);
  swift_errorRelease(v30);
LABEL_22:
  os_log_type_t v33 = (void *)v8();
  id v41 = 0LL;
  unsigned int v34 = [v33 save:&v41];

  id v35 = v41;
  if (v34)
  {
    id v36 = v41;
  }

  else
  {
    id v37 = v41;
    uint64_t v38 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v39);
    swift_errorRelease(v38);
    id v5 = v7;
  }
}

uint64_t sub_100090208()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100090218(uint64_t a1)
{
  return a1;
}

_OWORD *sub_10009023C(_OWORD *a1, uint64_t a2, int *a3)
{
  NSString v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)NSString v4 = *(void *)a2;
    NSString v4 = (_OWORD *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *(void *)a2;
      sub_100072B9C(*(void *)a2, *(void *)(a2 + 8));
      *(void *)NSString v4 = v9;
      *((void *)v4 + 1) = v7;
    }

    id v10 = (uint64_t *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_100072B9C(*v10, *(void *)(a2 + 24));
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }

    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (const void *)(a2 + v13);
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100072CC4((uint64_t *)&unk_1002DF740);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)((char *)v4 + v20);
    uint64_t v25 = (void *)(a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[9];
    uint64_t v28 = a3[10];
    uint64_t v29 = *(void *)(a2 + v27);
    *(void *)((char *)v4 + v27) = v29;
    *((_BYTE *)v4 + v2_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + v28);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
  }

  return v4;
}

uint64_t sub_1000903E0(uint64_t *a1, int *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_100072BE0(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_100072BE0(a1[2], v5);
  }
  unint64_t v6 = (char *)a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[9]));
}

uint64_t sub_1000904A8(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_100072B9C(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }

  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_100072B9C(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }

  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (uint64_t *)((char *)a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = *(uint64_t *)((char *)a2 + v25);
  *(void *)(a1 + v25) = v27;
  *(_BYTE *)(a1 + v26) = *((_BYTE *)a2 + v26);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t *sub_100090620(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_100072B9C(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_1000908A0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *(void *)a2;
  sub_100072B9C(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_100072BE0(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      sub_100072B9C(*v11, *(void *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v12 >> 60 == 15)
  {
    sub_1000908A0((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }

  uint64_t v14 = *v11;
  sub_100072B9C(*v11, *(void *)(a2 + 24));
  uint64_t v15 = a1[2];
  unint64_t v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_100072BE0(v15, v16);
LABEL_15:
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_21;
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_20;
  }

  if (v24)
  {
LABEL_20:
    uint64_t v25 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_21;
  }

  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
LABEL_21:
  uint64_t v26 = a3[7];
  uint64_t v27 = (uint64_t *)((char *)a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  uint64_t v29 = v28[1];
  uint64_t v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = a3[8];
  uint64_t v32 = (uint64_t *)((char *)a1 + v31);
  os_log_type_t v33 = (void *)(a2 + v31);
  void *v32 = *v33;
  uint64_t v34 = v33[1];
  uint64_t v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[9];
  uint64_t v37 = *(uint64_t *)((char *)a1 + v36);
  uint64_t v38 = *(void *)(a2 + v36);
  *(uint64_t *)((char *)a1 + v36) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000908A0(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000908D4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  return a1;
}

uint64_t sub_1000909C8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000908A0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  sub_100072BE0(v8, v6);
LABEL_6:
  uint64_t v9 = (_OWORD *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }

  unint64_t v11 = *(void *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1000908A0(a1 + 16);
    goto LABEL_9;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v9;
  *(void *)(a1 + 24) = v11;
  sub_100072BE0(v12, v10);
LABEL_11:
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_17;
    }

    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_16;
  }

  if (v20)
  {
LABEL_16:
    uint64_t v21 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_17;
  }

  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
LABEL_17:
  uint64_t v22 = a3[7];
  int v23 = (void *)(a1 + v22);
  int v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = v23[1];
  *int v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a3[8];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v33 = v29[1];
  void *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a3[9];
  uint64_t v35 = *(void *)(a1 + v34);
  *(void *)(a1 + v34) = *(void *)(a2 + v34);
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100090BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090BCC);
}

uint64_t sub_100090BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100090C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090C6C);
}

uint64_t sub_100090C6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 24),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + _Block_object_dispose(va, 8) = a2;
  return result;
}

void sub_100090CF0(uint64_t a1)
{
  v4[0] = &unk_100248530;
  v4[1] = &unk_100248530;
  sub_100090D84(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_100248548;
    void v4[4] = &unk_100248548;
    void v4[5] = &unk_100248560;
    v4[6] = &unk_100248578;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
  }

void sub_100090D84(uint64_t a1)
{
  if (!qword_1002E0530)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002E0530);
    }
  }

uint64_t type metadata accessor for KTCloudDevice()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd13KTCloudDevice);
}

uint64_t *sub_100090DF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100072B9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100072B9C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  }

  return a1;
}

uint64_t sub_100090EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100090F04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100072B9C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  return a1;
}

uint64_t *sub_100090F90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100072B9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100072BE0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100072B9C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100072BE0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

_OWORD *sub_10009102C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_100091088(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100072BE0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100072BE0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_100091108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100091114);
}

uint64_t sub_100091114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_10009119C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000911A8);
}

char *sub_1000911A8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100091224(uint64_t a1)
{
  v4[0] = &unk_1002485E8;
  v4[1] = &unk_1002485E8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for CloudDeviceData.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CloudDeviceData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}
}

  uint64_t v30 = 0LL;
  *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v31,  v33,  v32));
LABEL_30:

  return v30;
}

    uint64_t v27 = 0LL;
    goto LABEL_42;
  }

  int v19 = v18;
  -[IdsMutation setMutationType:](v11, "setMutationType:", v41);
  uint64_t v40 = 0LL;
  int v20 = -[TLSMessageClass parseUint64:end:result:](v11, "parseUint64:end:result:", v19, v10, &v40);
  if (!v20)
  {
    if (a4)
    {
      uint64_t v14 = kTransparencyErrorDecode;
      uint64_t v15 = @"failed to parse mutation timestamp from Mutation";
      uint64_t v16 = -240LL;
      goto LABEL_16;
    }

    goto LABEL_17;
  }

  uint64_t v21 = v20;
  -[IdsMutation setMutationMs:](v11, "setMutationMs:", v40);
  uint64_t v39 = 0LL;
  uint64_t v22 = -[TLSMessageClass parseVRFOutput:end:result:](v11, "parseVRFOutput:end:result:", v21, v10, &v39);
  int v23 = v39;
  if (v22)
  {
    -[IdsMutation setUriVRFOutput:](v11, "setUriVRFOutput:", v23);
    int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v22, v10 - v22));
    switch(-[IdsMutation mutationType](v11, "mutationType"))
    {
      case 1u:
      case 2u:
        uint64_t v38 = 0LL;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[IdsDeviceMutation parseFromData:error:]( &OBJC_CLASS___IdsDeviceMutation,  "parseFromData:error:",  v24,  &v38));
        uint64_t v26 = v38;
        goto LABEL_21;
      case 3u:
        uint64_t v36 = 0LL;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[OptInOut parseFromData:error:](&OBJC_CLASS___OptInOut, "parseFromData:error:", v24, &v36));
        uint64_t v28 = v36;
        if (!v25) {
          goto LABEL_32;
        }
        [v25 setIdsMutation:v11];
        -[IdsMutation setOptInOut:](v11, "setOptInOut:", v25);
        goto LABEL_30;
      case 4u:
      case 5u:
        uint64_t v37 = 0LL;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[IdsDeviceMutationWithExt parseFromData:error:]( &OBJC_CLASS___IdsDeviceMutationWithExt,  "parseFromData:error:",  v24,  &v37));
        uint64_t v26 = v37;
LABEL_21:
        uint64_t v28 = v26;
        if (!v25) {
          goto LABEL_32;
        }
        [v25 setIdsMutation:v11];
        -[IdsMutation setIdsDeviceMutation:](v11, "setIdsDeviceMutation:", v25);
        goto LABEL_30;
      case 6u:
        uint64_t v35 = 0LL;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[OptInOutMutation parseFromData:error:]( &OBJC_CLASS___OptInOutMutation,  "parseFromData:error:",  v24,  &v35));
        uint64_t v28 = v35;
        if (v25)
        {
          [v25 setIdsMutation:v11];
          -[IdsMutation setOptInOutMutation:](v11, "setOptInOutMutation:", v25);
LABEL_30:
          uint64_t v29 = (char *)[v25 parsedLength] + (void)v22;

          uint64_t v34 = 0LL;
          uint64_t v30 = -[TLSMessageClass parseExtensions:end:result:](v11, "parseExtensions:end:result:", v29, v10, &v34);
          uint64_t v31 = v34;
          if (v30)
          {
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v31));
            -[IdsMutation setExtensions:](v11, "setExtensions:", v32);

            uint64_t v27 = v11;
          }

          else
          {
            uint64_t v27 = 0LL;
            if (a4) {
              *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -248LL,  @"failed to parse extensions from Mutation"));
            }
          }
        }

        else
        {
LABEL_32:
          if (a4 && v28) {
            *a4 = v28;
          }

LABEL_36:
          uint64_t v27 = 0LL;
        }

        break;
      default:
        if (!a4) {
          goto LABEL_36;
        }
        uint64_t v27 = 0LL;
        *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -273LL,  @"unknown mutation type in mutation"));
        break;
    }
  }

  else
  {
    uint64_t v27 = 0LL;
    if (a4) {
      *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -241LL,  @"failed to parse uri VRF output from Mutation"));
    }
  }

LABEL_42:
  return v27;
}

  return v20;
}

  return v12;
}

uint64_t storeEnumTagSinglePayload for CloudDeviceData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100091380 + 4 * byte_1002484A5[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000913B4 + 4 * asc_1002484A0[v4]))();
}

uint64_t sub_1000913B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000913BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000913C4LL);
  }
  return result;
}

uint64_t sub_1000913D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000913D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000913DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000913E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000913F0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000913F8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudDeviceData.CodingKeys()
{
  return &type metadata for CloudDeviceData.CodingKeys;
}

unint64_t sub_100091414()
{
  unint64_t result = qword_1002E9DE0[0];
  if (!qword_1002E9DE0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10024869C, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, qword_1002E9DE0);
  }

  return result;
}

unint64_t sub_10009145C()
{
  unint64_t result = qword_1002E9EF0;
  if (!qword_1002E9EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10024860C, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002E9EF0);
  }

  return result;
}

unint64_t sub_1000914A4()
{
  unint64_t result = qword_1002E9EF8[0];
  if (!qword_1002E9EF8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100248634, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, qword_1002E9EF8);
  }

  return result;
}

unint64_t sub_1000914E8()
{
  unint64_t result = qword_1002E07E0;
  if (!qword_1002E07E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002E07E0);
  }

  return result;
}

void *sub_10009152C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    uint64_t v4 = 4LL;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      unsigned int v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL)) {
        break;
      }
      id v8 = [v5 recordID];
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        uint64_t v12 = v11;

        sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
        id v13 = *(id *)(a2 + 40);
        v14._countAndFlagsBits = v10;
        v14._object = v12;
        v15.super.Class isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v17 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v16 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v17 >= v16 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
        }
        uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15.super.isa);
        specialized Array._endMutation()(v18);
      }

      else
      {
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_16:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_1000916FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10009187C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002E9F88);
  sub_100072DEC(v0, (uint64_t)qword_1002E9F88);
  return Logger.init(transparencyCategory:)(0x6C43657461647075LL, 0xEB0000000064756FLL);
}

id KTUpdateCloudDeviceOperation.__allocating_init(deps:context:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id KTUpdateCloudDeviceOperation.init(deps:context:)(uint64_t a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for KTUpdateCloudDeviceOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd28KTUpdateCloudDeviceOperation);
}

Swift::Void __swiftcall KTUpdateCloudDeviceOperation.groupStart()()
{
  __int16 v1 = v0;
  int v2 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
  id v3 = [v2 ckdatabase];
  if (v3)
  {
    id v21 = v3;
    id v4 = [v2 cloudRecords];
    if (!v4)
    {
      unint64_t v17 = v21;
      goto LABEL_8;
    }

    id v5 = v4;
    id v6 = [v4 pendingRecords];
    uint64_t v7 = sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0) {
        uint64_t v18 = v8;
      }
      else {
        uint64_t v18 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(v8);
      if (v19) {
        goto LABEL_5;
      }
    }

    else if (*(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_5:
      v23.value._rawValue = (void *)sub_10007D178( 0LL,  (unint64_t *)&qword_1002E08A0,  &OBJC_CLASS___CKModifyRecordsOperation_ptr);
      v22.value._rawValue = (void *)v8;
      v22.is_nil = 0;
      uint64_t v9 = (void *)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v22, v23);
      [v9 setQualityOfService:25];
      id v10 = v9;
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 setName:v11];

      id v12 = [objc_allocWithZone(NSBlockOperation) init];
      [v1 dependOnBeforeGroupFinished:v12];
      uint64_t v13 = swift_allocObject(&unk_10027E4E8, 32LL, 7LL);
      *(void *)(v13 + 16) = v1;
      *(void *)(v13 + 24) = v5;
      id v14 = v1;
      swift_unknownObjectRetain(v5);
      CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_100091D18, v13);
      uint64_t v15 = swift_allocObject(&unk_10027E510, 32LL, 7LL);
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = v12;
      id v16 = v14;
      id v20 = v12;
      CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_100092F08, v15);
      [v21 addOperation:v10];

      swift_unknownObjectRelease(v5);
      unint64_t v17 = v20;
LABEL_8:

      return;
    }

    swift_unknownObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
  }

uint64_t sub_100091CEC()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100091D18(void *a1, void *a2, char a3)
{
  id v5 = *(void **)(v3 + 24);
  id v6 = *(void **)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps);
  if ((a3 & 1) != 0)
  {
    id v132 = *(id *)(v3 + 24);
    os_log_t v134 = *(os_log_t *)(v3 + 16);
    swift_errorRetain(a2);
    os_log_type_t type = v6;
    id v19 = [v6 logger];
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = (void *)_convertErrorToNSError(_:)(a2);
    [v19 logResultForEvent:v20 hardFailure:1 result:v21];

    if (qword_1002E9F80 != -1) {
      swift_once(&qword_1002E9F80, sub_10009187C);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v22, (uint64_t)qword_1002E9F88);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    sub_10007EAE4(a2, 1);
    id v24 = a1;
    sub_10007EAE4(a2, 1);
    id v25 = v24;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    if (os_log_type_enabled(v26, v23))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v27 = 138412546;
      id v141 = v25;
      id v29 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v27 + 4, v27 + 12);
      void *v28 = v25;

      *(_WORD *)(v27 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(a2);
      id v141 = (id)v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v27 + 14, v27 + 22);
      v28[1] = v30;
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v23,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@",  (uint8_t *)v27,  0x16u);
      uint64_t v31 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v28, 2LL, v31);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
    }

    id v141 = a2;
    swift_errorRetain(a2);
    uint64_t v41 = sub_100072CC4(&qword_1002DF260);
    type metadata accessor for CKError(0LL);
    uint64_t v43 = v42;
    if ((swift_dynamicCast(&v140, &v141, v41, v42, 6LL) & 1) == 0)
    {
      sub_10007EAE4(a2, 1);
      id v57 = v25;
      sub_10007EAE4(a2, 1);
      id v58 = v57;
      unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = swift_slowAlloc(22LL, -1LL);
        uint64_t v62 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v61 = 138412546;
        id v141 = v58;
        id v63 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v61 + 4, v61 + 12);
        *uint64_t v62 = v58;

        *(_WORD *)(v61 + 12) = 2112;
        swift_errorRetain(a2);
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError(a2);
        id v141 = (id)v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v61 + 14, v61 + 22);
        v62[1] = v64;
        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@",  (uint8_t *)v61,  0x16u);
        uint64_t v65 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v62, 2LL, v65);
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {

        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
      }

      id v66 = (void *)_convertErrorToNSError(_:)(a2);
      -[os_log_s setError:](v134, "setError:", v66);
      sub_10007EAF0(a2, 1);

      return;
    }

    uint64_t v44 = v140;
    uint64_t v45 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
    _BridgedStoredNSError.code.getter(&v141, v43, v45);
    if (v141 == (id)11)
    {
      sub_10007EAE4(a2, 1);
      id v67 = v25;
      sub_10007EAE4(a2, 1);
      id v68 = v67;
      uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
      os_log_type_t v70 = static os_log_type_t.error.getter();
      v136 = v69;
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc(22LL, -1LL);
        uint64_t v72 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v71 = 138412546;
        id v140 = v68;
        id v73 = v44;
        id v74 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71 + 4, v71 + 12);
        *uint64_t v72 = v68;

        uint64_t v44 = v73;
        *(_WORD *)(v71 + 12) = 2112;
        swift_errorRetain(a2);
        uint64_t v75 = _swift_stdlib_bridgeErrorToNSError(a2);
        id v140 = (id)v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71 + 14, v71 + 22);
        v72[1] = v75;
        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v136,  v70,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: deleted: %@ %@",  (uint8_t *)v71,  0x16u);
        uint64_t v76 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v72, 2LL, v76);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
      }

      else
      {

        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
      }

      uint64_t v109 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v44);
      if (v109)
      {
        unsigned int v110 = (void *)v109;
        [v132 deleteRecordWithCkrecord:v109];
        sub_10007EAF0(a2, 1);

LABEL_45:
        return;
      }
    }

    else
    {
      if (v141 == (id)26)
      {
        type metadata accessor for KTCKZone();
        uint64_t v77 = sub_100078588((uint64_t)objc_retain(*(id *)((char *)v134
                                                       + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context)));
        id v78 = [v25 zoneID];
        id v79 = [v78 zoneName];

        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        uint64_t v82 = v81;

        os_log_t v137 = (os_log_t)v77;
        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v77 + 120LL))( v80,  v82,  sub_10007BE00,  0LL);
        swift_bridgeObjectRelease(v82);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"CloudKitZoneRecreate");
        uint64_t v84 = v83;
        id v85 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
        NSString v86 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v84);
        id v87 = [v85 initWithFlag:v86 delayInSeconds:0.1];

        id v88 = v25;
        unint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v133 = v44;
          uint64_t v92 = swift_slowAlloc(32LL, -1LL);
          id v140 = (id)v92;
          *(_DWORD *)uint64_t v91 = 136315138;
          id v93 = [v88 zoneID];
          id v94 = [v93 zoneName];

          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          unint64_t v97 = v96;

          uint64_t v139 = sub_10007C22C(v95, v97, (uint64_t *)&v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease(v97);

          _os_log_impl((void *)&_mh_execute_header, v89, v90, "will recreate the zone %s", v91, 0xCu);
          swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v98 = v92;
          uint64_t v44 = v133;
          swift_slowDealloc(v98, -1LL, -1LL);
          swift_slowDealloc(v91, -1LL, -1LL);
        }

        else
        {
        }

        id v111 = [type flagHandler];
        if (v111)
        {
          id v112 = v111;
          [v111 handlePendingFlag:v87];
          sub_10007EAF0(a2, 1);

          swift_unknownObjectRelease(v112);
        }

        else
        {
          sub_10007EAF0(a2, 1);
        }

        swift_release(v137);
        return;
      }

      if (v141 == (id)14)
      {
        uint64_t v46 = related decl 'e' for CKErrorCode.serverRecord.getter(v44);
        if (v46)
        {
          os_log_type_t v47 = (void *)v46;
          sub_10007EAE4(a2, 1);
          id v48 = v25;
          sub_10007EAE4(a2, 1);
          id v49 = v48;
          id v50 = (os_log_s *)Logger.logObject.getter(v49);
          os_log_type_t v51 = static os_log_type_t.error.getter();
          id v135 = v50;
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = swift_slowAlloc(22LL, -1LL);
            unint64_t v53 = (void *)swift_slowAlloc(16LL, -1LL);
            *(_DWORD *)uint64_t v52 = 138412546;
            os_log_type_t typea = v51;
            id v140 = v49;
            id v54 = v49;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v52 + 4, v52 + 12);
            *unint64_t v53 = v49;

            *(_WORD *)(v52 + 12) = 2112;
            swift_errorRetain(a2);
            uint64_t v55 = _swift_stdlib_bridgeErrorToNSError(a2);
            id v140 = (id)v55;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v52 + 14, v52 + 22);
            v53[1] = v55;
            sub_10007EAF0(a2, 1);
            sub_10007EAF0(a2, 1);
            _os_log_impl( (void *)&_mh_execute_header,  v135,  typea,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: serverRecord: %@ %@",  (uint8_t *)v52,  0x16u);
            uint64_t v56 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
            swift_arrayDestroy(v53, 2LL, v56);
            swift_slowDealloc(v53, -1LL, -1LL);
            swift_slowDealloc(v52, -1LL, -1LL);
          }

          else
          {

            sub_10007EAF0(a2, 1);
            sub_10007EAF0(a2, 1);
          }

          unint64_t v113 = v132;
          CKRecord.recordType.getter([v132 updatedRecordWithCkrecord:v47]);
          uint64_t v124 = v123;
          NSString v117 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v124);
          uint64_t v125 = sub_100072CC4(&qword_1002E0AE0);
          uint64_t v126 = swift_allocObject(v125, 40LL, 7LL);
          *(_OWORD *)(v126 + 16) = xmmword_1002487A0;
          id v127 = [v47 recordID];
          *(void *)(v126 + 32) = v127;
          id v140 = (id)v126;
          specialized Array._endMutation()(v127);
          uint64_t v128 = (uint64_t)v140;
          sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
          v122.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v128);
          goto LABEL_44;
        }
      }

      else
      {
        sub_10007EAE4(a2, 1);
        id v99 = v25;
        sub_10007EAE4(a2, 1);
        id v100 = v99;
        Class v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.error.getter();
        uint64_t v138 = v101;
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = swift_slowAlloc(22LL, -1LL);
          uint64_t v104 = (void *)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v103 = 138412546;
          id v140 = v100;
          unint64_t v105 = v44;
          id v106 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 4, v103 + 12);
          void *v104 = v100;

          uint64_t v44 = v105;
          *(_WORD *)(v103 + 12) = 2112;
          swift_errorRetain(a2);
          uint64_t v107 = _swift_stdlib_bridgeErrorToNSError(a2);
          id v140 = (id)v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 14, v103 + 22);
          v104[1] = v107;
          sub_10007EAF0(a2, 1);
          sub_10007EAF0(a2, 1);
          _os_log_impl( (void *)&_mh_execute_header,  v138,  v102,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: ck fail: %@ %@",  (uint8_t *)v103,  0x16u);
          uint64_t v108 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
          swift_arrayDestroy(v104, 2LL, v108);
          swift_slowDealloc(v104, -1LL, -1LL);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        else
        {

          sub_10007EAF0(a2, 1);
          sub_10007EAF0(a2, 1);
        }

        unint64_t v113 = v132;

        uint64_t v114 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v44);
        if (v114)
        {
          os_log_type_t v47 = (void *)v114;
          ((void (*)(void))CKRecord.recordType.getter)();
          uint64_t v116 = v115;
          NSString v117 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v116);
          uint64_t v118 = sub_100072CC4(&qword_1002E0AE0);
          uint64_t v119 = swift_allocObject(v118, 40LL, 7LL);
          *(_OWORD *)(v119 + 16) = xmmword_1002487A0;
          id v120 = [v47 recordID];
          *(void *)(v119 + 32) = v120;
          id v140 = (id)v119;
          specialized Array._endMutation()(v120);
          uint64_t v121 = (uint64_t)v140;
          sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
          v122.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v121);
LABEL_44:
          NSString v129 = String._bridgeToObjectiveC()();
          [v113 recordUpdateCloudStateWithType:v117 records:v122.super.isa newState:v129];
          sub_10007EAF0(a2, 1);

          goto LABEL_45;
        }
      }
    }

    sub_10007EAF0(a2, 1);
    goto LABEL_45;
  }

  id v7 = a2;
  id v8 = [v6 logger];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 logResultForEvent:v9 hardFailure:0 result:0];

  if (qword_1002E9F80 != -1) {
    swift_once(&qword_1002E9F80, sub_10009187C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v10, (uint64_t)qword_1002E9F88);
  os_log_type_t v11 = static os_log_type_t.info.getter();
  id v12 = v7;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v11))
  {
    id v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v14 = 138412290;
    id v141 = v12;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v14 + 4, v14 + 12);
    *uint64_t v15 = a2;
    sub_10007EAF0(a2, 0);
    sub_10007EAF0(a2, 0);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v11,  "KTUpdateCloudDeviceOperation:perRecordSaveBlock: success: %@",  v14,  0xCu);
    uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v15, 1LL, v17);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    sub_10007EAF0(a2, 0);
    sub_10007EAF0(a2, 0);
  }

  CKRecord.recordType.getter([v5 updatedRecordWithCkrecord:v12]);
  uint64_t v33 = v32;
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = sub_100072CC4(&qword_1002E0AE0);
  uint64_t v36 = swift_allocObject(v35, 40LL, 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_1002487A0;
  id v37 = [v12 recordID];
  *(void *)(v36 + 32) = v37;
  id v141 = (id)v36;
  specialized Array._endMutation()(v37);
  id v38 = v141;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  NSString v40 = String._bridgeToObjectiveC()();
  [v5 recordUpdateCloudStateWithType:v34 records:isa newState:v40];

  sub_10007EAF0(a2, 0);
}

uint64_t sub_100092EDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100092F08(uint64_t a1, char a2)
{
  id v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    id v12 = (void *)_convertErrorToNSError(_:)(a1);
    [v4 setError:v12];

    if (qword_1002E9F80 != -1) {
      swift_once(&qword_1002E9F80, sub_10009187C);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v13, (uint64_t)qword_1002E9F88);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    swift_errorRetain(a1);
    uint64_t v15 = swift_errorRetain(a1);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = v14;
    if (os_log_type_enabled(v16, v14))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v19 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v18 = 138412290;
      swift_errorRetain(a1);
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v33 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
      uint64_t *v19 = v20;
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: fail: %@",  v18,  0xCu);
      uint64_t v21 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v19, 1LL, v21);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
    }

    uint64_t v22 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
    id v23 = [v22 reachabilityTracker];
    id v24 = (void *)_convertErrorToNSError(_:)(a1);
    unsigned int v25 = [v23 isNetworkError:v24];

    if (v25) {
      uint64_t v26 = 2LL;
    }
    else {
      uint64_t v26 = 0LL;
    }
    id v27 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
    NSString v28 = String._bridgeToObjectiveC()();
    id v29 = [v27 initWithFlag:v28 conditions:v26 delayInSeconds:0.2];

    id v30 = [v22 flagHandler];
    if (v30)
    {
      id v31 = v30;
      [v30 handlePendingFlag:v29];
      sub_10007EAD8(a1, 1);
      swift_unknownObjectRelease(v31);
    }

    else
    {
      sub_10007EAD8(a1, 1);
    }
  }

  else
  {
    if (qword_1002E9F80 != -1) {
      swift_once(&qword_1002E9F80, sub_10009187C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100072DEC(v5, (uint64_t)qword_1002E9F88);
    id v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      NSString v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: success",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    id v10 =  [*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] networkTimeout];
    [v10 networkWithFeedback:0];
    swift_unknownObjectRelease(v10);
  }

  id v32 = [v4 operationQueue];
  [v32 addOperation:v3];
}

void KTUpdateCloudDeviceOperation.init()()
{
}

id KTUpdateCloudDeviceOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t *sub_100093410()
{
  return &qword_1002E0940;
}

uint64_t sub_10009341C()
{
  uint64_t v0 = qword_1002E0940;
  swift_bridgeObjectRetain(off_1002E0948);
  return v0;
}

uint64_t sub_10009346C(uint64_t a1, char *a2)
{
  id v4 = off_1002E0948;
  qword_1002E0940 = a1;
  off_1002E0948 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000934C4(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100093504(uint64_t a1)
{
  return sub_100095E70(a1);
}

unint64_t sub_10009351C()
{
  return 0xD000000000000020LL;
}

Swift::Int sub_100093538(uint64_t a1, uint64_t a2)
{
  void v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100093598(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000967B8();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000935D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100095E70(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_100093600(uint64_t a1)
{
  unint64_t v2 = sub_1000967B8();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100093628(uint64_t a1)
{
  unint64_t v2 = sub_1000967B8();
  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_100093650(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000965A4();
  unint64_t v5 = sub_100079920();
  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_100093694(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000967B8();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000936D4(uint64_t result)
{
  *__int16 v1 = result;
  return result;
}

uint64_t sub_1000936DC(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t sub_1000936E4(uint64_t result)
{
  *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = result;
  return result;
}

  ;
}

Swift::Int *eligibilityDBDataLifetimeDays.unsafeMutableAddressor()
{
  return &eligibilityDBDataLifetimeDays;
}

unint64_t static KTEligibilityDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_100093740()
{
  return swift_retain(*(void *)(v0 + 24));
}

id sub_100093748()
{
  return *(id *)(v0 + 32);
}

uint64_t variable initialization expression of KTEligibilityDB.logger()
{
  return Logger.init(subsystem:category:)( 0xD000000000000024LL,  0x800000010020F6B0LL,  0xD00000000000001CLL,  0x800000010020F6E0LL);
}

uint64_t sub_100093788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t KTEligibilityDB.__allocating_init(path:)(char *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  KTEligibilityDB.init(path:)(a1);
  return v3;
}

void *KTEligibilityDB.init(path:)(char *a1)
{
  unint64_t v2 = v1;
  uint64_t v50 = *v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  unint64_t v53 = *(uint8_t **)(v4 - 8);
  id v54 = (void *)v4;
  __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0LL);
  __chkstk_darwin(v51);
  uint64_t v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  NSString v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v57 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100072CC4(&qword_1002DF250);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v2[2] = 1LL;
  id v16 = (char *)v2 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  Logger.init(subsystem:category:)( 0xD000000000000024LL,  0x800000010020F6B0LL,  0xD00000000000001CLL,  0x800000010020F6E0LL);
  type metadata accessor for KTSwiftDB();
  os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v15, (uint64_t)a1, v10);
  uint64_t v58 = v11;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
  uint64_t v18 = KTSwiftDB.__allocating_init(url:)((uint64_t)v15);
  if (v18)
  {
    uint64_t v19 = v18;
    id v57 = (char *)v10;
    uint64_t v20 = a1;
    v2[3] = v18;
    sub_100095EC8();
    uint64_t v21 = swift_retain(v19);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v61 = _swiftEmptyArrayStorage;
    uint64_t v22 = sub_100073FE0( (unint64_t *)&unk_1002E1080,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
    uint64_t v23 = sub_100072CC4(&qword_1002E0970);
    unint64_t v24 = sub_100095F04();
    unsigned int v25 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v23, v24, v51, v22);
    uint64_t v26 = v55;
    (*((void (**)(char *, void, void *))v53 + 13))( v55,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v54);
    void v2[4] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000018LL,  0x800000010020F700LL,  v9,  v25,  v26,  0LL);
    id v27 = v56;
    OS_dispatch_queue.sync<A>(execute:)(sub_100095F50, v2, (char *)&type metadata for () + 8);
    if (v27)
    {
      swift_release(v2);
      swift_release(v19);
      (*(void (**)(char *, char *))(v58 + 8))(v20, v57);
    }

    else
    {
      (*(void (**)(char *, char *))(v58 + 8))(v20, v57);
      swift_release(v19);
    }
  }

  else
  {
    uint64_t v56 = v2;
    os_log_type_t v28 = static os_log_type_t.error.getter(0LL);
    uint64_t v29 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v57, a1, v10);
    id v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = v28;
    BOOL v32 = os_log_type_enabled(v30, v28);
    uint64_t v33 = v10;
    uint64_t v34 = v16;
    uint64_t v35 = v58;
    if (v32)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v54 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v34;
      uint64_t v61 = v54;
      *(_DWORD *)uint64_t v36 = 136315138;
      unint64_t v53 = v36 + 4;
      uint64_t v37 = sub_100073FE0( &qword_1002E0960,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      id v38 = v57;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v10, v37);
      unint64_t v41 = v40;
      uint64_t v59 = sub_10007C22C(v39, v40, (uint64_t *)&v61);
      uint64_t v33 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v53, v36 + 12);
      swift_bridgeObjectRelease(v41);
      uint64_t v42 = *(void (**)(char *, uint64_t))(v35 + 8);
      v42(v38, v10);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No database at path %s", v36, 0xCu);
      uint64_t v43 = v54;
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v34 = v55;
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      uint64_t v42 = *(void (**)(char *, uint64_t))(v58 + 8);
      v42(v57, v10);
    }

    unint64_t v2 = v56;
    uint64_t v44 = v50;
    unint64_t v45 = sub_100095E84();
    uint64_t v46 = swift_allocError(&type metadata for KTEligibilityError, v45, 0LL, 0LL);
    *os_log_type_t v47 = 1LL;
    swift_willThrow(v46);
    v42(a1, v33);
    uint64_t v48 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8LL))(v34, v48);
    swift_deallocPartialClassInstance(v2, v44, *(unsigned int *)(*v2 + 48LL), *(unsigned __int16 *)(*v2 + 52LL));
  }

  return v2;
}

uint64_t sub_100093D68()
{
  return OS_dispatch_queue.sync<A>(execute:)(sub_100095F50, v0, (char *)&type metadata for () + 8);
}

void sub_100093DA0()
{
  if (!v0)
  {
    sub_100078380();
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    sub_100078380();
    swift_bridgeObjectRelease(0x800000010020FB90LL);
  }

uint64_t sub_100093EA8()
{
  Swift::String v1 = *(dispatch_queue_s **)(v0 + 32);
  uint64_t v2 = swift_allocObject(&unk_10027E668, 32LL, 7LL);
  *(void *)(v2 + 16) = sub_100095F68;
  *(void *)(v2 + 24) = v0;
  void v6[4] = sub_1000807AC;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  _DWORD v6[2] = sub_1000807CC;
  void v6[3] = &unk_10027E680;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 110LL, 83LL, 20LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  return result;
}

uint64_t sub_100093FB0(uint64_t a1)
{
  v2[3] = a1;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100095FB0, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100093FF8(uint64_t a1, uint64_t a2)
{
  v5[3] = a1;
  void v5[4] = a2;
  uint64_t v3 = sub_100072CC4(&qword_1002E0978);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)(sub_100096080, v5, v3);
  if (!v2) {
    return v5[7];
  }
  return result;
}

void sub_100094068(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v7 = __chkstk_darwin(v6);
  NSString v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100078408();
  if (v3) {
    return;
  }
  id v54 = v15;
  uint64_t v55 = (uint64_t)v11;
  unint64_t v53 = v9;
  uint64_t v56 = v12;
  uint64_t v57 = v13;
  uint64_t v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v16 + 104LL))(0LL, a1, v58);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 160LL))(v18);
  uint64_t v20 = v19;
  uint64_t v58 = v17;
  if (!v19)
  {
    swift_release(v58);
    *a3 = 0LL;
    return;
  }

  uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 96LL);
  swift_retain_n(v19, 2LL);
  uint64_t v22 = v21(0LL);
  if (!v23)
  {
LABEL_9:
    swift_release(v20);
    goto LABEL_10;
  }

  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 104LL))(1LL);
  if ((v26 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRelease(v25);
    goto LABEL_9;
  }

  uint64_t v52 = v26;
  uint64_t v27 = v55;
  (*(void (**)(uint64_t))(*(void *)v20 + 120LL))(2LL);
  uint64_t v28 = v56;
  uint64_t v29 = v57;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v27, 1LL, v56) == 1)
  {
    swift_release(v20);
    swift_bridgeObjectRelease(v25);
    sub_10009691C(v27);
LABEL_10:
    unint64_t v30 = sub_100095E84();
    uint64_t v31 = swift_allocError(&type metadata for KTEligibilityError, v30, 0LL, 0LL);
    void *v32 = 3LL;
    swift_willThrow(v31);
    swift_release(v58);
    swift_release_n(v20, 2LL);
    return;
  }

  uint64_t v50 = v24;
  uint64_t v51 = v25;
  uint64_t v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v54, v27, v28);
  v21(3LL);
  if (!v34)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
    swift_release(v20);
LABEL_18:
    swift_bridgeObjectRelease(v51);
    goto LABEL_10;
  }

  uint64_t v35 = v34;
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 112LL))(4LL);
  char v37 = v36;
  swift_release(v20);
  if ((v37 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v56);
    swift_bridgeObjectRelease(v35);
    goto LABEL_18;
  }

  uint64_t v38 = v57;
  uint64_t v39 = v54;
  if ((_DWORD)v52)
  {
    swift_bridgeObjectRelease(v35);
    type metadata accessor for KTEligibilityStatusResult(0LL);
    uint64_t v40 = (uint64_t)v53;
    uint64_t v41 = v56;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v53, v39, v56);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v40, 0LL, 1LL, v41);
    uint64_t v42 = v51;
    id v43 = sub_1000CD8F0(v50, v51, v40);
  }

  else
  {
    id v44 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    id v46 = [v44 initWithDomain:v45 code:v55 userInfo:0];

    type metadata accessor for KTEligibilityStatusResult(0LL);
    uint64_t v40 = (uint64_t)v53;
    uint64_t v41 = v56;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v53, v39, v56);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v40, 0LL, 1LL, v41);
    uint64_t v42 = v51;
    os_log_type_t v47 = v46;
    id v43 = sub_1000CDB94(v50, v51, v46, v40);
  }

  swift_bridgeObjectRelease(v42);
  uint64_t v48 = sub_10009691C(v40);
  uint64_t v49 = v58;
  (*(void (**)(uint64_t))(*(void *)v58 + 96LL))(v48);
  swift_release_n(v20, 2LL);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v41);
  *a3 = v43;
}

uint64_t sub_1000944E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  v9[3] = a1;
  void v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  v9[7] = a5;
  *(double *)&v9[8] = a6;
  OS_dispatch_queue.sync<A>(execute:)(sub_10009609C, v9, &type metadata for Bool);
  if (!v6) {
    char v7 = v10;
  }
  return v7 & 1;
}

void sub_100094548( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>, double a8@<D0>)
{
  uint64_t v110 = a6;
  uint64_t v112 = a4;
  unint64_t v113 = a5;
  unint64_t v114 = a3;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  sub_100078408();
  if (v8) {
    return;
  }
  uint64_t v17 = v16;
  uint64_t v106 = v14;
  uint64_t v107 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = a1;
  uint64_t v109 = a2;
  unint64_t v105 = a7;
  uint64_t v111 = 0LL;
  if (v114) {
    (*(void (**)(void, uint64_t))(*(void *)v16 + 104LL))(0LL, v109);
  }
  else {
    (*(void (**)(void, uint64_t))(*(void *)v16 + 104LL))(0LL, 37LL);
  }
  uint64_t v18 = v13;
  uint64_t v19 = v106;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 128LL))(1LL, v112);
  uint64_t v20 = swift_allocObject(&unk_10027E768, 24LL, 7LL);
  uint64_t v112 = v20;
  *(void *)(v20 + 16) = sub_100094FA0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v106 = v20 + 16;
  uint64_t v21 = swift_allocObject(&unk_10027E790, 17LL, 7LL);
  *(_BYTE *)(v21 + 16) = 0;
  uint64_t v22 = (_BYTE *)(v21 + 16);
  uint64_t v23 = v107;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v107, v113, v13);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = v19;
  uint64_t v27 = v18;
  unint64_t v28 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v29 = swift_allocObject(&unk_10027E7B8, v28 + 8, v24 | 7);
  uint64_t v30 = v108;
  *(void *)(v29 + 16) = v108;
  *(void *)(v29 + 24) = v21;
  uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  BOOL v32 = v23;
  uint64_t v33 = v112;
  uint64_t v34 = v30;
  v31(v29 + v25, v32, v27);
  *(void *)(v29 + v2_Block_object_dispose(va, 8) = v33;
  uint64_t v35 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v17 + 152LL);
  swift_retain(v34);
  swift_retain(v21);
  swift_retain(v33);
  uint64_t v36 = v111;
  v35(sub_1000968C8, v29);
  if (v36)
  {
    swift_release(v33);
    swift_release(v21);
    swift_release(v29);
    swift_release(v17);
    return;
  }

  unint64_t v113 = v17;
  uint64_t v111 = 0LL;
  swift_release(v29);
  uint64_t v37 = v106;
  uint64_t v38 = swift_beginAccess(v106, v118, 0LL, 0LL);
  uint64_t v39 = *(void *)(*(void *)v37 + 16LL);
  if (!v39 || (uint64_t v38 = swift_beginAccess(v22, v117, 0LL, 0LL), *v22 == 1))
  {
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    BOOL v42 = os_log_type_enabled(v40, v41);
    id v43 = v105;
    if (v42)
    {
      id v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v44 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "No elements or elements have failures. Returning aggregate result of false",  v44,  2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    swift_release(v113);
    swift_release(v112);
    NSString v45 = (char *)v21;
    goto LABEL_12;
  }

  id v43 = v105;
  unint64_t v46 = v114;
  if (!v114)
  {
    uint64_t v107 = (char *)v21;
    uint64_t v49 = (uint64_t)sub_1000CE778();
    uint64_t v51 = v113;
    uint64_t v50 = v110;
    if (v39 != *(void *)(*(void *)v49 + 16LL))
    {
      unint64_t v97 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v98 = static os_log_type_t.error.getter(v97);
      if (os_log_type_enabled(v97, v98))
      {
        id v99 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v99 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "At least one missing element. Returning aggregate result of false",  v99,  2u);
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      swift_release(v51);
      swift_release(v112);
      NSString v45 = v107;
      goto LABEL_12;
    }

unint64_t sub_100094FA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E0A80);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_BYTE *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 3);
    uint64_t v8 = *((void *)v6 - 2);
    uint64_t v9 = *((void *)v6 - 1);
    char v10 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    uint64_t v14 = v4[7] + 16 * result;
    *(void *)uint64_t v14 = v9;
    *(_BYTE *)(v14 + _Block_object_dispose(va, 8) = v10;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v4[2] = v17;
    v6 += 32;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000950C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a4;
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v8);
  char v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  NSString v45 = (char *)&v42 - v16;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(1LL);
  uint64_t v18 = (*(uint64_t (**)(void))(*(void *)a1 + 96LL))(0LL);
  if (!v19) {
    return 0LL;
  }
  unint64_t v20 = v19;
  uint64_t v43 = v18;
  (*(void (**)(uint64_t))(*(void *)a1 + 120LL))(2LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    swift_bridgeObjectRelease(v20);
    sub_10009691C((uint64_t)v10);
    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v45, v10, v11);
  if ((v17 & 0x1FFFFFFFFLL) != 1)
  {
    uint64_t v34 = (_BYTE *)(a3 + 16);
    swift_bridgeObjectRetain(v20);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = v11;
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      v47[0] = v40;
      *(_DWORD *)uint64_t v38 = 136446210;
      swift_bridgeObjectRetain(v20);
      uint64_t v46 = sub_10007C22C(v43, v20, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Failure found for element %{public}s when checking on-by-default eligibility",  v38,  0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v12 + 8))(v45, v39);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v45, v11);
    }

    uint64_t v21 = 1LL;
    swift_beginAccess(v34, v47, 1LL, 0LL);
    _BYTE *v34 = 1;
    return v21;
  }

  uint64_t v23 = (uint64_t *)(a5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v44, v11);
  uint64_t v24 = Date.compare(_:)(v15);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v15, v11);
  swift_beginAccess(v23, v47, 32LL, 0LL);
  uint64_t v26 = *v23;
  if (!*(void *)(*v23 + 16)) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(v20);
  unint64_t v27 = sub_100079A58(v43, v20);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease(v20);
LABEL_16:
    uint64_t v29 = v11;
    swift_endAccess(v47);
    swift_beginAccess(v23, v47, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    uint64_t v46 = *v23;
    *uint64_t v23 = 0x8000000000000000LL;
    uint64_t v32 = 1LL;
    char v33 = v24 == 1;
    goto LABEL_17;
  }

  uint64_t v29 = v11;
  uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 16 * v27);
  swift_endAccess(v47);
  uint64_t result = swift_bridgeObjectRelease(v20);
  if (!__OFADD__(v30, 1LL))
  {
    swift_beginAccess(v23, v47, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    uint64_t v46 = *v23;
    *uint64_t v23 = 0x8000000000000000LL;
    uint64_t v32 = v30 + 1;
    char v33 = v24 == 1;
LABEL_17:
    sub_100095B3C(v32, v33, v43, v20, isUniquelyReferenced_nonNull_native);
    uint64_t v41 = *v23;
    *uint64_t v23 = v46;
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v41);
    swift_endAccess(v47);
    v25(v45, v29);
    return 1LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_100095528(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return swift_task_switch(sub_100095544, 0LL, 0LL);
}

uint64_t sub_100095544()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  void v4[2] = v1;
  void v4[3] = v3;
  void v4[4] = v2;
  uint64_t v5 = sub_100072CC4(&qword_1002E0988);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000960C0, v4, v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009560C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a4;
  _BYTE v6[24] = a3;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = a5;
  return OS_dispatch_queue.sync<A>(execute:)(sub_10009621C, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100095660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_100095680, 0LL, 0LL);
}

uint64_t sub_100095680()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  __int128 v6 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = swift_task_alloc(64LL);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v6;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 4_Block_object_dispose(va, 8) = v2;
  OS_dispatch_queue.sync<A>(execute:)(sub_1000963C8, v4, (char *)&type metadata for () + 8);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t KTEligibilityDB.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t KTEligibilityDB.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

unint64_t sub_1000957D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for KTSwiftDB();
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(v2 + 24), *(void *)(v3 + 24)) & 1;
}

Swift::Int sub_100095818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E0A80);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

void sub_100095B3C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100079A58(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100095CB8();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      *(void *)uint64_t v21 = a1;
      *(_BYTE *)(v21 + _Block_object_dispose(va, 8) = a2 & 1;
      return;
    }

void sub_100095CB8()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E0A80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

uint64_t sub_100095E70(uint64_t result)
{
  return result;
}

unint64_t sub_100095E84()
{
  unint64_t result = qword_1002E0958;
  if (!qword_1002E0958)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248900, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E0958);
  }

  return result;
}

unint64_t sub_100095EC8()
{
  unint64_t result = qword_1002E0968;
  if (!qword_1002E0968)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue_serial);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002E0968);
  }

  return result;
}

unint64_t sub_100095F04()
{
  unint64_t result = qword_1002E1090;
  if (!qword_1002E1090)
  {
    uint64_t v1 = sub_10007426C(&qword_1002E0970);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E1090);
  }

  return result;
}

void sub_100095F50()
{
}

void sub_100095F68()
{
}

uint64_t sub_100095F88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100095F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095FA8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100095FB0()
{
  uint64_t v2 = *(void *)(v0 + 24);
  sub_100078408();
  if (!v1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)v3 + 128LL))(0LL, v2);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 160LL))(v5);
    if (v6)
    {
      swift_release(v6);
      unint64_t v7 = sub_100095E84();
      uint64_t v8 = swift_allocError(&type metadata for KTEligibilityError, v7, 0LL, 0LL);
      void *v9 = 4LL;
      swift_willThrow(v8);
    }

    else
    {
      (*(void (**)(void))(*(void *)v4 + 96LL))();
    }

    swift_release(v4);
  }

void sub_100096080(void *a1@<X8>)
{
}

void sub_10009609C(_BYTE *a1@<X8>)
{
}

void sub_1000960C0(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  sub_100078408();
  if (!v2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v6 + 104LL))(0LL, v4, v5);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v8);
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)v9 + 96LL);
      swift_retain(v9);
      uint64_t v12 = v11(0LL);
      if (v13)
      {
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        (*(void (**)(void))(*(void *)v7 + 96LL))();
        swift_release_n(v10, 2LL);
        swift_release(v7);
        *a1 = v14;
        a1[1] = v15;
      }

      else
      {
        unint64_t v16 = sub_100095E84();
        uint64_t v17 = swift_allocError(&type metadata for KTEligibilityError, v16, 0LL, 0LL);
        *uint64_t v18 = 3LL;
        swift_willThrow(v17);
        swift_release(v10);
        swift_release(v7);
        swift_release(v10);
      }
    }

    else
    {
      swift_release(v7);
      *a1 = 0LL;
      a1[1] = 0LL;
    }
  }

void sub_10009621C()
{
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  sub_100078408();
  if (v1) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104LL);
  v9(0LL, v3, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112LL);
  v10(1LL, v2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 128LL))(2LL, v5);
  if (v6)
  {
    id v12 = v6;
    id v13 = [v12 domain];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v16 = v15;

    v9(3LL, v14, v16);
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = (uint64_t)[v12 code];
    if (v17 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (v17 <= 0x7FFFFFFF)
    {
      v10(4LL, v17);

      goto LABEL_6;
    }

    __break(1u);
    return;
  }

void sub_1000963C8()
{
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  sub_100078408();
  if (!v1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 104LL);
    v8(0LL, v2, v4);
    uint64_t v9 = v8(1LL, v3, v5);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v9);
    if (v10)
    {
      swift_release(v10);
      unint64_t v11 = sub_100095E84();
      uint64_t v12 = swift_allocError(&type metadata for KTEligibilityError, v11, 0LL, 0LL);
      *id v13 = 4LL;
      swift_willThrow(v12);
    }

    else
    {
      (*(void (**)(void))(*(void *)v7 + 96LL))();
    }

    swift_release(v7);
  }

unint64_t sub_1000964C8()
{
  unint64_t result = qword_1002E0998;
  if (!qword_1002E0998)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248860, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E0998);
  }

  return result;
}

unint64_t sub_100096514()
{
  unint64_t result = qword_1002E09A0;
  if (!qword_1002E09A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002489C8, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E09A0);
  }

  return result;
}

unint64_t sub_10009655C()
{
  unint64_t result = qword_1002E09A8;
  if (!qword_1002E09A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248888, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E09A8);
  }

  return result;
}

unint64_t sub_1000965A4()
{
  unint64_t result = qword_1002E09B0;
  if (!qword_1002E09B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002488C8, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E09B0);
  }

  return result;
}

uint64_t sub_1000965E8(uint64_t a1)
{
  uint64_t result = sub_100073FE0( &qword_1002E09B8,  type metadata accessor for KTEligibilityDB,  (uint64_t)&protocol conformance descriptor for KTEligibilityDB);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t type metadata accessor for KTEligibilityDB(uint64_t a1)
{
  uint64_t result = qword_1002EA8A0;
  if (!qword_1002EA8A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTEligibilityDB);
  }
  return result;
}

ValueMetadata *type metadata accessor for KTEligibilityError()
{
  return &type metadata for KTEligibilityError;
}

uint64_t getEnumTagSinglePayload for AggregateElementInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateElementInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AggregateElementInfo()
{
  return &type metadata for AggregateElementInfo;
}

uint64_t sub_100096718()
{
  return type metadata accessor for KTEligibilityDB(0LL);
}

uint64_t sub_100096720(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1000967B8()
{
  unint64_t result = qword_1002E0A78;
  if (!qword_1002E0A78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248980, &type metadata for KTEligibilityError);
    atomic_store(result, (unint64_t *)&qword_1002E0A78);
  }

  return result;
}

uint64_t sub_1000967FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100096820()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100096830()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000968C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000950C0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10009691C(uint64_t a1)
{
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009695C()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_100096968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CloudOptInData(0LL) + 32);
  return sub_100085DFC(v3, a1);
}

uint64_t type metadata accessor for CloudOptInData(uint64_t a1)
{
  uint64_t result = qword_1002EA9E0;
  if (!qword_1002EA9E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudOptInData);
  }
  return result;
}

uint64_t sub_1000969D4()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudOptInData(0LL) + 36));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100096A10()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudOptInData(0LL) + 40));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100096A4C(char a1)
{
  return *(void *)&aRecordiduri[8 * a1];
}

uint64_t sub_100096A6C()
{
  return sub_100096A4C(*v0);
}

uint64_t sub_100096A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000A8790(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100096A98(uint64_t a1)
{
  unint64_t v2 = sub_100096D1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100096AC0(uint64_t a1)
{
  unint64_t v2 = sub_100096D1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100096AE8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100072CC4(&qword_1002E0A88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100084C04(a1, v9);
  unint64_t v11 = sub_100096D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CloudOptInData.CodingKeys,  &type metadata for CloudOptInData.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v38 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v38, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v37 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v37, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v36 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v36, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = *((unsigned __int8 *)v3 + 56);
    char v35 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v35, v5);
    uint64_t v20 = (int *)type metadata accessor for CloudOptInData(0LL);
    uint64_t v21 = (uint64_t)v3 + v20[8];
    char v34 = 4;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = sub_100073FE0( &qword_1002E0A90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v34, v5, v22, v23);
    int64_t v24 = (uint64_t *)((char *)v3 + v20[9]);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    char v33 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v33, v5);
    BOOL v27 = (uint64_t *)((char *)v3 + v20[10]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    char v32 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v32, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100096D1C()
{
  unint64_t result = qword_1002EA8D0[0];
  if (!qword_1002EA8D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100248CF4, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, qword_1002EA8D0);
  }

  return result;
}

uint64_t sub_100096D60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v39 = sub_100072CC4(&qword_1002E0A98);
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for CloudOptInData(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v40 = a1;
  sub_100084C04(a1, v12);
  unint64_t v14 = sub_100096D1C();
  uint64_t v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CloudOptInData.CodingKeys,  &type metadata for CloudOptInData.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return sub_10007EAFC(v40);
  }
  char v37 = v5;
  int64_t v41 = v11;
  char v48 = 0;
  uint64_t v16 = v39;
  uint64_t v17 = v8;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v39);
  uint64_t v19 = (uint64_t)v41;
  *int64_t v41 = v18;
  *(void *)(v19 + _Block_object_dispose(va, 8) = v20;
  char v47 = 1;
  uint64_t v21 = v6;
  *(void *)(v19 + 16) = KeyedDecodingContainer.decode(_:forKey:)(&v47, v16);
  *(void *)(v19 + 24) = v22;
  char v46 = 2;
  *(void *)(v19 + 32) = KeyedDecodingContainer.decode(_:forKey:)(&v46, v16);
  *(void *)(v19 + 40) = v23;
  char v45 = 3;
  *(void *)(v19 + 4_Block_object_dispose(va, 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v16);
  *(_BYTE *)(v19 + 56) = v24 & 1;
  uint64_t v25 = type metadata accessor for Date(0LL);
  char v44 = 4;
  uint64_t v26 = sub_100073FE0( (unint64_t *)&unk_1002E0420,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  BOOL v27 = v37;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v25, &v44, v16, v25, v26);
  sub_1000A9A0C((uint64_t)v27, v19 + v9[8], (uint64_t *)&unk_1002DF740);
  char v43 = 5;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v16);
  uint64_t v29 = (uint64_t *)(v19 + v9[9]);
  uint64_t *v29 = v28;
  v29[1] = v30;
  char v42 = 6;
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v16);
  uint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v16);
  char v34 = (uint64_t *)(v19 + v9[10]);
  uint64_t *v34 = v31;
  v34[1] = v33;
  sub_100097164(v19, v38);
  sub_10007EAFC(v40);
  return sub_1000971A8(v19);
}

uint64_t sub_100097164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudOptInData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000971A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudOptInData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000971E4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = a1;
  *(void *)(a9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 4_Block_object_dispose(va, 8) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  uint64_t v15 = (int *)type metadata accessor for CloudOptInData(0LL);
  uint64_t result = sub_1000A9A0C(a10, a9 + v15[8], (uint64_t *)&unk_1002DF740);
  uint64_t v17 = (void *)(a9 + v15[9]);
  void *v17 = a11;
  v17[1] = a12;
  uint64_t v18 = (void *)(a9 + v15[10]);
  *uint64_t v18 = a13;
  v18[1] = a14;
  return result;
}

uint64_t sub_100097278@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100096D60(a1, a2);
}

uint64_t sub_10009728C(void *a1)
{
  return sub_100096AE8(a1);
}

uint64_t sub_1000972A0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EA8B8);
  sub_100072DEC(v0, (uint64_t)qword_1002EA8B8);
  return Logger.init(transparencyCategory:)(0x74706F64756F6C63LL, 0xEA00000000006E69LL);
}

id sub_100097300()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [v1 uri];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  id v12 = [v1 application];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v14 = v13;

  id v15 = objc_allocWithZone(&OBJC_CLASS___KTOptInState);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  id v18 = [v15 initWithURI:v16 application:v17];

  id v19 = [v1 state];
  if (v19)
  {
    uint64_t v20 = v19;
    objc_msgSend(v18, "setState:", objc_msgSend(v19, "unsignedIntegerValue"));
  }

  id v21 = [v1 smtTimestamp];
  if (v21)
  {
    uint64_t v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0LL, 1LL, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
    {
      Class isa = 0LL;
    }

    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1LL, 1LL, v2);
    Class isa = 0LL;
  }

  [v18 setSmtTimestamp:isa];

  id v24 = [v1 osVersion];
  [v18 setOsVersion:v24];

  id v25 = [v1 serialNumber];
  [v18 setSerialNumber:v25];

  return v18;
}

uint64_t sub_1000975E8()
{
  return 0x6E4974704FLL;
}

id sub_1000975FC()
{
  return *(id *)(v0 + 48);
}

uint64_t sub_100097604()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 56));
}

uint64_t sub_10009760C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 64));
}

void *sub_100097614()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void sub_100097654(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = a1;
}

uint64_t (*sub_100097698(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000976D4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

uint64_t sub_100097708(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10009774C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100097788(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, 104LL, 7LL);
  sub_1000977F4(a1, a2, a3, a4, a5);
  return v11;
}

void *sub_1000977F4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[2] = 0x6E4974704FLL;
  v5[3] = 0xE500000000000000LL;
  void v5[9] = 0LL;
  v5[12] = 0xE100000000000000LL;
  void v5[4] = a1;
  void v5[5] = a2;
  v5[6] = a3;
  v5[7] = a4;
  void v5[8] = a5;
  v5[10] = &_swiftEmptySetSingleton;
  v5[11] = 64LL;
  swift_beginAccess(v5 + 9, v24, 1LL, 0LL);
  uint64_t v11 = (void *)v5[9];
  void v5[9] = 0LL;
  id v12 = a1;
  id v13 = a2;
  id v14 = a3;
  swift_unknownObjectRetain(a4);
  swift_unknownObjectRetain(a5);

  id v15 = objc_allocWithZone((Class)&OBJC_CLASS___KTNearFutureScheduler);
  swift_retain_n(v5, 2LL);
  NSString v16 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000979EC;
  uint64_t v23 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A2010;
  aBlock[3] = &unk_10027E8C0;
  NSString v17 = _Block_copy(aBlock);
  id v18 = [v15 initWithName:v16 initialDelay:2000000000 exponentialBackoff:3600000000000 maximumDelay:0 keepProcessAlive:0 dependencyDescriptionCode:v17 block:1.4];

  _Block_release(v17);
  id v19 = v23;
  swift_release(v5);

  swift_unknownObjectRelease(a4);
  swift_unknownObjectRelease(a5);
  swift_release(v19);
  uint64_t v20 = (void *)v5[9];
  void v5[9] = v18;

  return v5;
}

uint64_t sub_1000979E0()
{
  return 64LL;
}

uint64_t sub_1000979EC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t sub_1000979F8()
{
  uint64_t v1 = v0;
  if (qword_1002EA8B0 != -1) {
LABEL_30:
  }
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100072DEC(v2, (uint64_t)qword_1002EA8B8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "updateMonitorWithNewAggregateState", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = (*(uint64_t (**)(void))(*v1 + 200LL))();
  uint64_t v8 = v7;
  int64_t v9 = 0LL;
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  uint64_t v12 = v7 + 56;
  unint64_t v13 = v11 & *(void *)(v7 + 56);
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  while (v13)
  {
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v16 = v15 | (v9 << 6);
LABEL_24:
    uint64_t v20 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*v1 + 264LL);
    swift_bridgeObjectRetain(v22);
    id v24 = (void *)v23(v21, v22);
    swift_bridgeObjectRelease(v22);
    if (v24)
    {
      id v25 = (void *)v1[8];
      if (v25) {
        [v25 updateAggregateOptIOState:v24];
      }
    }
  }

  int64_t v17 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v17 >= v14) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v12 + 8 * v17);
  ++v9;
  if (v18) {
    goto LABEL_23;
  }
  int64_t v9 = v17 + 1;
  if (v17 + 1 >= v14) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v12 + 8 * v9);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v9 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v12 + 8 * v9);
  if (v18)
  {
LABEL_23:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
    goto LABEL_24;
  }

  int64_t v19 = v17 + 3;
  if (v19 < v14)
  {
    unint64_t v18 = *(void *)(v12 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v9 = v19 + 1;
        if (__OFADD__(v19, 1LL)) {
          goto LABEL_29;
        }
        if (v9 >= v14) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v12 + 8 * v9);
        ++v19;
        if (v18) {
          goto LABEL_23;
        }
      }
    }

    int64_t v9 = v19;
    goto LABEL_23;
  }

uint64_t sub_100097C54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for SHA256(0LL);
  v27[6] = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for SHA256Digest(0LL);
  void v27[4] = *(void *)(v9 - 8);
  v27[5] = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v27[3] = (char *)v27 - v11;
  uint64_t v12 = type metadata accessor for String.Encoding(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain(a2);
  v16._countAndFlagsBits = 47LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  uint64_t v17 = v29;
  swift_bridgeObjectRetain(v29);
  v18._countAndFlagsBits = a3;
  v18._object = a4;
  String.append(_:)(v18);
  uint64_t v19 = swift_bridgeObjectRelease(v17);
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  static String.Encoding.utf8.getter(v19);
  String.data(using:allowLossyConversion:)(v15, 0LL, v20, v21);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease(v21);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v23 >> 60 != 15)
  {
    uint64_t v24 = sub_100073FE0( (unint64_t *)&unk_1002E0430,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v8, v24);
    id v25 = (char *)&loc_100097E34 + *((int *)qword_100098220 + (v23 >> 62));
    v27[1] = v23;
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_100098230(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v10, (uint64_t)qword_1002EA8B8);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v11 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v19 = a3;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = sub_10007C22C(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v20 = sub_10007C22C(v19, a4, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "get record %s[%s]", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
    uint64_t v16 = swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v16);
  __chkstk_darwin(v17);
  sub_100072CC4(&qword_1002E0AA8);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A4794);

  return v22;
}

uint64_t sub_1000984B4(uint64_t a1)
{
  uint64_t v2 = a1;
  if (a1 < 0 || (a1 & 0x4000000000000000LL) != 0) {
    goto LABEL_26;
  }
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    uint64_t v15 = v3;
    sub_1000A2054(&v15);
    uint64_t v2 = v15;
    if (v15 < 0 || (v15 & 0x4000000000000000LL) != 0) {
      break;
    }
    unint64_t v4 = *(void *)(v15 + 16);
    swift_retain(v15);
    if (!v4) {
      goto LABEL_28;
    }
LABEL_7:
    unint64_t v5 = v4 - 1;
    if (__OFSUB__(v4, 1LL))
    {
      __break(1u);
LABEL_31:
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      goto LABEL_12;
    }

    unint64_t v1 = v2 & 0xC000000000000001LL;
    if ((v2 & 0xC000000000000001LL) != 0) {
      goto LABEL_31;
    }
    if ((v5 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      uint64_t result = swift_release(v2);
      __break(1u);
      return result;
    }

    if (v5 >= *(void *)(v2 + 16)) {
      goto LABEL_33;
    }
    id v6 = *(id *)(v2 + 8 * v5 + 32);
LABEL_12:
    uint64_t v7 = v6;
    swift_release(v2);
    while (!__OFSUB__(v4--, 1LL))
    {
      if (v1)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      }

      else
      {
        if ((v4 & 0x8000000000000000LL) != 0) {
          goto LABEL_24;
        }
        if (v4 >= *(void *)(v2 + 16)) {
          goto LABEL_25;
        }
        id v9 = *(id *)(v2 + 32 + 8 * v4);
      }

      uint64_t v10 = v9;
      id v11 = [v9 state];
      if (v11 != [v7 state])
      {

        swift_release(v2);
        return (uint64_t)v7;
      }

      uint64_t v7 = v10;
      if (!v4)
      {
        swift_release(v2);
        return (uint64_t)v10;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    unint64_t v12 = swift_bridgeObjectRetain(v2);
    uint64_t v3 = (uint64_t)sub_1000A20CC(v12);
    swift_bridgeObjectRelease(v2);
  }

  uint64_t v13 = swift_retain(v15);
  unint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (v4) {
    goto LABEL_7;
  }
LABEL_28:
  swift_release_n(v2, 2LL);
  return 0LL;
}

uint64_t sub_10009866C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v8 = sub_100072DEC(v4, (uint64_t)qword_1002EA8B8);
  uint64_t v9 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v57 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v7;
    uint64_t v14 = v5;
    uint64_t v15 = v4;
    uint64_t v16 = v13;
    uint64_t v61 = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v59 = sub_10007C22C(a1, a2, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "get aggregate record [%s]", v12, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v17 = v16;
    uint64_t v4 = v15;
    uint64_t v5 = v14;
    uint64_t v7 = v56;
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    uint64_t v18 = swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v19 = v58;
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 152LL))(v18);
  __chkstk_darwin(v20);
  *(&v54 - 2) = a1;
  *(&v54 - 1) = a2;
  sub_100072CC4(&qword_1002E0AB0);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A4A24);

  uint64_t v22 = v61;
  if (!v61) {
    goto LABEL_35;
  }
  if (!((unint64_t)v61 >> 62))
  {
    uint64_t v23 = *(void *)((v61 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n(v61, 2LL);
    if (v23) {
      goto LABEL_9;
    }
LABEL_19:
    swift_bridgeObjectRelease_n(v22, 2LL);
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0) {
        uint64_t v52 = v22;
      }
      else {
        uint64_t v52 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v22);
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(v22);
      if (v53)
      {
LABEL_21:
        uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 256LL))(v22);
        uint64_t v30 = swift_bridgeObjectRelease(v22);
        if (v29)
        {
          [v29 setEverOptIn:1];
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v57, v4);
          uint64_t v31 = v7;
          id v32 = v29;
          uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
          os_log_type_t v34 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v33, v34))
          {
            uint64_t v56 = v31;
            uint64_t v57 = v5;
            uint64_t v58 = v4;
            uint64_t v35 = swift_slowAlloc(32LL, -1LL);
            uint64_t v55 = swift_slowAlloc(64LL, -1LL);
            uint64_t v61 = v55;
            *(_DWORD *)uint64_t v35 = 136315650;
            id v36 = [v32 uri];
            if (v36)
            {
              char v37 = v36;
              os_log_type_t v38 = v34;
              uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
              unint64_t v41 = v40;
            }

            else
            {
              os_log_type_t v38 = v34;
              unint64_t v41 = 0xE100000000000000LL;
              uint64_t v39 = 45LL;
            }

            uint64_t v59 = sub_10007C22C(v39, v41, &v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 4, v35 + 12);

            swift_bridgeObjectRelease(v41);
            *(_WORD *)(v35 + 12) = 2080;
            id v46 = [v32 application];
            uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            unint64_t v49 = v48;

            uint64_t v59 = sub_10007C22C(v47, v49, &v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 14, v35 + 22);

            swift_bridgeObjectRelease(v49);
            *(_WORD *)(v35 + 22) = 2048;
            id v50 = [v32 state];

            uint64_t v59 = (uint64_t)v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 24, v35 + 32);

            _os_log_impl((void *)&_mh_execute_header, v33, v38, "Final optin: %s[%s] - %lu", (uint8_t *)v35, 0x20u);
            uint64_t v51 = v55;
            swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v51, -1LL, -1LL);
            swift_slowDealloc(v35, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
          }

          else
          {

            (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
          }

          return (uint64_t)v29;
        }

        char v42 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v43 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v42, v43))
        {
          char v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)char v44 = 0;
          char v45 = "Failed to pick oldest record";
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v42, v43, v45, v44, 2u);
          swift_slowDealloc(v44, -1LL, -1LL);
          goto LABEL_38;
        }

        goto LABEL_38;
      }
    }

    else if (*(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_21;
    }

    uint64_t v21 = swift_bridgeObjectRelease(v22);
LABEL_35:
    char v42 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      char v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v44 = 0;
      char v45 = "no opt in records to pick";
      goto LABEL_37;
    }

LABEL_38:
    return 0LL;
  }

  if (v61 < 0) {
    unint64_t v28 = v61;
  }
  else {
    unint64_t v28 = v61 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v61, 2LL);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v28);
  uint64_t v23 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_9:
  if (v23 >= 1)
  {
    uint64_t v25 = 0LL;
    do
    {
      if ((v22 & 0xC000000000000001LL) != 0) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v22);
      }
      else {
        id v26 = *(id *)(v22 + 8 * v25 + 32);
      }
      uint64_t v27 = v26;
      ++v25;
      uint64_t v61 = (uint64_t)v26;
      sub_100098D2C((void **)&v61);
    }

    while (v23 != v25);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

              sub_100079A50(v1);
              return;
            }
          }
        }
      }
    }

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v13 != v11);
      os_log_type_t v11 = [v9 countByEnumeratingWithState:&v41 objects:v46 count:16];
    }

    while (v11);
  }

              char v44 = 0LL;
              goto LABEL_15;
            }

            if (qword_1002EE9F8 != -1) {
              dispatch_once(&qword_1002EE9F8, &stru_100284108);
            }
            unint64_t v48 = (os_log_s *)qword_1002EEA00;
            if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "pamHeadInPatProof present", buf, 2u);
            }

            objb = (id)objc_claimAutoreleasedReturnValue([v75 perApplicationTreeEntry]);
            unint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([objb slh]);
            id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 object]);
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v76 slh]);
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 object]);
            uint64_t v67 = [v50 isEqualToData:v52];

            if ((v67 & 1) == 0)
            {
              if (qword_1002EE9F8 != -1) {
                dispatch_once(&qword_1002EE9F8, &stru_100284128);
              }
              uint64_t v31 = v74;
              char v42 = v75;
              uint64_t v21 = v72;
              char v45 = v73;
              int64_t v63 = (os_log_s *)qword_1002EEA00;
              if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "pamHeadInPatProof was present but didn't match patConfigProof SLH",  buf,  2u);
              }

              goto LABEL_38;
            }

            uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v75 topLevelTreeEntry]);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[TransparencyPublicKeyBag processPamHeadInPatProof:tltEntry:error:]( v24,  "processPamHeadInPatProof:tltEntry:error:",  v76,  v53,  a13));

            if (v54)
            {
              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 parsedMapHead]);
              uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v55 application]));
              id obja = (id)objc_claimAutoreleasedReturnValue( +[TransparencyApplication applicationIdentifierForValue:]( &OBJC_CLASS___TransparencyApplication,  "applicationIdentifierForValue:",  v56));

              if (qword_1002EE9F8 != -1) {
                dispatch_once(&qword_1002EE9F8, &stru_100284168);
              }
              uint64_t v21 = v72;
              uint64_t v57 = (void *)qword_1002EEA00;
              if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_INFO))
              {
                uint64_t v58 = v57;
                id v68 = (id)objc_claimAutoreleasedReturnValue([v54 parsedMapHead]);
                uint64_t v59 = [v68 revision];
                uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v54 parsedMapHead]);
                uint64_t v61 = [v60 populating];
                *(_DWORD *)buf = 138412802;
                uint64_t v79 = obja;
                uint64_t v80 = 2048;
                uint64_t v81 = v59;
                uint64_t v21 = v72;
                uint64_t v82 = 1024;
                os_log_type_t v83 = v61;
                _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "pamHeadInPatProof SMH for %@ with revision %llu, populating = %d",  buf,  0x1Cu);
              }

              unint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v54 parsedMapHead]);
              -[TransparencyPublicKeyBag setMapStillPopulating:]( v24,  "setMapStillPopulating:",  [v62 populating]);

              uint64_t v31 = v74;
              char v42 = v75;
              char v45 = v73;
              goto LABEL_30;
            }

            char v42 = v75;
            if (qword_1002EE9F8 != -1) {
              dispatch_once(&qword_1002EE9F8, &stru_100284148);
            }
            uint64_t v31 = v74;
            uint64_t v21 = v72;
            uint64_t v64 = (os_log_s *)qword_1002EEA00;
            if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
            {
              if (a13) {
                unint64_t v65 = *a13;
              }
              else {
                unint64_t v65 = 0LL;
              }
              *(_DWORD *)buf = 138412290;
              uint64_t v79 = v65;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "pamHeadInPatProof was present but didn't validate: %@",  buf,  0xCu);
            }

            char v44 = 0LL;
            goto LABEL_11;
          }
        }
      }

      char v44 = 0LL;
    }

    else
    {
      char v44 = 0LL;
      uint64_t v31 = v74;
    }

    char v42 = v75;
    char v45 = v73;
    goto LABEL_15;
  }

  char v44 = 0LL;
  unint64_t v28 = v19;
  uint64_t v31 = v74;
  char v42 = v75;
LABEL_11:
  char v45 = v73;
LABEL_15:

  return v44;
}

  if ([v47 count]) {
    char v42 = v47;
  }
  else {
    char v42 = 0LL;
  }
  os_log_type_t v43 = v42;

  return v43;
}

uint64_t sub_100098D2C(void **a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *a1;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v7 = sub_100072DEC(v2, (uint64_t)qword_1002EA8B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  id v8 = v6;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  int v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v25;
    *(_DWORD *)uint64_t v11 = 136315650;
    id v12 = [v8 uri];
    uint64_t v27 = v3;
    int v26 = v10;
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      unint64_t v16 = v15;
    }

    else
    {
      unint64_t v16 = 0xE100000000000000LL;
      uint64_t v14 = 45LL;
    }

    uint64_t v28 = sub_10007C22C(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2080;
    id v18 = [v8 application];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v21 = v20;

    uint64_t v28 = sub_10007C22C(v19, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 14, v11 + 22);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v11 + 22) = 2048;
    id v22 = [v8 state];

    uint64_t v28 = (uint64_t)v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 24, v11 + 32);

    _os_log_impl( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v26,  "processing optin: %s[%s] - %lu",  (uint8_t *)v11,  0x20u);
    uint64_t v23 = v25;
    swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v5, v2);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

uint64_t sub_10009903C()
{
  uint64_t v1 = v0;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100072DEC(v2, (uint64_t)qword_1002EA8B8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "getAllOptInStates", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  sub_100072CC4(&qword_1002E0AB8);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A4DA4);

  return v9;
}

uint64_t sub_100099158()
{
  unint64_t v26 = sub_100099370((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
  uint64_t v2 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v1);
    if (!v3) {
      goto LABEL_13;
    }
  }

  if (v3 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v5 = 0LL;
  do
  {
    if ((v2 & 0xC000000000000001LL) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
    }
    else {
      id v6 = *(id *)(v2 + 8 * v5 + 32);
    }
    uint64_t v7 = v6;
    ++v5;
    unint64_t v23 = (unint64_t)v6;
    sub_1000995A8((id *)&v23, (uint64_t *)&v26);
  }

  while (v3 != v5);
LABEL_13:
  swift_bridgeObjectRelease_n(v2, 2LL);
  char v9 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v0 + 312LL))(5456969LL, 0xE300000000000000LL);
  if (v9 == 2)
  {
    unint64_t v10 = v26;
  }

  else
  {
    char v11 = v9;
    uint64_t v12 = sub_100072CC4(&qword_1002E0AC0);
    uint64_t inited = swift_initStackObject(v12, v25);
    *(_OWORD *)(inited + 16) = xmmword_1002464F0;
    *(void *)(inited + 32) = 0x6574617473LL;
    *(void *)(inited + 40) = 0xE500000000000000LL;
    unint64_t v23 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
    if ((v11 & 1) != 0) {
      uint64_t v14 = 1702195828LL;
    }
    else {
      uint64_t v14 = 0x65736C6166LL;
    }
    if ((v11 & 1) != 0) {
      unint64_t v15 = 0xE400000000000000LL;
    }
    else {
      unint64_t v15 = 0xE500000000000000LL;
    }
    unint64_t v16 = v15;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRelease(v15);
    unint64_t v17 = v24;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v23;
    *(void *)(inited + 56) = v17;
    unint64_t v18 = sub_100099488(inited);
    unint64_t v19 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    unint64_t v23 = v19;
    sub_1000A4160(v18, 0x492D746E65746E69LL, 0xEA00000000005344LL, isUniquelyReferenced_nonNull_native);
    unint64_t v10 = v23;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v21 = swift_bridgeObjectRetain(v10);
  unint64_t v22 = sub_100099B98(v21);
  swift_bridgeObjectRelease_n(v10, 2LL);
  return v22;
}

unint64_t sub_100099370(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E0F18);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  id v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100099488(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E0F20);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  id v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100079A58(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1000995A8(id *a1, uint64_t *a2)
{
  uint64_t v67 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  BOOL v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v64 - v17;
  id v19 = *a1;
  id result = [*a1 uri];
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v66 = v22;

    uint64_t v23 = sub_100072CC4(&qword_1002E0AC0);
    uint64_t inited = swift_initStackObject(v23, v71);
    *(_OWORD *)(inited + 16) = xmmword_100248AF0;
    *(void *)(inited + 32) = 0x6574617473LL;
    *(void *)(inited + 40) = 0xE500000000000000LL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
    id v68 = [v19 state];
    type metadata accessor for KTOptIn();
    _print_unlocked<A, B>(_:_:)( &v68,  &v69,  v25,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    unint64_t v26 = v70;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v69;
    *(void *)(inited + 56) = v26;
    *(void *)(inited + 64) = 0x6D617473656D6974LL;
    *(void *)(inited + 72) = 0xE900000000000070LL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
    id v27 = [v19 smtTimestamp];
    if (v27)
    {
      uint64_t v28 = v27;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      uint64_t v30 = v16;
      uint64_t v31 = 0LL;
    }

    else
    {
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      uint64_t v30 = v16;
      uint64_t v31 = 1LL;
    }

    uint64_t v64 = v29;
    v29(v30, v31, 1LL, v3);
    sub_1000A9A0C((uint64_t)v16, (uint64_t)v18, (uint64_t *)&unk_1002DF740);
    id v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    if (v32(v18, 1LL, v3))
    {
      sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002DF740);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v18, v3);
      uint64_t v33 = sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002DF740);
      Date.timeIntervalSince1970.getter(v33);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    Double.write<A>(to:)( &v69,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    unint64_t v34 = v70;
    *(void *)(inited + 80) = v69;
    *(void *)(inited + 8_Block_object_dispose(va, 8) = v34;
    *(void *)(inited + 96) = 0xD000000000000011LL;
    *(void *)(inited + 104) = 0x800000010020FD50LL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
    id v35 = [v19 smtTimestamp];
    if (v35)
    {
      id v36 = v35;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

      uint64_t v37 = 0LL;
    }

    else
    {
      uint64_t v37 = 1LL;
    }

    v64(v10, v37, 1LL, v3);
    sub_1000A9A0C((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_1002DF740);
    if (v32(v13, 1LL, v3))
    {
      sub_100077CFC((uint64_t)v13, (uint64_t *)&unk_1002DF740);
      os_log_type_t v38 = (void *)0xE100000000000000LL;
      uint64_t v39 = 45LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v3);
      uint64_t v40 = sub_100077CFC((uint64_t)v13, (uint64_t *)&unk_1002DF740);
      uint64_t v39 = Date.description.getter(v40);
      os_log_type_t v38 = v41;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    v42._countAndFlagsBits = v39;
    v42._object = v38;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v38);
    unint64_t v43 = v70;
    *(void *)(inited + 112) = v69;
    *(void *)(inited + 120) = v43;
    *(void *)(inited + 12_Block_object_dispose(va, 8) = 0x6F6973726556736FLL;
    *(void *)(inited + 136) = 0xE90000000000006ELL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
    id v44 = [v19 osVersion];
    if (v44)
    {
      char v45 = v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      unint64_t v48 = v47;
    }

    else
    {
      unint64_t v48 = (void *)0xE100000000000000LL;
      uint64_t v46 = 45LL;
    }

    v49._countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v48);
    unint64_t v50 = v70;
    *(void *)(inited + 144) = v69;
    *(void *)(inited + 152) = v50;
    *(void *)(inited + 160) = 28275LL;
    *(void *)(inited + 16_Block_object_dispose(va, 8) = 0xE200000000000000LL;
    uint64_t v69 = 0LL;
    unint64_t v70 = 0xE000000000000000LL;
    id v51 = [v19 serialNumber];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      uint64_t v55 = v54;
    }

    else
    {
      uint64_t v55 = (void *)0xE100000000000000LL;
      uint64_t v53 = 45LL;
    }

    v56._countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v55);
    unint64_t v57 = v70;
    *(void *)(inited + 176) = v69;
    *(void *)(inited + 184) = v57;
    unint64_t v58 = sub_100099488(inited);
    uint64_t v59 = v67;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v67);
    uint64_t v69 = *v59;
    *uint64_t v59 = 0x8000000000000000LL;
    uint64_t v61 = v58;
    uint64_t v62 = v66;
    sub_1000A4160(v61, v65, v66, isUniquelyReferenced_nonNull_native);
    uint64_t v63 = *v59;
    *uint64_t v59 = v69;
    swift_bridgeObjectRelease(v62);
    return (id)swift_bridgeObjectRelease(v63);
  }

  return result;
}

unint64_t sub_100099B98(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100072CC4(&qword_1002E0F28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v38 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v37 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v44;
  uint64_t v8 = &v46;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  uint64_t v11 = (uint64_t *)&unk_1002E0F30;
  uint64_t v12 = (char *)&type metadata for Any + 8;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v21 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v21 >= v37) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v38 + 8 * v21);
  int64_t v23 = i + 1;
  if (!v22)
  {
    int64_t v23 = i + 2;
    if (i + 2 >= v37) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v38 + 8 * v23);
    if (!v22)
    {
      int64_t v23 = i + 3;
      if (i + 3 >= v37) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v38 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = i + 4;
        if (i + 4 >= v37) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          int64_t v24 = i + 5;
          if (i + 5 < v37)
          {
            unint64_t v22 = *(void *)(v38 + 8 * v24);
            if (v22)
            {
              int64_t v23 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v23 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_36;
              }
              if (v23 >= v37) {
                break;
              }
              unint64_t v22 = *(void *)(v38 + 8 * v23);
              ++v24;
              if (v22) {
                goto LABEL_26;
              }
            }
          }

LABEL_32:
          sub_100079A50(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v10 = (v22 - 1) & v22;
    BOOL v16 = __clz(__rbit64(v22)) + (v8 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

  unint64_t v20 = v25;
LABEL_34:

LABEL_35:
}

      uint64_t v14 = 0;
LABEL_33:

      goto LABEL_34;
    }

    uint64_t v14 = 0;
  }

void sub_100099F00(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v33 = a3;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v14 = sub_100072DEC(v10, (uint64_t)qword_1002EA8B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v15 = swift_bridgeObjectRetain_n(a4, 2LL);
  BOOL v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  char v32 = v16;
  int v31 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = v5;
    uint64_t v19 = v18;
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = v27;
    *(_DWORD *)uint64_t v19 = 136315394;
    if (a2) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = 45LL;
    }
    uint64_t v28 = v10;
    if (a2) {
      unint64_t v21 = a2;
    }
    else {
      unint64_t v21 = 0xE100000000000000LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v34 = sub_10007C22C(v20, v21, &v36);
    uint64_t v29 = v6;
    uint64_t v22 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v34 = sub_10007C22C(v22, a4, &v36);
    uint64_t v6 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    int64_t v23 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v31,  "deleting optin record %s[%s]",  (uint8_t *)v19,  0x16u);
    uint64_t v24 = v27;
    swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 152LL))(v25);
  __chkstk_darwin(v26);
  *(&v27 - 6) = a1;
  *(&v27 - 5) = a2;
  *(&v27 - 4) = v33;
  *(&v27 - 3) = a4;
  *(&v27 - 2) = v6;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A4ED4);
}

uint64_t sub_10009A22C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain(*(void *)(v0 + 96));
  return v1;
}

uint64_t sub_10009A258()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  sub_100072CC4(&qword_1002E0AC8);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A5214);

  return v3;
}

uint64_t sub_10009A2EC(uint64_t a1, uint64_t a2)
{
  return sub_10009A5C4(a1, a2, &qword_1002E0AD0, (uint64_t)sub_1000A5754);
}

uint64_t sub_10009A300(uint64_t a1, uint64_t a2)
{
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v8 = *(void *)(v2 + 96);
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000914E8();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v10;
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 72) = a1;
  *(void *)(v7 + 80) = a2;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x800000010020FBD0LL, v7);
  [v5 setPredicate:v11];

  id v29 = 0LL;
  id v12 = [v5 execute:&v29];
  id v13 = v29;
  if (!v12)
  {
    id v23 = v29;
    uint64_t v24 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v25);
    swift_errorRelease(v24);
    return 2LL;
  }

  uint64_t v14 = v12;
  uint64_t v15 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  id v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
LABEL_15:

    swift_bridgeObjectRelease(v16);
    return 2LL;
  }

  if (v16 < 0) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v16);
  if (!v27) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v16 & 0xC000000000000001LL) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
  }

  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      __break(1u);
    }
    id v18 = *(id *)(v16 + 32);
  }

  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v16);
  id v20 = [v19 state];
  if (!v20)
  {

    return 2LL;
  }

  unint64_t v21 = v20;
  id v22 = [v20 BOOLValue];

  return (uint64_t)v22;
}

uint64_t sub_10009A5B0(uint64_t a1, uint64_t a2)
{
  return sub_10009A5C4(a1, a2, &qword_1002E0AC8, (uint64_t)sub_1000A5B60);
}

uint64_t sub_10009A5C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v4 + 152LL))();
  sub_100072CC4(a3);
  NSManagedObjectContext.performAndWait<A>(_:)(a4);

  return v9;
}

id sub_10009A648(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v5 = v4;
  uint64_t v10 = (*((uint64_t (**)(void))*v4 + 37))();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    NSString v12 = String._bridgeToObjectiveC()();
    uint64_t v40 = sub_10009AA84;
    uint64_t v41 = 0LL;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    uint64_t v38 = sub_10009AA34;
    int64_t v39 = &unk_10027E910;
    id v13 = _Block_copy(&aBlock);
    id v34 = (id)objc_opt_self(&OBJC_CLASS___KTGroupOperation);
    id v35 = [v34 named:v12 withBlockTakingSelf:v13];

    _Block_release(v13);
    swift_release(v41);
    char v33 = a3;
    uint64_t v14 = (uint64_t (*)(void))*((void *)*v5 + 19);
    id v15 = v5[6];
    uint64_t v16 = v14();
    uint64_t v17 = sub_100072CC4(&qword_1002E0AE0);
    uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_1002487A0;
    *(void *)(v18 + 32) = v11;
    aBlock = (void **)v18;
    specialized Array._endMutation()(v18);
    uint64_t v19 = (uint64_t)aBlock;
    type metadata accessor for KTStoreOptInOperation();
    id v20 = v11;
    id v21 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)( (uint64_t)v15,  v16,  v19,  0x746E65746E69LL,  0xE600000000000000LL,  a4 & 1);
    uint64_t v22 = swift_allocObject(&unk_10027E948, 56LL, 7LL);
    *(void *)(v22 + 16) = a1;
    *(void *)(v22 + 24) = a2;
    *(_BYTE *)(v22 + 32) = v33 & 1;
    *(void *)(v22 + 40) = v21;
    *(void *)(v22 + 4_Block_object_dispose(va, 8) = v5;
    swift_bridgeObjectRetain(a2);
    id v23 = v21;
    swift_retain(v5);
    NSString v24 = String._bridgeToObjectiveC()();
    uint64_t v40 = sub_1000A5E88;
    uint64_t v41 = v22;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    uint64_t v38 = sub_10009AA34;
    int64_t v39 = &unk_10027E960;
    uint64_t v25 = _Block_copy(&aBlock);
    id v26 = [v34 named:v24 withBlockTakingSelf:v25];

    _Block_release(v25);
    swift_release(v41);
    [v26 addSuccessDependency:v23];
    [v35 addSuccessDependency:v26];
    [v35 addSuccessDependency:v23];
    id v27 = [v35 operationQueue];
    [v27 addOperation:v26];

    id v28 = [v35 operationQueue];
    [v28 addOperation:v23];

    return v35;
  }

  else
  {
    NSString v30 = String._bridgeToObjectiveC()();
    uint64_t v40 = sub_10009AA2C;
    uint64_t v41 = 0LL;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    uint64_t v38 = sub_10009AA34;
    int64_t v39 = &unk_10027E8E8;
    int v31 = _Block_copy(&aBlock);
    id v32 = [(id)objc_opt_self(KTGroupOperation) named:v30 withBlockTakingSelf:v31];

    _Block_release(v31);
    swift_release(v41);
    return v32;
  }

void sub_10009AA2C(void *a1)
{
}

void sub_10009AA34(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_10009AA84(uint64_t a1)
{
}

id sub_10009AA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 320LL))();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v32 = a3;
    id v9 = [v7 recordID];

LABEL_5:
    NSString v11 = String._bridgeToObjectiveC()();
    uint64_t v37 = sub_10009AF04;
    uint64_t v38 = 0LL;
    aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256LL;
    id v35 = sub_10009AA34;
    uint64_t v36 = &unk_10027E9B0;
    NSString v12 = _Block_copy(&aBlock);
    id v13 = (void *)objc_opt_self(&OBJC_CLASS___KTGroupOperation);
    id v14 = [v13 named:v11 withBlockTakingSelf:v12];

    _Block_release(v12);
    swift_release(v38);
    type metadata accessor for KTDeleteOptInOperation();
    id v15 = *(uint64_t (**)(void))(*(void *)v3 + 152LL);
    id v16 = *(id *)(v3 + 48);
    uint64_t v17 = v15();
    id v18 = v9;
    id v19 = KTDeleteOptInOperation.__allocating_init(database:context:recordID:)((uint64_t)v16, v17, (uint64_t)v18);
    id v20 = (void *)swift_allocObject(&unk_10027E9E8, 56LL, 7LL);
    v20[2] = v19;
    v20[3] = a1;
    void v20[4] = a2;
    v20[5] = v18;
    v20[6] = v32;
    id v21 = v18;
    id v22 = v19;
    swift_bridgeObjectRetain(a2);
    swift_unknownObjectRetain(v32);
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v37 = sub_1000A6290;
    uint64_t v38 = v20;
    aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256LL;
    id v35 = sub_10009AA34;
    uint64_t v36 = &unk_10027EA00;
    NSString v24 = _Block_copy(&aBlock);
    id v25 = [v13 named:v23 withBlockTakingSelf:v24];

    _Block_release(v24);
    swift_release(v38);
    [v25 addSuccessDependency:v22];
    [v14 addSuccessDependency:v25];
    [v14 addSuccessDependency:v22];
    id v26 = [v14 operationQueue];
    [v26 addOperation:v25];

    id v27 = [v14 operationQueue];
    [v27 addOperation:v22];

    return v14;
  }

  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v3 + 240LL))( *(void *)(v3 + 88),  *(void *)(v3 + 96),  a1,  a2);
  if (v10)
  {
    id v9 = (id)v10;
    uint64_t v32 = a3;
    goto LABEL_5;
  }

  NSString v29 = String._bridgeToObjectiveC()();
  uint64_t v37 = sub_10009AE50;
  uint64_t v38 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256LL;
  id v35 = sub_10009AA34;
  uint64_t v36 = &unk_10027E988;
  NSString v30 = _Block_copy(&aBlock);
  id v31 = [(id)objc_opt_self(KTGroupOperation) named:v29 withBlockTakingSelf:v30];

  _Block_release(v30);
  swift_release(v38);
  return v31;
}

void sub_10009AE50(void *a1)
{
}

void sub_10009AE58(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTError(0LL);
  uint64_t v5 = sub_100073FE0((unint64_t *)&qword_1002E0F10, type metadata accessor for KTError, (uint64_t)&unk_100249B0C);
  uint64_t v6 = swift_allocError(v4, v5, 0LL, 0LL);
  swift_storeEnumTagMultiPayload(v7, v4, a2);
  id v8 = (id)_convertErrorToNSError(_:)(v6);
  swift_errorRelease(v6);
  [a1 setError:v8];
}

void sub_10009AF04(uint64_t a1)
{
}

void sub_10009AF10(uint64_t a1, const char *a2)
{
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_100072DEC(v3, (uint64_t)qword_1002EA8B8);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }
}

id sub_10009AFE4(uint64_t a1, uint64_t a2, id a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v36 = _swiftEmptyArrayStorage;
  NSString v11 = *(uint64_t (**)(void))(*(void *)v4 + 152LL);
  NSString v12 = (void *)v11();
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A6768);

  if (v5)
  {
    swift_bridgeObjectRelease(v36);
  }

  else
  {
    char v29 = a4 & 1;
    uint64_t v13 = swift_allocObject(&unk_10027EA38, 25LL, 7LL);
    *(void *)(v13 + 16) = a3;
    *(_BYTE *)(v13 + 24) = a4 & 1;
    swift_bridgeObjectRetain(a3);
    NSString v14 = String._bridgeToObjectiveC()();
    uint64_t v34 = sub_1000A67B0;
    uint64_t v35 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256LL;
    uint64_t v32 = sub_10009AA34;
    char v33 = &unk_10027EA50;
    id v15 = _Block_copy(&aBlock);
    id v16 = (void *)objc_opt_self(&OBJC_CLASS___KTGroupOperation);
    a3 = [v16 named:v14 withBlockTakingSelf:v15];

    _Block_release(v15);
    swift_release(v35);
    id v17 = *(id *)(v6 + 48);
    uint64_t v18 = v11();
    uint64_t v19 = (uint64_t)v36;
    type metadata accessor for KTStoreOptInOperation();
    swift_bridgeObjectRetain(v19);
    id v20 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)( (uint64_t)v17,  v18,  v19,  0x64726F636572LL,  0xE600000000000000LL,  1);
    uint64_t v21 = swift_allocObject(&unk_10027EA88, 56LL, 7LL);
    *(void *)(v21 + 16) = a1;
    *(void *)(v21 + 24) = a2;
    *(_BYTE *)(v21 + 32) = v29;
    *(void *)(v21 + 40) = v20;
    *(void *)(v21 + 4_Block_object_dispose(va, 8) = v6;
    swift_bridgeObjectRetain(a2);
    id v22 = v20;
    swift_retain(v6);
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v34 = sub_1000A69D8;
    uint64_t v35 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256LL;
    uint64_t v32 = sub_10009AA34;
    char v33 = &unk_10027EAA0;
    NSString v24 = _Block_copy(&aBlock);
    id v25 = [v16 named:v23 withBlockTakingSelf:v24];

    _Block_release(v24);
    swift_release(v35);
    [v25 addDependency:v22];
    [a3 addDependency:v25];
    [a3 addDependency:v22];
    id v26 = [a3 operationQueue];
    [v26 addOperation:v25];

    id v27 = [a3 operationQueue];
    [v27 addOperation:v22];

    swift_bridgeObjectRelease(v36);
  }

  return a3;
}

void sub_10009B358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  v201 = a6;
  uint64_t v219 = a3;
  uint64_t v220 = a4;
  uint64_t v218 = a2;
  uint64_t v214 = type metadata accessor for Logger(0LL);
  uint64_t v202 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  v199 = (char *)&v185 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(char **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  v212 = (char *)&v185 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  v200 = (char *)&v185 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v198 = (char *)&v185 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v197 = (char *)&v185 - v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v185 - v19;
  uint64_t v21 = sub_100072CC4(&qword_1002E0F00);
  uint64_t v22 = __chkstk_darwin(v21);
  NSString v24 = (uint64_t *)((char *)&v185 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22);
  id v26 = (void **)((char *)&v185 - v25);
  uint64_t v27 = *(void *)(a1 + 64);
  uint64_t v187 = a1 + 64;
  uint64_t v28 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v29 = -1LL;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  unint64_t v30 = v29 & v27;
  v208 = v223;
  int v190 = a5 & 1;
  v189 = (char *)&v222 + 4;
  int64_t v193 = (unint64_t)(v28 + 63) >> 6;
  int64_t v186 = v193 - 1;
  uint64_t v203 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v31 = 0LL;
  Swift::Int v205 = a5 & 1;
  uint64_t v32 = (os_log_s *)&qword_1002E0F08;
  *((void *)&v33 + 1) = 4LL;
  __int128 v210 = xmmword_1002464D0;
  unint64_t v209 = 0x800000010020FBD0LL;
  *(void *)&__int128 v33 = 136315138LL;
  __int128 v191 = v33;
  v188 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v33 = 136315906LL;
  __int128 v194 = v33;
  uint64_t v34 = v9;
  uint64_t v211 = v9;
  uint64_t v35 = v10;
  v213 = v10;
  v221 = v20;
  v207 = v24;
  v206 = v26;
  while (1)
  {
    if (v30)
    {
      uint64_t v215 = (v30 - 1) & v30;
      int64_t v216 = v31;
      unint64_t v37 = __clz(__rbit64(v30)) | (v31 << 6);
LABEL_8:
      uint64_t v38 = *(void *)(v203 + 56);
      int64_t v39 = (void *)(*(void *)(v203 + 48) + 16 * v37);
      uint64_t v40 = v39[1];
      *NSString v24 = *v39;
      v24[1] = v40;
      uint64_t v41 = v38 + *((void *)v35 + 9) * v37;
      uint64_t v42 = sub_100072CC4(&qword_1002E0F08);
      (*((void (**)(char *, uint64_t, uint64_t))v35 + 2))((char *)v24 + *(int *)(v42 + 48), v41, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v24, 0LL, 1LL, v42);
      swift_bridgeObjectRetain(v40);
      goto LABEL_21;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      goto LABEL_90;
    }
    if (v43 >= v193) {
      goto LABEL_19;
    }
    unint64_t v44 = *(void *)(v187 + 8 * v43);
    if (v44) {
      goto LABEL_12;
    }
    v31 += 2LL;
    if (v43 + 1 >= v193) {
      goto LABEL_78;
    }
    unint64_t v44 = *(void *)(v187 + 8 * v31);
    if (v44) {
      goto LABEL_15;
    }
    if (v43 + 2 >= v193)
    {
LABEL_19:
      int64_t v216 = v31;
    }

    else
    {
      unint64_t v44 = *(void *)(v187 + 8 * (v43 + 2));
      if (v44)
      {
        v43 += 2LL;
        goto LABEL_12;
      }

      int64_t v31 = v43 + 3;
      if (v43 + 3 < v193)
      {
        unint64_t v44 = *(void *)(v187 + 8 * v31);
        if (v44)
        {
LABEL_15:
          int64_t v43 = v31;
LABEL_12:
          uint64_t v215 = (v44 - 1) & v44;
          int64_t v216 = v43;
          unint64_t v37 = __clz(__rbit64(v44)) + (v43 << 6);
          goto LABEL_8;
        }

        while (1)
        {
          int64_t v43 = v31 + 1;
          if (__OFADD__(v31, 1LL)) {
            __break(1u);
          }
          if (v43 >= v193) {
            break;
          }
          unint64_t v44 = *(void *)(v187 + 8 * v43);
          ++v31;
          if (v44) {
            goto LABEL_12;
          }
        }

        int64_t v43 = v186;
LABEL_78:
        int64_t v216 = v43;
        goto LABEL_20;
      }

      int64_t v216 = v43 + 2;
    }

void sub_10009C8BC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v10, (uint64_t)qword_1002EA8B8);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v11 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(28LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v27 = v24;
    *(_DWORD *)uint64_t v14 = 136315650;
    os_log_type_t v23 = v13;
    char v15 = a4;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = swift_bridgeObjectRetain(a1);
    uint64_t v18 = Dictionary.Keys.description.getter(v17, &type metadata for String, v16, &protocol witness table for String);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(a1);
    uint64_t v25 = sub_10007C22C(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    uint64_t v25 = sub_10007C22C(a2, a3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v14 + 22) = 1024;
    LODWORD(v25) = v15 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4, v14 + 24, v14 + 28);
    _os_log_impl((void *)&_mh_execute_header, v12, v23, "updating record %s[%s] to %{BOOL}d", (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    uint64_t v21 = swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v21);
  __chkstk_darwin(v22);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A6F40);
}

void sub_10009CBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned __int8 v175 = a5;
  uint64_t v156 = a4;
  uint64_t v170 = a2;
  uint64_t v171 = a3;
  uint64_t v167 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void **)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v166 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v165 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v160 = (char *)&v146 - v13;
  __chkstk_darwin(v12);
  char v15 = (char *)&v146 - v14;
  uint64_t v16 = sub_100072CC4(&qword_1002E0F00);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v19 = (int64_t *)((char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v17);
  uint64_t v21 = (int64_t *)((char *)&v146 - v20);
  id v180 = 0LL;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v149 = a1 + 64;
  uint64_t v23 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  uint64_t v174 = v24 & v22;
  uint64_t v159 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(&v180, v179, 1LL, 0LL);
  int64_t v25 = 0LL;
  unint64_t v157 = &v178;
  int64_t v153 = (unint64_t)(v23 + 63) >> 6;
  int64_t v146 = v153 - 1;
  Swift::Int v161 = v175 & 1;
  *((void *)&v26 + 1) = 4LL;
  __int128 v163 = xmmword_1002464D0;
  unint64_t v162 = 0x800000010020FBD0LL;
  *(void *)&__int128 v26 = 136315138LL;
  __int128 v148 = v26;
  v147 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v26 = 136315906LL;
  __int128 v151 = v26;
  id v154 = (void *)v8;
  id v155 = v9;
  id v176 = v15;
  unint64_t v158 = v19;
  unint64_t v164 = v21;
  os_log_t v168 = v6;
  unint64_t v27 = v174;
  if (!v174) {
    goto LABEL_6;
  }
LABEL_4:
  int64_t v173 = v25;
  uint64_t v174 = (v27 - 1) & v27;
  unint64_t v28 = __clz(__rbit64(v27)) | (v25 << 6);
LABEL_5:
  uint64_t v29 = *(void *)(v159 + 56);
  unint64_t v30 = (void *)(*(void *)(v159 + 48) + 16 * v28);
  uint64_t v31 = v30[1];
  void *v19 = *v30;
  v19[1] = v31;
  uint64_t v32 = v29 + v9[9] * v28;
  uint64_t v33 = sub_100072CC4(&qword_1002E0F08);
  ((void (*)(char *, uint64_t, uint64_t))v9[2])((char *)v19 + *(int *)(v33 + 48), v32, v8);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v19, 0LL, 1LL, v33);
  swift_bridgeObjectRetain(v31);
  while (1)
  {
    sub_1000A9A0C((uint64_t)v19, (uint64_t)v21, &qword_1002E0F00);
    uint64_t v37 = sub_100072CC4(&qword_1002E0F08);
    uint64_t v39 = *v21;
    uint64_t v38 = (void *)v21[1];
    ((void (*)(char *, char *, uint64_t))v9[4])(v176, (char *)v21 + *(int *)(v37 + 48), v8);
    uint64_t v21 = (uint64_t *)[(id)objc_opt_self(CloudOptIn) fetchRequest];
    sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
    uint64_t v40 = sub_100072CC4((uint64_t *)&unk_1002E0440);
    uint64_t v41 = swift_allocObject(v40, 112LL, 7LL);
    *(_OWORD *)(v41 + 16) = v163;
    *(void *)(v41 + 56) = &type metadata for String;
    unint64_t v42 = sub_1000914E8();
    uint64_t v169 = v39;
    *(void *)(v41 + 32) = v39;
    *(void *)(v41 + 40) = v38;
    *(void *)(v41 + 96) = &type metadata for String;
    *(void *)(v41 + 104) = v42;
    uint64_t v43 = v170;
    uint64_t v44 = v171;
    *(void *)(v41 + 64) = v42;
    *(void *)(v41 + 72) = v43;
    *(void *)(v41 + 80) = v44;
    unsigned __int8 v175 = v38;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v44);
    uint64_t v45 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, v162, v41);
    [v21 setPredicate:v45];

    id v178 = 0LL;
    uint64_t v46 = [v21 execute:&v178];
    id v47 = v178;
    if (v46)
    {
      uint64_t v6 = v46;
      uint64_t v48 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
      uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v48);
      id v50 = v47;

      if ((unint64_t)v49 >> 62)
      {
        if (v49 < 0) {
          uint64_t v128 = v49;
        }
        else {
          uint64_t v128 = v49 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v49);
        uint64_t v51 = (void *)_CocoaArrayWrapper.endIndex.getter(v128);
        swift_bridgeObjectRelease(v49);
      }

      else
      {
        uint64_t v51 = *(void **)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      unint64_t v52 = v168;
      if (v51)
      {
        if ((v49 & 0xC000000000000001LL) != 0)
        {
          id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v49);
        }

        else
        {
          if (!*(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }

          id v53 = *(id *)(v49 + 32);
        }

        uint64_t v51 = v53;
      }

      swift_bridgeObjectRelease(v49);
      id v54 = v180;
      id v180 = v51;

      uint64_t v55 = v165;
    }

    else
    {
      id v56 = v178;
      uint64_t v57 = _convertNSErrorToError(_:)(v47);

      swift_willThrow(v58);
      swift_errorRelease(v57);
      uint64_t v152 = 0LL;
      unint64_t v52 = v168;
      uint64_t v55 = v165;
    }

    uint64_t v59 = v166;
    uint64_t v172 = v21;
    if (v180)
    {
      uint64_t v6 = v9;
      uint64_t v60 = v8;
      swift_bridgeObjectRelease(v175);
      if (qword_1002EA8B0 != -1) {
        swift_once(&qword_1002EA8B0, sub_1000972A0);
      }
      uint64_t v61 = v167;
      uint64_t v62 = sub_100072DEC(v167, (uint64_t)qword_1002EA8B8);
      ((void (*)(char *, uint64_t, uint64_t))v52[2])(v59, v62, v61);
      id v63 = v52;
      uint64_t v64 = (void (*)(char *, char *, uint64_t))v6[2];
      id v65 = v160;
      uint64_t v66 = v176;
      v64(v160, v176, v60);
      uint64_t v67 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v55, v66, v60);
      id v68 = v55;
      uint64_t v69 = (os_log_s *)Logger.logObject.getter(v67);
      int v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, (os_log_type_t)v70))
      {
        LODWORD(v175) = v70;
        uint64_t v71 = swift_slowAlloc(42LL, -1LL);
        uint64_t v72 = (void *)swift_slowAlloc(96LL, -1LL);
        id v178 = v72;
        *(_DWORD *)uint64_t v71 = v151;
        id v73 = v180;
        if (v180)
        {
          id v74 = v72;
          id v75 = [v180 recordID];
          uint64_t v76 = v160;
          if (v75)
          {
            uint64_t v77 = v75;
            uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            unint64_t v80 = v79;
          }

          else
          {
            unint64_t v80 = 0xE300000000000000LL;
            uint64_t v78 = 7104878LL;
          }
        }

        else
        {
          id v74 = v72;
          unint64_t v80 = 0xE300000000000000LL;
          uint64_t v78 = 7104878LL;
          uint64_t v76 = v160;
        }

        uint64_t v177 = sub_10007C22C(v78, v80, (uint64_t *)&v178);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v157, v71 + 4, v71 + 12);
        swift_bridgeObjectRelease(v80);
        *(_WORD *)(v71 + 12) = 2080;
        if (v73)
        {
          id v110 = [v73 uri];
          uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
          unint64_t v113 = v112;
        }

        else
        {
          uint64_t v111 = 0LL;
          unint64_t v113 = 0xE000000000000000LL;
        }

        uint64_t v6 = v154;
        uint64_t v177 = sub_10007C22C(v111, v113, (uint64_t *)&v178);
        unint64_t v114 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v157, v71 + 14, v71 + 22);
        swift_bridgeObjectRelease(v113);
        *(_WORD *)(v71 + 22) = 2080;
        uint64_t v115 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter(v6, v115);
        unint64_t v118 = v117;
        uint64_t v177 = sub_10007C22C(v116, v117, (uint64_t *)&v178);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v114, v71 + 24, v71 + 32);
        swift_bridgeObjectRelease(v118);
        id v119 = v155;
        NSString v120 = (uint64_t (*)(char *, void *))v155[1];
        uint64_t v121 = v120(v76, v6);
        *(_WORD *)(v71 + 32) = 2048;
        NSArray v122 = v165;
        uint64_t v177 = Date.timeIntervalSince1970.getter(v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v114, v71 + 34, v71 + 42);
        v120(v122, v6);
        _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v175,  "setOptIn: updating existing record %s %s %s[%f",  (uint8_t *)v71,  0x2Au);
        swift_arrayDestroy(v74, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1LL, -1LL);
        uint64_t v9 = v119;
        swift_slowDealloc(v71, -1LL, -1LL);

        ((void (*)(char *, uint64_t))v168[1])(v166, v167);
        unint64_t v19 = v158;
        uint64_t v21 = v164;
        uint64_t v8 = (uint64_t)v6;
      }

      else
      {
        os_log_type_t v96 = (void (*)(char *, uint64_t))v6[1];
        v96(v65, v60);
        v96(v68, v60);

        ((void (*)(char *, uint64_t))v63[1])(v59, v61);
        unint64_t v19 = v158;
        uint64_t v21 = v164;
        uint64_t v8 = v60;
        uint64_t v9 = v6;
      }

      id v109 = v180;
      if (!v180) {
        goto LABEL_75;
      }
    }

    else
    {
      uint64_t v6 = v175;
      uint64_t v81 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v156 + 240LL))( v169,  v175,  v170,  v171);
      if (!v81)
      {
        uint64_t v138 = v167;
        if (qword_1002EA8B0 == -1)
        {
LABEL_81:
          sub_100072DEC(v138, (uint64_t)qword_1002EA8B8);
          os_log_type_t v139 = static os_log_type_t.error.getter();
          uint64_t v140 = swift_bridgeObjectRetain(v6);
          id v141 = (os_log_s *)Logger.logObject.getter(v140);
          os_log_type_t v142 = v139;
          if (os_log_type_enabled(v141, v139))
          {
            unint64_t v143 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            unint64_t v144 = v21;
            uint64_t v145 = (void *)swift_slowAlloc(32LL, -1LL);
            id v178 = v145;
            *(_DWORD *)unint64_t v143 = v148;
            swift_bridgeObjectRetain(v6);
            uint64_t v177 = sub_10007C22C(v169, (unint64_t)v6, (uint64_t *)&v178);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v143 + 4, v143 + 12);
            swift_bridgeObjectRelease_n(v6, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v141, v142, "failed to create recordID %s", v143, 0xCu);
            swift_arrayDestroy(v145, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v145, -1LL, -1LL);
            swift_slowDealloc(v143, -1LL, -1LL);

            ((void (*)(char *, uint64_t))v155[1])(v176, v8);
          }

          else
          {
            swift_bridgeObjectRelease_n(v6, 2LL);

LABEL_76:
            ((void (*)(char *, uint64_t))v9[1])(v176, v8);
          }

          swift_release(v159);
          goto LABEL_79;
        }

LABEL_86:
        swift_once(&qword_1002EA8B0, sub_1000972A0);
        uint64_t v138 = v167;
        goto LABEL_81;
      }

      uint64_t v82 = (void *)v81;
      uint64_t v83 = v167;
      if (qword_1002EA8B0 != -1)
      {
        swift_once(&qword_1002EA8B0, sub_1000972A0);
        uint64_t v83 = v167;
      }

      sub_100072DEC(v83, (uint64_t)qword_1002EA8B8);
      os_log_type_t v84 = static os_log_type_t.info.getter();
      id v85 = v82;
      uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
      if (os_log_type_enabled(v86, v84))
      {
        unint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v88 = (void *)swift_slowAlloc(32LL, -1LL);
        id v178 = v88;
        *(_DWORD *)unint64_t v87 = v148;
        os_log_type_t v150 = v87 + 4;
        id v89 = [v85 recordName];
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        unint64_t v92 = v91;

        uint64_t v177 = sub_10007C22C(v90, v92, (uint64_t *)&v178);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v157, v150, v87 + 12);

        os_log_type_t v93 = v85;
        unint64_t v94 = v92;
        unint64_t v19 = v158;
        swift_bridgeObjectRelease(v94);
        _os_log_impl((void *)&_mh_execute_header, v86, v84, "creating new record %s", v87, 0xCu);
        swift_arrayDestroy(v88, 1LL, v147);
        swift_slowDealloc(v88, -1LL, -1LL);
        uint64_t v95 = v87;
        uint64_t v6 = v175;
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {

        os_log_type_t v93 = v85;
      }

      uint64_t v21 = v164;
      unint64_t v97 = (void *)(*(uint64_t (**)(void))(*(void *)v156 + 152LL))();
      id v98 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v97];

      id v99 = v180;
      id v180 = v98;

      if (v98)
      {
        id v100 = v98;
        NSString v101 = [v93 recordName];
        if (!v101)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
          uint64_t v103 = v102;
          NSString v101 = String._bridgeToObjectiveC()();
          uint64_t v104 = v103;
          uint64_t v21 = v164;
          swift_bridgeObjectRelease(v104);
        }

        objc_msgSend(v100, "setRecordID:", v101, v146);

        id v105 = v100;
        NSString v106 = String._bridgeToObjectiveC()();
        [v105 setApplication:v106];

        id v107 = v105;
        NSString v108 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v6);
        [v107 setUri:v108];
      }

      else
      {
        swift_bridgeObjectRelease(v6);
      }

      uint64_t v8 = (uint64_t)v154;
      uint64_t v9 = v155;
      id v109 = v180;
      if (!v180)
      {
LABEL_75:

        goto LABEL_76;
      }
    }

    id v123 = v109;
    NSString v124 = String._bridgeToObjectiveC()();
    [v123 setCkstate:v124];

    sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
    Class isa = NSNumber.init(integerLiteral:)(v161).super.super.isa;
    [v123 setState:isa];

    unint64_t v126 = v176;
    Class v127 = Date._bridgeToObjectiveC()().super.isa;
    [v123 setSmtTimestamp:v127];

    ((void (*)(char *, uint64_t))v9[1])(v126, v8);
    int64_t v25 = v173;
    unint64_t v27 = v174;
    if (v174) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v34 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      goto LABEL_85;
    }
    if (v34 >= v153)
    {
LABEL_16:
      int64_t v173 = v25;
      goto LABEL_17;
    }

    unint64_t v35 = *(void *)(v149 + 8 * v34);
    if (v35) {
      goto LABEL_9;
    }
    v25 += 2LL;
    if (v34 + 1 < v153)
    {
      unint64_t v35 = *(void *)(v149 + 8 * v25);
      if (v35) {
        goto LABEL_12;
      }
      if (v34 + 2 >= v153) {
        goto LABEL_16;
      }
      unint64_t v35 = *(void *)(v149 + 8 * (v34 + 2));
      if (v35)
      {
        v34 += 2LL;
        goto LABEL_9;
      }

      int64_t v25 = v34 + 3;
      if (v34 + 3 >= v153)
      {
        int64_t v173 = v34 + 2;
        goto LABEL_17;
      }

      unint64_t v35 = *(void *)(v149 + 8 * v25);
      if (v35)
      {
LABEL_12:
        int64_t v34 = v25;
LABEL_9:
        int64_t v173 = v34;
        uint64_t v174 = (v35 - 1) & v35;
        unint64_t v28 = __clz(__rbit64(v35)) + (v34 << 6);
        goto LABEL_5;
      }

      while (1)
      {
        int64_t v34 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          __break(1u);
        }
        if (v34 >= v153) {
          break;
        }
        unint64_t v35 = *(void *)(v149 + 8 * v34);
        ++v25;
        if (v35) {
          goto LABEL_9;
        }
      }

      int64_t v34 = v146;
    }

    int64_t v173 = v34;
LABEL_17:
    uint64_t v36 = sub_100072CC4(&qword_1002E0F08);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v19, 1LL, 1LL, v36);
    uint64_t v174 = 0LL;
  }

  uint64_t v129 = swift_release(v159);
  unint64_t v130 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v156 + 152LL))(v129);
  id v178 = 0LL;
  unsigned __int8 v131 = [v130 save:&v178];

  id v132 = v178;
  if ((v131 & 1) != 0)
  {
    id v133 = v180;
    id v134 = v178;

    return;
  }

  id v135 = v178;
  uint64_t v136 = _convertNSErrorToError(_:)(v132);

  uint64_t v152 = v136;
  swift_willThrow(v137);
LABEL_79:
}

void sub_10009DC88(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v8 = v6;
  int v43 = a6;
  uint64_t v42 = a4;
  unint64_t v44 = a2;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v16, (uint64_t)qword_1002EA8B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  swift_bridgeObjectRetain_n(v44, 2LL);
  uint64_t v17 = swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  int v40 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(38LL, -1LL);
    uint64_t v37 = a3;
    uint64_t v21 = v20;
    uint64_t v36 = swift_slowAlloc(96LL, -1LL);
    uint64_t v47 = v36;
    *(_DWORD *)uint64_t v21 = 136315906;
    os_log_t v35 = v18;
    uint64_t v41 = a1;
    unint64_t v22 = v44;
    swift_bridgeObjectRetain(v44);
    uint64_t v45 = sub_10007C22C(v41, v22, &v47);
    uint64_t v39 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(v22, 3LL);
    *(_WORD *)(v21 + 12) = 2080;
    unint64_t v38 = a5;
    uint64_t v23 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v12, v23);
    unint64_t v26 = v25;
    uint64_t v45 = sub_10007C22C(v24, v25, &v47);
    LOBYTE(v22) = v43;
    a5 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain(a5);
    uint64_t v27 = v42;
    uint64_t v45 = sub_10007C22C(v42, a5, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease_n(a5, 3LL);
    *(_WORD *)(v21 + 32) = 1024;
    int v28 = v22 & 1;
    a1 = v41;
    LODWORD(v45) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v21 + 34, v21 + 38);
    os_log_t v29 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v40,  "adding optin record %s:%s[%s] to %{BOOL}d",  (uint8_t *)v21,  0x26u);
    uint64_t v30 = v36;
    swift_arrayDestroy(v36, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v21;
    a3 = v37;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v44, 2LL);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    swift_bridgeObjectRelease_n(a5, 2LL);
    uint64_t v27 = v42;
  }

  uint64_t v32 = (void *)(*(uint64_t (**)(void))(*(void *)v8 + 152LL))();
  __chkstk_darwin(v32);
  unint64_t v33 = v44;
  *(&v34 - _Block_object_dispose(va, 8) = a1;
  *(&v34 - 7) = v33;
  *(&v34 - 6) = v27;
  *(&v34 - 5) = a5;
  *(&v34 - 4) = a3;
  *(&v34 - 3) = v8;
  *((_BYTE *)&v34 - 16) = v43 & 1;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A6F60);
}

void sub_10009E050( uint64_t a1, unint64_t a2, os_log_s *a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v235 = a7;
  uint64_t v246 = a6;
  uint64_t v243 = a5;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v248 = *(void *)(v11 - 8);
  uint64_t v249 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v220 = (char *)&v220 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  v223 = (char *)&v220 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v239 = (char *)&v220 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v226 = (char *)&v220 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v231 = (char *)&v220 - v21;
  __chkstk_darwin(v20);
  v230 = (char *)&v220 - v22;
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v241 = *(void *)(v23 - 8);
  uint64_t v242 = v23;
  uint64_t v24 = __chkstk_darwin(v23);
  v228 = (char *)&v220 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  v229 = (char *)&v220 - v26;
  uint64_t v27 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v224 = (uint64_t)&v220 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  v225 = (char *)&v220 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  id v227 = (char *)&v220 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v221 = (char *)&v220 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v222 = (uint64_t)&v220 - v37;
  __chkstk_darwin(v36);
  uint64_t v247 = (uint64_t)&v220 - v38;
  id v234 = (id)objc_opt_self(&OBJC_CLASS___CloudOptIn);
  id v39 = [v234 fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v233 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v40 = swift_allocObject(v233, 112LL, 7LL);
  __int128 v232 = xmmword_1002464D0;
  *(_OWORD *)(v40 + 16) = xmmword_1002464D0;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v41 = sub_1000914E8();
  uint64_t v238 = a1;
  *(void *)(v40 + 32) = a1;
  *(void *)(v40 + 40) = a2;
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v41;
  *(void *)(v40 + 64) = v41;
  *(void *)(v40 + 72) = a3;
  os_log_t v244 = a3;
  *(void *)(v40 + 80) = a4;
  unint64_t v236 = a2;
  swift_bridgeObjectRetain(a2);
  v245 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v42 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x800000010020FBD0LL, v40);
  [v39 setPredicate:v42];

  id v253 = 0LL;
  id v237 = v39;
  id v43 = [v39 execute:&v253];
  id v44 = v253;
  if (v43)
  {
    uint64_t v45 = v43;
    uint64_t v46 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
    uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);
    id v48 = v44;

    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0) {
        uint64_t v114 = v47;
      }
      else {
        uint64_t v114 = v47 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v47);
      uint64_t v115 = _CocoaArrayWrapper.endIndex.getter(v114);
      swift_bridgeObjectRelease(v47);
      if (v115)
      {
LABEL_4:
        if ((v47 & 0xC000000000000001LL) != 0)
        {
          id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v47);
          uint64_t v50 = v248;
          uint64_t v49 = v249;
          uint64_t v52 = v241;
          uint64_t v51 = v242;
          id v53 = v231;
          id v54 = v230;
        }

        else
        {
          uint64_t v50 = v248;
          uint64_t v49 = v249;
          uint64_t v52 = v241;
          uint64_t v51 = v242;
          id v53 = v231;
          id v54 = v230;
          if (!*(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            goto LABEL_75;
          }

          id v55 = *(id *)(v47 + 32);
        }

        swift_bridgeObjectRelease(v47);
        uint64_t v56 = qword_1002EA8B0;
        a3 = (os_log_s *)v55;
        if (v56 == -1)
        {
LABEL_8:
          uint64_t v57 = sub_100072DEC(v51, (uint64_t)qword_1002EA8B8);
          uint64_t v58 = v229;
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v229, v57, v51);
          uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
          uint64_t v60 = v243;
          v59(v54, v243, v49);
          v245 = v59;
          v59(v53, v60, v49);
          uint64_t v61 = a3;
          uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
          LODWORD(v247) = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, (os_log_type_t)v247))
          {
            os_log_t v244 = v62;
            uint64_t v63 = swift_slowAlloc(52LL, -1LL);
            v239 = (char *)swift_slowAlloc(128LL, -1LL);
            id v253 = v239;
            *(_DWORD *)uint64_t v63 = 136316162;
            id v64 = -[os_log_s recordID](v61, "recordID");
            if (v64)
            {
              id v65 = v64;
              uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
              unint64_t v68 = v67;
            }

            else
            {
              unint64_t v68 = 0xE300000000000000LL;
              uint64_t v66 = 7104878LL;
            }

            uint64_t v74 = v50;
            double v251 = COERCE_DOUBLE(sub_10007C22C(v66, v68, (uint64_t *)&v253));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v63 + 4, v63 + 12);

            swift_bridgeObjectRelease(v68);
            *(_WORD *)(v63 + 12) = 2080;
            id v75 = -[os_log_s uri](v61, "uri");
            uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            unint64_t v78 = v77;

            double v251 = COERCE_DOUBLE(sub_10007C22C(v76, v78, (uint64_t *)&v253));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v63 + 14, v63 + 22);

            swift_bridgeObjectRelease(v78);
            *(_WORD *)(v63 + 22) = 2080;
            uint64_t v79 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            unint64_t v80 = v230;
            uint64_t v81 = v249;
            uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v249, v79);
            unint64_t v84 = v83;
            double v251 = COERCE_DOUBLE(sub_10007C22C(v82, v83, (uint64_t *)&v253));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v63 + 24, v63 + 32);
            swift_bridgeObjectRelease(v84);
            id v85 = *(uint64_t (**)(char *, uint64_t))(v74 + 8);
            uint64_t v86 = v85(v80, v81);
            *(_WORD *)(v63 + 32) = 2048;
            unint64_t v87 = v231;
            double v251 = Date.timeIntervalSince1970.getter(v86);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v63 + 34, v63 + 42);
            v85(v87, v81);
            *(_WORD *)(v63 + 42) = 2080;
            id v73 = &selRef_deleteDownloadRecord_application_error_;
            id v88 = -[os_log_s smtTimestamp](v61, "smtTimestamp");
            if (v88)
            {
              id v89 = v88;
              uint64_t v90 = (uint64_t)v221;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v88);

              uint64_t v91 = 0LL;
            }

            else
            {
              uint64_t v91 = 1LL;
              uint64_t v90 = (uint64_t)v221;
            }

            uint64_t v49 = v249;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v90, v91, 1LL, v249);
            uint64_t v92 = v222;
            sub_1000A9A0C(v90, v222, (uint64_t *)&unk_1002DF740);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v92, 1LL, v49))
            {
              sub_100077CFC(v92, (uint64_t *)&unk_1002DF740);
              unint64_t v93 = 0xE100000000000000LL;
              uint64_t v94 = 45LL;
            }

            else
            {
              uint64_t v95 = v226;
              v245(v226, v92, v49);
              uint64_t v96 = sub_100077CFC(v92, (uint64_t *)&unk_1002DF740);
              uint64_t v94 = Date.description.getter(v96);
              unint64_t v93 = v97;
              v85(v95, v49);
            }

            double v251 = COERCE_DOUBLE(sub_10007C22C(v94, v93, (uint64_t *)&v253));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v63 + 44, v63 + 52);

            swift_bridgeObjectRelease(v93);
            os_log_t v98 = v244;
            _os_log_impl( (void *)&_mh_execute_header,  v244,  (os_log_type_t)v247,  "addOptIn: have existing record %s %s %s[%f] %s",  (uint8_t *)v63,  0x34u);
            id v99 = v239;
            swift_arrayDestroy(v239, 4LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v99, -1LL, -1LL);
            swift_slowDealloc(v63, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v241 + 8))(v229, v242);
          }

          else
          {

            uint64_t v72 = *(void (**)(char *, uint64_t))(v50 + 8);
            v72(v54, v49);
            v72(v53, v49);

            (*(void (**)(char *, uint64_t))(v241 + 8))(v58, v51);
            id v73 = &selRef_deleteDownloadRecord_application_error_;
          }

          id v100 = [v61 v73[403]];
          if (v100)
          {
            NSString v101 = v100;
            uint64_t v102 = v226;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v100);

            uint64_t v103 = v248;
            uint64_t v104 = (uint64_t)v227;
            (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v227, v102, v49);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v104, 0LL, 1LL, v49);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v104, 1LL, v49) != 1)
            {

              uint64_t v105 = v104;
LABEL_71:
              sub_100077CFC(v105, (uint64_t *)&unk_1002DF740);
              return;
            }
          }

          else
          {
            uint64_t v104 = (uint64_t)v227;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v248 + 56))(v227, 1LL, 1LL, v49);
          }

          sub_100077CFC(v104, (uint64_t *)&unk_1002DF740);
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          -[os_log_s setSmtTimestamp:](v61, "setSmtTimestamp:", isa);

          NSString v107 = String._bridgeToObjectiveC()();
          -[os_log_s setCkstate:](v61, "setCkstate:", v107);

          NSString v108 = (void *)(*(uint64_t (**)(void))(*(void *)v246 + 152LL))();
          id v253 = 0LL;
          unsigned int v109 = [v108 save:&v253];

          id v110 = v253;
          if (v109)
          {
            id v111 = v253;
          }

          else
          {
            id v112 = v253;
            _convertNSErrorToError(_:)(v110);

            swift_willThrow(v113);
          }

          return;
        }

LABEL_75:
        swift_once(&qword_1002EA8B0, sub_1000972A0);
        goto LABEL_8;
      }
    }

    else if (*(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_4;
    }

    swift_bridgeObjectRelease(v47);
  }

  else
  {
    id v69 = v253;
    uint64_t v70 = _convertNSErrorToError(_:)(v44);

    swift_willThrow(v71);
    swift_errorRelease(v70);
    uint64_t v240 = 0LL;
  }

  v231 = *(char **)(v248 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v231)(v247, 1LL, 1LL, v249);
  id v116 = [v234 fetchRequest];
  uint64_t v117 = swift_allocObject(v233, 112LL, 7LL);
  *(_OWORD *)(v117 + 16) = v232;
  *(void *)(v117 + 56) = &type metadata for String;
  *(void *)(v117 + 64) = v41;
  *(void *)(v117 + 32) = v244;
  unint64_t v118 = v245;
  *(void *)(v117 + 40) = v245;
  *(void *)(v117 + 96) = &type metadata for Bool;
  *(void *)(v117 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v117 + 72) = v235 & 1;
  swift_bridgeObjectRetain(v118);
  id v119 = (void *)NSPredicate.init(format:_:)(0xD00000000000001FLL, 0x800000010020FD10LL, v117);
  [v116 setPredicate:v119];

  uint64_t v120 = sub_100072CC4(&qword_1002E0AE0);
  uint64_t v121 = swift_allocObject(v120, 40LL, 7LL);
  *(_OWORD *)(v121 + 16) = xmmword_1002487A0;
  id v122 = objc_allocWithZone(&OBJC_CLASS___NSSortDescriptor);
  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v122 initWithKey:v123 ascending:0];

  *(void *)(v121 + 32) = v124;
  id v253 = (id)v121;
  specialized Array._endMutation()(v125);
  id v126 = v253;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E0EF0, &OBJC_CLASS___NSSortDescriptor_ptr);
  Class v127 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v126);
  [v116 setSortDescriptors:v127];

  uint64_t v128 = sub_100072CC4(&qword_1002E03D8);
  uint64_t v129 = swift_allocObject(v128, 64LL, 7LL);
  *(_OWORD *)(v129 + 16) = xmmword_1002464F0;
  *(void *)(v129 + 56) = &type metadata for String;
  strcpy((char *)(v129 + 32), "smtTimestamp");
  *(_BYTE *)(v129 + 45) = 0;
  *(_WORD *)(v129 + 46) = -5120;
  Class v130 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v129);
  [v116 setPropertiesToFetch:v130];

  [v116 setFetchLimit:1];
  id v253 = 0LL;
  id v131 = [v116 execute:&v253];
  id v132 = v253;
  if (v131)
  {
    id v133 = v131;
    uint64_t v134 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
    uint64_t v135 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v133, v134);
    id v136 = v132;

    uint64_t v137 = v242;
    unint64_t v138 = v236;
    if ((unint64_t)v135 >> 62)
    {
      if (v135 < 0) {
        uint64_t v219 = v135;
      }
      else {
        uint64_t v219 = v135 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v135);
      uint64_t v139 = _CocoaArrayWrapper.endIndex.getter(v219);
      swift_bridgeObjectRelease(v135);
    }

    else
    {
      uint64_t v139 = *(void *)((v135 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v140 = (uint64_t)v225;
    id v141 = v239;
    if (v139)
    {
      if ((v135 & 0xC000000000000001LL) != 0)
      {
        id v142 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v135);
      }

      else
      {
        if (!*(void *)((v135 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          goto LABEL_82;
        }

        id v142 = *(id *)(v135 + 32);
      }

      unint64_t v143 = v142;
      swift_bridgeObjectRelease(v135);
      id v144 = [v143 smtTimestamp];
      if (v144)
      {
        id v145 = v144;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v144);

        uint64_t v146 = 0LL;
        unint64_t v143 = v145;
      }

      else
      {
        uint64_t v146 = 1LL;
      }

      id v141 = v239;

      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v231)(v140, v146, 1LL, v249);
      sub_1000A99C4(v140, v247);
    }

    else
    {
      swift_bridgeObjectRelease(v135);
    }
  }

  else
  {
    id v147 = v253;
    uint64_t v148 = _convertNSErrorToError(_:)(v132);

    swift_willThrow(v149);
    swift_errorRelease(v148);
    uint64_t v240 = 0LL;
    uint64_t v137 = v242;
    unint64_t v138 = v236;
    id v141 = v239;
  }

  uint64_t v150 = (*(uint64_t (**)(uint64_t, unint64_t, os_log_t, void (*)(char *, uint64_t, uint64_t)))(*(void *)v246 + 240LL))( v238,  v138,  v244,  v245);
  if (!v150)
  {
    if (qword_1002EA8B0 == -1)
    {
LABEL_54:
      sub_100072DEC(v137, (uint64_t)qword_1002EA8B8);
      os_log_type_t v181 = static os_log_type_t.error.getter();
      uint64_t v182 = swift_bridgeObjectRetain_n(v138, 2LL);
      id v183 = (os_log_s *)Logger.logObject.getter(v182);
      if (os_log_type_enabled(v183, v181))
      {
        uint64_t v184 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v185 = (void *)swift_slowAlloc(32LL, -1LL);
        id v253 = v185;
        *(_DWORD *)uint64_t v184 = 136315138;
        swift_bridgeObjectRetain(v138);
        double v251 = COERCE_DOUBLE(sub_10007C22C(v238, v138, (uint64_t *)&v253));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v184 + 4, v184 + 12);
        swift_bridgeObjectRelease_n(v138, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v183, v181, "failed to create recordID %s", v184, 0xCu);
        swift_arrayDestroy(v185, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v185, -1LL, -1LL);
        swift_slowDealloc(v184, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v138, 2LL);
      }

      uint64_t v105 = v247;
      goto LABEL_71;
    }

LABEL_82:
    swift_once(&qword_1002EA8B0, sub_1000972A0);
    goto LABEL_54;
  }

  __int128 v151 = (void *)v150;
  id v234 = v116;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v152 = sub_100072DEC(v137, (uint64_t)qword_1002EA8B8);
  uint64_t v153 = v241;
  id v154 = v228;
  uint64_t v155 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 16))(v228, v152, v137);
  int v156 = static os_log_type_t.info.getter(v155);
  uint64_t v157 = v249;
  unint64_t v158 = *(void (**)(char *, uint64_t, uint64_t))(v248 + 16);
  uint64_t v159 = v243;
  v158(v141, v243, v249);
  unint64_t v160 = v223;
  *(void *)&__int128 v232 = v158;
  v158(v223, v159, v157);
  Swift::Int v161 = v154;
  unint64_t v162 = v151;
  __int128 v163 = (os_log_s *)Logger.logObject.getter(v162);
  LODWORD(v233) = v156;
  if (os_log_type_enabled(v163, (os_log_type_t)v156))
  {
    uint64_t v164 = swift_slowAlloc(42LL, -1LL);
    v230 = (char *)swift_slowAlloc(96LL, -1LL);
    id v253 = v230;
    *(_DWORD *)uint64_t v164 = 136315906;
    id v165 = [v162 recordName];
    uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
    unint64_t v168 = v167;

    double v251 = COERCE_DOUBLE(sub_10007C22C(v166, v168, (uint64_t *)&v253));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v164 + 4, v164 + 12);

    v231 = v162;
    swift_bridgeObjectRelease(v168);
    *(_WORD *)(v164 + 12) = 2080;
    uint64_t v169 = sub_100073FE0( &qword_1002E0AE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v170 = v239;
    uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(v249, v169);
    unint64_t v173 = v172;
    double v251 = COERCE_DOUBLE(sub_10007C22C(v171, v172, (uint64_t *)&v253));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v164 + 14, v164 + 22);
    swift_bridgeObjectRelease(v173);
    uint64_t v174 = v248;
    unsigned __int8 v175 = *(uint64_t (**)(char *, uint64_t))(v248 + 8);
    uint64_t v176 = v175(v170, v249);
    *(_WORD *)(v164 + 22) = 2048;
    double v251 = Date.timeIntervalSince1970.getter(v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v164 + 24, v164 + 32);
    v175(v160, v249);
    *(_WORD *)(v164 + 32) = 2080;
    uint64_t v177 = v249;
    uint64_t v178 = v247;
    swift_beginAccess(v247, &v251, 0LL, 0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v178, 1LL, v177))
    {
      unint64_t v179 = 0xE100000000000000LL;
      uint64_t v180 = 45LL;
    }

    else
    {
      __int128 v191 = v226;
      uint64_t v192 = ((uint64_t (*)(char *, uint64_t, uint64_t))v232)(v226, v178, v177);
      uint64_t v180 = Date.description.getter(v192);
      unint64_t v179 = v193;
      v175(v191, v177);
    }

    p_info = &OBJC_METACLASS___ChangeLogNodeV2.info;
    id v250 = (id)sub_10007C22C(v180, v179, (uint64_t *)&v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v164 + 34, v164 + 42);
    swift_bridgeObjectRelease(v179);
    _os_log_impl( (void *)&_mh_execute_header,  v163,  (os_log_type_t)v233,  "creating new record %s %s[%f] newest %s",  (uint8_t *)v164,  0x2Au);
    __int128 v194 = v230;
    swift_arrayDestroy(v230, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v194, -1LL, -1LL);
    swift_slowDealloc(v164, -1LL, -1LL);

    uint64_t v189 = (*(uint64_t (**)(char *, uint64_t))(v241 + 8))(v228, v242);
    uint64_t v186 = v248;
    unint64_t v162 = v231;
  }

  else
  {

    uint64_t v186 = v248;
    uint64_t v187 = *(void (**)(char *, uint64_t))(v248 + 8);
    v187(v239, v157);
    uint64_t v188 = v157;
    unsigned __int8 v175 = (uint64_t (*)(char *, uint64_t))v187;
    v187(v160, v188);

    uint64_t v189 = (*(uint64_t (**)(char *, uint64_t))(v153 + 8))(v161, v137);
    p_info = (__objc2_class_ro **)(&OBJC_METACLASS___ChangeLogNodeV2 + 32);
  }

  v195 = *(uint64_t (**)(void))(*(void *)v246 + 152LL);
  os_log_t v196 = (void *)((uint64_t (*)(uint64_t))v195)(v189);
  id v197 = [objc_allocWithZone((Class)p_info + 361) initWithContext:v196];

  NSString v198 = [v162 recordName];
  uint64_t v199 = v247;
  v200 = v162;
  if (!v198)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v202 = v201;
    NSString v198 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v202);
  }

  [v197 setRecordID:v198];

  NSString v203 = String._bridgeToObjectiveC()();
  [v197 setUri:v203];

  NSString v204 = String._bridgeToObjectiveC()();
  [v197 setApplication:v204];

  sub_10007D178(0LL, &qword_1002E0878, &OBJC_CLASS___NSNumber_ptr);
  Class v205 = NSNumber.init(integerLiteral:)(v235 & 1).super.super.isa;
  [v197 setState:v205];

  swift_beginAccess(v199, &v253, 0LL, 0LL);
  uint64_t v206 = v224;
  sub_100085DFC(v199, v224);
  uint64_t v207 = v249;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v206, 1LL, v249) == 1)
  {
    sub_100077CFC(v206, (uint64_t *)&unk_1002DF740);
LABEL_68:
    id v210 = v234;
    Class v211 = Date._bridgeToObjectiveC()().super.isa;
    [v197 setSmtTimestamp:v211];

    goto LABEL_69;
  }

  v208 = v220;
  (*(void (**)(char *, uint64_t, uint64_t))(v186 + 32))(v220, v206, v207);
  if ((static Date.> infix(_:_:)(v208, v243) & 1) == 0)
  {
    v175(v208, v207);
    goto LABEL_68;
  }

  Class v209 = Date._bridgeToObjectiveC()().super.isa;
  [v197 setSmtTimestamp:v209];

  v175(v208, v207);
  id v210 = v234;
LABEL_69:
  NSString v212 = String._bridgeToObjectiveC()();
  [v197 setCkstate:v212];

  v213 = (void *)v195();
  id v250 = 0LL;
  unsigned int v214 = [v213 save:&v250];

  id v215 = v250;
  if (v214)
  {
    id v216 = v250;

    uint64_t v105 = v199;
    goto LABEL_71;
  }

  id v217 = v250;
  _convertNSErrorToError(_:)(v215);

  swift_willThrow(v218);
  sub_100077CFC(v199, (uint64_t *)&unk_1002DF740);
}

uint64_t sub_10009F83C(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v4, (uint64_t)qword_1002EA8B8);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = [v5 recordID];
    id v11 = [v10 recordName];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    uint64_t v17 = sub_10007C22C(v12, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud optin: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v15 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 152LL))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000A6F84);

  return LOBYTE(v18[0]);
}

void sub_10009FA8C(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v169 = a2;
  uint64_t v166 = a3;
  uint64_t v170 = type metadata accessor for Logger(0LL);
  uint64_t v168 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  unint64_t v167 = (char *)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v158 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v159 = (uint64_t)&v151 - v9;
  __chkstk_darwin(v8);
  uint64_t v155 = (uint64_t)&v151 - v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v161 = v11;
  uint64_t v162 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  int v156 = (char *)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v154 = (char *)&v151 - v15;
  uint64_t v16 = sub_100072CC4((uint64_t *)&unk_1002E0ED0);
  __chkstk_darwin(v16);
  uint64_t v164 = (char *)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v160 = type metadata accessor for CloudOptInData(0LL);
  uint64_t v163 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v157 = (char *)&v151 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v20 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_1002464F0;
  uint64_t v171 = a1;
  id v22 = [a1 recordID];
  id v23 = [v22 recordName];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_1000914E8();
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v26;
  uint64_t v27 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v21);
  [v19 setPredicate:v27];

  v175[0] = 0LL;
  id v165 = v19;
  id v28 = [v19 execute:v175];
  id v29 = v175[0];
  if (!v28)
  {
    id v40 = v175[0];
    uint64_t v41 = _convertNSErrorToError(_:)(v29);

    swift_willThrow(v42);
    uint64_t v43 = swift_errorRelease(v41);
    uint64_t v172 = 0LL;
    uint64_t v35 = v169;
    uint64_t v36 = v171;
LABEL_10:
    id v44 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 152LL))(v43);
    id v45 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v44];

    if (!v45)
    {
      char v83 = 0;
      id v84 = v165;
      goto LABEL_42;
    }

    id v39 = v45;
    id v46 = [v36 recordID];
    NSString v47 = [v46 recordName];

    if (!v47)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v49 = v48;
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v49);
    }

    [v39 setRecordID:v47];

    goto LABEL_14;
  }

  uint64_t v30 = v28;
  uint64_t v31 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
  id v33 = v29;

  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0) {
      uint64_t v150 = v32;
    }
    else {
      uint64_t v150 = v32 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v32);
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v150);
    swift_bridgeObjectRelease(v32);
  }

  else
  {
    uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v35 = v169;
  uint64_t v36 = v171;
  if (!v34)
  {
    uint64_t v43 = swift_bridgeObjectRelease(v32);
    goto LABEL_10;
  }

  if ((v32 & 0xC000000000000001LL) != 0)
  {
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v32);
    swift_bridgeObjectRelease(v32);
LABEL_14:
    uint64_t v37 = v170;
    uint64_t v38 = v164;
    goto LABEL_15;
  }

  uint64_t v37 = v170;
  uint64_t v38 = v164;
  if (!*(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    __break(1u);
  }
  id v39 = *(id *)(v32 + 32);
  swift_bridgeObjectRelease(v32);
LABEL_15:
  uint64_t v50 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  id v51 = v39;
  uint64_t v52 = JSONDecoder.init()();
  id v53 = [v36 encryptedValues];
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = [v53 objectForKeyedSubscript:v54];
  swift_unknownObjectRelease(v53);

  uint64_t v164 = (char *)v52;
  if (!v55)
  {
    uint64_t v163 = 0LL;
LABEL_20:
    uint64_t v59 = v167;
    uint64_t v58 = v168;
LABEL_22:
    uint64_t v66 = v172;
    goto LABEL_23;
  }

  uint64_t v173 = (uint64_t)v55;
  uint64_t v56 = sub_100072CC4(&qword_1002E0860);
  char v57 = swift_dynamicCast(v175, &v173, v56, &type metadata for Data, 6LL);
  uint64_t v59 = v167;
  uint64_t v58 = v168;
  if ((v57 & 1) == 0)
  {
    uint64_t v163 = 0LL;
    goto LABEL_22;
  }

  id v153 = v51;
  id v61 = v175[0];
  id v60 = v175[1];
  uint64_t v62 = sub_100073FE0( (unint64_t *)&unk_1002E0EE0,  type metadata accessor for CloudOptInData,  (uint64_t)&unk_100248B10);
  uint64_t v63 = (uint64_t)v38;
  uint64_t v64 = v160;
  uint64_t v65 = v172;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v160, v61, v60, v160, v62);
  if (!v65)
  {
    uint64_t v151 = (uint64_t)v61;
    unint64_t v152 = (unint64_t)v60;
    uint64_t v172 = 0LL;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v163 + 56))(v63, 0LL, 1LL, v64);
    unint64_t v118 = v157;
    sub_1000A9980(v63, (uint64_t)v157);
    uint64_t v119 = v118[3];
    swift_bridgeObjectRetain(v119);
    NSString v120 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v119);
    id v51 = v153;
    [v153 setUri:v120];

    uint64_t v121 = v118[4];
    uint64_t v122 = v118[5];
    swift_bridgeObjectRetain(v122);
    NSString v123 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v122);
    [v51 setApplication:v123];

    id v124 = v118;
    uint64_t v125 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 264LL);
    swift_bridgeObjectRetain(v122);
    uint64_t v163 = v125(v121, v122);
    swift_bridgeObjectRelease(v122);
    if (*((_BYTE *)v118 + 56) == 1)
    {
      [v51 setState:0];
    }

    else
    {
      id v126 = [objc_allocWithZone(NSNumber) initWithInteger:v118[6]];
      [v51 setState:v126];
    }

    uint64_t v127 = v162;
    uint64_t v128 = v155;
    uint64_t v37 = v170;
    uint64_t v129 = v160;
    sub_100085DFC((uint64_t)v124 + *(int *)(v160 + 32), v155);
    uint64_t v130 = v161;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v128, 1LL, v161) == 1)
    {
      sub_100077CFC(v128, (uint64_t *)&unk_1002DF740);
    }

    else
    {
      id v131 = v124;
      id v132 = v154;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v154, v128, v130);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [v51 setSmtTimestamp:isa];

      uint64_t v134 = v132;
      id v124 = v131;
      (*(void (**)(char *, uint64_t))(v127 + 8))(v134, v130);
    }

    unint64_t v135 = v152;
    id v136 = (char *)v124 + *(int *)(v129 + 40);
    uint64_t v137 = *((void *)v136 + 1);
    uint64_t v36 = v171;
    if (v137)
    {
      swift_bridgeObjectRetain(*((void *)v136 + 1));
      NSString v138 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v137);
      [v51 setSerialNumber:v138];

      uint64_t v129 = v160;
    }

    uint64_t v139 = (char *)v124 + *(int *)(v129 + 36);
    uint64_t v140 = *((void *)v139 + 1);
    if (v140)
    {
      swift_bridgeObjectRetain(*((void *)v139 + 1));
      NSString v141 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v140);
      [v51 setOsVersion:v141];
    }

    id v142 = [v51 application];
    uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
    uint64_t v145 = v144;

    uint64_t v146 = (uint64_t (*)(id *, void))(*(uint64_t (**)(id *))(*(void *)v35 + 216LL))(v175);
    sub_100083FE4(&v173, v143, v145);
    swift_bridgeObjectRelease(v174);
    uint64_t v147 = v146(v175, 0LL);
    uint64_t v148 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 176LL))(v147);
    if (v148)
    {
      uint64_t v149 = v148;
      [v148 trigger];
      sub_100072BE0(v151, v135);

      sub_1000971A8((uint64_t)v157);
    }

    else
    {
      sub_1000971A8((uint64_t)v157);
      sub_100072BE0(v151, v135);
    }

    goto LABEL_20;
  }

  swift_errorRelease(v65);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 56))(v63, 1LL, 1LL, v64);
  sub_100072BE0((uint64_t)v61, (unint64_t)v60);
  sub_100077CFC(v63, (uint64_t *)&unk_1002E0ED0);
  uint64_t v163 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v37 = v170;
  uint64_t v36 = v171;
  id v51 = v153;
LABEL_23:
  NSString v67 = String._bridgeToObjectiveC()();
  [v51 setCkstate:v67];

  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v172 = v66;
  uint64_t v68 = sub_100072DEC(v37, (uint64_t)qword_1002EA8B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v59, v68, v37);
  id v69 = v51;
  uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = swift_slowAlloc(42LL, -1LL);
    uint64_t v160 = swift_slowAlloc(8LL, -1LL);
    uint64_t v157 = (char *)swift_slowAlloc(96LL, -1LL);
    v175[0] = v157;
    *(_DWORD *)uint64_t v72 = 136315906;
    id v73 = [v69 uri];
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    unint64_t v76 = v75;

    uint64_t v173 = sub_10007C22C(v74, v76, (uint64_t *)v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v72 + 4, v72 + 12);

    swift_bridgeObjectRelease(v76);
    *(_WORD *)(v72 + 12) = 2080;
    id v77 = [v69 application];
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    unint64_t v80 = v79;

    uint64_t v173 = sub_10007C22C(v78, v80, (uint64_t *)v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v72 + 14, v72 + 22);

    swift_bridgeObjectRelease(v80);
    *(_WORD *)(v72 + 22) = 2112;
    id v81 = [v69 state];
    id v82 = v81;
    if (v81) {
      uint64_t v173 = (uint64_t)v81;
    }
    else {
      uint64_t v173 = 0LL;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v72 + 24, v72 + 32);
    uint64_t v85 = v161;
    *(void *)uint64_t v160 = v82;

    *(_WORD *)(v72 + 32) = 2080;
    id v86 = [v69 smtTimestamp];
    uint64_t v35 = v169;
    uint64_t v87 = v162;
    if (v86)
    {
      id v88 = v86;
      uint64_t v89 = (uint64_t)v158;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v86);

      uint64_t v90 = 0LL;
    }

    else
    {
      uint64_t v90 = 1LL;
      uint64_t v89 = (uint64_t)v158;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v89, v90, 1LL, v85);
    uint64_t v91 = v159;
    sub_1000A9A0C(v89, v159, (uint64_t *)&unk_1002DF740);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v91, 1LL, v85))
    {
      sub_100077CFC(v91, (uint64_t *)&unk_1002DF740);
      unint64_t v92 = 0xE100000000000000LL;
      uint64_t v93 = 45LL;
    }

    else
    {
      uint64_t v94 = v156;
      (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v156, v91, v85);
      uint64_t v95 = sub_100077CFC(v91, (uint64_t *)&unk_1002DF740);
      uint64_t v96 = Date.description.getter(v95);
      uint64_t v97 = v87;
      uint64_t v93 = v96;
      unint64_t v92 = v98;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v94, v85);
    }

    uint64_t v173 = sub_10007C22C(v93, v92, (uint64_t *)v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v72 + 34, v72 + 42);

    swift_bridgeObjectRelease(v92);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "merged cloud optin: %s[%s] %@ %s", (uint8_t *)v72, 0x2Au);
    uint64_t v99 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    uint64_t v100 = v160;
    swift_arrayDestroy(v160, 1LL, v99);
    swift_slowDealloc(v100, -1LL, -1LL);
    NSString v101 = v157;
    swift_arrayDestroy(v157, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v168 + 8))(v167, v170);
    uint64_t v36 = v171;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v37);
  }

  id v84 = (id)v163;
  uint64_t v102 = (*(uint64_t (**)(id, void *))(*(void *)v35 + 448LL))(v69, v36);
  uint64_t v103 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 152LL))(v102);
  v175[0] = 0LL;
  unsigned int v104 = [v103 save:v175];

  id v105 = v175[0];
  if (v104)
  {
    id v106 = v175[0];
  }

  else
  {
    id v107 = v175[0];
    uint64_t v108 = _convertNSErrorToError(_:)(v105);

    swift_willThrow(v109);
    swift_errorRelease(v108);
    uint64_t v172 = 0LL;
  }

  id v110 = [v69 uri];
  uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
  uint64_t v113 = v112;

  id v114 = [v69 application];
  uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
  uint64_t v117 = v116;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(*(void *)v35 + 376LL))(v111, v113, v115, v117, v84);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v117);
  swift_release(v164);

  char v83 = 1;
LABEL_42:

  char *v166 = v83;
}

void sub_1000A0A78(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = (void *)(*(uint64_t (**)(void))(*v5 + 248LL))();
  if (!v12) {
    return;
  }
  uint64_t v13 = v5[11];
  uint64_t v14 = v5[12];
  if (v13 == a1 && v14 == a2) {
    goto LABEL_8;
  }
  id v39 = v12;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v13, v14, 0LL) & 1) != 0)
  {
    uint64_t v12 = v39;
LABEL_8:

    return;
  }

  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v16, (uint64_t)qword_1002EA8B8);
  id v17 = v39;
  swift_bridgeObjectRetain_n(a4, 2LL);
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v18 = v17;
  id v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t type = v20;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = swift_slowAlloc(96LL, -1LL);
    uint64_t v42 = v37;
    *(_DWORD *)uint64_t v21 = 136315650;
    os_log_t log = v19;
    id v22 = (id)KTOptInGetString([v18 state]);
    id v40 = a5;
    id v23 = v18;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v26 = v25;

    uint64_t v41 = sub_10007C22C(v24, v26, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 4, v21 + 12);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v41 = sub_10007C22C(a3, a4, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v21 + 22) = 2080;
    id v18 = v23;
    a5 = v40;
    swift_bridgeObjectRetain(a2);
    uint64_t v41 = sub_10007C22C(a1, a2, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "updating peer opt-in state to %s for %s for %s",  (uint8_t *)v21,  0x20u);
    swift_arrayDestroy(v37, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v27 = (void *)v6[8];
    if (v27) {
      goto LABEL_13;
    }
LABEL_18:

    return;
  }

  swift_bridgeObjectRelease_n(a2, 2LL);
  swift_bridgeObjectRelease_n(a4, 2LL);

  uint64_t v27 = (void *)v5[8];
  if (!v27) {
    goto LABEL_18;
  }
LABEL_13:
  swift_unknownObjectRetain(v27);
  BOOL v28 = sub_1000DD298((uint64_t)[v18 state]);
  uint64_t v29 = sub_100072CC4(&qword_1002E0870);
  uint64_t v30 = swift_allocObject(v29, 48LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1002464F0;
  *(void *)(v30 + 32) = a1;
  *(void *)(v30 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  NSString v32 = String._bridgeToObjectiveC()();
  [v27 setCachedPeerOptInState:v28 uris:isa application:v32];

  if (a5)
  {
    id v33 = a5;
    id v34 = [v33 state];
    if (v34 == [v18 state] || !sub_1000DD298((uint64_t)objc_msgSend(v18, "state")))
    {
      swift_unknownObjectRelease(v27);
    }

    else
    {
      NSString v35 = String._bridgeToObjectiveC()();
      [v27 removeFailuresOnOptIn:v35];
      swift_unknownObjectRelease(v27);
    }
  }

  else
  {

    swift_unknownObjectRelease(v27);
  }

uint64_t sub_1000A0EE0(void *a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v4 = swift_allocObject(&unk_10027EAD8, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject(&unk_10027EB00, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000A6FC8;
  *(void *)(v5 + 24) = v4;
  void v11[4] = sub_1000807AC;
  uint64_t v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  __int128 v11[2] = sub_1000807CC;
  v11[3] = &unk_10027EB18;
  uint64_t v6 = _Block_copy(v11);
  uint64_t v7 = v12;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 119LL, 692LL, 32LL, 1LL);
  swift_release(v4);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A102C()
{
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027EB50, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027EB78, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_1000A7674;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027EB90;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119LL, 712LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    id v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_1000A1180()
{
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027EBC8, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027EBF0, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_1000A769C;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027EC08;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119LL, 730LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    id v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_1000A12D4()
{
  unsigned __int8 v11 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027EC40, 32LL, 7LL);
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v11;
  uint64_t v3 = swift_allocObject(&unk_10027EC68, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_1000A78B8;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027EC80;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119LL, 748LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return v8;
  }

  return result;
}

uint64_t sub_1000A1420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152LL))();
  uint64_t v8 = (void *)swift_allocObject(&unk_10027ECB8, 48LL, 7LL);
  v8[2] = a1;
  v8[3] = a2;
  void v8[4] = a3;
  void v8[5] = v3;
  uint64_t v9 = swift_allocObject(&unk_10027ECE0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_1000A7ABC;
  *(void *)(v9 + 24) = v8;
  void v14[4] = sub_100085D2C;
  uint64_t v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000807CC;
  v14[3] = &unk_10027ECF8;
  uint64_t v10 = _Block_copy(v14);
  uint64_t v11 = v15;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v3);
  swift_retain(v9);
  swift_release(v11);
  [v7 performBlockAndWait:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 119LL, 760LL, 32LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1584(void *a1)
{
  uint64_t v14 = 0LL;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v4 = (void *)swift_allocObject(&unk_10027ED30, 40LL, 7LL);
  void v4[2] = a1;
  void v4[3] = &v14;
  void v4[4] = v1;
  uint64_t v5 = swift_allocObject(&unk_10027ED58, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000A81C8;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_100085D2C;
  uint64_t v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027ED70;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v13;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 119LL, 780LL, 32LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = v14;
    swift_release(v4);
    return v11;
  }

  return result;
}

Class sub_1000A16E4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for CloudOptInData(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [a1 ckrecord];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v14 = v13;
  }

  else
  {
    uint64_t v12 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
  }

  uint64_t v15 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v15 + 440))(v12, v14);
  sub_10007EB9C(v12, v14);
  if (!isa)
  {
    uint64_t v17 = (*(uint64_t (**)(void *))(*v2 + 440LL))(a1);
    if (!v17) {
      return 0LL;
    }
    v18.super.Class isa = (Class)v17;
    sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v19 = v2[2];
    os_log_type_t v20 = (void *)v2[3];
    swift_bridgeObjectRetain(v20);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    Class isa = CKRecord.init(recordType:recordID:)(v21, v18).super.isa;
  }

  id v22 = -[objc_class recordID](isa, "recordID");
  id v23 = [v22 recordName];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v71 = v25;

  id v26 = [a1 uri];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v69 = v28;
  uint64_t v70 = v27;

  id v29 = [a1 application];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v67 = v31;
  uint64_t v68 = v30;

  id v32 = [a1 state];
  id v33 = v32;
  if (v32)
  {
    id v66 = [v32 integerValue];
  }

  else
  {
    id v66 = 0LL;
  }

  id v34 = [a1 smtTimestamp];
  if (v34)
  {
    NSString v35 = v34;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    uint64_t v36 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v6, 0LL, 1LL, v36);
  }

  else
  {
    uint64_t v37 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v6, 1LL, 1LL, v37);
  }

  uint64_t v38 = (void *)v2[7];
  if (v38)
  {
    uint64_t v65 = v7;
    id v39 = v6;
    id v40 = isa;
    uint64_t v41 = v24;
    id v42 = [v38 osVersion];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v45 = v44;

    id v46 = [v38 serialNumber];
    if (v46)
    {
      NSString v47 = v46;
      uint64_t v38 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;
    }

    else
    {
      uint64_t v38 = 0LL;
      uint64_t v49 = 0LL;
    }

    uint64_t v24 = v41;
    Class isa = v40;
    uint64_t v6 = v39;
    uint64_t v7 = v65;
  }

  else
  {
    uint64_t v49 = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v45 = 0LL;
  }

  uint64_t v50 = v71;
  *(void *)uint64_t v9 = v24;
  *((void *)v9 + 1) = v50;
  uint64_t v51 = v69;
  *((void *)v9 + 2) = v70;
  *((void *)v9 + 3) = v51;
  uint64_t v52 = v67;
  *((void *)v9 + 4) = v68;
  *((void *)v9 + 5) = v52;
  *((void *)v9 + 6) = v66;
  v9[56] = v33 == 0LL;
  sub_1000A9A0C((uint64_t)v6, (uint64_t)&v9[v7[8]], (uint64_t *)&unk_1002DF740);
  id v53 = (uint64_t *)&v9[v7[9]];
  *id v53 = v43;
  v53[1] = v45;
  NSString v54 = &v9[v7[10]];
  *(void *)NSString v54 = v38;
  *((void *)v54 + 1) = v49;
  uint64_t v55 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  uint64_t v56 = JSONEncoder.init()();
  uint64_t v57 = sub_100073FE0(&qword_1002E0AF0, type metadata accessor for CloudOptInData, (uint64_t)&unk_100248B38);
  uint64_t v58 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v7, v57);
  unint64_t v60 = v59;
  id v61 = -[objc_class encryptedValues](isa, "encryptedValues");
  uint64_t ObjectType = swift_getObjectType(v61);
  v72[3] = &type metadata for Data;
  v72[4] = &protocol witness table for Data;
  v72[0] = v58;
  v72[1] = v60;
  sub_100072B9C(v58, v60);
  CKRecordKeyValueSetting.subscript.setter(v72, 1635017060LL, 0xE400000000000000LL, ObjectType);
  swift_unknownObjectRelease(v61);
  swift_release(v56);
  sub_100072BE0(v58, v60);
  sub_1000971A8((uint64_t)v9);
  return isa;
}

CKRecordID sub_1000A1BB4(void *a1)
{
  id v3 = [a1 recordID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
    id v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }

  else
  {
    id v11 = [a1 uri];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    id v15 = [a1 application];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    uint64_t v19 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))*v1 + 30))(v12, v14, v16, v18);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v18);
    return (CKRecordID)v19;
  }

uint64_t sub_1000A1CD4()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v2 = swift_allocObject(&unk_10027EDA8, 32LL, 7LL);
  *(void *)(v2 + 16) = sub_1000A8A4C;
  *(void *)(v2 + 24) = v0;
  void v6[4] = sub_100085D2C;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  _DWORD v6[2] = sub_1000807CC;
  void v6[3] = &unk_10027EDC0;
  id v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  [(id)v1 performBlockAndWait:v3];

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 119LL, 847LL, 32LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  if ((v1 & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1DF4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 56));
  swift_unknownObjectRelease(*(void *)(v0 + 64));

  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return v0;
}

uint64_t sub_1000A1E50()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_1000A1E70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_1000A1EA0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368LL))() & 1;
}

uint64_t sub_1000A1ECC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 384LL))();
}

uint64_t sub_1000A1EF4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400LL))();
}

uint64_t sub_1000A1F1C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408LL))() & 1;
}

uint64_t sub_1000A1F48()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 416LL))();
}

uint64_t sub_1000A1F70()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 424LL))();
}

uint64_t sub_1000A1F98()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 432LL))();
}

uint64_t sub_1000A1FC0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 440LL))();
}

uint64_t sub_1000A1FE8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 456LL))();
}

uint64_t sub_1000A2010(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000A203C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A204C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A2054(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000A4780(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000A21C0(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void *sub_1000A20CC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100072CC4(&qword_1002E0AE0);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = sub_1000A4564((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void sub_1000A21C0(uint64_t *a1)
{
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v3 = __chkstk_darwin(v2);
  id v215 = (char *)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v193 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v202 = (char *)&v193 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v193 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v193 - v14;
  __chkstk_darwin(v13);
  uint64_t v199 = (char *)&v193 - v16;
  uint64_t v17 = type metadata accessor for Date(0LL);
  v221 = *(void **)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  os_log_type_t v20 = (char *)&v193 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v220 = (char *)&v193 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  NSString v203 = (char *)&v193 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v208 = (char *)&v193 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  id v29 = (char *)&v193 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v218 = (char *)&v193 - v31;
  __chkstk_darwin(v30);
  v200 = (char *)&v193 - v32;
  Swift::Int v33 = a1[1];
  Swift::Int v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0) {
      goto LABEL_170;
    }
    if (v33) {
      sub_1000A30CC(0LL, v33, 1LL, a1);
    }
    return;
  }

  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_178;
  }
  id v197 = v29;
  Swift::Int v205 = v33;
  Swift::Int v196 = v34;
  unint64_t v193 = a1;
  if (v33 < 2)
  {
    id v40 = (char *)_swiftEmptyArrayStorage;
    uint64_t v222 = (uint64_t)_swiftEmptyArrayStorage;
    Class v209 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v33 != 1)
    {
      unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_134:
      uint64_t v179 = v210;
      if (v44 >= 2)
      {
        uint64_t v180 = *v193;
        do
        {
          unint64_t v181 = v44 - 2;
          if (v44 < 2) {
            goto LABEL_165;
          }
          if (!v180) {
            goto LABEL_177;
          }
          unint64_t v182 = v44 - 1;
          Class v211 = v40;
          uint64_t v183 = *(void *)&v40[16 * v181 + 32];
          uint64_t v184 = *(void *)&v40[16 * v44 + 24];
          sub_1000A3460( (void **)(v180 + 8 * v183),  (void **)(v180 + 8LL * *(void *)&v40[16 * v44 + 16]),  (void **)(v180 + 8 * v184),  v209);
          if (v179) {
            goto LABEL_131;
          }
          if (v184 < v183) {
            goto LABEL_166;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v211) & 1) != 0) {
            uint64_t v185 = v211;
          }
          else {
            uint64_t v185 = sub_1000A3E38((uint64_t)v211);
          }
          if (v181 >= *((void *)v185 + 2)) {
            goto LABEL_167;
          }
          uint64_t v186 = v185 + 32;
          uint64_t v187 = &v185[16 * v181 + 32];
          *(void *)uint64_t v187 = v183;
          *((void *)v187 + 1) = v184;
          unint64_t v188 = *((void *)v185 + 2);
          if (v44 > v188) {
            goto LABEL_168;
          }
          uint64_t v189 = &v186[16 * v44];
          size_t v190 = 16 * (v188 - v44);
          __int128 v191 = v185;
          memmove(&v186[16 * v182], v189, v190);
          id v40 = v191;
          *((void *)v191 + 2) = v188 - 1;
          unint64_t v44 = v188 - 1;
        }

        while (v188 > 2);
      }

      uint64_t v178 = (uint64_t)v40;
LABEL_148:
      uint64_t v192 = swift_bridgeObjectRelease(v178);
      *(void *)((v222 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
      specialized Array._endMutation()(v192);
      swift_bridgeObjectRelease(v222);
      return;
    }
  }

  else
  {
    uint64_t v36 = a1;
    uint64_t v37 = v35 >> 1;
    uint64_t v38 = sub_10007D178(0LL, (unint64_t *)&qword_1002E1220, &OBJC_CLASS___KTOptInState_ptr);
    uint64_t v39 = static Array._allocateBufferUninitialized(minimumCapacity:)(v37, v38);
    *(void *)((v39 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v37;
    a1 = v36;
    Class v209 = (void **)((v39 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v222 = v39;
  }

  Swift::Int v41 = 0LL;
  uint64_t v42 = *a1;
  uint64_t v195 = *a1 + 16;
  uint64_t v194 = v42 - 8;
  id v40 = (char *)_swiftEmptyArrayStorage;
  unsigned int v214 = v7;
  NSString v198 = v12;
  uint64_t v207 = v15;
  NSString v212 = v20;
  uint64_t v213 = v17;
  Swift::Int v43 = v205;
  uint64_t v217 = v42;
  while (2)
  {
    Swift::Int v45 = v41;
    Swift::Int v46 = v41 + 1;
    Swift::Int v204 = v41;
    if (v41 + 1 >= v43) {
      goto LABEL_53;
    }
    Class v211 = v40;
    NSString v47 = *(void **)(v42 + 8 * v46);
    uint64_t v48 = *(void **)(v42 + 8 * v41);
    id v49 = v47;
    id v50 = v48;
    id v51 = [v49 smtTimestamp];
    if (v51)
    {
      uint64_t v52 = v51;
      id v53 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      NSString v54 = v221;
      uint64_t v55 = (void (*)(char *, char *, uint64_t))v221[4];
      uint64_t v56 = (uint64_t)v199;
      v55(v199, v53, v17);
      uint64_t v219 = (void (*)(uint64_t, void, uint64_t, uint64_t))v54[7];
      v219(v56, 0LL, 1LL, v17);
      uint64_t v57 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v54[6])(v56, 1LL, v17);
      if ((_DWORD)v57 != 1)
      {
        v55(v200, (char *)v56, v17);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v56 = (uint64_t)v199;
      uint64_t v219 = (void (*)(uint64_t, void, uint64_t, uint64_t))v221[7];
      uint64_t v57 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v199, 1LL, 1LL, v17);
    }

    static Date.distantPast.getter(v57);
    sub_100077CFC(v56, (uint64_t *)&unk_1002DF740);
LABEL_21:
    id v58 = objc_msgSend(v50, "smtTimestamp", v193);
    if (!v58)
    {
      uint64_t v63 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v15, 1LL, 1LL, v17);
      goto LABEL_25;
    }

    unint64_t v59 = v58;
    unint64_t v60 = v218;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    id v61 = v221;
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v221[4];
    v62(v15, v60, v17);
    v219((uint64_t)v15, 0LL, 1LL, v17);
    uint64_t v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61[6])(v15, 1LL, v17);
    if ((_DWORD)v63 == 1)
    {
LABEL_25:
      uint64_t v64 = v197;
      static Date.distantPast.getter(v63);
      sub_100077CFC((uint64_t)v15, (uint64_t *)&unk_1002DF740);
      goto LABEL_26;
    }

    uint64_t v64 = v197;
    v62(v197, v15, v17);
LABEL_26:
    uint64_t v65 = v200;
    LODWORD(v216) = static Date.< infix(_:_:)(v200, v64);
    id v66 = (void (*)(char *, uint64_t))v221[1];
    v66(v64, v17);
    uint64_t v206 = v66;
    v66(v65, v17);

    Swift::Int v45 = v204;
    Swift::Int v43 = v205;
    Swift::Int v46 = v204 + 2;
    if (v204 + 2 >= v205) {
      goto LABEL_43;
    }
    uint64_t v67 = (id *)(v195 + 8 * v204);
    while (1)
    {
      Swift::Int v68 = v46;
      uint64_t v69 = *(v67 - 1);
      id v70 = *v67;
      id v71 = v69;
      id v72 = [v70 smtTimestamp];
      if (v72)
      {
        id v73 = v72;
        uint64_t v74 = v218;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        unint64_t v75 = v221;
        unint64_t v76 = (void (*)(char *, char *, uint64_t))v221[4];
        v76(v12, v74, v17);
        v219((uint64_t)v12, 0LL, 1LL, v17);
        uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75[6])(v12, 1LL, v17);
        if ((_DWORD)v77 != 1)
        {
          v76(v208, v12, v17);
          goto LABEL_33;
        }
      }

      else
      {
        uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v12, 1LL, 1LL, v17);
      }

      static Date.distantPast.getter(v77);
      sub_100077CFC((uint64_t)v12, (uint64_t *)&unk_1002DF740);
LABEL_33:
      id v78 = [v71 smtTimestamp];
      if (v78)
      {
        unint64_t v79 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        unint64_t v80 = v221;
        id v81 = (void (*)(void))v221[4];
        uint64_t v82 = (uint64_t)v202;
        v81();
        v219(v82, 0LL, 1LL, v17);
        uint64_t v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80[6])(v82, 1LL, v17);
        if ((_DWORD)v83 != 1)
        {
          id v84 = v203;
          ((void (*)(char *, uint64_t, uint64_t))v81)(v203, v82, v17);
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t v82 = (uint64_t)v202;
        uint64_t v83 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v202, 1LL, 1LL, v17);
      }

      id v84 = v203;
      static Date.distantPast.getter(v83);
      sub_100077CFC(v82, (uint64_t *)&unk_1002DF740);
LABEL_38:
      uint64_t v85 = v208;
      int v86 = static Date.< infix(_:_:)(v208, v84);
      uint64_t v87 = v84;
      int v88 = v86;
      uint64_t v89 = v206;
      v206(v87, v17);
      v89(v85, v17);

      Swift::Int v46 = v68 + 1;
      ++v67;
      if (v205 == v68 + 1)
      {
        Swift::Int v43 = v205;
        Swift::Int v46 = v205;
        id v15 = v207;
        goto LABEL_42;
      }
    }

    id v15 = v207;
    Swift::Int v43 = v205;
    Swift::Int v46 = v68;
LABEL_42:
    Swift::Int v45 = v204;
LABEL_43:
    id v40 = v211;
    uint64_t v42 = v217;
    if ((v216 & 1) != 0)
    {
      os_log_type_t v20 = v212;
      if (v46 < v45) {
        goto LABEL_171;
      }
      if (v45 < v46)
      {
        uint64_t v90 = (uint64_t *)(v194 + 8 * v46);
        Swift::Int v91 = v46;
        Swift::Int v92 = v45;
        uint64_t v93 = (uint64_t *)(v217 + 8 * v45);
        do
        {
          if (v92 != --v91)
          {
            if (!v42) {
              goto LABEL_176;
            }
            uint64_t v94 = *v93;
            *uint64_t v93 = *v90;
            *uint64_t v90 = v94;
          }

          ++v92;
          --v90;
          ++v93;
        }

        while (v92 < v91);
      }
    }

    else
    {
      os_log_type_t v20 = v212;
    }

LABEL_53:
    if (v46 >= v43) {
      goto LABEL_82;
    }
    if (__OFSUB__(v46, v45)) {
      goto LABEL_169;
    }
    if (v46 - v45 >= v196) {
      goto LABEL_82;
    }
    if (__OFADD__(v45, v196)) {
      goto LABEL_172;
    }
    if (v45 + v196 >= v43) {
      Swift::Int v95 = v43;
    }
    else {
      Swift::Int v95 = v45 + v196;
    }
    if (v95 >= v45)
    {
      if (v46 == v95) {
        goto LABEL_82;
      }
      Class v211 = v40;
      uint64_t v96 = (void (*)(char *, uint64_t))(v194 + 8 * v46);
      Swift::Int v201 = v95;
      while (2)
      {
        uint64_t v97 = *(void **)(v42 + 8 * v46);
        uint64_t v206 = v96;
        Swift::Int v216 = v46;
        while (2)
        {
          unint64_t v98 = *(void **)v96;
          uint64_t v99 = v97;
          id v100 = v98;
          uint64_t v219 = v99;
          id v101 = [v99 smtTimestamp];
          if (v101)
          {
            uint64_t v102 = v101;
            uint64_t v103 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

            unsigned int v104 = v221;
            id v105 = (void (*)(char *, char *, uint64_t))v221[4];
            uint64_t v106 = (uint64_t)v214;
            v105(v214, v103, v17);
            id v107 = (void (*)(uint64_t, void, uint64_t, uint64_t))v104[7];
            v107(v106, 0LL, 1LL, v17);
            uint64_t v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v104[6])(v106, 1LL, v17);
            if ((_DWORD)v108 == 1)
            {
              os_log_type_t v20 = v212;
              goto LABEL_70;
            }

            v105(v220, (char *)v106, v17);
            os_log_type_t v20 = v212;
          }

          else
          {
            id v107 = (void (*)(uint64_t, void, uint64_t, uint64_t))v221[7];
            uint64_t v106 = (uint64_t)v214;
            uint64_t v108 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v214, 1LL, 1LL, v17);
LABEL_70:
            static Date.distantPast.getter(v108);
            sub_100077CFC(v106, (uint64_t *)&unk_1002DF740);
          }

          id v109 = objc_msgSend(v100, "smtTimestamp", v193);
          if (v109)
          {
            id v110 = v109;
            uint64_t v111 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

            uint64_t v112 = v221;
            uint64_t v113 = (void (*)(char *, char *, uint64_t))v221[4];
            uint64_t v114 = (uint64_t)v215;
            uint64_t v115 = v111;
            uint64_t v17 = v213;
            v113(v215, v115, v213);
            v107(v114, 0LL, 1LL, v17);
            uint64_t v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v112[6])(v114, 1LL, v17);
            if ((_DWORD)v116 != 1)
            {
              v113(v20, (char *)v114, v17);
              goto LABEL_77;
            }
          }

          else
          {
            uint64_t v114 = (uint64_t)v215;
            uint64_t v17 = v213;
            uint64_t v116 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v215, 1LL, 1LL, v213);
          }

          static Date.distantPast.getter(v116);
          sub_100077CFC(v114, (uint64_t *)&unk_1002DF740);
LABEL_77:
          Swift::Int v117 = v216;
          unint64_t v118 = v220;
          char v119 = static Date.< infix(_:_:)(v220, v20);
          NSString v120 = (void (*)(char *, uint64_t))v221[1];
          v120(v20, v17);
          v120(v118, v17);

          if ((v119 & 1) != 0)
          {
            uint64_t v42 = v217;
            if (!v217) {
              goto LABEL_174;
            }
            uint64_t v121 = *(void *)v96;
            uint64_t v97 = (void *)*((void *)v96 + 1);
            *(void *)uint64_t v96 = v97;
            *((void *)v96 + 1) = v121;
            uint64_t v96 = (void (*)(char *, uint64_t))((char *)v96 - 8);
            if (v117 == ++v45) {
              goto LABEL_64;
            }
            continue;
          }

          break;
        }

        uint64_t v42 = v217;
LABEL_64:
        Swift::Int v46 = v117 + 1;
        uint64_t v96 = (void (*)(char *, uint64_t))((char *)v206 + 8);
        Swift::Int v45 = v204;
        if (v46 != v201) {
          continue;
        }
        break;
      }

      Swift::Int v46 = v201;
      id v40 = v211;
      id v15 = v207;
LABEL_82:
      if (v46 < v45) {
        goto LABEL_164;
      }
      Swift::Int v216 = v46;
      uint64_t v122 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) != 0) {
        id v40 = v122;
      }
      else {
        id v40 = sub_1000A3C98(0LL, *((void *)v122 + 2) + 1LL, 1, v122);
      }
      unint64_t v124 = *((void *)v40 + 2);
      unint64_t v123 = *((void *)v40 + 3);
      unint64_t v44 = v124 + 1;
      uint64_t v42 = v217;
      if (v124 >= v123 >> 1)
      {
        uint64_t v177 = sub_1000A3C98((char *)(v123 > 1), v124 + 1, 1, v40);
        uint64_t v42 = v217;
        id v40 = v177;
      }

      *((void *)v40 + 2) = v44;
      uint64_t v125 = v40 + 32;
      id v126 = &v40[16 * v124 + 32];
      Swift::Int v127 = v216;
      *(void *)id v126 = v45;
      *((void *)v126 + 1) = v127;
      if (!v124)
      {
        unint64_t v44 = 1LL;
LABEL_14:
        Swift::Int v43 = v205;
        Swift::Int v41 = v216;
        uint64_t v12 = v198;
        if (v216 >= v205) {
          goto LABEL_134;
        }
        continue;
      }

      Class v211 = v40;
LABEL_89:
      unint64_t v128 = v44 - 1;
      if (v44 >= 4)
      {
        id v133 = &v125[16 * v44];
        uint64_t v134 = *((void *)v133 - 8);
        uint64_t v135 = *((void *)v133 - 7);
        BOOL v139 = __OFSUB__(v135, v134);
        uint64_t v136 = v135 - v134;
        if (v139) {
          goto LABEL_153;
        }
        uint64_t v138 = *((void *)v133 - 6);
        uint64_t v137 = *((void *)v133 - 5);
        BOOL v139 = __OFSUB__(v137, v138);
        uint64_t v131 = v137 - v138;
        char v132 = v139;
        if (v139) {
          goto LABEL_154;
        }
        unint64_t v140 = v44 - 2;
        NSString v141 = &v125[16 * v44 - 32];
        uint64_t v143 = *(void *)v141;
        uint64_t v142 = *((void *)v141 + 1);
        BOOL v139 = __OFSUB__(v142, v143);
        uint64_t v144 = v142 - v143;
        if (v139) {
          goto LABEL_156;
        }
        BOOL v139 = __OFADD__(v131, v144);
        uint64_t v145 = v131 + v144;
        if (v139) {
          goto LABEL_159;
        }
        if (v145 >= v136)
        {
          uint64_t v163 = &v125[16 * v128];
          uint64_t v165 = *(void *)v163;
          uint64_t v164 = *((void *)v163 + 1);
          BOOL v139 = __OFSUB__(v164, v165);
          uint64_t v166 = v164 - v165;
          if (v139) {
            goto LABEL_163;
          }
          BOOL v156 = v131 < v166;
        }

        else
        {
LABEL_102:
          if ((v132 & 1) != 0) {
            goto LABEL_155;
          }
          unint64_t v140 = v44 - 2;
          uint64_t v146 = &v125[16 * v44 - 32];
          uint64_t v148 = *(void *)v146;
          uint64_t v147 = *((void *)v146 + 1);
          BOOL v149 = __OFSUB__(v147, v148);
          uint64_t v150 = v147 - v148;
          char v151 = v149;
          if (v149) {
            goto LABEL_158;
          }
          unint64_t v152 = &v125[16 * v128];
          uint64_t v154 = *(void *)v152;
          uint64_t v153 = *((void *)v152 + 1);
          BOOL v139 = __OFSUB__(v153, v154);
          uint64_t v155 = v153 - v154;
          if (v139) {
            goto LABEL_161;
          }
          if (__OFADD__(v150, v155)) {
            goto LABEL_162;
          }
          if (v150 + v155 < v131) {
            goto LABEL_114;
          }
          BOOL v156 = v131 < v155;
        }

        if (v156) {
          unint64_t v128 = v140;
        }
      }

      else
      {
        if (v44 == 3)
        {
          uint64_t v130 = *((void *)v40 + 4);
          uint64_t v129 = *((void *)v40 + 5);
          BOOL v139 = __OFSUB__(v129, v130);
          uint64_t v131 = v129 - v130;
          char v132 = v139;
          goto LABEL_102;
        }

        uint64_t v157 = *((void *)v40 + 4);
        uint64_t v158 = *((void *)v40 + 5);
        BOOL v139 = __OFSUB__(v158, v157);
        uint64_t v150 = v158 - v157;
        char v151 = v139;
LABEL_114:
        if ((v151 & 1) != 0) {
          goto LABEL_157;
        }
        uint64_t v159 = &v125[16 * v128];
        uint64_t v161 = *(void *)v159;
        uint64_t v160 = *((void *)v159 + 1);
        BOOL v139 = __OFSUB__(v160, v161);
        uint64_t v162 = v160 - v161;
        if (v139) {
          goto LABEL_160;
        }
        if (v162 < v150) {
          goto LABEL_14;
        }
      }

      unint64_t v167 = v128 - 1;
      if (v128 - 1 >= v44)
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        break;
      }

      if (!v42) {
        goto LABEL_175;
      }
      uint64_t v168 = &v125[16 * v167];
      uint64_t v169 = *(void *)v168;
      uint64_t v170 = v125;
      unint64_t v171 = v128;
      uint64_t v172 = &v125[16 * v128];
      uint64_t v173 = *((void *)v172 + 1);
      uint64_t v174 = v210;
      sub_1000A3460( (void **)(v42 + 8LL * *(void *)v168),  (void **)(v42 + 8LL * *(void *)v172),  (void **)(v42 + 8 * v173),  v209);
      uint64_t v210 = v174;
      if (v174)
      {
LABEL_131:
        uint64_t v178 = (uint64_t)v211;
        goto LABEL_148;
      }

      if (v173 < v169) {
        goto LABEL_150;
      }
      uint64_t v175 = (uint64_t)v211;
      if (v171 > *((void *)v211 + 2)) {
        goto LABEL_151;
      }
      *(void *)uint64_t v168 = v169;
      *(void *)&v170[16 * v167 + 8] = v173;
      unint64_t v176 = *(void *)(v175 + 16);
      if (v171 >= v176) {
        goto LABEL_152;
      }
      unint64_t v44 = v176 - 1;
      memmove(v172, v172 + 16, 16 * (v176 - 1 - v171));
      uint64_t v125 = v170;
      id v40 = v211;
      os_log_type_t v20 = v212;
      *((void *)v211 + 2) = v176 - 1;
      id v15 = v207;
      uint64_t v42 = v217;
      if (v176 <= 2) {
        goto LABEL_14;
      }
      goto LABEL_89;
    }

    break;
  }

  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

void sub_1000A30CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v48 = a1;
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  id v58 = *(void **)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  id v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  uint64_t v57 = (char *)&v46 - v18;
  uint64_t v47 = a2;
  if (a3 != a2)
  {
    uint64_t v53 = *a4;
    uint64_t v19 = v53 + 8 * a3 - 8;
    id v50 = v11;
    id v51 = v15;
LABEL_5:
    os_log_type_t v20 = *(void **)(v53 + 8 * a3);
    uint64_t v21 = v48;
    uint64_t v49 = v19;
    uint64_t v54 = a3;
    while (1)
    {
      uint64_t v22 = *(void **)v19;
      id v23 = v20;
      id v24 = v22;
      id v56 = v23;
      id v25 = [v23 smtTimestamp];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        uint64_t v28 = v58;
        id v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0LL, 1LL, v12);
        uint64_t v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1LL, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        uint64_t v31 = v30(v11, 1LL, 1LL, v12);
      }

      static Date.distantPast.getter(v31);
      sub_100077CFC((uint64_t)v11, (uint64_t *)&unk_1002DF740);
LABEL_11:
      uint64_t v32 = v24;
      id v33 = [v24 smtTimestamp];
      if (v33)
      {
        Swift::Int v34 = v33;
        uint64_t v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        uint64_t v36 = v58;
        uint64_t v37 = (void (*)(char *, char *, uint64_t))v58[4];
        uint64_t v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0LL, 1LL, v12);
        uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1LL, v12);
        if ((_DWORD)v39 != 1)
        {
          id v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v38 = (uint64_t)v52;
        uint64_t v39 = v30(v52, 1LL, 1LL, v12);
      }

      id v40 = v51;
      static Date.distantPast.getter(v39);
      sub_100077CFC(v38, (uint64_t *)&unk_1002DF740);
LABEL_16:
      Swift::Int v41 = v57;
      char v42 = static Date.< infix(_:_:)(v57, v40);
      Swift::Int v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      uint64_t v44 = v54;
      uint64_t v11 = v50;
      if ((v42 & 1) == 0) {
        goto LABEL_4;
      }
      if (!v53)
      {
        __break(1u);
        return;
      }

      Swift::Int v45 = *(void **)v19;
      os_log_type_t v20 = *(void **)(v19 + 8);
      *(void *)uint64_t v19 = v20;
      *(void *)(v19 + _Block_object_dispose(va, 8) = v45;
      v19 -= 8LL;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        uint64_t v19 = v49 + 8;
        if (a3 == v47) {
          return;
        }
        goto LABEL_5;
      }
    }
  }

uint64_t sub_1000A3460(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::Int v95 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (void **)((char *)&v93 - v12);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v93 - v15;
  __chkstk_darwin(v14);
  unint64_t v98 = (char *)&v93 - v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  unsigned int v104 = *(void **)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v94 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v99 = (void **)((char *)&v93 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v97 = (char *)&v93 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  id v100 = (char *)&v93 - v26;
  __chkstk_darwin(v25);
  uint64_t v27 = a4;
  id v101 = a3;
  uint64_t v102 = (char *)&v93 - v28;
  uint64_t v29 = (char *)a2 - (char *)a1;
  uint64_t v30 = (char *)a2 - (char *)a1 + 7;
  uint64_t v31 = v30 >> 3;
  uint64_t v32 = (char *)a3 - (char *)a2;
  uint64_t v33 = v32 / 8;
  id v105 = a1;
  uint64_t v108 = a1;
  id v107 = v27;
  uint64_t v103 = v27;
  if (v30 >> 3 >= v32 / 8)
  {
    if (v32 < -7) {
      goto LABEL_66;
    }
    uint64_t v61 = (uint64_t)v95;
    if (v27 != a2 || &a2[v33] <= v27)
    {
      memmove(v27, a2, 8 * v33);
      uint64_t v27 = v103;
    }

    uint64_t v62 = &v27[v33];
    uint64_t v106 = v62;
    uint64_t v108 = a2;
    if (v32 < 8 || v105 >= a2)
    {
LABEL_65:
      sub_1000A3D90((void **)&v108, (const void **)&v107, &v106);
      return 1LL;
    }

    uint64_t v63 = v101 - 1;
    uint64_t v64 = &selRef_deleteDownloadRecord_application_error_;
    uint64_t v65 = a2;
    id v101 = v13;
    while (1)
    {
      unint64_t v98 = (char *)v62;
      id v66 = *(v62 - 1);
      uint64_t v96 = v62 - 1;
      uint64_t v67 = *--v65;
      Swift::Int v68 = v66;
      uint64_t v102 = v67;
      uint64_t v69 = v64[403];
      uint64_t v97 = v68;
      id v70 = [v68 v69];
      if (v70)
      {
        id v71 = v70;
        id v72 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

        id v73 = v104;
        uint64_t v74 = (void (*)(void **, char *, uint64_t))v104[4];
        v74(v101, v72, v18);
        unint64_t v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v73[7];
        v75(v101, 0LL, 1LL, v18);
        unint64_t v76 = (uint64_t (*)(void **, uint64_t, uint64_t))v73[6];
        uint64_t v13 = v101;
        uint64_t v77 = v76(v101, 1LL, v18);
        if ((_DWORD)v77 != 1)
        {
          v74(v99, (char *)v13, v18);
          goto LABEL_44;
        }
      }

      else
      {
        unint64_t v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v104[7];
        uint64_t v77 = v75(v13, 1LL, 1LL, v18);
      }

      static Date.distantPast.getter(v77);
      sub_100077CFC((uint64_t)v13, (uint64_t *)&unk_1002DF740);
LABEL_44:
      id v78 = [v102 v64[403]];
      if (v78)
      {
        unint64_t v79 = v78;
        unint64_t v80 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        id v81 = v104;
        uint64_t v82 = (void (*)(char *, char *, uint64_t))v104[4];
        uint64_t v61 = (uint64_t)v95;
        v82(v95, v80, v18);
        v75((void **)v61, 0LL, 1LL, v18);
        uint64_t v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v61, 1LL, v18);
        if ((_DWORD)v83 != 1)
        {
          id v84 = v94;
          uint64_t v85 = v61;
          v82(v94, (char *)v61, v18);
          goto LABEL_49;
        }
      }

      else
      {
        uint64_t v83 = v75((void **)v61, 1LL, 1LL, v18);
      }

      id v84 = v94;
      static Date.distantPast.getter(v83);
      uint64_t v85 = v61;
      sub_100077CFC(v61, (uint64_t *)&unk_1002DF740);
LABEL_49:
      int v86 = v63 + 1;
      uint64_t v87 = v99;
      char v88 = static Date.< infix(_:_:)(v99, v84);
      uint64_t v89 = v84;
      uint64_t v90 = (void (*)(char *, uint64_t))v104[1];
      v90(v89, v18);
      v90((char *)v87, v18);

      if ((v88 & 1) != 0)
      {
        Swift::Int v91 = v103;
        uint64_t v13 = v101;
        uint64_t v62 = (void **)v98;
        if (v86 != a2 || v63 >= a2) {
          *uint64_t v63 = *v65;
        }
        uint64_t v108 = v65;
      }

      else
      {
        uint64_t v62 = v96;
        uint64_t v106 = v96;
        Swift::Int v91 = v103;
        uint64_t v13 = v101;
        if (v86 >= (void **)v98 && v63 < (void **)v98)
        {
          uint64_t v61 = v85;
          uint64_t v65 = a2;
          goto LABEL_61;
        }

        *uint64_t v63 = *v96;
        uint64_t v65 = a2;
      }

      uint64_t v61 = v85;
LABEL_61:
      uint64_t v64 = &selRef_deleteDownloadRecord_application_error_;
      if (v62 > v91)
      {
        --v63;
        a2 = v65;
        if (v65 > v105) {
          continue;
        }
      }

      goto LABEL_65;
    }
  }

  if (v29 >= -7)
  {
    uint64_t v34 = (uint64_t)v98;
    if (v27 != v105 || &v105[v31] <= v27)
    {
      memmove(v27, v105, 8 * v31);
      uint64_t v27 = v103;
    }

    uint64_t v99 = &v27[v31];
    uint64_t v106 = v99;
    if (v29 >= 8 && a2 < v101)
    {
      while (1)
      {
        uint64_t v35 = *a2;
        uint64_t v103 = v27;
        uint64_t v36 = *v27;
        id v37 = v35;
        id v38 = v36;
        uint64_t v39 = v37;
        id v40 = [v37 smtTimestamp];
        if (v40)
        {
          Swift::Int v41 = v40;
          char v42 = v100;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

          Swift::Int v43 = v104;
          uint64_t v44 = (void (*)(uint64_t, char *, uint64_t))v104[4];
          v44(v34, v42, v18);
          Swift::Int v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43[7];
          v45(v34, 0LL, 1LL, v18);
          uint64_t v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43[6])(v34, 1LL, v18);
          if ((_DWORD)v46 != 1)
          {
            v44((uint64_t)v102, (char *)v34, v18);
            goto LABEL_15;
          }
        }

        else
        {
          Swift::Int v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v104[7];
          uint64_t v46 = v45(v34, 1LL, 1LL, v18);
        }

        static Date.distantPast.getter(v46);
        sub_100077CFC(v34, (uint64_t *)&unk_1002DF740);
LABEL_15:
        id v47 = [v38 smtTimestamp];
        if (!v47)
        {
          uint64_t v54 = v45((uint64_t)v16, 1LL, 1LL, v18);
LABEL_19:
          uint64_t v55 = v97;
          static Date.distantPast.getter(v54);
          sub_100077CFC((uint64_t)v16, (uint64_t *)&unk_1002DF740);
          goto LABEL_20;
        }

        uint64_t v48 = v47;
        uint64_t v49 = v16;
        id v50 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

        id v51 = v104;
        uint64_t v52 = (void (*)(char *, char *, uint64_t))v104[4];
        uint64_t v53 = v50;
        uint64_t v16 = v49;
        v52(v49, v53, v18);
        v45((uint64_t)v49, 0LL, 1LL, v18);
        uint64_t v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v51[6])(v49, 1LL, v18);
        if ((_DWORD)v54 == 1) {
          goto LABEL_19;
        }
        uint64_t v55 = v97;
        v52(v97, v16, v18);
LABEL_20:
        id v56 = v102;
        char v57 = static Date.< infix(_:_:)(v102, v55);
        id v58 = (void (*)(char *, uint64_t))v104[1];
        v58(v55, v18);
        v58(v56, v18);

        uint64_t v34 = (uint64_t)v98;
        if ((v57 & 1) != 0)
        {
          unint64_t v59 = (unint64_t)(a2 + 1);
          uint64_t v27 = v103;
        }

        else
        {
          unint64_t v60 = v103;
          if (v105 != v103) {
            char *v105 = *v103;
          }
          uint64_t v27 = v60 + 1;
          id v107 = v27;
          unint64_t v59 = (unint64_t)a2;
        }

        uint64_t v108 = ++v105;
        if (v27 < v99)
        {
          a2 = (void **)v59;
        }

        goto LABEL_65;
      }
    }

    goto LABEL_65;
  }

LABEL_66:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

char *sub_1000A3C98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002E0F48);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000A3D90(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

char *sub_1000A3E38(uint64_t a1)
{
  return sub_1000A3C98(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_1000A3E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E0F18);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_1000A4160(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000A42BC();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void *sub_1000A42BC()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E0F18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void (*sub_1000A4470( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000A44F0(v6, a2, a3);
  return sub_1000A44C4;
}

void sub_1000A44C4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_1000A44F0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000A455C;
  }

  __break(1u);
  return result;
}

void sub_1000A455C(id *a1)
{
}

uint64_t sub_1000A4564(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A9AA4( (unint64_t *)&qword_1002E0F40,  &qword_1002E0AB8,  (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100072CC4(&qword_1002E0AB8);
          int64_t v13 = sub_1000A4470(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000A4780(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

void sub_1000A4794(void *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  id v6 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v8 = swift_allocObject(v7, 152LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1002464E0;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000914E8();
  *(void *)(v8 + 32) = v3;
  *(void *)(v8 + 40) = v2;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = v5;
  *(void *)(v8 + 80) = v4;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v8 + 136) = &type metadata for String;
  *(void *)(v8 + 144) = v9;
  *(void *)(v8 + 112) = 0x646574656C6564LL;
  *(void *)(v8 + 120) = 0xE700000000000000LL;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  uint64_t v10 = (void *)NSPredicate.init(format:_:)(0xD00000000000002FLL, 0x800000010020FE00LL, v8);
  [v6 setPredicate:v10];

  id v27 = 0LL;
  id v11 = [v6 execute:&v27];
  id v12 = v27;
  if (!v11)
  {
    id v21 = v27;
    uint64_t v22 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v23);
    swift_errorRelease(v22);

    id v20 = 0LL;
    goto LABEL_14;
  }

  int64_t v13 = v11;
  uint64_t v14 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  id v16 = v12;

  if (!((unint64_t)v15 >> 62))
  {
    if (*(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease(v15);

    id v20 = 0LL;
    goto LABEL_14;
  }

  if (v15 < 0) {
    uint64_t v24 = v15;
  }
  else {
    uint64_t v24 = v15 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v15);
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v15);
  if (!v25) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v15 & 0xC000000000000001LL) != 0)
  {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
    goto LABEL_7;
  }

  if (*(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v17 = *(id *)(v15 + 32);
LABEL_7:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v15);
    id v19 = v18;
    id v20 = sub_100097300();

LABEL_14:
    *a1 = v20;
    return;
  }

  __break(1u);
}

uint64_t sub_1000A4A24@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464F0;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000914E8();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  uint64_t v8 = v5;
  swift_bridgeObjectRetain(v3);
  unint64_t v9 = (void *)NSPredicate.init(format:_:)(0xD000000000000010LL, 0x800000010020FD30LL, v7);
  [v5 setPredicate:v9];

  unint64_t v37 = 0LL;
  id v10 = [v5 execute:&v37];
  id v11 = (id)v37;
  if (!v10)
  {
    id v33 = (id)v37;
    uint64_t v34 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v35);
    uint64_t result = swift_errorRelease(v34);
    uint64_t v32 = 0LL;
LABEL_30:
    *a1 = v32;
    return result;
  }

  id v12 = v10;
  uint64_t v13 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  id v15 = v11;

  unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v36 = v14;
    }
    else {
      uint64_t v36 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v36);
    uint64_t result = swift_bridgeObjectRelease(v14);
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_28;
  }

  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v14);
  if (!v16)
  {
LABEL_28:
    swift_bridgeObjectRelease(v14);
    uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_29:

    uint64_t result = swift_bridgeObjectRelease(v14);
    goto LABEL_30;
  }

void sub_1000A4DA4(void *a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  id v15 = 0LL;
  id v5 = [v4 execute:&v15];
  id v6 = v15;
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);
    id v10 = v6;

    swift_retain(v2);
    id v11 = sub_1000A96F8(v9, v2);
    swift_release(v2);

    swift_bridgeObjectRelease(v9);
  }

  else
  {
    id v12 = v15;
    uint64_t v13 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v14);
    swift_errorRelease(v13);

    id v11 = _swiftEmptyArrayStorage;
  }

  *a1 = v11;
}

void sub_1000A4ED4()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v32 = v0[6];
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  if (v1)
  {
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v8 = sub_1000914E8();
    *(void *)(v7 + 32) = v2;
    *(void *)(v7 + 40) = v1;
    *(void *)(v7 + 96) = &type metadata for String;
    *(void *)(v7 + 104) = v8;
    *(void *)(v7 + 64) = v8;
    *(void *)(v7 + 72) = v4;
    *(void *)(v7 + 80) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v1);
    unint64_t v9 = 0xD00000000000001DLL;
    unint64_t v10 = 0x800000010020FBD0LL;
    uint64_t v11 = v7;
  }

  else
  {
    uint64_t v12 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_1002464F0;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_1000914E8();
    *(void *)(v12 + 32) = v4;
    *(void *)(v12 + 40) = v3;
    swift_bridgeObjectRetain(v3);
    unint64_t v10 = 0x800000010020FD30LL;
    unint64_t v9 = 0xD000000000000010LL;
    uint64_t v11 = v12;
  }

  uint64_t v13 = (void *)NSPredicate.init(format:_:)(v9, v10, v11);
  [v5 setPredicate:v13];

  id v33 = 0LL;
  id v14 = [v5 execute:&v33];
  id v15 = v33;
  if (!v14) {
    goto LABEL_19;
  }
  uint64_t v16 = v14;
  uint64_t v17 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
  id v19 = v15;

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v25 = v18;
    }
    else {
      uint64_t v25 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v18);
    if (!v20) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v18);
    if (!v20) {
      goto LABEL_17;
    }
  }

  if (v20 >= 1)
  {
    uint64_t v21 = 0LL;
    do
    {
      if ((v18 & 0xC000000000000001LL) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      }
      else {
        id v22 = *(id *)(v18 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      ++v21;
      NSString v24 = String._bridgeToObjectiveC()();
      [v23 setCkstate:v24];
    }

    while (v20 != v21);
LABEL_17:
    uint64_t v26 = swift_bridgeObjectRelease_n(v18, 2LL);
    char v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 152LL))(v26);
    id v33 = 0LL;
    unsigned __int8 v28 = [v27 save:&v33];

    id v15 = v33;
    if ((v28 & 1) != 0)
    {
      id v29 = v33;
LABEL_20:

      return;
    }

void sub_1000A5214(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  Swift::Int integerLiteral = *(unsigned __int8 *)(v1 + 40);
  int v43 = *(unsigned __int8 *)(v1 + 41);
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v9 = v2[11];
  unint64_t v8 = v2[12];
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000914E8();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v10;
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 72) = v3;
  *(void *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x800000010020FBD0LL, v7);
  [v5 setPredicate:v11];

  id v47 = 0LL;
  id v12 = [v5 execute:&v47];
  id v13 = v47;
  if (!v12)
  {
    id v20 = v47;
    uint64_t v21 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v22);
    swift_errorRelease(v21);
    goto LABEL_14;
  }

  id v14 = v12;
  uint64_t v15 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  id v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }

  if (v16 < 0) {
    uint64_t v23 = v16;
  }
  else {
    uint64_t v23 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v16);
  if (!v24)
  {
LABEL_13:
    swift_bridgeObjectRelease(v16);
LABEL_14:
    uint64_t v25 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v2 + 240LL))(v9, v8, v3, v4);
    if (v25)
    {
      uint64_t v26 = (void *)v25;
      char v27 = (void *)(*(uint64_t (**)(void))(*v2 + 152LL))();
      id v28 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v27];

      id v19 = v28;
      NSString v29 = String._bridgeToObjectiveC()();
      [v19 setApplication:v29];

      NSString v30 = String._bridgeToObjectiveC()();
      [v19 setUri:v30];

      NSString v31 = [v26 recordName];
      if (!v31)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v33 = v32;
        NSString v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v33);
      }

      [v19 setRecordID:v31];

      goto LABEL_18;
    }

    if (qword_1002EA8B0 == -1)
    {
LABEL_22:
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v36, (uint64_t)qword_1002EA8B8);
      os_log_type_t v37 = static os_log_type_t.error.getter();
      uint64_t v38 = swift_retain(v2);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      if (os_log_type_enabled(v39, v37))
      {
        id v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        Swift::Int v41 = (void *)swift_slowAlloc(32LL, -1LL);
        id v47 = v41;
        *(_DWORD *)id v40 = 136315138;
        swift_bridgeObjectRetain(v8);
        uint64_t v45 = sub_10007C22C(v9, v8, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v40 + 4, v40 + 12);
        swift_bridgeObjectRelease(v8);
        swift_release(v2);
        _os_log_impl((void *)&_mh_execute_header, v39, v37, "failed to create recordID %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      else
      {
        swift_release(v2);
      }

      uint64_t v35 = 0LL;
      goto LABEL_26;
    }

void sub_1000A5754(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = v1[4];
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v8 = v3[11];
  uint64_t v9 = v3[12];
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000914E8();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v10;
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 72) = v2;
  *(void *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x800000010020FBD0LL, v7);
  [v5 setPredicate:v11];

  id v39 = 0LL;
  id v12 = [v5 execute:&v39];
  id v13 = v39;
  if (!v12)
  {
    id v28 = v39;
    uint64_t v29 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v30);
    swift_errorRelease(v29);
    uint64_t v31 = 0LL;
LABEL_19:
    *a1 = v31;
    return;
  }

  id v14 = v12;
  uint64_t v15 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  id v17 = v13;

  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v18, (uint64_t)qword_1002EA8B8);
  uint64_t v19 = swift_bridgeObjectRetain_n(v16, 2LL);
  id v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = (void *)swift_slowAlloc(32LL, -1LL);
    id v39 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v24 = swift_bridgeObjectRetain(v16);
    uint64_t v25 = Array.description.getter(v24, v15);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(v16);
    uint64_t v37 = sub_10007C22C(v25, v27, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v16, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "found records: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  if (!((unint64_t)v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_10;
    }
LABEL_18:
    swift_bridgeObjectRelease(v16);

    uint64_t v31 = 0LL;
    goto LABEL_19;
  }

  if (v16 < 0) {
    uint64_t v34 = v16;
  }
  else {
    uint64_t v34 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v16);
  if (!v35) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v16 & 0xC000000000000001LL) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
    goto LABEL_13;
  }

  if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v32 = *(id *)(v16 + 32);
LABEL_13:
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v16);
    uint64_t v31 = (*(uint64_t (**)(void *))(*v3 + 440LL))(v33);

    goto LABEL_19;
  }

  __break(1u);
}

void sub_1000A5B60(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  id v5 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v8 = v2[11];
  uint64_t v9 = v2[12];
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000914E8();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v10;
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 72) = v3;
  *(void *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x800000010020FBD0LL, v7);
  [v5 setPredicate:v11];

  id v38 = 0LL;
  id v12 = [v5 execute:&v38];
  id v13 = v38;
  if (!v12)
  {
    id v28 = v38;
    uint64_t v29 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v30);
    uint64_t v31 = v29;
    goto LABEL_11;
  }

  id v14 = v12;
  uint64_t v15 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  id v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease(v16);

    uint64_t v27 = 0LL;
    goto LABEL_17;
  }

  if (v16 < 0) {
    uint64_t v35 = v16;
  }
  else {
    uint64_t v35 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease(v16);
  if (!v36) {
    goto LABEL_16;
  }
LABEL_4:
  if ((v16 & 0xC000000000000001LL) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
    goto LABEL_7;
  }

  if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
LABEL_7:
    uint64_t v19 = v18;
    swift_bridgeObjectRelease(v16);
    id v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 setCkstate:v21];

    uint64_t v22 = (void *)(*(uint64_t (**)(void))(*v2 + 152LL))();
    id v38 = 0LL;
    unsigned int v23 = [v22 save:&v38];

    id v24 = v38;
    if (v23)
    {
      uint64_t v25 = *(uint64_t (**)(id))(*v2 + 432LL);
      id v26 = v38;
      uint64_t v27 = v25(v20);

LABEL_17:
      *a1 = v27;
      return;
    }

    id v32 = v38;

    uint64_t v33 = _convertNSErrorToError(_:)(v24);
    swift_willThrow(v34);

    uint64_t v31 = v33;
LABEL_11:
    swift_errorRelease(v31);
    uint64_t v27 = 0LL;
    goto LABEL_17;
  }

  __break(1u);
}

void sub_1000A5E88(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v7 = *(void **)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v8, (uint64_t)qword_1002EA8B8);
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v9 = v7;
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v29 = a1;
    uint64_t v12 = swift_slowAlloc(28LL, -1LL);
    id v13 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v27;
    *(_DWORD *)uint64_t v12 = 136315650;
    swift_bridgeObjectRetain(v3);
    uint64_t v30 = sub_10007C22C(v4, v3, &v31);
    uint64_t v28 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v3, 3LL);
    *(_WORD *)(v12 + 12) = 1024;
    LODWORD(v30) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v12 + 14, v12 + 18);
    *(_WORD *)(v12 + 1_Block_object_dispose(va, 8) = 2112;
    uint64_t v30 = (uint64_t)v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 20, v12 + 28);
    *id v13 = v9;

    uint64_t v6 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "store optin intent for %s to %{BOOL}d - %@",  (uint8_t *)v12,  0x1Cu);
    uint64_t v15 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v16 = v12;
    a1 = v29;
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  id v17 = [v9 error];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = (void *)_convertErrorToNSError(_:)(v17);
    [a1 setError:v19];

LABEL_18:
    return;
  }

  uint64_t v20 = (*(uint64_t (**)(void))((swift_isaMask & *v9) + 0x80LL))();
  uint64_t v21 = v20;
  if (!((unint64_t)v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_10;
    }
LABEL_17:
    swift_bridgeObjectRelease(v21);
    uint64_t v23 = type metadata accessor for KTError(0LL);
    uint64_t v24 = sub_100073FE0( (unint64_t *)&qword_1002E0F10,  type metadata accessor for KTError,  (uint64_t)&unk_100249B0C);
    uint64_t v25 = swift_allocError(v23, v24, 0LL, 0LL);
    swift_storeEnumTagMultiPayload(v26, v23, 14LL);
    uint64_t v19 = (void *)_convertErrorToNSError(_:)(v25);
    swift_errorRelease(v25);
    [a1 setError:v19];
    goto LABEL_18;
  }

  if (v20 >= 0) {
    v20 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v20)) {
    goto LABEL_17;
  }
LABEL_10:
  if ((v21 & 0xC000000000000001LL) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v21);
    goto LABEL_13;
  }

  if (*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v22 = *(id *)(v21 + 32);
LABEL_13:
    uint64_t v19 = v22;
    swift_bridgeObjectRelease(v21);
    (*(void (**)(void *))(*(void *)v6 + 368LL))(v19);
    goto LABEL_18;
  }

  __break(1u);
}

uint64_t sub_1000A6254()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000A6290(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void **)(v1 + 40);
  uint64_t v6 = *(void **)(v1 + 48);
  id v7 = [*(id *)(v1 + 16) error];
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_1002EA8B0 != -1) {
      swift_once(&qword_1002EA8B0, sub_1000972A0);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v9, (uint64_t)qword_1002EA8B8);
    swift_bridgeObjectRetain_n(v5, 2LL);
    id v10 = v8;
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      id v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v35 = a1;
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v15;
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain(v5);
      uint64_t v37 = sub_10007C22C(v3, v5, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v5, 3LL);
      *(_WORD *)(v13 + 12) = 2112;
      id v16 = v10;
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v16);
      uint64_t v37 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 14, v13 + 22);
      *id v14 = v17;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "delete of intent failed %s - %@", (uint8_t *)v13, 0x16u);
      uint64_t v18 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v14, 1LL, v18);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v19 = v15;
      a1 = v35;
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v10);
    [a1 setError:v33];
  }

  else
  {
    if (qword_1002EA8B0 != -1) {
      swift_once(&qword_1002EA8B0, sub_1000972A0);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v20, (uint64_t)qword_1002EA8B8);
    swift_bridgeObjectRetain_n(v5, 2LL);
    id v21 = a1;
    id v22 = v4;
    id v23 = v21;
    id v24 = v22;
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v6;
      uint64_t v28 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v34;
      *(_DWORD *)uint64_t v27 = 136315650;
      swift_bridgeObjectRetain(v5);
      uint64_t v37 = sub_10007C22C(v3, v5, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v5, 3LL);
      *(_WORD *)(v27 + 12) = 2112;
      uint64_t v37 = (uint64_t)v23;
      id v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14, v27 + 22);
      void *v28 = v23;

      *(_WORD *)(v27 + 22) = 2112;
      uint64_t v37 = (uint64_t)v24;
      id v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 24, v27 + 32);
      v28[1] = v24;

      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "delete optin intent for in local database %s - %@ - %@",  (uint8_t *)v27,  0x20u);
      uint64_t v31 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v28, 2LL, v31);
      id v32 = v28;
      uint64_t v6 = v36;
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    [v6 deleteRecordIDWithCkrecordID:v24];
  }

void sub_1000A6768()
{
}

uint64_t sub_1000A678C()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_1000A67B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v3, (uint64_t)qword_1002EA8B8);
  uint64_t v4 = swift_bridgeObjectRetain_n(v1, 2LL);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = swift_slowAlloc(18LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v9 = Dictionary.description.getter(v1, &type metadata for String, v8, &protocol witness table for String);
    unint64_t v11 = v10;
    uint64_t v13 = sub_10007C22C(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v1, 2LL);
    *(_WORD *)(v6 + 12) = 1024;
    LODWORD(v13) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 4, v6 + 14, v6 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v5,  "storeOptIn finished writing to CK %s:%{BOOL}d",  (uint8_t *)v6,  0x12u);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);
  }

uint64_t sub_1000A69A4()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000A69D8(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v6 = *(void **)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  if (qword_1002EA8B0 != -1) {
    swift_once(&qword_1002EA8B0, sub_1000972A0);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v8, (uint64_t)qword_1002EA8B8);
  id v9 = v6;
  swift_bridgeObjectRetain_n(v3, 2LL);
  unint64_t v10 = v9;
  unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v46 = a1;
    uint64_t v48 = v7;
    uint64_t v13 = swift_slowAlloc(38LL, -1LL);
    uint64_t v14 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v44;
    *(_DWORD *)uint64_t v13 = 136315906;
    swift_bridgeObjectRetain(v3);
    uint64_t v49 = sub_10007C22C(v4, v3, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v3, 3LL);
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v49) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4, v13 + 14, v13 + 18);
    *(_WORD *)(v13 + 1_Block_object_dispose(va, 8) = 2112;
    uint64_t v49 = (uint64_t)v10;
    uint64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 20, v13 + 28);
    *uint64_t v14 = v10;

    *(_WORD *)(v13 + 2_Block_object_dispose(va, 8) = 2048;
    uint64_t v16 = (*(uint64_t (**)(void))((swift_isaMask & *v15) + 0x80LL))();
    uint64_t v17 = v16;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 >= 0) {
        v16 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v16);
    }

    else
    {
      uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v17);

    uint64_t v49 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 30, v13 + 38);

    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "store optin for %s to %{BOOL}d - %@ records: %ld",  (uint8_t *)v13,  0x26u);
    uint64_t v19 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v14, 1LL, v19);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    a1 = v46;
    uint64_t v7 = v48;
  }

  else
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  id v20 = [v10 error];
  if (v20)
  {
    id v21 = v20;
    id v22 = (void *)_convertErrorToNSError(_:)(v20);
    [a1 setError:v22];

    return;
  }

  uint64_t v23 = (*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x80LL))();
  uint64_t v24 = v23;
  if (!((unint64_t)v23 >> 62))
  {
    uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (v25) {
      goto LABEL_12;
    }
LABEL_28:
    swift_bridgeObjectRelease_n(v24, 2LL);
    return;
  }

  if (v23 < 0) {
    uint64_t v42 = v23;
  }
  else {
    uint64_t v42 = v23 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v23);
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v25) {
    goto LABEL_28;
  }
LABEL_12:
  if (v25 >= 1)
  {
    uint64_t v26 = 0LL;
    unint64_t v27 = v24 & 0xC000000000000001LL;
    uint64_t v28 = *(void (**)(id))(*(void *)v7 + 368LL);
    uint64_t v47 = v25;
    uint64_t v43 = v24;
    unint64_t v45 = v24 & 0xC000000000000001LL;
    do
    {
      if (v27) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
      }
      else {
        id v29 = *(id *)(v24 + 8 * v26 + 32);
      }
      id v30 = v29;
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc(12LL, -1LL);
        uint64_t v34 = swift_slowAlloc(32LL, -1LL);
        uint64_t v50 = v34;
        *(_DWORD *)uint64_t v33 = 136315138;
        id v35 = [v30 recordID];
        id v36 = [v35 recordName];

        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        unint64_t v39 = v38;

        uint64_t v40 = v37;
        uint64_t v24 = v43;
        unint64_t v27 = v45;
        *(void *)(v33 + 4) = sub_10007C22C(v40, v39, &v50);
        swift_bridgeObjectRelease(v39);

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "updating optIn record: %s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v41 = v34;
        uint64_t v25 = v47;
        swift_slowDealloc(v41, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {
      }

      ++v26;
      v28(v30);
    }

    while (v25 != v26);
    goto LABEL_28;
  }

  __break(1u);
}

void sub_1000A6F40()
{
}

void sub_1000A6F60()
{
}

void sub_1000A6F84(char *a1@<X8>)
{
}

uint64_t sub_1000A6F9C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000A6FC8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464F0;
  id v6 = [v1 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000914E8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  unint64_t v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v5);
  [v3 setPredicate:v10];

  id v72 = 0LL;
  id v11 = [v3 execute:&v72];
  id v12 = v72;
  if (!v11)
  {
    id v40 = v72;
    uint64_t v41 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v42);
    uint64_t v43 = v41;
LABEL_25:
    swift_errorRelease(v43);
    return;
  }

  uint64_t v13 = v11;
  uint64_t v14 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  id v16 = v12;

  uint64_t v65 = v1;
  id v66 = v3;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v44 = v15;
    }
    else {
      uint64_t v44 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v44);
    uint64_t v18 = &qword_1002E9F88[15];
    if (!v17) {
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v15);
    uint64_t v18 = &qword_1002E9F88[15];
    if (!v17) {
      goto LABEL_20;
    }
  }

  if (v17 < 1)
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_1002EA8B0, sub_1000972A0);
    goto LABEL_23;
  }

  uint64_t v19 = 0LL;
  unint64_t v20 = v15 & 0xC000000000000001LL;
  id v21 = *(uint64_t (**)(void, void))(*(void *)v2 + 152LL);
  uint64_t v67 = v21;
  uint64_t v68 = v2;
  do
  {
    if (v20) {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
    }
    else {
      id v26 = *(id *)(v15 + 8 * v19 + 32);
    }
    unint64_t v27 = v26;
    if (v18[278] != -1) {
      swift_once(&qword_1002EA8B0, sub_1000972A0);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v28, (uint64_t)qword_1002EA8B8);
    id v29 = v27;
    id v22 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v30 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v30))
    {
      uint64_t v31 = swift_slowAlloc(12LL, -1LL);
      unint64_t v32 = v20;
      uint64_t v33 = v15;
      uint64_t v34 = v17;
      id v35 = v18;
      id v36 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v31 = 138412290;
      *(void *)(v31 + 4) = v29;
      void *v36 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, v30, "deleting record: %@", (uint8_t *)v31, 0xCu);
      uint64_t v37 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v36, 1LL, v37);
      unint64_t v38 = v36;
      uint64_t v18 = v35;
      uint64_t v17 = v34;
      uint64_t v15 = v33;
      unint64_t v20 = v32;
      id v21 = v67;
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v39 = v31;
      uint64_t v2 = v68;
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {

      id v22 = v29;
    }

    ++v19;
    uint64_t v25 = (void *)v21(v23, v24);
    objc_msgSend(v25, "deleteObject:", v29, v65, v66);
  }

  while (v17 != v19);
LABEL_20:
  uint64_t v45 = swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 152LL))(v45);
  id v72 = 0LL;
  unsigned __int8 v47 = [v46 save:&v72];

  id v48 = v72;
  if ((v47 & 1) != 0)
  {
    id v49 = v72;

    return;
  }

  id v50 = v72;
  uint64_t v15 = _convertNSErrorToError(_:)(v48);

  swift_willThrow(v51);
  if (v18[278] != -1) {
    goto LABEL_28;
  }
LABEL_23:
  uint64_t v52 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v52, (uint64_t)qword_1002EA8B8);
  swift_errorRetain(v15);
  id v53 = v65;
  swift_errorRetain(v15);
  id v54 = v53;
  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.info.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc(22LL, -1LL);
    id v58 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v69 = (void *)swift_slowAlloc(32LL, -1LL);
    id v72 = v69;
    *(_DWORD *)uint64_t v57 = 136315394;
    id v59 = [v54 recordName];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    unint64_t v62 = v61;

    uint64_t v70 = sub_10007C22C(v60, v62, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease(v62);

    *(_WORD *)(v57 + 12) = 2112;
    swift_errorRetain(v15);
    uint64_t v63 = _swift_stdlib_bridgeErrorToNSError(v15);
    uint64_t v70 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v57 + 14, v57 + 22);
    *id v58 = v63;
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "delete of record %s failed %@", (uint8_t *)v57, 0x16u);
    uint64_t v64 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v58, 1LL, v64);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);

    uint64_t v43 = v15;
    goto LABEL_25;
  }

  swift_errorRelease(v15);
  swift_errorRelease(v15);
  swift_errorRelease(v15);
}

uint64_t sub_1000A7640()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A7650()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A7674()
{
  return sub_1000A76B4(0x676E696F6774756FLL, 0xE800000000000000LL);
}

uint64_t sub_1000A768C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A769C()
{
  return sub_1000A76B4(0x646574656C6564LL, 0xE700000000000000LL);
}

uint64_t sub_1000A76B4(uint64_t a1, uint64_t a2)
{
  id v6 = *(uint64_t **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  id v7 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1002464F0;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000914E8();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  unint64_t v10 = (void *)NSPredicate.init(format:_:)(0x2065746174736B63LL, 0xEC0000004025203DLL, v9);
  [v7 setPredicate:v10];

  id v23 = 0LL;
  id v11 = [v7 execute:&v23];
  id v12 = v23;
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    id v16 = v12;

    swift_retain(v5);
    uint64_t v17 = sub_10009152C(v15, v5);
    swift_release(v5);

    swift_bridgeObjectRelease(v15);
    uint64_t v18 = *v6;
    *id v6 = (uint64_t)v17;
    return swift_bridgeObjectRelease(v18);
  }

  else
  {
    id v20 = v23;
    uint64_t v21 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v22);
    return swift_errorRelease(v21);
  }

uint64_t sub_1000A7884()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A7894()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000A78B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(_BYTE **)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 112LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464D0;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v6 = sub_1000914E8();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 32) = 0x676E696F6774756FLL;
  *(void *)(v5 + 40) = 0xE800000000000000LL;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 72) = 0x646574656C6564LL;
  *(void *)(v5 + 80) = 0xE700000000000000LL;
  id v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x800000010020F560LL, v5);
  [v3 setPredicate:v7];

  id v10 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  uint64_t v8 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
  uint64_t v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1) {
    _BYTE *v2 = 1;
  }
}

uint64_t sub_1000A7A78()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A7A88()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

id sub_1000A7ABC()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v58 = v0[5];
  uint64_t v60 = v0[2];
  uint64_t v3 = *(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  id result = (id)swift_bridgeObjectRetain(v60);
  if (v3)
  {
    do
    {
      if (v3 < 1)
      {
        __break(1u);
        return result;
      }

      uint64_t v5 = 0LL;
      uint64_t v62 = v3;
      unint64_t v59 = v2;
      while (1)
      {
        if ((v60 & 0xC000000000000001LL) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v60);
        }
        else {
          id v6 = *(id *)(v60 + 32 + 8 * v5);
        }
        id v7 = v6;
        uint64_t v63 = v5;
        if (qword_1002EA8B0 != -1) {
          swift_once(&qword_1002EA8B0, sub_1000972A0);
        }
        uint64_t v8 = type metadata accessor for Logger(0LL);
        uint64_t v9 = sub_100072DEC(v8, (uint64_t)qword_1002EA8B8);
        os_log_type_t v10 = static os_log_type_t.info.getter(v9);
        id v11 = v7;
        swift_bridgeObjectRetain_n(v2, 2LL);
        id v12 = v11;
        uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
        os_log_type_t v14 = v10;
        if (os_log_type_enabled(v13, v10))
        {
          uint64_t v15 = swift_slowAlloc(22LL, -1LL);
          id v16 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v61 = swift_slowAlloc(32LL, -1LL);
          uint64_t v65 = (uint64_t)v12;
          uint64_t v66 = v61;
          *(_DWORD *)uint64_t v15 = 138412546;
          id v17 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v15 + 4, v15 + 12);
          void *v16 = v12;
          uint64_t v18 = v16;
          unint64_t v2 = v59;

          *(_WORD *)(v15 + 12) = 2080;
          swift_bridgeObjectRetain(v59);
          uint64_t v65 = sub_10007C22C(v1, v59, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v15 + 14, v15 + 22);
          swift_bridgeObjectRelease_n(v59, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "updating state record.ID %@ newState %s",  (uint8_t *)v15,  0x16u);
          uint64_t v19 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
          swift_arrayDestroy(v18, 1LL, v19);
          swift_slowDealloc(v18, -1LL, -1LL);
          swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v61, -1LL, -1LL);
          swift_slowDealloc(v15, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v2, 2LL);
        }

        id v20 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
        sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
        uint64_t v21 = sub_100072CC4((uint64_t *)&unk_1002E0440);
        uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
        *(_OWORD *)(v22 + 16) = xmmword_1002464F0;
        id v23 = [v12 recordName];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        uint64_t v26 = v25;

        *(void *)(v22 + 56) = &type metadata for String;
        *(void *)(v22 + 64) = sub_1000914E8();
        *(void *)(v22 + 32) = v24;
        *(void *)(v22 + 40) = v26;
        unint64_t v27 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v22);
        [v20 setPredicate:v27];

        uint64_t v66 = 0LL;
        id v28 = [v20 execute:&v66];
        id v29 = (id)v66;
        if (!v28)
        {
          id v42 = (id)v66;
          uint64_t v43 = _convertNSErrorToError(_:)(v29);

          swift_willThrow(v44);
          swift_errorRelease(v43);
          goto LABEL_6;
        }

        os_log_type_t v30 = v28;
        uint64_t v31 = sub_10007D178(0LL, &qword_1002E0AD8, off_100275000);
        uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
        id v33 = v29;

        uint64_t v34 = sub_100072CC4(&qword_1002E03D8);
        uint64_t v35 = swift_allocObject(v34, 64LL, 7LL);
        *(_OWORD *)(v35 + 16) = xmmword_1002464F0;
        uint64_t v66 = 0x3A7364726F636572LL;
        unint64_t v67 = 0xE900000000000020LL;
        if ((unint64_t)v32 >> 62)
        {
          uint64_t v50 = v32 < 0 ? v32 : v32 & 0xFFFFFFFFFFFFFF8LL;
          swift_bridgeObjectRetain(v32);
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v50);
          swift_bridgeObjectRelease(v32);
        }

        else
        {
          uint64_t v36 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        uint64_t v65 = v36;
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        object = v37._object;
        String.append(_:)(v37);
        swift_bridgeObjectRelease(object);
        uint64_t v39 = v66;
        unint64_t v40 = v67;
        *(void *)(v35 + 56) = &type metadata for String;
        *(void *)(v35 + 32) = v39;
        *(void *)(v35 + 40) = v40;
        print(_:separator:terminator:)(v35, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v35);
        uint64_t v41 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v32);
        if (v41) {
          goto LABEL_26;
        }
LABEL_5:

        swift_bridgeObjectRelease_n(v32, 2LL);
LABEL_6:
        uint64_t v5 = v63 + 1;

        if (v63 + 1 == v62) {
          goto LABEL_41;
        }
      }

      if (v32 < 0) {
        uint64_t v45 = v32;
      }
      else {
        uint64_t v45 = v32 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v32);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v45);
      if (!v41) {
        goto LABEL_5;
      }
LABEL_26:
      if (v41 >= 1)
      {
        uint64_t v46 = 0LL;
        do
        {
          if ((v32 & 0xC000000000000001LL) != 0) {
            id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v32);
          }
          else {
            id v47 = *(id *)(v32 + 8 * v46 + 32);
          }
          id v48 = v47;
          ++v46;
          NSString v49 = String._bridgeToObjectiveC()();
          [v48 setCkstate:v49];
        }

        while (v41 != v46);
        goto LABEL_5;
      }

      __break(1u);
LABEL_37:
      if (v60 < 0) {
        uint64_t v51 = v60;
      }
      else {
        uint64_t v51 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v60);
      id result = (id)_CocoaArrayWrapper.endIndex.getter(v51);
      uint64_t v3 = (uint64_t)result;
    }

    while (result);
  }

LABEL_41:
  uint64_t v52 = swift_bridgeObjectRelease(v60);
  id v53 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 152LL))(v52);
  uint64_t v66 = 0LL;
  unsigned __int8 v54 = [v53 save:&v66];

  if ((v54 & 1) != 0) {
    return (id)v66;
  }
  uint64_t v64 = v66;
  id v55 = (id)v66;
  uint64_t v56 = _convertNSErrorToError(_:)(v64);

  swift_willThrow(v57);
  return (id)swift_errorRelease(v56);
}

  __break(1u);
  return result;
}

              sub_100079A50(v1);
              return;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  id result = swift_release(v8);
  void *v3 = v10;
  return result;
}

  if ((a3 & 8) != 0) {
    memset_s(v33, 0x20uLL, 0, 0x20uLL);
  }
  return v8;
}

uint64_t sub_1000A818C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A819C()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000A81C8()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [(id)objc_opt_self(CloudOptIn) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1002464F0;
  id v7 = [(id)v1 recordName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000914E8();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  id v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v6);
  [v4 setPredicate:v11];

  id v57 = 0LL;
  id v12 = [v4 execute:&v57];
  id v13 = v57;
  if (!v12)
  {
    id v29 = v57;
    uint64_t v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v31);
    swift_errorRelease(v30);
    if (qword_1002EA8B0 == -1)
    {
LABEL_12:
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v32, (uint64_t)qword_1002EA8B8);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      id v34 = (id)v1;
      uint64_t v35 = (void *)Logger.logObject.getter(v34);
      os_log_type_t v36 = v33;
      if (!os_log_type_enabled((os_log_t)v35, v33))
      {

LABEL_26:
        return;
      }

      Swift::String v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v38 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)Swift::String v37 = 138412290;
      id v57 = v34;
      id v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v37 + 4, v37 + 12);
      void *v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v36, "record not found %@", v37, 0xCu);
      uint64_t v40 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v38, 1LL, v40);
      uint64_t v41 = v38;
LABEL_24:
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      goto LABEL_26;
    }

uint64_t sub_1000A8780()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A8790(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x444964726F636572LL && a2 == 0xE800000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 6910581 && a2 == 0xE300000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(6910581LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x746163696C707061LL && a2 == 0xEB000000006E6F69LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 0x6574617473LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else if (a1 == 0x73656D6954746D73LL && a2 == 0xEC000000706D6174LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73656D6954746D73LL, 0xEC000000706D6174LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  else if (a1 == 0x6C6169726573LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 6LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6169726573LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

void sub_1000A8A4C()
{
  id v1 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithEntityName:v2];

  id v4 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v3];
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v0 + 152LL);
  char v6 = (void *)v5();
  id v19 = 0LL;
  id v7 = [v6 executeRequest:v4 error:&v19];

  id v8 = v19;
  if (v7)
  {
    id v9 = v19;
  }

  else
  {
    id v11 = v19;
    uint64_t v12 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    uint64_t v10 = swift_errorRelease(v12);
  }

  id v13 = (void *)((uint64_t (*)(uint64_t))v5)(v10);
  id v19 = 0LL;
  unsigned int v14 = [v13 save:&v19];

  id v15 = v19;
  if (v14)
  {
    id v16 = v19;
  }

  else
  {
    id v17 = v19;
    uint64_t v18 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    swift_errorRelease(v18);
    id v3 = v4;
  }
}

uint64_t sub_1000A8BC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_1000A8BD8(uint64_t a1, uint64_t *a2, int *a3)
{
  id v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *id v4 = *a2;
    id v4 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v11;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v12 = a3[8];
    __dst = (void *)(a1 + v12);
    id v13 = (char *)a2 + v12;
    *(void *)(a1 + 32) = v9;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    id v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    if (v16(v13, 1LL, v14))
    {
      uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002DF740);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0LL, 1LL, v14);
    }

    uint64_t v19 = a3[9];
    uint64_t v20 = a3[10];
    id v21 = (void *)((char *)v4 + v19);
    id v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *id v21 = *v22;
    v21[1] = v23;
    id v24 = (void *)((char *)v4 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *id v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
  }

  return v4;
}

uint64_t sub_1000A8D50(void *a1, int *a2)
{
  id v4 = (char *)a1 + a2[8];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[9] + 8));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[10] + 8));
}

uint64_t sub_1000A8DF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v10;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v11 = a3[8];
  __dst = (void *)(a1 + v11);
  uint64_t v12 = (const void *)(a2 + v11);
  *(void *)(a1 + 32) = v8;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (v15(v12, 1LL, v13))
  {
    uint64_t v16 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0LL, 1LL, v13);
  }

  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  id v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *id v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_1000A8F40(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
LABEL_7:
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[10];
  id v28 = (void *)(a1 + v27);
  id v29 = (void *)(a2 + v27);
  void *v28 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1000A9118(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_1000A9210(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = v22[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[10];
  id v28 = (void *)(a1 + v27);
  id v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v32 = v28[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_1000A9398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A93A4);
}

uint64_t sub_1000A93A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t sub_1000A9424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9430);
}

uint64_t sub_1000A9430(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

void sub_1000A94A8(uint64_t a1)
{
  v4[0] = &unk_100248B90;
  v4[1] = &unk_100248B90;
  void v4[2] = &unk_100248B90;
  void v4[3] = &unk_100248BA8;
  sub_100090D84(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(v2 - 8) + 64LL;
    void v4[5] = &unk_100248BC0;
    v4[6] = &unk_100248BC0;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
  }

uint64_t type metadata accessor for KTCloudOptIn()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd12KTCloudOptIn);
}

uint64_t storeEnumTagSinglePayload for CloudOptInData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000A95A0 + 4 * byte_100248B05[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000A95D4 + 4 * byte_100248B00[v4]))();
}

uint64_t sub_1000A95D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A95DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A95E4LL);
  }
  return result;
}

uint64_t sub_1000A95F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A95F8LL);
  }
  *(_BYTE *)id result = a2 + 6;
  return result;
}

uint64_t sub_1000A95FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9604(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudOptInData.CodingKeys()
{
  return &type metadata for CloudOptInData.CodingKeys;
}

unint64_t sub_1000A9624()
{
  unint64_t result = qword_1002EAAF0;
  if (!qword_1002EAAF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248CCC, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002EAAF0);
  }

  return result;
}

unint64_t sub_1000A966C()
{
  unint64_t result = qword_1002EAC00;
  if (!qword_1002EAC00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248C3C, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002EAC00);
  }

  return result;
}

unint64_t sub_1000A96B4()
{
  unint64_t result = qword_1002EAC08[0];
  if (!qword_1002EAC08[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100248C64, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, qword_1002EAC08);
  }

  return result;
}

void *sub_1000A96F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    unint64_t v31 = a1 & 0xC000000000000001LL;
    uint64_t v5 = 4LL;
    while (1)
    {
      id v7 = v31 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      uint64_t v8 = v7;
      uint64_t v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v10 = [v7 ckstate];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v14 = v13;

        if (v14)
        {
          if (v12 == 0x646574656C6564LL && v14 == 0xE700000000000000LL)
          {
            unint64_t v26 = 0xE700000000000000LL;
            goto LABEL_26;
          }

          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x646574656C6564LL, 0xE700000000000000LL, 0LL);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0) {
            goto LABEL_27;
          }
        }
      }

      id v17 = objc_msgSend(v8, "uri", v31);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      uint64_t v21 = *(void *)(a2 + 88);
      uint64_t v22 = *(void *)(a2 + 96);
      if (v18 == v21 && v20 == v22)
      {
        unint64_t v26 = v20;
LABEL_26:
        swift_bridgeObjectRelease(v26);
        goto LABEL_27;
      }

      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0LL);
      swift_bridgeObjectRelease(v20);
      if ((v24 & 1) == 0)
      {
        id v25 = sub_100097300();
        if (v32) {
          goto LABEL_31;
        }
        goto LABEL_28;
      }

uint64_t sub_1000A9980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudOptInData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A99C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A9A0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100072CC4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void type metadata accessor for KTOptIn()
{
  if (!qword_1002E0F58)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10027EE88);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1002E0F58);
    }
  }

uint64_t sub_1000A9AA4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10007426C(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000A9B60()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EAD98);
  sub_100072DEC(v0, (uint64_t)qword_1002EAD98);
  return Logger.init(transparencyCategory:)(0xD000000000000017LL, 0x8000000100248E30LL);
}

id sub_1000A9BC0()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps);
}

uint64_t sub_1000A9BD0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application + 8));
  return v1;
}

uint64_t sub_1000A9C08()
{
  return sub_1000A9EF8(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris);
}

uint64_t sub_1000A9C14(uint64_t a1)
{
  return sub_1000A9FD4(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris);
}

uint64_t (*sub_1000A9C20(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

unint64_t variable initialization expression of PeerValidationOperation.verifierInfo()
{
  return sub_1000A9C88((uint64_t)_swiftEmptyArrayStorage, &qword_1002E1098);
}

unint64_t sub_1000A9C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  id v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    id v10 = *v7;
    swift_bridgeObjectRetain(v9);
    id v11 = v10;
    unint64_t result = sub_100079A58(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9D9C()
{
  return sub_1000A9EF8(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo);
}

uint64_t sub_1000A9DA8(uint64_t a1)
{
  return sub_1000A9FD4(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo);
}

uint64_t (*sub_1000A9DB4(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000A9DF8()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier);
}

id sub_1000A9E08()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp);
}

uint64_t sub_1000A9E18()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient));
}

id sub_1000A9E28()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue);
}

unint64_t variable initialization expression of PeerValidationOperation.result()
{
  return sub_1000A9C88((uint64_t)_swiftEmptyArrayStorage, &qword_1002E1058);
}

uint64_t PeerValidationOperation.result.getter()
{
  return sub_1000A9EF8(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result);
}

uint64_t sub_1000A9EF8(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t PeerValidationOperation.result.setter(uint64_t a1)
{
  return sub_1000A9FD4(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result);
}

uint64_t sub_1000A9FD4(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*PeerValidationOperation.result.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id PeerValidationOperation.__allocating_init(deps:application:uris:logClient:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_1000AC8CC(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease(a5);
  return v12;
}

id PeerValidationOperation.init(deps:application:uris:logClient:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = sub_1000AC8CC(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease(a5);
  return v7;
}

void *sub_1000AA118(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000AB79C(0, v1, 0);
  unint64_t result = (void *)sub_1000AC6EC(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = v2 + 64;
  uint64_t v27 = v2 + 80;
  int64_t v28 = v1;
  uint64_t v30 = v2 + 64;
  uint64_t v31 = v2;
  int v29 = v4;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_26;
    }
    uint64_t v33 = v6;
    id v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = *(void **)(*(void *)(v2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v13);
    id v15 = v14;
    uint64_t v34 = v12;
    swift_bridgeObjectRetain(v13);
    v16._countAndFlagsBits = 58LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    [v15 succeed];
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    if (v32)
    {
      swift_release(_swiftEmptyArrayStorage);

      swift_bridgeObjectRelease(v13);
      return _swiftEmptyArrayStorage;
    }

    unint64_t result = (void *)swift_bridgeObjectRelease(v13);
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1) {
      unint64_t result = (void *)sub_1000AB79C(v19 > 1, v20 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v20 + 1;
    uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
    void v21[4] = v34;
    v21[5] = v13;
    uint64_t v2 = v31;
    int64_t v8 = 1LL << *(_BYTE *)(v31 + 32);
    if (v5 >= v8) {
      goto LABEL_27;
    }
    uint64_t v7 = v30;
    uint64_t v22 = *(void *)(v30 + 8 * v10);
    if ((v22 & (1LL << v5)) == 0) {
      goto LABEL_28;
    }
    int v4 = v29;
    if (*(_DWORD *)(v31 + 36) != v29) {
      goto LABEL_29;
    }
    unint64_t v23 = v22 & (-2LL << (v5 & 0x3F));
    if (v23)
    {
      int64_t v8 = __clz(__rbit64(v23)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v28;
    }

    else
    {
      unint64_t v24 = v10 + 1;
      unint64_t v25 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v28;
      if (v10 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_21:
          int64_t v8 = __clz(__rbit64(v26)) + (v24 << 6);
        }

        else
        {
          while (v25 - 2 != v10)
          {
            unint64_t v26 = *(void *)(v27 + 8 * v10++);
            if (v26)
            {
              unint64_t v24 = v10 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }

    uint64_t v6 = v33 + 1;
    uint64_t v5 = v8;
    if (v33 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PeerValidationOperation.groupStart()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  [v0 dependOnBeforeGroupFinished:*(void *)&v0[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp]];
  if (qword_1002EAD90 != -1) {
    swift_once(&qword_1002EAD90, sub_1000A9B60);
  }
  uint64_t v5 = sub_100072DEC(v1, (uint64_t)qword_1002EAD98);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  uint64_t v6 = v0;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  int v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    int v23 = v9;
    unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v11;
    *(_DWORD *)unint64_t v10 = 136315138;
    uint64_t v27 = v11;
    uint64_t v12 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v6) + 0x98LL))();
    uint64_t v26 = v12;
    uint64_t v22 = v10 + 4;
    uint64_t v13 = sub_100072CC4(&qword_1002E0FA8);
    uint64_t v14 = sub_1000A9AA4( (unint64_t *)&unk_1002E0FB0,  &qword_1002E0FA8,  (uint64_t)&protocol conformance descriptor for Set<A>);
    uint64_t v24 = v2;
    uint64_t v15 = v14;
    unint64_t v16 = sub_10007F884();
    uint64_t v17 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v13, v15, v16);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease(v12);
    uint64_t v26 = sub_10007C22C(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22, v10 + 12);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v23, "Starting fetch of uri data for: %s", v10, 0xCu);
    uint64_t v20 = v25;
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v4, v1);
  }

  else
  {

    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v6) + 0xE8LL))(v21);
}

void sub_1000AA760()
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98LL);
  uint64_t v2 = v1();
  uint64_t v3 = v0;
  sub_1000ACE20(v2, v3);
  swift_bridgeObjectRelease(v2);

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xC8LL))();
  uint64_t v5 = v3;
  sub_1000AD2F8(v4, v5);
  swift_bridgeObjectRelease(v4);

  uint64_t v6 = v1();
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = swift_bridgeObjectRelease(v6);
  if (v7)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xF0LL))(v8);
  }

  else
  {
    if (qword_1002EAD90 != -1) {
      swift_once(&qword_1002EAD90, sub_1000A9B60);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100072DEC(v9, (uint64_t)qword_1002EAD98);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "got all entries from cache", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    id v14 = [v5 operationQueue];
    [v14 addOperation:*(void *)((char *)v5 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
  }

void sub_1000AA934()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98LL))();
  uint64_t v2 = v0;
  uint64_t v3 = sub_1000ACC18(v1);
  swift_bridgeObjectRelease(v1);

  id v4 =  [*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) idsOperations];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = swift_allocObject(&unk_10027EF80, 24LL, 7LL);
  *(void *)(v7 + 16) = v2;
  void v11[4] = sub_1000AD4F8;
  uint64_t v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  __int128 v11[2] = sub_1000AB14C;
  v11[3] = &unk_10027EF98;
  uint64_t v8 = _Block_copy(v11);
  uint64_t v9 = v12;
  uint64_t v10 = v2;
  swift_release(v9);
  [v4 fetchPeerVerificationInfos:isa application:v6 completionBlock:v8];
  _Block_release(v8);
  swift_unknownObjectRelease(v4);
}

void sub_1000AAAA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1002EAD90 != -1) {
      swift_once(&qword_1002EAD90, sub_1000A9B60);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v14, (uint64_t)qword_1002EAD98);
    swift_errorRetain(a2);
    uint64_t v15 = swift_errorRetain(a2);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v19 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v18 = 138412290;
      swift_errorRetain(a2);
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a2);
      aBlock = (void **)v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v56, v18 + 4, v18 + 12);
      uint64_t *v19 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "IDS failed with %@", v18, 0xCu);
      uint64_t v21 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v19, 1LL, v21);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v35 = (void *)_convertErrorToNSError(_:)(a2);
    [a3 setError:v35];

    id v36 = [a3 operationQueue];
    [v36 addOperation:*(void *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];

    swift_errorRelease(a2);
  }

  else
  {
    if (a1)
    {
      uint64_t v22 = *(uint64_t (**)(__n128))((swift_isaMask & *a3) + 0xB8LL);
      __n128 v23 = swift_bridgeObjectRetain(a1);
      uint64_t v24 = v22(v23);
      uint64_t v25 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0LL))(v24);
      uint64_t v26 = *(void *)(v25 + 16);
      uint64_t v27 = swift_bridgeObjectRelease(v25);
      uint64_t v28 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0x98LL))(v27);
      uint64_t v29 = *(void *)(v28 + 16);
      swift_bridgeObjectRelease(v28);
      if (v26 == v29)
      {
        id v53 = *(id *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue);
        uint64_t v30 = swift_allocObject(&unk_10027F070, 24LL, 7LL);
        *(void *)(v30 + 16) = a3;
        v56[3] = sub_1000ADC48;
        uint64_t v57 = v30;
        aBlock = _NSConcreteStackBlock;
        v56[0] = 1107296256LL;
        v56[1] = sub_1000A2010;
        v56[2] = &unk_10027F088;
        uint64_t v31 = _Block_copy(&aBlock);
        static DispatchQoS.unspecified.getter(a3);
        unint64_t v54 = _swiftEmptyArrayStorage;
        uint64_t v32 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v33 = sub_100072CC4(&qword_1002E1068);
        uint64_t v34 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v33, v34, v6, v32);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v31);
        _Block_release(v31);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        swift_release(v57);
        return;
      }

      if (qword_1002EAD90 != -1) {
        swift_once(&qword_1002EAD90, sub_1000A9B60);
      }
      uint64_t v43 = type metadata accessor for Logger(0LL);
      uint64_t v44 = sub_100072DEC(v43, (uint64_t)qword_1002EAD98);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.info.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        os_log_type_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "IDS didn't return all answers in peer query", v47, 2u);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      uint64_t v48 = (void *)objc_opt_self(&OBJC_CLASS___TransparencyError);
      id v49 = kTransparencyErrorInternal;
      NSString v50 = String._bridgeToObjectiveC()();
      id v51 =  [v48 errorWithDomain:v49 code:-353 underlyingError:0 userinfo:0 description:v50];

      uint64_t v52 = (void *)_convertErrorToNSError(_:)(v51);
      [a3 setError:v52];

      id v42 = [a3 operationQueue];
    }

    else
    {
      if (qword_1002EAD90 != -1) {
        swift_once(&qword_1002EAD90, sub_1000A9B60);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = sub_100072DEC(v37, (uint64_t)qword_1002EAD98);
      id v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "No results from IDS", v41, 2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      id v42 = [a3 operationQueue];
    }

    id v53 = v42;
    [v53 addOperation:*(void *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
  }

uint64_t sub_1000AB14C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_10007D178(0LL, &qword_1002E0FC0, &OBJC_CLASS___KTVerificationInfo_ptr);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  v7,  &protocol witness table for String);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

void sub_1000AB1E8()
{
  id v1 =  [*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) contextStore];
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98LL))();
  uint64_t v3 = sub_1000AC288(v2);
  swift_bridgeObjectRelease(v2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  uint64_t v7 = swift_allocObject(&unk_10027EFD0, 24LL, 7LL);
  *(void *)(v7 + 16) = v0;
  void v11[4] = sub_1000AD518;
  uint64_t v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  __int128 v11[2] = sub_1000AB360;
  v11[3] = &unk_10027EFE8;
  id v8 = _Block_copy(v11);
  uint64_t v9 = v12;
  uint64_t v10 = v0;
  swift_release(v9);
  [v1 queryForUris:isa application:v5 logClient:v6 userInitiated:1 cachedYoungerThan:0 completionHandler:v8];
  _Block_release(v8);
  swift_unknownObjectRelease(v1);
}

void sub_1000AB360(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_1000AB3B4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8LL))();
  uint64_t v2 = sub_1000AA118(v1);
  swift_bridgeObjectRelease(v1);
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002E0400);
  uint64_t v4 = sub_1000A9AA4( (unint64_t *)&qword_1002E16C0,  (uint64_t *)&unk_1002E0400,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v3, v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

void sub_1000AB474()
{
  id v1 =  [*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) contextStore];
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB0LL))();
  sub_10007D178(0LL, &qword_1002E0FC0, &OBJC_CLASS___KTVerificationInfo_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  uint64_t v6 = swift_allocObject(&unk_10027F020, 24LL, 7LL);
  *(void *)(v6 + 16) = v0;
  void v10[4] = sub_1000AD754;
  uint64_t v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_1000AB5FC;
  v10[3] = &unk_10027F038;
  uint64_t v7 = _Block_copy(v10);
  uint64_t v8 = v11;
  uint64_t v9 = v0;
  swift_release(v8);
  [v1 validatePeers:isa application:v4 fetchNow:1 logClient:v5 completionBlock:v7];
  _Block_release(v7);
  swift_unknownObjectRelease(v1);
}

uint64_t sub_1000AB5FC(uint64_t a1, uint64_t a2)
{
  NSString v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = sub_10007D178(0LL, &qword_1002E1050, &OBJC_CLASS___KTVerifierResult_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

void PeerValidationOperation.init()()
{
}

id PeerValidationOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeerValidationOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AB79C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000AB7B8(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1000AB7B8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100072CC4(&qword_1002E0870);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

Swift::Int sub_1000AB920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E1058);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  id v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    __n128 v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

void sub_1000ABC2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ABD88();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

id sub_1000ABD88()
{
  id v1 = v0;
  sub_100072CC4(&qword_1002E1058);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *id v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1000ABF38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100084604();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1000AC0C4(v8);
  uint64_t v16 = *v2;
  void *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t sub_1000AC0C4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            _OWORD *v16 = *v17;
            int64_t v2 = v6;
          }
        }

void *sub_1000AC288(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100072CC4(&qword_1002E0870);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  void v4[2] = v1;
  void v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_1000AC4F0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100079A50(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1000AC36C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_1000AC40C(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000AC4F0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    id result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000AC6EC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *sub_1000AC774(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000AB79C(0, v1, 0);
    uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___TransparencyApplication);
    unint64_t v4 = (void *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v6 = String._bridgeToObjectiveC()();
      NSString v7 = String._bridgeToObjectiveC()();
      id v8 = [v3 addApplicationPrefixForIdentifier:v6 uri:v7];

      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease(v5);

      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1) {
        sub_1000AB79C(v12 > 1, v13 + 1, 1);
      }
      v4 += 2;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      int64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
      void v14[4] = v9;
      void v14[5] = v11;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

id sub_1000AC8CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a5;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  char v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0LL);
  __chkstk_darwin(v12);
  int64_t v37 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo;
  unint64_t v18 = v5;
  *(void *)&v5[v17] = sub_1000A9C88((uint64_t)_swiftEmptyArrayStorage, &qword_1002E1098);
  uint64_t v19 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result;
  *(void *)&v18[v19] = sub_1000A9C88((uint64_t)_swiftEmptyArrayStorage, &qword_1002E1058);
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps] = a1;
  uint64_t v20 = &v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application];
  *(void *)uint64_t v20 = a2;
  *((void *)v20 + 1) = a3;
  swift_bridgeObjectRetain(a3);
  id v21 = a1;
  int64_t v22 = sub_1000AC774(a4);
  swift_bridgeObjectRelease(a4);
  uint64_t v23 = sub_100084DE4((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris] = v23;
  id v24 = objc_allocWithZone(&OBJC_CLASS___KTVerifier);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v26 = [v24 initWithApplication:v25];

  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier] = v26;
  id v27 = [objc_allocWithZone((Class)KTResultOperation) init];
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp] = v27;
  uint64_t v28 = v38;
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient] = v38;
  sub_10007D178(0LL, (unint64_t *)&qword_1002E0968, &OBJC_CLASS___OS_dispatch_queue_serial_ptr);
  uint64_t v29 = swift_unknownObjectRetain(v28);
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100073FE0( (unint64_t *)&unk_1002E1080,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  uint64_t v31 = sub_100072CC4(&qword_1002E0970);
  uint64_t v32 = sub_1000A9AA4( (unint64_t *)&qword_1002E1090,  &qword_1002E0970,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v33 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v31, v32, v12, v30);
  id v34 = v39;
  (*(void (**)(char *, void, uint64_t))(v40 + 104))( v39,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v41);
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000011LL,  0x800000010020FF60LL,  v16,  v33,  v34,  0LL);

  uint64_t v35 = (objc_class *)type metadata accessor for PeerValidationOperation();
  v42.receiver = v18;
  v42.super_class = v35;
  return objc_msgSendSuper2(&v42, "init");
}

void *sub_1000ACC18(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000AB79C(0, v1, 0);
  int64_t v3 = sub_1000AC36C(v2);
  int v5 = v4;
  char v7 = v6 & 1;
  uint64_t v23 = v2 + 56;
  id result = (void *)objc_opt_self(&OBJC_CLASS___TransparencyApplication);
  id v22 = result;
  uint64_t v21 = v2;
  while ((v3 & 0x8000000000000000LL) == 0 && v3 < 1LL << *(_BYTE *)(v2 + 32))
  {
    if (*(_DWORD *)(v2 + 36) != v5) {
      goto LABEL_14;
    }
    char v24 = v7;
    uint64_t v9 = *(void *)(*(void *)(v2 + 48) + 16 * v3 + 8);
    swift_bridgeObjectRetain(v9);
    NSString v10 = String._bridgeToObjectiveC()();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v22 stripApplicationPrefixForIdentifier:v10 uri:v11];

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v9);

    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1) {
      sub_1000AB79C(v16 > 1, v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    unint64_t v18 = &_swiftEmptyArrayStorage[2 * v17];
    void v18[4] = v13;
    void v18[5] = v15;
    uint64_t v2 = v21;
    id result = (void *)sub_1000AC40C(v3, v5, v24 & 1, v21);
    int64_t v3 = (int64_t)result;
    int v5 = v19;
    char v7 = v20 & 1;
    if (!--v1)
    {
      sub_1000ADC80((uint64_t)result, v19, v20 & 1);
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void sub_1000ACE20(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v40 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  id v8 = &selRef_setMetricsAccountID_;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v44 = (v6 - 1) & v6;
  int64_t v45 = v7;
  for (unint64_t i = __clz(__rbit64(v6)) | (v7 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    id v17 =  objc_msgSend( *(id *)((char *)a2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps),  "dataStore",  swift_bridgeObjectRetain(v15).n128_f64[0]);
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v17 verifierResultForPeer:v18 application:v19];

    if (qword_1002EAD90 != -1) {
      swift_once(&qword_1002EAD90, sub_1000A9B60);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v21, (uint64_t)qword_1002EAD98);
    id v22 = v20;
    swift_bridgeObjectRetain_n(v15, 2LL);
    id v23 = v22;
    char v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v41 = v3;
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v46[0] = v27;
      *(_DWORD *)uint64_t v26 = 134218242;
      id v28 = [v23 v8[488]];

      uint64_t v47 = (uint64_t)v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 4, v26 + 12);

      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(v15);
      uint64_t v47 = sub_10007C22C(v16, v15, v46);
      id v8 = &selRef_setMetricsAccountID_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cached response %lu for uri %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v29 = v26;
      uint64_t v3 = v41;
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    if ([v23 v8[488]] != (id)2)
    {
      uint64_t v30 = *(uint64_t (**)(uint64_t *, __n128))((swift_isaMask & *a2) + 0xD8LL);
      id v31 = v23;
      __n128 v32 = swift_bridgeObjectRetain(v15);
      uint64_t v33 = (void (*)(uint64_t *, void))v30(v46, v32);
      uint64_t v35 = v34;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
      uint64_t v47 = *v35;
      uint64_t *v35 = 0x8000000000000000LL;
      sub_1000ABC2C((uint64_t)v31, v16, v15, isUniquelyReferenced_nonNull_native);
      uint64_t v37 = *v35;
      uint64_t *v35 = v47;
      id v8 = &selRef_setMetricsAccountID_;
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v15);
      v33(v46, 0LL);
    }

    if (v3)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v15);
      return;
    }

    swift_bridgeObjectRelease(v15);
    unint64_t v6 = v44;
    int64_t v7 = v45;
    if (v44) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v10 = __OFADD__(v7, 1LL);
    int64_t v11 = v7 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_35;
    }

    if (v11 >= v40) {
      goto LABEL_33;
    }
    unint64_t v12 = *(void *)(v39 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v11 + 1;
      if (v11 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v39 + 8 * v13);
      if (v12) {
        goto LABEL_14;
      }
      int64_t v13 = v11 + 2;
      if (v11 + 2 >= v40) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v39 + 8 * v13);
      if (v12) {
        goto LABEL_14;
      }
      int64_t v13 = v11 + 3;
      if (v11 + 3 >= v40) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v39 + 8 * v13);
      if (v12)
      {
LABEL_14:
        int64_t v11 = v13;
        goto LABEL_15;
      }

      int64_t v38 = v11 + 4;
      if (v11 + 4 >= v40)
      {
LABEL_33:
        swift_release(a1);
        return;
      }

      unint64_t v12 = *(void *)(v39 + 8 * v38);
      v11 += 4LL;
      if (!v12) {
        break;
      }
    }

LABEL_35:
  __break(1u);
}

      uint64_t v26 = 0;
    }
  }

  else
  {
    if (a4) {
      *a4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  -114LL,  @"bag missing required field or type"));
    }
    if (qword_1002EEDA0 != -1) {
      dispatch_once(&qword_1002EEDA0, &stru_1002885A0);
    }
    uint64_t v27 = (void *)qword_1002EEDA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDA8, OS_LOG_TYPE_ERROR))
    {
      id v28 = v27;
      *(_DWORD *)buf = 136315138;
      int64_t v45 = object_getClassName(v7);
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "bag missing (or wrong type): %s", buf, 0xCu);
    }

    uint64_t v26 = 0;
  }

  return v26;
}

void sub_1000AD2F8(uint64_t a1, void *a2)
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v18 >= v7) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v22 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v22 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v22 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }

uint64_t sub_1000AD4D4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000AD4F8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000AD500(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AD510(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000AD518(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (!a1) {
    return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x108LL))();
  }
  swift_errorRetain(a1);
  if (qword_1002EAD90 != -1) {
    swift_once(&qword_1002EAD90, sub_1000A9B60);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v4, (uint64_t)qword_1002EAD98);
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)int64_t v8 = 138412290;
    swift_errorRetain(a1);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "KT query(forUris:) failed with %@", v8, 0xCu);
    uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  uint64_t v13 = (void *)_convertErrorToNSError(_:)(a1);
  [v2 setError:v13];

  id v14 = [v2 operationQueue];
  [v14 addOperation:*(void *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];

  return swift_errorRelease(a1);
}

void sub_1000AD754(unint64_t a1)
{
  uint64_t v2 = a1;
  unint64_t v54 = *(void **)(v1 + 16);
  if (a1 >> 62)
  {
LABEL_31:
    if (v2 < 0) {
      uint64_t v48 = v2;
    }
    else {
      uint64_t v48 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v48);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
  }

  if (v3)
  {
    uint64_t v4 = objc_opt_self(&OBJC_CLASS___TransparencyApplication);
    id v51 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v54) + 0xD8LL);
    id v52 = (id)v4;
    unint64_t v53 = v2 & 0xC000000000000001LL;
    uint64_t v5 = 4LL;
    uint64_t v49 = v3;
    uint64_t v50 = v2;
    do
    {
      if (v53) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
      }
      else {
        id v9 = *(id *)(v2 + 8 * v5);
      }
      uint64_t v10 = v9;
      if (__OFADD__(v5 - 4, 1LL))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }

      uint64_t v55 = v5 - 3;
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v10 uri];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v14 = v13;

      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      id v16 = [v52 addApplicationPrefixForIdentifier:v11 uri:v15];

      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v18 = v17;

      id v19 = v10;
      int64_t v20 = (void (*)(uint64_t *, void))v51(v57);
      uint64_t v22 = v21;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
      uint64_t v56 = *v22;
      uint64_t v24 = v56;
      *uint64_t v22 = 0x8000000000000000LL;
      unint64_t v26 = sub_100079A58(v2, v18);
      uint64_t v27 = *(void *)(v24 + 16);
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_29;
      }
      char v30 = v25;
      if (*(void *)(v24 + 24) >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v33 = (void *)v56;
          if ((v25 & 1) != 0) {
            goto LABEL_5;
          }
        }

        else
        {
          sub_1000ABD88();
          uint64_t v33 = (void *)v56;
          if ((v30 & 1) != 0) {
            goto LABEL_5;
          }
        }
      }

      else
      {
        sub_1000AB920(v29, isUniquelyReferenced_nonNull_native);
        unint64_t v31 = sub_100079A58(v2, v18);
        if ((v30 & 1) != (v32 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return;
        }

        unint64_t v26 = v31;
        uint64_t v33 = (void *)v56;
        if ((v30 & 1) != 0)
        {
LABEL_5:
          uint64_t v6 = v33[7];
          uint64_t v7 = 8 * v26;

          *(void *)(v6 + v7) = v19;
          goto LABEL_6;
        }
      }

      v33[(v26 >> 6) + 8] |= 1LL << v26;
      id v34 = (uint64_t *)(v33[6] + 16 * v26);
      uint64_t *v34 = v2;
      v34[1] = v18;
      *(void *)(v33[7] + 8 * v26) = v19;
      uint64_t v35 = v33[2];
      BOOL v36 = __OFADD__(v35, 1LL);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_30;
      }
      v33[2] = v37;
      swift_bridgeObjectRetain(v18);
LABEL_6:
      uint64_t v8 = *v22;
      *uint64_t v22 = (uint64_t)v33;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v18);
      v20(v57, 0LL);

      ++v5;
      uint64_t v2 = v50;
    }

    while (v55 != v49);
  }

  swift_bridgeObjectRelease(v2);
  if (qword_1002EAD90 != -1) {
    swift_once(&qword_1002EAD90, sub_1000A9B60);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v38, (uint64_t)qword_1002EAD98);
  uint64_t v39 = v54;
  int64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.info.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    objc_super v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)objc_super v42 = 136315138;
    v57[0] = v43;
    uint64_t v44 = (*(uint64_t (**)(void))((swift_isaMask & *v39) + 0x100LL))();
    unint64_t v46 = v45;
    uint64_t v56 = sub_10007C22C(v44, v45, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v46);

    _os_log_impl((void *)&_mh_execute_header, v40, v41, "KT query validate peer completed %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
  }

  id v47 = [v39 operationQueue];
  [v47 addOperation:*(void *)((char *)v39 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
}

uint64_t type metadata accessor for PeerValidationOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd23PeerValidationOperation);
}

uint64_t sub_1000ADC48()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xF8LL))();
}

uint64_t sub_1000ADC80(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1000ADCB0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EADB8);
  sub_100072DEC(v0, (uint64_t)qword_1002EADB8);
  return Logger.init(transparencyCategory:)(0x6461526F54706174LL, 0xEA00000000007261LL);
}

id sub_1000ADD10()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
}

id sub_1000ADD20()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag);
}

id KTTapToRadar.__allocating_init(dataStore:configBag:dewConfig:)(void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = sub_1000AF228(a1, a2, a3);

  return v8;
}

id KTTapToRadar.init(dataStore:configBag:dewConfig:)(void *a1, void *a2, void *a3)
{
  id v6 = sub_1000AF228(a1, a2, a3);

  return v6;
}

Swift::Bool __swiftcall KTTapToRadar.hasRecentlyFiledTTR(tapToRadarType:)(Swift::String tapToRadarType)
{
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  id v12 = (char *)&v23 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  NSString v15 = *(void **)(v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 getTapToRadarDate:v16];

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
    goto LABEL_5;
  }

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v18(v4, v12, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
LABEL_5:
    sub_10009691C((uint64_t)v4);
    char v20 = 0;
    return v20 & 1;
  }

  v18(v14, v4, v5);
  uint64_t v19 = Date.addingTimeInterval(_:)(kTapToRadarExpiry);
  Date.init()(v19);
  char v20 = static Date.> infix(_:_:)(v12, v9);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  v21(v12, v5);
  v21(v14, v5);
  return v20 & 1;
}

void sub_1000AE0C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

uint64_t sub_1000AE0E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10006D5A0(a2);
  id v8 = [a1 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  swift_bridgeObjectRelease(a2[1]);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = (uint64_t)[a1 code];
  id v12 = [a1 underlyingErrors];
  uint64_t v13 = sub_100072CC4(&qword_1002DF260);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v24 = a2;
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = 0LL;
    id v17 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v18 = *(void *)(v14 + 8 * v16 + 32);
      swift_errorRetain(v18);
      uint64_t v19 = (void *)_convertErrorToNSError(_:)(v18);
      sub_1000AE0E4();

      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
        id v17 = (void *)sub_1000AF020(0, v17[2] + 1LL, 1, (unint64_t)v17);
      }
      unint64_t v21 = v17[2];
      unint64_t v20 = v17[3];
      if (v21 >= v20 >> 1) {
        id v17 = (void *)sub_1000AF020(v20 > 1, v21 + 1, 1, (unint64_t)v17);
      }
      ++v16;
      void v17[2] = v21 + 1;
      sub_100085C04( (uint64_t)v7,  (uint64_t)v17 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v21,
        type metadata accessor for ErrorDomainCode);
      swift_errorRelease(v18);
    }

    while (v15 != v16);
    swift_bridgeObjectRelease_n(v14, 2LL);
    a2 = v24;
  }

  else
  {
    swift_bridgeObjectRelease(v14);
    id v17 = _swiftEmptyArrayStorage;
  }

  uint64_t result = swift_bridgeObjectRelease(a2[3]);
  a2[3] = (uint64_t)v17;
  return result;
}

id KTTapToRadar.presentTap(toRadarRemote:fromHandle:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v77 = (void *)a1;
  uint64_t v78 = a3;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v6);
  id v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SASTTR(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v75 = (uint64_t *)((char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v70 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (uint64_t *)((char *)&v70 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v76 = (char *)&v70 - v19;
  __chkstk_darwin(v18);
  unint64_t v21 = (unint64_t *)((char *)&v70 - v20);
  if (qword_1002EADB0 != -1) {
    swift_once(&qword_1002EADB0, sub_1000ADCB0);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100072DEC(v22, (uint64_t)qword_1002EADB8);
  uint64_t v24 = swift_bridgeObjectRetain_n(a4, 2LL);
  char v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v70 = a2;
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    id v72 = v17;
    BOOL v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v74 = v23;
    uint64_t v71 = v21;
    uint64_t v30 = v29;
    *(void *)&v79[0] = v29;
    *(_DWORD *)BOOL v28 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v81 = sub_10007C22C(v78, (unint64_t)a4, (uint64_t *)v79);
    a2 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "presentTapToRadarRemote %s", v28, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v31 = v30;
    unint64_t v21 = v71;
    uint64_t v23 = v74;
    swift_slowDealloc(v31, -1LL, -1LL);
    char v32 = v28;
    id v17 = v72;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  id result = [(id)objc_opt_self(TransparencyAnalytics) hasInternalDiagnostics];
  if ((_DWORD)result)
  {
    uint64_t v81 = (uint64_t)v77;
    unint64_t v82 = a2;
    uint64_t v80 = 0LL;
    memset(v79, 0, sizeof(v79));
    uint64_t v34 = sub_100072B9C((uint64_t)v77, a2);
    BinaryDecodingOptions.init()(v34);
    unint64_t v35 = sub_1000AF898();
    uint64_t v36 = (uint64_t)v76;
    Message.init<A>(serializedBytes:extensions:partial:options:)( &v81,  v79,  0LL,  v8,  v9,  &type metadata for Data,  v35,  &protocol witness table for Data);
    sub_100085C04(v36, (uint64_t)v21, type metadata accessor for SASTTR);
    sub_1000AF8E0((uint64_t)v21, (uint64_t)v17);
    uint64_t v37 = sub_1000AF8E0((uint64_t)v21, (uint64_t)v14);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    uint64_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      unint64_t v76 = (char *)swift_slowAlloc(64LL, -1LL);
      *(void *)&v79[0] = v76;
      *(_DWORD *)uint64_t v40 = 136315394;
      uint64_t v74 = v23;
      uint64_t v41 = (uint64_t)v17;
      uint64_t v42 = *v17;
      uint64_t v77 = a4;
      unint64_t v43 = *(void *)(v41 + 8);
      swift_bridgeObjectRetain(v43);
      uint64_t v81 = sub_10007C22C(v42, v43, (uint64_t *)v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v43);
      sub_100077CC0(v41, type metadata accessor for SASTTR);
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v44 = *((void *)v14 + 2);
      unint64_t v45 = *((void *)v14 + 3);
      swift_bridgeObjectRetain(v45);
      uint64_t v81 = sub_10007C22C(v44, v45, (uint64_t *)v79);
      a4 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease(v45);
      sub_100077CC0((uint64_t)v14, type metadata accessor for SASTTR);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v39,  "presentTapToRadarRemote [%s]%s",  (uint8_t *)v40,  0x16u);
      unint64_t v46 = v76;
      swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for SASTTR);
      sub_100077CC0((uint64_t)v14, type metadata accessor for SASTTR);
    }

    id v47 = v75;
    uint64_t v49 = *v21;
    unint64_t v48 = v21[1];
    uint64_t v50 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000LL) == 0) {
      uint64_t v50 = *v21 & 0xFFFFFFFFFFFFLL;
    }
    if (!v50) {
      goto LABEL_15;
    }
    uint64_t v51 = *(void *)((char *)v73 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_ttrConfig);
    *(void *)&v79[0] = *v21;
    *((void *)&v79[0] + 1) = v48;
    id v52 = *(uint64_t (**)(_OWORD *, __n128))(*(void *)v51 + 200LL);
    swift_retain(v51);
    __n128 v53 = swift_bridgeObjectRetain(v48);
    LOBYTE(v52) = v52(v79, v53);
    swift_bridgeObjectRelease(v48);
    swift_release(v51);
    if ((v52 & 1) != 0)
    {
      uint64_t v55 = v21[2];
      uint64_t v54 = v21[3];
      *(void *)&v79[0] = 0x203A6D6F7246LL;
      *((void *)&v79[0] + 1) = 0xE600000000000000LL;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v54);
      v56._countAndFlagsBits = v78;
      v56._object = a4;
      String.append(_:)(v56);
      v57._countAndFlagsBits = 2570LL;
      v57._object = (void *)0xE200000000000000LL;
      String.append(_:)(v57);
      uint64_t v58 = v21[4];
      unint64_t v59 = (void *)v21[5];
      swift_bridgeObjectRetain(v59);
      v60._countAndFlagsBits = v58;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v59);
      uint64_t v61 = *((void *)&v79[0] + 1);
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, void))((swift_isaMask & *v73)
                                                                                          + 0xA8LL))( v49,  v48,  v55,  v54,  *(void *)&v79[0],  *((void *)&v79[0] + 1));
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v61);
      uint64_t v62 = (uint64_t)v21;
    }

    else
    {
LABEL_15:
      uint64_t v63 = sub_1000AF8E0((uint64_t)v21, (uint64_t)v47);
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v79[0] = v67;
        *(_DWORD *)uint64_t v66 = 136315138;
        uint64_t v68 = *v47;
        unint64_t v69 = v47[1];
        swift_bridgeObjectRetain(v69);
        uint64_t v81 = sub_10007C22C(v68, v69, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v66 + 4, v66 + 12);
        swift_bridgeObjectRelease(v69);
        sub_100077CC0((uint64_t)v47, type metadata accessor for SASTTR);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "TTR configured off for: %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);
      }

      else
      {

        sub_100077CC0((uint64_t)v47, type metadata accessor for SASTTR);
      }

      uint64_t v62 = (uint64_t)v21;
    }

    return (id)sub_100077CC0(v62, type metadata accessor for SASTTR);
  }

  return result;
}

Swift::Void __swiftcall KTTapToRadar.clearTapToRadar(withUnique:)(Swift::String withUnique)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  id v3 = String._bridgeToObjectiveC()();
  [v2 storeTTR:0 withType:v3];
}

void KTTapToRadar.init()()
{
}

id KTTapToRadar.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTTapToRadar();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AF020(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100072CC4(&qword_1002E1168);
  uint64_t v11 = *(void *)(type metadata accessor for ErrorDomainCode(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for ErrorDomainCode(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000AF33C(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

id sub_1000AF228(void *a1, void *a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore] = a1;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag] = a2;
  sub_100072CC4((uint64_t *)&unk_1002E1170);
  type metadata accessor for DewTypeStrings();
  uint64_t v7 = v3;
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = variable initialization expression of KTSwiftDB.db();
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_ttrConfig] = sub_100081568( 0x526F54706154544BLL,  0xEC00000072616461LL,  v11,  (uint64_t)&_swiftEmptySetSingleton,  v10,  0xD000000000000011LL,  0x80000001002100A0LL);

  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for KTTapToRadar();
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_1000AF33C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for ErrorDomainCode(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1000AF454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  id v54 = a8;
  uint64_t v51 = a3;
  id v52 = a5;
  uint64_t v50 = type metadata accessor for BinaryEncodingOptions(0LL);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v48 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ErrorDomainCode(0LL);
  __chkstk_darwin(v15);
  id v17 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = type metadata accessor for IDSFailingDevice(0LL);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for SASTTR(0LL);
  __chkstk_darwin(v47);
  unint64_t v22 = (uint64_t *)((char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10006DDAC(v22);
  uint64_t v23 = v22[1];
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v23);
  *unint64_t v22 = a1;
  v22[1] = a2;
  uint64_t v24 = v22[3];
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v24);
  v22[2] = v51;
  v22[3] = a4;
  uint64_t v25 = v22[5];
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRelease(v25);
  v22[4] = v52;
  void v22[5] = a6;
  if (a7) {
    v22[6] = [a7 longLongValue];
  }
  if (v54) {
    v22[7] = [v54 longLongValue];
  }
  id v52 = v22;
  uint64_t v26 = *(void *)(a9 + 64);
  id v54 = (id)(a9 + 64);
  uint64_t v27 = 1LL << *(_BYTE *)(a9 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v30 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain(a9);
  int64_t v31 = 0LL;
  while (1)
  {
    if (v29)
    {
      unint64_t v32 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v33 = v32 | (v31 << 6);
      goto LABEL_9;
    }

    int64_t v39 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v39 >= v30) {
      goto LABEL_29;
    }
    unint64_t v40 = *((void *)v54 + v39);
    ++v31;
    if (!v40)
    {
      int64_t v31 = v39 + 1;
      if (v39 + 1 >= v30) {
        goto LABEL_29;
      }
      unint64_t v40 = *((void *)v54 + v31);
      if (!v40)
      {
        int64_t v31 = v39 + 2;
        if (v39 + 2 >= v30) {
          goto LABEL_29;
        }
        unint64_t v40 = *((void *)v54 + v31);
        if (!v40)
        {
          int64_t v31 = v39 + 3;
          if (v39 + 3 >= v30) {
            goto LABEL_29;
          }
          unint64_t v40 = *((void *)v54 + v31);
          if (!v40)
          {
            int64_t v31 = v39 + 4;
            if (v39 + 4 >= v30) {
              goto LABEL_29;
            }
            unint64_t v40 = *((void *)v54 + v31);
            if (!v40) {
              break;
            }
          }
        }
      }
    }

LABEL_31:
  __break(1u);
}

      if ((id)++v6 == v4)
      {
        uint64_t v4 = [v3 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  unint64_t v20 = 0LL;
  uint64_t v21 = &v20;
  unint64_t v22 = 0x2020000000LL;
  uint64_t v23 = 1;
  extensionMap = self->extensionMap_;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10012F444;
  v19[3] = &unk_100283170;
  void v19[4] = &v20;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](extensionMap, "enumerateKeysAndObjectsUsingBlock:", v19);
  id v17 = *((_BYTE *)v21 + 24) != 0;
  _Block_object_dispose(&v20, 8);
  return v17;
}

          return sub_10012DE18(a1);
        }

        uint64_t v14 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
      }

      else if ([a2 mapKeyDataType] == 14 && (v7 - 13) <= 3)
      {
        unint64_t v22 = objc_opt_class(&OBJC_CLASS___TransparencyGPBAutocreatedDictionary, v21);
        if ((objc_opt_isKindOfClass(v11, v22) & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v14 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
      }

      else
      {
        uint64_t v14 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
      }

  return v35;
}

                  uint64_t v85 = v15;
                  unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v85,  1LL));
                  uint64_t v34 = -[KTContextVerifier failSMTsIfOverMMD:proof:underlyingError:errorCode:analyticsData:]( self,  "failSMTsIfOverMMD:proof:underlyingError:errorCode:analyticsData:",  v33,  0LL,  0LL,  v21,  v62);

                  unint64_t v13 = (v34 ^ 1) & v68;
                  break;
                case 2u:
                case 5u:
                  uint64_t v21 = +[KTContextVerifier verifyDeviceMutation:mapLeaf:]( &OBJC_CLASS___KTContextVerifier,  "verifyDeviceMutation:mapLeaf:",  v20,  v63);
                  if (!v21) {
                    goto LABEL_32;
                  }
                  goto LABEL_31;
                case 3u:
                  if (qword_1002EEC30 != -1) {
                    dispatch_once(&qword_1002EEC30, &stru_1002868C0);
                  }
                  int64_t v31 = (os_log_s *)qword_1002EEC38;
                  if (os_log_type_enabled((os_log_t)qword_1002EEC38, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "WARNING: Skipping deprecated mutation type OPT_IN_OUT_MUTATION",  buf,  2u);
                  }

                  goto LABEL_32;
                case 6u:
                  unint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v20 optInOutMutation]);
                  uint64_t v21 = +[KTContextVerifier verifyOptInOutMutationMerged:mapLeaf:pendingAccountAdds:]( &OBJC_CLASS___KTContextVerifier,  "verifyOptInOutMutationMerged:mapLeaf:pendingAccountAdds:",  v32,  v63,  v61);

                  if (v21) {
                    goto LABEL_31;
                  }
                  goto LABEL_32;
                default:
LABEL_32:
                  if (qword_1002EEC30 != -1) {
                    dispatch_once(&qword_1002EEC30, &stru_1002868E0);
                  }
                  uint64_t v35 = (void *)qword_1002EEC38;
                  if (os_log_type_enabled((os_log_t)qword_1002EEC38, OS_LOG_TYPE_DEFAULT))
                  {
                    unint64_t v36 = v35;
                    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
                    id v38 = (void *)objc_claimAutoreleasedReturnValue([v15 uri]);
                    int64_t v39 = [v15 mutationMs];
                    *(_DWORD *)buf = 138544130;
                    uint64_t v78 = v37;
                    unint64_t v79 = 2160;
                    uint64_t v80 = 1752392040LL;
                    uint64_t v81 = 2112;
                    unint64_t v82 = v38;
                    uint64_t v83 = 2048;
                    id v84 = v39;
                    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "verified SMT inclusion for %{public}@/%{mask.hash}@ mutationMs %lld",  buf,  0x2Au);
                  }

                  unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
                  +[NSDate kt_currentTimeMs](&OBJC_CLASS___NSDate, "kt_currentTimeMs");
                  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  v41 - (double)(unint64_t)[v20 mutationMs]));
                  uint64_t v64 = v20;
                  uint64_t v43 = self;
                  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier applicationID](self, "applicationID"));
                  unint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"SmtMergeDelay",  v44));
                  [v40 logMetric:v42 withName:v45];

                  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
                  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v15 receiptTime]);
                  [v47 timeIntervalSinceNow];
                  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v48 * -1000.0));
                  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier applicationID](v43, "applicationID"));
                  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"SmtDeviceMergeDelay",  v50));
                  [v46 logMetric:v49 withName:v51];

                  self = v43;
                  unint64_t v20 = v64;

                  id v52 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
                  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier applicationID](self, "applicationID"));
                  id v54 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifySmtInclusionEvent",  v53));
                  [v52 logSuccessForEventNamed:v54];

                  [v15 setMergeResult:1];
                  unint64_t v13 = v68;
                  break;
              }

              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier dataStore](self, "dataStore"));
              unint64_t v70 = v12;
              Swift::String v56 = [v55 persistAndRefaultObject:v15 error:&v70];
              Swift::String v57 = v70;

              if ((v56 & 1) != 0)
              {
                uint64_t v12 = v57;
                uint64_t v9 = v65;
              }

              else
              {
                if (qword_1002EEC30 != -1) {
                  dispatch_once(&qword_1002EEC30, &stru_100286900);
                }
                uint64_t v58 = (os_log_s *)qword_1002EEC38;
                uint64_t v9 = v65;
                if (os_log_type_enabled((os_log_t)qword_1002EEC38, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v78 = v57;
                  _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "failed to save verified KTSMTs: %@",  buf,  0xCu);
                }

                if (v57)
                {
                  unint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier dataStore](self, "dataStore"));
                  [v59 reportCoreDataPersistEventForLocation:@"verifyKTSMTsMerged" underlyingError:v57];

                  uint64_t v12 = v57;
                }

                else
                {
                  uint64_t v12 = 0LL;
                }
              }

              unint64_t v11 = v66;
            }

            else
            {
              unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  v67,  -73LL,  v12,  @"Mutation failed to parse"));
              -[KTContextVerifier deleteSMT:error:](self, "deleteSMT:error:", v15, v29);

              if (qword_1002EEC30 != -1) {
                dispatch_once(&qword_1002EEC30, &stru_1002868A0);
              }
              int64_t v30 = (os_log_s *)qword_1002EEC38;
              if (os_log_type_enabled((os_log_t)qword_1002EEC38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v78 = v12;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Mutation failed to parse: %@",  buf,  0xCu);
              }

              unint64_t v13 = 0LL;
            }

            goto LABEL_48;
          }

          uint64_t v12 = v19;
        }

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  v67,  -72LL,  v12,  @"SMT from DB failed to parse"));
        -[KTContextVerifier deleteSMT:error:](self, "deleteSMT:error:", v15, v27);

        if (qword_1002EEC30 != -1) {
          dispatch_once(&qword_1002EEC30, &stru_100286880);
        }
        uint64_t v28 = (os_log_s *)qword_1002EEC38;
        if (os_log_type_enabled((os_log_t)qword_1002EEC38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v78 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "SMT from DB failed to parse: %@",  buf,  0xCu);
        }

        unint64_t v13 = 0LL;
LABEL_48:
        uint64_t v14 = (char *)v14 + 1;
      }

      while (v11 != v14);
      unint64_t v11 = [v9 countByEnumeratingWithState:&v73 objects:v86 count:16];
      if (!v11) {
        goto LABEL_52;
      }
    }
  }

  uint64_t v12 = 0LL;
  LOBYTE(v13) = 1;
LABEL_52:

  return v13 & 1;
}

unint64_t sub_1000AF898()
{
  unint64_t result = qword_1002E10B0;
  if (!qword_1002E10B0)
  {
    uint64_t v1 = type metadata accessor for SASTTR(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100247698, v1);
    atomic_store(result, (unint64_t *)&qword_1002E10B0);
  }

  return result;
}

uint64_t sub_1000AF8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SASTTR(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void _s13transparencyd12KTTapToRadarC010presentTapcD5Error6unique5title7messageySS_S2StF_0( uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([(id)objc_opt_self(TransparencyAnalytics) hasInternalDiagnostics])
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t))((swift_isaMask & *v2) + 0x90LL))(a1, a2);
    if ((v9 & 1) != 0)
    {
      if (qword_1002EADB0 != -1) {
        swift_once(&qword_1002EADB0, sub_1000ADCB0);
      }
      uint64_t v10 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v10, (uint64_t)qword_1002EADB8);
      uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = swift_slowAlloc(32LL, -1LL);
        uint64_t v25 = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_bridgeObjectRetain(a2);
        uint64_t v24 = sub_10007C22C(a1, a2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "presentTapToRadarError skipped since it was recently filed %s",  v14,  0xCu);
        swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }
    }

    else
    {
      uint64_t v16 = *(void **)((char *)v2 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
      Date.init()(v9);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      NSString v18 = String._bridgeToObjectiveC()();
      [v16 storeTTR:isa withType:v18];

      if (qword_1002EADB0 != -1) {
        swift_once(&qword_1002EADB0, sub_1000ADCB0);
      }
      uint64_t v19 = type metadata accessor for Logger(0LL);
      uint64_t v20 = sub_100072DEC(v19, (uint64_t)qword_1002EADB8);
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Platform not supported", v23, 2u);
        swift_slowDealloc(v23, -1LL, -1LL);
      }
    }
  }

uint64_t type metadata accessor for KTTapToRadar()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd12KTTapToRadar);
}

unint64_t sub_1000AFC6C()
{
  unint64_t result = qword_1002E1150;
  if (!qword_1002E1150)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002E1150);
  }

  return result;
}

unint64_t sub_1000AFCA8()
{
  unint64_t result = qword_1002E1158;
  if (!qword_1002E1158)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002E1158);
  }

  return result;
}

uint64_t sub_1000AFCEC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EADD8);
  sub_100072DEC(v0, (uint64_t)qword_1002EADD8);
  return Logger.init(transparencyCategory:)(0x63657264756F6C63LL, 0xEC0000007364726FLL);
}

uint64_t *sub_1000AFD50()
{
  return &qword_1002E1180;
}

uint64_t sub_1000AFD5C()
{
  uint64_t v0 = qword_1002E1180;
  swift_bridgeObjectRetain(off_1002E1188);
  return v0;
}

uint64_t sub_1000AFDAC(uint64_t a1, char *a2)
{
  uint64_t v4 = off_1002E1188;
  qword_1002E1180 = a1;
  off_1002E1188 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000AFE04(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000AFE44(uint64_t a1)
{
  unint64_t v2 = sub_1000B81B4();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000AFE6C(uint64_t a1)
{
  unint64_t v2 = sub_1000B81B4();
  return Error<>._code.getter(a1, v2);
}

unint64_t variable initialization expression of KTCloudRecords.types()
{
  return sub_1000AFEA4((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000AFEA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100072CC4(&qword_1002E1340);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v17 = a1;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100085CA8(v7, (uint64_t)&v18, &qword_1002E1378);
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    unint64_t result = sub_1000B60DC( v18,  v19,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_100085C90(&v20, v4[7] + 40 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = v17;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000AFFF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100072CC4(&qword_1002E0F28);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v17 = a1;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100085CA8(v7, (uint64_t)&v18, &qword_1002E1370);
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    unint64_t result = sub_1000B60DC( v18,  v19,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10007ADB4(&v20, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = v17;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000B0144(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4((uint64_t *)&unk_1002E1330);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    unint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    sub_100072B9C(v7, v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_1000B60DC(v7, v8, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1000B6154);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B0288()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice));
}

uint64_t sub_1000B0298()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn));
}

id sub_1000B02A8()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
}

uint64_t sub_1000B02B8()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo));
}

uint64_t sub_1000B02C8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1000B0310(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_1000B0368(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  void v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1000B03D8;
}

void sub_1000B03D8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_unknownObjectWeakAssign(*(void *)(*(void *)a1 + 32LL) + *(void *)(*(void *)a1 + 40LL), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

id sub_1000B0444()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context);
}

id sub_1000B0454()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database);
}

void *KTCloudRecords.__allocating_init(context:zone:database:hostInfo:delegate:)( void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return KTCloudRecords.init(context:zone:database:hostInfo:delegate:)(a1, a2, a3, a4, a5, a6);
}

void *KTCloudRecords.init(context:zone:database:hostInfo:delegate:)( void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types;
  id v13 = v6;
  *(void *)&v6[v12] = sub_1000AFEA4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v40 = &v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate];
  swift_unknownObjectWeakInit(&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate], 0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v15 = v14;
  id v16 = objc_allocWithZone(&OBJC_CLASS___CKRecordZoneID);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  id v19 = [v16 initWithZoneName:v17 ownerName:v18 databaseScope:2];

  uint64_t v39 = type metadata accessor for KTCloudDevice();
  swift_unknownObjectRetain(a6);
  id v20 = a1;
  id v21 = v19;
  swift_unknownObjectRetain(a5);
  os_log_type_t v22 = sub_100086CE0((uint64_t)v20, (uint64_t)v21, a5, a6);
  uint64_t v38 = type metadata accessor for KTCloudOptIn();
  id v23 = v20;
  id v24 = v21;
  swift_unknownObjectRetain(a5);
  swift_unknownObjectRetain(a6);
  id v25 = a4;
  uint64_t v26 = sub_100097788(v23, v24, v25, a5, a6);
  uint64_t v37 = type metadata accessor for KTCloudStaticKey();
  id v27 = v23;
  id v28 = v24;
  swift_unknownObjectRetain(a6);
  unint64_t v29 = sub_1000C1870((uint64_t)v27, (uint64_t)v28, a6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context] = v27;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID] = v28;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo] = a5;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice] = v22;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn] = v26;
  swift_beginAccess(v40, v45, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v40, a6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database] = v25;
  id v30 = v27;
  id v31 = v28;
  swift_unknownObjectRetain(a5);
  id v32 = v25;
  swift_retain(v22);
  swift_retain(v26);

  v44.receiver = v13;
  v44.super_class = (Class)type metadata accessor for KTCloudRecords();
  unint64_t v33 = objc_msgSendSuper2(&v44, "init");
  uint64_t v42 = v39;
  uint64_t v43 = &off_1002E0470;
  v41[0] = v22;
  uint64_t v34 = *(void (**)(void *))((swift_isaMask & *v33) + 0x188LL);
  swift_retain(v22);
  uint64_t v35 = v33;
  v34(v41);
  sub_10007EAFC(v41);
  uint64_t v42 = v38;
  uint64_t v43 = &off_1002E0AF8;
  v41[0] = v26;
  swift_retain(v26);
  v34(v41);
  sub_10007EAFC(v41);
  uint64_t v42 = v37;
  uint64_t v43 = &off_1002E16F0;
  v41[0] = v29;
  swift_retain(v29);
  v34(v41);
  swift_release(v29);
  swift_release(v26);
  swift_release(v22);

  swift_unknownObjectRelease(a5);
  swift_unknownObjectRelease(a6);
  sub_10007EAFC(v41);
  return v35;
}

uint64_t type metadata accessor for KTCloudRecords()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd14KTCloudRecords);
}

uint64_t KTCloudRecords.disableKTSyncabledKVSStore.getter()
{
  v2[3] = &type metadata for TransparencyFeatureFlags;
  void v2[4] = sub_1000B09BC();
  LOBYTE(v2[0]) = 0;
  char v0 = isFeatureEnabled(_:)(v2);
  sub_10007EAFC(v2);
  return v0 & 1;
}

unint64_t sub_1000B09BC()
{
  unint64_t result = qword_1002E11D0;
  if (!qword_1002E11D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TransparencyFeatureFlags,  &type metadata for TransparencyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1002E11D0);
  }

  return result;
}

unint64_t KTCloudRecords.sysdiagnose()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 280LL))();
  uint64_t v2 = sub_100072CC4(&qword_1002E11D8);
  uint64_t inited = swift_initStackObject(v2, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1002464F0;
  *(void *)(inited + 32) = 0x6E4974706FLL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 72) = sub_100072CC4(&qword_1002E11E0);
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v1;
  return sub_1000AFFF4(inited);
}

uint64_t KTCloudRecords.updateSelfCloudDevice(withPushToken:tbsRegistrationData:applications:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 248LL))();
}

uint64_t KTCloudRecords.cloudDeviceNeedUpdate(withPushToken:tbsRegistrationData:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(v4 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice);
  char v11 = *(void **)(v5 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo);
  if (v11)
  {
    id v12 = [v11 osVersion];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  char v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 256LL))( a1,  a2,  a3,  a4,  v13,  v15);
  swift_bridgeObjectRelease(v15);
  return v16 & 1;
}

uint64_t KTCloudRecords.fetchSyncedLoggableData(withPushToken:tbsRegistrationData:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 264LL))();
}

uint64_t KTCloudRecords.cloudKTDevices()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 272LL))();
}

uint64_t KTCloudRecords.cloudDevices()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 280LL))();
}

uint64_t KTCloudRecords.addDevice(_:clientData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B1A78(a1, a2, a3, a4, &OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice);
}

uint64_t KTCloudRecords.removeDevice(_:clientData:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 296LL))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.setOptInStateWithURIs(_:application:state:)( Swift::OpaquePointer _, Swift::String application, Swift::Bool state)
{
  (*(void (**)(void *, uint64_t, void *, Swift::Bool))(**(void **)(v3
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 352LL))( _._rawValue,  application._countAndFlagsBits,  application._object,  state);
}

uint64_t KTCloudRecords.addOptInState(withURI:smtTimestamp:application:state:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 360LL))();
}

uint64_t KTCloudRecords.getOptInState(withUri:application:)()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 248LL))();
  if (!result)
  {
    unint64_t v2 = sub_1000B167C();
    uint64_t v3 = swift_allocError(&type metadata for KTCloudRecordsError, v2, 0LL, 0LL);
    return swift_willThrow(v3);
  }

  return result;
}

unint64_t sub_1000B167C()
{
  unint64_t result = qword_1002E11E8;
  if (!qword_1002E11E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248F18, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_1002E11E8);
  }

  return result;
}

uint64_t KTCloudRecords.getAggregateOptInState(forApplication:)()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 264LL))();
  if (!result)
  {
    uint64_t v2 = type metadata accessor for KTError(0LL);
    uint64_t v3 = sub_100073FE0( (unint64_t *)&qword_1002E0F10,  type metadata accessor for KTError,  (uint64_t)&unk_100249B0C);
    swift_allocError(v2, v3, 0LL, 0LL);
    uint64_t v5 = swift_storeEnumTagMultiPayload(v4, v2, 10LL);
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t KTCloudRecords.getAllOptInStates()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 272LL))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.clearOptInState(forURI:application:)( Swift::String_optional forURI, Swift::String application)
{
}

uint64_t sub_1000B1A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return (*(uint64_t (**)(void))(**(void **)(v5 + *a5) + 288LL))();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptInIntent(forApplication:state:overwrite:)( KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::Bool state, Swift::Bool overwrite)
{
  (*(void (**)(uint64_t, void *, Swift::Bool, Swift::Bool))(**(void **)(v4
                                                                                  + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                                    + 328LL))( forApplication._countAndFlagsBits,  forApplication._object,  state,  overwrite);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.deleteOptInIntent(forApplication:)( KTGroupOperation *__return_ptr retstr, Swift::String forApplication)
{
  (*(void (**)(uint64_t, void *))(**(void **)(v2 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                          + 336LL))( forApplication._countAndFlagsBits,  forApplication._object);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptIn(forApplication:uris:state:)( KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::OpaquePointer uris, Swift::Bool state)
{
  (*(void (**)(uint64_t, void *, void *, Swift::Bool))(**(void **)(v4
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 344LL))( forApplication._countAndFlagsBits,  forApplication._object,  uris._rawValue,  state);
}

Swift::Void __swiftcall KTCloudRecords.clearDataStore(_:)(Swift::Bool a1)
{
  BOOL v2 = a1;
  (*(void (**)(void))(**(void **)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 456LL))();
}

Swift::Void __swiftcall KTCloudRecords.clearLocalCloudState()()
{
  uint64_t v1 = v0;
  (*(void (**)(void))((swift_isaMask & *v0) + 0x158LL))(0LL);
  type metadata accessor for KTCKZone();
  uint64_t v2 = sub_100078588((uint64_t)*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context));
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID), "zoneName"));
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 128LL))(v4, v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
}

Swift::Bool __swiftcall KTCloudRecords.havePendingRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v33, 0LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v21 = v2 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v22 = (unint64_t)(v3 + 63) >> 6;
  Swift::Bool result = swift_bridgeObjectRetain_n(v2, 2LL);
  int64_t v7 = 0LL;
  int v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v18 >= v22) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      int64_t v7 = v18 + 1;
      if (v18 + 1 >= v22) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v21 + 8 * v7);
      if (!v19)
      {
        int64_t v7 = v18 + 2;
        if (v18 + 2 >= v22) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v21 + 8 * v7);
        if (!v19)
        {
          int64_t v7 = v18 + 3;
          if (v18 + 3 >= v22) {
            goto LABEL_25;
          }
          unint64_t v19 = *(void *)(v21 + 8 * v7);
          if (!v19)
          {
            int64_t v7 = v18 + 4;
            if (v18 + 4 >= v22) {
              goto LABEL_25;
            }
            unint64_t v19 = *(void *)(v21 + 8 * v7);
            if (!v19) {
              break;
            }
          }
        }
      }
    }

void sub_1000B23E0(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v9 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_100080E5C(*(void *)(a2 + 56) + 40 * i, (uint64_t)v21);
    *(void *)&__int128 v20 = v17;
    *((void *)&v20 + 1) = v16;
    v18[0] = v20;
    v18[1] = v21[0];
    uint64_t v18[2] = v21[1];
    uint64_t v19 = v22;
    swift_bridgeObjectRetain(v16);
    sub_1000B2A28((uint64_t)&v23, (uint64_t)v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v23);
      sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
      swift_release(a2);
      return;
    }

    sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v9++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v9 >= v8) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (!v13) {
      break;
    }
LABEL_17:
    unint64_t v7 = (v13 - 1) & v13;
  }

  int64_t v14 = v9 + 1;
  if (v9 + 1 >= v8) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 2;
  if (v9 + 2 >= v8) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 3;
  if (v9 + 3 >= v8) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 4;
  if (v9 + 4 >= v8)
  {
LABEL_26:
    swift_release(a2);
    return;
  }

  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v9 = v14;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }

void sub_1000B25DC(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v9 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    sub_100080E5C(*(void *)(a2 + 56) + 40 * i, (uint64_t)v21);
    *(void *)&__int128 v20 = v16;
    *((void *)&v20 + 1) = v17;
    v18[0] = v20;
    v18[1] = v21[0];
    uint64_t v18[2] = v21[1];
    uint64_t v19 = v22;
    swift_bridgeObjectRetain(v17);
    sub_1000B31F0((uint64_t)&v23, (uint64_t)v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v23);
      sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
      swift_release(a2);
      return;
    }

    sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v8) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v9);
        if (!v13)
        {
          int64_t v9 = v12 + 3;
          if (v12 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v9);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t KTCloudRecords.pendingRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v24, 0LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n(v2, 2LL);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    int64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    sub_100080E5C(*(void *)(v2 + 56) + 40 * i, (uint64_t)v21);
    *(void *)&__int128 v20 = v16;
    *((void *)&v20 + 1) = v15;
    v18[0] = v20;
    v18[1] = v21[0];
    uint64_t v18[2] = v21[1];
    uint64_t v19 = v22;
    swift_bridgeObjectRetain(v15);
    sub_1000B2A28((uint64_t)&v23, (uint64_t)v18);
    sub_100077CFC((uint64_t)v18, (uint64_t *)&unk_1002E11F8);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v8++, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    if (!v12) {
      break;
    }
LABEL_17:
    unint64_t v6 = (v12 - 1) & v12;
  }

  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 4;
  if (v8 + 4 >= v7)
  {
LABEL_24:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v23;
  }

  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v8 = v13;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }

uint64_t sub_1000B2A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = v22;
  uint64_t v3 = v23;
  sub_100084C04(v21, v22);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  uint64_t v18[2] = v21;
  uint64_t v5 = sub_1000B2C84((void (*)(uint64_t *__return_ptr, id *))sub_1000B81F8, (uint64_t)v18, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  sub_1000B2E1C(v6, (uint64_t (*)(uint64_t, void, uint64_t))sub_1000B7880);
  if (qword_1002EADD0 != -1) {
    swift_once(&qword_1002EADD0, sub_1000AFCEC);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v7, (uint64_t)qword_1002EADD8);
  swift_bridgeObjectRetain(v5);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v12;
    *(_DWORD *)char v11 = 136315138;
    uint64_t v13 = sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v14 = Array.description.getter(v5, v13);
    unint64_t v16 = v15;
    uint64_t v24 = sub_10007C22C(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v5, 2LL);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "prepare pending records %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  return sub_10007EAFC(v21);
}

void *sub_1000B2C84(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v20 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      os_log_type_t v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      uint64_t v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v14 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v13 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }

      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }

    __break(1u);
LABEL_17:
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000B2E1C(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  uint64_t *v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    uint64_t *v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

uint64_t KTCloudRecords.deletedRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v24, 0LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(v2, 2LL);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v15 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }

uint64_t sub_1000B31F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = v21;
  uint64_t v3 = v22;
  sub_100084C04(v20, v21);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  swift_bridgeObjectRetain(v4);
  sub_1000B2E1C(v5, (uint64_t (*)(uint64_t, void, uint64_t))sub_1000B7A94);
  if (qword_1002EADD0 != -1) {
    swift_once(&qword_1002EADD0, sub_1000AFCEC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v6, (uint64_t)qword_1002EADD8);
  swift_bridgeObjectRetain(v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v11;
    *(_DWORD *)unint64_t v10 = 136315138;
    uint64_t v12 = sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v13 = Array.description.getter(v4, v12);
    unint64_t v15 = v14;
    uint64_t v17 = sub_10007C22C(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "prepare deleted records %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  return sub_10007EAFC(v20);
}

Class sub_1000B3424( char *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, __n128), unint64_t *a4, void *a5)
{
  os_log_type_t v9 = &a1[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types];
  swift_beginAccess(&a1[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types], v16, 0LL, 0LL);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = a1;
  __n128 v12 = swift_bridgeObjectRetain(v10);
  uint64_t v13 = a3(_swiftEmptyArrayStorage, v10, v12);

  swift_bridgeObjectRelease(v10);
  sub_10007D178(0LL, a4, a5);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  return isa;
}

uint64_t KTCloudRecords.cloudKitZones()()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E0AE0);
  uint64_t v2 = swift_allocObject(v1, 40LL, 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_1002487A0;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
  *(void *)(v2 + 32) = v3;
  uint64_t v6 = v2;
  specialized Array._endMutation()(v2);
  id v4 = v3;
  return v6;
}

uint64_t sub_1000B3608(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100084C04(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  uint64_t v8 = v7;
  sub_100080E5C((uint64_t)a1, (uint64_t)v11);
  swift_beginAccess(v2 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v10, 33LL, 0LL);
  sub_1000B36B0((uint64_t)v11, v6, v8);
  return swift_endAccess(v10);
}

uint64_t sub_1000B36B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_100085C90((__int128 *)a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1000B7210(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_100077CFC(a1, &qword_1002E1208);
    sub_1000B6ADC(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_100077CFC((uint64_t)v11, &qword_1002E1208);
  }

uint64_t sub_1000B3784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  uint64_t result = swift_beginAccess(v7, v12, 0LL, 0LL);
  uint64_t v9 = *v7;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v9);
    uint64_t v10 = sub_1000B60DC( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
    if ((v11 & 1) != 0)
    {
      sub_100080E5C(*(void *)(v9 + 56) + 40 * v10, a3);
    }

    else
    {
      *(void *)(a3 + 32) = 0LL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }

    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

Swift::Bool __swiftcall KTCloudRecords.updatedRecord(withCkrecord:)(CKRecord withCkrecord)
{
  uint64_t v3 = CKRecord.recordType.getter(withCkrecord.super.isa);
  unint64_t v5 = v4;
  (*(void (**)(__int128 *__return_ptr))((swift_isaMask & *v1) + 0x190LL))(&v16);
  if (v17)
  {
    swift_bridgeObjectRelease(v5);
    sub_100085C90(&v16, (uint64_t)v18);
    uint64_t v6 = v19;
    uint64_t v7 = v20;
    sub_100084C04(v18, v19);
    char v8 = (*(uint64_t (**)(Class, uint64_t, uint64_t))(v7 + 24))(withCkrecord.super.isa, v6, v7);
    sub_10007EAFC(v18);
  }

  else
  {
    sub_100077CFC((uint64_t)&v16, &qword_1002E1208);
    if (qword_1002EADD0 != -1) {
      swift_once(&qword_1002EADD0, sub_1000AFCEC);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v9, (uint64_t)qword_1002EADD8);
    swift_bridgeObjectRetain(v5);
    char v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      v18[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_bridgeObjectRetain(v5);
      *(void *)&__int128 v16 = sub_10007C22C(v3, v5, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, (char *)&v16 + 8, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v5, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "no store for ck record of type %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    char v8 = 0;
  }

  return v8 & 1;
}

Swift::Void __swiftcall KTCloudRecords.deleteRecord(withCkrecord:)(CKRecord withCkrecord)
{
  uint64_t v3 = CKRecord.recordType.getter(withCkrecord.super.isa);
  uint64_t v5 = v4;
  (*(void (**)(__int128 *__return_ptr, uint64_t))((swift_isaMask & *v1) + 0x190LL))(&v8, v3);
  swift_bridgeObjectRelease(v5);
  if (v9)
  {
    sub_100085C90(&v8, (uint64_t)v10);
    uint64_t v6 = v10[4];
    sub_100084C04(v10, v10[3]);
    id v7 = -[objc_class recordID](withCkrecord.super.isa, "recordID");
    (*(void (**)(void))(v6 + 32))();

    sub_10007EAFC(v10);
  }

  else
  {
    sub_100077CFC((uint64_t)&v8, &qword_1002E1208);
  }

Swift::Void __swiftcall KTCloudRecords.deleteRecordID(withCkrecordID:)(CKRecordID withCkrecordID)
{
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v3);
  sub_1000B7DC0(v4, (void (*)(uint64_t, uint64_t, _BYTE *, __n128))sub_1000B60D8);
  swift_bridgeObjectRelease(v3);
}

Swift::Void __swiftcall KTCloudRecords.recordUpdateCloudState(withType:records:newState:)( Swift::String withType, Swift::OpaquePointer records, Swift::String newState)
{
  object = newState._object;
  uint64_t countAndFlagsBits = newState._countAndFlagsBits;
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *))((swift_isaMask & *v3) + 0x190LL))( &v9,  withType._countAndFlagsBits,  withType._object);
  if (v10)
  {
    sub_100085C90(&v9, (uint64_t)v11);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    sub_100084C04(v11, v12);
    (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(v8 + 64))( records._rawValue,  countAndFlagsBits,  object,  v7,  v8);
    sub_10007EAFC(v11);
  }

  else
  {
    sub_100077CFC((uint64_t)&v9, &qword_1002E1208);
  }

uint64_t sub_1000B3F10(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a2 >> 60 != 15)
  {
    sub_10007D178(0LL, (unint64_t *)&unk_1002E1210, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v5 = sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    sub_100072B9C(a1, a2);
    uint64_t v2 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v5, a1, a2, v5);
    sub_10007EB9C(a1, a2);
  }

  return v2;
}

uint64_t sub_1000B3FD4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v10 = 0LL;
  id v3 = a1;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v10];
  id v5 = v10;
  if (!v4)
  {
    uint64_t v7 = v5;
    uint64_t v8 = _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    swift_errorRelease(v8);
    return 0LL;
  }

  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

void __swiftcall KTCloudRecords.updateCloudRecordsOperation(_:context:)( KTGroupOperation *__return_ptr retstr, KTOperationDependencies *_, NSManagedObjectContext context)
{
}

void *KTCloudRecords.evaluateKTLogData(_:application:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = v3;
  uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x130LL))();
  if (!v4)
  {
    uint64_t v10 = v9;
    if (qword_1002EADD0 != -1) {
      swift_once(&qword_1002EADD0, sub_1000AFCEC);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v11, (uint64_t)qword_1002EADD8);
    swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v12 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v36 = a2;
      uint64_t v15 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v35;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v16 = sub_10007D178(0LL, (unint64_t *)&qword_1002E1220, &OBJC_CLASS___KTOptInState_ptr);
      swift_bridgeObjectRetain(v10);
      os_log_type_t type = v14;
      uint64_t v18 = Array.description.getter(v17, v16);
      uint64_t v37 = a3;
      unint64_t v20 = v19;
      swift_bridgeObjectRelease(v10);
      uint64_t v38 = sub_10007C22C(v18, v20, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(v10, 2LL);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(a1);
      uint64_t v21 = sub_100072CC4(&qword_1002E1228);
      uint64_t v22 = Dictionary.description.getter(a1, &type metadata for String, v21, &protocol witness table for String);
      unint64_t v24 = v23;
      swift_bridgeObjectRelease(a1);
      uint64_t v25 = v22;
      a3 = v37;
      uint64_t v38 = sub_10007C22C(v25, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v24);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  type,  "KTCloudRecords: evaluateKTLogData: optInRecords: %s uriToSMT: %s",  (uint8_t *)v15,  0x16u);
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      uint64_t v26 = v15;
      a2 = v36;
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease_n(v10, 2LL);
    }

    type metadata accessor for KTOptIOValidator();
    swift_bridgeObjectRetain(a1);
    __int128 v27 = KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(v10, a1);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(**(void **)((char *)v5
                                                                    + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                      + 312LL))( a2,  a3);
    if (v28 != 2)
    {
      uint64_t v29 = v28 & 1;
      __int128 v30 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v31 = static os_log_type_t.info.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v32 = 67109120;
        LODWORD(v40) = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v32 + 4, v32 + 8);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "KTCloudRecords: intented state %{BOOL}d", v32, 8u);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v27) + 0xA0LL))(v29);
    }

    id v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v27) + 0xB8LL))(a2, a3);
  }

  return v3;
}

BOOL KTCloudRecords.enforceCKOptInRecords.getter()
{
  v2[3] = &type metadata for TransparencyFeatureFlags;
  void v2[4] = sub_1000B09BC();
  LOBYTE(v2[0]) = 1;
  char v0 = isFeatureEnabled(_:)(v2);
  sub_10007EAFC(v2);
  return (v0 & 1) == 0;
}

void KTCloudRecords.init()()
{
}

id KTCloudRecords.__deallocating_deinit()
{
  return sub_1000B605C(type metadata accessor for KTCloudRecords);
}

void sub_1000B485C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_1000B48E0()
{
  uint64_t v5 = sub_100073FE0( (unint64_t *)&unk_1002E1230,  (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator,  (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 81) & 1) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
    *(_OWORD *)(v4 - 12_Block_object_dispose(va, 8) = xmmword_1002464F0;
    do
    {
      char v8 = *(_BYTE *)(v4 - 82);
      uint64_t v9 = sub_100072CC4((uint64_t *)&unk_1002E0440);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 128);
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      uint64_t v11 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))( 1479684133LL,  0xE400000000000000LL,  v10);
      uint64_t v13 = v12;
      *(void *)(v4 - 104) = v6;
      *(void *)(v4 - 96) = v7;
      swift_bridgeObjectRetain(v7);
      v14._uint64_t countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);
      uint64_t v6 = *(void *)(v4 - 104);
      unint64_t v7 = *(void *)(v4 - 96);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
    }

    while (*(_BYTE *)(v4 - 81) != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 136) + 8LL))(v2, v0);
  return v6;
}

uint64_t sub_1000B4A64()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records));
}

uint64_t sub_1000B4A74()
{
  unint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000B4AB8(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

uint64_t (*sub_1000B4B00(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t variable initialization expression of KTCloudRecordsCache.uriVRFHash()
{
  return 0LL;
}

uint64_t sub_1000B4B50()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)v1;
  sub_10007EB54(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000B4BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_10007EB9C(v6, v7);
}

uint64_t (*sub_1000B4C04(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000B4C48()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000B4C90(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000B4CE0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id KTCloudRecordsCache.__allocating_init(records:)(uint64_t a1)
{
  uint64_t v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  uint64_t v4 = &v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)uint64_t v4 = xmmword_100248E90;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess(v4, v11, 1LL, 0LL);
  uint64_t v5 = *(void *)v4;
  unint64_t v6 = *((void *)v4 + 1);
  *(_OWORD *)uint64_t v4 = xmmword_100248E90;
  unint64_t v7 = v3;
  swift_unknownObjectRetain(a1);
  sub_10007EB9C(v5, v6);
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_1000B0144((uint64_t)_swiftEmptyArrayStorage);

  v10.receiver = v7;
  v10.super_class = v1;
  id v8 = objc_msgSendSuper2(&v10, "init");
  swift_unknownObjectRelease(a1);
  return v8;
}

id KTCloudRecordsCache.init(records:)(uint64_t a1)
{
  id v2 = sub_1000B7F88(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t KTCloudRecordsCache.setWithUriVRFHash(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, unint64_t))((swift_isaMask & *v2) + 0x90LL);
  sub_100072B9C(a1, a2);
  v5(a1, a2);
  unint64_t v6 = sub_1000B0144((uint64_t)_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(unint64_t))((swift_isaMask & *v2) + 0xA8LL))(v6);
}

id KTCloudRecordsCache.disableKTSyncabledKVSStore.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records) disableKTSyncabledKVSStore];
}

id KTCloudRecordsCache.fetchSyncedLoggableData(byPushToken:registrationData:)()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v3 = Data._bridgeToObjectiveC()().super.isa;
  id v4 = [v1 fetchSyncedLoggableDataWithPushToken:isa tbsRegistrationData:v3];

  return v4;
}

void KTCloudRecordsCache.fetchSyncedLoggableData(byDeviceIdHash:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0LL);
  uint64_t v6 = sub_100072B9C(a1, a2);
  uint64_t v7 = v5(v6);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = sub_1000B60DC(a1, a2, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1000B6154);
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v7 + 56) + 8 * v8));
      uint64_t v10 = v7;
LABEL_26:
      swift_bridgeObjectRelease(v10);
      sub_100072BE0(a1, a2);
      return;
    }
  }

  swift_bridgeObjectRelease(v7);
  uint64_t v11 = sub_100072BE0(a1, a2);
  if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70LL))(v11) & 1) == 0)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x78LL))(1LL);
    if (qword_1002EADD0 != -1) {
      swift_once(&qword_1002EADD0, sub_1000AFCEC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_100072DEC(v17, (uint64_t)qword_1002EADD8);
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "pulling all devices from CloudRecords for this account",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    id v22 =  [*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records) cloudKTDevices];
    uint64_t v23 = sub_10007D178(0LL, &qword_1002E1260, &OBJC_CLASS___KTLoggableData_ptr);
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0) {
        uint64_t v34 = v24;
      }
      else {
        uint64_t v34 = v24 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v24);
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v24);
      if (v25) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v25)
      {
LABEL_16:
        if (v25 < 1)
        {
          __break(1u);
          return;
        }

        uint64_t v26 = *(void (**)(void))((swift_isaMask & *v2) + 0xE0LL);
        swift_bridgeObjectRetain(v24);
        for (uint64_t i = 0LL; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001LL) != 0) {
            id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
          }
          else {
            id v28 = *(id *)(v24 + 8 * i + 32);
          }
          uint64_t v29 = v28;
          v26();
        }

        swift_bridgeObjectRelease_n(v24, 2LL);
        goto LABEL_23;
      }
    }

    uint64_t v35 = swift_bridgeObjectRelease(v24);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "no records", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    return;
  }

  if (qword_1002EADD0 != -1) {
    swift_once(&qword_1002EADD0, sub_1000AFCEC);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100072DEC(v12, (uint64_t)qword_1002EADD8);
  Swift::String v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "already cached, skipping refetch", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

LABEL_23:
  uint64_t v30 = sub_100072B9C(a1, a2);
  uint64_t v31 = v5(v30);
  if (*(void *)(v31 + 16))
  {
    uint64_t v32 = sub_1000B60DC(a1, a2, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1000B6154);
    if ((v33 & 1) != 0)
    {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v31 + 56) + 8 * v32));
      uint64_t v10 = v31;
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease(v31);
  sub_100072BE0(a1, a2);
}

id sub_1000B5694(void *a1)
{
  uint64_t v29 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v3 = *(void *)(v29 - 8);
  uint64_t v4 = __chkstk_darwin(v29);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id result = [a1 deviceID];
  if (result)
  {
    uint64_t v12 = result;
    id v28 = v6;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    unint64_t v15 = v14;

    (*(void (**)(void *))((swift_isaMask & *v1) + 0xE8LL))(a1);
    if (qword_1002EADD0 != -1) {
      swift_once(&qword_1002EADD0, sub_1000AFCEC);
    }
    uint64_t v16 = sub_100072DEC(v7, (uint64_t)qword_1002EADD8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
    sub_100072B9C(v13, v15);
    id v17 = a1;
    sub_100072B9C(v13, v15);
    id v18 = v17;
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    int v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      uint64_t v25 = v3;
      uint64_t v26 = v19;
      int v24 = v20;
      uint64_t v21 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = swift_slowAlloc(64LL, -1LL);
      uint64_t v30 = v23;
      __int128 v27 = v21;
      *uint64_t v21 = 136315394;
      __asm { BR              X9 }
    }

    sub_100072BE0(v13, v15);
    sub_100072BE0(v13, v15);
    sub_100072BE0(v13, v15);

    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }

  return result;
}

uint64_t sub_1000B5D88(void *a1)
{
  id v2 = v1;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [a1 computeHashesForSalt:isa];

    id v9 = [a1 deviceIdHash];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
      unint64_t v13 = v12;

      unint64_t v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0LL);
      uint64_t v15 = sub_100072B9C(v11, v13);
      uint64_t v16 = v14(v15);
      if (*(void *)(v16 + 16)
        && (uint64_t v17 = sub_1000B60DC( v11,  v13,  (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:),  sub_1000B6154),  (v18 & 1) != 0))
      {
        unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain(v19);
      }

      else
      {
        unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
      }

      swift_bridgeObjectRelease(v16);
      sub_100072BE0(v11, v13);
      uint64_t v33 = v19;
      id v20 = a1;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v22 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v21 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v22 >= v21 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1LL);
      }
      uint64_t v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23);
      uint64_t v24 = v33;
      uint64_t v25 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v2) + 0xB0LL);
      sub_100072B9C(v11, v13);
      uint64_t v26 = (void (*)(_BYTE *, void))v25(v32);
      id v28 = v27;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
      uint64_t v31 = *v28;
      uint64_t *v28 = 0x8000000000000000LL;
      sub_1000B7364(v24, v11, v13, isUniquelyReferenced_nonNull_native);
      uint64_t v30 = *v28;
      uint64_t *v28 = v31;
      swift_bridgeObjectRelease(v30);
      sub_100072BE0(v11, v13);
      v26(v32, 0LL);
      sub_10007EB9C(v6, v7);
      return sub_100072BE0(v11, v13);
    }

    else
    {
      return sub_10007EB9C(v6, v7);
    }
  }

  return result;
}

void KTCloudRecordsCache.init()()
{
}

id KTCloudRecordsCache.__deallocating_deinit()
{
  return sub_1000B605C(type metadata accessor for KTCloudRecordsCache);
}

id sub_1000B605C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000B60DC( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

uint64_t sub_1000B6154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

double sub_1000B6ADC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_1000B60DC( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000B74E4();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100085C90((__int128 *)(*(void *)(v12 + 56) + 40 * v9), a3);
    sub_100083710(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

Swift::Int sub_1000B6BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E1340);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    id v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

Swift::Int sub_1000B6F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4((uint64_t *)&unk_1002E1330);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v34 = v3;
  uint64_t v35 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v35 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v35 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v34;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v35 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

void sub_1000B7210(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000B60DC( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        unint64_t v19 = (void *)(v18[7] + 40 * v12);
        sub_10007EAFC(v19);
        sub_100085C90(a1, (uint64_t)v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000B74E4();
      goto LABEL_7;
    }

    sub_1000B6BE4(v15, a4 & 1);
    uint64_t v20 = sub_1000B60DC( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100079AF8);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100083BA0(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000B7364(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000B60DC(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1000B6154);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000B76CC();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void sub_1000B74E4()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E1340);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return;
  }

  BOOL v25 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_1000B76CC()
{
  uint64_t v1 = v0;
  sub_100072CC4((uint64_t *)&unk_1002E1330);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

uint64_t sub_1000B7880(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000744A8((unint64_t *)&unk_1002E1360, &qword_1002E1358);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100072CC4(&qword_1002E1358);
          int64_t v13 = sub_1000B7CA8(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000B7A94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000744A8(&qword_1002E1350, &qword_1002E1348);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100072CC4(&qword_1002E1348);
          int64_t v13 = sub_1000B7D00(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void (*sub_1000B7CA8(void (**a1)(id *), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000B7D54(v6, a2, a3);
  return sub_1000B7CFC;
}

void (*sub_1000B7D00(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000A44F0(v6, a2, a3);
  return sub_1000B7CFC;
}

void (*sub_1000B7D54(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000B8264;
  }

  __break(1u);
  return result;
}

void sub_1000B7DC0(uint64_t a1, void (*a2)(uint64_t, uint64_t, _BYTE *, __n128))
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v15 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v20 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v20 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }

id sub_1000B7F88(uint64_t a1)
{
  v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  uint64_t v3 = &v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)uint64_t v3 = xmmword_100248E90;
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess(v3, v9, 1LL, 0LL);
  uint64_t v4 = *(void *)v3;
  unint64_t v5 = *((void *)v3 + 1);
  *(_OWORD *)uint64_t v3 = xmmword_100248E90;
  unint64_t v6 = v1;
  swift_unknownObjectRetain(a1);
  sub_10007EB9C(v4, v5);
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_1000B0144((uint64_t)_swiftEmptyArrayStorage);

  v8.receiver = v6;
  v8.super_class = (Class)type metadata accessor for KTCloudRecordsCache();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t type metadata accessor for KTCloudRecordsCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd19KTCloudRecordsCache);
}

unint64_t sub_1000B8084()
{
  unint64_t result = qword_1002E1268;
  if (!qword_1002E1268)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248EB0, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_1002E1268);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KTCloudRecordsError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000B810C + 4 * byte_100248EA4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000B812C + 4 * byte_100248EA9[v4]))();
  }
}

_BYTE *sub_1000B810C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000B812C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B8134(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B813C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B8144(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B814C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KTCloudRecordsError()
{
  return &type metadata for KTCloudRecordsError;
}

uint64_t sub_1000B8168(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  sub_100084C04(a3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v6);
}

unint64_t sub_1000B81B4()
{
  unint64_t result = qword_1002E1328;
  if (!qword_1002E1328)
  {
    unint64_t result = swift_getWitnessTable(&unk_100248FA0, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_1002E1328);
  }

  return result;
}

uint64_t sub_1000B81F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v5 = *a1;
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  sub_100084C04(v4, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 72))(v5, v6, v7);
  *a2 = result;
  return result;
}

uint64_t *sub_1000B8268()
{
  return &qword_1002E1380;
}

uint64_t sub_1000B8274()
{
  uint64_t v0 = qword_1002E1380;
  swift_bridgeObjectRetain(off_1002E1388);
  return v0;
}

uint64_t sub_1000B8328(uint64_t a1, void *a2)
{
  uint64_t v4 = off_1002E1388;
  qword_1002E1380 = a1;
  off_1002E1388 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000B83E0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000B8420()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps);
}

uint64_t sub_1000B8430()
{
  uint64_t result = (uint64_t) [*(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps) cloudRecords];
  if (result)
  {
    uint64_t v2 = (void *)result;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v4 = Data._bridgeToObjectiveC()().super.isa;
    id v5 = [v2 fetchSyncedLoggableDataWithPushToken:isa tbsRegistrationData:v4];
    swift_unknownObjectRelease(v2);

    if (v5)
    {

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

id sub_1000B84F8()
{
  id v1 = [*(id *)&v0[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] cloudRecords];
  swift_unknownObjectRelease(v1);
  if (v1)
  {
    uint64_t v2 = swift_allocObject(&unk_10027F208, 24LL, 7LL);
    *(void *)(v2 + 16) = v0;
    uint64_t v3 = v0;
    NSString v4 = String._bridgeToObjectiveC()();
    void v7[4] = sub_1000B8A18;
    uint64_t v8 = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256LL;
    uint64_t v7[2] = sub_10009AA34;
    v7[3] = &unk_10027F220;
    id v5 = _Block_copy(v7);
    id v1 = [(id)objc_opt_self(KTResultOperation) named:v4 withBlockTakingSelf:v5];

    _Block_release(v5);
    swift_release(v8);
  }

  return v1;
}

uint64_t sub_1000B8614(char *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v43 - v6;
  uint64_t v8 = swift_allocObject(&unk_10027F258, 24LL, 7LL);
  *(void *)(v8 + 16) = _swiftEmptyArrayStorage;
  Logger.init(subsystem:category:)(0x5264756F6C43544BLL, 0xED000064726F6365LL, 0x7075786966LL, 0xE500000000000000LL);
  id v49 = *(id *)&a1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps];
  id v9 = [v49 smDataStore];
  uint64_t v10 = swift_allocObject(&unk_10027F280, 32LL, 7LL);
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = v8;
  uint64_t v62 = sub_1000B9344;
  uint64_t v63 = v10;
  aBlock = _NSConcreteStackBlock;
  uint64_t v59 = 1107296256LL;
  Swift::String v60 = sub_1000B908C;
  uint64_t v61 = &unk_10027F298;
  uint64_t v11 = _Block_copy(&aBlock);
  uint64_t v12 = v63;
  uint64_t v13 = a1;
  uint64_t v45 = v8;
  swift_retain(v8);
  swift_release(v12);
  [v9 fetchDeviceSignature:0 complete:v11];
  _Block_release(v11);
  swift_unknownObjectRelease(v9);
  swift_beginAccess(v8 + 16, v57, 0LL, 0LL);
  uint64_t v14 = *(void *)(v8 + 16);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v51 = v2;
    __int128 v19 = (uint64_t *)(v14 + ((v18 + 32) & ~v18));
    uint64_t v47 = *(void *)(v17 + 72);
    uint64_t v48 = v16;
    uint64_t v46 = v4 + 7;
    uint64_t v44 = v14;
    *(void *)&double v20 = swift_bridgeObjectRetain(v14).n128_u64[0];
    do
    {
      uint64_t v21 = *v19;
      unint64_t v52 = v19[1];
      id v56 = objc_msgSend(v49, "smDataStore", v20);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v54 = Data._bridgeToObjectiveC()().super.isa;
      Class v53 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v22 = v15;
      int64_t v24 = v50;
      uint64_t v23 = v51;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v50, v7, v51);
      uint64_t v25 = *(unsigned __int8 *)(v3 + 80);
      uint64_t v26 = (v25 + 16) & ~v25;
      char v27 = v7;
      unint64_t v28 = (v46 + v26) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v29 = v3;
      uint64_t v30 = swift_allocObject(&unk_10027F2D0, v28 + 16, v25 | 7);
      uint64_t v31 = v24;
      uint64_t v32 = v22;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30 + v26, v31, v23);
      uint64_t v33 = (uint64_t *)(v30 + v28);
      uint64_t v7 = v27;
      unint64_t v34 = v52;
      uint64_t *v33 = v21;
      v33[1] = v34;
      uint64_t v62 = sub_1000B9400;
      uint64_t v63 = v30;
      aBlock = _NSConcreteStackBlock;
      uint64_t v59 = 1107296256LL;
      Swift::String v60 = sub_1000AB360;
      uint64_t v61 = &unk_10027F2E8;
      uint64_t v35 = _Block_copy(&aBlock);
      uint64_t v36 = v63;
      sub_100072B9C(v21, v34);
      swift_release(v36);
      Class v38 = isa;
      id v37 = v56;
      Class v40 = v53;
      Class v39 = v54;
      [v56 uploadedDeviceSignature:isa tbs:v54 uploadedAt:v53 complete:v35];
      int64_t v41 = v35;
      uint64_t v3 = v29;
      _Block_release(v41);
      swift_unknownObjectRelease(v37);

      __int128 v19 = (uint64_t *)((char *)v19 + v47);
      uint64_t v15 = v32 - 1;
    }

    while (v15);
    swift_bridgeObjectRelease(v44);
    uint64_t v2 = v51;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  return swift_release(v45);
}

uint64_t sub_1000B89F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000B8A18()
{
  return sub_1000B8614(*(char **)(v0 + 16));
}

void sub_1000B8A20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    sub_1000B8DA0(v10);
    uint64_t v12 = v11;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        uint64_t v36 = v11;
      }
      else {
        uint64_t v36 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v36);
      if (v13) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v11);
      if (v13)
      {
LABEL_4:
        if (v13 < 1)
        {
          __break(1u);
          return;
        }

        uint64_t v14 = 0LL;
        id v37 = v7;
        Class v38 = (unint64_t *)(a3 + 16);
        unint64_t v46 = v12 & 0xC000000000000001LL;
        uint64_t v41 = v13;
        uint64_t v42 = v12;
        do
        {
          if (v46) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
          }
          else {
            id v15 = *(id *)(v12 + 8 * v14 + 32);
          }
          uint64_t v16 = v15;
          id v17 = objc_msgSend(v15, "tbsKTIDSRegistrationData", v37);
          uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
          unint64_t v20 = v19;

          id v21 = [v16 pushToken];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
            unint64_t v25 = v24;

            uint64_t v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))((swift_isaMask & *v45)
                                                                                                  + 0x58LL))( v23,  v25,  v18,  v20);
            if ((v26 & 1) != 0)
            {
              char v27 = v43;
              Date.init()(v26);
              unint64_t v28 = v27;
              uint64_t v29 = v8;
              (*(void (**)(char *, char *, uint64_t))(v44 + 16))((char *)v7 + *(int *)(v40 + 24), v28, v8);
              uint64_t *v7 = v23;
              v7[1] = v25;
              uint64_t v7[2] = v18;
              v7[3] = v20;
              uint64_t v30 = v38;
              swift_beginAccess(v38, v47, 33LL, 0LL);
              unint64_t v31 = *v30;
              sub_100072B9C(v23, v25);
              sub_100072B9C(v18, v20);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
              unint64_t *v30 = v31;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v31 = sub_1000B95D8(0, *(void *)(v31 + 16) + 1LL, 1, v31);
                unint64_t *v38 = v31;
              }

              unint64_t v34 = *(void *)(v31 + 16);
              unint64_t v33 = *(void *)(v31 + 24);
              if (v34 >= v33 >> 1)
              {
                unint64_t v31 = sub_1000B95D8(v33 > 1, v34 + 1, 1, v31);
                unint64_t *v38 = v31;
              }

              *(void *)(v31 + 16) = v34 + 1;
              uint64_t v35 = v31
              uint64_t v7 = v37;
              sub_1000B981C((uint64_t)v37, v35);
              swift_endAccess(v47);
              sub_100072BE0(v18, v20);
              sub_100072BE0(v23, v25);
              uint64_t v8 = v29;
              (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v29);
            }

            else
            {
              sub_100072BE0(v18, v20);
              sub_100072BE0(v23, v25);
            }

            uint64_t v13 = v41;
            uint64_t v12 = v42;
          }

          else
          {
            sub_100072BE0(v18, v20);
          }

          ++v14;
        }

        while (v13 != v14);
      }
    }

    swift_bridgeObjectRelease_n(v12, 2LL);
  }

void sub_1000B8DA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v30 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  unint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v13 = 1LL << *(_BYTE *)(v11 - 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v28 = v11;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v10) != 0) {
    goto LABEL_27;
  }
LABEL_6:
  int64_t v16 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v16 < v29)
    {
      unint64_t v17 = *(void *)(v28 + 8 * v16);
      ++v9;
      if (v17) {
        goto LABEL_21;
      }
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v28 + 8 * v9);
      if (v17) {
        goto LABEL_21;
      }
      int64_t v9 = v16 + 2;
      if (v16 + 2 >= v29) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v28 + 8 * v9);
      if (v17) {
        goto LABEL_21;
      }
      int64_t v9 = v16 + 3;
      if (v16 + 3 >= v29) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v28 + 8 * v9);
      if (v17)
      {
LABEL_21:
        unint64_t v15 = (v17 - 1) & v17;
        for (unint64_t i = __clz(__rbit64(v17)) + (v9 << 6); ; unint64_t i = v26 | (v9 << 6))
        {
          id v20 = *(id *)(*(void *)(v30 + 56) + 8 * i);
          id v21 = [v20 uploadedAt];
          if (v21)
          {
            uint64_t v22 = v21;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

            (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0LL, 1LL, v2);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) != 1)
            {
              sub_10009691C((uint64_t)v8);

              if (!v15) {
                goto LABEL_6;
              }
              goto LABEL_27;
            }
          }

          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1LL, 1LL, v2);
          }

          uint64_t v23 = sub_10009691C((uint64_t)v8);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
          uint64_t v24 = v31[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
          uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v20);
          specialized ContiguousArray._endMutation()(v25);
          if (!v15) {
            goto LABEL_6;
          }
LABEL_27:
          unint64_t v26 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
        }
      }

      int64_t v18 = v16 + 4;
      if (v18 < v29)
      {
        unint64_t v17 = *(void *)(v28 + 8 * v18);
        if (v17)
        {
          int64_t v9 = v18;
          goto LABEL_21;
        }

        while (1)
        {
          int64_t v9 = v18 + 1;
          if (__OFADD__(v18, 1LL)) {
            goto LABEL_30;
          }
          if (v9 >= v29) {
            break;
          }
          unint64_t v17 = *(void *)(v28 + 8 * v9);
          ++v18;
          if (v17) {
            goto LABEL_21;
          }
        }
      }
    }

uint64_t sub_1000B908C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    unint64_t v7 = sub_1000B97E0();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  v7,  &protocol witness table for String);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000B9118(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B9128(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_1000B9160(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000B91AC(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for KTFixupRegistrationUpload()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd25KTFixupRegistrationUpload);
}

void sub_1000B925C()
{
}

id sub_1000B92B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000B92F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000B9318()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000B9344(uint64_t a1)
{
}

uint64_t type metadata accessor for KTFixupRegistrationUpload.CloudState(uint64_t a1)
{
  uint64_t result = qword_1002EB070;
  if (!qword_1002EB070) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTFixupRegistrationUpload.CloudState);
  }
  return result;
}

uint64_t sub_1000B9388()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100072BE0(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1000B9400()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  uint64_t v2 = (uint64_t *)(v0
                 + ((*(void *)(v1 + 64)
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_100072B9C(*v2, v4);
  uint64_t v5 = sub_100072B9C(v3, v4);
  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v9;
    *(_DWORD *)id v8 = 136315138;
    sub_1000B485C(v3, v4);
    unint64_t v11 = v10;
    uint64_t v13 = sub_10007C22C(v12, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100072BE0(v3, v4);
    sub_100072BE0(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fixed up record for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    sub_100072BE0(v3, v4);
    sub_100072BE0(v3, v4);
  }

uint64_t sub_1000B95D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002E1430);
  uint64_t v11 = *(void *)(type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000B9860(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

unint64_t sub_1000B97E0()
{
  unint64_t result = qword_1002E1428;
  if (!qword_1002E1428)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TransparencyIDSRegistrationData);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002E1428);
  }

  return result;
}

uint64_t sub_1000B981C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B9860(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for KTFixupRegistrationUpload.CloudState(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B9978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B9984);
}

uint64_t sub_1000B9984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1000B9A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B9A18);
}

char *sub_1000B9A18(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000B9A94(uint64_t a1)
{
  v4[0] = &unk_100249098;
  v4[1] = &unk_100249098;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000B9B18()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EB088);
  sub_100072DEC(v0, (uint64_t)qword_1002EB088);
  return Logger.init(transparencyCategory:)(0x656E6F5A4B43544BLL, 0xE800000000000000LL);
}

void *sub_1000B9B74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_10027F320, 24LL, 7LL);
  *(void *)(v5 + 16) = 0LL;
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), uint64_t))(*(void *)v2 + 120LL);
  swift_retain(v5);
  v6(a1, a2, sub_1000B9C44, v5);
  swift_release(v5);
  swift_beginAccess(v5 + 16, v10, 0LL, 0LL);
  uint64_t v7 = *(void **)(v5 + 16);
  id v8 = v7;
  swift_release(v5);
  return v7;
}

uint64_t sub_1000B9C20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000B9C44(void *a1)
{
  if (a1)
  {
    id v2 = [a1 serverChangeToken];
    if (v2)
    {
      unint64_t v3 = v2;
      uint64_t v4 = (void **)(v1 + 16);
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
      unint64_t v7 = v6;

      sub_10007D178(0LL, (unint64_t *)&unk_1002E1210, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
      uint64_t v8 = sub_10007D178(0LL, &qword_1002E1620, &OBJC_CLASS___CKServerChangeToken_ptr);
      uint64_t v9 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v8, v5, v7, v8);
      sub_100072BE0(v5, v7);
      swift_beginAccess(v4, &v12, 1LL, 0LL);
      uint64_t v10 = *v4;
      *uint64_t v4 = (void *)v9;
    }
  }

  return 0LL;
}

uint64_t sub_1000B9D38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = swift_allocObject(&unk_10027F348, 24LL, 7LL);
  *(void *)(v7 + 16) = a3;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(id), uint64_t))(*(void *)v3 + 120LL);
  id v9 = a3;
  v8(a1, a2, sub_1000B9DB0, v7);
  return swift_release(v7);
}

uint64_t sub_1000B9DB0(id a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    id v16 = 0LL;
    id v5 = v3;
    id v6 = [v4 archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v16];
    id v7 = v16;
    if (!v6)
    {
      uint64_t v12 = v7;
      uint64_t v13 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v14);
      swift_errorRelease(v13);
      return 0LL;
    }

    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v10 = v9;

    if (a1)
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [a1 setServerChangeToken:isa];

      sub_100072BE0(v8, v10);
    }

    else
    {

      sub_100072BE0(v8, v10);
    }
  }

  else if (a1)
  {
    [a1 setServerChangeToken:0];
  }

  return 1LL;
}

uint64_t sub_1000B9EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void **)(v4 + 16);
  unint64_t v10 = (void *)swift_allocObject(&unk_10027F370, 48LL, 7LL);
  v10[2] = a1;
  v10[3] = a2;
  void v10[4] = a3;
  void v10[5] = a4;
  uint64_t v11 = swift_allocObject(&unk_10027F398, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_1000BA784;
  *(void *)(v11 + 24) = v10;
  void v15[4] = sub_1000807AC;
  uint64_t v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_1000807CC;
  v15[3] = &unk_10027F3B0;
  uint64_t v12 = _Block_copy(v15);
  uint64_t v13 = v16;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  swift_retain(v11);
  swift_release(v13);
  [v9 performBlockAndWait:v12];
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 122LL, 49LL, 32LL, 1LL);
  swift_release(v10);
  uint64_t result = swift_release(v11);
  return result;
}

void sub_1000BA03C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [(id)objc_opt_self(CloudZone) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v13 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  __int128 v69 = xmmword_1002464F0;
  *(_OWORD *)(v14 + 16) = xmmword_1002464F0;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1000914E8();
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  unint64_t v15 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040LL, v14);
  [v12 setPredicate:v15];

  uint64_t v72 = 0LL;
  id v68 = v12;
  id v16 = [v12 execute:&v72];
  id v17 = (id)v72;
  if (!v16)
  {
    id v36 = (id)v72;
    uint64_t v37 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v38);
    swift_errorRelease(v37);
    uint64_t v22 = 0LL;
    goto LABEL_21;
  }

  uint64_t v18 = v16;
  uint64_t v19 = sub_10007D178(0LL, &qword_1002E1618, &off_100275018);
  uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
  id v21 = v17;

  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0) {
      uint64_t v39 = v20;
    }
    else {
      uint64_t v39 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v20);
    if (v22)
    {
LABEL_4:
      if (v22 < 1)
      {
        __break(1u);
      }

      else
      {
        uint64_t v64 = v11;
        uint64_t v65 = v9;
        uint64_t v66 = v8;
        uint64_t v67 = a4;
        uint64_t v63 = a3;
        uint64_t v23 = 0LL;
        unint64_t v24 = v20 & 0xC000000000000001LL;
        do
        {
          if (v24) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v20);
          }
          else {
            id v25 = *(id *)(v20 + 8 * v23 + 32);
          }
          unint64_t v26 = v25;
          uint64_t v27 = sub_100072CC4(&qword_1002E03D8);
          uint64_t v28 = swift_allocObject(v27, 64LL, 7LL);
          *(_OWORD *)(v28 + 16) = v69;
          ++v23;
          uint64_t v72 = 0x203A73656E6F7ALL;
          unint64_t v73 = 0xE700000000000000LL;
          id v29 = [v26 description];
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          uint64_t v32 = v31;

          v33._uint64_t countAndFlagsBits = v30;
          v33._object = v32;
          String.append(_:)(v33);
          swift_bridgeObjectRelease(v32);
          uint64_t v34 = v72;
          unint64_t v35 = v73;
          *(void *)(v28 + 56) = &type metadata for String;
          *(void *)(v28 + 32) = v34;
          *(void *)(v28 + 40) = v35;
          print(_:separator:terminator:)(v28, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);

          swift_bridgeObjectRelease(v28);
        }

        while (v22 != v23);
        swift_bridgeObjectRelease(v20);
        uint64_t v8 = v66;
        a4 = v67;
        uint64_t v9 = v65;
        if (v24)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v20);
          a3 = v63;
          uint64_t v11 = v64;
LABEL_15:
          swift_bridgeObjectRelease(v20);
          goto LABEL_21;
        }

        uint64_t v11 = v64;
        if (*(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          uint64_t v22 = (uint64_t)*(id *)(v20 + 32);
          a3 = v63;
          goto LABEL_15;
        }
      }

      __break(1u);
    }
  }

  else
  {
    uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v20);
    if (v22) {
      goto LABEL_4;
    }
  }

  swift_bridgeObjectRelease_n(v20, 2LL);
LABEL_21:
  if (qword_1002EB080 != -1) {
    swift_once(&qword_1002EB080, sub_1000B9B18);
  }
  uint64_t v40 = sub_100072DEC(v8, (uint64_t)qword_1002EB088);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v40, v8);
  id v41 = (id)v22;
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  int v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, (os_log_type_t)v43))
  {
    uint64_t v64 = v11;
    uint64_t v65 = v9;
    uint64_t v66 = v8;
    uint64_t v67 = a4;
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = swift_slowAlloc(96LL, -1LL);
    uint64_t v72 = v45;
    *(_DWORD *)uint64_t v44 = 136315650;
    uint64_t v63 = a3;
    *(void *)&__int128 v69 = v45;
    int v62 = v43;
    if (v22 && (id v46 = [v41 name]) != 0)
    {
      uint64_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      unint64_t v50 = v49;
    }

    else
    {
      unint64_t v50 = 0xE100000000000000LL;
      uint64_t v48 = 45LL;
    }

    uint64_t v70 = sub_10007C22C(v48, v50, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 4, v44 + 12);

    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v44 + 12) = 2080;
    if (v22)
    {
      unsigned int v52 = [v41 zoneCreated];
      BOOL v53 = v52 == 0;
      if (v52) {
        uint64_t v54 = 1702195828LL;
      }
      else {
        uint64_t v54 = 0x65736C6166LL;
      }
      if (v53) {
        unint64_t v55 = 0xE500000000000000LL;
      }
      else {
        unint64_t v55 = 0xE400000000000000LL;
      }
    }

    else
    {
      unint64_t v55 = 0xE100000000000000LL;
      uint64_t v54 = 45LL;
    }

    uint64_t v70 = sub_10007C22C(v54, v55, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 14, v44 + 22);

    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v44 + 22) = 2080;
    if (v22)
    {
      unsigned int v56 = [v41 zoneSubscribed];
      BOOL v57 = v56 == 0;
      if (v56) {
        uint64_t v58 = 1702195828LL;
      }
      else {
        uint64_t v58 = 0x65736C6166LL;
      }
      if (v57) {
        unint64_t v59 = 0xE500000000000000LL;
      }
      else {
        unint64_t v59 = 0xE400000000000000LL;
      }
    }

    else
    {
      unint64_t v59 = 0xE100000000000000LL;
      uint64_t v58 = 45LL;
    }

    a3 = v63;
    uint64_t v51 = v68;
    uint64_t v70 = sub_10007C22C(v58, v59, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 24, v44 + 32);

    swift_bridgeObjectRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v62, "fetched zone: %s %s %s", (uint8_t *)v44, 0x20u);
    uint64_t v60 = v69;
    swift_arrayDestroy(v69, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v51 = v68;
  }

  a3(v22);
}

uint64_t sub_1000BA758()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000BA784()
{
}

uint64_t sub_1000BA790()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000BA7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BA7B0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BA7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void **)(v5 + 16);
  uint64_t v11 = (void *)swift_allocObject(&unk_10027F3E8, 56LL, 7LL);
  __int128 v11[2] = a1;
  void v11[3] = a2;
  void v11[4] = v5;
  void v11[5] = a3;
  v11[6] = a4;
  uint64_t v12 = swift_allocObject(&unk_10027F410, 32LL, 7LL);
  *(void *)(v12 + 16) = sub_1000BA94C;
  *(void *)(v12 + 24) = v11;
  void v16[4] = sub_100085D2C;
  uint64_t v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  v16[2] = sub_1000807CC;
  v16[3] = &unk_10027F428;
  uint64_t v13 = _Block_copy(v16);
  uint64_t v14 = v17;
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  swift_retain(a4);
  swift_retain(v12);
  swift_release(v14);
  [v10 performBlockAndWait:v13];
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 122LL, 65LL, 32LL, 1LL);
  swift_release(v11);
  uint64_t result = swift_release(v12);
  return result;
}

uint64_t sub_1000BA918()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000BA94C()
{
  id v1 = (id)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void (*)(void))v0[5];
  id v5 = [(id)objc_opt_self(CloudZone) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1002464F0;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000914E8();
  *(void *)(v7 + 32) = v1;
  *(void *)(v7 + 40) = v2;
  swift_bridgeObjectRetain(v2);
  uint64_t v8 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040LL, v7);
  [v5 setPredicate:v8];

  id v41 = 0LL;
  id v9 = [v5 execute:&v41];
  id v10 = v41;
  if (!v9)
  {
    uint64_t v17 = v3;
    id v18 = v41;
    uint64_t v19 = _convertNSErrorToError(_:)(v10);

    uint64_t v3 = v17;
    swift_willThrow(v20);
    swift_errorRelease(v19);
LABEL_14:
    id v22 = [objc_allocWithZone((Class)CloudZone) initWithContext:*(void *)(v3 + 16)];
    if (!v22)
    {
      v4();
      goto LABEL_26;
    }

    id v15 = v22;
    NSString v23 = String._bridgeToObjectiveC()();
    [v15 setName:v23];

    goto LABEL_16;
  }

  uint64_t v11 = v9;
  uint64_t v12 = sub_10007D178(0LL, &qword_1002E1618, &off_100275018);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);
  id v14 = v10;

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0) {
      uint64_t v21 = v13;
    }
    else {
      uint64_t v21 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v13);
    id v15 = (id)_CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v13);
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }

  id v15 = *(id *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v15)
  {
LABEL_13:
    swift_bridgeObjectRelease(v13);
    goto LABEL_14;
  }

uint64_t sub_1000BADD0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000BADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = (void *)swift_allocObject(&unk_10027F460, 40LL, 7LL);
  uint64_t v7[2] = a1;
  v7[3] = a2;
  void v7[4] = v3;
  uint64_t v8 = swift_allocObject(&unk_10027F488, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_1000BAF58;
  *(void *)(v8 + 24) = v7;
  v12[4] = sub_100085D2C;
  uint64_t v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  _DWORD v12[2] = sub_1000807CC;
  uint64_t v12[3] = &unk_10027F4A0;
  id v9 = _Block_copy(v12);
  uint64_t v10 = v13;
  swift_bridgeObjectRetain(a2);
  swift_retain(v3);
  swift_retain(v8);
  swift_release(v10);
  [v6 performBlockAndWait:v9];
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 122LL, 88LL, 32LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  return result;
}

uint64_t sub_1000BAF2C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000BAF58()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithEntityName:v5];

  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1002464F0;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000914E8();
  *(void *)(v8 + 32) = v2;
  *(void *)(v8 + 40) = v1;
  swift_bridgeObjectRetain(v1);
  id v9 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040LL, v8);
  [v6 setPredicate:v9];

  id v10 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v6];
  uint64_t v11 = *(void **)(v3 + 16);
  id v25 = 0LL;
  id v12 = [v11 executeRequest:v10 error:&v25];
  id v13 = v25;
  if (v12)
  {
    id v14 = v12;
    id v15 = v25;
  }

  else
  {
    id v16 = v25;
    uint64_t v17 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v18);
    swift_errorRelease(v17);
  }

  id v25 = 0LL;
  unsigned int v19 = [v11 save:&v25];
  id v20 = v25;
  if (v19)
  {
    id v21 = v25;
  }

  else
  {
    id v22 = v25;
    uint64_t v23 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v24);
    swift_errorRelease(v23);
    id v6 = v10;
  }
}

uint64_t sub_1000BB16C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000BB17C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate));
}

uint64_t sub_1000BB18C()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler));
}

void *sub_1000BB19C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase);
  id v2 = v1;
  return v1;
}

id sub_1000BB1C8()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics);
}

uint64_t KTZoneSetup.initialFetch.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch, v3, 0LL, 0LL);
  return *v1;
}

uint64_t KTZoneSetup.initialFetch.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

uint64_t (*KTZoneSetup.initialFetch.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void *sub_1000BB334(void *a1)
{
  id v2 = a1;
  return a1;
}

void *sub_1000BB358(uint64_t a1, void *a2)
{
  id v3 = a2;
  return a2;
}

uint64_t variable initialization expression of KTOptIOValidator.intendedState()
{
  return 2LL;
}

uint64_t sub_1000BB384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000BB38C(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000BB394(uint64_t a1, uint64_t a2, __int16 a3)
{
  return HIBYTE(a3);
}

uint64_t sub_1000BB39C(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*sub_1000BB3A4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

  ;
}

id KTZoneSetup.__allocating_init(ckdatabase:analytics:context:zoneCreate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  uint64_t v10 = type metadata accessor for KTCKZone();
  uint64_t v11 = swift_allocObject(v10, 24LL, 7LL);
  *(void *)(v11 + 16) = a3;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v11;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, "init");
}

id KTZoneSetup.init(ckdatabase:analytics:context:zoneCreate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  uint64_t v6 = type metadata accessor for KTCKZone();
  uint64_t v7 = swift_allocObject(v6, 24LL, 7LL);
  *(void *)(v7 + 16) = a3;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v7;
  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for KTZoneSetup();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for KTCKZone()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd8KTCKZone);
}

uint64_t type metadata accessor for KTZoneSetup()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd11KTZoneSetup);
}

Swift::Void __swiftcall KTZoneSetup.groupStart()()
{
  id v3 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase];
  if (v3)
  {
    uint64_t v93 = swift_allocObject(&unk_10027F4D8, 24LL, 7LL);
    id v86 = v3;
    *(void *)(v93 + 16) = sub_1000BC1F4((uint64_t)_swiftEmptyArrayStorage);
    id v84 = (void *)(v93 + 16);
    uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate];
    id v91 = v0;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0) {
        uint64_t v17 = *(void *)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate];
      }
      else {
        uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v4, 2LL);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v5) {
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(v4, 2LL);
      if (!v5) {
        goto LABEL_14;
      }
    }

    if (v5 < 1)
    {
      __break(1u);
      goto LABEL_28;
    }

    uint64_t v6 = 0LL;
    unint64_t v88 = v4 & 0xC000000000000001LL;
    uint64_t v90 = *(void (**)(uint64_t, uint64_t, void (*)(void *), void *))(**(void **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler]
                                                                                         + 112LL);
    uint64_t v7 = v4;
    do
    {
      if (v88) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }
      else {
        id v8 = *(id *)(v4 + 8 * v6 + 32);
      }
      objc_super v9 = v8;
      ++v6;
      id v10 = [v8 zoneName];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      id v14 = (void *)swift_allocObject(&unk_10027F500, 56LL, 7LL);
      v14[2] = v11;
      v14[3] = v13;
      void v14[4] = v0;
      void v14[5] = v93;
      v14[6] = v9;
      swift_bridgeObjectRetain(v13);
      id v15 = v0;
      swift_retain(v93);
      id v16 = v9;
      v90(v11, v13, sub_1000BC378, v14);

      swift_bridgeObjectRelease(v13);
      swift_release(v14);
      uint64_t v4 = v7;
    }

    while (v5 != v6);
LABEL_14:
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_beginAccess(v84, v98, 0LL, 0LL);
    if (!*(void *)(*v84 + 16LL))
    {
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = sub_100072DEC(v37, (uint64_t)qword_1002EB088);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.info.getter(v39);
      id v41 = v86;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "no zones to create", v42, 2u);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      swift_release(v93);
      goto LABEL_56;
    }

    uint64_t v5 = (uint64_t)v0;
    id v87 = [objc_allocWithZone((Class)KTResultOperation) init];
    objc_msgSend(v0, "dependOnBeforeGroupFinished:");
    uint64_t v18 = *v84;
    swift_bridgeObjectRetain(*v84);
    uint64_t v1 = (uint64_t)sub_1000BCD40(v19);
    swift_bridgeObjectRelease(v18);
    uint64_t v20 = *v84;
    swift_bridgeObjectRetain(*v84);
    uint64_t v2 = (uint64_t)sub_1000BCF0C(v21);
    swift_bridgeObjectRelease(v20);
    if (qword_1002EB080 == -1)
    {
LABEL_16:
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v22, (uint64_t)qword_1002EB088);
      swift_bridgeObjectRetain_n(v1, 2LL);
      uint64_t v23 = swift_bridgeObjectRetain_n(v2, 2LL);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc(22LL, -1LL);
        uint64_t v27 = (void **)swift_slowAlloc(64LL, -1LL);
        aBlock = v27;
        *(_DWORD *)uint64_t v26 = 136315394;
        uint64_t v28 = sub_10007D178(0LL, &qword_1002E1510, &OBJC_CLASS___CKRecordZone_ptr);
        uint64_t v29 = Array.description.getter(v1, v28);
        unint64_t v31 = v30;
        uint64_t v94 = sub_10007C22C(v29, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &aBlock, v26 + 4, v26 + 12);
        swift_bridgeObjectRelease_n(v1, 2LL);
        swift_bridgeObjectRelease(v31);
        *(_WORD *)(v26 + 12) = 2080;
        uint64_t v32 = sub_10007D178(0LL, &qword_1002E1518, &OBJC_CLASS___CKRecordZoneSubscription_ptr);
        uint64_t v33 = Array.description.getter(v2, v32);
        unint64_t v35 = v34;
        uint64_t v94 = sub_10007C22C(v33, v34, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &aBlock, v26 + 14, v26 + 22);
        swift_bridgeObjectRelease_n(v2, 2LL);
        swift_bridgeObjectRelease(v35);
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "KTZoneSetup create %s subscribe: %s",  (uint8_t *)v26,  0x16u);
        swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1LL, -1LL);
        uint64_t v36 = v26;
        uint64_t v5 = (uint64_t)v91;
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v2, 2LL);
        swift_bridgeObjectRelease_n(v1, 2LL);
      }

      uint64_t v43 = v93;
      if ((unint64_t)v1 >> 62)
      {
        if (v1 < 0) {
          uint64_t v51 = v1;
        }
        else {
          uint64_t v51 = v1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v1);
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v1);
        if (v52) {
          goto LABEL_26;
        }
      }

      else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_26:
        sub_10007D178(0LL, &qword_1002E14F8, &OBJC_CLASS___CKModifyRecordZonesOperation_ptr);
        v99.value._rawValue = (void *)v1;
        v99.is_nil = 0;
        uint64_t v44 = (void *)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v99, v101);
        [v44 setQualityOfService:25];
        uint64_t v45 = swift_allocObject(&unk_10027F528, 32LL, 7LL);
        *(void *)(v45 + 16) = v5;
        *(void *)(v45 + 24) = v93;
        id v46 = (id)v5;
        swift_retain(v93);
        uint64_t v47 = v44;
        id v48 = v44;
        CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter(sub_1000BDA14, v45);
        uint64_t v49 = swift_allocObject(&unk_10027F550, 24LL, 7LL);
        *(void *)(v49 + 16) = v46;
        id v50 = v46;
        CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_1000BDA20, v49);

        goto LABEL_34;
      }

      swift_bridgeObjectRelease(v1);
      uint64_t v47 = 0LL;
LABEL_34:
      id v41 = v86;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0) {
          uint64_t v62 = v2;
        }
        else {
          uint64_t v62 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v2);
        uint64_t v63 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_bridgeObjectRelease(v2);
        if (v63)
        {
          uint64_t v64 = sub_10007D178(0LL, &qword_1002E1500, &OBJC_CLASS___CKSubscription_ptr);
          __n128 v65 = swift_bridgeObjectRetain(v2);
          uint64_t v54 = (void *)_bridgeCocoaArray<A>(_:)(v62, v64, v65);
          swift_bridgeObjectRelease_n(v2, 2LL);
          goto LABEL_37;
        }
      }

      else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
        __n128 v53 = swift_bridgeObjectRetain(v2);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v53);
        sub_10007D178(0LL, &qword_1002E1500, &OBJC_CLASS___CKSubscription_ptr);
        swift_bridgeObjectRelease(v2);
        uint64_t v54 = (void *)v2;
LABEL_37:
        sub_10007D178(0LL, &qword_1002E1508, &OBJC_CLASS___CKModifySubscriptionsOperation_ptr);
        v100.value._rawValue = v54;
        v100.is_nil = 0;
        unint64_t v55 = (void *)CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v100, v102);
        [v55 setQualityOfService:25];
        uint64_t v56 = swift_allocObject(&unk_10027F578, 32LL, 7LL);
        *(void *)(v56 + 16) = v5;
        *(void *)(v56 + 24) = v93;
        id v57 = (id)v5;
        swift_retain(v93);
        id v58 = v55;
        CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter(sub_1000BE7D8, v56);
        uint64_t v59 = swift_allocObject(&unk_10027F5A0, 24LL, 7LL);
        *(void *)(v59 + 16) = v57;
        id v60 = v57;
        CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_1000BE7E4, v59);
        uint64_t v61 = v47;
        [v58 addNullableDependency:v47];

LABEL_44:
        uint64_t v66 = (void *)swift_allocObject(&unk_10027F5C8, 40LL, 7LL);
        v66[2] = v93;
        v66[3] = v5;
        v66[4] = v87;
        v96[3] = sub_1000BEAF8;
        uint64_t v97 = v66;
        aBlock = _NSConcreteStackBlock;
        v96[0] = 1107296256LL;
        v96[1] = sub_1000A2010;
        v96[2] = &unk_10027F5E0;
        uint64_t v67 = _Block_copy(&aBlock);
        id v68 = (void *)objc_opt_self(&OBJC_CLASS___NSBlockOperation);
        id v69 = (id)v5;
        swift_retain(v93);
        id v92 = v87;
        uint64_t v39 = (os_log_s *)[v68 blockOperationWithBlock:v67];
        _Block_release(v67);
        swift_release(v97);
        -[os_log_s addNullableDependency:](v39, "addNullableDependency:", v61);
        -[os_log_s addNullableDependency:](v39, "addNullableDependency:", v55);
        [v69 runBeforeGroupFinished:v39];
        uint64_t v70 = &stru_1002CC000;
        if (v61)
        {
          uint64_t v71 = v61;
          uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
          os_log_type_t v73 = static os_log_type_t.info.getter(v72);
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v85 = (void *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v74 = 138412290;
            aBlock = v71;
            unint64_t v75 = v61;
            unint64_t v76 = v71;
            id v41 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, v74 + 4, v74 + 12);
            *uint64_t v85 = v75;

            uint64_t v61 = v75;
            uint64_t v70 = &stru_1002CC000;
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "create zone op %@", v74, 0xCu);
            uint64_t v77 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
            swift_arrayDestroy(v85, 1LL, v77);
            swift_slowDealloc(v85, -1LL, -1LL);
            swift_slowDealloc(v74, -1LL, -1LL);
          }

          else
          {

            uint64_t v72 = (os_log_s *)v71;
          }

          objc_msgSend(v41, v70[66].types, v71);
          uint64_t v43 = v93;
        }

        if (v55)
        {
          uint64_t v78 = v55;
          unint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
          os_log_type_t v80 = static os_log_type_t.info.getter(v79);
          if (os_log_type_enabled(v79, v80))
          {
            uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v89 = (void *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v81 = 138412290;
            aBlock = v78;
            unint64_t v82 = v78;
            id v41 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, v81 + 4, v81 + 12);
            *uint64_t v89 = v55;

            uint64_t v43 = v93;
            _os_log_impl((void *)&_mh_execute_header, v79, v80, "subscribe zone op %@", v81, 0xCu);
            uint64_t v83 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
            swift_arrayDestroy(v89, 1LL, v83);
            swift_slowDealloc(v89, -1LL, -1LL);
            swift_slowDealloc(v81, -1LL, -1LL);
          }

          else
          {

            unint64_t v79 = (os_log_s *)v78;
          }

          [v41 addOperation:v78];
          swift_release(v43);
        }

        else
        {
          swift_release(v43);
        }

LABEL_56:
        return;
      }

      swift_bridgeObjectRelease(v2);
      unint64_t v55 = 0LL;
      uint64_t v61 = v47;
      goto LABEL_44;
    }

uint64_t sub_1000BC1D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_1000BC1F4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E1610);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v22 = v1;
  uint64_t v6 = (char *)(v1 + 65);
  while (1)
  {
    uint64_t v7 = *(void *)(v6 - 33);
    uint64_t v8 = *(void *)(v6 - 25);
    objc_super v9 = *(void **)(v6 - 17);
    id v10 = *(void **)(v6 - 9);
    char v11 = *(v6 - 1);
    char v12 = *v6;
    id v13 = v10;
    swift_bridgeObjectRetain(v8);
    id v14 = v9;
    unint64_t result = sub_100079A58(v7, v8);
    if ((v16 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v17 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v17 = v7;
    v17[1] = v8;
    uint64_t v18 = v4[7] + 24 * result;
    *(void *)uint64_t v18 = v9;
    *(void *)(v18 + _Block_object_dispose(va, 8) = v10;
    *(_BYTE *)(v18 + 16) = v11;
    *(_BYTE *)(v18 + 17) = v12;
    uint64_t v19 = v4[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v6 += 40;
    void v4[2] = v21;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v22;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BC33C()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000BC378(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = (void *)v1[3];
  uint64_t v4 = (void *)v1[4];
  uint64_t v5 = (void *)v1[6];
  uint64_t v6 = (Class *)(v1[5] + 16LL);
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 serverChangeToken];
    if (v8)
    {
      objc_super v9 = v8;
      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      unint64_t v12 = v11;

      sub_100072BE0(v10, v12);
    }

    else
    {
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v20, (uint64_t)qword_1002EB088);
      uint64_t v21 = swift_bridgeObjectRetain_n(v2, 2LL);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.info.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        id v65 = v7;
        uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v25 = swift_slowAlloc(32LL, -1LL);
        v76[0] = v25;
        *(_DWORD *)uint64_t v24 = 136315138;
        swift_bridgeObjectRetain(v2);
        Class v72 = (Class)sub_10007C22C(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v24 + 4, v24 + 12);
        swift_bridgeObjectRelease_n(v2, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "initial fetch of zone %s (no serverChangeToken)",  v24,  0xCu);
        swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1LL, -1LL);
        uint64_t v26 = v24;
        id v7 = v65;
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v2, 2LL);
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80LL))(1LL);
    }

    unint64_t v75 = 0LL;
    if ([v7 zoneCreated])
    {
      BOOL v33 = 1;
    }

    else
    {
      unint64_t v75 = (objc_class *)[objc_allocWithZone(CKRecordZone) initWithZoneID:v5];
      BOOL v33 = v75 == 0LL;
    }

    Class isa = 0LL;
    if ([v7 zoneSubscribed] && v33)
    {
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v34, (uint64_t)qword_1002EB088);
      uint64_t v35 = swift_bridgeObjectRetain_n(v2, 2LL);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.info.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v39 = swift_slowAlloc(32LL, -1LL);
        v76[0] = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain(v2);
        Class v72 = (Class)sub_10007C22C(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease_n(v2, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "zone already created/subscribed %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v2, 2LL);
      }
    }

    else
    {
      sub_10007D178(0LL, &qword_1002E1518, &OBJC_CLASS___CKRecordZoneSubscription_ptr);
      swift_bridgeObjectRetain(v2);
      id v40 = v5;
      v41._uint64_t countAndFlagsBits = v3;
      v41._object = v2;
      Class isa = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v40, v41).super.super.isa;
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v42, (uint64_t)qword_1002EB088);
      uint64_t v43 = swift_bridgeObjectRetain_n(v2, 2LL);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.info.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        id v66 = v7;
        uint64_t v46 = swift_slowAlloc(32LL, -1LL);
        uint64_t v47 = (objc_class **)swift_slowAlloc(16LL, -1LL);
        uint64_t v64 = swift_slowAlloc(32LL, -1LL);
        v76[0] = v64;
        *(_DWORD *)uint64_t v46 = 136315650;
        swift_bridgeObjectRetain(v2);
        Class v72 = (Class)sub_10007C22C(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease_n(v2, 3LL);
        *(_WORD *)(v46 + 12) = 2112;
        swift_beginAccess(&v75, v69, 0LL, 0LL);
        id v48 = v75;
        if (v75)
        {
          Class v72 = v75;
          uint64_t v49 = v75;
          uint64_t v50 = v46 + 14;
          uint64_t v51 = v46 + 22;
        }

        else
        {
          uint64_t v51 = v46 + 22;
          Class v72 = 0LL;
          uint64_t v50 = v46 + 14;
        }

        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v50, v51);
        *uint64_t v47 = v48;
        *(_WORD *)(v46 + 22) = 2112;
        swift_beginAccess(&isa, v68, 0LL, 0LL);
        Class v52 = isa;
        if (isa)
        {
          Class v72 = isa;
          __n128 v53 = isa;
          uint64_t v54 = v46 + 24;
          uint64_t v55 = v46 + 32;
        }

        else
        {
          uint64_t v55 = v46 + 32;
          Class v72 = 0LL;
          uint64_t v54 = v46 + 24;
        }

        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v54, v55);
        v47[1] = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "zone %s pending created %@ subscribed %@",  (uint8_t *)v46,  0x20u);
        uint64_t v56 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v47, 2LL, v56);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);

        id v7 = v66;
      }

      else
      {
        swift_bridgeObjectRelease_n(v2, 2LL);
      }

      swift_beginAccess(&v75, v76, 0LL, 0LL);
      id v57 = v75;
      swift_beginAccess(&isa, &v72, 0LL, 0LL);
      Class v58 = isa;
      swift_beginAccess(v6, v71, 33LL, 0LL);
      uint64_t v59 = v58;
      Class v60 = *v6;
      swift_bridgeObjectRetain(v2);
      uint64_t v61 = v57;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
      uint64_t v70 = *v6;
      *uint64_t v6 = (Class)0x8000000000000000LL;
      sub_1000BF738((uint64_t)v57, (uint64_t)v58, 514, v3, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
      Class v63 = *v6;
      *uint64_t v6 = v70;
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v2);
      swift_endAccess(v71);
    }
  }

  else
  {
    if (qword_1002EB080 != -1) {
      swift_once(&qword_1002EB080, sub_1000B9B18);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v13, (uint64_t)qword_1002EB088);
    uint64_t v14 = swift_bridgeObjectRetain_n(v2, 2LL);
    id v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v67 = v5;
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain(v2);
      Class v72 = (Class)sub_10007C22C(v3, (unint64_t)v2, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v2, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "initial fetch of zone %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      uint64_t v19 = v17;
      uint64_t v5 = v67;
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v2, 2LL);
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80LL))(1LL);
    id v27 = objc_msgSend( objc_allocWithZone(CKRecordZone),  "initWithZoneID:",  v5,  swift_bridgeObjectRetain(v2).n128_f64[0]);
    sub_10007D178(0LL, &qword_1002E1518, &OBJC_CLASS___CKRecordZoneSubscription_ptr);
    swift_bridgeObjectRetain(v2);
    id v28 = v5;
    v29._uint64_t countAndFlagsBits = v3;
    v29._object = v2;
    Class v30 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v28, v29).super.super.isa;
    swift_beginAccess(v6, v76, 33LL, 0LL);
    char v31 = swift_isUniquelyReferenced_nonNull_native(*v6);
    Class v72 = *v6;
    *uint64_t v6 = (Class)0x8000000000000000LL;
    sub_1000BF738((uint64_t)v27, (uint64_t)v30, 514, v3, (uint64_t)v2, v31);
    Class v32 = *v6;
    *uint64_t v6 = v72;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v2);
    swift_endAccess(v76);
  }

void *sub_1000BCD40(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 24 * v10);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v17 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v16 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v17 >= v16 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
      }
      uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      unint64_t result = (void *)specialized Array._endMutation()(v18);
    }
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

void *sub_1000BCF0C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 24 * v10 + 8);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v17 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v16 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v17 >= v16 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
      }
      uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      unint64_t result = (void *)specialized Array._endMutation()(v18);
    }
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

void sub_1000BD0D8(void *a1, void *a2, char a3, char *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a3 & 1) != 0)
  {
    uint64_t v55 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain(a2);
    NSString v56 = String._bridgeToObjectiveC()();
    [v55 logResultForEvent:v56 hardFailure:0 result:0];

    if (qword_1002EB080 != -1) {
      swift_once(&qword_1002EB080, sub_1000B9B18);
    }
    sub_100072DEC(v10, (uint64_t)qword_1002EB088);
    sub_10007EAE4(a2, 1);
    id v57 = a1;
    sub_10007EAE4(a2, 1);
    id v58 = v57;
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc(22LL, -1LL);
      unint64_t v82 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v83 = swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = v83;
      *(_DWORD *)uint64_t v61 = 136315394;
      id v62 = [v58 zoneName];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      unint64_t v65 = v64;

      id v88 = (id)sub_10007C22C(v63, v65, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v61 + 4, v61 + 12);

      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v61 + 12) = 2112;
      swift_errorRetain(a2);
      id v66 = (void *)_swift_stdlib_bridgeErrorToNSError(a2);
      id v88 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v61 + 14, v61 + 22);
      uint64_t v67 = v82;
      *unint64_t v82 = v66;
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "ModifyRecordZones perRecordZoneSaveBlock failed with %s: %@",  (uint8_t *)v61,  0x16u);
      uint64_t v68 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v67, 1LL, v68);
      swift_slowDealloc(v67, -1LL, -1LL);
      uint64_t v69 = v83;
      swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {

      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
    }

    unint64_t v79 = (void *)_convertErrorToNSError(_:)(a2);
    [a4 setError:v79];

    sub_10007EAF0(a2, 1);
  }

  else
  {
    uint64_t v14 = (void *)(a5 + 16);
    id v15 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 logResultForEvent:v16 hardFailure:0 result:0];

    id v17 = [a1 zoneName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    swift_beginAccess(v14, &v86, 32LL, 0LL);
    uint64_t v21 = *v14;
    if (*(void *)(*v14 + 16LL) && (unint64_t v22 = sub_100079A58(v18, v20), (v23 & 1) != 0))
    {
      uint64_t v83 = v11;
      uint64_t v24 = *(void *)(v21 + 56) + 24 * v22;
      uint64_t v26 = *(void **)(v24 + 8);
      __int16 v27 = *(unsigned __int8 *)(v24 + 17);
      id v88 = *(id *)v24;
      id v25 = v88;
      id v89 = v26;
      char v91 = v27;
      swift_endAccess(&v86);
      unint64_t v82 = v26;
      id v28 = v25;
      swift_bridgeObjectRelease(v20);
      char v90 = 1;
      id v29 = [a1 zoneName];
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v31 = v30;

      swift_beginAccess(v14, &v86, 33LL, 0LL);
      id v32 = v28;
      BOOL v33 = v82;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      uint64_t v85 = (void *)*v14;
      *uint64_t v14 = 0x8000000000000000LL;
      sub_1000BF738((uint64_t)v25, (uint64_t)v26, (v27 << 8) | 1, v81, v31, isUniquelyReferenced_nonNull_native);
      uint64_t v35 = *v14;
      *uint64_t v14 = v85;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v35);
      swift_endAccess(&v86);
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v36 = sub_100072DEC(v10, (uint64_t)qword_1002EB088);
      uint64_t v37 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v13, v36, v10);
      id v38 = a1;
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.info.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(32LL, -1LL);
        unint64_t v82 = (void *)swift_slowAlloc(96LL, -1LL);
        uint64_t v85 = v82;
        *(_DWORD *)uint64_t v41 = 136315650;
        id v42 = [v38 zoneName];
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        unint64_t v45 = v44;

        uint64_t v86 = sub_10007C22C(v43, v45, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 4, v41 + 12);

        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2080;
        swift_beginAccess(&v88, &v86, 0LL, 0LL);
        uint64_t v46 = 1702195828LL;
        if ((v90 & 1) != 0)
        {
          unint64_t v47 = 0xE400000000000000LL;
        }

        else
        {
          uint64_t v46 = 0x65736C6166LL;
          unint64_t v47 = 0xE500000000000000LL;
        }

        if (v90 == 2) {
          uint64_t v48 = 45LL;
        }
        else {
          uint64_t v48 = v46;
        }
        if (v90 == 2) {
          unint64_t v49 = 0xE100000000000000LL;
        }
        else {
          unint64_t v49 = v47;
        }
        uint64_t v84 = sub_10007C22C(v48, v49, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease(v49);
        *(_WORD *)(v41 + 22) = 2080;
        uint64_t v50 = 0x65736C6166LL;
        if ((v91 & 1) != 0)
        {
          uint64_t v50 = 1702195828LL;
          unint64_t v51 = 0xE400000000000000LL;
        }

        else
        {
          unint64_t v51 = 0xE500000000000000LL;
        }

        if (v91 == 2) {
          uint64_t v52 = 0LL;
        }
        else {
          uint64_t v52 = v50;
        }
        if (v91 == 2) {
          unint64_t v53 = 0xE000000000000000LL;
        }
        else {
          unint64_t v53 = v51;
        }
        uint64_t v84 = sub_10007C22C(v52, v53, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v41 + 24, v41 + 32);
        swift_bridgeObjectRelease(v53);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "sub action %s: created: %s subscribed: %s",  (uint8_t *)v41,  0x20u);
        uint64_t v54 = v82;
        swift_arrayDestroy(v82, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v83 + 8))(v13, v10);
      }

      else
      {

        (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v10);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v20);
      swift_endAccess(&v86);
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      sub_100072DEC(v10, (uint64_t)qword_1002EB088);
      id v70 = a1;
      uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        os_log_type_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v74 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v74;
        *(_DWORD *)os_log_type_t v73 = 136315138;
        id v75 = [v70 zoneName];
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        unint64_t v78 = v77;

        id v88 = (id)sub_10007C22C(v76, v78, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v73 + 4, v73 + 12);

        swift_bridgeObjectRelease(v78);
        _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "ModifyRecordZones perRecordZoneSaveBlock not found %s",  v73,  0xCu);
        swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

void sub_1000BDA14(void *a1, void *a2, char a3)
{
}

void sub_1000BDA20(uint64_t a1, char a2)
{
}

void sub_1000BDA3C(uint64_t a1, unint64_t a2, void *a3, char a4, char *a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v16 = (void *)(a6 + 16);
  if ((a4 & 1) != 0)
  {
    BOOL v33 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain(a3);
    NSString v34 = String._bridgeToObjectiveC()();
    uint64_t v35 = (void *)_convertErrorToNSError(_:)(a3);
    [v33 logResultForEvent:v34 hardFailure:1 result:v35];

    if (qword_1002EB080 != -1) {
      swift_once(&qword_1002EB080, sub_1000B9B18);
    }
    sub_100072DEC(v12, (uint64_t)qword_1002EB088);
    sub_10007EAE4(a3, 1);
    swift_bridgeObjectRetain(a2);
    sub_10007EAE4(a3, 1);
    swift_bridgeObjectRetain(a2);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      id v109 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v110 = swift_slowAlloc(32LL, -1LL);
      uint64_t v114 = v110;
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v111 = (uint64_t)v16;
      swift_bridgeObjectRetain(a2);
      id v116 = (id)sub_10007C22C(a1, a2, &v114);
      os_log_t v108 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain(a3);
      os_log_type_t v40 = a5;
      unint64_t v41 = a2;
      uint64_t v42 = a1;
      uint64_t v43 = (void *)_swift_stdlib_bridgeErrorToNSError(a3);
      id v116 = v43;
      NSString v16 = (void *)v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v39 + 14, v39 + 22);
      unint64_t v44 = v109;
      void *v109 = v43;
      a1 = v42;
      a2 = v41;
      a5 = v40;
      sub_10007EAF0(a3, 1);
      sub_10007EAF0(a3, 1);
      os_log_t v45 = v108;
      _os_log_impl( (void *)&_mh_execute_header,  v108,  v38,  "ModifySubscriptions perSubscriptionSaveBlock %s failed with %@",  (uint8_t *)v39,  0x16u);
      uint64_t v46 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      uint64_t v47 = v110;
      swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);
      sub_10007EAF0(a3, 1);
      sub_10007EAF0(a3, 1);
    }

    uint64_t v114 = (uint64_t)a3;
    swift_errorRetain(a3);
    uint64_t v48 = sub_100072CC4(&qword_1002DF260);
    type metadata accessor for CKError(0LL);
    uint64_t v50 = v49;
    if ((swift_dynamicCast(&v116, &v114, v48, v49, 6LL) & 1) == 0) {
      goto LABEL_56;
    }
    id v51 = v116;
    uint64_t v114 = (uint64_t)v116;
    uint64_t v52 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
    _BridgedStoredNSError.code.getter(&v116, v50, v52);
    if (v116 != (id)26)
    {
      uint64_t v111 = (uint64_t)a5;
      swift_bridgeObjectRetain_n(a2, 2LL);
      id v75 = v51;
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = a1;
        uint64_t v79 = swift_slowAlloc(22LL, -1LL);
        uint64_t v80 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v81 = swift_slowAlloc(32LL, -1LL);
        uint64_t v114 = v81;
        *(_DWORD *)uint64_t v79 = 136315394;
        swift_bridgeObjectRetain(a2);
        uint64_t v113 = sub_10007C22C(v78, a2, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v79 + 12) = 2112;
        id v82 = v75;
        uint64_t v83 = _swift_stdlib_bridgeErrorToNSError(v82);
        uint64_t v113 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v79 + 14, v79 + 22);
        *uint64_t v80 = v83;

        _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "ModifySubscriptions unhandled ckerror %s: %@",  (uint8_t *)v79,  0x16u);
        uint64_t v84 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v80, 1LL, v84);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      a5 = (char *)v111;
      goto LABEL_56;
    }

    swift_beginAccess(v16, &v114, 32LL, 0LL);
    uint64_t v53 = *v16;
    if (*(void *)(*v16 + 16LL))
    {
      swift_bridgeObjectRetain(a2);
      unint64_t v54 = sub_100079A58(a1, a2);
      if ((v55 & 1) != 0)
      {
        uint64_t v56 = *(void *)(v53 + 56) + 24 * v54;
        id v57 = *(void **)v56;
        id v58 = *(void **)(v56 + 8);
        swift_endAccess(&v114);
        id v59 = v58;
        id v60 = v57;
        uint64_t v111 = (uint64_t)a5;
        uint64_t v61 = a1;
        id v62 = v60;
        swift_bridgeObjectRelease(a2);
        swift_beginAccess(v16, &v114, 33LL, 0LL);
        swift_bridgeObjectRetain(a2);
        id v63 = v62;
        unint64_t v64 = v16;
        id v65 = v59;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v64);
        uint64_t v113 = *v64;
        *unint64_t v64 = 0x8000000000000000LL;
        uint64_t v67 = v61;
        a5 = (char *)v111;
        sub_1000BF738((uint64_t)v57, (uint64_t)v58, 0, v67, a2, isUniquelyReferenced_nonNull_native);
        uint64_t v68 = *v64;
        *unint64_t v64 = v113;
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v68);
        swift_endAccess(&v114);

        id v51 = v63;
LABEL_55:

LABEL_56:
        id v107 = (void *)_convertErrorToNSError(_:)(a3);
        [a5 setError:v107];

        sub_10007EAF0(a3, 1);
        return;
      }

      swift_bridgeObjectRelease(a2);
    }

    swift_endAccess(&v114);
    goto LABEL_55;
  }

  id v17 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 logResultForEvent:v18 hardFailure:0 result:0];

  swift_beginAccess(v16, &v114, 32LL, 0LL);
  uint64_t v19 = *v16;
  if (*(void *)(*v16 + 16LL))
  {
    swift_bridgeObjectRetain(a2);
    unint64_t v20 = sub_100079A58(a1, a2);
    if ((v21 & 1) != 0)
    {
      uint64_t v111 = (uint64_t)v16;
      uint64_t v22 = *(void *)(v19 + 56) + 24 * v20;
      char v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      LOWORD(v22) = *(_WORD *)(v22 + 16);
      id v116 = v23;
      id v117 = v24;
      __int16 v118 = v22;
      swift_endAccess(&v114);
      id v25 = v24;
      id v26 = v23;
      swift_bridgeObjectRelease(a2);
      if (qword_1002EB080 != -1) {
        swift_once(&qword_1002EB080, sub_1000B9B18);
      }
      uint64_t v110 = a1;
      uint64_t v27 = sub_100072DEC(v12, (uint64_t)qword_1002EB088);
      uint64_t v28 = swift_bridgeObjectRetain_n(a2, 2LL);
      id v109 = (void *)v27;
      id v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.info.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v114 = v32;
        *(_DWORD *)uint64_t v31 = 136315138;
        swift_bridgeObjectRetain(a2);
        uint64_t v113 = sub_10007C22C(v110, a2, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ModifySubscriptions zone subscribed with %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      HIBYTE(v11_Block_object_dispose(va, 8) = 1;
      id v85 = v116;
      id v86 = v117;
      __int16 v87 = v118;
      id v88 = (uint64_t *)v111;
      swift_beginAccess(v111, &v114, 33LL, 0LL);
      id v89 = v86;
      uint64_t v90 = *v88;
      swift_bridgeObjectRetain(a2);
      id v91 = v85;
      char v92 = swift_isUniquelyReferenced_nonNull_native(v90);
      uint64_t v113 = *v88;
      *id v88 = 0x8000000000000000LL;
      sub_1000BF738((uint64_t)v85, (uint64_t)v86, v87 | 0x100, v110, a2, v92);
      uint64_t v93 = *v88;
      *id v88 = v113;
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v93);
      swift_endAccess(&v114);
      (*(void (**)(char *, void *, uint64_t))(v13 + 16))(v15, v109, v12);
      uint64_t v94 = swift_bridgeObjectRetain_n(a2, 2LL);
      Swift::Int v95 = (os_log_s *)Logger.logObject.getter(v94);
      os_log_type_t v96 = static os_log_type_t.info.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc(32LL, -1LL);
        uint64_t v111 = swift_slowAlloc(96LL, -1LL);
        uint64_t v113 = v111;
        *(_DWORD *)uint64_t v97 = 136315650;
        swift_bridgeObjectRetain(a2);
        uint64_t v114 = sub_10007C22C(v110, a2, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v97 + 4, v97 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v97 + 12) = 2080;
        swift_beginAccess(&v116, &v114, 0LL, 0LL);
        uint64_t v98 = 1702195828LL;
        if ((v118 & 1) == 0) {
          uint64_t v98 = 0x65736C6166LL;
        }
        unint64_t v99 = 0xE400000000000000LL;
        if ((v118 & 1) == 0) {
          unint64_t v99 = 0xE500000000000000LL;
        }
        else {
          uint64_t v100 = v98;
        }
        else {
          unint64_t v101 = v99;
        }
        uint64_t v112 = sub_10007C22C(v100, v101, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v97 + 14, v97 + 22);
        swift_bridgeObjectRelease(v101);
        *(_WORD *)(v97 + 22) = 2080;
        uint64_t v102 = 0x65736C6166LL;
        if ((v118 & 0x100) != 0) {
          uint64_t v102 = 1702195828LL;
        }
        unint64_t v103 = 0xE500000000000000LL;
        if ((v118 & 0x100) != 0) {
          unint64_t v103 = 0xE400000000000000LL;
        }
        if (HIBYTE(v118) == 2) {
          uint64_t v104 = 45LL;
        }
        else {
          uint64_t v104 = v102;
        }
        if (HIBYTE(v118) == 2) {
          unint64_t v105 = 0xE100000000000000LL;
        }
        else {
          unint64_t v105 = v103;
        }
        uint64_t v112 = sub_10007C22C(v104, v105, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v97 + 24, v97 + 32);
        swift_bridgeObjectRelease(v105);
        _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "sub action %s: created: %s subscribed: %s",  (uint8_t *)v97,  0x20u);
        uint64_t v106 = v111;
        swift_arrayDestroy(v111, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1LL, -1LL);
        swift_slowDealloc(v97, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

      return;
    }

    swift_bridgeObjectRelease(a2);
  }

  swift_endAccess(&v114);
  if (qword_1002EB080 != -1) {
    swift_once(&qword_1002EB080, sub_1000B9B18);
  }
  sub_100072DEC(v12, (uint64_t)qword_1002EB088);
  uint64_t v69 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v70 = (os_log_s *)Logger.logObject.getter(v69);
  os_log_type_t v71 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v70, v71))
  {
    os_log_type_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v73 = a1;
    uint64_t v74 = swift_slowAlloc(32LL, -1LL);
    uint64_t v114 = v74;
    *(_DWORD *)os_log_type_t v72 = 136315138;
    swift_bridgeObjectRetain(a2);
    id v116 = (id)sub_10007C22C(v73, a2, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v72 + 4, v72 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "ModifySubscriptions zone not found %s", v72, 0xCu);
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }